//namespace Bb.Oracle.Files
//{

//    public class Setting8E49EF8ACCConfigurationAttribute : SettingAttribute
//    {
//        public string Key { get; set; }
//        public string Display { get; set; }
//        public Object Value { get; set; }
//        public string ValueString { get; set; }
//        public Object ValueExtended { get; set; }
//    }

//}


//namespace Pssa.Tools.Databases.Scripters.Configurations
//{

//    /// <summary>
//    /// 
//    /// </summary>
//    /// <example>
//    /// <code lang="C#">
//    /// <![CDATA[
//    ///
//    /// // get the configuration :
//    /// Pssa.Tools.Databases.Scripters.Configurations.FolderSolutionSection config = Pssa.Tools.Databases.Scripters.Configurations.FolderSolutionSection.Configuration;
//    ///
//    /// ]]>
//    /// </code>
//    /// </example>
//    /// <example>
//    /// <code lang="VB">
//    /// <![CDATA[
//    /// 
//    /// // get the configuration :
//    /// Dim Config as Pssa.Tools.Databases.Scripters.Configurations.FolderSolutionSection = Pssa.Tools.Databases.Scripters.Configurations.FolderSolutionSection.Configuration
//    /// 
//    /// ]]>
//    /// </code>
//    /// </example>
//    /// <example>
//    /// <code lang="Xml">
//    /// <![CDATA[
//    ///
//    /// <configuration>
//    ///		<section name="folderSolutionSection" type="Pssa.Tools.Databases.Scripters.Configurations.FolderSolutionSection, Pssa.Tools.Databases.Scripters" />
//    /// </configSections>
//    ///
//    /// <folderSolutionSection>
//    ///    <folders>
//    ///       <add kind="" folderName="""" filenameMask=""{0}.{1}.plsql"" />
//    ///
//    ///    </folders>
//    ///
//    /// </folderSolutionSection>
//    ///
//    /// </configuration>
//    /// ]]>
//    /// </code>
//    /// </example>
//    /// <remarks>
//    /// generated by Configuration Designer
//    /// for more information on the tool, see http://devtm.fr
//    /// </remarks>
//    [System.Runtime.InteropServices.Guid("B146AB9F-367A-49AC-B018-1014ABFFD9D0")]
//    public partial class FolderSolutionSection : System.Configuration.ConfigurationSection, IXmlSerializable
//    {


//        #region Common


//        /// <summary>
//        /// Used to initialize a default set of values for the <see cref="FolderSolutionSection" /> 
//        /// object.
//        /// </summary>
//        public void InitializeDefaultValue()
//        {
//            base.InitializeDefault();
//        }


//        /// <summary>
//        /// Indicates whether this configuration element has been modified since it was
//        /// last saved or loaded, when implemented in a derived class.
//        /// </summary>
//        /// <returns><c>true</c> if the element has been modified; otherwise, <c>false</c>.</returns>
//        public bool ObjetctIsModified()
//        {
//            return base.IsModified();
//        }


//        /// <summary>
//        /// Gets a value indicating whether the <see cref="FolderSolutionSection" />
//        /// object is read-only.
//        /// </summary>
//        /// <returns><c>true</c> if the FolderSolutionSection object is read-only otherwise, <c>false</c>.</returns>
//        public bool ObjetctIsReadOnly()
//        {
//            return base.IsReadOnly();
//        }


//        #region IXmlSerializable


//        /// <summary>													
//        /// Updates the <see cref="FolderSolutionSection" /> with the values from an <see cref="XmlReader" />.													
//        /// </summary>													
//        /// <param name="reader">The <see cref="XmlReader" /> that reads the configuration source located at the element that describes the configuration section.</param>													
//        public void ReadXml(XmlReader reader)
//        {
//            if (reader == null) throw new ArgumentNullException("reader");

//            reader.Read();
//            DeserializeSection(reader);
//        }


//        /// <summary>													
//        /// Writes the <see cref="FolderSolutionSection" /> values as an XML element to an <see cref="XmlWriter" />.													
//        /// </summary>													
//        /// <param name="writer">The <see cref="XmlWriter" /> that writes to the configuration source.</param>													
//        public void WriteXml(XmlWriter writer)
//        {
//            if (writer == null) throw new ArgumentNullException("writer");

//            String serialized = SerializeSection(this, "FolderSolutionSection", ConfigurationSaveMode.Full);
//            writer.WriteRaw(serialized);
//        }


//        /// <summary>													
//        /// Returns the XML schema for the configuration section.													
//        /// </summary>													
//        /// <returns>A string with the XML schema, or <see langword="null" /> (<b>Nothing</b> 													
//        /// in Visual Basic) if there is no schema.</returns>													
//        public XmlSchema GetSchema()
//        {
//            return null;
//        }


//        #endregion IXmlSerializable


//        /// <summary>
//        /// Loads the file.
//        /// </summary>
//        /// <param name="filename">The filename.</param>
//        /// <returns></returns>
//        public static FolderSolutionSection LoadFile(string filename)
//        {
//            FolderSolutionSection config = new FolderSolutionSection();
//            XElement x = XElement.Load(filename);
//            var x2 = x.Element(FolderSolutionSection.DefaultName);
//            StringReader sReader = new StringReader(@"<?xml version=""1.0"" encoding=""utf-8"" ?>" + x2.ToString());
//            XmlReader reader = XmlReader.Create(sReader);
//            config.ReadXml(reader);
//            return config;
//        }

//        /// <summary>
//        /// Writes the file on the disk.
//        /// </summary>
//        /// <param name="filename">The filename.</param>
//        public void WriteFile(string filename)
//        {
//            FileInfo f = new FileInfo(filename);
//            if (f.Exists)
//                f.Delete();
//            var filemap = new ExeConfigurationFileMap() { ExeConfigFilename = f.FullName };
//            var conf = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(filemap, ConfigurationUserLevel.None);
//            conf.Sections.Add(FolderSolutionSection.DefaultName, this);
//            conf.Save(ConfigurationSaveMode.Minimal);
//        }

//        /// <summary>
//        /// Override the current <see cref="FolderSolutionSection" /> object with the parameters from the element.
//        /// </summary>
//        /// <returns></returns>
//        public void OverrideFrom(FolderSolutionSection element)
//        {

//            using (StringWriter sWriter = new StringWriter())
//            {

//                XmlWriter writer = XmlWriter.Create(sWriter);
//                element.WriteXml(writer);
//                writer.Flush();

//                StringReader sReader = new StringReader(sWriter.ToString());
//                XmlReader reader = XmlReader.Create(sReader);
//                this.ReadXml(reader);

//            }

//        }

//        #endregion Common



//        public const string DefaultName = "folderSolutionSection";

//        private static FolderSolutionSection _configuration;
//        public static FolderSolutionSection Configuration
//        {
//            get
//            {
//                return _configuration ?? (_configuration = System.Configuration.ConfigurationManager.GetSection(DefaultName) as FolderSolutionSection);
//            }
//            set
//            {
//                _configuration = value;
//            }
//        }


//        /// <summary>
//        /// Gets a writable <see cref="FolderSolutionSection" /> object with the parameters from the current.
//        /// </summary>
//        /// <returns></returns>
//        public FolderSolutionSection AsWritable()
//        {

//            FolderSolutionSection config = new FolderSolutionSection();

//            using (StringWriter sWriter = new StringWriter())
//            {

//                XmlWriter writer = XmlWriter.Create(sWriter);
//                this.WriteXml(writer);
//                writer.Flush();

//                StringReader sReader = new StringReader(sWriter.ToString());
//                XmlReader reader = XmlReader.Create(sReader);
//                config.ReadXml(reader);

//            }
//            return config;

//        }


//        /// <summary>
//        /// Gets the runtime<see cref="FolderSolutionSection" /> object.
//        /// </summary>
//        /// <returns></returns>
//        public FolderSolutionSection GetRuntimeFolderSolutionSectionSection()
//        {
//            FolderSolutionSection ret = base.GetRuntimeObject() as FolderSolutionSection;
//            return ret;
//        }



//        #region Refs

//        #region Folders

//        /// <summary>
//        /// Folders
//        /// </summary>
//        /// <returns>		
//        /// Objet <see cref="Pssa.Tools.Databases.Scripters.Configurations.FolderCollection" />.");
//        /// </returns>
//        [DisplayName("Folders")]
//        [Description("")]
//        [Category("Misc")]
//        [ConfigurationCollection(typeof(Pssa.Tools.Databases.Scripters.Configurations.FolderElement), AddItemName = "add", ClearItemsName = "clear", RemoveItemName = "remove")]
//        [ConfigurationProperty(FoldersConst, IsRequired = false)]
//        public Pssa.Tools.Databases.Scripters.Configurations.FolderCollection Folders
//        {
//            get { return (Pssa.Tools.Databases.Scripters.Configurations.FolderCollection)this[FoldersConst]; }
//        }
//        public const string FoldersConst = "folders";

//        #endregion

//        #endregion Refs


//        /// <summary>
//        /// Checks the specified test.
//        /// </summary>
//        /// <param name="tests">The type.</param>
//        public List<FolderSolutionSectionCheck.Error> Check(params Type[] tests)
//        {

//            List<FolderSolutionSectionCheck.Error> Errors = new List<FolderSolutionSectionCheck.Error>();

//            bool throwOnMessage = false;
//            foreach (Type typeTest in tests)
//            {

//                FolderSolutionSectionCheck test
//                    = Activator.CreateInstance(typeTest) as FolderSolutionSectionCheck;

//                test.Errors = Errors;

//                test.Check(this);

//                throwOnMessage = throwOnMessage | test._throwOnMessage;

//            }

//            if (throwOnMessage)
//                throw new FolderSolutionSectionCheck.FolderSolutionSectionException("FolderSolutionSection is in error. please see the list of error in this exception") { Errors = Errors, Config = this };

//            return Errors;

//        }


//    }



//    #region Checks

//    /// <summary>
//    /// Test on  FolderSolutionSection(
//    /// </summary>
//    public abstract class FolderSolutionSectionCheck
//    {

//        internal bool _throwOnMessage = false;

//        /// <summary>
//        /// run the test on the specified config.
//        /// </summary>
//        /// <param name="config">The config.</param>
//        protected internal abstract void Check(FolderSolutionSection config);


//        /// <summary>
//        /// Gets or sets the errors.
//        /// </summary>
//        /// <value>The errors.</value>
//        public System.Collections.Generic.List<Error> Errors { get; set; }


//        /// <summary>
//        /// Logs the error.
//        /// </summary>
//        /// <param name="error">The error.</param>
//        /// <param name="throwOnMessage">if set to <c>true</c> [throw on message].</param>
//        /// <param name="sender">The sender.</param>
//        /// <param name="message">The message.</param>
//        /// <param name="args">The args.</param>
//        protected internal void Log(string error, bool throwOnMessage, ConfigurationElement sender, string message, params object[] args)
//        {
//            _throwOnMessage = throwOnMessage || _throwOnMessage;
//            message = string.Format(message, args);
//            Errors.Add(new Error() { Message = message, Sender = sender, ThrowOnMessage = throwOnMessage });
//        }


//        /// <summary>
//        /// message log
//        /// </summary>
//        public class Error
//        {

//            /// <summary>
//            /// Gets or sets the message.
//            /// </summary>
//            /// <value>The message.</value>
//            public string Message { get; set; }

//            /// <summary>
//            /// Gets or sets the sender.
//            /// </summary>
//            /// <value>The sender.</value>
//            public ConfigurationElement Sender { get; set; }

//            /// <summary>
//            /// Gets or sets a value indicating whether [throw on message].
//            /// </summary>
//            /// <value><c>true</c> if [throw on message]; otherwise, <c>false</c>.</value>
//            public bool ThrowOnMessage { get; set; }

//        }



//        /// <summary>
//        /// Exception for the missing FolderSolutionSection configuration
//        /// </summary>
//        [Serializable]
//        public class MissingFolderSolutionSectionException : Exception
//        {


//            /// <summary>
//            /// Initializes a new instance of the <see cref="MissingFolderSolutionSectionException"/> class.
//            /// </summary>
//            public MissingFolderSolutionSectionException() { }


//            /// <summary>
//            /// Initializes a new instance of the <see cref="MissingFolderSolutionSectionException"/> class.
//            /// </summary>
//            /// <param name="message">The message that describes the error.</param>
//            public MissingFolderSolutionSectionException(string message) : base(message) { }


//            /// <summary>
//            /// Initializes a new instance of the <see cref="MissingFolderSolutionSectionException"/> class.
//            /// </summary>
//            /// <param name="message">The message that describes the error.</param>
//            /// <param name="inner">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
//            public MissingFolderSolutionSectionException(string message, Exception inner) : base(message, inner) { }

//            /// <summary>
//            /// Initializes a new instance of the <see cref="MissingFolderSolutionSectionException"/> class.
//            /// </summary>
//            /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
//            /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
//            /// <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
//            /// <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
//            protected MissingFolderSolutionSectionException(
//              System.Runtime.Serialization.SerializationInfo info,
//              System.Runtime.Serialization.StreamingContext context)
//                : base(info, context) { }
//        }


//        /// <summary>
//        /// Exception for the check FolderSolutionSection configuration
//        /// </summary>
//        [Serializable]
//        public class FolderSolutionSectionException : Exception
//        {

//            /// <summary>
//            /// Initializes a new instance of the <see cref="FolderSolutionSectionException"/> class.
//            /// </summary>
//            public FolderSolutionSectionException() { }


//            /// <summary>
//            /// Initializes a new instance of the <see cref="FolderSolutionSectionException"/> class.
//            /// </summary>
//            /// <param name="message">The message.</param>
//            public FolderSolutionSectionException(string message) : base(message) { }


//            /// <summary>
//            /// Initializes a new instance of the <see cref="FolderSolutionSectionException"/> class.
//            /// </summary>
//            /// <param name="message">The message.</param>
//            /// <param name="inner">The inner.</param>
//            public FolderSolutionSectionException(string message, Exception inner) : base(message, inner) { }


//            /// <summary>
//            /// Initializes a new instance of the <see cref="FolderSolutionSectionException"/> class.
//            /// </summary>
//            /// <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
//            /// <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
//            /// <exception cref="T:System.ArgumentNullException">
//            /// The <paramref name="info"/> parameter is null.
//            /// </exception>
//            /// <exception cref="T:System.Runtime.Serialization.SerializationException">
//            /// The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
//            /// </exception>
//            protected FolderSolutionSectionException(
//              System.Runtime.Serialization.SerializationInfo info,
//              System.Runtime.Serialization.StreamingContext context)
//                : base(info, context) { }


//            /// <summary>
//            /// Get the list of error
//            /// </summary>
//            public List<FolderSolutionSectionCheck.Error> Errors { get; internal set; }


//            /// <summary>
//            /// Gets the config.
//            /// </summary>
//            /// <value>The config.</value>
//            public FolderSolutionSection Config { get; internal set; }


//            /// <summary>
//            /// Gets the full description on errors.
//            /// </summary>
//            /// <value>The full error description.</value>
//            public string FullErrorDescription
//            {
//                get
//                {
//                    StringBuilder s = new StringBuilder(Message);

//                    foreach (FolderSolutionSectionCheck.Error item in Errors)
//                        s.AppendLine(item.Sender.GetType().FullName + "  " + item.Message);

//                    return s.ToString();
//                }
//            }


//        }

//    }

//    #endregion Checks

//}

//namespace Pssa.Tools.Databases.Scripters.Configurations
//{

//    /// <summary>
//    /// 
//    /// </summary>
//    /// <remarks>
//    /// generated by Configuration Designer
//    /// for more information on the tool, see http://devtm.fr
//    /// </remarks>
//    public partial class FolderCollection : System.Configuration.ConfigurationElementCollection
//    {



//        /// <summary>
//        /// Ctor
//        /// </summary>
//        public FolderCollection() { }

//        /// <summary>
//        /// return Configuration Element Collection Type <see cref="T:AddRemoveClearMap" />
//        /// </summary>
//        public override ConfigurationElementCollectionType CollectionType
//        {
//            get { return ConfigurationElementCollectionType.AddRemoveClearMap; }
//        }


//        /// <summary>
//        /// Return the attribute element 'kind' in the xml
//        /// </summary>
//        protected override string ElementName { get { return "kind"; } }


//        /// <summary>
//        /// Create a new <see cref="Pssa.Tools.Databases.Scripters.Configurations.FolderElement" /> for the current collection
//        /// </summary>
//        /// <returns></returns>
//        protected override ConfigurationElement CreateNewElement() { return new Pssa.Tools.Databases.Scripters.Configurations.FolderElement(); }


//        /// <summary>
//        /// return the key for specified element
//        /// </summary>
//        /// <param name="element">Pssa.Tools.Databases.Scripters.Configurations.FolderElement</param>
//        /// <returns>as Pssa.Tools.Databases.Scripters.Configurations.FolderElement</returns>
//        protected override object GetElementKey(ConfigurationElement element) { return ((Pssa.Tools.Databases.Scripters.Configurations.FolderElement)element).Kind; }


//        /// <summary>
//        /// Add a new item
//        /// </summary>
//        /// <param name="element">the Pssa.Tools.Databases.Scripters.Configurations.FolderElement to add</param>
//        /// <returns>the added Pssa.Tools.Databases.Scripters.Configurations.FolderElement in parameter</returns>
//        public Pssa.Tools.Databases.Scripters.Configurations.FolderElement Add(Pssa.Tools.Databases.Scripters.Configurations.FolderElement element)
//        {
//            BaseAdd(element);
//            return element;
//        }

//        /// <summary>
//        /// remove the item specified by this key
//        /// </summary>
//        /// <param name="key">as a Pssa.Tools.Databases.Models.KindModelEnum type</param>
//        public void Remove(KindModelEnum key) { BaseRemove(key); }


//        /// <summary>
//        /// Clear the collection
//        /// </summary>
//        public void Clear() { BaseClear(); }

//        /// <summary>
//        /// return the item specified by this key
//        /// </summary>
//        /// <param name="index">as a Pssa.Tools.Databases.Models.KindModelEnum type</param>
//        public Pssa.Tools.Databases.Scripters.Configurations.FolderElement this[KindModelEnum index]
//        {
//            get { return (Pssa.Tools.Databases.Scripters.Configurations.FolderElement)BaseGet(index); }
//        }


//        /// <summary>
//        /// return the item specified by this index in the collection
//        /// </summary>
//        /// <param name="index">as a Pssa.Tools.Databases.Models.KindModelEnum type</param>
//        public Pssa.Tools.Databases.Scripters.Configurations.FolderElement this[int index]
//        {
//            get { return (Pssa.Tools.Databases.Scripters.Configurations.FolderElement)BaseGet(index); }
//            set
//            {
//                if (BaseGet(index) != null)
//                    BaseRemoveAt(index);
//                BaseAdd(index, value);
//            }
//        }


//        /// <summary>
//        /// Indicates whether the specified <see cref="Pssa.Tools.Databases.Scripters.Configurations.FolderElement" /> exists in the Collection.
//        /// </summary>
//        /// <param name="key">The key of the element to verify.</param>
//        /// <returns><c>true</c> if the element exists in the collection; otherwise, <c>false</c>. The default is <c>false</c>.</returns>
//        public bool Contains(KindModelEnum key)
//        {
//            return base.BaseGet(key) != null;
//        }


//        /// <summary>
//        /// Gets a value indicating whether the specified <see cref="Pssa.Tools.Databases.Scripters.Configurations.FolderElement" /> can be removed from the Collection.
//        /// </summary>
//        /// <param name="element">The element to check.</param>
//        /// <returns><c>true</c> if the specified Pssa.Tools.Databases.Scripters.Configurations.FolderElement can be removed from this Collection; otherwise, <c>false</c>. The default is <c>true</c>.</returns>
//        public bool IsRemovable(Pssa.Tools.Databases.Scripters.Configurations.FolderElement element)
//        {
//            return base.IsElementRemovable(element);
//        }


//        /// <summary>
//        /// The index of the specified <see cref="Pssa.Tools.Databases.Scripters.Configurations.FolderElement" />.
//        /// </summary>
//        /// <param name="element">The Pssa.Tools.Databases.Scripters.Configurations.FolderElement for the specified index location.</param>
//        /// <returns>The index of the specified Pssa.Tools.Databases.Scripters.Configurations.FolderElement; otherwise, -1.</returns>
//        public int IndexOf(Pssa.Tools.Databases.Scripters.Configurations.FolderElement element)
//        {
//            return base.BaseIndexOf(element);
//        }


//        /// <summary>
//        /// Gets the key for the <see cref="Pssa.Tools.Databases.Scripters.Configurations.FolderElement" /> at the specified index location.
//        /// </summary>
//        /// <param name="index">The index location for the Pssa.Tools.Databases.Scripters.Configurations.FolderElement.</param>
//        /// <returns>The key for the specified Pssa.Tools.Databases.Scripters.Configurations.FolderElement.</returns>
//        public string GetKey(int index)
//        {
//            return base.BaseGetKey(index).ToString();
//        }


//        /// <summary>
//        /// The index of the specified <see cref="Pssa.Tools.Databases.Scripters.Configurations.FolderElement" />.
//        /// </summary>
//        /// <param name="key">The Pssa.Tools.Databases.Scripters.Configurations.FolderElement for the specified index location.</param>
//        /// <returns>The index of the specified Pssa.Tools.Databases.Scripters.Configurations.FolderElement; otherwise, -1.</returns>
//        public bool IsRemoved(KindModelEnum key)
//        {
//            return base.BaseIsRemoved(key);
//        }


//    }



//}

//namespace Pssa.Tools.Databases.Scripters.Configurations
//{

//    /// <summary>
//    /// 
//    /// </summary>
//    /// <remarks>
//    /// generated by Configuration Designer
//    /// for more information on the tool, see http://devtm.fr
//    /// </remarks>
//    public partial class FolderElement : System.Configuration.ConfigurationElement
//    {



//        #region Attributes

//        #region Kind

//        /// <summary>
//        /// Kind
//        /// </summary>
//        [DisplayName("Kind")]
//        [Description("")]
//        [Category("Misc")]
//        [ConfigurationProperty(KindConst, IsRequired = false)]
//        public KindModelEnum Kind
//        {
//            get
//            {
//                return (KindModelEnum)this[KindConst];
//            }
//            set
//            {
//                this[KindConst] = value;
//            }
//        }
//        public const string KindConst = "kind";

//        #endregion

//        #region Folder Name

//        /// <summary>
//        /// Folder Name
//        /// </summary>
//        [DisplayName("Folder Name")]
//        [Description("")]
//        [Category("Misc")]
//        [ConfigurationProperty(FolderNameConst, IsRequired = false, DefaultValue = "")]
//        public System.String FolderName
//        {
//            get
//            {
//                return (System.String)this[FolderNameConst];
//            }
//            set
//            {
//                this[FolderNameConst] = value;
//            }
//        }
//        public const string FolderNameConst = "folderName";

//        #endregion

//        #region Filename Mask

//        /// <summary>
//        /// Filename Mask
//        /// </summary>
//        [DisplayName("Filename Mask")]
//        [Description("")]
//        [Category("Misc")]
//        [ConfigurationProperty(FilenameMaskConst, IsRequired = false, DefaultValue = @"{0}.{1}.plsql")]
//        public System.String FilenameMask
//        {
//            get
//            {
//                return (System.String)this[FilenameMaskConst];
//            }
//            set
//            {
//                this[FilenameMaskConst] = value;
//            }
//        }
//        public const string FilenameMaskConst = "filenameMask";

//        #endregion

//        #endregion Attributes


//    }



//}
		


//}