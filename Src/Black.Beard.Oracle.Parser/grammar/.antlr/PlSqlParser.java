// Generated from c:\src\Oracle.Parser\Src\Black.Beard.Oracle.Parser\grammar\PlSqlParser.g4 by ANTLR 4.7.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACCESS=1, ACCOUNT=2, ADD=3, ADMIN=4, ADMINISTER=5, ADVANCED=6, ADVISOR=7, 
		AFTER=8, AGENT=9, AGGREGATE=10, A_LETTER=11, ALL=12, ALLOW=13, ALTER=14, 
		ALWAYS=15, ANALYZE=16, AND=17, ANY=18, ANYSCHEMA=19, ARCHIVAL=20, ARCHIVE=21, 
		ARRAY=22, AS=23, ASC=24, ASSOCIATE=25, AT=26, ATTRIBUTE=27, AUDIT=28, 
		AUTHENTICATED=29, AUTHENTICATION=30, AUTHID=31, AUTOALLOCATE=32, AUTO=33, 
		AUTOEXTEND=34, AUTOMATIC=35, AUTONOMOUS_TRANSACTION=36, BACKUP=37, BASIC=38, 
		BASICFILE=39, BATCH=40, BECOME=41, BEFORE=42, BEGIN=43, BETWEEN=44, BFILE=45, 
		BIGFILE=46, BINARY=47, BINARY_DOUBLE=48, BINARY_FLOAT=49, BINARY_INTEGER=50, 
		BLOB=51, BLOCK=52, BLOCKSIZE=53, BODY=54, BOOLEAN=55, BOTH=56, BREADTH=57, 
		BUFFER_POOL=58, BUILD=59, BULK=60, BY=61, BYTE=62, CACHE=63, CALL=64, 
		CANONICAL=65, CAPACITY=66, CASCADE=67, CASE=68, CAST=69, CERTIFICATE=70, 
		CHANGE=71, CHARACTER=72, CHAR=73, CHAR_CS=74, CHECK=75, CHR=76, CHUNK=77, 
		CLASS=78, C_LETTER=79, CLOB=80, CLOSE=81, CLUSTER=82, CLUSTERING=83, COALESCE=84, 
		COLLECT=85, COLUMN=86, COLUMNS=87, COMMENT=88, COMMIT=89, COMMITTED=90, 
		COMPATIBILITY=91, COMPILE=92, COMPOUND=93, COMPRESS=94, COMPUTE=95, CONNECT_BY_ROOT=96, 
		CONNECT=97, CONSTANT=98, CONSTRAINT=99, CONSTRAINTS=100, CONSTRUCTOR=101, 
		CONTAINER=102, CONTAINER_DATA=103, CONTENT=104, CONTEXT=105, CONTINUE=106, 
		CONVERT=107, CORRUPT_XID_ALL=108, CORRUPT_XID=109, COST=110, COUNT=111, 
		CREATE=112, CREATION=113, CRITICAL=114, CROSS=115, CUBE=116, CURRENT=117, 
		CURRENT_USER=118, CURSOR=119, CUSTOMDATUM=120, CYCLE=121, DATABASE=122, 
		DATA=123, DATAFILE=124, DATE=125, DAY=126, DAYS=127, DBA_RECYCLEBIN=128, 
		DB_ROLE_CHANGE=129, DBTIMEZONE=130, DDL=131, DEBUG=132, DEC=133, DECIMAL=134, 
		DECLARE=135, DECOMPOSE=136, DECREMENT=137, DECRYPT=138, DEDUPLICATE=139, 
		DEFAULT=140, DEFAULTS=141, DEFERRABLE=142, DEFERRED=143, DEFINER=144, 
		DELEGATE=145, DELETE=146, DEPTH=147, DESC=148, DETERMINISTIC=149, DICTIONARY=150, 
		DIMENSION=151, DIRECTORY=152, DISABLE=153, DISALLOW=154, DISASSOCIATE=155, 
		DISTINCT=156, DISTINGUISHED=157, DISTRIBUTE=158, DML=159, DOCUMENT=160, 
		DOUBLE=161, DROP=162, DSINTERVAL_UNCONSTRAINED=163, DUPLICATE=164, EACH=165, 
		EDITIONABLE=166, EDITION=167, EDITIONING=168, EDITIONS=169, ELEMENT=170, 
		ELSE=171, ELSIF=172, EMPTY=173, ENABLE=174, ENCODING=175, ENCRYPT=176, 
		ENCRYPTION=177, END=178, ENTERPRISE=179, ENTITYESCAPING=180, ERR=181, 
		ERRORS=182, ESCAPE=183, EVALNAME=184, EVALUATION=185, EXCEPT=186, EXCEPTION=187, 
		EXCEPTION_INIT=188, EXCEPTIONS=189, EXCLUDE=190, EXCLUSIVE=191, EXECUTE=192, 
		EXEMPT=193, EXISTS=194, EXIT=195, EXPIRE=196, EXPLAIN=197, EXTENT=198, 
		EXTERNAL=199, EXTERNALLY=200, EXTRACT=201, FAILURE=202, FALSE=203, FETCH=204, 
		FILESYSTEM_LIKE_LOGGING=205, FINAL=206, FIRST=207, FIRST_VALUE=208, FLASHBACK=209, 
		FLASH_CACHE=210, FLOAT=211, FOLDER=212, FOLLOWING=213, FOLLOWS=214, FORALL=215, 
		FORCE=216, FOREIGN=217, FOR=218, FREELIST=219, FREELISTS=220, FREEPOOLS=221, 
		FROM=222, FULL=223, FUNCTION=224, GENERATED=225, GLOBAL=226, GLOBALLY=227, 
		GOTO=228, GRANT=229, GROUP=230, GROUPING=231, GROUPS=232, GUARANTEE=233, 
		HASH=234, HAVING=235, HEAP=236, HIDE=237, HIERARCHY=238, HIGH=239, HOUR=240, 
		IDENTIFIED=241, IDENTIFIER=242, IDENTITY=243, ID=244, IF=245, IGNORE=246, 
		ILM=247, IMMEDIATE=248, INCLUDE=249, INCLUDING=250, INCREMENT=251, INDENT=252, 
		INDEXED=253, INDEX=254, INDEXING=255, INDEXTYPE=256, INDICATOR=257, INDICES=258, 
		INFINITE=259, INHERIT=260, IN=261, INITIAL=262, INITIALLY=263, INITRANS=264, 
		INLINE=265, INMEMORY=266, INNER=267, INOUT=268, INSERT=269, INSTANTIABLE=270, 
		INSTEAD=271, INTEGER=272, INTERSECT=273, INTERVAL=274, INTERVLEAVED=275, 
		INT=276, INTO=277, INVALIDATE=278, INVISIBLE=279, IS=280, ISOLATION=281, 
		ITERATE=282, JAVA=283, JOB=284, JOIN=285, KEEP_DUPLICATES=286, KEEP=287, 
		KEY=288, LANGUAGE=289, LAST=290, LAST_VALUE=291, LEADING=292, LEFT=293, 
		LESS=294, LEVEL=295, LEVELS=296, LIBRARY=297, LIKE2=298, LIKE4=299, LIKEC=300, 
		LIKE=301, LIMIT=302, LINEAR=303, LINK=304, LIST=305, LOAD=306, LOB=307, 
		LOBS=308, LOCAL=309, LOCATION=310, LOCATOR=311, LOCKED=312, LOCKING=313, 
		LOCK=314, LOGGING=315, LOG=316, LOGMINING=317, LOGOFF=318, LOGON=319, 
		LONG=320, LOOP=321, LOW=322, MAIN=323, MANAGE=324, MANAGEMENT=325, MANUAL=326, 
		MAP=327, MAPPING=328, MATCHED=329, MATERIALIZED=330, MAXSIZE=331, MAXVALUE=332, 
		MEASURE=333, MEASURES=334, MEDIUM=335, MEMBER=336, MEMCOMPRESS=337, MERGE=338, 
		MINEXTENTS=339, MINIMUM=340, MINING=341, MINUS=342, MINUTE=343, MINVALUE=344, 
		MLSLABEL=345, MODEL=346, MODE=347, MODIFICATION=348, MODIFY=349, MONTH=350, 
		MONTHS=351, MOVEMENT=352, MULTISET=353, NAME=354, NAN=355, NATURAL=356, 
		NATURALN=357, NAV=358, NCHAR_CS=359, NCHAR=360, NCLOB=361, NESTED=362, 
		NEW=363, NEXT=364, NOAUDIT=365, NOCACHE=366, NOCOMPRESS=367, NOCOPY=368, 
		NOCYCLE=369, NOEDITIONABLE=370, NOENTITYESCAPING=371, NOGUARANTEE=372, 
		NOKEEP=373, NOLOGGING=374, NOMAPPING=375, NOMAXVALUE=376, NOMINVALUE=377, 
		NONEDITIONABLE=378, NONE=379, NO=380, NONSCHEMA=381, NOORDER=382, NOPARALLEL=383, 
		NORELY=384, NOROWDEPENDENCIES=385, NOSCHEMACHECK=386, NOSORT=387, NOTIFICATION=388, 
		NOT=389, NOVALIDATE=390, NOWAIT=391, NULL=392, NULLS=393, NUMBER=394, 
		NUMERIC=395, NVARCHAR2=396, OBJECT=397, OFFLINE=398, OFF=399, OF=400, 
		OID=401, OLD=402, OLTP=403, ONLINE=404, ONLY=405, ON=406, OPEN=407, OPERATOR=408, 
		OPTIMAL=409, OPTION=410, ORADATA=411, ORDER=412, ORDINALITY=413, ORGANIZATION=414, 
		OR=415, OSERROR=416, OUTER=417, OUTLINE=418, OUT=419, OVERFLOW=420, OVER=421, 
		OVERRIDING=422, PACKAGE=423, PARALLEL_ENABLE=424, PARALLEL=425, PARAMETERS=426, 
		PARENT=427, PARTIAL=428, PARTITION=429, PARTITIONS=430, PASSING=431, PASSWORD=432, 
		PATH=433, PCTFREE=434, PCTINCREASE=435, PCTTHRESHOLD=436, PCTUSED=437, 
		PCTVERSION=438, PERCENT_FOUND=439, PERCENT_ISOPEN=440, PERCENT_NOTFOUND=441, 
		PERCENT_ROWCOUNT=442, PERCENT_ROWTYPE=443, PERCENT_TYPE=444, PIPELINED=445, 
		PIPE=446, PIVOT=447, PLAN=448, PLS_INTEGER=449, PLUGGABLE=450, POLICY=451, 
		POSITIVEN=452, POSITIVE=453, PRAGMA=454, PRECEDING=455, PRECISION=456, 
		PRESENT=457, PRESERVE=458, PRIMARY=459, PRIORITY=460, PRIOR=461, PRIVILEGE=462, 
		PRIVILEGES=463, PROCEDURE=464, PROCESS=465, PROFILE=466, PROGRAM=467, 
		PUBLIC=468, PURGE=469, QUERY=470, QUOTA=471, RAISE=472, RANGE=473, RAW=474, 
		READ=475, READS=476, REAL=477, RECORD=478, RECYCLE=479, REDACTION=480, 
		REFERENCE=481, REFERENCES=482, REFERENCING=483, REF=484, REFRESH=485, 
		REJECT=486, RELATIONAL=487, RELIES_ON=488, RELY=489, REMOVE=490, RENAME=491, 
		REPLACE=492, REQUIRED=493, RESOURCE=494, RESPECT=495, RESTRICTED=496, 
		RESTRICT_REFERENCES=497, RESULT_CACHE=498, RESULT=499, RESUMABLE=500, 
		RETENTION=501, RETURNING=502, RETURN=503, REUSE=504, REVERSE=505, REVOKE=506, 
		REWRITE=507, RIGHT=508, ROLE=509, ROLES=510, ROLLBACK=511, ROLLUP=512, 
		ROWDEPENDENCIES=513, ROWID=514, ROW=515, ROWS=516, RULES=517, SALT=518, 
		SAMPLE=519, SAVEPOINT=520, SAVE=521, SCHEDULER=522, SCHEMACHECK=523, SCHEMA=524, 
		SCN=525, SCOPE=526, SEARCH=527, SECOND=528, SECUREFILE=529, SEED=530, 
		SEGMENT=531, SELECT=532, SELF=533, SEQUENCE=534, SEQUENTIAL=535, SERIALIZABLE=536, 
		SERIALLY_REUSABLE=537, SERVERERROR=538, SESSION=539, SESSIONTIMEZONE=540, 
		SET=541, SETS=542, SETTINGS=543, SHARE=544, SHARP=545, SHOW=546, SHUTDOWN=547, 
		SIBLINGS=548, SIGNTYPE=549, SIMPLE_INTEGER=550, SINGLE=551, SIZE=552, 
		SKIP_=553, SMALLFILE=554, SMALLINT=555, SNAPSHOT=556, SOME=557, SORT=558, 
		SOURCE=559, SPACE_KEYWORD=560, SPECIFICATION=561, SQLDATA=562, SQLERROR=563, 
		SQL=564, STANDALONE=565, START=566, STARTUP=567, STATEMENT_ID=568, STATEMENT=569, 
		STATIC=570, STATISTICS=571, STORAGE=572, STORE=573, STRING=574, SUBMULTISET=575, 
		SUBPARTITIONS=576, SUBPARTITION=577, SUBSTITUTABLE=578, SUBTYPE=579, SUCCESS=580, 
		SUPPLEMENTAL=581, SUSPEND=582, SYNONYM=583, SYSBACKUP=584, SYSDATE=585, 
		SYSDBA=586, SYSDG=587, SYSGUID=588, SYSKM=589, SYSOPER=590, SYSTEM=591, 
		TABLESPACE=592, TABLES=593, TABLE=594, TEMPFILE=595, TEMPLATE=596, TEMPORARY=597, 
		THAN=598, THEN=599, THE=600, THROUGH=601, TIER=602, TIMESTAMP_LTZ_UNCONSTRAINED=603, 
		TIMESTAMP=604, TIMESTAMP_TZ_UNCONSTRAINED=605, TIMESTAMP_UNCONSTRAINED=606, 
		TIME=607, TIMEZONE_ABBR=608, TIMEZONE_HOUR=609, TIMEZONE_MINUTE=610, TIMEZONE_REGION=611, 
		TO=612, TRAILING=613, TRANSACTION=614, TRANSLATE=615, TRANSLATION=616, 
		TREAT=617, TRIGGER=618, TRUE=619, TRUNCATE=620, TUNING=621, TYPE=622, 
		UNBOUNDED=623, UNDER=624, UNDO=625, UNIFORM=626, UNION=627, UNIQUE=628, 
		UNLIMITED=629, UNLOCK=630, UNPIVOT=631, UNTIL=632, UNUSABLE=633, UPDATED=634, 
		UPDATE=635, UPSERT=636, UROWID=637, USABLE=638, USERS=639, USER=640, USE=641, 
		USING=642, VALIDATE=643, VALUES=644, VALUE=645, VARCHAR2=646, VARCHAR=647, 
		VARIABLE=648, VARRAYS=649, VARRAY=650, VARYING=651, VERSIONS=652, VERSION=653, 
		VIEW=654, VIRTUAL=655, VISIBLE=656, WAIT=657, WARNING=658, WELLFORMED=659, 
		WHENEVER=660, WHEN=661, WHERE=662, WHILE=663, WITHIN=664, WITHOUT=665, 
		WITH=666, WORK=667, WRITE=668, XMLAGG=669, XMLATTRIBUTES=670, XMLCAST=671, 
		XMLCOLATTVAL=672, XMLELEMENT=673, XMLEXISTS=674, XMLFOREST=675, XMLNAMESPACES=676, 
		XMLPARSE=677, XMLPI=678, XMLQUERY=679, XMLROOT=680, XMLSCHEMA=681, XMLSERIALIZE=682, 
		XMLTABLE=683, XMLTYPE=684, XML=685, YEARS=686, YEAR=687, YES=688, YMINTERVAL_UNCONSTRAINED=689, 
		ZONEMAP=690, ZONE=691, PREDICTION=692, PREDICTION_BOUNDS=693, PREDICTION_COST=694, 
		PREDICTION_DETAILS=695, PREDICTION_PROBABILITY=696, PREDICTION_SET=697, 
		CUME_DIST=698, DENSE_RANK=699, LISTAGG=700, PERCENT_RANK=701, PERCENTILE_CONT=702, 
		PERCENTILE_DISC=703, RANK=704, AVG=705, CORR=706, COVAR_=707, DECODE=708, 
		LAG=709, LEAD=710, MAX=711, MEDIAN=712, MIN=713, NTILE=714, NVL=715, RATIO_TO_REPORT=716, 
		REGR_=717, ROUND=718, ROW_NUMBER=719, SUBSTR=720, TO_CHAR=721, TRIM=722, 
		SUM=723, STDDEV=724, VAR_=725, VARIANCE=726, LEAST=727, GREATEST=728, 
		TO_DATE=729, VARIABLE_SESSION=730, NATIONAL_CHAR_STRING_LIT=731, BIT_STRING_LIT=732, 
		HEX_STRING_LIT=733, DOUBLE_PERIOD=734, PERIOD=735, UNSIGNED_INTEGER=736, 
		APPROXIMATE_NUM_LIT=737, CHAR_STRING=738, DELIMITED_ID=739, PERCENT=740, 
		AMPERSAND=741, LEFT_PAREN=742, RIGHT_PAREN=743, DOUBLE_ASTERISK=744, ASTERISK=745, 
		PLUS_SIGN=746, MINUS_SIGN=747, COMMA=748, SOLIDUS=749, AT_SIGN=750, ASSIGN_OP=751, 
		BINDVAR=752, NOT_EQUAL_OP=753, CARRET_OPERATOR_PART=754, TILDE_OPERATOR_PART=755, 
		EXCLAMATION_OPERATOR_PART=756, GREATER_THAN_OP=757, LESS_THAN_OP=758, 
		COLON=759, SEMICOLON=760, BAR=761, EQUALS_OP=762, LEFT_BRACKET=763, RIGHT_BRACKET=764, 
		BIND_VAR=765, INTRODUCER=766, SPACES=767, SINGLE_LINE_COMMENT=768, MULTI_LINE_COMMENT=769, 
		PROMPT=770, START_CMD=771, REGULAR_ID=772, ZV=773;
	public static final int
		RULE_sql_script = 0, RULE_unit_statement = 1, RULE_drop_function = 2, 
		RULE_alter_function = 3, RULE_create_function_body = 4, RULE_parallel_enable_clause = 5, 
		RULE_partition_by_clause = 6, RULE_result_cache_clause = 7, RULE_relies_on_part = 8, 
		RULE_streaming_clause = 9, RULE_drop_package = 10, RULE_alter_package = 11, 
		RULE_create_package = 12, RULE_create_package_body = 13, RULE_package_obj_spec = 14, 
		RULE_procedure_spec = 15, RULE_function_spec = 16, RULE_package_obj_body = 17, 
		RULE_drop_procedure = 18, RULE_alter_procedure = 19, RULE_function_body = 20, 
		RULE_procedure_body = 21, RULE_create_procedure_body = 22, RULE_drop_trigger = 23, 
		RULE_alter_trigger = 24, RULE_create_trigger = 25, RULE_trigger_follows_clause = 26, 
		RULE_trigger_when_clause = 27, RULE_simple_dml_trigger = 28, RULE_for_each_row = 29, 
		RULE_compound_dml_trigger = 30, RULE_non_dml_trigger = 31, RULE_trigger_body = 32, 
		RULE_routine_clause = 33, RULE_compound_trigger_block = 34, RULE_timing_point_section = 35, 
		RULE_non_dml_event = 36, RULE_dml_event_clause = 37, RULE_dml_event_element = 38, 
		RULE_dml_event_nested_clause = 39, RULE_referencing_clause = 40, RULE_referencing_element = 41, 
		RULE_drop_type = 42, RULE_alter_type = 43, RULE_compile_type_clause = 44, 
		RULE_replace_type_clause = 45, RULE_alter_method_spec = 46, RULE_alter_method_element = 47, 
		RULE_alter_attribute_definition = 48, RULE_attribute_definition = 49, 
		RULE_alter_collection_clauses = 50, RULE_dependent_handling_clause = 51, 
		RULE_dependent_exceptions_part = 52, RULE_create_type = 53, RULE_type_definition = 54, 
		RULE_object_type_def = 55, RULE_object_as_part = 56, RULE_object_under_part = 57, 
		RULE_nested_table_type_def = 58, RULE_sqlj_object_type = 59, RULE_type_body = 60, 
		RULE_type_body_elements = 61, RULE_map_order_func_declaration = 62, RULE_subprog_decl_in_type = 63, 
		RULE_proc_decl_in_type = 64, RULE_func_decl_in_type = 65, RULE_constructor_declaration = 66, 
		RULE_modifier_clause = 67, RULE_object_member_spec = 68, RULE_sqlj_object_type_attr = 69, 
		RULE_element_spec = 70, RULE_element_spec_options = 71, RULE_subprogram_spec = 72, 
		RULE_type_procedure_spec = 73, RULE_type_function_spec = 74, RULE_constructor_spec = 75, 
		RULE_map_order_function_spec = 76, RULE_pragma_clause = 77, RULE_pragma_elements = 78, 
		RULE_type_elements_parameter = 79, RULE_drop_sequence = 80, RULE_alter_sequence = 81, 
		RULE_create_sequence = 82, RULE_sequence_spec = 83, RULE_create_index = 84, 
		RULE_alter_index = 85, RULE_create_user = 86, RULE_alter_user = 87, RULE_alter_identified_by = 88, 
		RULE_identified_by = 89, RULE_identified_other_clause = 90, RULE_user_tablespace_clause = 91, 
		RULE_quota_clause = 92, RULE_profile_clause = 93, RULE_role_clause = 94, 
		RULE_user_default_role_clause = 95, RULE_password_expire_clause = 96, 
		RULE_user_lock_clause = 97, RULE_user_editions_clause = 98, RULE_alter_user_editions_clause = 99, 
		RULE_proxy_clause = 100, RULE_container_names = 101, RULE_set_container_data = 102, 
		RULE_add_rem_container_data = 103, RULE_container_data_clause = 104, RULE_drop_index = 105, 
		RULE_revoke_statment = 106, RULE_revoke_system_privileges = 107, RULE_revoke_object_privileges = 108, 
		RULE_grant_statement = 109, RULE_container_clause = 110, RULE_create_view = 111, 
		RULE_view_options = 112, RULE_view_alias_constraint = 113, RULE_object_view_clause = 114, 
		RULE_constraint = 115, RULE_inline_constraint = 116, RULE_out_of_line_constraint = 117, 
		RULE_constraint_state = 118, RULE_using_index_clause = 119, RULE_index_properties = 120, 
		RULE_global_partitioned_index = 121, RULE_individual_hash_partitions = 122, 
		RULE_index_partitioning_clause = 123, RULE_segment_attributes_clause = 124, 
		RULE_index_attributes = 125, RULE_physical_attributes_clause = 126, RULE_hash_partitions_by_quantity = 127, 
		RULE_local_partitioned_index = 128, RULE_on_range_partitioned_table = 129, 
		RULE_on_list_partitioned_table = 130, RULE_on_hash_partitioned_table = 131, 
		RULE_on_comp_partitioned_table = 132, RULE_xmltable_index_clause = 133, 
		RULE_xmlindex_clause = 134, RULE_partition_clause = 135, RULE_partition_clause_optional = 136, 
		RULE_indexing_clause = 137, RULE_partitioning_storage_clause = 138, RULE_inmemory_table_clause = 139, 
		RULE_inmemory_column_clause = 140, RULE_inmemory_clause = 141, RULE_inmemory_parameters = 142, 
		RULE_inmemory_memcompress = 143, RULE_inmemory_priority = 144, RULE_inmemory_distribute = 145, 
		RULE_inmemory_duplicate = 146, RULE_table_compression = 147, RULE_index_compression = 148, 
		RULE_prefix_compression = 149, RULE_advanced_index_compression = 150, 
		RULE_lob_partitioning_storage = 151, RULE_index_subpartition_clause = 152, 
		RULE_usable_clause = 153, RULE_hash_partition_quantity = 154, RULE_varray_item = 155, 
		RULE_partial_index_clause = 156, RULE_parallel_clause = 157, RULE_domain_index_clause = 158, 
		RULE_local_domain_index_clause = 159, RULE_local_domain_index_parameters_clause = 160, 
		RULE_odci_parameters = 161, RULE_exceptions_clause = 162, RULE_create_tablespace = 163, 
		RULE_permanent_tablespace_clause = 164, RULE_tablespace_encryption_spec = 165, 
		RULE_logging_clause = 166, RULE_extent_management_clause = 167, RULE_segment_management_clause = 168, 
		RULE_flashback_mode_clause = 169, RULE_temporary_tablespace_clause = 170, 
		RULE_tablespace_group_clause = 171, RULE_undo_tablespace_clause = 172, 
		RULE_tablespace_retention_clause = 173, RULE_datafile_specification = 174, 
		RULE_tempfile_specification = 175, RULE_datafile_tempfile_spec = 176, 
		RULE_redo_log_file_spec = 177, RULE_autoextend_clause = 178, RULE_maxsize_clause = 179, 
		RULE_subquery = 180, RULE_create_table = 181, RULE_relational_table = 182, 
		RULE_relational_properties = 183, RULE_table_properties = 184, RULE_flashback_archive_clause = 185, 
		RULE_row_movement_clause = 186, RULE_attribute_clustering_clause = 187, 
		RULE_clustering_join = 188, RULE_cluster_clause = 189, RULE_clustering_columns = 190, 
		RULE_clustering_columns_group = 191, RULE_clustering_when = 192, RULE_zonemap_clause = 193, 
		RULE_enable_disable_clause = 194, RULE_table_partitioning_clauses = 195, 
		RULE_range_partitions = 196, RULE_hash_partitions = 197, RULE_column_properties = 198, 
		RULE_xmltype_column_properties = 199, RULE_xmltype_storage = 200, RULE_xmlschema_spec = 201, 
		RULE_list_partitions = 202, RULE_composite_range_partitions = 203, RULE_composite_hash_partitions = 204, 
		RULE_composite_list_partitions = 205, RULE_range_partition_desc = 206, 
		RULE_list_partition_desc = 207, RULE_range_subpartition_desc = 208, RULE_list_subpartition_desc = 209, 
		RULE_individual_hash_subparts = 210, RULE_hash_subparts_by_quantity = 211, 
		RULE_table_partition_description = 212, RULE_range_values_clause = 213, 
		RULE_list_values_clause = 214, RULE_subpartition_by_range = 215, RULE_subpartition_by_list = 216, 
		RULE_subpartition_by_hash = 217, RULE_subpartition_template = 218, RULE_reference_partitioning = 219, 
		RULE_reference_partition_desc = 220, RULE_object_type_col_properties = 221, 
		RULE_substituable_column_clause = 222, RULE_nested_table_col_properties = 223, 
		RULE_object_properties = 224, RULE_varray_col_properties = 225, RULE_varray_storage_clause = 226, 
		RULE_lob_storage_clause = 227, RULE_lob_storage_parameters = 228, RULE_paren_lob_parameters = 229, 
		RULE_lob_parameters = 230, RULE_lob_retention_clause = 231, RULE_lob_deduplicate_clause = 232, 
		RULE_lob_compresssion_clause = 233, RULE_physical_properties = 234, RULE_external_table_clause = 235, 
		RULE_external_data_properties = 236, RULE_external_data_properties_location = 237, 
		RULE_index_org_table_clause = 238, RULE_mapping_table_clause = 239, RULE_index_org_overflow_clause = 240, 
		RULE_deferred_segment_creation = 241, RULE_tablespace_clause = 242, RULE_store_in = 243, 
		RULE_ilm_clause = 244, RULE_ilm_policy_clause = 245, RULE_ilm_compression_policy = 246, 
		RULE_ilm_tiering_policy = 247, RULE_ilm_time_period = 248, RULE_storage_clause = 249, 
		RULE_column_definition = 250, RULE_virtual_column_definition = 251, RULE_period_definition = 252, 
		RULE_supplemental_logging_props = 253, RULE_supplemental_log_grp_clause = 254, 
		RULE_supplemental_id_key_clause = 255, RULE_column_logged = 256, RULE_evaluation_edition_clause = 257, 
		RULE_edition_name = 258, RULE_unusable_editions_clause = 259, RULE_identity_options = 260, 
		RULE_encryption_spec = 261, RULE_inline_ref_constraint = 262, RULE_out_of_line_ref_constraint = 263, 
		RULE_size_clause = 264, RULE_drop_table = 265, RULE_comment_on_column = 266, 
		RULE_create_synonym = 267, RULE_comment_on_table = 268, RULE_alter_table = 269, 
		RULE_add_constraint = 270, RULE_check_constraint = 271, RULE_drop_constraint = 272, 
		RULE_enable_constraint = 273, RULE_disable_constraint = 274, RULE_foreign_key_clause = 275, 
		RULE_references_clause = 276, RULE_on_delete_clause = 277, RULE_unique_key_clause = 278, 
		RULE_primary_key_clause = 279, RULE_anonymous_block = 280, RULE_invoker_rights_clause = 281, 
		RULE_compiler_parameters_clause = 282, RULE_call_spec = 283, RULE_java_spec = 284, 
		RULE_c_spec = 285, RULE_c_agent_in_clause = 286, RULE_c_parameters_clause = 287, 
		RULE_parameter = 288, RULE_default_value_part = 289, RULE_seq_of_declare_specs = 290, 
		RULE_declare_spec = 291, RULE_variable_declaration = 292, RULE_subtype_declaration = 293, 
		RULE_cursor_declaration = 294, RULE_parameter_spec = 295, RULE_exception_declaration = 296, 
		RULE_pragma_declaration = 297, RULE_record_type_def = 298, RULE_field_spec = 299, 
		RULE_ref_cursor_type_def = 300, RULE_type_declaration = 301, RULE_table_type_def = 302, 
		RULE_table_indexed_by_part = 303, RULE_varray_type_def = 304, RULE_seq_of_statements = 305, 
		RULE_label_declaration = 306, RULE_statement = 307, RULE_swallow_to_semi = 308, 
		RULE_assignment_statement = 309, RULE_continue_statement = 310, RULE_exit_statement = 311, 
		RULE_goto_statement = 312, RULE_if_statement = 313, RULE_elsif_part = 314, 
		RULE_else_part = 315, RULE_loop_statement = 316, RULE_cursor_loop_param = 317, 
		RULE_forall_statement = 318, RULE_bounds_clause = 319, RULE_between_bound = 320, 
		RULE_lower_bound = 321, RULE_upper_bound = 322, RULE_null_statement = 323, 
		RULE_raise_statement = 324, RULE_return_statement = 325, RULE_function_call = 326, 
		RULE_pipe_row_statement = 327, RULE_body = 328, RULE_exception_handler = 329, 
		RULE_trigger_block = 330, RULE_block = 331, RULE_sql_statement = 332, 
		RULE_execute_immediate = 333, RULE_dynamic_returning_clause = 334, RULE_data_manipulation_language_statements = 335, 
		RULE_cursor_manipulation_statements = 336, RULE_close_statement = 337, 
		RULE_open_statement = 338, RULE_fetch_statement = 339, RULE_open_for_statement = 340, 
		RULE_transaction_control_statements = 341, RULE_set_transaction_command = 342, 
		RULE_set_constraint_command = 343, RULE_commit_statement = 344, RULE_write_clause = 345, 
		RULE_rollback_statement = 346, RULE_savepoint_statement = 347, RULE_explain_statement = 348, 
		RULE_select_statement = 349, RULE_subquery_factoring_clause = 350, RULE_factoring_element = 351, 
		RULE_search_clause = 352, RULE_cycle_clause = 353, RULE_subquery_basic_elements = 354, 
		RULE_subquery_operation_part = 355, RULE_query_block = 356, RULE_selected_element = 357, 
		RULE_from_clause = 358, RULE_select_list_elements = 359, RULE_table_ref_list = 360, 
		RULE_table_ref = 361, RULE_table_ref_aux = 362, RULE_table_ref_aux_internal = 363, 
		RULE_join_clause = 364, RULE_join_on_part = 365, RULE_join_using_part = 366, 
		RULE_outer_join_type = 367, RULE_query_partition_clause = 368, RULE_flashback_query_clause = 369, 
		RULE_pivot_clause = 370, RULE_pivot_element = 371, RULE_pivot_for_clause = 372, 
		RULE_pivot_in_clause = 373, RULE_pivot_in_clause_element = 374, RULE_pivot_in_clause_elements = 375, 
		RULE_unpivot_clause = 376, RULE_unpivot_in_clause = 377, RULE_unpivot_in_elements = 378, 
		RULE_hierarchical_query_clause = 379, RULE_start_part = 380, RULE_group_by_clause = 381, 
		RULE_group_by_elements = 382, RULE_rollup_cube_clause = 383, RULE_grouping_sets_clause = 384, 
		RULE_grouping_sets_elements = 385, RULE_having_clause = 386, RULE_model_clause = 387, 
		RULE_cell_reference_options = 388, RULE_return_rows_clause = 389, RULE_reference_model = 390, 
		RULE_main_model = 391, RULE_model_column_clauses = 392, RULE_model_column_partition_part = 393, 
		RULE_model_column_list = 394, RULE_model_column = 395, RULE_model_rules_clause = 396, 
		RULE_model_rules_part = 397, RULE_model_rules_element = 398, RULE_cell_assignment = 399, 
		RULE_model_iterate_clause = 400, RULE_until_part = 401, RULE_order_by_clause = 402, 
		RULE_order_by_elements = 403, RULE_for_update_clause = 404, RULE_for_update_of_part = 405, 
		RULE_for_update_options = 406, RULE_update_statement = 407, RULE_update_set_clause = 408, 
		RULE_column_based_update_set_clause = 409, RULE_delete_statement = 410, 
		RULE_insert_statement = 411, RULE_single_table_insert = 412, RULE_multi_table_insert = 413, 
		RULE_multi_table_element = 414, RULE_conditional_insert_clause = 415, 
		RULE_conditional_insert_when_part = 416, RULE_conditional_insert_else_part = 417, 
		RULE_insert_into_clause = 418, RULE_values_clause = 419, RULE_merge_statement = 420, 
		RULE_merge_update_clause = 421, RULE_merge_element = 422, RULE_merge_update_delete_part = 423, 
		RULE_merge_insert_clause = 424, RULE_selected_tableview = 425, RULE_lock_table_statement = 426, 
		RULE_wait_nowait_part = 427, RULE_lock_table_element = 428, RULE_lock_mode = 429, 
		RULE_general_table_ref = 430, RULE_static_returning_clause = 431, RULE_error_logging_clause = 432, 
		RULE_error_logging_into_part = 433, RULE_error_logging_reject_part = 434, 
		RULE_dml_table_expression_clause = 435, RULE_table_collection_expression = 436, 
		RULE_subquery_restriction_clause = 437, RULE_sample_clause = 438, RULE_seed_part = 439, 
		RULE_condition = 440, RULE_expressions = 441, RULE_expression = 442, RULE_cursor_expression = 443, 
		RULE_logical_expression = 444, RULE_multiset_expression = 445, RULE_relational_expression = 446, 
		RULE_compound_expression = 447, RULE_relational_operator = 448, RULE_in_elements = 449, 
		RULE_between_elements = 450, RULE_concatenation = 451, RULE_interval_expression = 452, 
		RULE_model_expression = 453, RULE_model_expression_element = 454, RULE_single_column_for_loop = 455, 
		RULE_multi_column_for_loop = 456, RULE_unary_expression = 457, RULE_case_statement = 458, 
		RULE_simple_case_statement = 459, RULE_simple_case_when_part = 460, RULE_searched_case_statement = 461, 
		RULE_searched_case_when_part = 462, RULE_case_else_part = 463, RULE_atom = 464, 
		RULE_quantified_expression = 465, RULE_string_function = 466, RULE_standard_function = 467, 
		RULE_numeric_function_wrapper = 468, RULE_numeric_function = 469, RULE_other_function = 470, 
		RULE_over_clause_keyword = 471, RULE_within_or_over_clause_keyword = 472, 
		RULE_standard_prediction_function_keyword = 473, RULE_over_clause = 474, 
		RULE_windowing_clause = 475, RULE_windowing_type = 476, RULE_windowing_elements = 477, 
		RULE_using_clause = 478, RULE_using_element = 479, RULE_collect_order_by_part = 480, 
		RULE_within_or_over_part = 481, RULE_cost_matrix_clause = 482, RULE_xml_passing_clause = 483, 
		RULE_xml_attributes_clause = 484, RULE_xml_namespaces_clause = 485, RULE_xml_table_column = 486, 
		RULE_xml_general_default_part = 487, RULE_xml_multiuse_expression_element = 488, 
		RULE_xmlroot_param_version_part = 489, RULE_xmlroot_param_standalone_part = 490, 
		RULE_xmlserialize_param_enconding_part = 491, RULE_xmlserialize_param_version_part = 492, 
		RULE_xmlserialize_param_ident_part = 493, RULE_sql_plus_command = 494, 
		RULE_sqlplus_execute_command = 495, RULE_sqlplus_whenever_command = 496, 
		RULE_function_arguments = 497, RULE_arguments = 498, RULE_argument = 499, 
		RULE_sqlplus_set_command = 500, RULE_partition_extension_clause = 501, 
		RULE_column_alias = 502, RULE_table_alias = 503, RULE_where_clause = 504, 
		RULE_into_clause = 505, RULE_xml_column_name = 506, RULE_routine_name = 507, 
		RULE_indextype = 508, RULE_grantee_name = 509, RULE_role_name = 510, RULE_constraint_name = 511, 
		RULE_variable_name = 512, RULE_cursor_name = 513, RULE_record_name = 514, 
		RULE_link_name = 515, RULE_tableview_name = 516, RULE_element_name = 517, 
		RULE_flashback_archive_name = 518, RULE_zonemap_name = 519, RULE_subpartition_name = 520, 
		RULE_lob_item_name = 521, RULE_dir_object_name = 522, RULE_user_object_name = 523, 
		RULE_tablespace_name = 524, RULE_label_name = 525, RULE_partition_name = 526, 
		RULE_schema_object_name = 527, RULE_lob_segname = 528, RULE_ilm_policy_name = 529, 
		RULE_directory_name = 530, RULE_full_identifier = 531, RULE_implementation_type_name = 532, 
		RULE_container_tableview_name = 533, RULE_function_name = 534, RULE_procedure_name = 535, 
		RULE_trigger_name = 536, RULE_collection_name = 537, RULE_index_name = 538, 
		RULE_table_fullname = 539, RULE_grant_object_name = 540, RULE_column_list = 541, 
		RULE_paren_column_list = 542, RULE_keep_clause = 543, RULE_function_argument_analytic = 544, 
		RULE_function_argument_modeling = 545, RULE_respect_or_ignore_nulls = 546, 
		RULE_type_spec = 547, RULE_datatype = 548, RULE_precision_part = 549, 
		RULE_native_datatype_element = 550, RULE_bind_variable = 551, RULE_general_element = 552, 
		RULE_general_element_part = 553, RULE_table_element = 554, RULE_object_privilege = 555, 
		RULE_system_privilege = 556, RULE_literal = 557, RULE_literal_datetime = 558, 
		RULE_constant = 559, RULE_identifier = 560, RULE_synonym_name = 561, RULE_package_name = 562, 
		RULE_parameter_name = 563, RULE_reference_model_name = 564, RULE_cost_class_name = 565, 
		RULE_attribute_name = 566, RULE_savepoint_name = 567, RULE_rollback_segment_name = 568, 
		RULE_table_var_name = 569, RULE_schema_name = 570, RULE_main_model_name = 571, 
		RULE_query_name = 572, RULE_log_group_name = 573, RULE_identifiers = 574, 
		RULE_aggregate_function_name = 575, RULE_exception_name = 576, RULE_column_name = 577, 
		RULE_id_expression = 578, RULE_id_expressions = 579, RULE_type_name = 580, 
		RULE_sequence_name = 581, RULE_char_set_name = 582, RULE_outer_join_sign = 583, 
		RULE_regular_id = 584, RULE_string_function_name = 585, RULE_numeric_function_name = 586, 
		RULE_integer = 587, RULE_numeric = 588, RULE_numeric_negative = 589, RULE_string = 590;
	public static final String[] ruleNames = {
		"sql_script", "unit_statement", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "create_package_body", "package_obj_spec", "procedure_spec", 
		"function_spec", "package_obj_body", "drop_procedure", "alter_procedure", 
		"function_body", "procedure_body", "create_procedure_body", "drop_trigger", 
		"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
		"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
		"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
		"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
		"referencing_clause", "referencing_element", "drop_type", "alter_type", 
		"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
		"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
		"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
		"type_definition", "object_type_def", "object_as_part", "object_under_part", 
		"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
		"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
		"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
		"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
		"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
		"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
		"alter_sequence", "create_sequence", "sequence_spec", "create_index", 
		"alter_index", "create_user", "alter_user", "alter_identified_by", "identified_by", 
		"identified_other_clause", "user_tablespace_clause", "quota_clause", "profile_clause", 
		"role_clause", "user_default_role_clause", "password_expire_clause", "user_lock_clause", 
		"user_editions_clause", "alter_user_editions_clause", "proxy_clause", 
		"container_names", "set_container_data", "add_rem_container_data", "container_data_clause", 
		"drop_index", "revoke_statment", "revoke_system_privileges", "revoke_object_privileges", 
		"grant_statement", "container_clause", "create_view", "view_options", 
		"view_alias_constraint", "object_view_clause", "constraint", "inline_constraint", 
		"out_of_line_constraint", "constraint_state", "using_index_clause", "index_properties", 
		"global_partitioned_index", "individual_hash_partitions", "index_partitioning_clause", 
		"segment_attributes_clause", "index_attributes", "physical_attributes_clause", 
		"hash_partitions_by_quantity", "local_partitioned_index", "on_range_partitioned_table", 
		"on_list_partitioned_table", "on_hash_partitioned_table", "on_comp_partitioned_table", 
		"xmltable_index_clause", "xmlindex_clause", "partition_clause", "partition_clause_optional", 
		"indexing_clause", "partitioning_storage_clause", "inmemory_table_clause", 
		"inmemory_column_clause", "inmemory_clause", "inmemory_parameters", "inmemory_memcompress", 
		"inmemory_priority", "inmemory_distribute", "inmemory_duplicate", "table_compression", 
		"index_compression", "prefix_compression", "advanced_index_compression", 
		"lob_partitioning_storage", "index_subpartition_clause", "usable_clause", 
		"hash_partition_quantity", "varray_item", "partial_index_clause", "parallel_clause", 
		"domain_index_clause", "local_domain_index_clause", "local_domain_index_parameters_clause", 
		"odci_parameters", "exceptions_clause", "create_tablespace", "permanent_tablespace_clause", 
		"tablespace_encryption_spec", "logging_clause", "extent_management_clause", 
		"segment_management_clause", "flashback_mode_clause", "temporary_tablespace_clause", 
		"tablespace_group_clause", "undo_tablespace_clause", "tablespace_retention_clause", 
		"datafile_specification", "tempfile_specification", "datafile_tempfile_spec", 
		"redo_log_file_spec", "autoextend_clause", "maxsize_clause", "subquery", 
		"create_table", "relational_table", "relational_properties", "table_properties", 
		"flashback_archive_clause", "row_movement_clause", "attribute_clustering_clause", 
		"clustering_join", "cluster_clause", "clustering_columns", "clustering_columns_group", 
		"clustering_when", "zonemap_clause", "enable_disable_clause", "table_partitioning_clauses", 
		"range_partitions", "hash_partitions", "column_properties", "xmltype_column_properties", 
		"xmltype_storage", "xmlschema_spec", "list_partitions", "composite_range_partitions", 
		"composite_hash_partitions", "composite_list_partitions", "range_partition_desc", 
		"list_partition_desc", "range_subpartition_desc", "list_subpartition_desc", 
		"individual_hash_subparts", "hash_subparts_by_quantity", "table_partition_description", 
		"range_values_clause", "list_values_clause", "subpartition_by_range", 
		"subpartition_by_list", "subpartition_by_hash", "subpartition_template", 
		"reference_partitioning", "reference_partition_desc", "object_type_col_properties", 
		"substituable_column_clause", "nested_table_col_properties", "object_properties", 
		"varray_col_properties", "varray_storage_clause", "lob_storage_clause", 
		"lob_storage_parameters", "paren_lob_parameters", "lob_parameters", "lob_retention_clause", 
		"lob_deduplicate_clause", "lob_compresssion_clause", "physical_properties", 
		"external_table_clause", "external_data_properties", "external_data_properties_location", 
		"index_org_table_clause", "mapping_table_clause", "index_org_overflow_clause", 
		"deferred_segment_creation", "tablespace_clause", "store_in", "ilm_clause", 
		"ilm_policy_clause", "ilm_compression_policy", "ilm_tiering_policy", "ilm_time_period", 
		"storage_clause", "column_definition", "virtual_column_definition", "period_definition", 
		"supplemental_logging_props", "supplemental_log_grp_clause", "supplemental_id_key_clause", 
		"column_logged", "evaluation_edition_clause", "edition_name", "unusable_editions_clause", 
		"identity_options", "encryption_spec", "inline_ref_constraint", "out_of_line_ref_constraint", 
		"size_clause", "drop_table", "comment_on_column", "create_synonym", "comment_on_table", 
		"alter_table", "add_constraint", "check_constraint", "drop_constraint", 
		"enable_constraint", "disable_constraint", "foreign_key_clause", "references_clause", 
		"on_delete_clause", "unique_key_clause", "primary_key_clause", "anonymous_block", 
		"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
		"c_spec", "c_agent_in_clause", "c_parameters_clause", "parameter", "default_value_part", 
		"seq_of_declare_specs", "declare_spec", "variable_declaration", "subtype_declaration", 
		"cursor_declaration", "parameter_spec", "exception_declaration", "pragma_declaration", 
		"record_type_def", "field_spec", "ref_cursor_type_def", "type_declaration", 
		"table_type_def", "table_indexed_by_part", "varray_type_def", "seq_of_statements", 
		"label_declaration", "statement", "swallow_to_semi", "assignment_statement", 
		"continue_statement", "exit_statement", "goto_statement", "if_statement", 
		"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
		"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
		"raise_statement", "return_statement", "function_call", "pipe_row_statement", 
		"body", "exception_handler", "trigger_block", "block", "sql_statement", 
		"execute_immediate", "dynamic_returning_clause", "data_manipulation_language_statements", 
		"cursor_manipulation_statements", "close_statement", "open_statement", 
		"fetch_statement", "open_for_statement", "transaction_control_statements", 
		"set_transaction_command", "set_constraint_command", "commit_statement", 
		"write_clause", "rollback_statement", "savepoint_statement", "explain_statement", 
		"select_statement", "subquery_factoring_clause", "factoring_element", 
		"search_clause", "cycle_clause", "subquery_basic_elements", "subquery_operation_part", 
		"query_block", "selected_element", "from_clause", "select_list_elements", 
		"table_ref_list", "table_ref", "table_ref_aux", "table_ref_aux_internal", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "condition", "expressions", "expression", 
		"cursor_expression", "logical_expression", "multiset_expression", "relational_expression", 
		"compound_expression", "relational_operator", "in_elements", "between_elements", 
		"concatenation", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "multi_column_for_loop", "unary_expression", 
		"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
		"searched_case_when_part", "case_else_part", "atom", "quantified_expression", 
		"string_function", "standard_function", "numeric_function_wrapper", "numeric_function", 
		"other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"sqlplus_execute_command", "sqlplus_whenever_command", "function_arguments", 
		"arguments", "argument", "sqlplus_set_command", "partition_extension_clause", 
		"column_alias", "table_alias", "where_clause", "into_clause", "xml_column_name", 
		"routine_name", "indextype", "grantee_name", "role_name", "constraint_name", 
		"variable_name", "cursor_name", "record_name", "link_name", "tableview_name", 
		"element_name", "flashback_archive_name", "zonemap_name", "subpartition_name", 
		"lob_item_name", "dir_object_name", "user_object_name", "tablespace_name", 
		"label_name", "partition_name", "schema_object_name", "lob_segname", "ilm_policy_name", 
		"directory_name", "full_identifier", "implementation_type_name", "container_tableview_name", 
		"function_name", "procedure_name", "trigger_name", "collection_name", 
		"index_name", "table_fullname", "grant_object_name", "column_list", "paren_column_list", 
		"keep_clause", "function_argument_analytic", "function_argument_modeling", 
		"respect_or_ignore_nulls", "type_spec", "datatype", "precision_part", 
		"native_datatype_element", "bind_variable", "general_element", "general_element_part", 
		"table_element", "object_privilege", "system_privilege", "literal", "literal_datetime", 
		"constant", "identifier", "synonym_name", "package_name", "parameter_name", 
		"reference_model_name", "cost_class_name", "attribute_name", "savepoint_name", 
		"rollback_segment_name", "table_var_name", "schema_name", "main_model_name", 
		"query_name", "log_group_name", "identifiers", "aggregate_function_name", 
		"exception_name", "column_name", "id_expression", "id_expressions", "type_name", 
		"sequence_name", "char_set_name", "outer_join_sign", "regular_id", "string_function_name", 
		"numeric_function_name", "integer", "numeric", "numeric_negative", "string"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'ACCESS'", "'ACCOUNT'", "'ADD'", "'ADMIN'", "'ADMINISTER'", "'ADVANCED'", 
		"'ADVISOR'", "'AFTER'", "'AGENT'", "'AGGREGATE'", "'A'", "'ALL'", "'ALLOW'", 
		"'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ANY'", "'ANYSCHEMA'", "'ARCHIVAL'", 
		"'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'ASSOCIATE'", "'AT'", "'ATTRIBUTE'", 
		"'AUDIT'", "'AUTHENTICATED'", "'AUTHENTICATION'", "'AUTHID'", "'AUTOALLOCATE'", 
		"'AUTO'", "'AUTOEXTEND'", "'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", "'BACKUP'", 
		"'BASIC'", "'BASICFILE'", "'BATCH'", "'BECOME'", "'BEFORE'", "'BEGIN'", 
		"'BETWEEN'", "'BFILE'", "'BIGFILE'", "'BINARY'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", 
		"'BINARY_INTEGER'", "'BLOB'", "'BLOCK'", "'BLOCKSIZE'", "'BODY'", "'BOOLEAN'", 
		"'BOTH'", "'BREADTH'", "'BUFFER_POOL'", "'BUILD'", "'BULK'", "'BY'", "'BYTE'", 
		"'CACHE'", "'CALL'", "'CANONICAL'", "'CAPACITY'", "'CASCADE'", "'CASE'", 
		"'CAST'", "'CERTIFICATE'", "'CHANGE'", "'CHARACTER'", "'CHAR'", "'CHAR_CS'", 
		"'CHECK'", "'CHR'", "'CHUNK'", "'CLASS'", "'C'", "'CLOB'", "'CLOSE'", 
		"'CLUSTER'", "'CLUSTERING'", "'COALESCE'", "'COLLECT'", "'COLUMN'", "'COLUMNS'", 
		"'COMMENT'", "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY'", "'COMPILE'", 
		"'COMPOUND'", "'COMPRESS'", "'COMPUTE'", "'CONNECT_BY_ROOT'", "'CONNECT'", 
		"'CONSTANT'", "'CONSTRAINT'", "'CONSTRAINTS'", "'CONSTRUCTOR'", "'CONTAINER'", 
		"'CONTAINER_DATA'", "'CONTENT'", "'CONTEXT'", "'CONTINUE'", "'CONVERT'", 
		"'CORRUPT_XID_ALL'", "'CORRUPT_XID'", "'COST'", "'COUNT'", "'CREATE'", 
		"'CREATION'", "'CRITICAL'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_USER'", 
		"'CURSOR'", "'CUSTOMDATUM'", "'CYCLE'", "'DATABASE'", "'DATA'", "'DATAFILE'", 
		"'DATE'", "'DAY'", "'DAYS'", "'DBA_RECYCLEBIN'", "'DB_ROLE_CHANGE'", "'DBTIMEZONE'", 
		"'DDL'", "'DEBUG'", "'DEC'", "'DECIMAL'", "'DECLARE'", "'DECOMPOSE'", 
		"'DECREMENT'", "'DECRYPT'", "'DEDUPLICATE'", "'DEFAULT'", "'DEFAULTS'", 
		"'DEFERRABLE'", "'DEFERRED'", "'DEFINER'", "'DELEGATE'", "'DELETE'", "'DEPTH'", 
		"'DESC'", "'DETERMINISTIC'", "'DICTIONARY'", "'DIMENSION'", "'DIRECTORY'", 
		"'DISABLE'", "'DISALLOW'", "'DISASSOCIATE'", "'DISTINCT'", "'DISTINGUISHED'", 
		"'DISTRIBUTE'", "'DML'", "'DOCUMENT'", "'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", 
		"'DUPLICATE'", "'EACH'", "'EDITIONABLE'", "'EDITION'", "'EDITIONING'", 
		"'EDITIONS'", "'ELEMENT'", "'ELSE'", "'ELSIF'", "'EMPTY'", "'ENABLE'", 
		"'ENCODING'", "'ENCRYPT'", "'ENCRYPTION'", "'END'", "'ENTERPRISE'", "'ENTITYESCAPING'", 
		"'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EVALUATION'", "'EXCEPT'", 
		"'EXCEPTION'", "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", 
		"'EXECUTE'", "'EXEMPT'", "'EXISTS'", "'EXIT'", "'EXPIRE'", "'EXPLAIN'", 
		"'EXTENT'", "'EXTERNAL'", "'EXTERNALLY'", "'EXTRACT'", "'FAILURE'", "'FALSE'", 
		"'FETCH'", "'FILESYSTEM_LIKE_LOGGING'", "'FINAL'", "'FIRST'", "'FIRST_VALUE'", 
		"'FLASHBACK'", "'FLASH_CACHE'", "'FLOAT'", "'FOLDER'", "'FOLLOWING'", 
		"'FOLLOWS'", "'FORALL'", "'FORCE'", "'FOREIGN'", "'FOR'", "'FREELIST'", 
		"'FREELISTS'", "'FREEPOOLS'", "'FROM'", "'FULL'", "'FUNCTION'", "'GENERATED'", 
		"'GLOBAL'", "'GLOBALLY'", "'GOTO'", "'GRANT'", "'GROUP'", "'GROUPING'", 
		"'GROUPS'", "'GUARANTEE'", "'HASH'", "'HAVING'", "'HEAP'", "'HIDE'", "'HIERARCHY'", 
		"'HIGH'", "'HOUR'", "'IDENTIFIED'", "'IDENTIFIER'", "'IDENTITY'", "'ID'", 
		"'IF'", "'IGNORE'", "'ILM'", "'IMMEDIATE'", "'INCLUDE'", "'INCLUDING'", 
		"'INCREMENT'", "'INDENT'", "'INDEXED'", "'INDEX'", "'INDEXING'", "'INDEXTYPE'", 
		"'INDICATOR'", "'INDICES'", "'INFINITE'", "'INHERIT'", "'IN'", "'INITIAL'", 
		"'INITIALLY'", "'INITRANS'", "'INLINE'", "'INMEMORY'", "'INNER'", "'INOUT'", 
		"'INSERT'", "'INSTANTIABLE'", "'INSTEAD'", "'INTEGER'", "'INTERSECT'", 
		"'INTERVAL'", "'INTERVLEAVED'", "'INT'", "'INTO'", "'INVALIDATE'", "'INVISIBLE'", 
		"'IS'", "'ISOLATION'", "'ITERATE'", "'JAVA'", "'JOB'", "'JOIN'", "'KEEP_DUPLICATES'", 
		"'KEEP'", "'KEY'", "'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEADING'", 
		"'LEFT'", "'LESS'", "'LEVEL'", "'LEVELS'", "'LIBRARY'", "'LIKE2'", "'LIKE4'", 
		"'LIKEC'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINK'", "'LIST'", "'LOAD'", 
		"'LOB'", "'LOBS'", "'LOCAL'", "'LOCATION'", "'LOCATOR'", "'LOCKED'", "'LOCKING'", 
		"'LOCK'", "'LOGGING'", "'LOG'", "'LOGMINING'", "'LOGOFF'", "'LOGON'", 
		"'LONG'", "'LOOP'", "'LOW'", "'MAIN'", "'MANAGE'", "'MANAGEMENT'", "'MANUAL'", 
		"'MAP'", "'MAPPING'", "'MATCHED'", "'MATERIALIZED'", "'MAXSIZE'", "'MAXVALUE'", 
		"'MEASURE'", "'MEASURES'", "'MEDIUM'", "'MEMBER'", "'MEMCOMPRESS'", "'MERGE'", 
		"'MINEXTENTS'", "'MINIMUM'", "'MINING'", "'MINUS'", "'MINUTE'", "'MINVALUE'", 
		"'MLSLABEL'", "'MODEL'", "'MODE'", "'MODIFICATION'", "'MODIFY'", "'MONTH'", 
		"'MONTHS'", "'MOVEMENT'", "'MULTISET'", "'NAME'", "'NAN'", "'NATURAL'", 
		"'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", "'NCLOB'", "'NESTED'", 
		"'NEW'", "'NEXT'", "'NOAUDIT'", "'NOCACHE'", "'NOCOMPRESS'", "'NOCOPY'", 
		"'NOCYCLE'", "'NOEDITIONABLE'", "'NOENTITYESCAPING'", "'NOGUARANTEE'", 
		"'NOKEEP'", "'NOLOGGING'", "'NOMAPPING'", "'NOMAXVALUE'", "'NOMINVALUE'", 
		"'NONEDITIONABLE'", "'NONE'", "'NO'", "'NONSCHEMA'", "'NOORDER'", "'NOPARALLEL'", 
		"'NORELY'", "'NOROWDEPENDENCIES'", "'NOSCHEMACHECK'", "'NOSORT'", "'NOTIFICATION'", 
		"'NOT'", "'NOVALIDATE'", "'NOWAIT'", "'NULL'", "'NULLS'", "'NUMBER'", 
		"'NUMERIC'", "'NVARCHAR2'", "'OBJECT'", "'OFFLINE'", "'OFF'", "'OF'", 
		"'OID'", "'OLD'", "'OLTP'", "'ONLINE'", "'ONLY'", "'ON'", "'OPEN'", "'OPERATOR'", 
		"'OPTIMAL'", "'OPTION'", "'ORADATA'", "'ORDER'", "'ORDINALITY'", "'ORGANIZATION'", 
		"'OR'", "'OSERROR'", "'OUTER'", "'OUTLINE'", "'OUT'", "'OVERFLOW'", "'OVER'", 
		"'OVERRIDING'", "'PACKAGE'", "'PARALLEL_ENABLE'", "'PARALLEL'", "'PARAMETERS'", 
		"'PARENT'", "'PARTIAL'", "'PARTITION'", "'PARTITIONS'", "'PASSING'", "'PASSWORD'", 
		"'PATH'", "'PCTFREE'", "'PCTINCREASE'", "'PCTTHRESHOLD'", "'PCTUSED'", 
		"'PCTVERSION'", "'%FOUND'", "'%ISOPEN'", "'%NOTFOUND'", "'%ROWCOUNT'", 
		"'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", "'PIPE'", "'PIVOT'", "'PLAN'", 
		"'PLS_INTEGER'", "'PLUGGABLE'", "'POLICY'", "'POSITIVEN'", "'POSITIVE'", 
		"'PRAGMA'", "'PRECEDING'", "'PRECISION'", "'PRESENT'", "'PRESERVE'", "'PRIMARY'", 
		"'PRIORITY'", "'PRIOR'", "'PRIVILEGE'", "'PRIVILEGES'", "'PROCEDURE'", 
		"'PROCESS'", "'PROFILE'", "'PROGRAM'", "'PUBLIC'", "'PURGE'", "'QUERY'", 
		"'QUOTA'", "'RAISE'", "'RANGE'", "'RAW'", "'READ'", "'READS'", "'REAL'", 
		"'RECORD'", "'RECYCLE'", "'REDACTION'", "'REFERENCE'", "'REFERENCES'", 
		"'REFERENCING'", "'REF'", "'REFRESH'", "'REJECT'", "'RELATIONAL'", "'RELIES_ON'", 
		"'RELY'", "'REMOVE'", "'RENAME'", "'REPLACE'", "'REQUIRED'", "'RESOURCE'", 
		"'RESPECT'", "'RESTRICTED'", "'RESTRICT_REFERENCES'", "'RESULT_CACHE'", 
		"'RESULT'", "'RESUMABLE'", "'RETENTION'", "'RETURNING'", "'RETURN'", "'REUSE'", 
		"'REVERSE'", "'REVOKE'", "'REWRITE'", "'RIGHT'", "'ROLE'", "'ROLES'", 
		"'ROLLBACK'", "'ROLLUP'", "'ROWDEPENDENCIES'", "'ROWID'", "'ROW'", "'ROWS'", 
		"'RULES'", "'SALT'", "'SAMPLE'", "'SAVEPOINT'", "'SAVE'", "'SCHEDULER'", 
		"'SCHEMACHECK'", "'SCHEMA'", "'SCN'", "'SCOPE'", "'SEARCH'", "'SECOND'", 
		"'SECUREFILE'", "'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", "'SEQUENCE'", 
		"'SEQUENTIAL'", "'SERIALIZABLE'", "'SERIALLY_REUSABLE'", "'SERVERERROR'", 
		"'SESSION'", "'SESSIONTIMEZONE'", "'SET'", "'SETS'", "'SETTINGS'", "'SHARE'", 
		"'#'", "'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", "'SIGNTYPE'", "'SIMPLE_INTEGER'", 
		"'SINGLE'", "'SIZE'", "'SKIP'", "'SMALLFILE'", "'SMALLINT'", "'SNAPSHOT'", 
		"'SOME'", "'SORT'", "'SOURCE'", "'SPACE'", "'SPECIFICATION'", "'SQLDATA'", 
		"'SQLERROR'", "'SQL'", "'STANDALONE'", "'START'", "'STARTUP'", "'STATEMENT_ID'", 
		"'STATEMENT'", "'STATIC'", "'STATISTICS'", "'STORAGE'", "'STORE'", "'STRING'", 
		"'SUBMULTISET'", "'SUBPARTITIONS'", "'SUBPARTITION'", "'SUBSTITUTABLE'", 
		"'SUBTYPE'", "'SUCCESS'", "'SUPPLEMENTAL'", "'SUSPEND'", "'SYNONYM'", 
		"'SYSBACKUP'", "'SYSDATE'", "'SYSDBA'", "'SYSDG'", "'SYSGUID'", "'SYSKM'", 
		"'SYSOPER'", "'SYSTEM'", "'TABLESPACE'", "'TABLES'", "'TABLE'", "'TEMPFILE'", 
		"'TEMPLATE'", "'TEMPORARY'", "'THAN'", "'THEN'", "'THE'", "'THROUGH'", 
		"'TIER'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", 
		"'TIMESTAMP_UNCONSTRAINED'", "'TIME'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", 
		"'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", "'TO'", "'TRAILING'", "'TRANSACTION'", 
		"'TRANSLATE'", "'TRANSLATION'", "'TREAT'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", 
		"'TUNING'", "'TYPE'", "'UNBOUNDED'", "'UNDER'", "'UNDO'", "'UNIFORM'", 
		"'UNION'", "'UNIQUE'", "'UNLIMITED'", "'UNLOCK'", "'UNPIVOT'", "'UNTIL'", 
		"'UNUSABLE'", "'UPDATED'", "'UPDATE'", "'UPSERT'", "'UROWID'", "'USABLE'", 
		"'USERS'", "'USER'", "'USE'", "'USING'", "'VALIDATE'", "'VALUES'", "'VALUE'", 
		"'VARCHAR2'", "'VARCHAR'", "'VARIABLE'", "'VARRAYS'", "'VARRAY'", "'VARYING'", 
		"'VERSIONS'", "'VERSION'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
		"'WARNING'", "'WELLFORMED'", "'WHENEVER'", "'WHEN'", "'WHERE'", "'WHILE'", 
		"'WITHIN'", "'WITHOUT'", "'WITH'", "'WORK'", "'WRITE'", "'XMLAGG'", "'XMLATTRIBUTES'", 
		"'XMLCAST'", "'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", 
		"'XMLNAMESPACES'", "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", "'XMLROOT'", 
		"'XMLSCHEMA'", "'XMLSERIALIZE'", "'XMLTABLE'", "'XMLTYPE'", "'XML'", "'YEARS'", 
		"'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", "'ZONEMAP'", "'ZONE'", 
		"'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", "'PREDICTION_DETAILS'", 
		"'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", "'CUME_DIST'", "'DENSE_RANK'", 
		"'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", 
		"'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", "'LAG'", "'LEAD'", 
		"'MAX'", "'MEDIAN'", "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", 
		"'REGR_'", "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", "'TRIM'", 
		"'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", "'GREATEST'", 
		"'TO_DATE'", null, null, null, null, "'..'", "'.'", null, null, null, 
		null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", 
		"'/'", "'@'", "':='", null, null, "'^'", "'~'", "'!'", "'>'", "'<'", "':'", 
		"';'", "'|'", "'='", "'['", "']'", "'=>'", "'_'", null, null, null, null, 
		null, null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "ACCESS", "ACCOUNT", "ADD", "ADMIN", "ADMINISTER", "ADVANCED", "ADVISOR", 
		"AFTER", "AGENT", "AGGREGATE", "A_LETTER", "ALL", "ALLOW", "ALTER", "ALWAYS", 
		"ANALYZE", "AND", "ANY", "ANYSCHEMA", "ARCHIVAL", "ARCHIVE", "ARRAY", 
		"AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", "AUTHENTICATED", 
		"AUTHENTICATION", "AUTHID", "AUTOALLOCATE", "AUTO", "AUTOEXTEND", "AUTOMATIC", 
		"AUTONOMOUS_TRANSACTION", "BACKUP", "BASIC", "BASICFILE", "BATCH", "BECOME", 
		"BEFORE", "BEGIN", "BETWEEN", "BFILE", "BIGFILE", "BINARY", "BINARY_DOUBLE", 
		"BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", "BLOCKSIZE", "BODY", 
		"BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", "BUILD", "BULK", "BY", "BYTE", 
		"CACHE", "CALL", "CANONICAL", "CAPACITY", "CASCADE", "CASE", "CAST", "CERTIFICATE", 
		"CHANGE", "CHARACTER", "CHAR", "CHAR_CS", "CHECK", "CHR", "CHUNK", "CLASS", 
		"C_LETTER", "CLOB", "CLOSE", "CLUSTER", "CLUSTERING", "COALESCE", "COLLECT", 
		"COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
		"COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT_BY_ROOT", "CONNECT", 
		"CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINER", "CONTAINER_DATA", 
		"CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID_ALL", "CORRUPT_XID", 
		"COST", "COUNT", "CREATE", "CREATION", "CRITICAL", "CROSS", "CUBE", "CURRENT", 
		"CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", "DATABASE", "DATA", 
		"DATAFILE", "DATE", "DAY", "DAYS", "DBA_RECYCLEBIN", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DECRYPT", "DEDUPLICATE", "DEFAULT", "DEFAULTS", "DEFERRABLE", 
		"DEFERRED", "DEFINER", "DELEGATE", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
		"DICTIONARY", "DIMENSION", "DIRECTORY", "DISABLE", "DISALLOW", "DISASSOCIATE", 
		"DISTINCT", "DISTINGUISHED", "DISTRIBUTE", "DML", "DOCUMENT", "DOUBLE", 
		"DROP", "DSINTERVAL_UNCONSTRAINED", "DUPLICATE", "EACH", "EDITIONABLE", 
		"EDITION", "EDITIONING", "EDITIONS", "ELEMENT", "ELSE", "ELSIF", "EMPTY", 
		"ENABLE", "ENCODING", "ENCRYPT", "ENCRYPTION", "END", "ENTERPRISE", "ENTITYESCAPING", 
		"ERR", "ERRORS", "ESCAPE", "EVALNAME", "EVALUATION", "EXCEPT", "EXCEPTION", 
		"EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXEMPT", 
		"EXISTS", "EXIT", "EXPIRE", "EXPLAIN", "EXTENT", "EXTERNAL", "EXTERNALLY", 
		"EXTRACT", "FAILURE", "FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", "FINAL", 
		"FIRST", "FIRST_VALUE", "FLASHBACK", "FLASH_CACHE", "FLOAT", "FOLDER", 
		"FOLLOWING", "FOLLOWS", "FORALL", "FORCE", "FOREIGN", "FOR", "FREELIST", 
		"FREELISTS", "FREEPOOLS", "FROM", "FULL", "FUNCTION", "GENERATED", "GLOBAL", 
		"GLOBALLY", "GOTO", "GRANT", "GROUP", "GROUPING", "GROUPS", "GUARANTEE", 
		"HASH", "HAVING", "HEAP", "HIDE", "HIERARCHY", "HIGH", "HOUR", "IDENTIFIED", 
		"IDENTIFIER", "IDENTITY", "ID", "IF", "IGNORE", "ILM", "IMMEDIATE", "INCLUDE", 
		"INCLUDING", "INCREMENT", "INDENT", "INDEXED", "INDEX", "INDEXING", "INDEXTYPE", 
		"INDICATOR", "INDICES", "INFINITE", "INHERIT", "IN", "INITIAL", "INITIALLY", 
		"INITRANS", "INLINE", "INMEMORY", "INNER", "INOUT", "INSERT", "INSTANTIABLE", 
		"INSTEAD", "INTEGER", "INTERSECT", "INTERVAL", "INTERVLEAVED", "INT", 
		"INTO", "INVALIDATE", "INVISIBLE", "IS", "ISOLATION", "ITERATE", "JAVA", 
		"JOB", "JOIN", "KEEP_DUPLICATES", "KEEP", "KEY", "LANGUAGE", "LAST", "LAST_VALUE", 
		"LEADING", "LEFT", "LESS", "LEVEL", "LEVELS", "LIBRARY", "LIKE2", "LIKE4", 
		"LIKEC", "LIKE", "LIMIT", "LINEAR", "LINK", "LIST", "LOAD", "LOB", "LOBS", 
		"LOCAL", "LOCATION", "LOCATOR", "LOCKED", "LOCKING", "LOCK", "LOGGING", 
		"LOG", "LOGMINING", "LOGOFF", "LOGON", "LONG", "LOOP", "LOW", "MAIN", 
		"MANAGE", "MANAGEMENT", "MANUAL", "MAP", "MAPPING", "MATCHED", "MATERIALIZED", 
		"MAXSIZE", "MAXVALUE", "MEASURE", "MEASURES", "MEDIUM", "MEMBER", "MEMCOMPRESS", 
		"MERGE", "MINEXTENTS", "MINIMUM", "MINING", "MINUS", "MINUTE", "MINVALUE", 
		"MLSLABEL", "MODEL", "MODE", "MODIFICATION", "MODIFY", "MONTH", "MONTHS", 
		"MOVEMENT", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR_CS", 
		"NCHAR", "NCLOB", "NESTED", "NEW", "NEXT", "NOAUDIT", "NOCACHE", "NOCOMPRESS", 
		"NOCOPY", "NOCYCLE", "NOEDITIONABLE", "NOENTITYESCAPING", "NOGUARANTEE", 
		"NOKEEP", "NOLOGGING", "NOMAPPING", "NOMAXVALUE", "NOMINVALUE", "NONEDITIONABLE", 
		"NONE", "NO", "NONSCHEMA", "NOORDER", "NOPARALLEL", "NORELY", "NOROWDEPENDENCIES", 
		"NOSCHEMACHECK", "NOSORT", "NOTIFICATION", "NOT", "NOVALIDATE", "NOWAIT", 
		"NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", "OFFLINE", 
		"OFF", "OF", "OID", "OLD", "OLTP", "ONLINE", "ONLY", "ON", "OPEN", "OPERATOR", 
		"OPTIMAL", "OPTION", "ORADATA", "ORDER", "ORDINALITY", "ORGANIZATION", 
		"OR", "OSERROR", "OUTER", "OUTLINE", "OUT", "OVERFLOW", "OVER", "OVERRIDING", 
		"PACKAGE", "PARALLEL_ENABLE", "PARALLEL", "PARAMETERS", "PARENT", "PARTIAL", 
		"PARTITION", "PARTITIONS", "PASSING", "PASSWORD", "PATH", "PCTFREE", "PCTINCREASE", 
		"PCTTHRESHOLD", "PCTUSED", "PCTVERSION", "PERCENT_FOUND", "PERCENT_ISOPEN", 
		"PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
		"PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", "PLUGGABLE", "POLICY", 
		"POSITIVEN", "POSITIVE", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", 
		"PRESERVE", "PRIMARY", "PRIORITY", "PRIOR", "PRIVILEGE", "PRIVILEGES", 
		"PROCEDURE", "PROCESS", "PROFILE", "PROGRAM", "PUBLIC", "PURGE", "QUERY", 
		"QUOTA", "RAISE", "RANGE", "RAW", "READ", "READS", "REAL", "RECORD", "RECYCLE", 
		"REDACTION", "REFERENCE", "REFERENCES", "REFERENCING", "REF", "REFRESH", 
		"REJECT", "RELATIONAL", "RELIES_ON", "RELY", "REMOVE", "RENAME", "REPLACE", 
		"REQUIRED", "RESOURCE", "RESPECT", "RESTRICTED", "RESTRICT_REFERENCES", 
		"RESULT_CACHE", "RESULT", "RESUMABLE", "RETENTION", "RETURNING", "RETURN", 
		"REUSE", "REVERSE", "REVOKE", "REWRITE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", 
		"ROLLUP", "ROWDEPENDENCIES", "ROWID", "ROW", "ROWS", "RULES", "SALT", 
		"SAMPLE", "SAVEPOINT", "SAVE", "SCHEDULER", "SCHEMACHECK", "SCHEMA", "SCN", 
		"SCOPE", "SEARCH", "SECOND", "SECUREFILE", "SEED", "SEGMENT", "SELECT", 
		"SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
		"SERVERERROR", "SESSION", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", 
		"SHARE", "SHARP", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
		"SINGLE", "SIZE", "SKIP_", "SMALLFILE", "SMALLINT", "SNAPSHOT", "SOME", 
		"SORT", "SOURCE", "SPACE_KEYWORD", "SPECIFICATION", "SQLDATA", "SQLERROR", 
		"SQL", "STANDALONE", "START", "STARTUP", "STATEMENT_ID", "STATEMENT", 
		"STATIC", "STATISTICS", "STORAGE", "STORE", "STRING", "SUBMULTISET", "SUBPARTITIONS", 
		"SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUPPLEMENTAL", 
		"SUSPEND", "SYNONYM", "SYSBACKUP", "SYSDATE", "SYSDBA", "SYSDG", "SYSGUID", 
		"SYSKM", "SYSOPER", "SYSTEM", "TABLESPACE", "TABLES", "TABLE", "TEMPFILE", 
		"TEMPLATE", "TEMPORARY", "THAN", "THEN", "THE", "THROUGH", "TIER", "TIMESTAMP_LTZ_UNCONSTRAINED", 
		"TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
		"TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TREAT", 
		"TRIGGER", "TRUE", "TRUNCATE", "TUNING", "TYPE", "UNBOUNDED", "UNDER", 
		"UNDO", "UNIFORM", "UNION", "UNIQUE", "UNLIMITED", "UNLOCK", "UNPIVOT", 
		"UNTIL", "UNUSABLE", "UPDATED", "UPDATE", "UPSERT", "UROWID", "USABLE", 
		"USERS", "USER", "USE", "USING", "VALIDATE", "VALUES", "VALUE", "VARCHAR2", 
		"VARCHAR", "VARIABLE", "VARRAYS", "VARRAY", "VARYING", "VERSIONS", "VERSION", 
		"VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNING", "WELLFORMED", "WHENEVER", 
		"WHEN", "WHERE", "WHILE", "WITHIN", "WITHOUT", "WITH", "WORK", "WRITE", 
		"XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
		"XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", 
		"XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", "XMLTYPE", "XML", "YEARS", "YEAR", 
		"YES", "YMINTERVAL_UNCONSTRAINED", "ZONEMAP", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
		"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
		"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
		"PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", "DECODE", "LAG", "LEAD", 
		"MAX", "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", 
		"ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", "VARIANCE", 
		"LEAST", "GREATEST", "TO_DATE", "VARIABLE_SESSION", "NATIONAL_CHAR_STRING_LIT", 
		"BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", 
		"APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
		"LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", 
		"MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", 
		"CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
		"GREATER_THAN_OP", "LESS_THAN_OP", "COLON", "SEMICOLON", "BAR", "EQUALS_OP", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "BIND_VAR", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "PROMPT", "START_CMD", "REGULAR_ID", "ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECLARE - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DROP - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GRANT - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSERT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOCK - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELECT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPDATE - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WITH - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (LEFT_PAREN - 714)) | (1L << (COMMA - 714)) | (1L << (SOLIDUS - 714)) | (1L << (PROMPT - 714)) | (1L << (START_CMD - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				{
				setState(1184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					setState(1182);
					unit_statement();
					}
					break;
				case 2:
					{
					setState(1183);
					sql_plus_command();
					}
					break;
				}
				setState(1187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMICOLON) {
					{
					setState(1186);
					match(SEMICOLON);
					}
				}

				}
				}
				setState(1193);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1194);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_indexContext alter_index() {
			return getRuleContext(Alter_indexContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_package_bodyContext create_package_body() {
			return getRuleContext(Create_package_bodyContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_tablespaceContext create_tablespace() {
			return getRuleContext(Create_tablespaceContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Comment_on_columnContext comment_on_column() {
			return getRuleContext(Comment_on_columnContext.class,0);
		}
		public Comment_on_tableContext comment_on_table() {
			return getRuleContext(Comment_on_tableContext.class,0);
		}
		public Anonymous_blockContext anonymous_block() {
			return getRuleContext(Anonymous_blockContext.class,0);
		}
		public Grant_statementContext grant_statement() {
			return getRuleContext(Grant_statementContext.class,0);
		}
		public Revoke_statmentContext revoke_statment() {
			return getRuleContext(Revoke_statmentContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_unit_statement);
		try {
			setState(1232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1196);
				transaction_control_statements();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1197);
				alter_function();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1198);
				alter_package();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1199);
				alter_procedure();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1200);
				alter_sequence();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1201);
				alter_trigger();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1202);
				alter_type();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1203);
				alter_table();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1204);
				alter_index();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1205);
				alter_user();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1206);
				create_function_body();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1207);
				create_procedure_body();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1208);
				create_package();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1209);
				create_package_body();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1210);
				create_index();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1211);
				create_table();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1212);
				create_tablespace();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1213);
				create_user();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1214);
				create_sequence();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1215);
				create_trigger();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1216);
				create_type();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1217);
				create_synonym();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1218);
				drop_function();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1219);
				drop_package();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1220);
				drop_procedure();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1221);
				drop_sequence();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1222);
				drop_trigger();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1223);
				drop_type();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1224);
				data_manipulation_language_statements();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1225);
				drop_table();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1226);
				drop_index();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1227);
				comment_on_column();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1228);
				comment_on_table();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1229);
				anonymous_block();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1230);
				grant_statement();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1231);
				revoke_statment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1234);
			match(DROP);
			setState(1235);
			match(FUNCTION);
			setState(1236);
			function_name();
			setState(1237);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1239);
			match(ALTER);
			setState(1240);
			match(FUNCTION);
			setState(1241);
			function_name();
			setState(1242);
			match(COMPILE);
			setState(1244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(1243);
				match(DEBUG);
				}
				break;
			}
			setState(1249);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1246);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1251);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			setState(1254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1252);
				match(REUSE);
				setState(1253);
				match(SETTINGS);
				}
			}

			setState(1256);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1258);
			match(CREATE);
			setState(1261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1259);
				match(OR);
				setState(1260);
				match(REPLACE);
				}
			}

			setState(1263);
			match(FUNCTION);
			setState(1264);
			function_name();
			setState(1276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1265);
				match(LEFT_PAREN);
				setState(1270); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1267);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1266);
						match(COMMA);
						}
					}

					setState(1269);
					parameter();
					}
					}
					setState(1272); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
				setState(1274);
				match(RIGHT_PAREN);
				}
			}

			setState(1278);
			match(RETURN);
			setState(1279);
			type_spec();
			setState(1286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1284);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1280);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1281);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1282);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1283);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1288);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				{
				setState(1290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1289);
					match(PIPELINED);
					}
				}

				setState(1292);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1301);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(1294);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1293);
						match(DECLARE);
						}
					}

					setState(1297);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
						{
						setState(1296);
						seq_of_declare_specs();
						}
					}

					setState(1299);
					body();
					}
					break;
				case 2:
					{
					setState(1300);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1303);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1304);
				match(USING);
				setState(1305);
				implementation_type_name();
				}
				break;
			}
			setState(1308);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1310);
			match(PARALLEL_ENABLE);
			setState(1312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1311);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(PlSqlParser.LIST, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			match(LEFT_PAREN);
			setState(1315);
			match(PARTITION);
			setState(1316);
			expression();
			setState(1317);
			match(BY);
			setState(1321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(1318);
				match(ANY);
				}
				break;
			case HASH:
			case LIST:
			case RANGE:
				{
				setState(1319);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==LIST || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1320);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(1323);
				streaming_clause();
				}
			}

			setState(1326);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1328);
			match(RESULT_CACHE);
			setState(1330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(1329);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1332);
			match(RELIES_ON);
			setState(1333);
			match(LEFT_PAREN);
			setState(1334);
			tableview_name();
			setState(1339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1335);
				match(COMMA);
				setState(1336);
				tableview_name();
				}
				}
				setState(1341);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1342);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1344);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1345);
			expression();
			setState(1346);
			match(BY);
			setState(1347);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1349);
			match(DROP);
			setState(1350);
			match(PACKAGE);
			setState(1352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1351);
				match(BODY);
				}
				break;
			}
			setState(1357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1354);
				schema_object_name();
				setState(1355);
				match(PERIOD);
				}
				break;
			}
			setState(1359);
			package_name();
			setState(1360);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(PlSqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1362);
			match(ALTER);
			setState(1363);
			match(PACKAGE);
			setState(1364);
			package_name();
			setState(1365);
			match(COMPILE);
			setState(1367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1366);
				match(DEBUG);
				}
				break;
			}
			setState(1370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1369);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1375);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1372);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1377);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			}
			setState(1380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1378);
				match(REUSE);
				setState(1379);
				match(SETTINGS);
				}
			}

			setState(1382);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1384);
			match(CREATE);
			setState(1387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1385);
				match(OR);
				setState(1386);
				match(REPLACE);
				}
			}

			setState(1389);
			match(PACKAGE);
			setState(1393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1390);
				schema_object_name();
				setState(1391);
				match(PERIOD);
				}
				break;
			}
			setState(1395);
			package_name();
			setState(1397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1396);
				invoker_rights_clause();
				}
			}

			setState(1399);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				{
				setState(1400);
				package_obj_spec();
				}
				}
				setState(1405);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1406);
			match(END);
			setState(1408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(1407);
				package_name();
				}
			}

			setState(1410);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_package_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package_body; }
	}

	public final Create_package_bodyContext create_package_body() throws RecognitionException {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_create_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1412);
			match(CREATE);
			setState(1415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1413);
				match(OR);
				setState(1414);
				match(REPLACE);
				}
			}

			setState(1417);
			match(PACKAGE);
			setState(1418);
			match(BODY);
			setState(1422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(1419);
				schema_object_name();
				setState(1420);
				match(PERIOD);
				}
				break;
			}
			setState(1424);
			package_name();
			setState(1425);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				{
				setState(1426);
				package_obj_body();
				}
				}
				setState(1431);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BEGIN) {
				{
				setState(1432);
				match(BEGIN);
				setState(1433);
				seq_of_statements();
				}
			}

			setState(1436);
			match(END);
			setState(1438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(1437);
				package_name();
				}
			}

			setState(1440);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_package_obj_spec);
		try {
			setState(1450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1442);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1443);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1444);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1445);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1446);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1447);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1448);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1449);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			match(PROCEDURE);
			setState(1453);
			identifier();
			setState(1465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1454);
				match(LEFT_PAREN);
				setState(1455);
				parameter();
				setState(1460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1456);
					match(COMMA);
					setState(1457);
					parameter();
					}
					}
					setState(1462);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1463);
				match(RIGHT_PAREN);
				}
			}

			setState(1467);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1469);
			match(FUNCTION);
			setState(1470);
			identifier();
			setState(1482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1471);
				match(LEFT_PAREN);
				setState(1472);
				parameter();
				setState(1477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1473);
					match(COMMA);
					setState(1474);
					parameter();
					}
					}
					setState(1479);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1480);
				match(RIGHT_PAREN);
				}
			}

			setState(1484);
			match(RETURN);
			setState(1485);
			type_spec();
			setState(1487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(1486);
				match(DETERMINISTIC);
				}
			}

			setState(1490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(1489);
				match(RESULT_CACHE);
				}
			}

			setState(1492);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_package_obj_body);
		try {
			setState(1503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1494);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1495);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1496);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1497);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1498);
				type_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1499);
				procedure_body();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1500);
				function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1501);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1502);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1505);
			match(DROP);
			setState(1506);
			match(PROCEDURE);
			setState(1507);
			procedure_name();
			setState(1508);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1510);
			match(ALTER);
			setState(1511);
			match(PROCEDURE);
			setState(1512);
			procedure_name();
			setState(1513);
			match(COMPILE);
			setState(1515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				setState(1514);
				match(DEBUG);
				}
				break;
			}
			setState(1520);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1517);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1522);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,48,_ctx);
			}
			setState(1525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1523);
				match(REUSE);
				setState(1524);
				match(SETTINGS);
				}
			}

			setState(1527);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1529);
			match(FUNCTION);
			setState(1530);
			function_name();
			setState(1542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1531);
				match(LEFT_PAREN);
				setState(1532);
				parameter();
				setState(1537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1533);
					match(COMMA);
					setState(1534);
					parameter();
					}
					}
					setState(1539);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1540);
				match(RIGHT_PAREN);
				}
			}

			setState(1544);
			match(RETURN);
			setState(1545);
			type_spec();
			setState(1552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1550);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1546);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1547);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1548);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1549);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1554);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				{
				setState(1556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1555);
					match(PIPELINED);
					}
				}

				setState(1558);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1567);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1559);
						match(DECLARE);
						}
					}

					setState(1563);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
						{
						setState(1562);
						seq_of_declare_specs();
						}
					}

					setState(1565);
					body();
					}
					break;
				case 2:
					{
					setState(1566);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1569);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1570);
				match(USING);
				setState(1571);
				implementation_type_name();
				}
				break;
			}
			setState(1574);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_body; }
	}

	public final Procedure_bodyContext procedure_body() throws RecognitionException {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1576);
			match(PROCEDURE);
			setState(1577);
			procedure_name();
			setState(1589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1578);
				match(LEFT_PAREN);
				setState(1579);
				parameter();
				setState(1584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1580);
					match(COMMA);
					setState(1581);
					parameter();
					}
					}
					setState(1586);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1587);
				match(RIGHT_PAREN);
				}
			}

			setState(1591);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1592);
					match(DECLARE);
					}
				}

				setState(1596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(1595);
					seq_of_declare_specs();
					}
				}

				setState(1598);
				body();
				}
				break;
			case 2:
				{
				setState(1599);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1600);
				match(EXTERNAL);
				}
				break;
			}
			setState(1603);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1605);
			match(CREATE);
			setState(1608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1606);
				match(OR);
				setState(1607);
				match(REPLACE);
				}
			}

			setState(1610);
			match(PROCEDURE);
			setState(1611);
			procedure_name();
			setState(1623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1612);
				match(LEFT_PAREN);
				setState(1613);
				parameter();
				setState(1618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1614);
					match(COMMA);
					setState(1615);
					parameter();
					}
					}
					setState(1620);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1621);
				match(RIGHT_PAREN);
				}
			}

			setState(1626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1625);
				invoker_rights_clause();
				}
			}

			setState(1628);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(1630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1629);
					match(DECLARE);
					}
				}

				setState(1633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(1632);
					seq_of_declare_specs();
					}
				}

				setState(1635);
				body();
				}
				break;
			case 2:
				{
				setState(1636);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1637);
				match(EXTERNAL);
				}
				break;
			}
			setState(1640);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1642);
			match(DROP);
			setState(1643);
			match(TRIGGER);
			setState(1644);
			trigger_name();
			setState(1645);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext alter_trigger_name;
		public Trigger_nameContext rename_trigger_name;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1647);
			match(ALTER);
			setState(1648);
			match(TRIGGER);
			setState(1649);
			((Alter_triggerContext)_localctx).alter_trigger_name = trigger_name();
			setState(1668);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1650);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1651);
				match(RENAME);
				setState(1652);
				match(TO);
				setState(1653);
				((Alter_triggerContext)_localctx).rename_trigger_name = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1654);
				match(COMPILE);
				setState(1656);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
				case 1:
					{
					setState(1655);
					match(DEBUG);
					}
					break;
				}
				setState(1661);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1658);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1663);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,72,_ctx);
				}
				setState(1666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1664);
					match(REUSE);
					setState(1665);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1670);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1672);
			match(CREATE);
			setState(1675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1673);
				match(OR);
				setState(1674);
				match(REPLACE);
				}
			}

			setState(1677);
			match(TRIGGER);
			setState(1678);
			trigger_name();
			setState(1682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1679);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1680);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1681);
				non_dml_trigger();
				}
				break;
			}
			setState(1685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1684);
				trigger_follows_clause();
				}
				break;
			}
			setState(1688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1687);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1690);
				trigger_when_clause();
				}
			}

			setState(1693);
			trigger_body();
			setState(1694);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1696);
			match(FOLLOWS);
			setState(1697);
			trigger_name();
			setState(1702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1698);
				match(COMMA);
				setState(1699);
				trigger_name();
				}
				}
				setState(1704);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			match(WHEN);
			setState(1706);
			match(LEFT_PAREN);
			setState(1707);
			condition();
			setState(1708);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1710);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1711);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1712);
				match(INSTEAD);
				setState(1713);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1716);
			dml_event_clause();
			setState(1718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1717);
				referencing_clause();
				}
				break;
			}
			setState(1721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1720);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1723);
			match(FOR);
			setState(1724);
			match(EACH);
			setState(1725);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1727);
			match(FOR);
			setState(1728);
			dml_event_clause();
			setState(1730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				setState(1729);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1732);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1733);
			non_dml_event();
			setState(1738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1734);
				match(OR);
				setState(1735);
				non_dml_event();
				}
				}
				setState(1740);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1741);
			match(ON);
			setState(1749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1742);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
				case 1:
					{
					setState(1743);
					schema_name();
					setState(1744);
					match(PERIOD);
					}
					break;
				}
				setState(1748);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_trigger_body);
		try {
			setState(1756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1751);
				match(COMPOUND);
				setState(1752);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1753);
				match(CALL);
				setState(1754);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1755);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Function_argumentsContext function_arguments() {
			return getRuleContext(Function_argumentsContext.class,0);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1758);
				function_arguments();
				}
			}

			setState(1762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==KEEP) {
				{
				setState(1761);
				keep_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_compound_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1764);
			match(COMPOUND);
			setState(1765);
			match(TRIGGER);
			setState(1767);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				setState(1766);
				seq_of_declare_specs();
				}
				break;
			}
			setState(1770); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1769);
				timing_point_section();
				}
				}
				setState(1772); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1774);
			match(END);
			setState(1775);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(PlSqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(PlSqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(PlSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(PlSqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(PlSqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(PlSqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PlSqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(PlSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_timing_point_section);
		try {
			setState(1813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1777);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1778);
				match(STATEMENT);
				setState(1779);
				match(IS);
				setState(1780);
				trigger_block();
				setState(1781);
				match(BEFORE);
				setState(1782);
				match(STATEMENT);
				setState(1783);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1785);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1786);
				match(EACH);
				setState(1787);
				match(ROW);
				setState(1788);
				match(IS);
				setState(1789);
				trigger_block();
				setState(1790);
				match(BEFORE);
				setState(1791);
				match(EACH);
				setState(1792);
				match(ROW);
				setState(1793);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1795);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1796);
				match(STATEMENT);
				setState(1797);
				match(IS);
				setState(1798);
				trigger_block();
				setState(1799);
				match(AFTER);
				setState(1800);
				match(STATEMENT);
				setState(1801);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1803);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1804);
				match(EACH);
				setState(1805);
				match(ROW);
				setState(1806);
				match(IS);
				setState(1807);
				trigger_block();
				setState(1808);
				match(AFTER);
				setState(1809);
				match(EACH);
				setState(1810);
				match(ROW);
				setState(1811);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_non_dml_event);
		try {
			setState(1841);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1815);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1816);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1817);
				match(ASSOCIATE);
				setState(1818);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1819);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1820);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1821);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1822);
				match(DISASSOCIATE);
				setState(1823);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1824);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1825);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1826);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1827);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1828);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1829);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1830);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1831);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1832);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1833);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1834);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1835);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1836);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1837);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1838);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1839);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1840);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1843);
			dml_event_element();
			setState(1848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1844);
				match(OR);
				setState(1845);
				dml_event_element();
				}
				}
				setState(1850);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1851);
			match(ON);
			setState(1853);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
			case 1:
				{
				setState(1852);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1855);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1857);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1858);
				match(OF);
				setState(1859);
				column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1862);
			match(NESTED);
			setState(1863);
			match(TABLE);
			setState(1864);
			tableview_name();
			setState(1865);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			match(REFERENCING);
			setState(1869); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1868);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1871); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,98,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD || _la==PARENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1874);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1876);
			match(DROP);
			setState(1877);
			match(TYPE);
			setState(1879);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1878);
				match(BODY);
				}
				break;
			}
			setState(1881);
			type_name();
			setState(1883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1882);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1885);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			match(ALTER);
			setState(1888);
			match(TYPE);
			setState(1889);
			type_name();
			setState(1895);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1890);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1891);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1892);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1893);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1894);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1897);
				dependent_handling_clause();
				}
			}

			setState(1900);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1902);
			match(COMPILE);
			setState(1904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1903);
				match(DEBUG);
				}
				break;
			}
			setState(1907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				setState(1906);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1912);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,105,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1909);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1914);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,105,_ctx);
			}
			setState(1917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1915);
				match(REUSE);
				setState(1916);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1919);
			match(REPLACE);
			setState(1921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1920);
				invoker_rights_clause();
				}
			}

			setState(1923);
			match(AS);
			setState(1924);
			match(OBJECT);
			setState(1925);
			match(LEFT_PAREN);
			setState(1926);
			object_member_spec();
			setState(1931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1927);
				match(COMMA);
				setState(1928);
				object_member_spec();
				}
				}
				setState(1933);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1934);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1936);
			alter_method_element();
			setState(1941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1937);
				match(COMMA);
				setState(1938);
				alter_method_element();
				}
				}
				setState(1943);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1944);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1947);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1945);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1946);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1949);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1950);
			match(ATTRIBUTE);
			setState(1963);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1951);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1952);
				match(LEFT_PAREN);
				setState(1953);
				attribute_definition();
				setState(1958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1954);
					match(COMMA);
					setState(1955);
					attribute_definition();
					}
					}
					setState(1960);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1961);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1965);
			attribute_name();
			setState(1967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(1966);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1969);
			match(MODIFY);
			setState(1975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1970);
				match(LIMIT);
				setState(1971);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1972);
				match(ELEMENT);
				setState(1973);
				match(TYPE);
				setState(1974);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1993);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1977);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1978);
				match(CASCADE);
				setState(1988);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1979);
					match(CONVERT);
					setState(1980);
					match(TO);
					setState(1981);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1983);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1982);
						match(NOT);
						}
					}

					setState(1985);
					match(INCLUDING);
					setState(1986);
					match(TABLE);
					setState(1987);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(1991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1990);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1995);
				match(FORCE);
				}
			}

			setState(1998);
			match(EXCEPTIONS);
			setState(1999);
			match(INTO);
			setState(2000);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2002);
			match(CREATE);
			setState(2005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2003);
				match(OR);
				setState(2004);
				match(REPLACE);
				}
			}

			setState(2007);
			match(TYPE);
			setState(2010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(2008);
				type_definition();
				}
				break;
			case 2:
				{
				setState(2009);
				type_body();
				}
				break;
			}
			setState(2012);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2014);
			type_name();
			setState(2017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(2015);
				match(OID);
				setState(2016);
				match(CHAR_STRING);
				}
			}

			setState(2020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(2019);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(2022);
				invoker_rights_clause();
				}
			}

			setState(2027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2025);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(2026);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(2029);
				sqlj_object_type();
				}
			}

			setState(2043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2032);
				match(LEFT_PAREN);
				setState(2033);
				object_member_spec();
				setState(2038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2034);
					match(COMMA);
					setState(2035);
					object_member_spec();
					}
					}
					setState(2040);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2041);
				match(RIGHT_PAREN);
				}
			}

			setState(2048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(2045);
				modifier_clause();
				}
				}
				setState(2050);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2051);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(2052);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2053);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(2054);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			match(UNDER);
			setState(2058);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(TABLE);
			setState(2061);
			match(OF);
			setState(2062);
			type_spec();
			setState(2065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(2063);
				match(NOT);
				setState(2064);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2067);
			match(EXTERNAL);
			setState(2068);
			match(NAME);
			setState(2069);
			expression();
			setState(2070);
			match(LANGUAGE);
			setState(2071);
			match(JAVA);
			setState(2072);
			match(USING);
			setState(2073);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			match(BODY);
			setState(2076);
			type_name();
			setState(2077);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2079); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2078);
				type_body_elements();
				}
				}
				setState(2081); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(2083);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_type_body_elements);
		try {
			setState(2087);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2085);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2086);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2089);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2090);
			match(MEMBER);
			setState(2091);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2093);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(2094);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(2095);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(2096);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2099);
			match(PROCEDURE);
			setState(2100);
			procedure_name();
			setState(2101);
			match(LEFT_PAREN);
			setState(2102);
			type_elements_parameter();
			setState(2107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2103);
				match(COMMA);
				setState(2104);
				type_elements_parameter();
				}
				}
				setState(2109);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2110);
			match(RIGHT_PAREN);
			setState(2111);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(2112);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2113);
					match(DECLARE);
					}
				}

				setState(2117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(2116);
					seq_of_declare_specs();
					}
				}

				setState(2119);
				body();
				setState(2120);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			match(FUNCTION);
			setState(2125);
			function_name();
			setState(2137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2126);
				match(LEFT_PAREN);
				setState(2127);
				type_elements_parameter();
				setState(2132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2128);
					match(COMMA);
					setState(2129);
					type_elements_parameter();
					}
					}
					setState(2134);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2135);
				match(RIGHT_PAREN);
				}
			}

			setState(2139);
			match(RETURN);
			setState(2140);
			type_spec();
			setState(2141);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				{
				setState(2142);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2143);
					match(DECLARE);
					}
				}

				setState(2147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(2146);
					seq_of_declare_specs();
					}
				}

				setState(2149);
				body();
				setState(2150);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2154);
				match(FINAL);
				}
			}

			setState(2158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2157);
				match(INSTANTIABLE);
				}
			}

			setState(2160);
			match(CONSTRUCTOR);
			setState(2161);
			match(FUNCTION);
			setState(2162);
			type_spec();
			setState(2180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2163);
				match(LEFT_PAREN);
				{
				setState(2164);
				match(SELF);
				setState(2165);
				match(IN);
				setState(2166);
				match(OUT);
				setState(2167);
				type_spec();
				setState(2168);
				match(COMMA);
				}
				setState(2170);
				type_elements_parameter();
				setState(2175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2171);
					match(COMMA);
					setState(2172);
					type_elements_parameter();
					}
					}
					setState(2177);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2178);
				match(RIGHT_PAREN);
				}
			}

			setState(2182);
			match(RETURN);
			setState(2183);
			match(SELF);
			setState(2184);
			match(AS);
			setState(2185);
			match(RESULT);
			setState(2186);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				setState(2187);
				call_spec();
				}
				break;
			case 2:
				{
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2188);
					match(DECLARE);
					}
				}

				setState(2192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(2191);
					seq_of_declare_specs();
					}
				}

				setState(2194);
				body();
				setState(2195);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2199);
				match(NOT);
				}
			}

			setState(2202);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_object_member_spec);
		int _la;
		try {
			setState(2210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2204);
				identifier();
				setState(2205);
				type_spec();
				setState(2207);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(2206);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2209);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2212);
			match(EXTERNAL);
			setState(2213);
			match(NAME);
			setState(2214);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(2216);
				modifier_clause();
				}
				break;
			}
			setState(2220); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2219);
				element_spec_options();
				}
				}
				setState(2222); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			setState(2226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(2224);
				match(COMMA);
				setState(2225);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_element_spec_options);
		try {
			setState(2231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(2228);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2229);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2230);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2236);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(2234);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(2235);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238);
			match(PROCEDURE);
			setState(2239);
			procedure_name();
			setState(2240);
			match(LEFT_PAREN);
			setState(2241);
			type_elements_parameter();
			setState(2246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2242);
				match(COMMA);
				setState(2243);
				type_elements_parameter();
				}
				}
				setState(2248);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2249);
			match(RIGHT_PAREN);
			setState(2252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2250);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2251);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2254);
			match(FUNCTION);
			setState(2255);
			function_name();
			setState(2267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2256);
				match(LEFT_PAREN);
				setState(2257);
				type_elements_parameter();
				setState(2262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2258);
					match(COMMA);
					setState(2259);
					type_elements_parameter();
					}
					}
					setState(2264);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2265);
				match(RIGHT_PAREN);
				}
			}

			setState(2269);
			match(RETURN);
			setState(2274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2270);
				type_spec();
				}
				break;
			case 2:
				{
				setState(2271);
				match(SELF);
				setState(2272);
				match(AS);
				setState(2273);
				match(RESULT);
				}
				break;
			}
			setState(2284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(2276);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2277);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(2278);
				match(EXTERNAL);
				setState(2280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(2279);
					match(VARIABLE);
					}
				}

				setState(2282);
				match(NAME);
				setState(2283);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(2286);
				match(FINAL);
				}
			}

			setState(2290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(2289);
				match(INSTANTIABLE);
				}
			}

			setState(2292);
			match(CONSTRUCTOR);
			setState(2293);
			match(FUNCTION);
			setState(2294);
			type_spec();
			setState(2312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2295);
				match(LEFT_PAREN);
				{
				setState(2296);
				match(SELF);
				setState(2297);
				match(IN);
				setState(2298);
				match(OUT);
				setState(2299);
				type_spec();
				setState(2300);
				match(COMMA);
				}
				setState(2302);
				type_elements_parameter();
				setState(2307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2303);
					match(COMMA);
					setState(2304);
					type_elements_parameter();
					}
					}
					setState(2309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2310);
				match(RIGHT_PAREN);
				}
			}

			setState(2314);
			match(RETURN);
			setState(2315);
			match(SELF);
			setState(2316);
			match(AS);
			setState(2317);
			match(RESULT);
			setState(2320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(2318);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2319);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2322);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2323);
			match(MEMBER);
			setState(2324);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2326);
			match(PRAGMA);
			setState(2327);
			match(RESTRICT_REFERENCES);
			setState(2328);
			match(LEFT_PAREN);
			setState(2329);
			pragma_elements();
			setState(2334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2330);
				match(COMMA);
				setState(2331);
				pragma_elements();
				}
				}
				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2337);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_pragma_elements);
		try {
			setState(2341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2339);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2340);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			parameter_name();
			setState(2344);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2346);
			match(DROP);
			setState(2347);
			match(SEQUENCE);
			setState(2348);
			sequence_name();
			setState(2349);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2351);
			match(ALTER);
			setState(2352);
			match(SEQUENCE);
			setState(2353);
			sequence_name();
			setState(2355); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2354);
				sequence_spec();
				}
				}
				setState(2357); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (GLOBAL - 226)) | (1L << (INCREMENT - 226)) | (1L << (KEEP - 226)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (MAXVALUE - 332)) | (1L << (MINVALUE - 332)) | (1L << (NOCACHE - 332)) | (1L << (NOCYCLE - 332)) | (1L << (NOKEEP - 332)) | (1L << (NOMAXVALUE - 332)) | (1L << (NOMINVALUE - 332)) | (1L << (NOORDER - 332)))) != 0) || _la==ORDER || _la==SESSION || _la==START );
			setState(2359);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2361);
			match(CREATE);
			setState(2362);
			match(SEQUENCE);
			setState(2363);
			sequence_name();
			setState(2367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (GLOBAL - 226)) | (1L << (INCREMENT - 226)) | (1L << (KEEP - 226)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (MAXVALUE - 332)) | (1L << (MINVALUE - 332)) | (1L << (NOCACHE - 332)) | (1L << (NOCYCLE - 332)) | (1L << (NOKEEP - 332)) | (1L << (NOMAXVALUE - 332)) | (1L << (NOMINVALUE - 332)) | (1L << (NOORDER - 332)))) != 0) || _la==ORDER || _la==SESSION || _la==START) {
				{
				{
				setState(2364);
				sequence_spec();
				}
				}
				setState(2369);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2370);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode NOKEEP() { return getToken(PlSqlParser.NOKEEP, 0); }
		public TerminalNode SESSION() { return getToken(PlSqlParser.SESSION, 0); }
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_sequence_spec);
		int _la;
		try {
			setState(2398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(2376);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENT:
					{
					setState(2372);
					match(INCREMENT);
					setState(2373);
					match(BY);
					}
					break;
				case START:
					{
					setState(2374);
					match(START);
					setState(2375);
					match(WITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2378);
				integer();
				}
				break;
			case MAXVALUE:
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2382);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(2379);
					match(MAXVALUE);
					setState(2380);
					integer();
					}
					break;
				case NOMAXVALUE:
					{
					setState(2381);
					match(NOMAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MINVALUE:
			case NOMINVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2387);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(2384);
					match(MINVALUE);
					setState(2385);
					integer();
					}
					break;
				case NOMINVALUE:
					{
					setState(2386);
					match(NOMINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CYCLE:
			case NOCYCLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2389);
				_la = _input.LA(1);
				if ( !(_la==CYCLE || _la==NOCYCLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CACHE:
			case NOCACHE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2393);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CACHE:
					{
					setState(2390);
					match(CACHE);
					setState(2391);
					integer();
					}
					break;
				case NOCACHE:
					{
					setState(2392);
					match(NOCACHE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NOORDER:
			case ORDER:
				enterOuterAlt(_localctx, 6);
				{
				setState(2395);
				_la = _input.LA(1);
				if ( !(_la==NOORDER || _la==ORDER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case KEEP:
			case NOKEEP:
				enterOuterAlt(_localctx, 7);
				{
				setState(2396);
				_la = _input.LA(1);
				if ( !(_la==KEEP || _la==NOKEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case GLOBAL:
			case SESSION:
				enterOuterAlt(_localctx, 8);
				{
				setState(2397);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode COMPUTE() { return getToken(PlSqlParser.COMPUTE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2400);
			match(CREATE);
			setState(2402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2401);
				match(UNIQUE);
				}
			}

			setState(2404);
			match(INDEX);
			setState(2405);
			index_name();
			setState(2406);
			match(ON);
			setState(2407);
			tableview_name();
			setState(2408);
			paren_column_list();
			setState(2411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2409);
				match(TABLESPACE);
				setState(2410);
				match(REGULAR_ID);
				}
			}

			setState(2415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPUTE) {
				{
				setState(2413);
				match(COMPUTE);
				setState(2414);
				match(STATISTICS);
				}
			}

			setState(2417);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_indexContext extends ParserRuleContext {
		public Index_nameContext old_index_name;
		public Index_nameContext new_index_name;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<Index_nameContext> index_name() {
			return getRuleContexts(Index_nameContext.class);
		}
		public Index_nameContext index_name(int i) {
			return getRuleContext(Index_nameContext.class,i);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_index; }
	}

	public final Alter_indexContext alter_index() throws RecognitionException {
		Alter_indexContext _localctx = new Alter_indexContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_alter_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2419);
			match(ALTER);
			setState(2420);
			match(INDEX);
			setState(2421);
			((Alter_indexContext)_localctx).old_index_name = index_name();
			setState(2422);
			match(RENAME);
			setState(2423);
			match(TO);
			setState(2424);
			((Alter_indexContext)_localctx).new_index_name = index_name();
			setState(2425);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public User_object_nameContext user_object_name() {
			return getRuleContext(User_object_nameContext.class,0);
		}
		public List<Identified_byContext> identified_by() {
			return getRuleContexts(Identified_byContext.class);
		}
		public Identified_byContext identified_by(int i) {
			return getRuleContext(Identified_byContext.class,i);
		}
		public List<Identified_other_clauseContext> identified_other_clause() {
			return getRuleContexts(Identified_other_clauseContext.class);
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return getRuleContext(Identified_other_clauseContext.class,i);
		}
		public List<User_tablespace_clauseContext> user_tablespace_clause() {
			return getRuleContexts(User_tablespace_clauseContext.class);
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return getRuleContext(User_tablespace_clauseContext.class,i);
		}
		public List<Quota_clauseContext> quota_clause() {
			return getRuleContexts(Quota_clauseContext.class);
		}
		public Quota_clauseContext quota_clause(int i) {
			return getRuleContext(Quota_clauseContext.class,i);
		}
		public List<Profile_clauseContext> profile_clause() {
			return getRuleContexts(Profile_clauseContext.class);
		}
		public Profile_clauseContext profile_clause(int i) {
			return getRuleContext(Profile_clauseContext.class,i);
		}
		public List<Password_expire_clauseContext> password_expire_clause() {
			return getRuleContexts(Password_expire_clauseContext.class);
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return getRuleContext(Password_expire_clauseContext.class,i);
		}
		public List<User_lock_clauseContext> user_lock_clause() {
			return getRuleContexts(User_lock_clauseContext.class);
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return getRuleContext(User_lock_clauseContext.class,i);
		}
		public List<User_editions_clauseContext> user_editions_clause() {
			return getRuleContexts(User_editions_clauseContext.class);
		}
		public User_editions_clauseContext user_editions_clause(int i) {
			return getRuleContext(User_editions_clauseContext.class,i);
		}
		public List<Container_clauseContext> container_clause() {
			return getRuleContexts(Container_clauseContext.class);
		}
		public Container_clauseContext container_clause(int i) {
			return getRuleContext(Container_clauseContext.class,i);
		}
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_create_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2427);
			match(CREATE);
			setState(2428);
			match(USER);
			setState(2429);
			user_object_name();
			setState(2439); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
				case 1:
					{
					setState(2430);
					identified_by();
					}
					break;
				case 2:
					{
					setState(2431);
					identified_other_clause();
					}
					break;
				case 3:
					{
					setState(2432);
					user_tablespace_clause();
					}
					break;
				case 4:
					{
					setState(2433);
					quota_clause();
					}
					break;
				case 5:
					{
					setState(2434);
					profile_clause();
					}
					break;
				case 6:
					{
					setState(2435);
					password_expire_clause();
					}
					break;
				case 7:
					{
					setState(2436);
					user_lock_clause();
					}
					break;
				case 8:
					{
					setState(2437);
					user_editions_clause();
					}
					break;
				case 9:
					{
					setState(2438);
					container_clause();
					}
					break;
				}
				}
				setState(2441); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ACCOUNT || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (PASSWORD - 432)) | (1L << (PROFILE - 432)) | (1L << (QUOTA - 432)))) != 0) || _la==TEMPORARY );
			setState(2443);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public List<User_object_nameContext> user_object_name() {
			return getRuleContexts(User_object_nameContext.class);
		}
		public User_object_nameContext user_object_name(int i) {
			return getRuleContext(User_object_nameContext.class,i);
		}
		public List<Alter_identified_byContext> alter_identified_by() {
			return getRuleContexts(Alter_identified_byContext.class);
		}
		public Alter_identified_byContext alter_identified_by(int i) {
			return getRuleContext(Alter_identified_byContext.class,i);
		}
		public List<Identified_other_clauseContext> identified_other_clause() {
			return getRuleContexts(Identified_other_clauseContext.class);
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return getRuleContext(Identified_other_clauseContext.class,i);
		}
		public List<User_tablespace_clauseContext> user_tablespace_clause() {
			return getRuleContexts(User_tablespace_clauseContext.class);
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return getRuleContext(User_tablespace_clauseContext.class,i);
		}
		public List<Quota_clauseContext> quota_clause() {
			return getRuleContexts(Quota_clauseContext.class);
		}
		public Quota_clauseContext quota_clause(int i) {
			return getRuleContext(Quota_clauseContext.class,i);
		}
		public List<Profile_clauseContext> profile_clause() {
			return getRuleContexts(Profile_clauseContext.class);
		}
		public Profile_clauseContext profile_clause(int i) {
			return getRuleContext(Profile_clauseContext.class,i);
		}
		public List<User_default_role_clauseContext> user_default_role_clause() {
			return getRuleContexts(User_default_role_clauseContext.class);
		}
		public User_default_role_clauseContext user_default_role_clause(int i) {
			return getRuleContext(User_default_role_clauseContext.class,i);
		}
		public List<Password_expire_clauseContext> password_expire_clause() {
			return getRuleContexts(Password_expire_clauseContext.class);
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return getRuleContext(Password_expire_clauseContext.class,i);
		}
		public List<User_lock_clauseContext> user_lock_clause() {
			return getRuleContexts(User_lock_clauseContext.class);
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return getRuleContext(User_lock_clauseContext.class,i);
		}
		public List<Alter_user_editions_clauseContext> alter_user_editions_clause() {
			return getRuleContexts(Alter_user_editions_clauseContext.class);
		}
		public Alter_user_editions_clauseContext alter_user_editions_clause(int i) {
			return getRuleContext(Alter_user_editions_clauseContext.class,i);
		}
		public List<Container_clauseContext> container_clause() {
			return getRuleContexts(Container_clauseContext.class);
		}
		public Container_clauseContext container_clause(int i) {
			return getRuleContext(Container_clauseContext.class,i);
		}
		public List<Container_data_clauseContext> container_data_clause() {
			return getRuleContexts(Container_data_clauseContext.class);
		}
		public Container_data_clauseContext container_data_clause(int i) {
			return getRuleContext(Container_data_clauseContext.class,i);
		}
		public Proxy_clauseContext proxy_clause() {
			return getRuleContext(Proxy_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_alter_user);
		int _la;
		try {
			int _alt;
			setState(2476);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2445);
				match(ALTER);
				setState(2446);
				match(USER);
				setState(2447);
				user_object_name();
				setState(2459); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2459);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
					case 1:
						{
						setState(2448);
						alter_identified_by();
						}
						break;
					case 2:
						{
						setState(2449);
						identified_other_clause();
						}
						break;
					case 3:
						{
						setState(2450);
						user_tablespace_clause();
						}
						break;
					case 4:
						{
						setState(2451);
						quota_clause();
						}
						break;
					case 5:
						{
						setState(2452);
						profile_clause();
						}
						break;
					case 6:
						{
						setState(2453);
						user_default_role_clause();
						}
						break;
					case 7:
						{
						setState(2454);
						password_expire_clause();
						}
						break;
					case 8:
						{
						setState(2455);
						user_lock_clause();
						}
						break;
					case 9:
						{
						setState(2456);
						alter_user_editions_clause();
						}
						break;
					case 10:
						{
						setState(2457);
						container_clause();
						}
						break;
					case 11:
						{
						setState(2458);
						container_data_clause();
						}
						break;
					}
					}
					setState(2461); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ACCOUNT || _la==ADD || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (PASSWORD - 432)) | (1L << (PROFILE - 432)) | (1L << (QUOTA - 432)) | (1L << (REMOVE - 432)))) != 0) || _la==SET || _la==TEMPORARY );
				setState(2463);
				match(SEMICOLON);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(2469); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2466);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2465);
							match(COMMA);
							}
						}

						setState(2468);
						user_object_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2471); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,188,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2473);
				proxy_clause();
				setState(2474);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_identified_byContext extends ParserRuleContext {
		public Identified_byContext identified_by() {
			return getRuleContext(Identified_byContext.class,0);
		}
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Alter_identified_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_identified_by; }
	}

	public final Alter_identified_byContext alter_identified_by() throws RecognitionException {
		Alter_identified_byContext _localctx = new Alter_identified_byContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_alter_identified_by);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2478);
			identified_by();
			setState(2481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REPLACE) {
				{
				setState(2479);
				match(REPLACE);
				setState(2480);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identified_byContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED() { return getToken(PlSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Identified_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identified_by; }
	}

	public final Identified_byContext identified_by() throws RecognitionException {
		Identified_byContext _localctx = new Identified_byContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_identified_by);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2483);
			match(IDENTIFIED);
			setState(2484);
			match(BY);
			setState(2485);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identified_other_clauseContext extends ParserRuleContext {
		public TerminalNode IDENTIFIED() { return getToken(PlSqlParser.IDENTIFIED, 0); }
		public TerminalNode EXTERNALLY() { return getToken(PlSqlParser.EXTERNALLY, 0); }
		public TerminalNode GLOBALLY() { return getToken(PlSqlParser.GLOBALLY, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Identified_other_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identified_other_clause; }
	}

	public final Identified_other_clauseContext identified_other_clause() throws RecognitionException {
		Identified_other_clauseContext _localctx = new Identified_other_clauseContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_identified_other_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2487);
			match(IDENTIFIED);
			setState(2488);
			_la = _input.LA(1);
			if ( !(_la==EXTERNALLY || _la==GLOBALLY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2489);
				match(AS);
				setState(2490);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_tablespace_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public User_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_tablespace_clause; }
	}

	public final User_tablespace_clauseContext user_tablespace_clause() throws RecognitionException {
		User_tablespace_clauseContext _localctx = new User_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_user_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2494);
			match(TABLESPACE);
			setState(2495);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quota_clauseContext extends ParserRuleContext {
		public TerminalNode QUOTA() { return getToken(PlSqlParser.QUOTA, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public Quota_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quota_clause; }
	}

	public final Quota_clauseContext quota_clause() throws RecognitionException {
		Quota_clauseContext _localctx = new Quota_clauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_quota_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2497);
			match(QUOTA);
			setState(2500);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
				{
				setState(2498);
				size_clause();
				}
				break;
			case UNLIMITED:
				{
				setState(2499);
				match(UNLIMITED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2502);
			match(ON);
			setState(2503);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Profile_clauseContext extends ParserRuleContext {
		public TerminalNode PROFILE() { return getToken(PlSqlParser.PROFILE, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Profile_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profile_clause; }
	}

	public final Profile_clauseContext profile_clause() throws RecognitionException {
		Profile_clauseContext _localctx = new Profile_clauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_profile_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2505);
			match(PROFILE);
			setState(2506);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_clauseContext extends ParserRuleContext {
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<TerminalNode> EXCEPT() { return getTokens(PlSqlParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(PlSqlParser.EXCEPT, i);
		}
		public Role_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_clause; }
	}

	public final Role_clauseContext role_clause() throws RecognitionException {
		Role_clauseContext _localctx = new Role_clauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_role_clause);
		int _la;
		try {
			int _alt;
			setState(2531);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2512); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2509);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2508);
							match(COMMA);
							}
						}

						setState(2511);
						role_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2514); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,194,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2516);
				match(ALL);
				setState(2528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCEPT) {
					{
					{
					setState(2517);
					match(EXCEPT);
					setState(2522); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(2519);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2518);
								match(COMMA);
								}
							}

							setState(2521);
							role_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2524); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,196,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(2530);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_default_role_clauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode ROLE() { return getToken(PlSqlParser.ROLE, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public Role_clauseContext role_clause() {
			return getRuleContext(Role_clauseContext.class,0);
		}
		public User_default_role_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_default_role_clause; }
	}

	public final User_default_role_clauseContext user_default_role_clause() throws RecognitionException {
		User_default_role_clauseContext _localctx = new User_default_role_clauseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_user_default_role_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2533);
			match(DEFAULT);
			setState(2534);
			match(ROLE);
			setState(2537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2535);
				match(NONE);
				}
				break;
			case 2:
				{
				setState(2536);
				role_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Password_expire_clauseContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(PlSqlParser.PASSWORD, 0); }
		public TerminalNode EXPIRE() { return getToken(PlSqlParser.EXPIRE, 0); }
		public Password_expire_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password_expire_clause; }
	}

	public final Password_expire_clauseContext password_expire_clause() throws RecognitionException {
		Password_expire_clauseContext _localctx = new Password_expire_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_password_expire_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2539);
			match(PASSWORD);
			setState(2540);
			match(EXPIRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_lock_clauseContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(PlSqlParser.ACCOUNT, 0); }
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode UNLOCK() { return getToken(PlSqlParser.UNLOCK, 0); }
		public User_lock_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_lock_clause; }
	}

	public final User_lock_clauseContext user_lock_clause() throws RecognitionException {
		User_lock_clauseContext _localctx = new User_lock_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_user_lock_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2542);
			match(ACCOUNT);
			setState(2543);
			_la = _input.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_editions_clauseContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode EDITIONS() { return getToken(PlSqlParser.EDITIONS, 0); }
		public User_editions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_editions_clause; }
	}

	public final User_editions_clauseContext user_editions_clause() throws RecognitionException {
		User_editions_clauseContext _localctx = new User_editions_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_user_editions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2545);
			match(ENABLE);
			setState(2546);
			match(EDITIONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_editions_clauseContext extends ParserRuleContext {
		public User_editions_clauseContext user_editions_clause() {
			return getRuleContext(User_editions_clauseContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Alter_user_editions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_editions_clause; }
	}

	public final Alter_user_editions_clauseContext alter_user_editions_clause() throws RecognitionException {
		Alter_user_editions_clauseContext _localctx = new Alter_user_editions_clauseContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alter_user_editions_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2548);
			user_editions_clause();
			setState(2558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2549);
				match(FOR);
				setState(2554); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2551);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2550);
							match(COMMA);
							}
						}

						setState(2553);
						regular_id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2556); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(2561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(2560);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proxy_clauseContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode THROUGH() { return getToken(PlSqlParser.THROUGH, 0); }
		public TerminalNode ENTERPRISE() { return getToken(PlSqlParser.ENTERPRISE, 0); }
		public TerminalNode USERS() { return getToken(PlSqlParser.USERS, 0); }
		public User_object_nameContext user_object_name() {
			return getRuleContext(User_object_nameContext.class,0);
		}
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(PlSqlParser.AUTHENTICATION, 0); }
		public TerminalNode REQUIRED() { return getToken(PlSqlParser.REQUIRED, 0); }
		public TerminalNode AUTHENTICATED() { return getToken(PlSqlParser.AUTHENTICATED, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode ROLES() { return getToken(PlSqlParser.ROLES, 0); }
		public TerminalNode ROLE() { return getToken(PlSqlParser.ROLE, 0); }
		public Role_clauseContext role_clause() {
			return getRuleContext(Role_clauseContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(PlSqlParser.PASSWORD, 0); }
		public TerminalNode CERTIFICATE() { return getToken(PlSqlParser.CERTIFICATE, 0); }
		public TerminalNode DISTINGUISHED() { return getToken(PlSqlParser.DISTINGUISHED, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public Proxy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proxy_clause; }
	}

	public final Proxy_clauseContext proxy_clause() throws RecognitionException {
		Proxy_clauseContext _localctx = new Proxy_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_proxy_clause);
		int _la;
		try {
			setState(2602);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REVOKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2563);
				match(REVOKE);
				setState(2564);
				match(CONNECT);
				setState(2565);
				match(THROUGH);
				setState(2569);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ENTERPRISE:
					{
					setState(2566);
					match(ENTERPRISE);
					setState(2567);
					match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(2568);
					user_object_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2571);
				match(GRANT);
				setState(2572);
				match(CONNECT);
				setState(2573);
				match(THROUGH);
				setState(2600);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ENTERPRISE:
					{
					setState(2574);
					match(ENTERPRISE);
					setState(2575);
					match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(2576);
					user_object_name();
					setState(2584);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2577);
						match(WITH);
						setState(2582);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NO:
							{
							setState(2578);
							match(NO);
							setState(2579);
							match(ROLES);
							}
							break;
						case ROLE:
							{
							setState(2580);
							match(ROLE);
							setState(2581);
							role_clause();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(2588);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTHENTICATION) {
						{
						setState(2586);
						match(AUTHENTICATION);
						setState(2587);
						match(REQUIRED);
						}
					}

					setState(2598);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTHENTICATED) {
						{
						setState(2590);
						match(AUTHENTICATED);
						setState(2591);
						match(USING);
						setState(2596);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PASSWORD:
							{
							setState(2592);
							match(PASSWORD);
							}
							break;
						case CERTIFICATE:
							{
							setState(2593);
							match(CERTIFICATE);
							}
							break;
						case DISTINGUISHED:
							{
							setState(2594);
							match(DISTINGUISHED);
							setState(2595);
							match(NAME);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_namesContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Container_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_names; }
	}

	public final Container_namesContext container_names() throws RecognitionException {
		Container_namesContext _localctx = new Container_namesContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_container_names);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2604);
			match(LEFT_PAREN);
			setState(2609); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2606);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2605);
					match(COMMA);
					}
				}

				setState(2608);
				id_expression();
				}
				}
				setState(2611); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			setState(2613);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_container_dataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONTAINER_DATA() { return getToken(PlSqlParser.CONTAINER_DATA, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Container_namesContext container_names() {
			return getRuleContext(Container_namesContext.class,0);
		}
		public Set_container_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_container_data; }
	}

	public final Set_container_dataContext set_container_data() throws RecognitionException {
		Set_container_dataContext _localctx = new Set_container_dataContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_set_container_data);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2615);
			match(SET);
			setState(2616);
			match(CONTAINER_DATA);
			setState(2617);
			match(EQUALS_OP);
			setState(2621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2618);
				match(ALL);
				}
				break;
			case DEFAULT:
				{
				setState(2619);
				match(DEFAULT);
				}
				break;
			case LEFT_PAREN:
				{
				setState(2620);
				container_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_rem_container_dataContext extends ParserRuleContext {
		public TerminalNode CONTAINER_DATA() { return getToken(PlSqlParser.CONTAINER_DATA, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public Container_namesContext container_names() {
			return getRuleContext(Container_namesContext.class,0);
		}
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode REMOVE() { return getToken(PlSqlParser.REMOVE, 0); }
		public Add_rem_container_dataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_rem_container_data; }
	}

	public final Add_rem_container_dataContext add_rem_container_data() throws RecognitionException {
		Add_rem_container_dataContext _localctx = new Add_rem_container_dataContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_add_rem_container_data);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2623);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==REMOVE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2624);
			match(CONTAINER_DATA);
			setState(2625);
			match(EQUALS_OP);
			setState(2626);
			container_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_data_clauseContext extends ParserRuleContext {
		public Set_container_dataContext set_container_data() {
			return getRuleContext(Set_container_dataContext.class,0);
		}
		public Add_rem_container_dataContext add_rem_container_data() {
			return getRuleContext(Add_rem_container_dataContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Container_tableview_nameContext container_tableview_name() {
			return getRuleContext(Container_tableview_nameContext.class,0);
		}
		public Container_data_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_data_clause; }
	}

	public final Container_data_clauseContext container_data_clause() throws RecognitionException {
		Container_data_clauseContext _localctx = new Container_data_clauseContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_container_data_clause);
		int _la;
		try {
			setState(2634);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2628);
				set_container_data();
				}
				break;
			case ADD:
			case REMOVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2629);
				add_rem_container_data();
				setState(2632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2630);
					match(FOR);
					setState(2631);
					container_tableview_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_drop_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2636);
			match(DROP);
			setState(2637);
			match(INDEX);
			setState(2638);
			index_name();
			setState(2639);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statmentContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public Revoke_system_privilegesContext revoke_system_privileges() {
			return getRuleContext(Revoke_system_privilegesContext.class,0);
		}
		public Revoke_object_privilegesContext revoke_object_privileges() {
			return getRuleContext(Revoke_object_privilegesContext.class,0);
		}
		public Revoke_statmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statment; }
	}

	public final Revoke_statmentContext revoke_statment() throws RecognitionException {
		Revoke_statmentContext _localctx = new Revoke_statmentContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_revoke_statment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2641);
			match(REVOKE);
			setState(2644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				setState(2642);
				revoke_system_privileges();
				}
				break;
			case 2:
				{
				setState(2643);
				revoke_object_privileges();
				}
				break;
			}
			setState(2646);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_system_privilegesContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public List<Grantee_nameContext> grantee_name() {
			return getRuleContexts(Grantee_nameContext.class);
		}
		public Grantee_nameContext grantee_name(int i) {
			return getRuleContext(Grantee_nameContext.class,i);
		}
		public List<TerminalNode> PUBLIC() { return getTokens(PlSqlParser.PUBLIC); }
		public TerminalNode PUBLIC(int i) {
			return getToken(PlSqlParser.PUBLIC, i);
		}
		public Role_nameContext role_name() {
			return getRuleContext(Role_nameContext.class,0);
		}
		public System_privilegeContext system_privilege() {
			return getRuleContext(System_privilegeContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Revoke_system_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_system_privileges; }
	}

	public final Revoke_system_privilegesContext revoke_system_privileges() throws RecognitionException {
		Revoke_system_privilegesContext _localctx = new Revoke_system_privilegesContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_revoke_system_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2648);
				match(COMMA);
				}
			}

			setState(2653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				setState(2651);
				role_name();
				}
				break;
			case 2:
				{
				setState(2652);
				system_privilege();
				}
				break;
			}
			}
			setState(2655);
			match(FROM);
			setState(2661); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2661);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					setState(2657);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2656);
						match(COMMA);
						}
					}

					setState(2659);
					grantee_name();
					}
					break;
				case PUBLIC:
					{
					setState(2660);
					match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2663); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (PUBLIC - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_object_privilegesContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return getRuleContext(Grant_object_nameContext.class,0);
		}
		public List<Grantee_nameContext> grantee_name() {
			return getRuleContexts(Grantee_nameContext.class);
		}
		public Grantee_nameContext grantee_name(int i) {
			return getRuleContext(Grantee_nameContext.class,i);
		}
		public List<TerminalNode> PUBLIC() { return getTokens(PlSqlParser.PUBLIC); }
		public TerminalNode PUBLIC(int i) {
			return getToken(PlSqlParser.PUBLIC, i);
		}
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public List<Object_privilegeContext> object_privilege() {
			return getRuleContexts(Object_privilegeContext.class);
		}
		public Object_privilegeContext object_privilege(int i) {
			return getRuleContext(Object_privilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Revoke_object_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_object_privileges; }
	}

	public final Revoke_object_privilegesContext revoke_object_privileges() throws RecognitionException {
		Revoke_object_privilegesContext _localctx = new Revoke_object_privilegesContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_revoke_object_privileges);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2672); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2666);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2665);
						match(COMMA);
						}
					}

					setState(2670);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
					case 1:
						{
						setState(2668);
						role_name();
						}
						break;
					case 2:
						{
						setState(2669);
						object_privilege();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2674); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			{
			setState(2676);
			match(ON);
			setState(2677);
			grant_object_name();
			}
			setState(2679);
			match(FROM);
			setState(2686); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2686);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
					case 1:
						{
						setState(2681);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2680);
							match(COMMA);
							}
						}

						setState(2683);
						grantee_name();
						}
						break;
					case 2:
						{
						setState(2684);
						match(PUBLIC);
						}
						break;
					case 3:
						{
						setState(2685);
						role_name();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2688); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(2690);
				match(CASCADE);
				setState(2691);
				match(CONSTRAINTS);
				}
				break;
			case FORCE:
				{
				setState(2692);
				match(FORCE);
				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_statementContext extends ParserRuleContext {
		public List<TerminalNode> GRANT() { return getTokens(PlSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(PlSqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return getRuleContext(Grant_object_nameContext.class,0);
		}
		public List<Grantee_nameContext> grantee_name() {
			return getRuleContexts(Grantee_nameContext.class);
		}
		public Grantee_nameContext grantee_name(int i) {
			return getRuleContext(Grantee_nameContext.class,i);
		}
		public List<TerminalNode> PUBLIC() { return getTokens(PlSqlParser.PUBLIC); }
		public TerminalNode PUBLIC(int i) {
			return getToken(PlSqlParser.PUBLIC, i);
		}
		public List<TerminalNode> WITH() { return getTokens(PlSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(PlSqlParser.WITH, i);
		}
		public List<TerminalNode> OPTION() { return getTokens(PlSqlParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(PlSqlParser.OPTION, i);
		}
		public TerminalNode HIERARCHY() { return getToken(PlSqlParser.HIERARCHY, 0); }
		public Container_clauseContext container_clause() {
			return getRuleContext(Container_clauseContext.class,0);
		}
		public TerminalNode ADMIN() { return getToken(PlSqlParser.ADMIN, 0); }
		public TerminalNode DELEGATE() { return getToken(PlSqlParser.DELEGATE, 0); }
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public List<System_privilegeContext> system_privilege() {
			return getRuleContexts(System_privilegeContext.class);
		}
		public System_privilegeContext system_privilege(int i) {
			return getRuleContext(System_privilegeContext.class,i);
		}
		public List<Object_privilegeContext> object_privilege() {
			return getRuleContexts(Object_privilegeContext.class);
		}
		public Object_privilegeContext object_privilege(int i) {
			return getRuleContext(Object_privilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Paren_column_listContext> paren_column_list() {
			return getRuleContexts(Paren_column_listContext.class);
		}
		public Paren_column_listContext paren_column_list(int i) {
			return getRuleContext(Paren_column_listContext.class,i);
		}
		public Grant_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statement; }
	}

	public final Grant_statementContext grant_statement() throws RecognitionException {
		Grant_statementContext _localctx = new Grant_statementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_grant_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2695);
			match(GRANT);
			setState(2707); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2697);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2696);
						match(COMMA);
						}
					}

					setState(2705);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
					case 1:
						{
						setState(2699);
						role_name();
						}
						break;
					case 2:
						{
						setState(2700);
						system_privilege();
						}
						break;
					case 3:
						{
						setState(2701);
						object_privilege();
						setState(2703);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==LEFT_PAREN) {
							{
							setState(2702);
							paren_column_list();
							}
						}

						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2709); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,233,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2711);
				match(ON);
				setState(2712);
				grant_object_name();
				}
			}

			setState(2715);
			match(TO);
			setState(2721); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2721);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					setState(2717);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2716);
						match(COMMA);
						}
					}

					setState(2719);
					grantee_name();
					}
					break;
				case PUBLIC:
					{
					setState(2720);
					match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2723); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (PUBLIC - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			setState(2728);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				{
				setState(2725);
				match(WITH);
				setState(2726);
				_la = _input.LA(1);
				if ( !(_la==ADMIN || _la==DELEGATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2727);
				match(OPTION);
				}
				break;
			}
			setState(2733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				setState(2730);
				match(WITH);
				setState(2731);
				match(HIERARCHY);
				setState(2732);
				match(OPTION);
				}
				break;
			}
			setState(2738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2735);
				match(WITH);
				setState(2736);
				match(GRANT);
				setState(2737);
				match(OPTION);
				}
			}

			setState(2741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINER) {
				{
				setState(2740);
				container_clause();
				}
			}

			setState(2743);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_clauseContext extends ParserRuleContext {
		public TerminalNode CONTAINER() { return getToken(PlSqlParser.CONTAINER, 0); }
		public TerminalNode EQUALS_OP() { return getToken(PlSqlParser.EQUALS_OP, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Container_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_clause; }
	}

	public final Container_clauseContext container_clause() throws RecognitionException {
		Container_clauseContext _localctx = new Container_clauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_container_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2745);
			match(CONTAINER);
			setState(2746);
			match(EQUALS_OP);
			setState(2747);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==CURRENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode EDITIONING() { return getToken(PlSqlParser.EDITIONING, 0); }
		public TerminalNode EDITIONABLE() { return getToken(PlSqlParser.EDITIONABLE, 0); }
		public TerminalNode NOEDITIONABLE() { return getToken(PlSqlParser.NOEDITIONABLE, 0); }
		public View_optionsContext view_options() {
			return getRuleContext(View_optionsContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			match(CREATE);
			setState(2752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2750);
				match(OR);
				setState(2751);
				match(REPLACE);
				}
			}

			setState(2758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==NO) {
				{
				setState(2755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2754);
					match(NO);
					}
				}

				setState(2757);
				match(FORCE);
				}
			}

			setState(2766);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EDITIONING:
				{
				setState(2760);
				match(EDITIONING);
				}
				break;
			case EDITIONABLE:
				{
				setState(2761);
				match(EDITIONABLE);
				setState(2763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EDITIONING) {
					{
					setState(2762);
					match(EDITIONING);
					}
				}

				}
				break;
			case NOEDITIONABLE:
				{
				setState(2765);
				match(NOEDITIONABLE);
				}
				break;
			case VIEW:
				break;
			default:
				break;
			}
			setState(2768);
			match(VIEW);
			setState(2769);
			tableview_name();
			setState(2771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF || _la==LEFT_PAREN) {
				{
				setState(2770);
				view_options();
				}
			}

			setState(2773);
			match(AS);
			setState(2774);
			subquery();
			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2775);
				subquery_restriction_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_optionsContext extends ParserRuleContext {
		public View_alias_constraintContext view_alias_constraint() {
			return getRuleContext(View_alias_constraintContext.class,0);
		}
		public Object_view_clauseContext object_view_clause() {
			return getRuleContext(Object_view_clauseContext.class,0);
		}
		public View_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_options; }
	}

	public final View_optionsContext view_options() throws RecognitionException {
		View_optionsContext _localctx = new View_optionsContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_view_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2780);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(2778);
				view_alias_constraint();
				}
				break;
			case OF:
				{
				setState(2779);
				object_view_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_alias_constraintContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Table_aliasContext> table_alias() {
			return getRuleContexts(Table_aliasContext.class);
		}
		public Table_aliasContext table_alias(int i) {
			return getRuleContext(Table_aliasContext.class,i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public List<TerminalNode> VISIBLE() { return getTokens(PlSqlParser.VISIBLE); }
		public TerminalNode VISIBLE(int i) {
			return getToken(PlSqlParser.VISIBLE, i);
		}
		public List<TerminalNode> INVISIBLE() { return getTokens(PlSqlParser.INVISIBLE); }
		public TerminalNode INVISIBLE(int i) {
			return getToken(PlSqlParser.INVISIBLE, i);
		}
		public View_alias_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_alias_constraint; }
	}

	public final View_alias_constraintContext view_alias_constraint() throws RecognitionException {
		View_alias_constraintContext _localctx = new View_alias_constraintContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_view_alias_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2782);
			match(LEFT_PAREN);
			setState(2799); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2783);
					match(COMMA);
					}
				}

				setState(2797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(2786);
					table_alias();
					setState(2788);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INVISIBLE || _la==VISIBLE) {
						{
						setState(2787);
						_la = _input.LA(1);
						if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2793);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(2790);
							inline_constraint();
							}
							} 
						}
						setState(2795);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(2796);
					out_of_line_constraint();
					}
					break;
				}
				}
				}
				setState(2801); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FOREIGN - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIMARY - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNIQUE - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (NATIONAL_CHAR_STRING_LIT - 714)) | (1L << (CHAR_STRING - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			setState(2803);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_view_clauseContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IDENTIFIER() { return getToken(PlSqlParser.IDENTIFIER, 0); }
		public TerminalNode ID() { return getToken(PlSqlParser.ID, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public List<TerminalNode> REGULAR_ID() { return getTokens(PlSqlParser.REGULAR_ID); }
		public TerminalNode REGULAR_ID(int i) {
			return getToken(PlSqlParser.REGULAR_ID, i);
		}
		public List<Out_of_line_constraintContext> out_of_line_constraint() {
			return getRuleContexts(Out_of_line_constraintContext.class);
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return getRuleContext(Out_of_line_constraintContext.class,i);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Object_view_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_view_clause; }
	}

	public final Object_view_clauseContext object_view_clause() throws RecognitionException {
		Object_view_clauseContext _localctx = new Object_view_clauseContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_object_view_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2805);
			match(OF);
			setState(2806);
			type_name();
			setState(2825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(2807);
				match(WITH);
				setState(2808);
				match(OBJECT);
				setState(2809);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER || _la==ID || _la==OID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2821);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(2810);
					match(DEFAULT);
					}
					break;
				case LEFT_PAREN:
					{
					setState(2811);
					match(LEFT_PAREN);
					setState(2816); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2813);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2812);
							match(COMMA);
							}
						}

						setState(2815);
						match(REGULAR_ID);
						}
						}
						setState(2818); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMMA || _la==REGULAR_ID );
					setState(2820);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case UNDER:
				{
				setState(2823);
				match(UNDER);
				setState(2824);
				tableview_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LEFT_PAREN) {
				{
				{
				setState(2827);
				match(LEFT_PAREN);
				setState(2836); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2829);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2828);
						match(COMMA);
						}
					}

					setState(2834);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHECK:
					case CONSTRAINT:
					case FOREIGN:
					case PRIMARY:
					case UNIQUE:
						{
						setState(2831);
						out_of_line_constraint();
						}
						break;
					case REGULAR_ID:
						{
						setState(2832);
						match(REGULAR_ID);
						setState(2833);
						inline_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2838); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE || _la==COMMA || _la==REGULAR_ID );
				setState(2840);
				match(RIGHT_PAREN);
				}
				}
				setState(2846);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintContext extends ParserRuleContext {
		public Inline_constraintContext inline_constraint() {
			return getRuleContext(Inline_constraintContext.class,0);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return getRuleContext(Inline_ref_constraintContext.class,0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return getRuleContext(Out_of_line_ref_constraintContext.class,0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint; }
	}

	public final ConstraintContext constraint() throws RecognitionException {
		ConstraintContext _localctx = new ConstraintContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			inline_constraint();
			setState(2848);
			out_of_line_constraint();
			setState(2849);
			inline_ref_constraint();
			setState(2850);
			out_of_line_ref_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_constraintContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public Check_constraintContext check_constraint() {
			return getRuleContext(Check_constraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_inline_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2852);
				match(CONSTRAINT);
				setState(2853);
				constraint_name();
				}
			}

			setState(2865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(2857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2856);
					match(NOT);
					}
				}

				setState(2859);
				match(NULL);
				}
				break;
			case UNIQUE:
				{
				setState(2860);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(2861);
				match(PRIMARY);
				setState(2862);
				match(KEY);
				}
				break;
			case REFERENCES:
				{
				setState(2863);
				references_clause();
				}
				break;
			case CHECK:
				{
				setState(2864);
				check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(2867);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public List<Primary_key_clauseContext> primary_key_clause() {
			return getRuleContexts(Primary_key_clauseContext.class);
		}
		public Primary_key_clauseContext primary_key_clause(int i) {
			return getRuleContext(Primary_key_clauseContext.class,i);
		}
		public List<Foreign_key_clauseContext> foreign_key_clause() {
			return getRuleContexts(Foreign_key_clauseContext.class);
		}
		public Foreign_key_clauseContext foreign_key_clause(int i) {
			return getRuleContext(Foreign_key_clauseContext.class,i);
		}
		public List<Unique_key_clauseContext> unique_key_clause() {
			return getRuleContexts(Unique_key_clauseContext.class);
		}
		public Unique_key_clauseContext unique_key_clause(int i) {
			return getRuleContext(Unique_key_clauseContext.class,i);
		}
		public List<Check_constraintContext> check_constraint() {
			return getRuleContexts(Check_constraintContext.class);
		}
		public Check_constraintContext check_constraint(int i) {
			return getRuleContext(Check_constraintContext.class,i);
		}
		public List<TerminalNode> CONSTRAINT() { return getTokens(PlSqlParser.CONSTRAINT); }
		public TerminalNode CONSTRAINT(int i) {
			return getToken(PlSqlParser.CONSTRAINT, i);
		}
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_out_of_line_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2880); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2872);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CONSTRAINT) {
						{
						setState(2870);
						match(CONSTRAINT);
						setState(2871);
						constraint_name();
						}
					}

					setState(2878);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY:
						{
						setState(2874);
						primary_key_clause();
						}
						break;
					case FOREIGN:
						{
						setState(2875);
						foreign_key_clause();
						}
						break;
					case UNIQUE:
						{
						setState(2876);
						unique_key_clause();
						}
						break;
					case CHECK:
						{
						setState(2877);
						check_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2882); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,269,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2884);
				constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_stateContext extends ParserRuleContext {
		public List<TerminalNode> DEFERRABLE() { return getTokens(PlSqlParser.DEFERRABLE); }
		public TerminalNode DEFERRABLE(int i) {
			return getToken(PlSqlParser.DEFERRABLE, i);
		}
		public List<TerminalNode> INITIALLY() { return getTokens(PlSqlParser.INITIALLY); }
		public TerminalNode INITIALLY(int i) {
			return getToken(PlSqlParser.INITIALLY, i);
		}
		public List<Using_index_clauseContext> using_index_clause() {
			return getRuleContexts(Using_index_clauseContext.class);
		}
		public Using_index_clauseContext using_index_clause(int i) {
			return getRuleContext(Using_index_clauseContext.class,i);
		}
		public List<Exceptions_clauseContext> exceptions_clause() {
			return getRuleContexts(Exceptions_clauseContext.class);
		}
		public Exceptions_clauseContext exceptions_clause(int i) {
			return getRuleContext(Exceptions_clauseContext.class,i);
		}
		public List<TerminalNode> IMMEDIATE() { return getTokens(PlSqlParser.IMMEDIATE); }
		public TerminalNode IMMEDIATE(int i) {
			return getToken(PlSqlParser.IMMEDIATE, i);
		}
		public List<TerminalNode> DEFERRED() { return getTokens(PlSqlParser.DEFERRED); }
		public TerminalNode DEFERRED(int i) {
			return getToken(PlSqlParser.DEFERRED, i);
		}
		public List<TerminalNode> RELY() { return getTokens(PlSqlParser.RELY); }
		public TerminalNode RELY(int i) {
			return getToken(PlSqlParser.RELY, i);
		}
		public List<TerminalNode> NORELY() { return getTokens(PlSqlParser.NORELY); }
		public TerminalNode NORELY(int i) {
			return getToken(PlSqlParser.NORELY, i);
		}
		public List<TerminalNode> ENABLE() { return getTokens(PlSqlParser.ENABLE); }
		public TerminalNode ENABLE(int i) {
			return getToken(PlSqlParser.ENABLE, i);
		}
		public List<TerminalNode> DISABLE() { return getTokens(PlSqlParser.DISABLE); }
		public TerminalNode DISABLE(int i) {
			return getToken(PlSqlParser.DISABLE, i);
		}
		public List<TerminalNode> VALIDATE() { return getTokens(PlSqlParser.VALIDATE); }
		public TerminalNode VALIDATE(int i) {
			return getToken(PlSqlParser.VALIDATE, i);
		}
		public List<TerminalNode> NOVALIDATE() { return getTokens(PlSqlParser.NOVALIDATE); }
		public TerminalNode NOVALIDATE(int i) {
			return getToken(PlSqlParser.NOVALIDATE, i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_state; }
	}

	public final Constraint_stateContext constraint_state() throws RecognitionException {
		Constraint_stateContext _localctx = new Constraint_stateContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2898); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2898);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						setState(2888);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(2887);
							match(NOT);
							}
						}

						setState(2890);
						match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						setState(2891);
						match(INITIALLY);
						setState(2892);
						_la = _input.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						setState(2893);
						_la = _input.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case USING:
						{
						setState(2894);
						using_index_clause();
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						setState(2895);
						_la = _input.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						setState(2896);
						_la = _input.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case EXCEPTIONS:
						{
						setState(2897);
						exceptions_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2900); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,273,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_index_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Index_propertiesContext index_properties() {
			return getRuleContext(Index_propertiesContext.class,0);
		}
		public Using_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_index_clause; }
	}

	public final Using_index_clauseContext using_index_clause() throws RecognitionException {
		Using_index_clauseContext _localctx = new Using_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_using_index_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2902);
			match(USING);
			setState(2903);
			match(INDEX);
			setState(2912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2904);
				index_name();
				}
				break;
			case 2:
				{
				setState(2905);
				match(LEFT_PAREN);
				setState(2906);
				create_index();
				setState(2907);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(2909);
					index_properties();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_propertiesContext extends ParserRuleContext {
		public List<Global_partitioned_indexContext> global_partitioned_index() {
			return getRuleContexts(Global_partitioned_indexContext.class);
		}
		public Global_partitioned_indexContext global_partitioned_index(int i) {
			return getRuleContext(Global_partitioned_indexContext.class,i);
		}
		public List<Local_partitioned_indexContext> local_partitioned_index() {
			return getRuleContexts(Local_partitioned_indexContext.class);
		}
		public Local_partitioned_indexContext local_partitioned_index(int i) {
			return getRuleContext(Local_partitioned_indexContext.class,i);
		}
		public List<Index_attributesContext> index_attributes() {
			return getRuleContexts(Index_attributesContext.class);
		}
		public Index_attributesContext index_attributes(int i) {
			return getRuleContext(Index_attributesContext.class,i);
		}
		public TerminalNode INDEXTYPE() { return getToken(PlSqlParser.INDEXTYPE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Domain_index_clauseContext domain_index_clause() {
			return getRuleContext(Domain_index_clauseContext.class,0);
		}
		public Xmlindex_clauseContext xmlindex_clause() {
			return getRuleContext(Xmlindex_clauseContext.class,0);
		}
		public Index_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_properties; }
	}

	public final Index_propertiesContext index_properties() throws RecognitionException {
		Index_propertiesContext _localctx = new Index_propertiesContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_index_properties);
		try {
			int _alt;
			setState(2933);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
			case FILESYSTEM_LIKE_LOGGING:
			case GLOBAL:
			case INDEXING:
			case INITRANS:
			case INVISIBLE:
			case LOCAL:
			case LOGGING:
			case NOCOMPRESS:
			case NOLOGGING:
			case NOPARALLEL:
			case NOSORT:
			case ONLINE:
			case PARALLEL:
			case PCTFREE:
			case PCTUSED:
			case REVERSE:
			case SORT:
			case STORAGE:
			case TABLESPACE:
			case VISIBLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2923); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2923);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case GLOBAL:
						case LOCAL:
							{
							setState(2916);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case GLOBAL:
								{
								setState(2914);
								global_partitioned_index();
								}
								break;
							case LOCAL:
								{
								setState(2915);
								local_partitioned_index();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case COMPRESS:
						case FILESYSTEM_LIKE_LOGGING:
						case INDEXING:
						case INITRANS:
						case INVISIBLE:
						case LOGGING:
						case NOCOMPRESS:
						case NOLOGGING:
						case NOPARALLEL:
						case NOSORT:
						case ONLINE:
						case PARALLEL:
						case PCTFREE:
						case PCTUSED:
						case REVERSE:
						case SORT:
						case STORAGE:
						case TABLESPACE:
						case VISIBLE:
							{
							setState(2919); 
							_errHandler.sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									setState(2918);
									index_attributes();
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								setState(2921); 
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,277,_ctx);
							} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2925); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,279,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case INDEXTYPE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2927);
				match(INDEXTYPE);
				setState(2928);
				match(IS);
				setState(2931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					setState(2929);
					domain_index_clause();
					}
					break;
				case 2:
					{
					setState(2930);
					xmlindex_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Global_partitioned_indexContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Index_partitioning_clauseContext index_partitioning_clause() {
			return getRuleContext(Index_partitioning_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public Global_partitioned_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_partitioned_index; }
	}

	public final Global_partitioned_indexContext global_partitioned_index() throws RecognitionException {
		Global_partitioned_indexContext _localctx = new Global_partitioned_indexContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_global_partitioned_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2935);
			match(GLOBAL);
			setState(2936);
			match(PARTITION);
			setState(2937);
			match(BY);
			setState(2950);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				{
				setState(2938);
				match(RANGE);
				setState(2939);
				paren_column_list();
				setState(2940);
				match(LEFT_PAREN);
				setState(2941);
				index_partitioning_clause();
				setState(2942);
				match(RIGHT_PAREN);
				}
				break;
			case HASH:
				{
				setState(2944);
				match(HASH);
				setState(2945);
				paren_column_list();
				setState(2948);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(2946);
					individual_hash_partitions();
					}
					break;
				case PARTITIONS:
					{
					setState(2947);
					hash_partitions_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_partitionsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Partition_clauseContext> partition_clause() {
			return getRuleContexts(Partition_clauseContext.class);
		}
		public Partition_clauseContext partition_clause(int i) {
			return getRuleContext(Partition_clauseContext.class,i);
		}
		public List<Partitioning_storage_clauseContext> partitioning_storage_clause() {
			return getRuleContexts(Partitioning_storage_clauseContext.class);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause(int i) {
			return getRuleContext(Partitioning_storage_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Indexing_clauseContext> indexing_clause() {
			return getRuleContexts(Indexing_clauseContext.class);
		}
		public Indexing_clauseContext indexing_clause(int i) {
			return getRuleContext(Indexing_clauseContext.class,i);
		}
		public Individual_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_partitions; }
	}

	public final Individual_hash_partitionsContext individual_hash_partitions() throws RecognitionException {
		Individual_hash_partitionsContext _localctx = new Individual_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_individual_hash_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2952);
			match(LEFT_PAREN);
			setState(2962); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2953);
					match(COMMA);
					}
				}

				{
				setState(2956);
				partition_clause();
				setState(2958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEXING) {
					{
					setState(2957);
					indexing_clause();
					}
				}

				setState(2960);
				partitioning_storage_clause();
				}
				}
				}
				setState(2964); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			setState(2966);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_partitioning_clauseContext extends ParserRuleContext {
		public Partition_clause_optionalContext partition_clause_optional() {
			return getRuleContext(Partition_clause_optionalContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(PlSqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(PlSqlParser.THAN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Index_partitioning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_partitioning_clause; }
	}

	public final Index_partitioning_clauseContext index_partitioning_clause() throws RecognitionException {
		Index_partitioning_clauseContext _localctx = new Index_partitioning_clauseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_index_partitioning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2968);
			partition_clause_optional();
			setState(2969);
			match(VALUES);
			setState(2970);
			match(LESS);
			setState(2971);
			match(THAN);
			setState(2972);
			match(LEFT_PAREN);
			setState(2973);
			literal();
			setState(2978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2974);
				match(COMMA);
				setState(2975);
				literal();
				}
				}
				setState(2980);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2981);
			match(RIGHT_PAREN);
			setState(2983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(2982);
				segment_attributes_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_attributes_clauseContext extends ParserRuleContext {
		public List<Tablespace_clauseContext> tablespace_clause() {
			return getRuleContexts(Tablespace_clauseContext.class);
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return getRuleContext(Tablespace_clauseContext.class,i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_attributes_clause; }
	}

	public final Segment_attributes_clauseContext segment_attributes_clause() throws RecognitionException {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_segment_attributes_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2992); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2992);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						setState(2986); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(2985);
								physical_attributes_clause();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(2988); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,289,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case TABLESPACE:
						{
						setState(2990);
						tablespace_clause();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						setState(2991);
						logging_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2994); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,291,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_attributesContext extends ParserRuleContext {
		public List<Physical_attributes_clauseContext> physical_attributes_clause() {
			return getRuleContexts(Physical_attributes_clauseContext.class);
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return getRuleContext(Physical_attributes_clauseContext.class,i);
		}
		public Logging_clauseContext logging_clause() {
			return getRuleContext(Logging_clauseContext.class,0);
		}
		public TerminalNode ONLINE() { return getToken(PlSqlParser.ONLINE, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Tablespace_nameContext tablespace_name() {
			return getRuleContext(Tablespace_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Advanced_index_compressionContext advanced_index_compression() {
			return getRuleContext(Advanced_index_compressionContext.class,0);
		}
		public TerminalNode SORT() { return getToken(PlSqlParser.SORT, 0); }
		public TerminalNode NOSORT() { return getToken(PlSqlParser.NOSORT, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode VISIBLE() { return getToken(PlSqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(PlSqlParser.INVISIBLE, 0); }
		public Partial_index_clauseContext partial_index_clause() {
			return getRuleContext(Partial_index_clauseContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public Index_attributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_attributes; }
	}

	public final Index_attributesContext index_attributes() throws RecognitionException {
		Index_attributesContext _localctx = new Index_attributesContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_index_attributes);
		int _la;
		try {
			int _alt;
			setState(3014);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITRANS:
			case PCTFREE:
			case PCTUSED:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2997); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2996);
						physical_attributes_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2999); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,292,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case FILESYSTEM_LIKE_LOGGING:
			case LOGGING:
			case NOLOGGING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3001);
				logging_clause();
				}
				break;
			case ONLINE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3002);
				match(ONLINE);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3003);
				match(TABLESPACE);
				setState(3006);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(3004);
					tablespace_name();
					}
					break;
				case DEFAULT:
					{
					setState(3005);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 5);
				{
				setState(3008);
				advanced_index_compression();
				}
				break;
			case NOSORT:
			case SORT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3009);
				_la = _input.LA(1);
				if ( !(_la==NOSORT || _la==SORT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REVERSE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3010);
				match(REVERSE);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(3011);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case INDEXING:
				enterOuterAlt(_localctx, 9);
				{
				setState(3012);
				partial_index_clause();
				}
				break;
			case NOPARALLEL:
			case PARALLEL:
				enterOuterAlt(_localctx, 10);
				{
				setState(3013);
				parallel_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode PCTFREE() { return getToken(PlSqlParser.PCTFREE, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public TerminalNode PCTUSED() { return getToken(PlSqlParser.PCTUSED, 0); }
		public TerminalNode INITRANS() { return getToken(PlSqlParser.INITRANS, 0); }
		public Storage_clauseContext storage_clause() {
			return getRuleContext(Storage_clauseContext.class,0);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_attributes_clause; }
	}

	public final Physical_attributes_clauseContext physical_attributes_clause() throws RecognitionException {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_physical_attributes_clause);
		try {
			setState(3023);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PCTFREE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3016);
				match(PCTFREE);
				setState(3017);
				integer();
				}
				break;
			case PCTUSED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3018);
				match(PCTUSED);
				setState(3019);
				integer();
				}
				break;
			case INITRANS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3020);
				match(INITRANS);
				setState(3021);
				integer();
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3022);
				storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitions_by_quantityContext extends ParserRuleContext {
		public TerminalNode PARTITIONS() { return getToken(PlSqlParser.PARTITIONS, 0); }
		public Hash_partition_quantityContext hash_partition_quantity() {
			return getRuleContext(Hash_partition_quantityContext.class,0);
		}
		public List<TerminalNode> STORE() { return getTokens(PlSqlParser.STORE); }
		public TerminalNode STORE(int i) {
			return getToken(PlSqlParser.STORE, i);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Tablespace_nameContext> tablespace_name() {
			return getRuleContexts(Tablespace_nameContext.class);
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return getRuleContext(Tablespace_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Index_compressionContext index_compression() {
			return getRuleContext(Index_compressionContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(PlSqlParser.OVERFLOW, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Hash_partitions_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions_by_quantity; }
	}

	public final Hash_partitions_by_quantityContext hash_partitions_by_quantity() throws RecognitionException {
		Hash_partitions_by_quantityContext _localctx = new Hash_partitions_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_hash_partitions_by_quantity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3025);
			match(PARTITIONS);
			setState(3026);
			hash_partition_quantity();
			setState(3040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				setState(3027);
				match(STORE);
				setState(3028);
				match(IN);
				setState(3029);
				match(LEFT_PAREN);
				setState(3030);
				tablespace_name();
				setState(3035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3031);
					match(COMMA);
					setState(3032);
					tablespace_name();
					}
					}
					setState(3037);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3038);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(3042);
				table_compression();
				}
				break;
			case 2:
				{
				setState(3043);
				index_compression();
				}
				break;
			}
			setState(3060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERFLOW) {
				{
				setState(3046);
				match(OVERFLOW);
				setState(3047);
				match(STORE);
				setState(3048);
				match(IN);
				setState(3049);
				match(LEFT_PAREN);
				setState(3050);
				tablespace_name();
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3051);
					match(COMMA);
					setState(3052);
					tablespace_name();
					}
					}
					setState(3057);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3058);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_partitioned_indexContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public On_range_partitioned_tableContext on_range_partitioned_table() {
			return getRuleContext(On_range_partitioned_tableContext.class,0);
		}
		public On_list_partitioned_tableContext on_list_partitioned_table() {
			return getRuleContext(On_list_partitioned_tableContext.class,0);
		}
		public On_hash_partitioned_tableContext on_hash_partitioned_table() {
			return getRuleContext(On_hash_partitioned_tableContext.class,0);
		}
		public On_comp_partitioned_tableContext on_comp_partitioned_table() {
			return getRuleContext(On_comp_partitioned_tableContext.class,0);
		}
		public Local_partitioned_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_partitioned_index; }
	}

	public final Local_partitioned_indexContext local_partitioned_index() throws RecognitionException {
		Local_partitioned_indexContext _localctx = new Local_partitioned_indexContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_local_partitioned_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062);
			match(LOCAL);
			setState(3067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(3063);
				on_range_partitioned_table();
				}
				break;
			case 2:
				{
				setState(3064);
				on_list_partitioned_table();
				}
				break;
			case 3:
				{
				setState(3065);
				on_hash_partitioned_table();
				}
				break;
			case 4:
				{
				setState(3066);
				on_comp_partitioned_table();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_range_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Partition_clause_optionalContext partition_clause_optional() {
			return getRuleContext(Partition_clause_optionalContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> UNUSABLE() { return getTokens(PlSqlParser.UNUSABLE); }
		public TerminalNode UNUSABLE(int i) {
			return getToken(PlSqlParser.UNUSABLE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<TerminalNode> PARTITION() { return getTokens(PlSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PlSqlParser.PARTITION, i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Index_compressionContext> index_compression() {
			return getRuleContexts(Index_compressionContext.class);
		}
		public Index_compressionContext index_compression(int i) {
			return getRuleContext(Index_compressionContext.class,i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public On_range_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_range_partitioned_table; }
	}

	public final On_range_partitioned_tableContext on_range_partitioned_table() throws RecognitionException {
		On_range_partitioned_tableContext _localctx = new On_range_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_on_range_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3069);
			match(LEFT_PAREN);
			setState(3070);
			partition_clause_optional();
			setState(3077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(3073); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3073);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						setState(3071);
						segment_attributes_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(3072);
						index_compression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3075); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
				}
			}

			setState(3080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNUSABLE) {
				{
				setState(3079);
				match(UNUSABLE);
				}
			}

			setState(3100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3082);
				match(COMMA);
				setState(3083);
				match(PARTITION);
				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(3084);
					partition_name();
					}
				}

				setState(3093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(3089); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(3089);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(3087);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(3088);
							index_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(3091); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(3096);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE) {
					{
					setState(3095);
					match(UNUSABLE);
					}
				}

				}
				}
				setState(3102);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3103);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_list_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Partition_clause_optionalContext> partition_clause_optional() {
			return getRuleContexts(Partition_clause_optionalContext.class);
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return getRuleContext(Partition_clause_optionalContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Usable_clauseContext> usable_clause() {
			return getRuleContexts(Usable_clauseContext.class);
		}
		public Usable_clauseContext usable_clause(int i) {
			return getRuleContext(Usable_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Index_compressionContext> index_compression() {
			return getRuleContexts(Index_compressionContext.class);
		}
		public Index_compressionContext index_compression(int i) {
			return getRuleContext(Index_compressionContext.class,i);
		}
		public On_list_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_list_partitioned_table; }
	}

	public final On_list_partitioned_tableContext on_list_partitioned_table() throws RecognitionException {
		On_list_partitioned_tableContext _localctx = new On_list_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_on_list_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3105);
			match(LEFT_PAREN);
			setState(3106);
			partition_clause_optional();
			setState(3113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(3109); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3109);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						setState(3107);
						segment_attributes_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(3108);
						index_compression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3111); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
				}
			}

			setState(3116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNUSABLE || _la==USABLE) {
				{
				setState(3115);
				usable_clause();
				}
			}

			setState(3133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3118);
				match(COMMA);
				setState(3119);
				partition_clause_optional();
				setState(3126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(3122); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(3122);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(3120);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(3121);
							index_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(3124); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					setState(3128);
					usable_clause();
					}
				}

				}
				}
				setState(3135);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3136);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_hash_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Tablespace_nameContext> tablespace_name() {
			return getRuleContexts(Tablespace_nameContext.class);
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return getRuleContext(Tablespace_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Partition_clause_optionalContext> partition_clause_optional() {
			return getRuleContexts(Partition_clause_optionalContext.class);
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return getRuleContext(Partition_clause_optionalContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Tablespace_clauseContext> tablespace_clause() {
			return getRuleContexts(Tablespace_clauseContext.class);
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return getRuleContext(Tablespace_clauseContext.class,i);
		}
		public List<Advanced_index_compressionContext> advanced_index_compression() {
			return getRuleContexts(Advanced_index_compressionContext.class);
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return getRuleContext(Advanced_index_compressionContext.class,i);
		}
		public List<Usable_clauseContext> usable_clause() {
			return getRuleContexts(Usable_clauseContext.class);
		}
		public Usable_clauseContext usable_clause(int i) {
			return getRuleContext(Usable_clauseContext.class,i);
		}
		public On_hash_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_hash_partitioned_table; }
	}

	public final On_hash_partitioned_tableContext on_hash_partitioned_table() throws RecognitionException {
		On_hash_partitioned_tableContext _localctx = new On_hash_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_on_hash_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3180);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORE:
				{
				setState(3138);
				match(STORE);
				setState(3139);
				match(IN);
				setState(3140);
				match(LEFT_PAREN);
				setState(3141);
				tablespace_name();
				setState(3146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3142);
					match(COMMA);
					setState(3143);
					tablespace_name();
					}
					}
					setState(3148);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3149);
				match(RIGHT_PAREN);
				}
				break;
			case LEFT_PAREN:
				{
				setState(3151);
				match(LEFT_PAREN);
				setState(3152);
				partition_clause_optional();
				setState(3154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(3153);
					tablespace_clause();
					}
				}

				setState(3157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==NOCOMPRESS) {
					{
					setState(3156);
					advanced_index_compression();
					}
				}

				setState(3160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					setState(3159);
					usable_clause();
					}
				}

				setState(3175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3162);
					match(COMMA);
					setState(3163);
					partition_clause_optional();
					setState(3165);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLESPACE) {
						{
						setState(3164);
						tablespace_clause();
						}
					}

					setState(3168);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						setState(3167);
						advanced_index_compression();
						}
					}

					setState(3171);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UNUSABLE || _la==USABLE) {
						{
						setState(3170);
						usable_clause();
						}
					}

					}
					}
					setState(3177);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3178);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_comp_partitioned_tableContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Partition_clause_optionalContext> partition_clause_optional() {
			return getRuleContexts(Partition_clause_optionalContext.class);
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return getRuleContext(Partition_clause_optionalContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Store_inContext store_in() {
			return getRuleContext(Store_inContext.class,0);
		}
		public List<Usable_clauseContext> usable_clause() {
			return getRuleContexts(Usable_clauseContext.class);
		}
		public Usable_clauseContext usable_clause(int i) {
			return getRuleContext(Usable_clauseContext.class,i);
		}
		public List<Index_subpartition_clauseContext> index_subpartition_clause() {
			return getRuleContexts(Index_subpartition_clauseContext.class);
		}
		public Index_subpartition_clauseContext index_subpartition_clause(int i) {
			return getRuleContext(Index_subpartition_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public List<Advanced_index_compressionContext> advanced_index_compression() {
			return getRuleContexts(Advanced_index_compressionContext.class);
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return getRuleContext(Advanced_index_compressionContext.class,i);
		}
		public On_comp_partitioned_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_comp_partitioned_table; }
	}

	public final On_comp_partitioned_tableContext on_comp_partitioned_table() throws RecognitionException {
		On_comp_partitioned_tableContext _localctx = new On_comp_partitioned_tableContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_on_comp_partitioned_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(3182);
				store_in();
				}
			}

			setState(3185);
			match(LEFT_PAREN);
			setState(3186);
			partition_clause_optional();
			setState(3193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(3189); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3189);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						setState(3187);
						segment_attributes_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						setState(3188);
						advanced_index_compression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3191); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
				}
			}

			setState(3196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNUSABLE || _la==USABLE) {
				{
				setState(3195);
				usable_clause();
				}
			}

			setState(3199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE || _la==LEFT_PAREN) {
				{
				setState(3198);
				index_subpartition_clause();
				}
			}

			setState(3219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3201);
				match(COMMA);
				setState(3202);
				partition_clause_optional();
				setState(3209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(3205); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(3205);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							setState(3203);
							segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							setState(3204);
							advanced_index_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(3207); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				setState(3212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					setState(3211);
					usable_clause();
					}
				}

				setState(3215);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORE || _la==LEFT_PAREN) {
					{
					setState(3214);
					index_subpartition_clause();
					}
				}

				}
				}
				setState(3221);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3222);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltable_index_clauseContext extends ParserRuleContext {
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public Xmltable_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltable_index_clause; }
	}

	public final Xmltable_index_clauseContext xmltable_index_clause() throws RecognitionException {
		Xmltable_index_clauseContext _localctx = new Xmltable_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_xmltable_index_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3224);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlindex_clauseContext extends ParserRuleContext {
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public Xmlindex_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlindex_clause; }
	}

	public final Xmlindex_clauseContext xmlindex_clause() throws RecognitionException {
		Xmlindex_clauseContext _localctx = new Xmlindex_clauseContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_xmlindex_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public Partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_clause; }
	}

	public final Partition_clauseContext partition_clause() throws RecognitionException {
		Partition_clauseContext _localctx = new Partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_partition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3228);
			match(PARTITION);
			setState(3229);
			partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_clause_optionalContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public Partition_clause_optionalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_clause_optional; }
	}

	public final Partition_clause_optionalContext partition_clause_optional() throws RecognitionException {
		Partition_clause_optionalContext _localctx = new Partition_clause_optionalContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_partition_clause_optional);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3231);
			match(PARTITION);
			setState(3233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(3232);
				partition_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Indexing_clauseContext extends ParserRuleContext {
		public TerminalNode INDEXING() { return getToken(PlSqlParser.INDEXING, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public Indexing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexing_clause; }
	}

	public final Indexing_clauseContext indexing_clause() throws RecognitionException {
		Indexing_clauseContext _localctx = new Indexing_clauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_indexing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3235);
			match(INDEXING);
			setState(3236);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partitioning_storage_clauseContext extends ParserRuleContext {
		public List<Tablespace_clauseContext> tablespace_clause() {
			return getRuleContexts(Tablespace_clauseContext.class);
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return getRuleContext(Tablespace_clauseContext.class,i);
		}
		public List<TerminalNode> OVERFLOW() { return getTokens(PlSqlParser.OVERFLOW); }
		public TerminalNode OVERFLOW(int i) {
			return getToken(PlSqlParser.OVERFLOW, i);
		}
		public List<Table_compressionContext> table_compression() {
			return getRuleContexts(Table_compressionContext.class);
		}
		public Table_compressionContext table_compression(int i) {
			return getRuleContext(Table_compressionContext.class,i);
		}
		public List<Index_compressionContext> index_compression() {
			return getRuleContexts(Index_compressionContext.class);
		}
		public Index_compressionContext index_compression(int i) {
			return getRuleContext(Index_compressionContext.class,i);
		}
		public List<Inmemory_clauseContext> inmemory_clause() {
			return getRuleContexts(Inmemory_clauseContext.class);
		}
		public Inmemory_clauseContext inmemory_clause(int i) {
			return getRuleContext(Inmemory_clauseContext.class,i);
		}
		public List<Lob_partitioning_storageContext> lob_partitioning_storage() {
			return getRuleContexts(Lob_partitioning_storageContext.class);
		}
		public Lob_partitioning_storageContext lob_partitioning_storage(int i) {
			return getRuleContext(Lob_partitioning_storageContext.class,i);
		}
		public List<TerminalNode> VARRAY() { return getTokens(PlSqlParser.VARRAY); }
		public TerminalNode VARRAY(int i) {
			return getToken(PlSqlParser.VARRAY, i);
		}
		public List<Varray_itemContext> varray_item() {
			return getRuleContexts(Varray_itemContext.class);
		}
		public Varray_itemContext varray_item(int i) {
			return getRuleContext(Varray_itemContext.class,i);
		}
		public List<TerminalNode> STORE() { return getTokens(PlSqlParser.STORE); }
		public TerminalNode STORE(int i) {
			return getToken(PlSqlParser.STORE, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public List<TerminalNode> LOB() { return getTokens(PlSqlParser.LOB); }
		public TerminalNode LOB(int i) {
			return getToken(PlSqlParser.LOB, i);
		}
		public List<Lob_segnameContext> lob_segname() {
			return getRuleContexts(Lob_segnameContext.class);
		}
		public Lob_segnameContext lob_segname(int i) {
			return getRuleContext(Lob_segnameContext.class,i);
		}
		public List<TerminalNode> SECUREFILE() { return getTokens(PlSqlParser.SECUREFILE); }
		public TerminalNode SECUREFILE(int i) {
			return getToken(PlSqlParser.SECUREFILE, i);
		}
		public List<TerminalNode> BASICFILE() { return getTokens(PlSqlParser.BASICFILE); }
		public TerminalNode BASICFILE(int i) {
			return getToken(PlSqlParser.BASICFILE, i);
		}
		public Partitioning_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitioning_storage_clause; }
	}

	public final Partitioning_storage_clauseContext partitioning_storage_clause() throws RecognitionException {
		Partitioning_storage_clauseContext _localctx = new Partitioning_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_partitioning_storage_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3257); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(3257);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
					case 1:
						{
						setState(3238);
						tablespace_clause();
						}
						break;
					case 2:
						{
						setState(3239);
						match(OVERFLOW);
						setState(3241);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
						case 1:
							{
							setState(3240);
							tablespace_clause();
							}
							break;
						}
						}
						break;
					case 3:
						{
						setState(3243);
						table_compression();
						}
						break;
					case 4:
						{
						setState(3244);
						index_compression();
						}
						break;
					case 5:
						{
						setState(3245);
						inmemory_clause();
						}
						break;
					case 6:
						{
						setState(3246);
						lob_partitioning_storage();
						}
						break;
					case 7:
						{
						setState(3247);
						match(VARRAY);
						setState(3248);
						varray_item();
						setState(3249);
						match(STORE);
						setState(3250);
						match(AS);
						setState(3252);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==BASICFILE || _la==SECUREFILE) {
							{
							setState(3251);
							_la = _input.LA(1);
							if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(3254);
						match(LOB);
						setState(3255);
						lob_segname();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3259); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_table_clauseContext extends ParserRuleContext {
		public TerminalNode INMEMORY() { return getToken(PlSqlParser.INMEMORY, 0); }
		public Inmemory_parametersContext inmemory_parameters() {
			return getRuleContext(Inmemory_parametersContext.class,0);
		}
		public Inmemory_column_clauseContext inmemory_column_clause() {
			return getRuleContext(Inmemory_column_clauseContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Inmemory_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_table_clause; }
	}

	public final Inmemory_table_clauseContext inmemory_table_clause() throws RecognitionException {
		Inmemory_table_clauseContext _localctx = new Inmemory_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_inmemory_table_clause);
		try {
			setState(3269);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INMEMORY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3261);
				match(INMEMORY);
				setState(3265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(3262);
					inmemory_parameters();
					setState(3263);
					inmemory_column_clause();
					}
					break;
				}
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3267);
				match(NO);
				setState(3268);
				match(INMEMORY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_column_clauseContext extends ParserRuleContext {
		public TerminalNode INMEMORY() { return getToken(PlSqlParser.INMEMORY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Inmemory_memcompressContext inmemory_memcompress() {
			return getRuleContext(Inmemory_memcompressContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Inmemory_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_column_clause; }
	}

	public final Inmemory_column_clauseContext inmemory_column_clause() throws RecognitionException {
		Inmemory_column_clauseContext _localctx = new Inmemory_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_inmemory_column_clause);
		int _la;
		try {
			setState(3278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INMEMORY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3271);
				match(INMEMORY);
				setState(3273);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MEMCOMPRESS || _la==NO) {
					{
					setState(3272);
					inmemory_memcompress();
					}
				}

				setState(3275);
				paren_column_list();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3276);
				match(NO);
				setState(3277);
				match(INMEMORY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_clauseContext extends ParserRuleContext {
		public TerminalNode INMEMORY() { return getToken(PlSqlParser.INMEMORY, 0); }
		public Inmemory_parametersContext inmemory_parameters() {
			return getRuleContext(Inmemory_parametersContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Inmemory_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_clause; }
	}

	public final Inmemory_clauseContext inmemory_clause() throws RecognitionException {
		Inmemory_clauseContext _localctx = new Inmemory_clauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_inmemory_clause);
		try {
			setState(3284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INMEMORY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3280);
				match(INMEMORY);
				setState(3281);
				inmemory_parameters();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3282);
				match(NO);
				setState(3283);
				match(INMEMORY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_parametersContext extends ParserRuleContext {
		public Inmemory_memcompressContext inmemory_memcompress() {
			return getRuleContext(Inmemory_memcompressContext.class,0);
		}
		public Inmemory_priorityContext inmemory_priority() {
			return getRuleContext(Inmemory_priorityContext.class,0);
		}
		public Inmemory_distributeContext inmemory_distribute() {
			return getRuleContext(Inmemory_distributeContext.class,0);
		}
		public Inmemory_duplicateContext inmemory_duplicate() {
			return getRuleContext(Inmemory_duplicateContext.class,0);
		}
		public Inmemory_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_parameters; }
	}

	public final Inmemory_parametersContext inmemory_parameters() throws RecognitionException {
		Inmemory_parametersContext _localctx = new Inmemory_parametersContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_inmemory_parameters);
		int _la;
		try {
			setState(3298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3286);
					inmemory_memcompress();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIORITY) {
					{
					setState(3289);
					inmemory_priority();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3293);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTRIBUTE) {
					{
					setState(3292);
					inmemory_distribute();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(3295);
					inmemory_duplicate();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_memcompressContext extends ParserRuleContext {
		public TerminalNode MEMCOMPRESS() { return getToken(PlSqlParser.MEMCOMPRESS, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode DML() { return getToken(PlSqlParser.DML, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode CAPACITY() { return getToken(PlSqlParser.CAPACITY, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(PlSqlParser.HIGH, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Inmemory_memcompressContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_memcompress; }
	}

	public final Inmemory_memcompressContext inmemory_memcompress() throws RecognitionException {
		Inmemory_memcompressContext _localctx = new Inmemory_memcompressContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_inmemory_memcompress);
		int _la;
		try {
			setState(3311);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMCOMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3300);
				match(MEMCOMPRESS);
				setState(3301);
				match(FOR);
				setState(3307);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DML:
					{
					setState(3302);
					match(DML);
					}
					break;
				case CAPACITY:
				case QUERY:
					{
					setState(3303);
					_la = _input.LA(1);
					if ( !(_la==CAPACITY || _la==QUERY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3305);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==HIGH || _la==LOW) {
						{
						setState(3304);
						_la = _input.LA(1);
						if ( !(_la==HIGH || _la==LOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3309);
				match(NO);
				setState(3310);
				match(MEMCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_priorityContext extends ParserRuleContext {
		public TerminalNode PRIORITY() { return getToken(PlSqlParser.PRIORITY, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode MEDIUM() { return getToken(PlSqlParser.MEDIUM, 0); }
		public TerminalNode HIGH() { return getToken(PlSqlParser.HIGH, 0); }
		public TerminalNode CRITICAL() { return getToken(PlSqlParser.CRITICAL, 0); }
		public Inmemory_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_priority; }
	}

	public final Inmemory_priorityContext inmemory_priority() throws RecognitionException {
		Inmemory_priorityContext _localctx = new Inmemory_priorityContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_inmemory_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3313);
			match(PRIORITY);
			setState(3314);
			_la = _input.LA(1);
			if ( !(_la==CRITICAL || _la==HIGH || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (LOW - 322)) | (1L << (MEDIUM - 322)) | (1L << (NONE - 322)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_distributeContext extends ParserRuleContext {
		public TerminalNode DISTRIBUTE() { return getToken(PlSqlParser.DISTRIBUTE, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public Inmemory_distributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_distribute; }
	}

	public final Inmemory_distributeContext inmemory_distribute() throws RecognitionException {
		Inmemory_distributeContext _localctx = new Inmemory_distributeContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_inmemory_distribute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(DISTRIBUTE);
			setState(3325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(3317);
				match(AUTO);
				}
				break;
			case 2:
				{
				{
				setState(3318);
				match(BY);
				setState(3323);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ROWID:
					{
					setState(3319);
					match(ROWID);
					setState(3320);
					match(RANGE);
					}
					break;
				case PARTITION:
					{
					setState(3321);
					match(PARTITION);
					}
					break;
				case SUBPARTITION:
					{
					setState(3322);
					match(SUBPARTITION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inmemory_duplicateContext extends ParserRuleContext {
		public TerminalNode DUPLICATE() { return getToken(PlSqlParser.DUPLICATE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Inmemory_duplicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inmemory_duplicate; }
	}

	public final Inmemory_duplicateContext inmemory_duplicate() throws RecognitionException {
		Inmemory_duplicateContext _localctx = new Inmemory_duplicateContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_inmemory_duplicate);
		int _la;
		try {
			setState(3333);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DUPLICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3327);
				match(DUPLICATE);
				setState(3329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3328);
					match(ALL);
					}
				}

				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3331);
				match(NO);
				setState(3332);
				match(DUPLICATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(PlSqlParser.COMPRESS, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode BASIC() { return getToken(PlSqlParser.BASIC, 0); }
		public TerminalNode ADVANCED() { return getToken(PlSqlParser.ADVANCED, 0); }
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LOCKING() { return getToken(PlSqlParser.LOCKING, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode HIGH() { return getToken(PlSqlParser.HIGH, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_compression; }
	}

	public final Table_compressionContext table_compression() throws RecognitionException {
		Table_compressionContext _localctx = new Table_compressionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_table_compression);
		int _la;
		try {
			setState(3362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3335);
				match(COMPRESS);
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(3336);
				match(ROW);
				setState(3337);
				match(STORE);
				setState(3338);
				match(COMPRESS);
				setState(3340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ADVANCED || _la==BASIC) {
					{
					setState(3339);
					_la = _input.LA(1);
					if ( !(_la==ADVANCED || _la==BASIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3342);
				match(COLUMN);
				setState(3343);
				match(STORE);
				setState(3344);
				match(COMPRESS);
				setState(3350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3345);
					match(FOR);
					setState(3346);
					_la = _input.LA(1);
					if ( !(_la==ARCHIVE || _la==QUERY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3348);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==HIGH || _la==LOW) {
						{
						setState(3347);
						_la = _input.LA(1);
						if ( !(_la==HIGH || _la==LOW) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
				}

				setState(3358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3353);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(3352);
						match(NO);
						}
					}

					setState(3355);
					match(ROW);
					setState(3356);
					match(LEVEL);
					setState(3357);
					match(LOCKING);
					}
					break;
				}
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(3360);
				match(NO);
				setState(3361);
				match(COMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_compressionContext extends ParserRuleContext {
		public Prefix_compressionContext prefix_compression() {
			return getRuleContext(Prefix_compressionContext.class,0);
		}
		public Advanced_index_compressionContext advanced_index_compression() {
			return getRuleContext(Advanced_index_compressionContext.class,0);
		}
		public Index_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_compression; }
	}

	public final Index_compressionContext index_compression() throws RecognitionException {
		Index_compressionContext _localctx = new Index_compressionContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_index_compression);
		try {
			setState(3366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3364);
				prefix_compression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3365);
				advanced_index_compression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prefix_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(PlSqlParser.COMPRESS, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public TerminalNode NOCOMPRESS() { return getToken(PlSqlParser.NOCOMPRESS, 0); }
		public Prefix_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prefix_compression; }
	}

	public final Prefix_compressionContext prefix_compression() throws RecognitionException {
		Prefix_compressionContext _localctx = new Prefix_compressionContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_prefix_compression);
		int _la;
		try {
			setState(3373);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3368);
				match(COMPRESS);
				setState(3370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 736)) & ~0x3f) == 0 && ((1L << (_la - 736)) & ((1L << (UNSIGNED_INTEGER - 736)) | (1L << (APPROXIMATE_NUM_LIT - 736)) | (1L << (PLUS_SIGN - 736)) | (1L << (MINUS_SIGN - 736)))) != 0)) {
					{
					setState(3369);
					integer();
					}
				}

				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3372);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Advanced_index_compressionContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(PlSqlParser.COMPRESS, 0); }
		public TerminalNode ADVANCED() { return getToken(PlSqlParser.ADVANCED, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(PlSqlParser.NOCOMPRESS, 0); }
		public Advanced_index_compressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_advanced_index_compression; }
	}

	public final Advanced_index_compressionContext advanced_index_compression() throws RecognitionException {
		Advanced_index_compressionContext _localctx = new Advanced_index_compressionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_advanced_index_compression);
		try {
			setState(3379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3375);
				match(COMPRESS);
				setState(3376);
				match(ADVANCED);
				setState(3377);
				match(LOW);
				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3378);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_partitioning_storageContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(PlSqlParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Lob_item_nameContext lob_item_name() {
			return getRuleContext(Lob_item_nameContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public Tablespace_clauseContext tablespace_clause() {
			return getRuleContext(Tablespace_clauseContext.class,0);
		}
		public TerminalNode BASICFILE() { return getToken(PlSqlParser.BASICFILE, 0); }
		public TerminalNode SECUREFILE() { return getToken(PlSqlParser.SECUREFILE, 0); }
		public Lob_partitioning_storageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_partitioning_storage; }
	}

	public final Lob_partitioning_storageContext lob_partitioning_storage() throws RecognitionException {
		Lob_partitioning_storageContext _localctx = new Lob_partitioning_storageContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_lob_partitioning_storage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3381);
			match(LOB);
			setState(3382);
			match(LEFT_PAREN);
			setState(3383);
			lob_item_name();
			setState(3384);
			match(RIGHT_PAREN);
			setState(3385);
			match(STORE);
			setState(3386);
			match(AS);
			setState(3388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				setState(3387);
				_la = _input.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(3390);
				lob_segname();
				setState(3395);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					setState(3391);
					match(LEFT_PAREN);
					setState(3392);
					tablespace_clause();
					setState(3393);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3397);
				match(LEFT_PAREN);
				setState(3398);
				tablespace_clause();
				setState(3399);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_subpartition_clauseContext extends ParserRuleContext {
		public Store_inContext store_in() {
			return getRuleContext(Store_inContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Partition_clause_optionalContext> partition_clause_optional() {
			return getRuleContexts(Partition_clause_optionalContext.class);
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return getRuleContext(Partition_clause_optionalContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Tablespace_clauseContext> tablespace_clause() {
			return getRuleContexts(Tablespace_clauseContext.class);
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return getRuleContext(Tablespace_clauseContext.class,i);
		}
		public List<Advanced_index_compressionContext> advanced_index_compression() {
			return getRuleContexts(Advanced_index_compressionContext.class);
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return getRuleContext(Advanced_index_compressionContext.class,i);
		}
		public List<Usable_clauseContext> usable_clause() {
			return getRuleContexts(Usable_clauseContext.class);
		}
		public Usable_clauseContext usable_clause(int i) {
			return getRuleContext(Usable_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Index_subpartition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_subpartition_clause; }
	}

	public final Index_subpartition_clauseContext index_subpartition_clause() throws RecognitionException {
		Index_subpartition_clauseContext _localctx = new Index_subpartition_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_index_subpartition_clause);
		int _la;
		try {
			setState(3433);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3403);
				store_in();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3404);
				match(LEFT_PAREN);
				setState(3405);
				partition_clause_optional();
				setState(3407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLESPACE) {
					{
					setState(3406);
					tablespace_clause();
					}
				}

				setState(3410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMPRESS || _la==NOCOMPRESS) {
					{
					setState(3409);
					advanced_index_compression();
					}
				}

				setState(3413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					setState(3412);
					usable_clause();
					}
				}

				setState(3428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3415);
					match(COMMA);
					setState(3416);
					partition_clause_optional();
					setState(3418);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLESPACE) {
						{
						setState(3417);
						tablespace_clause();
						}
					}

					setState(3421);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						setState(3420);
						advanced_index_compression();
						}
					}

					setState(3424);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==UNUSABLE || _la==USABLE) {
						{
						setState(3423);
						usable_clause();
						}
					}

					}
					}
					setState(3430);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3431);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Usable_clauseContext extends ParserRuleContext {
		public TerminalNode USABLE() { return getToken(PlSqlParser.USABLE, 0); }
		public TerminalNode UNUSABLE() { return getToken(PlSqlParser.UNUSABLE, 0); }
		public Usable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usable_clause; }
	}

	public final Usable_clauseContext usable_clause() throws RecognitionException {
		Usable_clauseContext _localctx = new Usable_clauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_usable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3435);
			_la = _input.LA(1);
			if ( !(_la==UNUSABLE || _la==USABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partition_quantityContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Hash_partition_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partition_quantity; }
	}

	public final Hash_partition_quantityContext hash_partition_quantity() throws RecognitionException {
		Hash_partition_quantityContext _localctx = new Hash_partition_quantityContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_hash_partition_quantity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3437);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_itemContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public Varray_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_item; }
	}

	public final Varray_itemContext varray_item() throws RecognitionException {
		Varray_itemContext _localctx = new Varray_itemContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_varray_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3439);
			match(REGULAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partial_index_clauseContext extends ParserRuleContext {
		public TerminalNode INDEXING() { return getToken(PlSqlParser.INDEXING, 0); }
		public TerminalNode PARTIAL() { return getToken(PlSqlParser.PARTIAL, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public Partial_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partial_index_clause; }
	}

	public final Partial_index_clauseContext partial_index_clause() throws RecognitionException {
		Partial_index_clauseContext _localctx = new Partial_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_partial_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3441);
			match(INDEXING);
			setState(3442);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_clauseContext extends ParserRuleContext {
		public TerminalNode NOPARALLEL() { return getToken(PlSqlParser.NOPARALLEL, 0); }
		public TerminalNode PARALLEL() { return getToken(PlSqlParser.PARALLEL, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public Parallel_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_clause; }
	}

	public final Parallel_clauseContext parallel_clause() throws RecognitionException {
		Parallel_clauseContext _localctx = new Parallel_clauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_parallel_clause);
		try {
			setState(3447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOPARALLEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3444);
				match(NOPARALLEL);
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3445);
				match(PARALLEL);
				setState(3446);
				integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Domain_index_clauseContext extends ParserRuleContext {
		public IndextypeContext indextype() {
			return getRuleContext(IndextypeContext.class,0);
		}
		public Local_domain_index_clauseContext local_domain_index_clause() {
			return getRuleContext(Local_domain_index_clauseContext.class,0);
		}
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Odci_parametersContext odci_parameters() {
			return getRuleContext(Odci_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Domain_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domain_index_clause; }
	}

	public final Domain_index_clauseContext domain_index_clause() throws RecognitionException {
		Domain_index_clauseContext _localctx = new Domain_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_domain_index_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3449);
			indextype();
			setState(3451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				setState(3450);
				local_domain_index_clause();
				}
				break;
			}
			setState(3454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(3453);
				parallel_clause();
				}
			}

			setState(3461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3456);
				match(PARAMETERS);
				setState(3457);
				match(LEFT_PAREN);
				setState(3458);
				odci_parameters();
				setState(3459);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_domain_index_clauseContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public List<Local_domain_index_parameters_clauseContext> local_domain_index_parameters_clause() {
			return getRuleContexts(Local_domain_index_parameters_clauseContext.class);
		}
		public Local_domain_index_parameters_clauseContext local_domain_index_parameters_clause(int i) {
			return getRuleContext(Local_domain_index_parameters_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Local_domain_index_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_domain_index_clause; }
	}

	public final Local_domain_index_clauseContext local_domain_index_clause() throws RecognitionException {
		Local_domain_index_clauseContext _localctx = new Local_domain_index_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_local_domain_index_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3463);
			match(LOCAL);
			setState(3465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3464);
				local_domain_index_parameters_clause();
				}
			}

			setState(3471);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,390,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3467);
					match(COMMA);
					setState(3468);
					local_domain_index_parameters_clause();
					}
					} 
				}
				setState(3473);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,390,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_domain_index_parameters_clauseContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public Odci_parametersContext odci_parameters() {
			return getRuleContext(Odci_parametersContext.class,0);
		}
		public Local_domain_index_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_domain_index_parameters_clause; }
	}

	public final Local_domain_index_parameters_clauseContext local_domain_index_parameters_clause() throws RecognitionException {
		Local_domain_index_parameters_clauseContext _localctx = new Local_domain_index_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_local_domain_index_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474);
			match(LEFT_PAREN);
			setState(3475);
			match(PARTITION);
			setState(3476);
			partition_name();
			setState(3482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(3477);
				match(PARAMETERS);
				setState(3478);
				match(LEFT_PAREN);
				setState(3479);
				odci_parameters();
				setState(3480);
				match(RIGHT_PAREN);
				}
			}

			setState(3484);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Odci_parametersContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Odci_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_odci_parameters; }
	}

	public final Odci_parametersContext odci_parameters() throws RecognitionException {
		Odci_parametersContext _localctx = new Odci_parametersContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_odci_parameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3486);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exceptions_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Table_fullnameContext table_fullname() {
			return getRuleContext(Table_fullnameContext.class,0);
		}
		public Exceptions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptions_clause; }
	}

	public final Exceptions_clauseContext exceptions_clause() throws RecognitionException {
		Exceptions_clauseContext _localctx = new Exceptions_clauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_exceptions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3488);
			match(EXCEPTIONS);
			setState(3489);
			match(INTO);
			setState(3490);
			table_fullname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tablespaceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
			return getRuleContext(Permanent_tablespace_clauseContext.class,0);
		}
		public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
			return getRuleContext(Temporary_tablespace_clauseContext.class,0);
		}
		public Undo_tablespace_clauseContext undo_tablespace_clause() {
			return getRuleContext(Undo_tablespace_clauseContext.class,0);
		}
		public TerminalNode BIGFILE() { return getToken(PlSqlParser.BIGFILE, 0); }
		public TerminalNode SMALLFILE() { return getToken(PlSqlParser.SMALLFILE, 0); }
		public Create_tablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tablespace; }
	}

	public final Create_tablespaceContext create_tablespace() throws RecognitionException {
		Create_tablespaceContext _localctx = new Create_tablespaceContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_create_tablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3492);
			match(CREATE);
			setState(3494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BIGFILE || _la==SMALLFILE) {
				{
				setState(3493);
				_la = _input.LA(1);
				if ( !(_la==BIGFILE || _la==SMALLFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE:
				{
				setState(3496);
				permanent_tablespace_clause();
				}
				break;
			case TEMPORARY:
				{
				setState(3497);
				temporary_tablespace_clause();
				}
				break;
			case UNDO:
				{
				setState(3498);
				undo_tablespace_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3501);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Permanent_tablespace_clauseContext extends ParserRuleContext {
		public Tablespace_clauseContext tablespace_clause() {
			return getRuleContext(Tablespace_clauseContext.class,0);
		}
		public Datafile_specificationContext datafile_specification() {
			return getRuleContext(Datafile_specificationContext.class,0);
		}
		public List<TerminalNode> MINIMUM() { return getTokens(PlSqlParser.MINIMUM); }
		public TerminalNode MINIMUM(int i) {
			return getToken(PlSqlParser.MINIMUM, i);
		}
		public List<TerminalNode> EXTENT() { return getTokens(PlSqlParser.EXTENT); }
		public TerminalNode EXTENT(int i) {
			return getToken(PlSqlParser.EXTENT, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(PlSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(PlSqlParser.BLOCKSIZE, i);
		}
		public List<Logging_clauseContext> logging_clause() {
			return getRuleContexts(Logging_clauseContext.class);
		}
		public Logging_clauseContext logging_clause(int i) {
			return getRuleContext(Logging_clauseContext.class,i);
		}
		public List<TerminalNode> FORCE() { return getTokens(PlSqlParser.FORCE); }
		public TerminalNode FORCE(int i) {
			return getToken(PlSqlParser.FORCE, i);
		}
		public List<TerminalNode> LOGGING() { return getTokens(PlSqlParser.LOGGING); }
		public TerminalNode LOGGING(int i) {
			return getToken(PlSqlParser.LOGGING, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(PlSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(PlSqlParser.ENCRYPTION, i);
		}
		public List<Tablespace_encryption_specContext> tablespace_encryption_spec() {
			return getRuleContexts(Tablespace_encryption_specContext.class);
		}
		public Tablespace_encryption_specContext tablespace_encryption_spec(int i) {
			return getRuleContext(Tablespace_encryption_specContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PlSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PlSqlParser.DEFAULT, i);
		}
		public List<Extent_management_clauseContext> extent_management_clause() {
			return getRuleContexts(Extent_management_clauseContext.class);
		}
		public Extent_management_clauseContext extent_management_clause(int i) {
			return getRuleContext(Extent_management_clauseContext.class,i);
		}
		public List<Segment_management_clauseContext> segment_management_clause() {
			return getRuleContexts(Segment_management_clauseContext.class);
		}
		public Segment_management_clauseContext segment_management_clause(int i) {
			return getRuleContext(Segment_management_clauseContext.class,i);
		}
		public List<Flashback_mode_clauseContext> flashback_mode_clause() {
			return getRuleContexts(Flashback_mode_clauseContext.class);
		}
		public Flashback_mode_clauseContext flashback_mode_clause(int i) {
			return getRuleContext(Flashback_mode_clauseContext.class,i);
		}
		public List<TerminalNode> ONLINE() { return getTokens(PlSqlParser.ONLINE); }
		public TerminalNode ONLINE(int i) {
			return getToken(PlSqlParser.ONLINE, i);
		}
		public List<TerminalNode> OFFLINE() { return getTokens(PlSqlParser.OFFLINE); }
		public TerminalNode OFFLINE(int i) {
			return getToken(PlSqlParser.OFFLINE, i);
		}
		public Permanent_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permanent_tablespace_clause; }
	}

	public final Permanent_tablespace_clauseContext permanent_tablespace_clause() throws RecognitionException {
		Permanent_tablespace_clauseContext _localctx = new Permanent_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_permanent_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3503);
			tablespace_clause();
			setState(3505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATAFILE) {
				{
				setState(3504);
				datafile_specification();
				}
			}

			setState(3524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BLOCKSIZE || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (DEFAULT - 140)) | (1L << (ENCRYPTION - 140)) | (1L << (EXTENT - 140)))) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (FILESYSTEM_LIKE_LOGGING - 205)) | (1L << (FLASHBACK - 205)) | (1L << (FORCE - 205)))) != 0) || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (MINIMUM - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==OFFLINE || _la==ONLINE || _la==SEGMENT) {
				{
				setState(3522);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINIMUM:
					{
					setState(3507);
					match(MINIMUM);
					setState(3508);
					match(EXTENT);
					setState(3509);
					size_clause();
					}
					break;
				case BLOCKSIZE:
					{
					setState(3510);
					match(BLOCKSIZE);
					setState(3511);
					size_clause();
					}
					break;
				case FILESYSTEM_LIKE_LOGGING:
				case LOGGING:
				case NOLOGGING:
					{
					setState(3512);
					logging_clause();
					}
					break;
				case FORCE:
					{
					setState(3513);
					match(FORCE);
					setState(3514);
					match(LOGGING);
					}
					break;
				case OFFLINE:
				case ONLINE:
					{
					setState(3515);
					_la = _input.LA(1);
					if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case ENCRYPTION:
					{
					setState(3516);
					match(ENCRYPTION);
					setState(3517);
					tablespace_encryption_spec();
					}
					break;
				case DEFAULT:
					{
					setState(3518);
					match(DEFAULT);
					}
					break;
				case EXTENT:
					{
					setState(3519);
					extent_management_clause();
					}
					break;
				case SEGMENT:
					{
					setState(3520);
					segment_management_clause();
					}
					break;
				case FLASHBACK:
					{
					setState(3521);
					flashback_mode_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3526);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_encryption_specContext extends ParserRuleContext {
		public Token encrypt_algorithm;
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_encryption_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_encryption_spec; }
	}

	public final Tablespace_encryption_specContext tablespace_encryption_spec() throws RecognitionException {
		Tablespace_encryption_specContext _localctx = new Tablespace_encryption_specContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_tablespace_encryption_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3527);
			match(USING);
			setState(3528);
			((Tablespace_encryption_specContext)_localctx).encrypt_algorithm = match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOGGING() { return getToken(PlSqlParser.LOGGING, 0); }
		public TerminalNode NOLOGGING() { return getToken(PlSqlParser.NOLOGGING, 0); }
		public TerminalNode FILESYSTEM_LIKE_LOGGING() { return getToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logging_clause; }
	}

	public final Logging_clauseContext logging_clause() throws RecognitionException {
		Logging_clauseContext _localctx = new Logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3530);
			_la = _input.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extent_management_clauseContext extends ParserRuleContext {
		public TerminalNode EXTENT() { return getToken(PlSqlParser.EXTENT, 0); }
		public TerminalNode MANAGEMENT() { return getToken(PlSqlParser.MANAGEMENT, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode AUTOALLOCATE() { return getToken(PlSqlParser.AUTOALLOCATE, 0); }
		public TerminalNode UNIFORM() { return getToken(PlSqlParser.UNIFORM, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Extent_management_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extent_management_clause; }
	}

	public final Extent_management_clauseContext extent_management_clause() throws RecognitionException {
		Extent_management_clauseContext _localctx = new Extent_management_clauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_extent_management_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			match(EXTENT);
			setState(3533);
			match(MANAGEMENT);
			setState(3534);
			match(LOCAL);
			setState(3541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTOALLOCATE:
				{
				setState(3535);
				match(AUTOALLOCATE);
				}
				break;
			case UNIFORM:
				{
				setState(3536);
				match(UNIFORM);
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(3537);
					match(SIZE);
					setState(3538);
					size_clause();
					}
				}

				}
				break;
			case BLOCKSIZE:
			case DEFAULT:
			case ENCRYPTION:
			case EXTENT:
			case FILESYSTEM_LIKE_LOGGING:
			case FLASHBACK:
			case FORCE:
			case LOGGING:
			case MINIMUM:
			case NOLOGGING:
			case OFFLINE:
			case ONLINE:
			case RETENTION:
			case SEGMENT:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Segment_management_clauseContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SPACE_KEYWORD() { return getToken(PlSqlParser.SPACE_KEYWORD, 0); }
		public TerminalNode MANAGEMENT() { return getToken(PlSqlParser.MANAGEMENT, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode MANUAL() { return getToken(PlSqlParser.MANUAL, 0); }
		public Segment_management_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_segment_management_clause; }
	}

	public final Segment_management_clauseContext segment_management_clause() throws RecognitionException {
		Segment_management_clauseContext _localctx = new Segment_management_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_segment_management_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543);
			match(SEGMENT);
			setState(3544);
			match(SPACE_KEYWORD);
			setState(3545);
			match(MANAGEMENT);
			setState(3546);
			_la = _input.LA(1);
			if ( !(_la==AUTO || _la==MANUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_mode_clauseContext extends ParserRuleContext {
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public Flashback_mode_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_mode_clause; }
	}

	public final Flashback_mode_clauseContext flashback_mode_clause() throws RecognitionException {
		Flashback_mode_clauseContext _localctx = new Flashback_mode_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_flashback_mode_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3548);
			match(FLASHBACK);
			setState(3549);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Temporary_tablespace_clauseContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public Tablespace_clauseContext tablespace_clause() {
			return getRuleContext(Tablespace_clauseContext.class,0);
		}
		public Tempfile_specificationContext tempfile_specification() {
			return getRuleContext(Tempfile_specificationContext.class,0);
		}
		public Tablespace_group_clauseContext tablespace_group_clause() {
			return getRuleContext(Tablespace_group_clauseContext.class,0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return getRuleContext(Extent_management_clauseContext.class,0);
		}
		public Temporary_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporary_tablespace_clause; }
	}

	public final Temporary_tablespace_clauseContext temporary_tablespace_clause() throws RecognitionException {
		Temporary_tablespace_clauseContext _localctx = new Temporary_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_temporary_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			match(TEMPORARY);
			setState(3552);
			tablespace_clause();
			setState(3554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPFILE) {
				{
				setState(3553);
				tempfile_specification();
				}
			}

			setState(3557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(3556);
				tablespace_group_clause();
				}
			}

			setState(3560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT) {
				{
				setState(3559);
				extent_management_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_group_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_group_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_group_clause; }
	}

	public final Tablespace_group_clauseContext tablespace_group_clause() throws RecognitionException {
		Tablespace_group_clauseContext _localctx = new Tablespace_group_clauseContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_tablespace_group_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3562);
			match(TABLESPACE);
			setState(3563);
			match(GROUP);
			setState(3564);
			_la = _input.LA(1);
			if ( !(_la==CHAR_STRING || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Undo_tablespace_clauseContext extends ParserRuleContext {
		public TerminalNode UNDO() { return getToken(PlSqlParser.UNDO, 0); }
		public Tablespace_clauseContext tablespace_clause() {
			return getRuleContext(Tablespace_clauseContext.class,0);
		}
		public Datafile_specificationContext datafile_specification() {
			return getRuleContext(Datafile_specificationContext.class,0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return getRuleContext(Extent_management_clauseContext.class,0);
		}
		public Tablespace_retention_clauseContext tablespace_retention_clause() {
			return getRuleContext(Tablespace_retention_clauseContext.class,0);
		}
		public Undo_tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undo_tablespace_clause; }
	}

	public final Undo_tablespace_clauseContext undo_tablespace_clause() throws RecognitionException {
		Undo_tablespace_clauseContext _localctx = new Undo_tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_undo_tablespace_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3566);
			match(UNDO);
			setState(3567);
			tablespace_clause();
			setState(3569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATAFILE) {
				{
				setState(3568);
				datafile_specification();
				}
			}

			setState(3572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENT) {
				{
				setState(3571);
				extent_management_clause();
				}
			}

			setState(3575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETENTION) {
				{
				setState(3574);
				tablespace_retention_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_retention_clauseContext extends ParserRuleContext {
		public TerminalNode RETENTION() { return getToken(PlSqlParser.RETENTION, 0); }
		public TerminalNode GUARANTEE() { return getToken(PlSqlParser.GUARANTEE, 0); }
		public TerminalNode NOGUARANTEE() { return getToken(PlSqlParser.NOGUARANTEE, 0); }
		public Tablespace_retention_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_retention_clause; }
	}

	public final Tablespace_retention_clauseContext tablespace_retention_clause() throws RecognitionException {
		Tablespace_retention_clauseContext _localctx = new Tablespace_retention_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_tablespace_retention_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3577);
			match(RETENTION);
			setState(3578);
			_la = _input.LA(1);
			if ( !(_la==GUARANTEE || _la==NOGUARANTEE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datafile_specificationContext extends ParserRuleContext {
		public TerminalNode DATAFILE() { return getToken(PlSqlParser.DATAFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return getRuleContext(Datafile_tempfile_specContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Datafile_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datafile_specification; }
	}

	public final Datafile_specificationContext datafile_specification() throws RecognitionException {
		Datafile_specificationContext _localctx = new Datafile_specificationContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_datafile_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3580);
			match(DATAFILE);
			{
			setState(3582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3581);
				match(COMMA);
				}
			}

			setState(3584);
			datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tempfile_specificationContext extends ParserRuleContext {
		public TerminalNode TEMPFILE() { return getToken(PlSqlParser.TEMPFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return getRuleContext(Datafile_tempfile_specContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Tempfile_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tempfile_specification; }
	}

	public final Tempfile_specificationContext tempfile_specification() throws RecognitionException {
		Tempfile_specificationContext _localctx = new Tempfile_specificationContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_tempfile_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3586);
			match(TEMPFILE);
			{
			setState(3588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3587);
				match(COMMA);
				}
			}

			setState(3590);
			datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datafile_tempfile_specContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public Autoextend_clauseContext autoextend_clause() {
			return getRuleContext(Autoextend_clauseContext.class,0);
		}
		public Datafile_tempfile_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datafile_tempfile_spec; }
	}

	public final Datafile_tempfile_specContext datafile_tempfile_spec() throws RecognitionException {
		Datafile_tempfile_specContext _localctx = new Datafile_tempfile_specContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_datafile_tempfile_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR_STRING) {
				{
				setState(3592);
				match(CHAR_STRING);
				}
			}

			setState(3597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(3595);
				match(SIZE);
				setState(3596);
				size_clause();
				}
			}

			setState(3600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(3599);
				match(REUSE);
				}
			}

			setState(3603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOEXTEND) {
				{
				setState(3602);
				autoextend_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Redo_log_file_specContext extends ParserRuleContext {
		public TerminalNode DATAFILE() { return getToken(PlSqlParser.DATAFILE, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public TerminalNode BLOCKSIZE() { return getToken(PlSqlParser.BLOCKSIZE, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Redo_log_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_redo_log_file_spec; }
	}

	public final Redo_log_file_specContext redo_log_file_spec() throws RecognitionException {
		Redo_log_file_specContext _localctx = new Redo_log_file_specContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_redo_log_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3605);
			match(DATAFILE);
			setState(3617);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_STRING:
				{
				setState(3606);
				match(CHAR_STRING);
				}
				break;
			case LEFT_PAREN:
				{
				setState(3607);
				match(LEFT_PAREN);
				setState(3612); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3609);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3608);
						match(COMMA);
						}
					}

					setState(3611);
					match(CHAR_STRING);
					}
					}
					setState(3614); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CHAR_STRING || _la==COMMA );
				setState(3616);
				match(RIGHT_PAREN);
				}
				break;
			case EOF:
			case BLOCKSIZE:
			case REUSE:
			case SIZE:
				break;
			default:
				break;
			}
			setState(3621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(3619);
				match(SIZE);
				setState(3620);
				size_clause();
				}
			}

			setState(3625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCKSIZE) {
				{
				setState(3623);
				match(BLOCKSIZE);
				setState(3624);
				size_clause();
				}
			}

			setState(3628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(3627);
				match(REUSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Autoextend_clauseContext extends ParserRuleContext {
		public TerminalNode AUTOEXTEND() { return getToken(PlSqlParser.AUTOEXTEND, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode NEXT() { return getToken(PlSqlParser.NEXT, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Maxsize_clauseContext maxsize_clause() {
			return getRuleContext(Maxsize_clauseContext.class,0);
		}
		public Autoextend_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_autoextend_clause; }
	}

	public final Autoextend_clauseContext autoextend_clause() throws RecognitionException {
		Autoextend_clauseContext _localctx = new Autoextend_clauseContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_autoextend_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			match(AUTOEXTEND);
			setState(3640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(3631);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(3632);
				match(ON);
				setState(3635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEXT) {
					{
					setState(3633);
					match(NEXT);
					setState(3634);
					size_clause();
					}
				}

				setState(3638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAXSIZE) {
					{
					setState(3637);
					maxsize_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Maxsize_clauseContext extends ParserRuleContext {
		public TerminalNode MAXSIZE() { return getToken(PlSqlParser.MAXSIZE, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public Size_clauseContext size_clause() {
			return getRuleContext(Size_clauseContext.class,0);
		}
		public Maxsize_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxsize_clause; }
	}

	public final Maxsize_clauseContext maxsize_clause() throws RecognitionException {
		Maxsize_clauseContext _localctx = new Maxsize_clauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_maxsize_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3642);
			match(MAXSIZE);
			setState(3645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNLIMITED:
				{
				setState(3643);
				match(UNLIMITED);
				}
				break;
			case UNSIGNED_INTEGER:
				{
				setState(3644);
				size_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3647);
			subquery_basic_elements();
			setState(3651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(3648);
				subquery_operation_part();
				}
				}
				setState(3653);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Relational_tableContext relational_table() {
			return getRuleContext(Relational_tableContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3654);
			match(CREATE);
			setState(3657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL) {
				{
				setState(3655);
				match(GLOBAL);
				setState(3656);
				match(TEMPORARY);
				}
			}

			setState(3659);
			match(TABLE);
			setState(3660);
			tableview_name();
			{
			setState(3661);
			relational_table();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_tableContext extends ParserRuleContext {
		public Table_propertiesContext table_properties() {
			return getRuleContext(Table_propertiesContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public Physical_propertiesContext physical_properties() {
			return getRuleContext(Physical_propertiesContext.class,0);
		}
		public List<Relational_propertiesContext> relational_properties() {
			return getRuleContexts(Relational_propertiesContext.class);
		}
		public Relational_propertiesContext relational_properties(int i) {
			return getRuleContext(Relational_propertiesContext.class,i);
		}
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode PRESERVE() { return getToken(PlSqlParser.PRESERVE, 0); }
		public Relational_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_table; }
	}

	public final Relational_tableContext relational_table() throws RecognitionException {
		Relational_tableContext _localctx = new Relational_tableContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_relational_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				setState(3663);
				match(LEFT_PAREN);
				setState(3665); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3664);
					relational_properties();
					}
					}
					setState(3667); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FOREIGN - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIMARY - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SCOPE - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUPPLEMENTAL - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNIQUE - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (PERIOD - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
				setState(3669);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3673);
				match(ON);
				setState(3674);
				match(COMMIT);
				setState(3676);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DELETE || _la==PRESERVE) {
					{
					setState(3675);
					_la = _input.LA(1);
					if ( !(_la==DELETE || _la==PRESERVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3678);
				match(ROWS);
				}
			}

			setState(3682);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				setState(3681);
				physical_properties();
				}
				break;
			}
			setState(3684);
			table_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_propertiesContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Virtual_column_definitionContext virtual_column_definition() {
			return getRuleContext(Virtual_column_definitionContext.class,0);
		}
		public Period_definitionContext period_definition() {
			return getRuleContext(Period_definitionContext.class,0);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return getRuleContext(Out_of_line_ref_constraintContext.class,0);
		}
		public Supplemental_logging_propsContext supplemental_logging_props() {
			return getRuleContext(Supplemental_logging_propsContext.class,0);
		}
		public Relational_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_properties; }
	}

	public final Relational_propertiesContext relational_properties() throws RecognitionException {
		Relational_propertiesContext _localctx = new Relational_propertiesContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_relational_properties);
		try {
			setState(3694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3686);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3687);
				virtual_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3688);
				period_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(3689);
					out_of_line_constraint();
					}
					break;
				case 2:
					{
					setState(3690);
					out_of_line_ref_constraint();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3693);
				supplemental_logging_props();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_propertiesContext extends ParserRuleContext {
		public Column_propertiesContext column_properties() {
			return getRuleContext(Column_propertiesContext.class,0);
		}
		public Indexing_clauseContext indexing_clause() {
			return getRuleContext(Indexing_clauseContext.class,0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return getRuleContext(Table_partitioning_clausesContext.class,0);
		}
		public Attribute_clustering_clauseContext attribute_clustering_clause() {
			return getRuleContext(Attribute_clustering_clauseContext.class,0);
		}
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Parallel_clauseContext parallel_clause() {
			return getRuleContext(Parallel_clauseContext.class,0);
		}
		public List<Enable_disable_clauseContext> enable_disable_clause() {
			return getRuleContexts(Enable_disable_clauseContext.class);
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return getRuleContext(Enable_disable_clauseContext.class,i);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return getRuleContext(Row_movement_clauseContext.class,0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return getRuleContext(Flashback_archive_clauseContext.class,0);
		}
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ARCHIVAL() { return getToken(PlSqlParser.ARCHIVAL, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode ROWDEPENDENCIES() { return getToken(PlSqlParser.ROWDEPENDENCIES, 0); }
		public TerminalNode NOROWDEPENDENCIES() { return getToken(PlSqlParser.NOROWDEPENDENCIES, 0); }
		public Table_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_properties; }
	}

	public final Table_propertiesContext table_properties() throws RecognitionException {
		Table_propertiesContext _localctx = new Table_propertiesContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_table_properties);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3696);
				column_properties();
				}
				break;
			}
			setState(3700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXING) {
				{
				setState(3699);
				indexing_clause();
				}
			}

			setState(3703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3702);
				table_partitioning_clauses();
				}
				break;
			}
			setState(3706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERING) {
				{
				setState(3705);
				attribute_clustering_clause();
				}
			}

			setState(3709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				setState(3708);
				_la = _input.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3711);
				match(RESULT_CACHE);
				setState(3712);
				match(LEFT_PAREN);
				setState(3713);
				match(MODE);
				setState(3714);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3715);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3719);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				setState(3718);
				parallel_clause();
				}
			}

			setState(3722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				setState(3721);
				_la = _input.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3727);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3724);
					enable_disable_clause();
					}
					} 
				}
				setState(3729);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,438,_ctx);
			}
			setState(3731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3730);
				row_movement_clause();
				}
				break;
			}
			setState(3734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3733);
				flashback_archive_clause();
				}
				break;
			}
			setState(3738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3736);
				match(ROW);
				setState(3737);
				match(ARCHIVAL);
				}
				break;
			}
			setState(3742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3740);
				match(AS);
				setState(3741);
				subquery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_archive_clauseContext extends ParserRuleContext {
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public Flashback_archive_nameContext flashback_archive_name() {
			return getRuleContext(Flashback_archive_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Flashback_archive_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_archive_clause; }
	}

	public final Flashback_archive_clauseContext flashback_archive_clause() throws RecognitionException {
		Flashback_archive_clauseContext _localctx = new Flashback_archive_clauseContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_flashback_archive_clause);
		try {
			setState(3752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLASHBACK:
				enterOuterAlt(_localctx, 1);
				{
				setState(3744);
				match(FLASHBACK);
				setState(3745);
				match(ARCHIVE);
				setState(3747);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(3746);
					flashback_archive_name();
					}
					break;
				}
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(3749);
				match(NO);
				setState(3750);
				match(FLASHBACK);
				setState(3751);
				match(ARCHIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_movement_clauseContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode MOVEMENT() { return getToken(PlSqlParser.MOVEMENT, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Row_movement_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_movement_clause; }
	}

	public final Row_movement_clauseContext row_movement_clause() throws RecognitionException {
		Row_movement_clauseContext _localctx = new Row_movement_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_row_movement_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3754);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3755);
			match(ROW);
			setState(3756);
			match(MOVEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_clustering_clauseContext extends ParserRuleContext {
		public TerminalNode CLUSTERING() { return getToken(PlSqlParser.CLUSTERING, 0); }
		public Cluster_clauseContext cluster_clause() {
			return getRuleContext(Cluster_clauseContext.class,0);
		}
		public Zonemap_clauseContext zonemap_clause() {
			return getRuleContext(Zonemap_clauseContext.class,0);
		}
		public Clustering_joinContext clustering_join() {
			return getRuleContext(Clustering_joinContext.class,0);
		}
		public Clustering_whenContext clustering_when() {
			return getRuleContext(Clustering_whenContext.class,0);
		}
		public Attribute_clustering_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_clustering_clause; }
	}

	public final Attribute_clustering_clauseContext attribute_clustering_clause() throws RecognitionException {
		Attribute_clustering_clauseContext _localctx = new Attribute_clustering_clauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_attribute_clustering_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3758);
			match(CLUSTERING);
			setState(3760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(3759);
				clustering_join();
				}
			}

			setState(3762);
			cluster_clause();
			setState(3764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==YES) {
				{
				setState(3763);
				clustering_when();
				}
			}

			setState(3766);
			zonemap_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clustering_joinContext extends ParserRuleContext {
		public List<Table_fullnameContext> table_fullname() {
			return getRuleContexts(Table_fullnameContext.class);
		}
		public Table_fullnameContext table_fullname(int i) {
			return getRuleContext(Table_fullnameContext.class,i);
		}
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public Clustering_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustering_join; }
	}

	public final Clustering_joinContext clustering_join() throws RecognitionException {
		Clustering_joinContext _localctx = new Clustering_joinContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_clustering_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3768);
			table_fullname();
			setState(3769);
			match(JOIN);
			setState(3770);
			table_fullname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cluster_clauseContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Clustering_columnsContext clustering_columns() {
			return getRuleContext(Clustering_columnsContext.class,0);
		}
		public TerminalNode LINEAR() { return getToken(PlSqlParser.LINEAR, 0); }
		public TerminalNode INTERVLEAVED() { return getToken(PlSqlParser.INTERVLEAVED, 0); }
		public Cluster_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_clause; }
	}

	public final Cluster_clauseContext cluster_clause() throws RecognitionException {
		Cluster_clauseContext _localctx = new Cluster_clauseContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_cluster_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3772);
			match(BY);
			setState(3774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTERVLEAVED || _la==LINEAR) {
				{
				setState(3773);
				_la = _input.LA(1);
				if ( !(_la==INTERVLEAVED || _la==LINEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3776);
			match(ORDER);
			setState(3777);
			clustering_columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clustering_columnsContext extends ParserRuleContext {
		public Clustering_columns_groupContext clustering_columns_group() {
			return getRuleContext(Clustering_columns_groupContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Clustering_columnsContext> clustering_columns() {
			return getRuleContexts(Clustering_columnsContext.class);
		}
		public Clustering_columnsContext clustering_columns(int i) {
			return getRuleContext(Clustering_columnsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Clustering_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustering_columns; }
	}

	public final Clustering_columnsContext clustering_columns() throws RecognitionException {
		Clustering_columnsContext _localctx = new Clustering_columnsContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_clustering_columns);
		int _la;
		try {
			setState(3790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3779);
				clustering_columns_group();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3780);
				match(LEFT_PAREN);
				setState(3781);
				clustering_columns();
				setState(3784); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3782);
					match(COMMA);
					setState(3783);
					clustering_columns();
					}
					}
					setState(3786); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3788);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clustering_columns_groupContext extends ParserRuleContext {
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Clustering_columns_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustering_columns_group; }
	}

	public final Clustering_columns_groupContext clustering_columns_group() throws RecognitionException {
		Clustering_columns_groupContext _localctx = new Clustering_columns_groupContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_clustering_columns_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3792);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Clustering_whenContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode LOAD() { return getToken(PlSqlParser.LOAD, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode MOVEMENT() { return getToken(PlSqlParser.MOVEMENT, 0); }
		public Clustering_whenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustering_when; }
	}

	public final Clustering_whenContext clustering_when() throws RecognitionException {
		Clustering_whenContext _localctx = new Clustering_whenContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_clustering_when);
		int _la;
		try {
			setState(3801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3794);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3795);
				match(ON);
				setState(3796);
				match(LOAD);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3797);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3798);
				match(ON);
				setState(3799);
				match(DATA);
				setState(3800);
				match(MOVEMENT);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zonemap_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PlSqlParser.MATERIALIZED, 0); }
		public TerminalNode ZONEMAP() { return getToken(PlSqlParser.ZONEMAP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Zonemap_nameContext zonemap_name() {
			return getRuleContext(Zonemap_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode WITHOUT() { return getToken(PlSqlParser.WITHOUT, 0); }
		public Zonemap_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zonemap_clause; }
	}

	public final Zonemap_clauseContext zonemap_clause() throws RecognitionException {
		Zonemap_clauseContext _localctx = new Zonemap_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_zonemap_clause);
		try {
			setState(3813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3803);
				match(WITH);
				setState(3804);
				match(MATERIALIZED);
				setState(3805);
				match(ZONEMAP);
				setState(3806);
				match(LEFT_PAREN);
				setState(3807);
				zonemap_name();
				setState(3808);
				match(RIGHT_PAREN);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3810);
				match(WITHOUT);
				setState(3811);
				match(MATERIALIZED);
				setState(3812);
				match(ZONEMAP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_disable_clauseContext extends ParserRuleContext {
		public Exceptions_clauseContext exceptions_clause() {
			return getRuleContext(Exceptions_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Using_index_clauseContext using_index_clause() {
			return getRuleContext(Using_index_clauseContext.class,0);
		}
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode NOVALIDATE() { return getToken(PlSqlParser.NOVALIDATE, 0); }
		public Enable_disable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_disable_clause; }
	}

	public final Enable_disable_clauseContext enable_disable_clause() throws RecognitionException {
		Enable_disable_clauseContext _localctx = new Enable_disable_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_enable_disable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3815);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOVALIDATE || _la==VALIDATE) {
				{
				setState(3816);
				_la = _input.LA(1);
				if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(3819);
				match(UNIQUE);
				setState(3820);
				paren_column_list();
				}
				break;
			case PRIMARY:
				{
				setState(3821);
				match(PRIMARY);
				setState(3822);
				match(KEY);
				}
				break;
			case CONSTRAINT:
				{
				setState(3823);
				match(CONSTRAINT);
				setState(3824);
				constraint_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(3827);
				using_index_clause();
				}
			}

			setState(3830);
			exceptions_clause();
			setState(3832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(3831);
				match(CASCADE);
				}
				break;
			}
			setState(3837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3834);
				match(KEEP);
				setState(3835);
				match(INDEX);
				}
				break;
			case 2:
				{
				setState(3836);
				match(DROP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_partitioning_clausesContext extends ParserRuleContext {
		public Range_partitionsContext range_partitions() {
			return getRuleContext(Range_partitionsContext.class,0);
		}
		public List_partitionsContext list_partitions() {
			return getRuleContext(List_partitionsContext.class,0);
		}
		public Hash_partitionsContext hash_partitions() {
			return getRuleContext(Hash_partitionsContext.class,0);
		}
		public Composite_range_partitionsContext composite_range_partitions() {
			return getRuleContext(Composite_range_partitionsContext.class,0);
		}
		public Composite_list_partitionsContext composite_list_partitions() {
			return getRuleContext(Composite_list_partitionsContext.class,0);
		}
		public Composite_hash_partitionsContext composite_hash_partitions() {
			return getRuleContext(Composite_hash_partitionsContext.class,0);
		}
		public Reference_partitioningContext reference_partitioning() {
			return getRuleContext(Reference_partitioningContext.class,0);
		}
		public Table_partitioning_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partitioning_clauses; }
	}

	public final Table_partitioning_clausesContext table_partitioning_clauses() throws RecognitionException {
		Table_partitioning_clausesContext _localctx = new Table_partitioning_clausesContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_table_partitioning_clauses);
		try {
			setState(3846);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3839);
				range_partitions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3840);
				list_partitions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3841);
				hash_partitions();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3842);
				composite_range_partitions();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3843);
				composite_list_partitions();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3844);
				composite_hash_partitions();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3845);
				reference_partitioning();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> PARTITION() { return getTokens(PlSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PlSqlParser.PARTITION, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Range_values_clauseContext range_values_clause() {
			return getRuleContext(Range_values_clauseContext.class,0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(PlSqlParser.STORAGE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<Tablespace_nameContext> tablespace_name() {
			return getRuleContexts(Tablespace_nameContext.class);
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return getRuleContext(Tablespace_nameContext.class,i);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partitions; }
	}

	public final Range_partitionsContext range_partitions() throws RecognitionException {
		Range_partitionsContext _localctx = new Range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_range_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3848);
			match(PARTITION);
			setState(3849);
			match(BY);
			setState(3850);
			match(RANGE);
			setState(3851);
			paren_column_list();
			setState(3869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTERVAL) {
				{
				setState(3852);
				match(INTERVAL);
				setState(3853);
				match(LEFT_PAREN);
				setState(3854);
				expression();
				setState(3855);
				match(RIGHT_PAREN);
				setState(3856);
				match(STORAGE);
				setState(3857);
				match(IN);
				setState(3858);
				match(LEFT_PAREN);
				setState(3859);
				tablespace_name();
				setState(3864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3860);
					match(COMMA);
					setState(3861);
					tablespace_name();
					}
					}
					setState(3866);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3867);
				match(RIGHT_PAREN);
				}
			}

			setState(3871);
			match(LEFT_PAREN);
			setState(3872);
			match(PARTITION);
			setState(3874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(3873);
				partition_name();
				}
			}

			setState(3876);
			range_values_clause();
			setState(3877);
			table_partition_description();
			setState(3878);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partition_quantityContext hash_partition_quantity() {
			return getRuleContext(Hash_partition_quantityContext.class,0);
		}
		public Hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions; }
	}

	public final Hash_partitionsContext hash_partitions() throws RecognitionException {
		Hash_partitionsContext _localctx = new Hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_hash_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3880);
			match(PARTITION);
			setState(3881);
			match(BY);
			setState(3882);
			match(HASH);
			setState(3883);
			paren_column_list();
			setState(3886);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3884);
				individual_hash_partitions();
				}
				break;
			case UNSIGNED_INTEGER:
				{
				setState(3885);
				hash_partition_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_propertiesContext extends ParserRuleContext {
		public Object_type_col_propertiesContext object_type_col_properties() {
			return getRuleContext(Object_type_col_propertiesContext.class,0);
		}
		public Nested_table_col_propertiesContext nested_table_col_properties() {
			return getRuleContext(Nested_table_col_propertiesContext.class,0);
		}
		public Varray_col_propertiesContext varray_col_properties() {
			return getRuleContext(Varray_col_propertiesContext.class,0);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return getRuleContext(Lob_storage_clauseContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Lob_partitioning_storageContext> lob_partitioning_storage() {
			return getRuleContexts(Lob_partitioning_storageContext.class);
		}
		public Lob_partitioning_storageContext lob_partitioning_storage(int i) {
			return getRuleContext(Lob_partitioning_storageContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Xmltype_column_propertiesContext xmltype_column_properties() {
			return getRuleContext(Xmltype_column_propertiesContext.class,0);
		}
		public Column_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_properties; }
	}

	public final Column_propertiesContext column_properties() throws RecognitionException {
		Column_propertiesContext _localctx = new Column_propertiesContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_column_properties);
		try {
			int _alt;
			setState(3904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLUMN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3888);
				object_type_col_properties();
				}
				break;
			case NESTED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3889);
				nested_table_col_properties();
				}
				break;
			case LOB:
			case VARRAY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3892);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VARRAY:
					{
					setState(3890);
					varray_col_properties();
					}
					break;
				case LOB:
					{
					setState(3891);
					lob_storage_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3900);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3894);
						match(LEFT_PAREN);
						setState(3895);
						lob_partitioning_storage();
						setState(3896);
						match(RIGHT_PAREN);
						}
						} 
					}
					setState(3902);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,463,_ctx);
				}
				}
				break;
			case XMLTYPE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3903);
				xmltype_column_properties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltype_column_propertiesContext extends ParserRuleContext {
		public TerminalNode XMLTYPE() { return getToken(PlSqlParser.XMLTYPE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Xmlschema_specContext xmlschema_spec() {
			return getRuleContext(Xmlschema_specContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Xmltype_storageContext xmltype_storage() {
			return getRuleContext(Xmltype_storageContext.class,0);
		}
		public Xmltype_column_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_column_properties; }
	}

	public final Xmltype_column_propertiesContext xmltype_column_properties() throws RecognitionException {
		Xmltype_column_propertiesContext _localctx = new Xmltype_column_propertiesContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_xmltype_column_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906);
			match(XMLTYPE);
			setState(3908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(3907);
				match(COLUMN);
				}
			}

			setState(3910);
			column_name();
			setState(3912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORE) {
				{
				setState(3911);
				xmltype_storage();
				}
			}

			setState(3914);
			xmlschema_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmltype_storageContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode VARRAYS() { return getToken(PlSqlParser.VARRAYS, 0); }
		public TerminalNode LOBS() { return getToken(PlSqlParser.LOBS, 0); }
		public TerminalNode TABLES() { return getToken(PlSqlParser.TABLES, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode RELATIONAL() { return getToken(PlSqlParser.RELATIONAL, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode BINARY() { return getToken(PlSqlParser.BINARY, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public Paren_lob_parametersContext paren_lob_parameters() {
			return getRuleContext(Paren_lob_parametersContext.class,0);
		}
		public TerminalNode SECUREFILE() { return getToken(PlSqlParser.SECUREFILE, 0); }
		public TerminalNode BASICFILE() { return getToken(PlSqlParser.BASICFILE, 0); }
		public Xmltype_storageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmltype_storage; }
	}

	public final Xmltype_storageContext xmltype_storage() throws RecognitionException {
		Xmltype_storageContext _localctx = new Xmltype_storageContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_xmltype_storage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3916);
			match(STORE);
			setState(3941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				{
				setState(3917);
				match(AS);
				setState(3935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3918);
					match(OBJECT);
					setState(3919);
					match(RELATIONAL);
					}
					break;
				case 2:
					{
					setState(3921);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BASICFILE || _la==SECUREFILE) {
						{
						setState(3920);
						_la = _input.LA(1);
						if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3926);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
					case 1:
						{
						setState(3923);
						match(CLOB);
						}
						break;
					case 2:
						{
						setState(3924);
						match(BINARY);
						setState(3925);
						match(XML);
						}
						break;
					}
					setState(3933);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
					case 1:
						{
						setState(3928);
						lob_segname();
						setState(3930);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==LEFT_PAREN) {
							{
							setState(3929);
							paren_lob_parameters();
							}
						}

						}
						break;
					case 2:
						{
						setState(3932);
						paren_lob_parameters();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case ALL:
				{
				setState(3937);
				match(ALL);
				setState(3938);
				match(VARRAYS);
				setState(3939);
				match(AS);
				setState(3940);
				_la = _input.LA(1);
				if ( !(_la==LOBS || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlschema_specContext extends ParserRuleContext {
		public Token xmlschema_url;
		public Token xmlschema_url2;
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public Element_nameContext element_name() {
			return getRuleContext(Element_nameContext.class,0);
		}
		public TerminalNode SHARP() { return getToken(PlSqlParser.SHARP, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(PlSqlParser.XMLSCHEMA, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode VARRAYS() { return getToken(PlSqlParser.VARRAYS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode NONSCHEMA() { return getToken(PlSqlParser.NONSCHEMA, 0); }
		public TerminalNode ANYSCHEMA() { return getToken(PlSqlParser.ANYSCHEMA, 0); }
		public TerminalNode LOBS() { return getToken(PlSqlParser.LOBS, 0); }
		public TerminalNode TABLES() { return getToken(PlSqlParser.TABLES, 0); }
		public List<TerminalNode> ALLOW() { return getTokens(PlSqlParser.ALLOW); }
		public TerminalNode ALLOW(int i) {
			return getToken(PlSqlParser.ALLOW, i);
		}
		public List<TerminalNode> DISALLOW() { return getTokens(PlSqlParser.DISALLOW); }
		public TerminalNode DISALLOW(int i) {
			return getToken(PlSqlParser.DISALLOW, i);
		}
		public Xmlschema_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlschema_spec; }
	}

	public final Xmlschema_specContext xmlschema_spec() throws RecognitionException {
		Xmlschema_specContext _localctx = new Xmlschema_specContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_xmlschema_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XMLSCHEMA) {
				{
				setState(3943);
				match(XMLSCHEMA);
				setState(3944);
				((Xmlschema_specContext)_localctx).xmlschema_url = match(CHAR_STRING);
				}
			}

			setState(3947);
			match(ELEMENT);
			setState(3952);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(3948);
				element_name();
				}
				break;
			case CHAR_STRING:
				{
				setState(3949);
				((Xmlschema_specContext)_localctx).xmlschema_url2 = match(CHAR_STRING);
				setState(3950);
				match(SHARP);
				setState(3951);
				element_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				{
				setState(3954);
				match(STORE);
				setState(3955);
				match(ALL);
				setState(3956);
				match(VARRAYS);
				setState(3957);
				match(AS);
				setState(3958);
				_la = _input.LA(1);
				if ( !(_la==LOBS || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(3961);
				_la = _input.LA(1);
				if ( !(_la==ALLOW || _la==DISALLOW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3962);
				match(NONSCHEMA);
				}
				break;
			}
			setState(3967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOW || _la==DISALLOW) {
				{
				setState(3965);
				_la = _input.LA(1);
				if ( !(_la==ALLOW || _la==DISALLOW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3966);
				match(ANYSCHEMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> PARTITION() { return getTokens(PlSqlParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(PlSqlParser.PARTITION, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode LIST() { return getToken(PlSqlParser.LIST, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<List_values_clauseContext> list_values_clause() {
			return getRuleContexts(List_values_clauseContext.class);
		}
		public List_values_clauseContext list_values_clause(int i) {
			return getRuleContext(List_values_clauseContext.class,i);
		}
		public List<Table_partition_descriptionContext> table_partition_description() {
			return getRuleContexts(Table_partition_descriptionContext.class);
		}
		public Table_partition_descriptionContext table_partition_description(int i) {
			return getRuleContext(Table_partition_descriptionContext.class,i);
		}
		public List<Partition_nameContext> partition_name() {
			return getRuleContexts(Partition_nameContext.class);
		}
		public Partition_nameContext partition_name(int i) {
			return getRuleContext(Partition_nameContext.class,i);
		}
		public List_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partitions; }
	}

	public final List_partitionsContext list_partitions() throws RecognitionException {
		List_partitionsContext _localctx = new List_partitionsContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_list_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3969);
			match(PARTITION);
			setState(3970);
			match(BY);
			setState(3971);
			match(LIST);
			setState(3972);
			paren_column_list();
			setState(3973);
			match(LEFT_PAREN);
			setState(3981); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3974);
				match(PARTITION);
				setState(3976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(3975);
					partition_name();
					}
				}

				setState(3978);
				list_values_clause();
				setState(3979);
				table_partition_description();
				}
				}
				setState(3983); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==PARTITION );
			setState(3985);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Composite_range_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Range_partition_descContext range_partition_desc() {
			return getRuleContext(Range_partition_descContext.class,0);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<Tablespace_nameContext> tablespace_name() {
			return getRuleContexts(Tablespace_nameContext.class);
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return getRuleContext(Tablespace_nameContext.class,i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Composite_range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_range_partitions; }
	}

	public final Composite_range_partitionsContext composite_range_partitions() throws RecognitionException {
		Composite_range_partitionsContext _localctx = new Composite_range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_composite_range_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3987);
			match(PARTITION);
			setState(3988);
			match(BY);
			setState(3989);
			match(RANGE);
			setState(3990);
			paren_column_list();
			setState(3991);
			match(INTERVAL);
			setState(3992);
			match(LEFT_PAREN);
			setState(3993);
			expression();
			setState(3994);
			match(RIGHT_PAREN);
			{
			setState(3995);
			match(STORE);
			setState(3996);
			match(IN);
			setState(3997);
			match(LEFT_PAREN);
			setState(3998);
			tablespace_name();
			setState(4003);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3999);
				match(COMMA);
				setState(4000);
				tablespace_name();
				}
				}
				setState(4005);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4006);
			match(RIGHT_PAREN);
			}
			setState(4011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(4008);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(4009);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(4010);
				subpartition_by_hash();
				}
				break;
			}
			setState(4013);
			match(LEFT_PAREN);
			setState(4014);
			range_partition_desc();
			setState(4015);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Composite_hash_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public Composite_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_hash_partitions; }
	}

	public final Composite_hash_partitionsContext composite_hash_partitions() throws RecognitionException {
		Composite_hash_partitionsContext _localctx = new Composite_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_composite_hash_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			match(PARTITION);
			setState(4018);
			match(BY);
			setState(4019);
			match(HASH);
			setState(4020);
			paren_column_list();
			setState(4024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(4021);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(4022);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(4023);
				subpartition_by_hash();
				}
				break;
			}
			setState(4028);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(4026);
				individual_hash_partitions();
				}
				break;
			case PARTITIONS:
				{
				setState(4027);
				hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Composite_list_partitionsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode LIST() { return getToken(PlSqlParser.LIST, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public List<List_partition_descContext> list_partition_desc() {
			return getRuleContexts(List_partition_descContext.class);
		}
		public List_partition_descContext list_partition_desc(int i) {
			return getRuleContext(List_partition_descContext.class,i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return getRuleContext(Subpartition_by_rangeContext.class,0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return getRuleContext(Subpartition_by_listContext.class,0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return getRuleContext(Subpartition_by_hashContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Composite_list_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_composite_list_partitions; }
	}

	public final Composite_list_partitionsContext composite_list_partitions() throws RecognitionException {
		Composite_list_partitionsContext _localctx = new Composite_list_partitionsContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_composite_list_partitions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4030);
			match(PARTITION);
			setState(4031);
			match(BY);
			setState(4032);
			match(LIST);
			setState(4033);
			paren_column_list();
			setState(4037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(4034);
				subpartition_by_range();
				}
				break;
			case 2:
				{
				setState(4035);
				subpartition_by_list();
				}
				break;
			case 3:
				{
				setState(4036);
				subpartition_by_hash();
				}
				break;
			}
			setState(4039);
			list_partition_desc();
			setState(4044);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4040);
					match(COMMA);
					setState(4041);
					list_partition_desc();
					}
					} 
				}
				setState(4046);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public Range_values_clauseContext range_values_clause() {
			return getRuleContext(Range_values_clauseContext.class,0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return getRuleContext(Hash_subparts_by_quantityContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Range_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partition_desc; }
	}

	public final Range_partition_descContext range_partition_desc() throws RecognitionException {
		Range_partition_descContext _localctx = new Range_partition_descContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_range_partition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4047);
			match(PARTITION);
			setState(4048);
			partition_name();
			setState(4049);
			range_values_clause();
			setState(4050);
			table_partition_description();
			setState(4079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4051);
				match(LEFT_PAREN);
				setState(4052);
				range_subpartition_desc();
				setState(4057);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4053);
					match(COMMA);
					setState(4054);
					range_subpartition_desc();
					}
					}
					setState(4059);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(4060);
				list_subpartition_desc();
				setState(4065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4061);
					match(COMMA);
					setState(4062);
					list_subpartition_desc();
					}
					}
					setState(4067);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(4068);
				individual_hash_subparts();
				setState(4073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4069);
					match(COMMA);
					setState(4070);
					individual_hash_subparts();
					}
					}
					setState(4075);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4076);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(4078);
				hash_subparts_by_quantity();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public List_values_clauseContext list_values_clause() {
			return getRuleContext(List_values_clauseContext.class,0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return getRuleContext(Table_partition_descriptionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return getRuleContext(Hash_subparts_by_quantityContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partition_desc; }
	}

	public final List_partition_descContext list_partition_desc() throws RecognitionException {
		List_partition_descContext _localctx = new List_partition_descContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_list_partition_desc);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4081);
			match(PARTITION);
			setState(4082);
			partition_name();
			setState(4083);
			list_values_clause();
			setState(4084);
			table_partition_description();
			setState(4113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4085);
				match(LEFT_PAREN);
				setState(4086);
				range_subpartition_desc();
				setState(4091);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4087);
						match(COMMA);
						setState(4088);
						range_subpartition_desc();
						}
						} 
					}
					setState(4093);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(4094);
				list_subpartition_desc();
				setState(4099);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,491,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4095);
						match(COMMA);
						setState(4096);
						list_subpartition_desc();
						}
						} 
					}
					setState(4101);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,491,_ctx);
				}
				}
				break;
			case 3:
				{
				setState(4102);
				individual_hash_subparts();
				setState(4107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4103);
					match(COMMA);
					setState(4104);
					individual_hash_subparts();
					}
					}
					setState(4109);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4110);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(4112);
				hash_subparts_by_quantity();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_subpartition_descContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public Range_values_clauseContext range_values_clause() {
			return getRuleContext(Range_values_clauseContext.class,0);
		}
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Indexing_clauseContext indexing_clause() {
			return getRuleContext(Indexing_clauseContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public Range_subpartition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_subpartition_desc; }
	}

	public final Range_subpartition_descContext range_subpartition_desc() throws RecognitionException {
		Range_subpartition_descContext _localctx = new Range_subpartition_descContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_range_subpartition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4115);
			match(SUBPARTITION);
			setState(4117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(4116);
				subpartition_name();
				}
			}

			setState(4119);
			range_values_clause();
			setState(4121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXING) {
				{
				setState(4120);
				indexing_clause();
				}
			}

			setState(4124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4123);
				partitioning_storage_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_subpartition_descContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public List_values_clauseContext list_values_clause() {
			return getRuleContext(List_values_clauseContext.class,0);
		}
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Indexing_clauseContext indexing_clause() {
			return getRuleContext(Indexing_clauseContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public List_subpartition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_subpartition_desc; }
	}

	public final List_subpartition_descContext list_subpartition_desc() throws RecognitionException {
		List_subpartition_descContext _localctx = new List_subpartition_descContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_list_subpartition_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4126);
			match(SUBPARTITION);
			setState(4128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(4127);
				subpartition_name();
				}
			}

			setState(4130);
			list_values_clause();
			setState(4132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXING) {
				{
				setState(4131);
				indexing_clause();
				}
			}

			setState(4135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(4134);
				partitioning_storage_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_subpartsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public Subpartition_nameContext subpartition_name() {
			return getRuleContext(Subpartition_nameContext.class,0);
		}
		public Indexing_clauseContext indexing_clause() {
			return getRuleContext(Indexing_clauseContext.class,0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return getRuleContext(Partitioning_storage_clauseContext.class,0);
		}
		public Individual_hash_subpartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_subparts; }
	}

	public final Individual_hash_subpartsContext individual_hash_subparts() throws RecognitionException {
		Individual_hash_subpartsContext _localctx = new Individual_hash_subpartsContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_individual_hash_subparts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			match(SUBPARTITION);
			setState(4139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(4138);
				subpartition_name();
				}
				break;
			}
			setState(4142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXING) {
				{
				setState(4141);
				indexing_clause();
				}
			}

			setState(4145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN || _la==COMPRESS || _la==INMEMORY || _la==LOB || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (NOCOMPRESS - 367)) | (1L << (NO - 367)) | (1L << (OVERFLOW - 367)))) != 0) || _la==ROW || _la==TABLESPACE || _la==VARRAY) {
				{
				setState(4144);
				partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_subparts_by_quantityContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Tablespace_nameContext> tablespace_name() {
			return getRuleContexts(Tablespace_nameContext.class);
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return getRuleContext(Tablespace_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Hash_subparts_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_subparts_by_quantity; }
	}

	public final Hash_subparts_by_quantityContext hash_subparts_by_quantity() throws RecognitionException {
		Hash_subparts_by_quantityContext _localctx = new Hash_subparts_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_hash_subparts_by_quantity);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			match(SUBPARTITION);
			setState(4148);
			integer();
			setState(4162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				setState(4149);
				match(STORE);
				setState(4150);
				match(IN);
				{
				setState(4151);
				match(LEFT_PAREN);
				setState(4152);
				tablespace_name();
				setState(4157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4153);
					match(COMMA);
					setState(4154);
					tablespace_name();
					}
					}
					setState(4159);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4160);
				match(RIGHT_PAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_partition_descriptionContext extends ParserRuleContext {
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public Indexing_clauseContext indexing_clause() {
			return getRuleContext(Indexing_clauseContext.class,0);
		}
		public List<Segment_attributes_clauseContext> segment_attributes_clause() {
			return getRuleContexts(Segment_attributes_clauseContext.class);
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return getRuleContext(Segment_attributes_clauseContext.class,i);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Prefix_compressionContext prefix_compression() {
			return getRuleContext(Prefix_compressionContext.class,0);
		}
		public Inmemory_clauseContext inmemory_clause() {
			return getRuleContext(Inmemory_clauseContext.class,0);
		}
		public Ilm_clauseContext ilm_clause() {
			return getRuleContext(Ilm_clauseContext.class,0);
		}
		public TerminalNode OVERFLOW() { return getToken(PlSqlParser.OVERFLOW, 0); }
		public List<Lob_storage_clauseContext> lob_storage_clause() {
			return getRuleContexts(Lob_storage_clauseContext.class);
		}
		public Lob_storage_clauseContext lob_storage_clause(int i) {
			return getRuleContext(Lob_storage_clauseContext.class,i);
		}
		public List<Varray_col_propertiesContext> varray_col_properties() {
			return getRuleContexts(Varray_col_propertiesContext.class);
		}
		public Varray_col_propertiesContext varray_col_properties(int i) {
			return getRuleContext(Varray_col_propertiesContext.class,i);
		}
		public List<Nested_table_col_propertiesContext> nested_table_col_properties() {
			return getRuleContexts(Nested_table_col_propertiesContext.class);
		}
		public Nested_table_col_propertiesContext nested_table_col_properties(int i) {
			return getRuleContext(Nested_table_col_propertiesContext.class,i);
		}
		public Table_partition_descriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partition_description; }
	}

	public final Table_partition_descriptionContext table_partition_description() throws RecognitionException {
		Table_partition_descriptionContext _localctx = new Table_partition_descriptionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_table_partition_description);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(4164);
				deferred_segment_creation();
				}
				break;
			}
			setState(4168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXING) {
				{
				setState(4167);
				indexing_clause();
				}
			}

			setState(4171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				setState(4170);
				segment_attributes_clause();
				}
			}

			setState(4175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(4173);
				table_compression();
				}
				break;
			case 2:
				{
				setState(4174);
				prefix_compression();
				}
				break;
			}
			setState(4178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(4177);
				inmemory_clause();
				}
				break;
			}
			setState(4181);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(4180);
				ilm_clause();
				}
				break;
			}
			setState(4187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERFLOW) {
				{
				setState(4183);
				match(OVERFLOW);
				setState(4185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					setState(4184);
					segment_attributes_clause();
					}
				}

				}
			}

			setState(4194);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,514,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4192);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LOB:
						{
						setState(4189);
						lob_storage_clause();
						}
						break;
					case VARRAY:
						{
						setState(4190);
						varray_col_properties();
						}
						break;
					case NESTED:
						{
						setState(4191);
						nested_table_col_properties();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(4196);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,514,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode LESS() { return getToken(PlSqlParser.LESS, 0); }
		public TerminalNode THAN() { return getToken(PlSqlParser.THAN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Range_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_values_clause; }
	}

	public final Range_values_clauseContext range_values_clause() throws RecognitionException {
		Range_values_clauseContext _localctx = new Range_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_range_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4197);
			match(VALUES);
			setState(4198);
			match(LESS);
			setState(4199);
			match(THAN);
			setState(4200);
			match(LEFT_PAREN);
			setState(4210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				setState(4201);
				literal();
				setState(4206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4202);
					match(COMMA);
					setState(4203);
					literal();
					}
					}
					setState(4208);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(4209);
				match(MAXVALUE);
				}
				break;
			}
			setState(4212);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List_values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_values_clause; }
	}

	public final List_values_clauseContext list_values_clause() throws RecognitionException {
		List_values_clauseContext _localctx = new List_values_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_list_values_clause);
		try {
			int _alt;
			setState(4229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				enterOuterAlt(_localctx, 1);
				{
				setState(4214);
				match(VALUES);
				setState(4215);
				match(LEFT_PAREN);
				setState(4225);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(4216);
					literal();
					setState(4221);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,517,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4217);
							match(COMMA);
							setState(4218);
							literal();
							}
							} 
						}
						setState(4223);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,517,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4224);
					match(NULL);
					}
					break;
				}
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4227);
				match(DEFAULT);
				setState(4228);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_by_rangeContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public Subpartition_by_rangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_range; }
	}

	public final Subpartition_by_rangeContext subpartition_by_range() throws RecognitionException {
		Subpartition_by_rangeContext _localctx = new Subpartition_by_rangeContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_subpartition_by_range);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4231);
			match(SUBPARTITION);
			setState(4232);
			match(BY);
			setState(4233);
			match(RANGE);
			setState(4234);
			paren_column_list();
			setState(4235);
			subpartition_template();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_by_listContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode LIST() { return getToken(PlSqlParser.LIST, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public Subpartition_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_list; }
	}

	public final Subpartition_by_listContext subpartition_by_list() throws RecognitionException {
		Subpartition_by_listContext _localctx = new Subpartition_by_listContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_subpartition_by_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4237);
			match(SUBPARTITION);
			setState(4238);
			match(BY);
			setState(4239);
			match(LIST);
			setState(4240);
			paren_column_list();
			setState(4241);
			subpartition_template();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_by_hashContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode SUBPARTITIONS() { return getToken(PlSqlParser.SUBPARTITIONS, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public Subpartition_templateContext subpartition_template() {
			return getRuleContext(Subpartition_templateContext.class,0);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Tablespace_nameContext> tablespace_name() {
			return getRuleContexts(Tablespace_nameContext.class);
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return getRuleContext(Tablespace_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Subpartition_by_hashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_by_hash; }
	}

	public final Subpartition_by_hashContext subpartition_by_hash() throws RecognitionException {
		Subpartition_by_hashContext _localctx = new Subpartition_by_hashContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_subpartition_by_hash);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4243);
			match(SUBPARTITION);
			setState(4244);
			match(BY);
			setState(4245);
			match(HASH);
			setState(4246);
			paren_column_list();
			{
			setState(4247);
			match(SUBPARTITIONS);
			setState(4248);
			integer();
			{
			setState(4249);
			match(STORE);
			setState(4250);
			match(IN);
			setState(4251);
			match(LEFT_PAREN);
			setState(4252);
			tablespace_name();
			setState(4257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4253);
				match(COMMA);
				setState(4254);
				tablespace_name();
				}
				}
				setState(4259);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4260);
			match(RIGHT_PAREN);
			}
			setState(4262);
			subpartition_template();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_templateContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode TEMPLATE() { return getToken(PlSqlParser.TEMPLATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Range_subpartition_descContext> range_subpartition_desc() {
			return getRuleContexts(Range_subpartition_descContext.class);
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return getRuleContext(Range_subpartition_descContext.class,i);
		}
		public List<List_subpartition_descContext> list_subpartition_desc() {
			return getRuleContexts(List_subpartition_descContext.class);
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return getRuleContext(List_subpartition_descContext.class,i);
		}
		public List<Individual_hash_subpartsContext> individual_hash_subparts() {
			return getRuleContexts(Individual_hash_subpartsContext.class);
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return getRuleContext(Individual_hash_subpartsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Hash_partition_quantityContext hash_partition_quantity() {
			return getRuleContext(Hash_partition_quantityContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Subpartition_templateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_template; }
	}

	public final Subpartition_templateContext subpartition_template() throws RecognitionException {
		Subpartition_templateContext _localctx = new Subpartition_templateContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_subpartition_template);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4264);
			match(SUBPARTITION);
			setState(4265);
			match(TEMPLATE);
			setState(4294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(4266);
				match(LEFT_PAREN);
				setState(4267);
				range_subpartition_desc();
				setState(4272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4268);
					match(COMMA);
					setState(4269);
					range_subpartition_desc();
					}
					}
					setState(4274);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(4275);
				list_subpartition_desc();
				setState(4280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4276);
					match(COMMA);
					setState(4277);
					list_subpartition_desc();
					}
					}
					setState(4282);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(4283);
				individual_hash_subparts();
				setState(4288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4284);
					match(COMMA);
					setState(4285);
					individual_hash_subparts();
					}
					}
					setState(4290);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4291);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(4293);
				hash_partition_quantity();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_partitioningContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ConstraintContext constraint() {
			return getRuleContext(ConstraintContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public List<Reference_partition_descContext> reference_partition_desc() {
			return getRuleContexts(Reference_partition_descContext.class);
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return getRuleContext(Reference_partition_descContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Reference_partitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_partitioning; }
	}

	public final Reference_partitioningContext reference_partitioning() throws RecognitionException {
		Reference_partitioningContext _localctx = new Reference_partitioningContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_reference_partitioning);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4296);
			match(PARTITION);
			setState(4297);
			match(BY);
			setState(4298);
			match(REFERENCE);
			setState(4299);
			match(LEFT_PAREN);
			setState(4300);
			constraint();
			setState(4301);
			match(RIGHT_PAREN);
			setState(4310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(4302);
				match(LEFT_PAREN);
				setState(4303);
				reference_partition_desc();
				setState(4306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4304);
					match(COMMA);
					setState(4305);
					reference_partition_desc();
					}
				}

				setState(4308);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_partition_descContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode SYSTEM() { return getToken(PlSqlParser.SYSTEM, 0); }
		public TerminalNode PARTITIONS() { return getToken(PlSqlParser.PARTITIONS, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public List<Reference_partition_descContext> reference_partition_desc() {
			return getRuleContexts(Reference_partition_descContext.class);
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return getRuleContext(Reference_partition_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Reference_partition_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_partition_desc; }
	}

	public final Reference_partition_descContext reference_partition_desc() throws RecognitionException {
		Reference_partition_descContext _localctx = new Reference_partition_descContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_reference_partition_desc);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4312);
			match(PARTITION);
			setState(4313);
			match(BY);
			setState(4314);
			match(SYSTEM);
			setState(4324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTITIONS:
				{
				setState(4315);
				match(PARTITIONS);
				setState(4316);
				integer();
				}
				break;
			case PARTITION:
				{
				{
				setState(4317);
				reference_partition_desc();
				setState(4320); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4318);
						match(COMMA);
						setState(4319);
						reference_partition_desc();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4322); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			case RIGHT_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_col_propertiesContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Substituable_column_clauseContext substituable_column_clause() {
			return getRuleContext(Substituable_column_clauseContext.class,0);
		}
		public Object_type_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_col_properties; }
	}

	public final Object_type_col_propertiesContext object_type_col_properties() throws RecognitionException {
		Object_type_col_propertiesContext _localctx = new Object_type_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_object_type_col_properties);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4326);
			match(COLUMN);
			setState(4327);
			column_name();
			setState(4328);
			substituable_column_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Substituable_column_clauseContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode LEVELS() { return getToken(PlSqlParser.LEVELS, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Substituable_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substituable_column_clause; }
	}

	public final Substituable_column_clauseContext substituable_column_clause() throws RecognitionException {
		Substituable_column_clauseContext _localctx = new Substituable_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_substituable_column_clause);
		int _la;
		try {
			setState(4350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELEMENT:
			case IS:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT) {
					{
					setState(4330);
					match(ELEMENT);
					}
				}

				setState(4333);
				match(IS);
				setState(4334);
				match(OF);
				setState(4336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(4335);
					match(TYPE);
					}
				}

				setState(4338);
				match(LEFT_PAREN);
				setState(4339);
				match(ONLY);
				setState(4340);
				type_name();
				setState(4341);
				match(RIGHT_PAREN);
				}
				}
				break;
			case NOT:
			case SUBSTITUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4343);
					match(NOT);
					}
				}

				setState(4346);
				match(SUBSTITUTABLE);
				setState(4347);
				match(AT);
				setState(4348);
				match(ALL);
				setState(4349);
				match(LEVELS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_col_propertiesContext extends ParserRuleContext {
		public Collection_nameContext nested_item;
		public Table_fullnameContext storage_table;
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Table_fullnameContext table_fullname() {
			return getRuleContext(Table_fullnameContext.class,0);
		}
		public TerminalNode LOCATOR() { return getToken(PlSqlParser.LOCATOR, 0); }
		public List<TerminalNode> VALUE() { return getTokens(PlSqlParser.VALUE); }
		public TerminalNode VALUE(int i) {
			return getToken(PlSqlParser.VALUE, i);
		}
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Substituable_column_clauseContext substituable_column_clause() {
			return getRuleContext(Substituable_column_clauseContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public List<Object_propertiesContext> object_properties() {
			return getRuleContexts(Object_propertiesContext.class);
		}
		public Object_propertiesContext object_properties(int i) {
			return getRuleContext(Object_propertiesContext.class,i);
		}
		public List<Physical_propertiesContext> physical_properties() {
			return getRuleContexts(Physical_propertiesContext.class);
		}
		public Physical_propertiesContext physical_properties(int i) {
			return getRuleContext(Physical_propertiesContext.class,i);
		}
		public List<Column_propertiesContext> column_properties() {
			return getRuleContexts(Column_propertiesContext.class);
		}
		public Column_propertiesContext column_properties(int i) {
			return getRuleContext(Column_propertiesContext.class,i);
		}
		public Nested_table_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_col_properties; }
	}

	public final Nested_table_col_propertiesContext nested_table_col_properties() throws RecognitionException {
		Nested_table_col_propertiesContext _localctx = new Nested_table_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_nested_table_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4352);
			match(NESTED);
			setState(4353);
			match(TABLE);
			setState(4357);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4354);
				((Nested_table_col_propertiesContext)_localctx).nested_item = collection_name();
				}
				break;
			case COLUMN:
				{
				setState(4355);
				match(COLUMN);
				setState(4356);
				match(VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
				{
				setState(4359);
				substituable_column_clause();
				}
			}

			setState(4364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(4362);
				match(LOCAL);
				setState(4363);
				match(GLOBAL);
				}
			}

			setState(4366);
			match(STORE);
			setState(4367);
			match(AS);
			setState(4368);
			((Nested_table_col_propertiesContext)_localctx).storage_table = table_fullname();
			setState(4382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4369);
				match(LEFT_PAREN);
				setState(4376); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(4376);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LEFT_PAREN:
						{
						setState(4370);
						match(LEFT_PAREN);
						setState(4371);
						object_properties();
						setState(4372);
						match(RIGHT_PAREN);
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case ORGANIZATION:
					case PCTFREE:
					case PCTUSED:
					case SEGMENT:
					case STORAGE:
					case TABLESPACE:
						{
						setState(4374);
						physical_properties();
						}
						break;
					case COLUMN:
					case LOB:
					case NESTED:
					case VARRAY:
					case XMLTYPE:
						{
						setState(4375);
						column_properties();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(4378); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COLUMN || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (LOB - 307)) | (1L << (LOGGING - 307)) | (1L << (NESTED - 307)))) != 0) || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & ((1L << (NOLOGGING - 374)) | (1L << (ORGANIZATION - 374)) | (1L << (PCTFREE - 374)) | (1L << (PCTUSED - 374)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (SEGMENT - 531)) | (1L << (STORAGE - 531)) | (1L << (TABLESPACE - 531)))) != 0) || _la==VARRAY || _la==XMLTYPE || _la==LEFT_PAREN );
				setState(4380);
				match(RIGHT_PAREN);
				}
			}

			setState(4384);
			match(RETURN);
			setState(4385);
			match(AS);
			setState(4386);
			_la = _input.LA(1);
			if ( !(_la==LOCATOR || _la==VALUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_propertiesContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return getRuleContext(Inline_ref_constraintContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return getRuleContext(Out_of_line_ref_constraintContext.class,0);
		}
		public Supplemental_logging_propsContext supplemental_logging_props() {
			return getRuleContext(Supplemental_logging_propsContext.class,0);
		}
		public Object_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_properties; }
	}

	public final Object_propertiesContext object_properties() throws RecognitionException {
		Object_propertiesContext _localctx = new Object_propertiesContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_object_properties);
		int _la;
		try {
			setState(4409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(4388);
					column_name();
					}
					break;
				case 2:
					{
					setState(4389);
					attribute_name();
					}
					break;
				}
				setState(4394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4392);
					match(DEFAULT);
					setState(4393);
					expression();
					}
				}

				setState(4402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(4397); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4396);
						inline_constraint();
						}
						}
						setState(4399); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CHECK || _la==CONSTRAINT || _la==NOT || _la==NULL || _la==PRIMARY || _la==REFERENCES || _la==UNIQUE );
					}
					break;
				case 2:
					{
					setState(4401);
					inline_ref_constraint();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4404);
					out_of_line_constraint();
					}
					break;
				case 2:
					{
					setState(4405);
					out_of_line_ref_constraint();
					}
					break;
				case 3:
					{
					setState(4406);
					supplemental_logging_props();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_col_propertiesContext extends ParserRuleContext {
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public Varray_itemContext varray_item() {
			return getRuleContext(Varray_itemContext.class,0);
		}
		public Varray_storage_clauseContext varray_storage_clause() {
			return getRuleContext(Varray_storage_clauseContext.class,0);
		}
		public Substituable_column_clauseContext substituable_column_clause() {
			return getRuleContext(Substituable_column_clauseContext.class,0);
		}
		public Varray_col_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_col_properties; }
	}

	public final Varray_col_propertiesContext varray_col_properties() throws RecognitionException {
		Varray_col_propertiesContext _localctx = new Varray_col_propertiesContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_varray_col_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4411);
			match(VARRAY);
			setState(4412);
			varray_item();
			setState(4418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				setState(4414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
					{
					setState(4413);
					substituable_column_clause();
					}
				}

				setState(4416);
				varray_storage_clause();
				}
				break;
			case 2:
				{
				setState(4417);
				substituable_column_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_storage_clauseContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode LOB() { return getToken(PlSqlParser.LOB, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Lob_storage_parametersContext lob_storage_parameters() {
			return getRuleContext(Lob_storage_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode SECUREFILE() { return getToken(PlSqlParser.SECUREFILE, 0); }
		public TerminalNode BASICFILE() { return getToken(PlSqlParser.BASICFILE, 0); }
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public Varray_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_storage_clause; }
	}

	public final Varray_storage_clauseContext varray_storage_clause() throws RecognitionException {
		Varray_storage_clauseContext _localctx = new Varray_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_varray_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4420);
			match(STORE);
			setState(4421);
			match(AS);
			setState(4423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				setState(4422);
				_la = _input.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4425);
			match(LOB);
			setState(4434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				{
				setState(4427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(4426);
					lob_segname();
					}
				}

				setState(4429);
				match(LEFT_PAREN);
				setState(4430);
				lob_storage_parameters();
				setState(4431);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4433);
				lob_storage_parameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_clauseContext extends ParserRuleContext {
		public TerminalNode LOB() { return getToken(PlSqlParser.LOB, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<Lob_item_nameContext> lob_item_name() {
			return getRuleContexts(Lob_item_nameContext.class);
		}
		public Lob_item_nameContext lob_item_name(int i) {
			return getRuleContext(Lob_item_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Lob_storage_parametersContext lob_storage_parameters() {
			return getRuleContext(Lob_storage_parametersContext.class,0);
		}
		public Lob_segnameContext lob_segname() {
			return getRuleContext(Lob_segnameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode SECUREFILE() { return getToken(PlSqlParser.SECUREFILE, 0); }
		public TerminalNode BASICFILE() { return getToken(PlSqlParser.BASICFILE, 0); }
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_clause; }
	}

	public final Lob_storage_clauseContext lob_storage_clause() throws RecognitionException {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_lob_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4436);
			match(LOB);
			setState(4476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				setState(4437);
				match(LEFT_PAREN);
				setState(4438);
				lob_item_name();
				setState(4443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4439);
					match(COMMA);
					setState(4440);
					lob_item_name();
					}
					}
					setState(4445);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4446);
				match(RIGHT_PAREN);
				setState(4447);
				match(STORE);
				setState(4448);
				match(AS);
				setState(4454);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BASICFILE:
				case SECUREFILE:
					{
					setState(4449);
					_la = _input.LA(1);
					if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LEFT_PAREN:
					{
					setState(4450);
					match(LEFT_PAREN);
					setState(4451);
					lob_storage_parameters();
					setState(4452);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4456);
				match(LEFT_PAREN);
				setState(4457);
				lob_item_name();
				setState(4462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4458);
					match(COMMA);
					setState(4459);
					lob_item_name();
					}
					}
					setState(4464);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4465);
				match(RIGHT_PAREN);
				setState(4466);
				match(STORE);
				setState(4467);
				match(AS);
				setState(4474);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BASICFILE:
				case SECUREFILE:
					{
					setState(4468);
					_la = _input.LA(1);
					if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(4469);
					lob_segname();
					}
					break;
				case LEFT_PAREN:
					{
					setState(4470);
					match(LEFT_PAREN);
					setState(4471);
					lob_storage_parameters();
					setState(4472);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_storage_parametersContext extends ParserRuleContext {
		public Tablespace_clauseContext tablespace_clause() {
			return getRuleContext(Tablespace_clauseContext.class,0);
		}
		public List<Lob_parametersContext> lob_parameters() {
			return getRuleContexts(Lob_parametersContext.class);
		}
		public Lob_parametersContext lob_parameters(int i) {
			return getRuleContext(Lob_parametersContext.class,i);
		}
		public Storage_clauseContext storage_clause() {
			return getRuleContext(Storage_clauseContext.class,0);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_storage_parameters; }
	}

	public final Lob_storage_parametersContext lob_storage_parameters() throws RecognitionException {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_lob_storage_parameters);
		try {
			int _alt;
			setState(4490);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DECRYPT:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case ENCRYPT:
			case FREEPOOLS:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case PCTVERSION:
			case RETENTION:
			case TABLESPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4487);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLESPACE:
					{
					setState(4478);
					tablespace_clause();
					}
					break;
				case CACHE:
				case CHUNK:
				case COMPRESS:
				case DECRYPT:
				case DEDUPLICATE:
				case DISABLE:
				case ENABLE:
				case ENCRYPT:
				case FREEPOOLS:
				case KEEP_DUPLICATES:
				case NOCACHE:
				case NOCOMPRESS:
				case PCTVERSION:
				case RETENTION:
					{
					setState(4480); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(4479);
							lob_parameters();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(4482); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,555,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					setState(4485);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
					case 1:
						{
						setState(4484);
						storage_clause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4489);
				storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Paren_lob_parametersContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Lob_parametersContext lob_parameters() {
			return getRuleContext(Lob_parametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paren_lob_parameters; }
	}

	public final Paren_lob_parametersContext paren_lob_parameters() throws RecognitionException {
		Paren_lob_parametersContext _localctx = new Paren_lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_paren_lob_parameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4492);
			match(LEFT_PAREN);
			setState(4493);
			lob_parameters();
			setState(4494);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_parametersContext extends ParserRuleContext {
		public IntegerContext ChunkInteger;
		public IntegerContext PctVersionIntger;
		public IntegerContext FreePoolsInteger;
		public TerminalNode STORAGE() { return getToken(PlSqlParser.STORAGE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode CHUNK() { return getToken(PlSqlParser.CHUNK, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public TerminalNode PCTVERSION() { return getToken(PlSqlParser.PCTVERSION, 0); }
		public TerminalNode FREEPOOLS() { return getToken(PlSqlParser.FREEPOOLS, 0); }
		public Lob_retention_clauseContext lob_retention_clause() {
			return getRuleContext(Lob_retention_clauseContext.class,0);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause() {
			return getRuleContext(Lob_deduplicate_clauseContext.class,0);
		}
		public Lob_compresssion_clauseContext lob_compresssion_clause() {
			return getRuleContext(Lob_compresssion_clauseContext.class,0);
		}
		public TerminalNode ENCRYPT() { return getToken(PlSqlParser.ENCRYPT, 0); }
		public Encryption_specContext encryption_spec() {
			return getRuleContext(Encryption_specContext.class,0);
		}
		public TerminalNode DECRYPT() { return getToken(PlSqlParser.DECRYPT, 0); }
		public Logging_clauseContext logging_clause() {
			return getRuleContext(Logging_clauseContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode READS() { return getToken(PlSqlParser.READS, 0); }
		public Lob_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_parameters; }
	}

	public final Lob_parametersContext lob_parameters() throws RecognitionException {
		Lob_parametersContext _localctx = new Lob_parametersContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_lob_parameters);
		int _la;
		try {
			setState(4521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4496);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4497);
				match(STORAGE);
				setState(4498);
				match(IN);
				setState(4499);
				match(ROW);
				}
				break;
			case CHUNK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4500);
				match(CHUNK);
				setState(4501);
				((Lob_parametersContext)_localctx).ChunkInteger = integer();
				}
				break;
			case PCTVERSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4502);
				match(PCTVERSION);
				setState(4503);
				((Lob_parametersContext)_localctx).PctVersionIntger = integer();
				}
				break;
			case FREEPOOLS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4504);
				match(FREEPOOLS);
				setState(4505);
				((Lob_parametersContext)_localctx).FreePoolsInteger = integer();
				}
				break;
			case RETENTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(4506);
				lob_retention_clause();
				}
				break;
			case DEDUPLICATE:
			case KEEP_DUPLICATES:
				enterOuterAlt(_localctx, 6);
				{
				setState(4507);
				lob_deduplicate_clause();
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 7);
				{
				setState(4508);
				lob_compresssion_clause();
				}
				break;
			case DECRYPT:
			case ENCRYPT:
				enterOuterAlt(_localctx, 8);
				{
				setState(4512);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ENCRYPT:
					{
					setState(4509);
					match(ENCRYPT);
					setState(4510);
					encryption_spec();
					}
					break;
				case DECRYPT:
					{
					setState(4511);
					match(DECRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CACHE:
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(4518);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(4514);
					match(CACHE);
					}
					break;
				case 2:
					{
					setState(4515);
					match(NOCACHE);
					}
					break;
				case 3:
					{
					setState(4516);
					match(CACHE);
					setState(4517);
					match(READS);
					}
					break;
				}
				setState(4520);
				logging_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_retention_clauseContext extends ParserRuleContext {
		public IntegerContext MinIntger;
		public TerminalNode RETENTION() { return getToken(PlSqlParser.RETENTION, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public Lob_retention_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_retention_clause; }
	}

	public final Lob_retention_clauseContext lob_retention_clause() throws RecognitionException {
		Lob_retention_clauseContext _localctx = new Lob_retention_clauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_lob_retention_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4523);
			match(RETENTION);
			setState(4529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				{
				setState(4524);
				match(MAX);
				}
				break;
			case 2:
				{
				setState(4525);
				match(MIN);
				setState(4526);
				((Lob_retention_clauseContext)_localctx).MinIntger = integer();
				}
				break;
			case 3:
				{
				setState(4527);
				match(AUTO);
				}
				break;
			case 4:
				{
				setState(4528);
				match(NONE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_deduplicate_clauseContext extends ParserRuleContext {
		public TerminalNode DEDUPLICATE() { return getToken(PlSqlParser.DEDUPLICATE, 0); }
		public TerminalNode KEEP_DUPLICATES() { return getToken(PlSqlParser.KEEP_DUPLICATES, 0); }
		public Lob_deduplicate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_deduplicate_clause; }
	}

	public final Lob_deduplicate_clauseContext lob_deduplicate_clause() throws RecognitionException {
		Lob_deduplicate_clauseContext _localctx = new Lob_deduplicate_clauseContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_lob_deduplicate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4531);
			_la = _input.LA(1);
			if ( !(_la==DEDUPLICATE || _la==KEEP_DUPLICATES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_compresssion_clauseContext extends ParserRuleContext {
		public TerminalNode COMPRESS() { return getToken(PlSqlParser.COMPRESS, 0); }
		public TerminalNode HIGH() { return getToken(PlSqlParser.HIGH, 0); }
		public TerminalNode MEDIUM() { return getToken(PlSqlParser.MEDIUM, 0); }
		public TerminalNode LOW() { return getToken(PlSqlParser.LOW, 0); }
		public TerminalNode NOCOMPRESS() { return getToken(PlSqlParser.NOCOMPRESS, 0); }
		public Lob_compresssion_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_compresssion_clause; }
	}

	public final Lob_compresssion_clauseContext lob_compresssion_clause() throws RecognitionException {
		Lob_compresssion_clauseContext _localctx = new Lob_compresssion_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_lob_compresssion_clause);
		int _la;
		try {
			setState(4538);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPRESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4533);
				match(COMPRESS);
				setState(4535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIGH || _la==LOW || _la==MEDIUM) {
					{
					setState(4534);
					_la = _input.LA(1);
					if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case NOCOMPRESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(4537);
				match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Physical_propertiesContext extends ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Ilm_clauseContext ilm_clause() {
			return getRuleContext(Ilm_clauseContext.class,0);
		}
		public Deferred_segment_creationContext deferred_segment_creation() {
			return getRuleContext(Deferred_segment_creationContext.class,0);
		}
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public Inmemory_table_clauseContext inmemory_table_clause() {
			return getRuleContext(Inmemory_table_clauseContext.class,0);
		}
		public TerminalNode ORGANIZATION() { return getToken(PlSqlParser.ORGANIZATION, 0); }
		public TerminalNode HEAP() { return getToken(PlSqlParser.HEAP, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Index_org_table_clauseContext index_org_table_clause() {
			return getRuleContext(Index_org_table_clauseContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public External_table_clauseContext external_table_clause() {
			return getRuleContext(External_table_clauseContext.class,0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_physical_properties; }
	}

	public final Physical_propertiesContext physical_properties() throws RecognitionException {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_physical_properties);
		int _la;
		try {
			setState(4578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEGMENT) {
					{
					setState(4540);
					deferred_segment_creation();
					}
				}

				setState(4543);
				segment_attributes_clause();
				setState(4545);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					setState(4544);
					table_compression();
					}
					break;
				}
				setState(4548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INMEMORY || _la==NO) {
					{
					setState(4547);
					inmemory_table_clause();
					}
				}

				setState(4550);
				ilm_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEGMENT) {
					{
					setState(4552);
					deferred_segment_creation();
					}
				}

				setState(4555);
				match(ORGANIZATION);
				setState(4576);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HEAP:
					{
					setState(4556);
					match(HEAP);
					setState(4558);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
					case 1:
						{
						setState(4557);
						segment_attributes_clause();
						}
						break;
					}
					setState(4561);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
					case 1:
						{
						setState(4560);
						table_compression();
						}
						break;
					}
					setState(4564);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
					case 1:
						{
						setState(4563);
						inmemory_table_clause();
						}
						break;
					}
					setState(4567);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,572,_ctx) ) {
					case 1:
						{
						setState(4566);
						ilm_clause();
						}
						break;
					}
					}
					break;
				case INDEX:
					{
					setState(4569);
					match(INDEX);
					setState(4571);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
						{
						setState(4570);
						segment_attributes_clause();
						}
					}

					setState(4573);
					index_org_table_clause();
					}
					break;
				case EXTERNAL:
					{
					setState(4574);
					match(EXTERNAL);
					setState(4575);
					external_table_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_table_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public External_data_propertiesContext external_data_properties() {
			return getRuleContext(External_data_propertiesContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public External_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_table_clause; }
	}

	public final External_table_clauseContext external_table_clause() throws RecognitionException {
		External_table_clauseContext _localctx = new External_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_external_table_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4580);
			match(LEFT_PAREN);
			setState(4582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(4581);
				match(TYPE);
				}
			}

			setState(4584);
			external_data_properties();
			setState(4585);
			match(RIGHT_PAREN);
			setState(4592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				{
				setState(4586);
				match(REJECT);
				setState(4587);
				match(LIMIT);
				setState(4590);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case PLUS_SIGN:
				case MINUS_SIGN:
					{
					setState(4588);
					integer();
					}
					break;
				case UNLIMITED:
					{
					setState(4589);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_data_propertiesContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode DIRECTORY() { return getToken(PlSqlParser.DIRECTORY, 0); }
		public Directory_nameContext directory_name() {
			return getRuleContext(Directory_nameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(PlSqlParser.LOCATION, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<External_data_properties_locationContext> external_data_properties_location() {
			return getRuleContexts(External_data_properties_locationContext.class);
		}
		public External_data_properties_locationContext external_data_properties_location(int i) {
			return getRuleContext(External_data_properties_locationContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode ACCESS() { return getToken(PlSqlParser.ACCESS, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public External_data_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_data_properties; }
	}

	public final External_data_propertiesContext external_data_properties() throws RecognitionException {
		External_data_propertiesContext _localctx = new External_data_propertiesContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_external_data_properties);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4594);
			match(DEFAULT);
			setState(4595);
			match(DIRECTORY);
			setState(4596);
			directory_name();
			{
			setState(4597);
			match(ACCESS);
			setState(4598);
			match(PARAMETERS);
			setState(4604);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(4599);
				match(LEFT_PAREN);
				setState(4600);
				match(RIGHT_PAREN);
				}
				break;
			case USING:
				{
				setState(4601);
				match(USING);
				setState(4602);
				match(CLOB);
				setState(4603);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			setState(4606);
			match(LOCATION);
			setState(4607);
			match(LEFT_PAREN);
			setState(4608);
			external_data_properties_location();
			setState(4611); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4609);
				match(COMMA);
				setState(4610);
				external_data_properties_location();
				}
				}
				setState(4613); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			setState(4615);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_data_properties_locationContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Directory_nameContext directory_name() {
			return getRuleContext(Directory_nameContext.class,0);
		}
		public External_data_properties_locationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_data_properties_location; }
	}

	public final External_data_properties_locationContext external_data_properties_location() throws RecognitionException {
		External_data_properties_locationContext _localctx = new External_data_properties_locationContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_external_data_properties_location);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COLON - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(4618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(4617);
					directory_name();
					}
				}

				setState(4620);
				match(COLON);
				}
			}

			setState(4623);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_org_table_clauseContext extends ParserRuleContext {
		public Index_org_overflow_clauseContext index_org_overflow_clause() {
			return getRuleContext(Index_org_overflow_clauseContext.class,0);
		}
		public Mapping_table_clauseContext mapping_table_clause() {
			return getRuleContext(Mapping_table_clauseContext.class,0);
		}
		public TerminalNode PCTTHRESHOLD() { return getToken(PlSqlParser.PCTTHRESHOLD, 0); }
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public Prefix_compressionContext prefix_compression() {
			return getRuleContext(Prefix_compressionContext.class,0);
		}
		public Index_org_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_org_table_clause; }
	}

	public final Index_org_table_clauseContext index_org_table_clause() throws RecognitionException {
		Index_org_table_clauseContext _localctx = new Index_org_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_index_org_table_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4629);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAPPING:
			case NOMAPPING:
				{
				setState(4625);
				mapping_table_clause();
				}
				break;
			case PCTTHRESHOLD:
				{
				setState(4626);
				match(PCTTHRESHOLD);
				setState(4627);
				integer();
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				{
				setState(4628);
				prefix_compression();
				}
				break;
			case INCLUDING:
			case OVERFLOW:
				break;
			default:
				break;
			}
			setState(4631);
			index_org_overflow_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mapping_table_clauseContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(PlSqlParser.MAPPING, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode NOMAPPING() { return getToken(PlSqlParser.NOMAPPING, 0); }
		public Mapping_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mapping_table_clause; }
	}

	public final Mapping_table_clauseContext mapping_table_clause() throws RecognitionException {
		Mapping_table_clauseContext _localctx = new Mapping_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_mapping_table_clause);
		try {
			setState(4636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAPPING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4633);
				match(MAPPING);
				setState(4634);
				match(TABLE);
				}
				break;
			case NOMAPPING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4635);
				match(NOMAPPING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_org_overflow_clauseContext extends ParserRuleContext {
		public TerminalNode OVERFLOW() { return getToken(PlSqlParser.OVERFLOW, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return getRuleContext(Segment_attributes_clauseContext.class,0);
		}
		public Index_org_overflow_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_org_overflow_clause; }
	}

	public final Index_org_overflow_clauseContext index_org_overflow_clause() throws RecognitionException {
		Index_org_overflow_clauseContext _localctx = new Index_org_overflow_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_index_org_overflow_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDING) {
				{
				setState(4638);
				match(INCLUDING);
				setState(4639);
				column_name();
				}
			}

			setState(4642);
			match(OVERFLOW);
			setState(4644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				{
				setState(4643);
				segment_attributes_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Deferred_segment_creationContext extends ParserRuleContext {
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode CREATION() { return getToken(PlSqlParser.CREATION, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferred_segment_creation; }
	}

	public final Deferred_segment_creationContext deferred_segment_creation() throws RecognitionException {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_deferred_segment_creation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4646);
			match(SEGMENT);
			setState(4647);
			match(CREATION);
			setState(4648);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_clauseContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public Tablespace_nameContext tablespace_name() {
			return getRuleContext(Tablespace_nameContext.class,0);
		}
		public Tablespace_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_clause; }
	}

	public final Tablespace_clauseContext tablespace_clause() throws RecognitionException {
		Tablespace_clauseContext _localctx = new Tablespace_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_tablespace_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4650);
			match(TABLESPACE);
			setState(4651);
			tablespace_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Store_inContext extends ParserRuleContext {
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Tablespace_nameContext> tablespace_name() {
			return getRuleContexts(Tablespace_nameContext.class);
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return getRuleContext(Tablespace_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Store_inContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_store_in; }
	}

	public final Store_inContext store_in() throws RecognitionException {
		Store_inContext _localctx = new Store_inContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_store_in);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4653);
			match(STORE);
			setState(4654);
			match(IN);
			setState(4655);
			match(LEFT_PAREN);
			setState(4656);
			tablespace_name();
			setState(4661);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4657);
				match(COMMA);
				setState(4658);
				tablespace_name();
				}
				}
				setState(4663);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4664);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ilm_clauseContext extends ParserRuleContext {
		public TerminalNode ILM() { return getToken(PlSqlParser.ILM, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode POLICY() { return getToken(PlSqlParser.POLICY, 0); }
		public Ilm_policy_clauseContext ilm_policy_clause() {
			return getRuleContext(Ilm_policy_clauseContext.class,0);
		}
		public Ilm_policy_nameContext ilm_policy_name() {
			return getRuleContext(Ilm_policy_nameContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Ilm_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ilm_clause; }
	}

	public final Ilm_clauseContext ilm_clause() throws RecognitionException {
		Ilm_clauseContext _localctx = new Ilm_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_ilm_clause);
		int _la;
		try {
			setState(4681);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4666);
				match(ILM);
				setState(4667);
				match(ADD);
				setState(4668);
				match(POLICY);
				setState(4669);
				ilm_policy_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4670);
				_la = _input.LA(1);
				if ( !(((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (DELETE - 146)) | (1L << (DISABLE - 146)) | (1L << (ENABLE - 146)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4671);
				match(POLICY);
				setState(4672);
				ilm_policy_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4679);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DELETE:
					{
					setState(4673);
					match(DELETE);
					setState(4674);
					match(ALL);
					}
					break;
				case ENABLE:
					{
					setState(4675);
					match(ENABLE);
					setState(4676);
					match(ALL);
					}
					break;
				case DISABLE:
					{
					setState(4677);
					match(DISABLE);
					setState(4678);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ilm_policy_clauseContext extends ParserRuleContext {
		public Ilm_compression_policyContext ilm_compression_policy() {
			return getRuleContext(Ilm_compression_policyContext.class,0);
		}
		public Ilm_tiering_policyContext ilm_tiering_policy() {
			return getRuleContext(Ilm_tiering_policyContext.class,0);
		}
		public Ilm_policy_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ilm_policy_clause; }
	}

	public final Ilm_policy_clauseContext ilm_policy_clause() throws RecognitionException {
		Ilm_policy_clauseContext _localctx = new Ilm_policy_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_ilm_policy_clause);
		try {
			setState(4685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLUMN:
			case COMPRESS:
			case NO:
			case ROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(4683);
				ilm_compression_policy();
				}
				break;
			case TIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4684);
				ilm_tiering_policy();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ilm_compression_policyContext extends ParserRuleContext {
		public Table_compressionContext table_compression() {
			return getRuleContext(Table_compressionContext.class,0);
		}
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public Ilm_time_periodContext ilm_time_period() {
			return getRuleContext(Ilm_time_periodContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode ACCESS() { return getToken(PlSqlParser.ACCESS, 0); }
		public TerminalNode MODIFICATION() { return getToken(PlSqlParser.MODIFICATION, 0); }
		public TerminalNode CREATION() { return getToken(PlSqlParser.CREATION, 0); }
		public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PlSqlParser.ROW, i);
		}
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode COMPRESS() { return getToken(PlSqlParser.COMPRESS, 0); }
		public TerminalNode ADVANCED() { return getToken(PlSqlParser.ADVANCED, 0); }
		public Ilm_compression_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ilm_compression_policy; }
	}

	public final Ilm_compression_policyContext ilm_compression_policy() throws RecognitionException {
		Ilm_compression_policyContext _localctx = new Ilm_compression_policyContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_ilm_compression_policy);
		int _la;
		try {
			setState(4714);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4687);
				table_compression();
				setState(4688);
				_la = _input.LA(1);
				if ( !(_la==GROUP || _la==SEGMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4701);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AFTER:
					{
					setState(4689);
					match(AFTER);
					setState(4690);
					ilm_time_period();
					setState(4691);
					match(OF);
					setState(4697);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
					case 1:
						{
						setState(4692);
						match(NO);
						setState(4693);
						match(ACCESS);
						}
						break;
					case 2:
						{
						setState(4694);
						match(NO);
						setState(4695);
						match(MODIFICATION);
						}
						break;
					case 3:
						{
						setState(4696);
						match(CREATION);
						}
						break;
					}
					}
					break;
				case ON:
					{
					setState(4699);
					match(ON);
					setState(4700);
					function_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4703);
				match(ROW);
				setState(4704);
				match(STORE);
				setState(4705);
				match(COMPRESS);
				setState(4706);
				match(ADVANCED);
				setState(4707);
				match(ROW);
				setState(4708);
				match(AFTER);
				setState(4709);
				ilm_time_period();
				setState(4710);
				match(OF);
				setState(4711);
				match(NO);
				setState(4712);
				match(MODIFICATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ilm_tiering_policyContext extends ParserRuleContext {
		public TerminalNode TIER() { return getToken(PlSqlParser.TIER, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public Tablespace_nameContext tablespace_name() {
			return getRuleContext(Tablespace_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public Ilm_time_periodContext ilm_time_period() {
			return getRuleContext(Ilm_time_periodContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode ACCESS() { return getToken(PlSqlParser.ACCESS, 0); }
		public TerminalNode MODIFICATION() { return getToken(PlSqlParser.MODIFICATION, 0); }
		public TerminalNode CREATION() { return getToken(PlSqlParser.CREATION, 0); }
		public Ilm_tiering_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ilm_tiering_policy; }
	}

	public final Ilm_tiering_policyContext ilm_tiering_policy() throws RecognitionException {
		Ilm_tiering_policyContext _localctx = new Ilm_tiering_policyContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_ilm_tiering_policy);
		int _la;
		try {
			setState(4747);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4716);
				match(TIER);
				setState(4717);
				match(TO);
				setState(4718);
				tablespace_name();
				setState(4720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP || _la==SEGMENT) {
					{
					setState(4719);
					_la = _input.LA(1);
					if ( !(_la==GROUP || _la==SEGMENT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4722);
				match(ON);
				setState(4723);
				function_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4725);
				match(TIER);
				setState(4726);
				match(TO);
				setState(4727);
				tablespace_name();
				setState(4728);
				match(READ);
				setState(4729);
				match(ONLY);
				setState(4731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GROUP || _la==SEGMENT) {
					{
					setState(4730);
					_la = _input.LA(1);
					if ( !(_la==GROUP || _la==SEGMENT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4745);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AFTER:
					{
					setState(4733);
					match(AFTER);
					setState(4734);
					ilm_time_period();
					setState(4735);
					match(OF);
					setState(4741);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
					case 1:
						{
						setState(4736);
						match(NO);
						setState(4737);
						match(ACCESS);
						}
						break;
					case 2:
						{
						setState(4738);
						match(NO);
						setState(4739);
						match(MODIFICATION);
						}
						break;
					case 3:
						{
						setState(4740);
						match(CREATION);
						}
						break;
					}
					}
					break;
				case ON:
					{
					setState(4743);
					match(ON);
					setState(4744);
					function_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ilm_time_periodContext extends ParserRuleContext {
		public IntegerContext integer() {
			return getRuleContext(IntegerContext.class,0);
		}
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DAYS() { return getToken(PlSqlParser.DAYS, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode MONTHS() { return getToken(PlSqlParser.MONTHS, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YEARS() { return getToken(PlSqlParser.YEARS, 0); }
		public Ilm_time_periodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ilm_time_period; }
	}

	public final Ilm_time_periodContext ilm_time_period() throws RecognitionException {
		Ilm_time_periodContext _localctx = new Ilm_time_periodContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_ilm_time_period);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4749);
			integer();
			setState(4750);
			_la = _input.LA(1);
			if ( !(_la==DAY || _la==DAYS || _la==MONTH || _la==MONTHS || _la==YEARS || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_clauseContext extends ParserRuleContext {
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public Token minextents;
		public Token pctincrease;
		public Token freelists;
		public Token freelist_groups;
		public TerminalNode STORAGE() { return getToken(PlSqlParser.STORAGE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> INITIAL() { return getTokens(PlSqlParser.INITIAL); }
		public TerminalNode INITIAL(int i) {
			return getToken(PlSqlParser.INITIAL, i);
		}
		public List<TerminalNode> NEXT() { return getTokens(PlSqlParser.NEXT); }
		public TerminalNode NEXT(int i) {
			return getToken(PlSqlParser.NEXT, i);
		}
		public List<TerminalNode> MINEXTENTS() { return getTokens(PlSqlParser.MINEXTENTS); }
		public TerminalNode MINEXTENTS(int i) {
			return getToken(PlSqlParser.MINEXTENTS, i);
		}
		public List<TerminalNode> PCTINCREASE() { return getTokens(PlSqlParser.PCTINCREASE); }
		public TerminalNode PCTINCREASE(int i) {
			return getToken(PlSqlParser.PCTINCREASE, i);
		}
		public List<TerminalNode> FREELISTS() { return getTokens(PlSqlParser.FREELISTS); }
		public TerminalNode FREELISTS(int i) {
			return getToken(PlSqlParser.FREELISTS, i);
		}
		public List<TerminalNode> FREELIST() { return getTokens(PlSqlParser.FREELIST); }
		public TerminalNode FREELIST(int i) {
			return getToken(PlSqlParser.FREELIST, i);
		}
		public List<TerminalNode> GROUPS() { return getTokens(PlSqlParser.GROUPS); }
		public TerminalNode GROUPS(int i) {
			return getToken(PlSqlParser.GROUPS, i);
		}
		public List<TerminalNode> OPTIMAL() { return getTokens(PlSqlParser.OPTIMAL); }
		public TerminalNode OPTIMAL(int i) {
			return getToken(PlSqlParser.OPTIMAL, i);
		}
		public List<TerminalNode> BUFFER_POOL() { return getTokens(PlSqlParser.BUFFER_POOL); }
		public TerminalNode BUFFER_POOL(int i) {
			return getToken(PlSqlParser.BUFFER_POOL, i);
		}
		public List<TerminalNode> FLASH_CACHE() { return getTokens(PlSqlParser.FLASH_CACHE); }
		public TerminalNode FLASH_CACHE(int i) {
			return getToken(PlSqlParser.FLASH_CACHE, i);
		}
		public List<TerminalNode> ENCRYPT() { return getTokens(PlSqlParser.ENCRYPT); }
		public TerminalNode ENCRYPT(int i) {
			return getToken(PlSqlParser.ENCRYPT, i);
		}
		public List<Size_clauseContext> size_clause() {
			return getRuleContexts(Size_clauseContext.class);
		}
		public Size_clauseContext size_clause(int i) {
			return getRuleContext(Size_clauseContext.class,i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> KEEP() { return getTokens(PlSqlParser.KEEP); }
		public TerminalNode KEEP(int i) {
			return getToken(PlSqlParser.KEEP, i);
		}
		public List<TerminalNode> RECYCLE() { return getTokens(PlSqlParser.RECYCLE); }
		public TerminalNode RECYCLE(int i) {
			return getToken(PlSqlParser.RECYCLE, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(PlSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(PlSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> NONE() { return getTokens(PlSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(PlSqlParser.NONE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(PlSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(PlSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_clause; }
	}

	public final Storage_clauseContext storage_clause() throws RecognitionException {
		Storage_clauseContext _localctx = new Storage_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_storage_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4752);
			match(STORAGE);
			setState(4753);
			match(LEFT_PAREN);
			setState(4777); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4777);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INITIAL:
					{
					setState(4754);
					match(INITIAL);
					setState(4755);
					((Storage_clauseContext)_localctx).initial_size = size_clause();
					}
					break;
				case NEXT:
					{
					setState(4756);
					match(NEXT);
					setState(4757);
					((Storage_clauseContext)_localctx).next_size = size_clause();
					}
					break;
				case MINEXTENTS:
					{
					setState(4758);
					match(MINEXTENTS);
					setState(4759);
					((Storage_clauseContext)_localctx).minextents = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						((Storage_clauseContext)_localctx).minextents = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					setState(4760);
					match(PCTINCREASE);
					setState(4761);
					((Storage_clauseContext)_localctx).pctincrease = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					setState(4762);
					match(FREELISTS);
					setState(4763);
					((Storage_clauseContext)_localctx).freelists = match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					setState(4764);
					match(FREELIST);
					setState(4765);
					match(GROUPS);
					setState(4766);
					((Storage_clauseContext)_localctx).freelist_groups = match(UNSIGNED_INTEGER);
					}
					break;
				case OPTIMAL:
					{
					setState(4767);
					match(OPTIMAL);
					setState(4770);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(4768);
						size_clause();
						}
						break;
					case NULL:
						{
						setState(4769);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case BUFFER_POOL:
					{
					setState(4772);
					match(BUFFER_POOL);
					setState(4773);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					setState(4774);
					match(FLASH_CACHE);
					setState(4775);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case ENCRYPT:
					{
					setState(4776);
					match(ENCRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4779); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BUFFER_POOL || ((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (ENCRYPT - 176)) | (1L << (FLASH_CACHE - 176)) | (1L << (FREELIST - 176)) | (1L << (FREELISTS - 176)))) != 0) || _la==INITIAL || _la==MINEXTENTS || _la==NEXT || _la==OPTIMAL || _la==PCTINCREASE );
			setState(4781);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode SORT() { return getToken(PlSqlParser.SORT, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ENCRYPT() { return getToken(PlSqlParser.ENCRYPT, 0); }
		public Encryption_specContext encryption_spec() {
			return getRuleContext(Encryption_specContext.class,0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return getRuleContext(Inline_ref_constraintContext.class,0);
		}
		public TerminalNode VISIBLE() { return getToken(PlSqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(PlSqlParser.INVISIBLE, 0); }
		public TerminalNode GENERATED() { return getToken(PlSqlParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(PlSqlParser.IDENTITY, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public TerminalNode ALWAYS() { return getToken(PlSqlParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Identity_optionsContext identity_options() {
			return getRuleContext(Identity_optionsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4783);
			column_name();
			setState(4785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(4784);
				datatype();
				}
				break;
			}
			setState(4788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORT) {
				{
				setState(4787);
				match(SORT);
				}
			}

			setState(4791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INVISIBLE || _la==VISIBLE) {
				{
				setState(4790);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4817);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				{
				setState(4793);
				match(DEFAULT);
				setState(4796);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(4794);
					match(ON);
					setState(4795);
					match(NULL);
					}
				}

				setState(4798);
				expression();
				}
				break;
			case GENERATED:
				{
				{
				setState(4799);
				match(GENERATED);
				setState(4807);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(4800);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(4801);
					match(BY);
					setState(4802);
					match(DEFAULT);
					setState(4805);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(4803);
						match(ON);
						setState(4804);
						match(NULL);
						}
					}

					}
					break;
				case AS:
					break;
				default:
					break;
				}
				setState(4809);
				match(AS);
				setState(4810);
				match(IDENTITY);
				setState(4815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4811);
					match(LEFT_PAREN);
					setState(4812);
					identity_options();
					setState(4813);
					match(RIGHT_PAREN);
					}
				}

				}
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHECK:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENCRYPT:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FOREIGN:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIMARY:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCES:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SCOPE:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUPPLEMENTAL:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNIQUE:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WITH:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case PERIOD:
			case DELIMITED_ID:
			case RIGHT_PAREN:
			case INTRODUCER:
			case REGULAR_ID:
				break;
			default:
				break;
			}
			setState(4821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPT) {
				{
				setState(4819);
				match(ENCRYPT);
				setState(4820);
				encryption_spec();
				}
			}

			setState(4829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				setState(4824); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4823);
						inline_constraint();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4826); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,611,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(4828);
				inline_ref_constraint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Virtual_column_definitionContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public TerminalNode SORT() { return getToken(PlSqlParser.SORT, 0); }
		public TerminalNode GENERATED() { return getToken(PlSqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(PlSqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(PlSqlParser.VIRTUAL, 0); }
		public Evaluation_edition_clauseContext evaluation_edition_clause() {
			return getRuleContext(Evaluation_edition_clauseContext.class,0);
		}
		public Unusable_editions_clauseContext unusable_editions_clause() {
			return getRuleContext(Unusable_editions_clauseContext.class,0);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public TerminalNode VISIBLE() { return getToken(PlSqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(PlSqlParser.INVISIBLE, 0); }
		public Virtual_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_virtual_column_definition; }
	}

	public final Virtual_column_definitionContext virtual_column_definition() throws RecognitionException {
		Virtual_column_definitionContext _localctx = new Virtual_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_virtual_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4831);
			column_name();
			setState(4833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BOOLEAN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (CHARACTER - 72)) | (1L << (CHAR - 72)) | (1L << (CLOB - 72)) | (1L << (DATE - 72)) | (1L << (DAY - 72)) | (1L << (DEC - 72)) | (1L << (DECIMAL - 72)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (DOUBLE - 161)) | (1L << (DSINTERVAL_UNCONSTRAINED - 161)) | (1L << (FLOAT - 161)))) != 0) || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (HOUR - 240)) | (1L << (INTEGER - 240)) | (1L << (INTERVAL - 240)) | (1L << (INT - 240)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (LONG - 320)) | (1L << (MINUTE - 320)) | (1L << (MLSLABEL - 320)) | (1L << (MONTH - 320)) | (1L << (NATURAL - 320)) | (1L << (NATURALN - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NUMBER - 394)) | (1L << (NUMERIC - 394)) | (1L << (NVARCHAR2 - 394)) | (1L << (PLS_INTEGER - 394)) | (1L << (POSITIVEN - 394)) | (1L << (POSITIVE - 394)))) != 0) || ((((_la - 474)) & ~0x3f) == 0 && ((1L << (_la - 474)) & ((1L << (RAW - 474)) | (1L << (REAL - 474)) | (1L << (ROWID - 474)) | (1L << (SECOND - 474)))) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (SIGNTYPE - 549)) | (1L << (SIMPLE_INTEGER - 549)) | (1L << (SMALLINT - 549)) | (1L << (STRING - 549)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 549)) | (1L << (TIMESTAMP - 549)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 549)) | (1L << (TIMESTAMP_UNCONSTRAINED - 549)) | (1L << (TIMEZONE_ABBR - 549)) | (1L << (TIMEZONE_HOUR - 549)) | (1L << (TIMEZONE_MINUTE - 549)) | (1L << (TIMEZONE_REGION - 549)))) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & ((1L << (UROWID - 637)) | (1L << (VARCHAR2 - 637)) | (1L << (VARCHAR - 637)) | (1L << (YEAR - 637)) | (1L << (YMINTERVAL_UNCONSTRAINED - 637)))) != 0)) {
				{
				setState(4832);
				datatype();
				}
			}

			setState(4836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SORT) {
				{
				setState(4835);
				match(SORT);
				}
			}

			setState(4839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INVISIBLE || _la==VISIBLE) {
				{
				setState(4838);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GENERATED) {
				{
				setState(4841);
				match(GENERATED);
				setState(4842);
				match(ALWAYS);
				}
			}

			setState(4845);
			match(AS);
			setState(4846);
			match(LEFT_PAREN);
			setState(4847);
			match(RIGHT_PAREN);
			setState(4849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VIRTUAL) {
				{
				setState(4848);
				match(VIRTUAL);
				}
			}

			setState(4852);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EVALUATION) {
				{
				setState(4851);
				evaluation_edition_clause();
				}
			}

			setState(4855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNUSABLE) {
				{
				setState(4854);
				unusable_editions_clause();
				}
			}

			setState(4860);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,620,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4857);
					inline_constraint();
					}
					} 
				}
				setState(4862);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,620,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Period_definitionContext extends ParserRuleContext {
		public Column_nameContext valid_time_column;
		public Column_nameContext start_time_column;
		public Column_nameContext end_time_column;
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Period_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_period_definition; }
	}

	public final Period_definitionContext period_definition() throws RecognitionException {
		Period_definitionContext _localctx = new Period_definitionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_period_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4863);
			match(PERIOD);
			setState(4864);
			match(FOR);
			setState(4865);
			((Period_definitionContext)_localctx).valid_time_column = column_name();
			setState(4870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				{
				setState(4866);
				((Period_definitionContext)_localctx).start_time_column = column_name();
				setState(4867);
				match(COMMA);
				setState(4868);
				((Period_definitionContext)_localctx).end_time_column = column_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Supplemental_logging_propsContext extends ParserRuleContext {
		public TerminalNode SUPPLEMENTAL() { return getToken(PlSqlParser.SUPPLEMENTAL, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public Supplemental_log_grp_clauseContext supplemental_log_grp_clause() {
			return getRuleContext(Supplemental_log_grp_clauseContext.class,0);
		}
		public Supplemental_id_key_clauseContext supplemental_id_key_clause() {
			return getRuleContext(Supplemental_id_key_clauseContext.class,0);
		}
		public Supplemental_logging_propsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_logging_props; }
	}

	public final Supplemental_logging_propsContext supplemental_logging_props() throws RecognitionException {
		Supplemental_logging_propsContext _localctx = new Supplemental_logging_propsContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_supplemental_logging_props);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4872);
			match(SUPPLEMENTAL);
			setState(4873);
			match(LOG);
			setState(4876);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				{
				setState(4874);
				supplemental_log_grp_clause();
				}
				break;
			case DATA:
				{
				setState(4875);
				supplemental_id_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Supplemental_log_grp_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public Log_group_nameContext log_group_name() {
			return getRuleContext(Log_group_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_loggedContext> column_logged() {
			return getRuleContexts(Column_loggedContext.class);
		}
		public Column_loggedContext column_logged(int i) {
			return getRuleContext(Column_loggedContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode ALWAYS() { return getToken(PlSqlParser.ALWAYS, 0); }
		public Supplemental_log_grp_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_log_grp_clause; }
	}

	public final Supplemental_log_grp_clauseContext supplemental_log_grp_clause() throws RecognitionException {
		Supplemental_log_grp_clauseContext _localctx = new Supplemental_log_grp_clauseContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_supplemental_log_grp_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4878);
			match(GROUP);
			setState(4879);
			log_group_name();
			setState(4880);
			match(LEFT_PAREN);
			setState(4881);
			column_logged();
			setState(4886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4882);
				match(COMMA);
				setState(4883);
				column_logged();
				}
				}
				setState(4888);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4889);
			match(RIGHT_PAREN);
			setState(4891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALWAYS) {
				{
				setState(4890);
				match(ALWAYS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Supplemental_id_key_clauseContext extends ParserRuleContext {
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public List<TerminalNode> ALL() { return getTokens(PlSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(PlSqlParser.ALL, i);
		}
		public List<TerminalNode> PRIMARY() { return getTokens(PlSqlParser.PRIMARY); }
		public TerminalNode PRIMARY(int i) {
			return getToken(PlSqlParser.PRIMARY, i);
		}
		public List<TerminalNode> KEY() { return getTokens(PlSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(PlSqlParser.KEY, i);
		}
		public List<TerminalNode> UNIQUE() { return getTokens(PlSqlParser.UNIQUE); }
		public TerminalNode UNIQUE(int i) {
			return getToken(PlSqlParser.UNIQUE, i);
		}
		public List<TerminalNode> FOREIGN() { return getTokens(PlSqlParser.FOREIGN); }
		public TerminalNode FOREIGN(int i) {
			return getToken(PlSqlParser.FOREIGN, i);
		}
		public Supplemental_id_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_supplemental_id_key_clause; }
	}

	public final Supplemental_id_key_clauseContext supplemental_id_key_clause() throws RecognitionException {
		Supplemental_id_key_clauseContext _localctx = new Supplemental_id_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_supplemental_id_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4893);
			match(DATA);
			setState(4894);
			match(LEFT_PAREN);
			setState(4901); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4901);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(4895);
					match(ALL);
					}
					break;
				case PRIMARY:
					{
					setState(4896);
					match(PRIMARY);
					setState(4897);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(4898);
					match(UNIQUE);
					}
					break;
				case FOREIGN:
					{
					setState(4899);
					match(FOREIGN);
					setState(4900);
					match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4903); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALL || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE );
			setState(4905);
			match(RIGHT_PAREN);
			setState(4906);
			match(COLUMNS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_loggedContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public Column_loggedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_logged; }
	}

	public final Column_loggedContext column_logged() throws RecognitionException {
		Column_loggedContext _localctx = new Column_loggedContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_column_logged);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4908);
			column_name();
			setState(4911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(4909);
				match(NO);
				setState(4910);
				match(LOG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Evaluation_edition_clauseContext extends ParserRuleContext {
		public TerminalNode EVALUATION() { return getToken(PlSqlParser.EVALUATION, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode EDITION() { return getToken(PlSqlParser.EDITION, 0); }
		public Edition_nameContext edition_name() {
			return getRuleContext(Edition_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Evaluation_edition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_evaluation_edition_clause; }
	}

	public final Evaluation_edition_clauseContext evaluation_edition_clause() throws RecognitionException {
		Evaluation_edition_clauseContext _localctx = new Evaluation_edition_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_evaluation_edition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4913);
			match(EVALUATION);
			setState(4914);
			match(USING);
			setState(4921);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(4915);
				match(CURRENT);
				setState(4916);
				match(EDITION);
				}
				break;
			case EDITION:
				{
				setState(4917);
				match(EDITION);
				setState(4918);
				edition_name();
				}
				break;
			case NULL:
				{
				setState(4919);
				match(NULL);
				setState(4920);
				match(EDITION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Edition_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Edition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edition_name; }
	}

	public final Edition_nameContext edition_name() throws RecognitionException {
		Edition_nameContext _localctx = new Edition_nameContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_edition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4923);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unusable_editions_clauseContext extends ParserRuleContext {
		public TerminalNode UNUSABLE() { return getToken(PlSqlParser.UNUSABLE, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode EDITION() { return getToken(PlSqlParser.EDITION, 0); }
		public Edition_nameContext edition_name() {
			return getRuleContext(Edition_nameContext.class,0);
		}
		public Unusable_editions_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unusable_editions_clause; }
	}

	public final Unusable_editions_clauseContext unusable_editions_clause() throws RecognitionException {
		Unusable_editions_clauseContext _localctx = new Unusable_editions_clauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_unusable_editions_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			match(UNUSABLE);
			setState(4926);
			match(BEFORE);
			setState(4931);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(4927);
				match(CURRENT);
				setState(4928);
				match(EDITION);
				}
				break;
			case EDITION:
				{
				setState(4929);
				match(EDITION);
				setState(4930);
				edition_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identity_optionsContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public Identity_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identity_options; }
	}

	public final Identity_optionsContext identity_options() throws RecognitionException {
		Identity_optionsContext _localctx = new Identity_optionsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_identity_options);
		int _la;
		try {
			setState(4957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(4937);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENT:
					{
					setState(4933);
					match(INCREMENT);
					setState(4934);
					match(BY);
					}
					break;
				case START:
					{
					setState(4935);
					match(START);
					setState(4936);
					match(WITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4939);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4943);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(4940);
					match(MAXVALUE);
					setState(4941);
					match(UNSIGNED_INTEGER);
					}
					break;
				case NOMAXVALUE:
					{
					setState(4942);
					match(NOMAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MINVALUE:
			case NOMINVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4948);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(4945);
					match(MINVALUE);
					setState(4946);
					match(UNSIGNED_INTEGER);
					}
					break;
				case NOMINVALUE:
					{
					setState(4947);
					match(NOMINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CYCLE:
			case NOCYCLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4950);
				_la = _input.LA(1);
				if ( !(_la==CYCLE || _la==NOCYCLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CACHE:
			case NOCACHE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4954);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CACHE:
					{
					setState(4951);
					match(CACHE);
					setState(4952);
					match(UNSIGNED_INTEGER);
					}
					break;
				case NOCACHE:
					{
					setState(4953);
					match(NOCACHE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NOORDER:
			case ORDER:
				enterOuterAlt(_localctx, 6);
				{
				setState(4956);
				_la = _input.LA(1);
				if ( !(_la==NOORDER || _la==ORDER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_specContext extends ParserRuleContext {
		public Token Encrypt_Algoritm;
		public Token Password;
		public Token Integrity_Algoritm;
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode IDENTIFIED() { return getToken(PlSqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode SALT() { return getToken(PlSqlParser.SALT, 0); }
		public List<TerminalNode> CHAR_STRING() { return getTokens(PlSqlParser.CHAR_STRING); }
		public TerminalNode CHAR_STRING(int i) {
			return getToken(PlSqlParser.CHAR_STRING, i);
		}
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public Encryption_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_spec; }
	}

	public final Encryption_specContext encryption_spec() throws RecognitionException {
		Encryption_specContext _localctx = new Encryption_specContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_encryption_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4959);
				match(USING);
				setState(4960);
				((Encryption_specContext)_localctx).Encrypt_Algoritm = match(CHAR_STRING);
				}
			}

			setState(4966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIED) {
				{
				setState(4963);
				match(IDENTIFIED);
				setState(4964);
				match(BY);
				setState(4965);
				((Encryption_specContext)_localctx).Password = match(CHAR_STRING);
				}
			}

			setState(4969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR_STRING) {
				{
				setState(4968);
				((Encryption_specContext)_localctx).Integrity_Algoritm = match(CHAR_STRING);
				}
			}

			setState(4975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				{
				setState(4972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4971);
					match(NO);
					}
				}

				setState(4974);
				match(SALT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Inline_ref_constraintContext extends ParserRuleContext {
		public TerminalNode SCOPE() { return getToken(PlSqlParser.SCOPE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Table_fullnameContext table_fullname() {
			return getRuleContext(Table_fullnameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public Inline_ref_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_ref_constraint; }
	}

	public final Inline_ref_constraintContext inline_ref_constraint() throws RecognitionException {
		Inline_ref_constraintContext _localctx = new Inline_ref_constraintContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_inline_ref_constraint);
		int _la;
		try {
			setState(4990);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4977);
				match(SCOPE);
				setState(4978);
				match(IS);
				setState(4979);
				table_fullname();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(4980);
				match(WITH);
				setState(4981);
				match(ROWID);
				}
				break;
			case CONSTRAINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(4982);
				match(CONSTRAINT);
				setState(4984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(4983);
					constraint_name();
					}
				}

				setState(4986);
				references_clause();
				setState(4988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					setState(4987);
					constraint_state();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Out_of_line_ref_constraintContext extends ParserRuleContext {
		public TerminalNode SCOPE() { return getToken(PlSqlParser.SCOPE, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Table_fullnameContext table_fullname() {
			return getRuleContext(Table_fullnameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode FOREIGN() { return getToken(PlSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Constraint_stateContext constraint_state() {
			return getRuleContext(Constraint_stateContext.class,0);
		}
		public Out_of_line_ref_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_ref_constraint; }
	}

	public final Out_of_line_ref_constraintContext out_of_line_ref_constraint() throws RecognitionException {
		Out_of_line_ref_constraintContext _localctx = new Out_of_line_ref_constraintContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_out_of_line_ref_constraint);
		int _la;
		try {
			setState(5018);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCOPE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4992);
				match(SCOPE);
				setState(4993);
				match(FOR);
				setState(4994);
				match(LEFT_PAREN);
				setState(4995);
				column_name();
				setState(4996);
				match(RIGHT_PAREN);
				setState(4997);
				match(IS);
				setState(4998);
				table_fullname();
				}
				break;
			case REF:
				enterOuterAlt(_localctx, 2);
				{
				setState(5000);
				match(REF);
				setState(5001);
				match(LEFT_PAREN);
				setState(5002);
				column_name();
				setState(5003);
				match(RIGHT_PAREN);
				setState(5004);
				match(WITH);
				setState(5005);
				match(ROWID);
				}
				break;
			case CONSTRAINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5007);
				match(CONSTRAINT);
				setState(5009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
					{
					setState(5008);
					constraint_name();
					}
				}

				setState(5011);
				match(FOREIGN);
				setState(5012);
				match(KEY);
				setState(5013);
				paren_column_list();
				setState(5014);
				references_clause();
				setState(5016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
				case 1:
					{
					setState(5015);
					constraint_state();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Size_clauseContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_size_clause; }
	}

	public final Size_clauseContext size_clause() throws RecognitionException {
		Size_clauseContext _localctx = new Size_clauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_size_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5020);
			match(UNSIGNED_INTEGER);
			setState(5022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGULAR_ID) {
				{
				setState(5021);
				match(REGULAR_ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_drop_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5024);
			match(DROP);
			setState(5025);
			match(TABLE);
			setState(5026);
			tableview_name();
			setState(5027);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_columnContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column; }
	}

	public final Comment_on_columnContext comment_on_column() throws RecognitionException {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_comment_on_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5029);
			match(COMMENT);
			setState(5030);
			match(ON);
			setState(5031);
			match(COLUMN);
			setState(5032);
			tableview_name();
			setState(5033);
			match(PERIOD);
			setState(5034);
			column_name();
			setState(5035);
			match(IS);
			setState(5036);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public Schema_nameContext objectSchema;
		public Schema_object_nameContext objectName;
		public Schema_nameContext schema;
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PUBLIC() { return getToken(PlSqlParser.PUBLIC, 0); }
		public TerminalNode SYNONYM() { return getToken(PlSqlParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return getRuleContext(Synonym_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_create_synonym);
		int _la;
		try {
			setState(5080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5038);
				match(CREATE);
				setState(5041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(5039);
					match(OR);
					setState(5040);
					match(REPLACE);
					}
				}

				setState(5043);
				match(PUBLIC);
				setState(5044);
				match(SYNONYM);
				setState(5045);
				synonym_name();
				setState(5046);
				match(FOR);
				setState(5050);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
				case 1:
					{
					setState(5047);
					((Create_synonymContext)_localctx).objectSchema = schema_name();
					setState(5048);
					match(PERIOD);
					}
					break;
				}
				setState(5052);
				((Create_synonymContext)_localctx).objectName = schema_object_name();
				setState(5055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(5053);
					match(AT_SIGN);
					setState(5054);
					link_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5057);
				match(CREATE);
				setState(5060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(5058);
					match(OR);
					setState(5059);
					match(REPLACE);
					}
				}

				setState(5062);
				match(SYNONYM);
				setState(5066);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
				case 1:
					{
					setState(5063);
					((Create_synonymContext)_localctx).schema = schema_name();
					setState(5064);
					match(PERIOD);
					}
					break;
				}
				setState(5068);
				synonym_name();
				setState(5069);
				match(FOR);
				setState(5073);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
				case 1:
					{
					setState(5070);
					((Create_synonymContext)_localctx).objectSchema = schema_name();
					setState(5071);
					match(PERIOD);
					}
					break;
				}
				setState(5075);
				((Create_synonymContext)_localctx).objectName = schema_object_name();
				setState(5078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(5076);
					match(AT_SIGN);
					setState(5077);
					link_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_tableContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table; }
	}

	public final Comment_on_tableContext comment_on_table() throws RecognitionException {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_comment_on_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5082);
			match(COMMENT);
			setState(5083);
			match(ON);
			setState(5084);
			match(TABLE);
			setState(5085);
			tableview_name();
			setState(5086);
			match(IS);
			setState(5087);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Add_constraintContext add_constraint() {
			return getRuleContext(Add_constraintContext.class,0);
		}
		public Drop_constraintContext drop_constraint() {
			return getRuleContext(Drop_constraintContext.class,0);
		}
		public Enable_constraintContext enable_constraint() {
			return getRuleContext(Enable_constraintContext.class,0);
		}
		public Disable_constraintContext disable_constraint() {
			return getRuleContext(Disable_constraintContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5089);
			match(ALTER);
			setState(5090);
			match(TABLE);
			setState(5091);
			tableview_name();
			setState(5096);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(5092);
				add_constraint();
				}
				break;
			case DROP:
				{
				setState(5093);
				drop_constraint();
				}
				break;
			case ENABLE:
				{
				setState(5094);
				enable_constraint();
				}
				break;
			case DISABLE:
				{
				setState(5095);
				disable_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_constraintContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return getRuleContext(Primary_key_clauseContext.class,0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return getRuleContext(Foreign_key_clauseContext.class,0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return getRuleContext(Unique_key_clauseContext.class,0);
		}
		public Check_constraintContext check_constraint() {
			return getRuleContext(Check_constraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_constraint; }
	}

	public final Add_constraintContext add_constraint() throws RecognitionException {
		Add_constraintContext _localctx = new Add_constraintContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_add_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(ADD);
			setState(5101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(5099);
				match(CONSTRAINT);
				setState(5100);
				constraint_name();
				}
			}

			setState(5107);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				setState(5103);
				primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				setState(5104);
				foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				setState(5105);
				unique_key_clause();
				}
				break;
			case CHECK:
				{
				setState(5106);
				check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_constraintContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_constraint; }
	}

	public final Check_constraintContext check_constraint() throws RecognitionException {
		Check_constraintContext _localctx = new Check_constraintContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_check_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5109);
			match(CHECK);
			setState(5110);
			match(LEFT_PAREN);
			setState(5111);
			condition();
			setState(5112);
			match(RIGHT_PAREN);
			setState(5114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5113);
				match(DISABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_constraintContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Drop_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_constraint; }
	}

	public final Drop_constraintContext drop_constraint() throws RecognitionException {
		Drop_constraintContext _localctx = new Drop_constraintContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_drop_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5116);
			match(DROP);
			setState(5117);
			match(CONSTRAINT);
			setState(5118);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_constraintContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Enable_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_constraint; }
	}

	public final Enable_constraintContext enable_constraint() throws RecognitionException {
		Enable_constraintContext _localctx = new Enable_constraintContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_enable_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5120);
			match(ENABLE);
			setState(5121);
			match(CONSTRAINT);
			setState(5122);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_constraintContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Disable_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_constraint; }
	}

	public final Disable_constraintContext disable_constraint() throws RecognitionException {
		Disable_constraintContext _localctx = new Disable_constraintContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_disable_constraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5124);
			match(DISABLE);
			setState(5125);
			match(CONSTRAINT);
			setState(5126);
			constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_key_clauseContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(PlSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return getRuleContext(On_delete_clauseContext.class,0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_clause; }
	}

	public final Foreign_key_clauseContext foreign_key_clause() throws RecognitionException {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_foreign_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5128);
			match(FOREIGN);
			setState(5129);
			match(KEY);
			setState(5130);
			paren_column_list();
			setState(5131);
			references_clause();
			setState(5133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5132);
				on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(PlSqlParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_references_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5135);
			match(REFERENCES);
			setState(5136);
			tableview_name();
			setState(5137);
			paren_column_list();
			setState(5145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(5138);
				match(ON);
				setState(5139);
				match(DELETE);
				setState(5143);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASCADE:
					{
					setState(5140);
					match(CASCADE);
					}
					break;
				case SET:
					{
					setState(5141);
					match(SET);
					setState(5142);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_delete_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_clause; }
	}

	public final On_delete_clauseContext on_delete_clause() throws RecognitionException {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_on_delete_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5147);
			match(ON);
			setState(5148);
			match(DELETE);
			setState(5152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(5149);
				match(CASCADE);
				}
				break;
			case SET:
				{
				setState(5150);
				match(SET);
				setState(5151);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_key_clauseContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_key_clause; }
	}

	public final Unique_key_clauseContext unique_key_clause() throws RecognitionException {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_unique_key_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5154);
			match(UNIQUE);
			setState(5155);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_key_clauseContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_key_clause; }
	}

	public final Primary_key_clauseContext primary_key_clause() throws RecognitionException {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_primary_key_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5157);
			match(PRIMARY);
			setState(5158);
			match(KEY);
			setState(5159);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_blockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return getRuleContext(Seq_of_declare_specsContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_block; }
	}

	public final Anonymous_blockContext anonymous_block() throws RecognitionException {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_anonymous_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(5161);
				match(DECLARE);
				setState(5162);
				seq_of_declare_specs();
				}
			}

			setState(5165);
			match(BEGIN);
			setState(5166);
			seq_of_statements();
			setState(5173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(5167);
				match(EXCEPTION);
				setState(5169); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5168);
					exception_handler();
					}
					}
					setState(5171); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(5175);
			match(END);
			setState(5176);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5178);
			match(AUTHID);
			setState(5179);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5181);
			identifier();
			setState(5182);
			match(EQUALS_OP);
			setState(5183);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5185);
			match(LANGUAGE);
			setState(5188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(5186);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(5187);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5190);
			match(JAVA);
			setState(5191);
			match(NAME);
			setState(5192);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			match(C_LETTER);
			setState(5197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(5195);
				match(NAME);
				setState(5196);
				match(CHAR_STRING);
				}
			}

			setState(5199);
			match(LIBRARY);
			setState(5200);
			identifier();
			setState(5202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(5201);
				c_agent_in_clause();
				}
			}

			setState(5206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5204);
				match(WITH);
				setState(5205);
				match(CONTEXT);
				}
			}

			setState(5209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(5208);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_c_agent_in_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5211);
			match(AGENT);
			setState(5212);
			match(IN);
			setState(5213);
			match(LEFT_PAREN);
			setState(5214);
			expressions();
			setState(5215);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_c_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5217);
			match(PARAMETERS);
			setState(5218);
			match(LEFT_PAREN);
			setState(5223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5219);
				expressions();
				}
				break;
			case PERIOD:
				{
				setState(5220);
				match(PERIOD);
				setState(5221);
				match(PERIOD);
				setState(5222);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5225);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PlSqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(PlSqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(PlSqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(PlSqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5227);
			parameter_name();
			setState(5231);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5228);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(5233);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,672,_ctx);
			}
			setState(5235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(5234);
				type_spec();
				}
				break;
			}
			setState(5238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5237);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5240);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5241);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_declare_specsContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Seq_of_declare_specsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_declare_specs; }
	}

	public final Seq_of_declare_specsContext seq_of_declare_specs() throws RecognitionException {
		Seq_of_declare_specsContext _localctx = new Seq_of_declare_specsContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_seq_of_declare_specs);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5244); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(5243);
					declare_spec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5246); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,675,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_declare_spec);
		try {
			setState(5258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5248);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5249);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5250);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5251);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5252);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5253);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5254);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5255);
				function_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5256);
				procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5257);
				function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5260);
			identifier();
			setState(5262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5261);
				match(CONSTANT);
				}
				break;
			}
			setState(5264);
			type_spec();
			setState(5267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5265);
				match(NOT);
				setState(5266);
				match(NULL);
				}
			}

			setState(5270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5269);
				default_value_part();
				}
			}

			setState(5272);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5274);
			match(SUBTYPE);
			setState(5275);
			identifier();
			setState(5276);
			match(IS);
			setState(5277);
			type_spec();
			setState(5283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(5278);
				match(RANGE);
				setState(5279);
				expression();
				setState(5280);
				match(DOUBLE_PERIOD);
				setState(5281);
				expression();
				}
			}

			setState(5287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5285);
				match(NOT);
				setState(5286);
				match(NULL);
				}
			}

			setState(5289);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5291);
			match(CURSOR);
			setState(5292);
			identifier();
			setState(5304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5293);
				match(LEFT_PAREN);
				setState(5298); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5295);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5294);
						match(COMMA);
						}
					}

					setState(5297);
					parameter_spec();
					}
					}
					setState(5300); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
				setState(5302);
				match(RIGHT_PAREN);
				}
			}

			setState(5308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(5306);
				match(RETURN);
				setState(5307);
				type_spec();
				}
			}

			setState(5312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(5310);
				match(IS);
				setState(5311);
				select_statement();
				}
			}

			setState(5314);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5316);
			parameter_name();
			setState(5321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(5318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(5317);
					match(IN);
					}
				}

				setState(5320);
				type_spec();
				}
				break;
			}
			setState(5324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5323);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5326);
			identifier();
			setState(5327);
			match(EXCEPTION);
			setState(5328);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdentifierContext id1;
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5330);
			match(PRAGMA);
			setState(5361);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(5331);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(5332);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(5333);
				match(EXCEPTION_INIT);
				setState(5334);
				match(LEFT_PAREN);
				setState(5335);
				exception_name();
				setState(5336);
				match(COMMA);
				setState(5337);
				numeric_negative();
				setState(5338);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(5340);
				match(INLINE);
				setState(5341);
				match(LEFT_PAREN);
				setState(5342);
				((Pragma_declarationContext)_localctx).id1 = identifier();
				setState(5343);
				match(COMMA);
				setState(5344);
				expression();
				setState(5345);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(5347);
				match(RESTRICT_REFERENCES);
				setState(5348);
				match(LEFT_PAREN);
				setState(5351);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5349);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(5350);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5355); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5353);
					match(COMMA);
					setState(5354);
					identifier();
					}
					}
					setState(5357); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(5359);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5363);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_defContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_def; }
	}

	public final Record_type_defContext record_type_def() throws RecognitionException {
		Record_type_defContext _localctx = new Record_type_defContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_record_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5365);
			match(RECORD);
			setState(5366);
			match(LEFT_PAREN);
			setState(5371); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5367);
					match(COMMA);
					}
				}

				setState(5370);
				field_spec();
				}
				}
				setState(5373); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			setState(5375);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5377);
			column_name();
			setState(5379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				{
				setState(5378);
				type_spec();
				}
				break;
			}
			setState(5383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5381);
				match(NOT);
				setState(5382);
				match(NULL);
				}
			}

			setState(5386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(5385);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ref_cursor_type_defContext extends ParserRuleContext {
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ref_cursor_type_def; }
	}

	public final Ref_cursor_type_defContext ref_cursor_type_def() throws RecognitionException {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_ref_cursor_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5388);
			match(REF);
			setState(5389);
			match(CURSOR);
			setState(5392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(5390);
				match(RETURN);
				setState(5391);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_declarationContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Table_type_defContext table_type_def() {
			return getRuleContext(Table_type_defContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Record_type_defContext record_type_def() {
			return getRuleContext(Record_type_defContext.class,0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return getRuleContext(Ref_cursor_type_defContext.class,0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_declaration; }
	}

	public final Type_declarationContext type_declaration() throws RecognitionException {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_type_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5394);
			match(TYPE);
			setState(5395);
			identifier();
			setState(5396);
			match(IS);
			setState(5401);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(5397);
				table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(5398);
				varray_type_def();
				}
				break;
			case RECORD:
				{
				setState(5399);
				record_type_def();
				}
				break;
			case REF:
				{
				setState(5400);
				ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5403);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_def; }
	}

	public final Table_type_defContext table_type_def() throws RecognitionException {
		Table_type_defContext _localctx = new Table_type_defContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_table_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5405);
			match(TABLE);
			setState(5406);
			match(OF);
			setState(5407);
			type_spec();
			setState(5409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEXED || _la==INDEX) {
				{
				setState(5408);
				table_indexed_by_part();
				}
			}

			setState(5413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5411);
				match(NOT);
				setState(5412);
				match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(5415);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(5416);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5419);
			match(BY);
			setState(5420);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5425);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(5422);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(5423);
				match(VARYING);
				setState(5424);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5427);
			match(LEFT_PAREN);
			setState(5428);
			expression();
			setState(5429);
			match(RIGHT_PAREN);
			setState(5430);
			match(OF);
			setState(5431);
			type_spec();
			setState(5434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				setState(5432);
				match(NOT);
				setState(5433);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(PlSqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(PlSqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5440); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5440);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
					case 1:
						{
						setState(5436);
						statement();
						setState(5437);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMICOLON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5439);
						label_declaration();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5442); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,706,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5444);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(5445);
			match(LESS_THAN_OP);
			setState(5446);
			label_name();
			setState(5447);
			match(GREATER_THAN_OP);
			setState(5448);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return getRuleContext(Pipe_row_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_statement);
		try {
			setState(5470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5450);
				match(CREATE);
				setState(5451);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5452);
				match(TRUNCATE);
				setState(5453);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5454);
				body();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5455);
				block();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5456);
				assignment_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5457);
				continue_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5458);
				exit_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5459);
				goto_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5460);
				if_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5461);
				loop_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5462);
				forall_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5463);
				null_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5464);
				raise_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5465);
				return_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5466);
				case_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5467);
				sql_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5468);
				function_call();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5469);
				pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5473); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5472);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(5475); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ACCOUNT) | (1L << ADD) | (1L << ADMIN) | (1L << ADMINISTER) | (1L << ADVANCED) | (1L << ADVISOR) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ALLOW) | (1L << ALTER) | (1L << ALWAYS) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ANYSCHEMA) | (1L << ARCHIVAL) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHENTICATED) | (1L << AUTHENTICATION) | (1L << AUTHID) | (1L << AUTOALLOCATE) | (1L << AUTO) | (1L << AUTOEXTEND) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BACKUP) | (1L << BASIC) | (1L << BASICFILE) | (1L << BATCH) | (1L << BECOME) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BIGFILE) | (1L << BINARY) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BUILD) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << CACHE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CAPACITY - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (CHUNK - 64)) | (1L << (CLASS - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTERING - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINER - 64)) | (1L << (CONTAINER_DATA - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CRITICAL - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATAFILE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DBA_RECYCLEBIN - 128)) | (1L << (DB_ROLE_CHANGE - 128)) | (1L << (DBTIMEZONE - 128)) | (1L << (DDL - 128)) | (1L << (DEBUG - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DECRYPT - 128)) | (1L << (DEDUPLICATE - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRABLE - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELEGATE - 128)) | (1L << (DELETE - 128)) | (1L << (DEPTH - 128)) | (1L << (DESC - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DIMENSION - 128)) | (1L << (DIRECTORY - 128)) | (1L << (DISABLE - 128)) | (1L << (DISALLOW - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DISTINGUISHED - 128)) | (1L << (DISTRIBUTE - 128)) | (1L << (DML - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUPLICATE - 128)) | (1L << (EACH - 128)) | (1L << (EDITIONABLE - 128)) | (1L << (EDITION - 128)) | (1L << (EDITIONING - 128)) | (1L << (EDITIONS - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPT - 128)) | (1L << (ENCRYPTION - 128)) | (1L << (END - 128)) | (1L << (ENTERPRISE - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EVALUATION - 128)) | (1L << (EXCEPT - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (EXECUTE - 192)) | (1L << (EXEMPT - 192)) | (1L << (EXISTS - 192)) | (1L << (EXIT - 192)) | (1L << (EXPIRE - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTENT - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTERNALLY - 192)) | (1L << (EXTRACT - 192)) | (1L << (FAILURE - 192)) | (1L << (FALSE - 192)) | (1L << (FETCH - 192)) | (1L << (FILESYSTEM_LIKE_LOGGING - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FIRST_VALUE - 192)) | (1L << (FLASHBACK - 192)) | (1L << (FLASH_CACHE - 192)) | (1L << (FLOAT - 192)) | (1L << (FOLDER - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FOLLOWS - 192)) | (1L << (FORALL - 192)) | (1L << (FORCE - 192)) | (1L << (FOREIGN - 192)) | (1L << (FOR - 192)) | (1L << (FREELIST - 192)) | (1L << (FREELISTS - 192)) | (1L << (FREEPOOLS - 192)) | (1L << (FROM - 192)) | (1L << (FULL - 192)) | (1L << (FUNCTION - 192)) | (1L << (GENERATED - 192)) | (1L << (GLOBAL - 192)) | (1L << (GLOBALLY - 192)) | (1L << (GOTO - 192)) | (1L << (GRANT - 192)) | (1L << (GROUP - 192)) | (1L << (GROUPING - 192)) | (1L << (GROUPS - 192)) | (1L << (GUARANTEE - 192)) | (1L << (HASH - 192)) | (1L << (HAVING - 192)) | (1L << (HEAP - 192)) | (1L << (HIDE - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HIGH - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTIFIED - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (IDENTITY - 192)) | (1L << (ID - 192)) | (1L << (IF - 192)) | (1L << (IGNORE - 192)) | (1L << (ILM - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (INCLUDE - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDENT - 192)) | (1L << (INDEXED - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXING - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDEXTYPE - 256)) | (1L << (INDICATOR - 256)) | (1L << (INDICES - 256)) | (1L << (INFINITE - 256)) | (1L << (INHERIT - 256)) | (1L << (IN - 256)) | (1L << (INITIAL - 256)) | (1L << (INITIALLY - 256)) | (1L << (INITRANS - 256)) | (1L << (INLINE - 256)) | (1L << (INMEMORY - 256)) | (1L << (INNER - 256)) | (1L << (INOUT - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECT - 256)) | (1L << (INTERVAL - 256)) | (1L << (INTERVLEAVED - 256)) | (1L << (INT - 256)) | (1L << (INTO - 256)) | (1L << (INVALIDATE - 256)) | (1L << (INVISIBLE - 256)) | (1L << (IS - 256)) | (1L << (ISOLATION - 256)) | (1L << (ITERATE - 256)) | (1L << (JAVA - 256)) | (1L << (JOB - 256)) | (1L << (JOIN - 256)) | (1L << (KEEP_DUPLICATES - 256)) | (1L << (KEEP - 256)) | (1L << (KEY - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LAST - 256)) | (1L << (LAST_VALUE - 256)) | (1L << (LEADING - 256)) | (1L << (LEFT - 256)) | (1L << (LESS - 256)) | (1L << (LEVEL - 256)) | (1L << (LEVELS - 256)) | (1L << (LIBRARY - 256)) | (1L << (LIKE2 - 256)) | (1L << (LIKE4 - 256)) | (1L << (LIKEC - 256)) | (1L << (LIKE - 256)) | (1L << (LIMIT - 256)) | (1L << (LINEAR - 256)) | (1L << (LINK - 256)) | (1L << (LIST - 256)) | (1L << (LOAD - 256)) | (1L << (LOB - 256)) | (1L << (LOBS - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCKED - 256)) | (1L << (LOCKING - 256)) | (1L << (LOCK - 256)) | (1L << (LOGGING - 256)) | (1L << (LOG - 256)) | (1L << (LOGMINING - 256)) | (1L << (LOGOFF - 256)) | (1L << (LOGON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (LONG - 320)) | (1L << (LOOP - 320)) | (1L << (LOW - 320)) | (1L << (MAIN - 320)) | (1L << (MANAGE - 320)) | (1L << (MANAGEMENT - 320)) | (1L << (MANUAL - 320)) | (1L << (MAP - 320)) | (1L << (MAPPING - 320)) | (1L << (MATCHED - 320)) | (1L << (MATERIALIZED - 320)) | (1L << (MAXSIZE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (MEASURE - 320)) | (1L << (MEASURES - 320)) | (1L << (MEDIUM - 320)) | (1L << (MEMBER - 320)) | (1L << (MEMCOMPRESS - 320)) | (1L << (MERGE - 320)) | (1L << (MINEXTENTS - 320)) | (1L << (MINIMUM - 320)) | (1L << (MINING - 320)) | (1L << (MINUS - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MLSLABEL - 320)) | (1L << (MODEL - 320)) | (1L << (MODE - 320)) | (1L << (MODIFICATION - 320)) | (1L << (MODIFY - 320)) | (1L << (MONTH - 320)) | (1L << (MONTHS - 320)) | (1L << (MOVEMENT - 320)) | (1L << (MULTISET - 320)) | (1L << (NAME - 320)) | (1L << (NAN - 320)) | (1L << (NATURAL - 320)) | (1L << (NATURALN - 320)) | (1L << (NAV - 320)) | (1L << (NCHAR_CS - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTED - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NOAUDIT - 320)) | (1L << (NOCACHE - 320)) | (1L << (NOCOMPRESS - 320)) | (1L << (NOCOPY - 320)) | (1L << (NOCYCLE - 320)) | (1L << (NOEDITIONABLE - 320)) | (1L << (NOENTITYESCAPING - 320)) | (1L << (NOGUARANTEE - 320)) | (1L << (NOKEEP - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOMAPPING - 320)) | (1L << (NOMAXVALUE - 320)) | (1L << (NOMINVALUE - 320)) | (1L << (NONEDITIONABLE - 320)) | (1L << (NONE - 320)) | (1L << (NO - 320)) | (1L << (NONSCHEMA - 320)) | (1L << (NOORDER - 320)) | (1L << (NOPARALLEL - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (NORELY - 384)) | (1L << (NOROWDEPENDENCIES - 384)) | (1L << (NOSCHEMACHECK - 384)) | (1L << (NOSORT - 384)) | (1L << (NOTIFICATION - 384)) | (1L << (NOT - 384)) | (1L << (NOVALIDATE - 384)) | (1L << (NOWAIT - 384)) | (1L << (NULL - 384)) | (1L << (NULLS - 384)) | (1L << (NUMBER - 384)) | (1L << (NUMERIC - 384)) | (1L << (NVARCHAR2 - 384)) | (1L << (OBJECT - 384)) | (1L << (OFFLINE - 384)) | (1L << (OFF - 384)) | (1L << (OF - 384)) | (1L << (OID - 384)) | (1L << (OLD - 384)) | (1L << (OLTP - 384)) | (1L << (ONLINE - 384)) | (1L << (ONLY - 384)) | (1L << (ON - 384)) | (1L << (OPEN - 384)) | (1L << (OPERATOR - 384)) | (1L << (OPTIMAL - 384)) | (1L << (OPTION - 384)) | (1L << (ORADATA - 384)) | (1L << (ORDER - 384)) | (1L << (ORDINALITY - 384)) | (1L << (ORGANIZATION - 384)) | (1L << (OR - 384)) | (1L << (OSERROR - 384)) | (1L << (OUTER - 384)) | (1L << (OUTLINE - 384)) | (1L << (OUT - 384)) | (1L << (OVERFLOW - 384)) | (1L << (OVER - 384)) | (1L << (OVERRIDING - 384)) | (1L << (PACKAGE - 384)) | (1L << (PARALLEL_ENABLE - 384)) | (1L << (PARALLEL - 384)) | (1L << (PARAMETERS - 384)) | (1L << (PARENT - 384)) | (1L << (PARTIAL - 384)) | (1L << (PARTITION - 384)) | (1L << (PARTITIONS - 384)) | (1L << (PASSING - 384)) | (1L << (PASSWORD - 384)) | (1L << (PATH - 384)) | (1L << (PCTFREE - 384)) | (1L << (PCTINCREASE - 384)) | (1L << (PCTTHRESHOLD - 384)) | (1L << (PCTUSED - 384)) | (1L << (PCTVERSION - 384)) | (1L << (PERCENT_FOUND - 384)) | (1L << (PERCENT_ISOPEN - 384)) | (1L << (PERCENT_NOTFOUND - 384)) | (1L << (PERCENT_ROWCOUNT - 384)) | (1L << (PERCENT_ROWTYPE - 384)) | (1L << (PERCENT_TYPE - 384)) | (1L << (PIPELINED - 384)) | (1L << (PIPE - 384)) | (1L << (PIVOT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (PLAN - 448)) | (1L << (PLS_INTEGER - 448)) | (1L << (PLUGGABLE - 448)) | (1L << (POLICY - 448)) | (1L << (POSITIVEN - 448)) | (1L << (POSITIVE - 448)) | (1L << (PRAGMA - 448)) | (1L << (PRECEDING - 448)) | (1L << (PRECISION - 448)) | (1L << (PRESENT - 448)) | (1L << (PRESERVE - 448)) | (1L << (PRIMARY - 448)) | (1L << (PRIORITY - 448)) | (1L << (PRIOR - 448)) | (1L << (PRIVILEGE - 448)) | (1L << (PRIVILEGES - 448)) | (1L << (PROCEDURE - 448)) | (1L << (PROCESS - 448)) | (1L << (PROFILE - 448)) | (1L << (PROGRAM - 448)) | (1L << (PUBLIC - 448)) | (1L << (PURGE - 448)) | (1L << (QUERY - 448)) | (1L << (QUOTA - 448)) | (1L << (RAISE - 448)) | (1L << (RANGE - 448)) | (1L << (RAW - 448)) | (1L << (READ - 448)) | (1L << (READS - 448)) | (1L << (REAL - 448)) | (1L << (RECORD - 448)) | (1L << (RECYCLE - 448)) | (1L << (REDACTION - 448)) | (1L << (REFERENCE - 448)) | (1L << (REFERENCES - 448)) | (1L << (REFERENCING - 448)) | (1L << (REF - 448)) | (1L << (REFRESH - 448)) | (1L << (REJECT - 448)) | (1L << (RELATIONAL - 448)) | (1L << (RELIES_ON - 448)) | (1L << (RELY - 448)) | (1L << (REMOVE - 448)) | (1L << (RENAME - 448)) | (1L << (REPLACE - 448)) | (1L << (REQUIRED - 448)) | (1L << (RESOURCE - 448)) | (1L << (RESPECT - 448)) | (1L << (RESTRICTED - 448)) | (1L << (RESTRICT_REFERENCES - 448)) | (1L << (RESULT_CACHE - 448)) | (1L << (RESULT - 448)) | (1L << (RESUMABLE - 448)) | (1L << (RETENTION - 448)) | (1L << (RETURNING - 448)) | (1L << (RETURN - 448)) | (1L << (REUSE - 448)) | (1L << (REVERSE - 448)) | (1L << (REVOKE - 448)) | (1L << (REWRITE - 448)) | (1L << (RIGHT - 448)) | (1L << (ROLE - 448)) | (1L << (ROLES - 448)) | (1L << (ROLLBACK - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (ROLLUP - 512)) | (1L << (ROWDEPENDENCIES - 512)) | (1L << (ROWID - 512)) | (1L << (ROW - 512)) | (1L << (ROWS - 512)) | (1L << (RULES - 512)) | (1L << (SALT - 512)) | (1L << (SAMPLE - 512)) | (1L << (SAVEPOINT - 512)) | (1L << (SAVE - 512)) | (1L << (SCHEDULER - 512)) | (1L << (SCHEMACHECK - 512)) | (1L << (SCHEMA - 512)) | (1L << (SCN - 512)) | (1L << (SCOPE - 512)) | (1L << (SEARCH - 512)) | (1L << (SECOND - 512)) | (1L << (SECUREFILE - 512)) | (1L << (SEED - 512)) | (1L << (SEGMENT - 512)) | (1L << (SELECT - 512)) | (1L << (SELF - 512)) | (1L << (SEQUENCE - 512)) | (1L << (SEQUENTIAL - 512)) | (1L << (SERIALIZABLE - 512)) | (1L << (SERIALLY_REUSABLE - 512)) | (1L << (SERVERERROR - 512)) | (1L << (SESSION - 512)) | (1L << (SESSIONTIMEZONE - 512)) | (1L << (SET - 512)) | (1L << (SETS - 512)) | (1L << (SETTINGS - 512)) | (1L << (SHARE - 512)) | (1L << (SHARP - 512)) | (1L << (SHOW - 512)) | (1L << (SHUTDOWN - 512)) | (1L << (SIBLINGS - 512)) | (1L << (SIGNTYPE - 512)) | (1L << (SIMPLE_INTEGER - 512)) | (1L << (SINGLE - 512)) | (1L << (SIZE - 512)) | (1L << (SKIP_ - 512)) | (1L << (SMALLFILE - 512)) | (1L << (SMALLINT - 512)) | (1L << (SNAPSHOT - 512)) | (1L << (SOME - 512)) | (1L << (SORT - 512)) | (1L << (SOURCE - 512)) | (1L << (SPACE_KEYWORD - 512)) | (1L << (SPECIFICATION - 512)) | (1L << (SQLDATA - 512)) | (1L << (SQLERROR - 512)) | (1L << (SQL - 512)) | (1L << (STANDALONE - 512)) | (1L << (START - 512)) | (1L << (STARTUP - 512)) | (1L << (STATEMENT_ID - 512)) | (1L << (STATEMENT - 512)) | (1L << (STATIC - 512)) | (1L << (STATISTICS - 512)) | (1L << (STORAGE - 512)) | (1L << (STORE - 512)) | (1L << (STRING - 512)) | (1L << (SUBMULTISET - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SUBPARTITIONS - 576)) | (1L << (SUBPARTITION - 576)) | (1L << (SUBSTITUTABLE - 576)) | (1L << (SUBTYPE - 576)) | (1L << (SUCCESS - 576)) | (1L << (SUPPLEMENTAL - 576)) | (1L << (SUSPEND - 576)) | (1L << (SYNONYM - 576)) | (1L << (SYSBACKUP - 576)) | (1L << (SYSDATE - 576)) | (1L << (SYSDBA - 576)) | (1L << (SYSDG - 576)) | (1L << (SYSGUID - 576)) | (1L << (SYSKM - 576)) | (1L << (SYSOPER - 576)) | (1L << (SYSTEM - 576)) | (1L << (TABLESPACE - 576)) | (1L << (TABLES - 576)) | (1L << (TABLE - 576)) | (1L << (TEMPFILE - 576)) | (1L << (TEMPLATE - 576)) | (1L << (TEMPORARY - 576)) | (1L << (THAN - 576)) | (1L << (THEN - 576)) | (1L << (THE - 576)) | (1L << (THROUGH - 576)) | (1L << (TIER - 576)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 576)) | (1L << (TIMESTAMP - 576)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 576)) | (1L << (TIMESTAMP_UNCONSTRAINED - 576)) | (1L << (TIME - 576)) | (1L << (TIMEZONE_ABBR - 576)) | (1L << (TIMEZONE_HOUR - 576)) | (1L << (TIMEZONE_MINUTE - 576)) | (1L << (TIMEZONE_REGION - 576)) | (1L << (TO - 576)) | (1L << (TRAILING - 576)) | (1L << (TRANSACTION - 576)) | (1L << (TRANSLATE - 576)) | (1L << (TRANSLATION - 576)) | (1L << (TREAT - 576)) | (1L << (TRIGGER - 576)) | (1L << (TRUE - 576)) | (1L << (TRUNCATE - 576)) | (1L << (TUNING - 576)) | (1L << (TYPE - 576)) | (1L << (UNBOUNDED - 576)) | (1L << (UNDER - 576)) | (1L << (UNDO - 576)) | (1L << (UNIFORM - 576)) | (1L << (UNION - 576)) | (1L << (UNIQUE - 576)) | (1L << (UNLIMITED - 576)) | (1L << (UNLOCK - 576)) | (1L << (UNPIVOT - 576)) | (1L << (UNTIL - 576)) | (1L << (UNUSABLE - 576)) | (1L << (UPDATED - 576)) | (1L << (UPDATE - 576)) | (1L << (UPSERT - 576)) | (1L << (UROWID - 576)) | (1L << (USABLE - 576)) | (1L << (USERS - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (USER - 640)) | (1L << (USE - 640)) | (1L << (USING - 640)) | (1L << (VALIDATE - 640)) | (1L << (VALUES - 640)) | (1L << (VALUE - 640)) | (1L << (VARCHAR2 - 640)) | (1L << (VARCHAR - 640)) | (1L << (VARIABLE - 640)) | (1L << (VARRAYS - 640)) | (1L << (VARRAY - 640)) | (1L << (VARYING - 640)) | (1L << (VERSIONS - 640)) | (1L << (VERSION - 640)) | (1L << (VIEW - 640)) | (1L << (VIRTUAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (WAIT - 640)) | (1L << (WARNING - 640)) | (1L << (WELLFORMED - 640)) | (1L << (WHENEVER - 640)) | (1L << (WHEN - 640)) | (1L << (WHERE - 640)) | (1L << (WHILE - 640)) | (1L << (WITHIN - 640)) | (1L << (WITHOUT - 640)) | (1L << (WITH - 640)) | (1L << (WORK - 640)) | (1L << (WRITE - 640)) | (1L << (XMLAGG - 640)) | (1L << (XMLATTRIBUTES - 640)) | (1L << (XMLCAST - 640)) | (1L << (XMLCOLATTVAL - 640)) | (1L << (XMLELEMENT - 640)) | (1L << (XMLEXISTS - 640)) | (1L << (XMLFOREST - 640)) | (1L << (XMLNAMESPACES - 640)) | (1L << (XMLPARSE - 640)) | (1L << (XMLPI - 640)) | (1L << (XMLQUERY - 640)) | (1L << (XMLROOT - 640)) | (1L << (XMLSCHEMA - 640)) | (1L << (XMLSERIALIZE - 640)) | (1L << (XMLTABLE - 640)) | (1L << (XMLTYPE - 640)) | (1L << (XML - 640)) | (1L << (YEARS - 640)) | (1L << (YEAR - 640)) | (1L << (YES - 640)) | (1L << (YMINTERVAL_UNCONSTRAINED - 640)) | (1L << (ZONEMAP - 640)) | (1L << (ZONE - 640)) | (1L << (PREDICTION - 640)) | (1L << (PREDICTION_BOUNDS - 640)) | (1L << (PREDICTION_COST - 640)) | (1L << (PREDICTION_DETAILS - 640)) | (1L << (PREDICTION_PROBABILITY - 640)) | (1L << (PREDICTION_SET - 640)) | (1L << (CUME_DIST - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (LISTAGG - 640)) | (1L << (PERCENT_RANK - 640)) | (1L << (PERCENTILE_CONT - 640)) | (1L << (PERCENTILE_DISC - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (RANK - 704)) | (1L << (AVG - 704)) | (1L << (CORR - 704)) | (1L << (COVAR_ - 704)) | (1L << (DECODE - 704)) | (1L << (LAG - 704)) | (1L << (LEAD - 704)) | (1L << (MAX - 704)) | (1L << (MEDIAN - 704)) | (1L << (MIN - 704)) | (1L << (NTILE - 704)) | (1L << (NVL - 704)) | (1L << (RATIO_TO_REPORT - 704)) | (1L << (REGR_ - 704)) | (1L << (ROUND - 704)) | (1L << (ROW_NUMBER - 704)) | (1L << (SUBSTR - 704)) | (1L << (TO_CHAR - 704)) | (1L << (TRIM - 704)) | (1L << (SUM - 704)) | (1L << (STDDEV - 704)) | (1L << (VAR_ - 704)) | (1L << (VARIANCE - 704)) | (1L << (LEAST - 704)) | (1L << (GREATEST - 704)) | (1L << (TO_DATE - 704)) | (1L << (VARIABLE_SESSION - 704)) | (1L << (NATIONAL_CHAR_STRING_LIT - 704)) | (1L << (BIT_STRING_LIT - 704)) | (1L << (HEX_STRING_LIT - 704)) | (1L << (DOUBLE_PERIOD - 704)) | (1L << (PERIOD - 704)) | (1L << (UNSIGNED_INTEGER - 704)) | (1L << (APPROXIMATE_NUM_LIT - 704)) | (1L << (CHAR_STRING - 704)) | (1L << (DELIMITED_ID - 704)) | (1L << (PERCENT - 704)) | (1L << (AMPERSAND - 704)) | (1L << (LEFT_PAREN - 704)) | (1L << (RIGHT_PAREN - 704)) | (1L << (DOUBLE_ASTERISK - 704)) | (1L << (ASTERISK - 704)) | (1L << (PLUS_SIGN - 704)) | (1L << (MINUS_SIGN - 704)) | (1L << (COMMA - 704)) | (1L << (SOLIDUS - 704)) | (1L << (AT_SIGN - 704)) | (1L << (ASSIGN_OP - 704)) | (1L << (BINDVAR - 704)) | (1L << (NOT_EQUAL_OP - 704)) | (1L << (CARRET_OPERATOR_PART - 704)) | (1L << (TILDE_OPERATOR_PART - 704)) | (1L << (EXCLAMATION_OPERATOR_PART - 704)) | (1L << (GREATER_THAN_OP - 704)) | (1L << (LESS_THAN_OP - 704)) | (1L << (COLON - 704)) | (1L << (BAR - 704)) | (1L << (EQUALS_OP - 704)) | (1L << (LEFT_BRACKET - 704)) | (1L << (RIGHT_BRACKET - 704)) | (1L << (BIND_VAR - 704)) | (1L << (INTRODUCER - 704)) | (1L << (SPACES - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (SINGLE_LINE_COMMENT - 768)) | (1L << (MULTI_LINE_COMMENT - 768)) | (1L << (PROMPT - 768)) | (1L << (START_CMD - 768)) | (1L << (REGULAR_ID - 768)) | (1L << (ZV - 768)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5477);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(5478);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5481);
			match(ASSIGN_OP);
			setState(5482);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5484);
			match(CONTINUE);
			setState(5486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(5485);
				label_name();
				}
			}

			setState(5490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(5488);
				match(WHEN);
				setState(5489);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5492);
			match(EXIT);
			setState(5494);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(5493);
				label_name();
				}
			}

			setState(5498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(5496);
				match(WHEN);
				setState(5497);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5500);
			match(GOTO);
			setState(5501);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5503);
			match(IF);
			setState(5504);
			condition();
			setState(5505);
			match(THEN);
			setState(5506);
			seq_of_statements();
			setState(5510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(5507);
				elsif_part();
				}
				}
				setState(5512);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5513);
				else_part();
				}
			}

			setState(5516);
			match(END);
			setState(5517);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5519);
			match(ELSIF);
			setState(5520);
			condition();
			setState(5521);
			match(THEN);
			setState(5522);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5524);
			match(ELSE);
			setState(5525);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Label_declarationContext label_declaration() {
			return getRuleContext(Label_declarationContext.class,0);
		}
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LESS_THAN_OP) {
				{
				setState(5527);
				label_declaration();
				}
			}

			setState(5534);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(5530);
				match(WHILE);
				setState(5531);
				condition();
				}
				break;
			case FOR:
				{
				setState(5532);
				match(FOR);
				setState(5533);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(5536);
			match(LOOP);
			setState(5537);
			seq_of_statements();
			setState(5538);
			match(END);
			setState(5539);
			match(LOOP);
			setState(5541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(5540);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Token range_separator;
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_cursor_loop_param);
		int _la;
		try {
			setState(5568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5543);
				index_name();
				setState(5544);
				match(IN);
				setState(5546);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(5545);
					match(REVERSE);
					}
					break;
				}
				setState(5548);
				lower_bound();
				setState(5549);
				((Cursor_loop_paramContext)_localctx).range_separator = match(DOUBLE_PERIOD);
				setState(5550);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5552);
				record_name();
				setState(5553);
				match(IN);
				setState(5566);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5554);
					cursor_name();
					setState(5560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(5555);
						match(LEFT_PAREN);
						setState(5557);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
							{
							setState(5556);
							expressions();
							}
						}

						setState(5559);
						match(RIGHT_PAREN);
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(5562);
					match(LEFT_PAREN);
					setState(5563);
					select_statement();
					setState(5564);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			match(FORALL);
			setState(5571);
			index_name();
			setState(5572);
			match(IN);
			setState(5573);
			bounds_clause();
			setState(5574);
			sql_statement();
			setState(5577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(5575);
				match(SAVE);
				setState(5576);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_bounds_clause);
		int _la;
		try {
			setState(5592);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5579);
				lower_bound();
				setState(5580);
				match(DOUBLE_PERIOD);
				setState(5581);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5583);
				match(INDICES);
				setState(5584);
				match(OF);
				setState(5585);
				collection_name();
				setState(5587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(5586);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5589);
				match(VALUES);
				setState(5590);
				match(OF);
				setState(5591);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5594);
			match(BETWEEN);
			setState(5595);
			lower_bound();
			setState(5596);
			match(AND);
			setState(5597);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5599);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5601);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5603);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5605);
			match(RAISE);
			setState(5607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(5606);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5609);
			match(RETURN);
			setState(5611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
				{
				setState(5610);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public Function_argumentsContext function_arguments() {
			return getRuleContext(Function_argumentsContext.class,0);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_function_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				setState(5613);
				match(CALL);
				}
				break;
			}
			setState(5616);
			routine_name();
			setState(5618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
			case 1:
				{
				setState(5617);
				function_arguments();
				}
				break;
			}
			setState(5621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				{
				setState(5620);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pipe_row_statementContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(PlSqlParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row_statement; }
	}

	public final Pipe_row_statementContext pipe_row_statement() throws RecognitionException {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_pipe_row_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5623);
			match(PIPE);
			setState(5624);
			match(ROW);
			setState(5625);
			match(LEFT_PAREN);
			setState(5626);
			expression();
			setState(5627);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5629);
			match(BEGIN);
			setState(5630);
			seq_of_statements();
			setState(5637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(5631);
				match(EXCEPTION);
				setState(5633); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5632);
					exception_handler();
					}
					}
					setState(5635); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(5639);
			match(END);
			setState(5641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
			case 1:
				{
				setState(5640);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5643);
			match(WHEN);
			setState(5644);
			exception_name();
			setState(5649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(5645);
				match(OR);
				setState(5646);
				exception_name();
				}
				}
				setState(5651);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5652);
			match(THEN);
			setState(5653);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECLARE - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(5656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(5655);
					match(DECLARE);
					}
				}

				setState(5659); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5658);
					declare_spec();
					}
					}
					setState(5661); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
				}
			}

			setState(5665);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(5667);
				match(DECLARE);
				}
			}

			setState(5671); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5670);
				declare_spec();
				}
				}
				setState(5673); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			setState(5675);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_sql_statement);
		try {
			setState(5681);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5677);
				execute_immediate();
				}
				break;
			case DELETE:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5678);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5679);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(5680);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5683);
			match(EXECUTE);
			setState(5684);
			match(IMMEDIATE);
			setState(5685);
			expression();
			setState(5695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(5686);
				into_clause();
				setState(5688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5687);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(5690);
				using_clause();
				setState(5692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					setState(5691);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURNING:
			case RETURN:
				{
				setState(5694);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5697);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5698);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_data_manipulation_language_statements);
		try {
			setState(5706);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5700);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5701);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5702);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5703);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5704);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5705);
				insert_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_cursor_manipulation_statements);
		try {
			setState(5712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5708);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5709);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5710);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5711);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5714);
			match(CLOSE);
			setState(5715);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5717);
			match(OPEN);
			setState(5718);
			cursor_name();
			setState(5724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5719);
				match(LEFT_PAREN);
				setState(5721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
					{
					setState(5720);
					expressions();
					}
				}

				setState(5723);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_fetch_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5726);
			match(FETCH);
			setState(5727);
			cursor_name();
			setState(5748);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(5728);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(5733); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5730);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5729);
							match(COMMA);
							}
						}

						setState(5732);
						variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5735); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,750,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case BULK:
				{
				setState(5737);
				match(BULK);
				setState(5738);
				match(COLLECT);
				setState(5739);
				match(INTO);
				setState(5744); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5741);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5740);
							match(COMMA);
							}
						}

						setState(5743);
						variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5746); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,752,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5750);
			match(OPEN);
			setState(5751);
			variable_name();
			setState(5752);
			match(FOR);
			setState(5755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				{
				setState(5753);
				select_statement();
				}
				break;
			case 2:
				{
				setState(5754);
				expression();
				}
				break;
			}
			setState(5758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5757);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_transaction_control_statements);
		try {
			setState(5765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5760);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5761);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5762);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5763);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5764);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5767);
			match(SET);
			setState(5768);
			match(TRANSACTION);
			setState(5782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				setState(5769);
				match(READ);
				setState(5770);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(5771);
				match(ISOLATION);
				setState(5772);
				match(LEVEL);
				setState(5776);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(5773);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(5774);
					match(READ);
					setState(5775);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(5778);
				match(USE);
				setState(5779);
				match(ROLLBACK);
				setState(5780);
				match(SEGMENT);
				setState(5781);
				rollback_segment_name();
				}
				break;
			}
			setState(5786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				{
				setState(5784);
				match(NAME);
				setState(5785);
				string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_set_constraint_command);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5788);
			match(SET);
			setState(5789);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(5790);
				match(ALL);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5795); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5792);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5791);
							match(COMMA);
							}
						}

						setState(5794);
						constraint_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5797); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,761,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5801);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_commit_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5803);
			match(COMMIT);
			setState(5805);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
			case 1:
				{
				setState(5804);
				match(WORK);
				}
				break;
			}
			setState(5820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				{
				setState(5807);
				match(COMMENT);
				setState(5808);
				expression();
				}
				break;
			case 2:
				{
				setState(5809);
				match(FORCE);
				setState(5818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
				case 1:
					{
					setState(5810);
					match(CORRUPT_XID);
					setState(5811);
					expression();
					}
					break;
				case 2:
					{
					setState(5812);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(5813);
					expression();
					setState(5816);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
					case 1:
						{
						setState(5814);
						match(COMMA);
						setState(5815);
						expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			setState(5823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
			case 1:
				{
				setState(5822);
				write_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5825);
			match(WRITE);
			setState(5827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
			case 1:
				{
				setState(5826);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5830);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
			case 1:
				{
				setState(5829);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_rollback_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5832);
			match(ROLLBACK);
			setState(5834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
			case 1:
				{
				setState(5833);
				match(WORK);
				}
				break;
			}
			setState(5843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				{
				setState(5836);
				match(TO);
				setState(5838);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(5837);
					match(SAVEPOINT);
					}
					break;
				}
				setState(5840);
				savepoint_name();
				}
				break;
			case 2:
				{
				setState(5841);
				match(FORCE);
				setState(5842);
				string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5845);
			match(SAVEPOINT);
			setState(5846);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5848);
			match(EXPLAIN);
			setState(5849);
			match(PLAN);
			setState(5854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(5850);
				match(SET);
				setState(5851);
				match(STATEMENT_ID);
				setState(5852);
				match(EQUALS_OP);
				setState(5853);
				string();
				}
			}

			setState(5858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5856);
				match(INTO);
				setState(5857);
				tableview_name();
				}
			}

			setState(5860);
			match(FOR);
			setState(5866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(5861);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(5862);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(5863);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(5864);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(5865);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5868);
				subquery_factoring_clause();
				}
			}

			setState(5871);
			subquery();
			setState(5876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(5874);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(5872);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(5873);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(5878);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5879);
			match(WITH);
			setState(5884); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5880);
					match(COMMA);
					}
				}

				setState(5883);
				factoring_element();
				}
				}
				setState(5886); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5888);
			query_name();
			setState(5890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5889);
				paren_column_list();
				}
			}

			setState(5892);
			match(AS);
			setState(5893);
			match(LEFT_PAREN);
			setState(5894);
			subquery();
			setState(5896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(5895);
				order_by_clause();
				}
			}

			setState(5898);
			match(RIGHT_PAREN);
			setState(5900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(5899);
				search_clause();
				}
			}

			setState(5903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
			case 1:
				{
				setState(5902);
				cycle_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(PlSqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PlSqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(PlSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PlSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PlSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PlSqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(PlSqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PlSqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PlSqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PlSqlParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5905);
			match(SEARCH);
			setState(5906);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5907);
			match(FIRST);
			setState(5908);
			match(BY);
			setState(5909);
			column_name();
			setState(5911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(5910);
				match(ASC);
				}
			}

			setState(5914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(5913);
				match(DESC);
				}
			}

			setState(5918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
			case 1:
				{
				setState(5916);
				match(NULLS);
				setState(5917);
				match(FIRST);
				}
				break;
			}
			setState(5922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(5920);
				match(NULLS);
				setState(5921);
				match(LAST);
				}
			}

			setState(5942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5924);
				match(COMMA);
				setState(5925);
				column_name();
				setState(5927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(5926);
					match(ASC);
					}
				}

				setState(5930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(5929);
					match(DESC);
					}
				}

				setState(5934);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(5932);
					match(NULLS);
					setState(5933);
					match(FIRST);
					}
					break;
				}
				setState(5938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(5936);
					match(NULLS);
					setState(5937);
					match(LAST);
					}
				}

				}
				}
				setState(5944);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5945);
			match(SET);
			setState(5946);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_cycle_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5948);
			match(CYCLE);
			setState(5949);
			column_list();
			setState(5950);
			match(SET);
			setState(5951);
			column_name();
			setState(5952);
			match(TO);
			setState(5953);
			expression();
			setState(5954);
			match(DEFAULT);
			setState(5955);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_subquery_basic_elements);
		try {
			setState(5962);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5957);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5958);
				match(LEFT_PAREN);
				setState(5959);
				subquery();
				setState(5960);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(5964);
				match(UNION);
				setState(5966);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(5965);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(5968);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(5969);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5972);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_query_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5974);
			match(SELECT);
			setState(5976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
			case 1:
				{
				setState(5975);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(5978);
				match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5983); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5980);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5979);
							match(COMMA);
							}
						}

						setState(5982);
						selected_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5985); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,799,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(5989);
				into_clause();
				}
			}

			setState(5992);
			from_clause();
			setState(5994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				{
				setState(5993);
				where_clause();
				}
				break;
			}
			setState(5997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				setState(5996);
				hierarchical_query_clause();
				}
				break;
			}
			setState(6000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				setState(5999);
				group_by_clause();
				}
				break;
			}
			setState(6003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
			case 1:
				{
				setState(6002);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6005);
			select_list_elements();
			setState(6007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				setState(6006);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6009);
			match(FROM);
			setState(6010);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_select_list_elements);
		try {
			setState(6022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6012);
				tableview_name();
				setState(6013);
				match(PERIOD);
				setState(6014);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(6016);
					regular_id();
					setState(6017);
					match(PERIOD);
					}
					break;
				}
				setState(6021);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_table_ref_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6028); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6025);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6024);
						match(COMMA);
						}
					}

					setState(6027);
					table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6030); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,810,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6032);
			table_ref_aux();
			setState(6036);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,811,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6033);
					join_clause();
					}
					} 
				}
				setState(6038);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,811,_ctx);
			}
			setState(6041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
			case 1:
				{
				setState(6039);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(6040);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return getRuleContext(Table_ref_aux_internalContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_table_ref_aux);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6043);
			table_ref_aux_internal();
			setState(6047);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,813,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6044);
					flashback_query_clause();
					}
					} 
				}
				setState(6049);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,813,_ctx);
			}
			setState(6051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
			case 1:
				{
				setState(6050);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_aux_internalContext extends ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux_internal; }
	 
		public Table_ref_aux_internalContext() { }
		public void copyFrom(Table_ref_aux_internalContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Table_ref_aux_internal_threeContext extends Table_ref_aux_internalContext {
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
	}
	public static class Table_ref_aux_internal_oneContext extends Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
	}
	public static class Table_ref_aux_internal_twoContext extends Table_ref_aux_internalContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
	}

	public final Table_ref_aux_internalContext table_ref_aux_internal() throws RecognitionException {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_table_ref_aux_internal);
		int _la;
		try {
			setState(6076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6053);
				dml_table_expression_clause();
				setState(6056);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(6054);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(6055);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6058);
				match(LEFT_PAREN);
				setState(6059);
				table_ref();
				setState(6063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(6060);
					subquery_operation_part();
					}
					}
					setState(6065);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6066);
				match(RIGHT_PAREN);
				setState(6069);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
				case 1:
					{
					setState(6067);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(6068);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6071);
				match(ONLY);
				setState(6072);
				match(LEFT_PAREN);
				setState(6073);
				dml_table_expression_clause();
				setState(6074);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6078);
				query_partition_clause();
				}
			}

			setState(6082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(6081);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(6084);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(6085);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(6088);
			match(JOIN);
			setState(6089);
			table_ref_aux();
			setState(6091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				{
				setState(6090);
				query_partition_clause();
				}
				break;
			}
			setState(6097);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,824,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(6095);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(6093);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(6094);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(6099);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,824,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6100);
			match(ON);
			setState(6101);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_join_using_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6103);
			match(USING);
			setState(6104);
			paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6106);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(6107);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_query_partition_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6110);
			match(PARTITION);
			setState(6111);
			match(BY);
			setState(6119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				{
				{
				setState(6112);
				match(LEFT_PAREN);
				setState(6115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
				case 1:
					{
					setState(6113);
					subquery();
					}
					break;
				case 2:
					{
					setState(6114);
					expressions();
					}
					break;
				}
				setState(6117);
				match(RIGHT_PAREN);
				}
				}
				break;
			case 2:
				{
				setState(6118);
				expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_flashback_query_clause);
		int _la;
		try {
			setState(6129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6121);
				match(VERSIONS);
				setState(6122);
				match(BETWEEN);
				setState(6123);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6124);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6125);
				match(AS);
				setState(6126);
				match(OF);
				setState(6127);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==SNAPSHOT || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6128);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6131);
			match(PIVOT);
			setState(6133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(6132);
				match(XML);
				}
			}

			setState(6135);
			match(LEFT_PAREN);
			setState(6140); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6136);
					match(COMMA);
					}
				}

				setState(6139);
				pivot_element();
				}
				}
				setState(6142); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			setState(6144);
			pivot_for_clause();
			setState(6145);
			pivot_in_clause();
			setState(6146);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_pivot_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6148);
			aggregate_function_name();
			setState(6149);
			match(LEFT_PAREN);
			setState(6150);
			expression();
			setState(6151);
			match(RIGHT_PAREN);
			setState(6153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				{
				setState(6152);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_pivot_for_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6155);
			match(FOR);
			setState(6158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(6156);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6157);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6160);
			match(IN);
			setState(6161);
			match(LEFT_PAREN);
			setState(6179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				{
				setState(6162);
				subquery();
				}
				break;
			case 2:
				{
				setState(6167); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6164);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6163);
						match(COMMA);
						}
					}

					setState(6166);
					match(ANY);
					}
					}
					setState(6169); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ANY || _la==COMMA );
				}
				break;
			case 3:
				{
				setState(6175); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6172);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6171);
						match(COMMA);
						}
					}

					setState(6174);
					pivot_in_clause_element();
					}
					}
					setState(6177); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0) );
				}
				break;
			}
			setState(6181);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_pivot_in_clause_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6183);
			pivot_in_clause_elements();
			setState(6185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
			case 1:
				{
				setState(6184);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_pivot_in_clause_elements);
		int _la;
		try {
			setState(6193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6187);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6188);
				match(LEFT_PAREN);
				setState(6190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
					{
					setState(6189);
					expressions();
					}
				}

				setState(6192);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6195);
			match(UNPIVOT);
			setState(6198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(6196);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6197);
				match(NULLS);
				}
			}

			setState(6200);
			match(LEFT_PAREN);
			setState(6203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(6201);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6202);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6205);
			pivot_for_clause();
			setState(6206);
			unpivot_in_clause();
			setState(6207);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6209);
			match(IN);
			setState(6210);
			match(LEFT_PAREN);
			setState(6215); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6211);
					match(COMMA);
					}
				}

				setState(6214);
				unpivot_in_elements();
				}
				}
				setState(6217); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (LEFT_PAREN - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
			setState(6219);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(6221);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6222);
				paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6225);
				match(AS);
				setState(6238);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case PLUS_SIGN:
					{
					setState(6226);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(6227);
					match(LEFT_PAREN);
					setState(6232); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(6229);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6228);
							match(COMMA);
							}
						}

						setState(6231);
						constant();
						}
						}
						setState(6234); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (DATE - 125)) | (1L << (DBTIMEZONE - 125)) | (1L << (DEFAULT - 125)))) != 0) || _la==FALSE || _la==INTERVAL || _la==MAXVALUE || _la==MINVALUE || _la==NULL || _la==SESSIONTIMEZONE || _la==TIMESTAMP || _la==TRUE || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (NATIONAL_CHAR_STRING_LIT - 731)) | (1L << (UNSIGNED_INTEGER - 731)) | (1L << (APPROXIMATE_NUM_LIT - 731)) | (1L << (CHAR_STRING - 731)) | (1L << (PLUS_SIGN - 731)) | (1L << (COMMA - 731)))) != 0) );
					setState(6236);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_hierarchical_query_clause);
		try {
			setState(6259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6242);
				match(CONNECT);
				setState(6243);
				match(BY);
				setState(6245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
				case 1:
					{
					setState(6244);
					match(NOCYCLE);
					}
					break;
				}
				setState(6247);
				condition();
				setState(6249);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
				case 1:
					{
					setState(6248);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(6251);
				start_part();
				setState(6252);
				match(CONNECT);
				setState(6253);
				match(BY);
				setState(6255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
				case 1:
					{
					setState(6254);
					match(NOCYCLE);
					}
					break;
				}
				setState(6257);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6261);
			match(START);
			setState(6262);
			match(WITH);
			setState(6263);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_group_by_clause);
		int _la;
		try {
			int _alt;
			setState(6291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6265);
				match(GROUP);
				setState(6266);
				match(BY);
				setState(6271); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6268);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6267);
							match(COMMA);
							}
						}

						setState(6270);
						group_by_elements();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6273); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,856,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(6276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,857,_ctx) ) {
				case 1:
					{
					setState(6275);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6278);
				having_clause();
				setState(6289);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
				case 1:
					{
					setState(6279);
					match(GROUP);
					setState(6280);
					match(BY);
					setState(6285); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(6282);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(6281);
								match(COMMA);
								}
							}

							setState(6284);
							group_by_elements();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(6287); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,859,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_group_by_elements);
		try {
			setState(6296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6293);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6294);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6295);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6298);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6299);
			match(LEFT_PAREN);
			setState(6304); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6301);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6300);
					match(COMMA);
					}
				}

				setState(6303);
				grouping_sets_elements();
				}
				}
				setState(6306); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0) );
			setState(6308);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6310);
			match(GROUPING);
			setState(6311);
			match(SETS);
			setState(6312);
			match(LEFT_PAREN);
			setState(6317); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6313);
					match(COMMA);
					}
				}

				setState(6316);
				grouping_sets_elements();
				}
				}
				setState(6319); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0) );
			setState(6321);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_grouping_sets_elements);
		int _la;
		try {
			setState(6330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6323);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6324);
				match(LEFT_PAREN);
				setState(6326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
					{
					setState(6325);
					expressions();
					}
				}

				setState(6328);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6329);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6332);
			match(HAVING);
			setState(6333);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6335);
			match(MODEL);
			setState(6339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6336);
				cell_reference_options();
				}
				}
				setState(6341);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(6342);
				return_rows_clause();
				}
			}

			setState(6348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(6345);
				reference_model();
				}
				}
				setState(6350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6351);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_cell_reference_options);
		int _la;
		try {
			setState(6361);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6353);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6354);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6355);
				match(UNIQUE);
				setState(6359);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(6356);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(6357);
					match(SINGLE);
					setState(6358);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6363);
			match(RETURN);
			setState(6364);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6365);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6367);
			match(REFERENCE);
			setState(6368);
			reference_model_name();
			setState(6369);
			match(ON);
			setState(6370);
			match(LEFT_PAREN);
			setState(6371);
			subquery();
			setState(6372);
			match(RIGHT_PAREN);
			setState(6373);
			model_column_clauses();
			setState(6377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6374);
				cell_reference_options();
				}
				}
				setState(6379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(6380);
				match(MAIN);
				setState(6381);
				main_model_name();
				}
			}

			setState(6384);
			model_column_clauses();
			setState(6388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(6385);
				cell_reference_options();
				}
				}
				setState(6390);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6391);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6393);
				model_column_partition_part();
				}
			}

			setState(6396);
			match(DIMENSION);
			setState(6397);
			match(BY);
			setState(6398);
			model_column_list();
			setState(6399);
			match(MEASURES);
			setState(6400);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6402);
			match(PARTITION);
			setState(6403);
			match(BY);
			setState(6404);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6406);
			match(LEFT_PAREN);
			setState(6411); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6407);
					match(COMMA);
					}
				}

				setState(6410);
				model_column();
				}
				}
				setState(6413); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELECT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0) );
			setState(6415);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_model_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6419);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(6417);
				expression();
				}
				break;
			case SELECT:
				{
				setState(6418);
				query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
			case 1:
				{
				setState(6421);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(6424);
				model_rules_part();
				}
			}

			setState(6427);
			match(LEFT_PAREN);
			setState(6434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (NULL - 392)) | (1L << (NULLS - 392)) | (1L << (NUMBER - 392)) | (1L << (NUMERIC - 392)) | (1L << (NVARCHAR2 - 392)) | (1L << (OBJECT - 392)) | (1L << (OFF - 392)) | (1L << (OID - 392)) | (1L << (OLD - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPERATOR - 392)) | (1L << (ORADATA - 392)) | (1L << (ORDINALITY - 392)) | (1L << (OSERROR - 392)) | (1L << (OUTER - 392)) | (1L << (OUT - 392)) | (1L << (OVER - 392)) | (1L << (OVERRIDING - 392)) | (1L << (PACKAGE - 392)) | (1L << (PARALLEL_ENABLE - 392)) | (1L << (PARAMETERS - 392)) | (1L << (PARENT - 392)) | (1L << (PARTITION - 392)) | (1L << (PASSING - 392)) | (1L << (PATH - 392)) | (1L << (PIPELINED - 392)) | (1L << (PLAN - 392)) | (1L << (PLS_INTEGER - 392)) | (1L << (POSITIVEN - 392)) | (1L << (POSITIVE - 392)) | (1L << (PRAGMA - 392)) | (1L << (PRECEDING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PRECISION - 456)) | (1L << (PRESENT - 456)) | (1L << (PRIOR - 456)) | (1L << (PRIVILEGE - 456)) | (1L << (PROGRAM - 456)) | (1L << (RAISE - 456)) | (1L << (RANGE - 456)) | (1L << (RAW - 456)) | (1L << (READ - 456)) | (1L << (REAL - 456)) | (1L << (RECORD - 456)) | (1L << (REFERENCE - 456)) | (1L << (REFERENCING - 456)) | (1L << (REF - 456)) | (1L << (REJECT - 456)) | (1L << (RELIES_ON - 456)) | (1L << (RENAME - 456)) | (1L << (REPLACE - 456)) | (1L << (RESPECT - 456)) | (1L << (RESTRICT_REFERENCES - 456)) | (1L << (RESULT_CACHE - 456)) | (1L << (RESULT - 456)) | (1L << (RETURNING - 456)) | (1L << (RETURN - 456)) | (1L << (REUSE - 456)) | (1L << (REVERSE - 456)) | (1L << (REVOKE - 456)) | (1L << (RIGHT - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROWID - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (RULES - 456)) | (1L << (SAMPLE - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SAVEPOINT - 520)) | (1L << (SAVE - 520)) | (1L << (SCHEMACHECK - 520)) | (1L << (SCHEMA - 520)) | (1L << (SCN - 520)) | (1L << (SECOND - 520)) | (1L << (SEED - 520)) | (1L << (SEGMENT - 520)) | (1L << (SELF - 520)) | (1L << (SEQUENTIAL - 520)) | (1L << (SERIALIZABLE - 520)) | (1L << (SERIALLY_REUSABLE - 520)) | (1L << (SERVERERROR - 520)) | (1L << (SESSIONTIMEZONE - 520)) | (1L << (SET - 520)) | (1L << (SETS - 520)) | (1L << (SETTINGS - 520)) | (1L << (SHOW - 520)) | (1L << (SHUTDOWN - 520)) | (1L << (SIBLINGS - 520)) | (1L << (SIGNTYPE - 520)) | (1L << (SIMPLE_INTEGER - 520)) | (1L << (SINGLE - 520)) | (1L << (SKIP_ - 520)) | (1L << (SMALLINT - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOME - 520)) | (1L << (SPECIFICATION - 520)) | (1L << (SQLDATA - 520)) | (1L << (SQLERROR - 520)) | (1L << (STANDALONE - 520)) | (1L << (STARTUP - 520)) | (1L << (STATEMENT_ID - 520)) | (1L << (STATEMENT - 520)) | (1L << (STATIC - 520)) | (1L << (STATISTICS - 520)) | (1L << (STORE - 520)) | (1L << (STRING - 520)) | (1L << (SUBMULTISET - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBSTITUTABLE - 520)) | (1L << (SUBTYPE - 520)) | (1L << (SUCCESS - 520)) | (1L << (SUSPEND - 520)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUE - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPDATE - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (DECODE - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (NVL - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROUND - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TO_CHAR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (LEAST - 714)) | (1L << (GREATEST - 714)) | (1L << (TO_DATE - 714)) | (1L << (NATIONAL_CHAR_STRING_LIT - 714)) | (1L << (UNSIGNED_INTEGER - 714)) | (1L << (APPROXIMATE_NUM_LIT - 714)) | (1L << (CHAR_STRING - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (LEFT_PAREN - 714)) | (1L << (PLUS_SIGN - 714)) | (1L << (MINUS_SIGN - 714)) | (1L << (COMMA - 714)) | (1L << (BINDVAR - 714)) | (1L << (COLON - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				{
				setState(6429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6428);
					match(COMMA);
					}
				}

				setState(6431);
				model_rules_element();
				}
				}
				setState(6436);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6437);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6439);
			match(RULES);
			setState(6445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(6440);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(6441);
				match(UPSERT);
				setState(6443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(6442);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(6449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(6447);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6448);
				match(ORDER);
				}
			}

			setState(6452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(6451);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,890,_ctx) ) {
			case 1:
				{
				setState(6454);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(6455);
				match(UPSERT);
				setState(6457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
				case 1:
					{
					setState(6456);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(6461);
			cell_assignment();
			setState(6463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6462);
				order_by_clause();
				}
			}

			setState(6465);
			match(EQUALS_OP);
			setState(6466);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6468);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6470);
			match(ITERATE);
			setState(6471);
			match(LEFT_PAREN);
			setState(6472);
			expression();
			setState(6473);
			match(RIGHT_PAREN);
			setState(6475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(6474);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6477);
			match(UNTIL);
			setState(6478);
			match(LEFT_PAREN);
			setState(6479);
			condition();
			setState(6480);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6482);
			match(ORDER);
			setState(6484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(6483);
				match(SIBLINGS);
				}
			}

			setState(6486);
			match(BY);
			setState(6491); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6488);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6487);
						match(COMMA);
						}
					}

					setState(6490);
					order_by_elements();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6493); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,895,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6495);
			expression();
			setState(6497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(6496);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
			case 1:
				{
				setState(6499);
				match(NULLS);
				setState(6500);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6503);
			match(FOR);
			setState(6504);
			match(UPDATE);
			setState(6506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(6505);
				for_update_of_part();
				}
			}

			setState(6509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				setState(6508);
				for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_for_update_of_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6511);
			match(OF);
			setState(6512);
			column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_for_update_options);
		try {
			setState(6519);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6514);
				match(SKIP_);
				setState(6515);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6516);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6517);
				match(WAIT);
				setState(6518);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6521);
			match(UPDATE);
			setState(6522);
			general_table_ref();
			setState(6523);
			update_set_clause();
			setState(6525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6524);
				where_clause();
				}
			}

			setState(6528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,902,_ctx) ) {
			case 1:
				{
				setState(6527);
				static_returning_clause();
				}
				break;
			}
			setState(6531);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
			case 1:
				{
				setState(6530);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_update_set_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6533);
			match(SET);
			setState(6549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
			case 1:
				{
				setState(6538); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6535);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6534);
							match(COMMA);
							}
						}

						setState(6537);
						column_based_update_set_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6540); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,905,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(6542);
				match(VALUE);
				setState(6543);
				match(LEFT_PAREN);
				setState(6544);
				identifier();
				setState(6545);
				match(RIGHT_PAREN);
				setState(6546);
				match(EQUALS_OP);
				setState(6547);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_column_based_update_set_clause);
		try {
			setState(6559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6551);
				column_name();
				setState(6552);
				match(EQUALS_OP);
				setState(6553);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6555);
				paren_column_list();
				setState(6556);
				match(EQUALS_OP);
				setState(6557);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6561);
			match(DELETE);
			setState(6563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6562);
				match(FROM);
				}
			}

			setState(6565);
			general_table_ref();
			setState(6567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6566);
				where_clause();
				}
			}

			setState(6570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
			case 1:
				{
				setState(6569);
				static_returning_clause();
				}
				break;
			}
			setState(6573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,911,_ctx) ) {
			case 1:
				{
				setState(6572);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6575);
			match(INSERT);
			setState(6578);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(6576);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(6577);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_single_table_insert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6580);
			insert_into_clause();
			setState(6586);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(6581);
				values_clause();
				setState(6583);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,913,_ctx) ) {
				case 1:
					{
					setState(6582);
					static_returning_clause();
					}
					break;
				}
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(6585);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				{
				setState(6588);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6598);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
			case 1:
				{
				setState(6591);
				match(ALL);
				setState(6593); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6592);
					multi_table_element();
					}
					}
					setState(6595); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(6597);
				conditional_insert_clause();
				}
				break;
			}
			setState(6600);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6602);
			insert_into_clause();
			setState(6604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(6603);
				values_clause();
				}
			}

			setState(6607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(6606);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(6609);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6613); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6612);
				conditional_insert_when_part();
				}
				}
				setState(6615); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(6618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(6617);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6620);
			match(WHEN);
			setState(6621);
			condition();
			setState(6622);
			match(THEN);
			setState(6624); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6623);
				multi_table_element();
				}
				}
				setState(6626); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6628);
			match(ELSE);
			setState(6630); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6629);
				multi_table_element();
				}
				}
				setState(6632); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_insert_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6634);
			match(INTO);
			setState(6635);
			general_table_ref();
			setState(6637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				setState(6636);
				paren_column_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_values_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6639);
			match(VALUES);
			setState(6640);
			match(LEFT_PAREN);
			setState(6642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
				{
				setState(6641);
				expressions();
				}
			}

			setState(6644);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6646);
			match(MERGE);
			setState(6647);
			match(INTO);
			setState(6648);
			tableview_name();
			setState(6650);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (NATIONAL_CHAR_STRING_LIT - 714)) | (1L << (CHAR_STRING - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(6649);
				table_alias();
				}
			}

			setState(6652);
			match(USING);
			setState(6653);
			selected_tableview();
			setState(6654);
			match(ON);
			setState(6655);
			match(LEFT_PAREN);
			setState(6656);
			condition();
			setState(6657);
			match(RIGHT_PAREN);
			setState(6666);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
			case 1:
				{
				setState(6658);
				merge_update_clause();
				setState(6660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(6659);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(6662);
				merge_insert_clause();
				setState(6664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(6663);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(6669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
			case 1:
				{
				setState(6668);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_merge_update_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6671);
			match(WHEN);
			setState(6672);
			match(MATCHED);
			setState(6673);
			match(THEN);
			setState(6674);
			match(UPDATE);
			setState(6675);
			match(SET);
			setState(6676);
			merge_element();
			setState(6681);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,932,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6677);
					match(COMMA);
					setState(6678);
					merge_element();
					}
					} 
				}
				setState(6683);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,932,_ctx);
			}
			setState(6685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6684);
				where_clause();
				}
			}

			setState(6688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
			case 1:
				{
				setState(6687);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6690);
			column_name();
			setState(6691);
			match(EQUALS_OP);
			setState(6692);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6694);
			match(DELETE);
			setState(6695);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6697);
			match(WHEN);
			setState(6698);
			match(NOT);
			setState(6699);
			match(MATCHED);
			setState(6700);
			match(THEN);
			setState(6701);
			match(INSERT);
			setState(6703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(6702);
				paren_column_list();
				}
			}

			setState(6705);
			match(VALUES);
			setState(6706);
			match(LEFT_PAREN);
			setState(6708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
				{
				setState(6707);
				expressions();
				}
			}

			setState(6710);
			match(RIGHT_PAREN);
			setState(6712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6711);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(6714);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6715);
				match(LEFT_PAREN);
				setState(6716);
				select_statement();
				setState(6717);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (NATIONAL_CHAR_STRING_LIT - 714)) | (1L << (CHAR_STRING - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(6721);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6724);
			match(LOCK);
			setState(6725);
			match(TABLE);
			setState(6726);
			lock_table_element();
			setState(6731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6727);
				match(COMMA);
				setState(6728);
				lock_table_element();
				}
				}
				setState(6733);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6734);
			match(IN);
			setState(6735);
			lock_mode();
			setState(6736);
			match(MODE);
			setState(6738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
			case 1:
				{
				setState(6737);
				wait_nowait_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_wait_nowait_part);
		try {
			setState(6743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6740);
				match(WAIT);
				setState(6741);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6742);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6745);
			tableview_name();
			setState(6747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(6746);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_lock_mode);
		int _la;
		try {
			setState(6761);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6749);
				match(ROW);
				setState(6750);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6751);
				match(ROW);
				setState(6752);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6753);
				match(SHARE);
				setState(6755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(6754);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6757);
				match(SHARE);
				setState(6758);
				match(ROW);
				setState(6759);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6760);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
			case 1:
				{
				setState(6763);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(6764);
				match(ONLY);
				setState(6765);
				match(LEFT_PAREN);
				setState(6766);
				dml_table_expression_clause();
				setState(6767);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(6772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,947,_ctx) ) {
			case 1:
				{
				setState(6771);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6774);
			_la = _input.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6775);
			expressions();
			setState(6776);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_error_logging_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6778);
			match(LOG);
			setState(6779);
			match(ERRORS);
			setState(6781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
			case 1:
				{
				setState(6780);
				error_logging_into_part();
				}
				break;
			}
			setState(6784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
			case 1:
				{
				setState(6783);
				expression();
				}
				break;
			}
			setState(6787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				setState(6786);
				error_logging_reject_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6789);
			match(INTO);
			setState(6790);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6792);
			match(REJECT);
			setState(6793);
			match(LIMIT);
			setState(6796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
			case 1:
				{
				setState(6794);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(6795);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(6810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6798);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6799);
				match(LEFT_PAREN);
				setState(6800);
				select_statement();
				setState(6802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6801);
					subquery_restriction_clause();
					}
				}

				setState(6804);
				match(RIGHT_PAREN);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(6806);
				tableview_name();
				setState(6808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
				case 1:
					{
					setState(6807);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6812);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(6813);
				match(LEFT_PAREN);
				setState(6814);
				subquery();
				setState(6815);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(6817);
				match(LEFT_PAREN);
				setState(6818);
				expression();
				setState(6819);
				match(RIGHT_PAREN);
				setState(6823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
				case 1:
					{
					setState(6820);
					match(LEFT_PAREN);
					setState(6821);
					match(PLUS_SIGN);
					setState(6822);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6827);
			match(WITH);
			setState(6836);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(6828);
				match(READ);
				setState(6829);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(6830);
				match(CHECK);
				setState(6831);
				match(OPTION);
				setState(6834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(6832);
					match(CONSTRAINT);
					setState(6833);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6838);
			match(SAMPLE);
			setState(6840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(6839);
				match(BLOCK);
				}
			}

			setState(6842);
			match(LEFT_PAREN);
			setState(6843);
			expression();
			setState(6846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6844);
				match(COMMA);
				setState(6845);
				expression();
				}
			}

			setState(6848);
			match(RIGHT_PAREN);
			setState(6850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				setState(6849);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6852);
			match(SEED);
			setState(6853);
			match(LEFT_PAREN);
			setState(6854);
			expression();
			setState(6855);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6857);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6859);
			expression();
			setState(6864);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,962,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6860);
					match(COMMA);
					setState(6861);
					expression();
					}
					} 
				}
				setState(6866);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,962,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Logical_expressionContext logical_expression() {
			return getRuleContext(Logical_expressionContext.class,0);
		}
		public TerminalNode VARIABLE_SESSION() { return getToken(PlSqlParser.VARIABLE_SESSION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_expression);
		try {
			setState(6870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6867);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6868);
				logical_expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6869);
				match(VARIABLE_SESSION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6872);
			match(CURSOR);
			setState(6873);
			match(LEFT_PAREN);
			setState(6874);
			subquery();
			setState(6875);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_expressionContext extends ParserRuleContext {
		public Type_specContext type_spec1;
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(PlSqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(PlSqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(PlSqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(PlSqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(PlSqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(PlSqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(PlSqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(PlSqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(PlSqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(PlSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PlSqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(PlSqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(PlSqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(PlSqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(PlSqlParser.OF, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PlSqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PlSqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(PlSqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PlSqlParser.ONLY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Logical_expressionContext> logical_expression() {
			return getRuleContexts(Logical_expressionContext.class);
		}
		public Logical_expressionContext logical_expression(int i) {
			return getRuleContext(Logical_expressionContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_expression; }
	}

	public final Logical_expressionContext logical_expression() throws RecognitionException {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_expressionContext _localctx = new Logical_expressionContext(_ctx, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 888;
		enterRecursionRule(_localctx, 888, RULE_logical_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6917);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(6878);
				multiset_expression();
				setState(6912);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,969,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6879);
						match(IS);
						setState(6881);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(6880);
							match(NOT);
							}
						}

						setState(6908);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NULL:
							{
							setState(6883);
							match(NULL);
							}
							break;
						case NAN:
							{
							setState(6884);
							match(NAN);
							}
							break;
						case PRESENT:
							{
							setState(6885);
							match(PRESENT);
							}
							break;
						case INFINITE:
							{
							setState(6886);
							match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							setState(6887);
							match(A_LETTER);
							setState(6888);
							match(SET);
							}
							break;
						case EMPTY:
							{
							setState(6889);
							match(EMPTY);
							}
							break;
						case OF:
							{
							setState(6890);
							match(OF);
							setState(6892);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==TYPE) {
								{
								setState(6891);
								match(TYPE);
								}
							}

							setState(6894);
							match(LEFT_PAREN);
							setState(6896);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
							case 1:
								{
								setState(6895);
								match(ONLY);
								}
								break;
							}
							setState(6898);
							((Logical_expressionContext)_localctx).type_spec1 = type_spec();
							setState(6903);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(6899);
								match(COMMA);
								setState(6900);
								type_spec();
								}
								}
								setState(6905);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(6906);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(6914);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,969,_ctx);
				}
				}
				break;
			case NOT:
				{
				setState(6915);
				match(NOT);
				setState(6916);
				logical_expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(6927);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,972,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6925);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(6919);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6920);
						match(AND);
						setState(6921);
						logical_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						setState(6922);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6923);
						match(OR);
						setState(6924);
						logical_expression(2);
						}
						break;
					}
					} 
				}
				setState(6929);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,972,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Token multiset_type;
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6930);
			relational_expression(0);
			setState(6936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
			case 1:
				{
				setState(6931);
				((Multiset_expressionContext)_localctx).multiset_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
					((Multiset_expressionContext)_localctx).multiset_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(6932);
					match(OF);
					}
				}

				setState(6935);
				concatenation(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public Relational_operatorContext op;
		public Compound_expressionContext compound_expression() {
			return getRuleContext(Compound_expressionContext.class,0);
		}
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 892;
		enterRecursionRule(_localctx, 892, RULE_relational_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6939);
			compound_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(6947);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,975,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					setState(6941);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6942);
					((Relational_expressionContext)_localctx).op = relational_operator();
					setState(6943);
					relational_expression(3);
					}
					} 
				}
				setState(6949);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,975,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public ConcatenationContext concatenation1;
		public Token like_type;
		public ConcatenationContext concatenation2;
		public ConcatenationContext concatenation3;
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6950);
			((Compound_expressionContext)_localctx).concatenation1 = concatenation(0);
			setState(6966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
			case 1:
				{
				setState(6952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6951);
					match(NOT);
					}
				}

				setState(6964);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(6954);
					match(IN);
					setState(6955);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(6956);
					match(BETWEEN);
					setState(6957);
					between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					setState(6958);
					((Compound_expressionContext)_localctx).like_type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (LIKE2 - 298)) | (1L << (LIKE4 - 298)) | (1L << (LIKEC - 298)) | (1L << (LIKE - 298)))) != 0)) ) {
						((Compound_expressionContext)_localctx).like_type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6959);
					((Compound_expressionContext)_localctx).concatenation2 = concatenation(0);
					setState(6962);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
					case 1:
						{
						setState(6960);
						match(ESCAPE);
						setState(6961);
						((Compound_expressionContext)_localctx).concatenation3 = concatenation(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_relational_operator);
		int _la;
		try {
			setState(6982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6968);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6976);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT_EQUAL_OP:
					{
					setState(6969);
					match(NOT_EQUAL_OP);
					}
					break;
				case LESS_THAN_OP:
					{
					setState(6970);
					match(LESS_THAN_OP);
					setState(6971);
					match(GREATER_THAN_OP);
					}
					break;
				case EXCLAMATION_OPERATOR_PART:
					{
					setState(6972);
					match(EXCLAMATION_OPERATOR_PART);
					setState(6973);
					match(EQUALS_OP);
					}
					break;
				case CARRET_OPERATOR_PART:
					{
					setState(6974);
					match(CARRET_OPERATOR_PART);
					setState(6975);
					match(EQUALS_OP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6978);
				_la = _input.LA(1);
				if ( !(_la==GREATER_THAN_OP || _la==LESS_THAN_OP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUALS_OP) {
					{
					setState(6979);
					match(EQUALS_OP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_in_elements);
		int _la;
		try {
			setState(7002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6984);
				match(LEFT_PAREN);
				setState(6985);
				subquery();
				setState(6986);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6988);
				match(LEFT_PAREN);
				setState(6989);
				concatenation(0);
				setState(6994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6990);
					match(COMMA);
					setState(6991);
					concatenation(0);
					}
					}
					setState(6996);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6997);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6999);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7000);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7001);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7004);
			concatenation(0);
			setState(7005);
			match(AND);
			setState(7006);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public Token op;
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(PlSqlParser.SOLIDUS, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public List<TerminalNode> BAR() { return getTokens(PlSqlParser.BAR); }
		public TerminalNode BAR(int i) {
			return getToken(PlSqlParser.BAR, i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		return concatenation(0);
	}

	private ConcatenationContext concatenation(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, _parentState);
		ConcatenationContext _prevctx = _localctx;
		int _startState = 902;
		enterRecursionRule(_localctx, 902, RULE_concatenation, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7009);
			model_expression();
			setState(7018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,986,_ctx) ) {
			case 1:
				{
				setState(7010);
				match(AT);
				setState(7015);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(7011);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(7012);
					match(TIME);
					setState(7013);
					match(ZONE);
					setState(7014);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(7017);
				interval_expression();
				}
				break;
			}
			}
			_ctx.stop = _input.LT(-1);
			setState(7032);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,988,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7030);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,987,_ctx) ) {
					case 1:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(7020);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7021);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7022);
						concatenation(4);
						}
						break;
					case 2:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(7023);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7024);
						((ConcatenationContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							((ConcatenationContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7025);
						concatenation(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						setState(7026);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(7027);
						match(BAR);
						setState(7028);
						match(BAR);
						setState(7029);
						concatenation(2);
						}
						break;
					}
					} 
				}
				setState(7034);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,988,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_interval_expression);
		int _la;
		try {
			setState(7059);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7035);
				match(DAY);
				setState(7040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7036);
					match(LEFT_PAREN);
					setState(7037);
					concatenation(0);
					setState(7038);
					match(RIGHT_PAREN);
					}
				}

				setState(7042);
				match(TO);
				setState(7043);
				match(SECOND);
				setState(7048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,990,_ctx) ) {
				case 1:
					{
					setState(7044);
					match(LEFT_PAREN);
					setState(7045);
					concatenation(0);
					setState(7046);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7050);
				match(YEAR);
				setState(7055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7051);
					match(LEFT_PAREN);
					setState(7052);
					concatenation(0);
					setState(7053);
					match(RIGHT_PAREN);
					}
				}

				setState(7057);
				match(TO);
				setState(7058);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7061);
			unary_expression();
			setState(7066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
			case 1:
				{
				setState(7062);
				match(LEFT_BRACKET);
				setState(7063);
				model_expression_element();
				setState(7064);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_model_expression_element);
		int _la;
		try {
			setState(7091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7070);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
				case 1:
					{
					setState(7068);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(7069);
					expression();
					}
					break;
				}
				setState(7079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7072);
					match(COMMA);
					setState(7075);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
					case 1:
						{
						setState(7073);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(7074);
						expression();
						}
						break;
					}
					}
					}
					setState(7081);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7082);
				single_column_for_loop();
				setState(7087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7083);
					match(COMMA);
					setState(7084);
					single_column_for_loop();
					}
					}
					setState(7089);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7090);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext fromExpr;
		public ExpressionContext toExpr;
		public Token action_type;
		public ExpressionContext action_expr;
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7093);
			match(FOR);
			setState(7094);
			column_name();
			setState(7112);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(7095);
				match(IN);
				setState(7096);
				match(LEFT_PAREN);
				setState(7098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
					{
					setState(7097);
					expressions();
					}
				}

				setState(7100);
				match(RIGHT_PAREN);
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(7103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(7101);
					match(LIKE);
					setState(7102);
					expression();
					}
				}

				setState(7105);
				match(FROM);
				setState(7106);
				((Single_column_for_loopContext)_localctx).fromExpr = expression();
				setState(7107);
				match(TO);
				setState(7108);
				((Single_column_for_loopContext)_localctx).toExpr = expression();
				setState(7109);
				((Single_column_for_loopContext)_localctx).action_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECREMENT || _la==INCREMENT) ) {
					((Single_column_for_loopContext)_localctx).action_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7110);
				((Single_column_for_loopContext)_localctx).action_expr = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Paren_column_listContext paren_column_list() {
			return getRuleContext(Paren_column_listContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7114);
			match(FOR);
			setState(7115);
			paren_column_list();
			setState(7116);
			match(IN);
			setState(7117);
			match(LEFT_PAREN);
			setState(7124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
			case 1:
				{
				setState(7118);
				subquery();
				}
				break;
			case 2:
				{
				setState(7119);
				match(LEFT_PAREN);
				setState(7121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
					{
					setState(7120);
					expressions();
					}
				}

				setState(7123);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(7126);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_unary_expression);
		int _la;
		try {
			setState(7144);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7128);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7129);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7130);
				match(PRIOR);
				setState(7131);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7132);
				match(CONNECT_BY_ROOT);
				setState(7133);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7134);
				match(NEW);
				setState(7135);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7136);
				match(DISTINCT);
				setState(7137);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7138);
				match(ALL);
				setState(7139);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7140);
				case_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7141);
				quantified_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7142);
				standard_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7143);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_case_statement);
		try {
			setState(7148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7146);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7147);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(7150);
				label_name();
				}
			}

			setState(7153);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(7154);
			expression();
			setState(7156); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7155);
				simple_case_when_part();
				}
				}
				setState(7158); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7160);
				case_else_part();
				}
			}

			setState(7163);
			match(END);
			setState(7165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
			case 1:
				{
				setState(7164);
				match(CASE);
				}
				break;
			}
			setState(7168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
			case 1:
				{
				setState(7167);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7170);
			match(WHEN);
			setState(7171);
			expression();
			setState(7172);
			match(THEN);
			setState(7175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1011,_ctx) ) {
			case 1:
				{
				setState(7173);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7174);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(7177);
				label_name();
				}
			}

			setState(7180);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(7182); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7181);
				searched_case_when_part();
				}
				}
				setState(7184); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7186);
				case_else_part();
				}
			}

			setState(7189);
			match(END);
			setState(7191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				{
				setState(7190);
				match(CASE);
				}
				break;
			}
			setState(7194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
			case 1:
				{
				setState(7193);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7196);
			match(WHEN);
			setState(7197);
			expression();
			setState(7198);
			match(THEN);
			setState(7201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				{
				setState(7199);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7200);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7203);
			match(ELSE);
			setState(7206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
			case 1:
				{
				setState(7204);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(7205);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_atom);
		try {
			int _alt;
			setState(7227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1020,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7208);
				table_element();
				setState(7209);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7211);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7212);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7213);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7214);
				match(LEFT_PAREN);
				setState(7215);
				subquery();
				setState(7216);
				match(RIGHT_PAREN);
				setState(7220);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7217);
						subquery_operation_part();
						}
						} 
					}
					setState(7222);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1019,_ctx);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7223);
				match(LEFT_PAREN);
				setState(7224);
				expressions();
				setState(7225);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7229);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
			case 1:
				{
				setState(7230);
				match(LEFT_PAREN);
				setState(7231);
				subquery();
				setState(7232);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(7234);
				match(LEFT_PAREN);
				setState(7235);
				expression();
				setState(7236);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_functionContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode TO_DATE() { return getToken(PlSqlParser.TO_DATE, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function; }
	}

	public final String_functionContext string_function() throws RecognitionException {
		String_functionContext _localctx = new String_functionContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_string_function);
		int _la;
		try {
			setState(7310);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUBSTR:
				enterOuterAlt(_localctx, 1);
				{
				setState(7240);
				match(SUBSTR);
				setState(7241);
				match(LEFT_PAREN);
				setState(7242);
				expression();
				setState(7243);
				match(COMMA);
				setState(7244);
				expression();
				setState(7247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7245);
					match(COMMA);
					setState(7246);
					expression();
					}
				}

				setState(7249);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7251);
				match(TO_CHAR);
				setState(7252);
				match(LEFT_PAREN);
				setState(7256);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
				case 1:
					{
					setState(7253);
					table_element();
					}
					break;
				case 2:
					{
					setState(7254);
					standard_function();
					}
					break;
				case 3:
					{
					setState(7255);
					expression();
					}
					break;
				}
				setState(7260);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					setState(7258);
					match(COMMA);
					setState(7259);
					string();
					}
					break;
				}
				setState(7264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7262);
					match(COMMA);
					setState(7263);
					string();
					}
				}

				setState(7266);
				match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7268);
				match(DECODE);
				setState(7269);
				match(LEFT_PAREN);
				setState(7270);
				expressions();
				setState(7271);
				match(RIGHT_PAREN);
				}
				break;
			case CHR:
				enterOuterAlt(_localctx, 4);
				{
				setState(7273);
				match(CHR);
				setState(7274);
				match(LEFT_PAREN);
				setState(7275);
				concatenation(0);
				setState(7276);
				match(USING);
				setState(7277);
				match(NCHAR_CS);
				setState(7278);
				match(RIGHT_PAREN);
				}
				break;
			case NVL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7280);
				match(NVL);
				setState(7281);
				match(LEFT_PAREN);
				setState(7282);
				expression();
				setState(7283);
				match(COMMA);
				setState(7284);
				expression();
				setState(7285);
				match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 6);
				{
				setState(7287);
				match(TRIM);
				setState(7288);
				match(LEFT_PAREN);
				setState(7296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1028,_ctx) ) {
				case 1:
					{
					setState(7290);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(7289);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7293);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(7292);
						string();
						}
					}

					setState(7295);
					match(FROM);
					}
					break;
				}
				setState(7298);
				concatenation(0);
				setState(7299);
				match(RIGHT_PAREN);
				}
				break;
			case TO_DATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(7301);
				match(TO_DATE);
				setState(7302);
				match(LEFT_PAREN);
				setState(7303);
				expression();
				setState(7306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7304);
					match(COMMA);
					setState(7305);
					string();
					}
				}

				setState(7308);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public String_functionContext string_function() {
			return getRuleContext(String_functionContext.class,0);
		}
		public Numeric_function_wrapperContext numeric_function_wrapper() {
			return getRuleContext(Numeric_function_wrapperContext.class,0);
		}
		public Other_functionContext other_function() {
			return getRuleContext(Other_functionContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_standard_function);
		try {
			setState(7315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1031,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7312);
				string_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7313);
				numeric_function_wrapper();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7314);
				other_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_wrapperContext extends ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return getRuleContext(Numeric_functionContext.class,0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return getRuleContext(Single_column_for_loopContext.class,0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_wrapper; }
	}

	public final Numeric_function_wrapperContext numeric_function_wrapper() throws RecognitionException {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_numeric_function_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7317);
			numeric_function();
			setState(7320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
			case 1:
				{
				setState(7318);
				single_column_for_loop();
				}
				break;
			case 2:
				{
				setState(7319);
				multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_functionContext extends ParserRuleContext {
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode LEAST() { return getToken(PlSqlParser.LEAST, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(PlSqlParser.GREATEST, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function; }
	}

	public final Numeric_functionContext numeric_function() throws RecognitionException {
		Numeric_functionContext _localctx = new Numeric_functionContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_numeric_function);
		int _la;
		try {
			setState(7380);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(7322);
				match(SUM);
				setState(7323);
				match(LEFT_PAREN);
				setState(7325);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
				case 1:
					{
					setState(7324);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7327);
				expression();
				setState(7328);
				match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7330);
				match(COUNT);
				setState(7331);
				match(LEFT_PAREN);
				setState(7339);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(7332);
					match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(7337);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (NULL - 392)) | (1L << (NULLS - 392)) | (1L << (NUMBER - 392)) | (1L << (NUMERIC - 392)) | (1L << (NVARCHAR2 - 392)) | (1L << (OBJECT - 392)) | (1L << (OFF - 392)) | (1L << (OID - 392)) | (1L << (OLD - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPERATOR - 392)) | (1L << (ORADATA - 392)) | (1L << (ORDINALITY - 392)) | (1L << (OSERROR - 392)) | (1L << (OUTER - 392)) | (1L << (OUT - 392)) | (1L << (OVER - 392)) | (1L << (OVERRIDING - 392)) | (1L << (PACKAGE - 392)) | (1L << (PARALLEL_ENABLE - 392)) | (1L << (PARAMETERS - 392)) | (1L << (PARENT - 392)) | (1L << (PARTITION - 392)) | (1L << (PASSING - 392)) | (1L << (PATH - 392)) | (1L << (PIPELINED - 392)) | (1L << (PLAN - 392)) | (1L << (PLS_INTEGER - 392)) | (1L << (POSITIVEN - 392)) | (1L << (POSITIVE - 392)) | (1L << (PRAGMA - 392)) | (1L << (PRECEDING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PRECISION - 456)) | (1L << (PRESENT - 456)) | (1L << (PRIOR - 456)) | (1L << (PRIVILEGE - 456)) | (1L << (PROGRAM - 456)) | (1L << (RAISE - 456)) | (1L << (RANGE - 456)) | (1L << (RAW - 456)) | (1L << (READ - 456)) | (1L << (REAL - 456)) | (1L << (RECORD - 456)) | (1L << (REFERENCE - 456)) | (1L << (REFERENCING - 456)) | (1L << (REF - 456)) | (1L << (REJECT - 456)) | (1L << (RELIES_ON - 456)) | (1L << (RENAME - 456)) | (1L << (REPLACE - 456)) | (1L << (RESPECT - 456)) | (1L << (RESTRICT_REFERENCES - 456)) | (1L << (RESULT_CACHE - 456)) | (1L << (RESULT - 456)) | (1L << (RETURNING - 456)) | (1L << (RETURN - 456)) | (1L << (REUSE - 456)) | (1L << (REVERSE - 456)) | (1L << (REVOKE - 456)) | (1L << (RIGHT - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROWID - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (RULES - 456)) | (1L << (SAMPLE - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SAVEPOINT - 520)) | (1L << (SAVE - 520)) | (1L << (SCHEMACHECK - 520)) | (1L << (SCHEMA - 520)) | (1L << (SCN - 520)) | (1L << (SECOND - 520)) | (1L << (SEED - 520)) | (1L << (SEGMENT - 520)) | (1L << (SELF - 520)) | (1L << (SEQUENTIAL - 520)) | (1L << (SERIALIZABLE - 520)) | (1L << (SERIALLY_REUSABLE - 520)) | (1L << (SERVERERROR - 520)) | (1L << (SESSIONTIMEZONE - 520)) | (1L << (SET - 520)) | (1L << (SETS - 520)) | (1L << (SETTINGS - 520)) | (1L << (SHOW - 520)) | (1L << (SHUTDOWN - 520)) | (1L << (SIBLINGS - 520)) | (1L << (SIGNTYPE - 520)) | (1L << (SIMPLE_INTEGER - 520)) | (1L << (SINGLE - 520)) | (1L << (SKIP_ - 520)) | (1L << (SMALLINT - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOME - 520)) | (1L << (SPECIFICATION - 520)) | (1L << (SQLDATA - 520)) | (1L << (SQLERROR - 520)) | (1L << (STANDALONE - 520)) | (1L << (STARTUP - 520)) | (1L << (STATEMENT_ID - 520)) | (1L << (STATEMENT - 520)) | (1L << (STATIC - 520)) | (1L << (STATISTICS - 520)) | (1L << (STORE - 520)) | (1L << (STRING - 520)) | (1L << (SUBMULTISET - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBSTITUTABLE - 520)) | (1L << (SUBTYPE - 520)) | (1L << (SUCCESS - 520)) | (1L << (SUSPEND - 520)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUE - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNIQUE - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (DECODE - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (NVL - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROUND - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TO_CHAR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (LEAST - 714)) | (1L << (GREATEST - 714)) | (1L << (TO_DATE - 714)) | (1L << (NATIONAL_CHAR_STRING_LIT - 714)) | (1L << (UNSIGNED_INTEGER - 714)) | (1L << (APPROXIMATE_NUM_LIT - 714)) | (1L << (CHAR_STRING - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (LEFT_PAREN - 714)) | (1L << (PLUS_SIGN - 714)) | (1L << (MINUS_SIGN - 714)) | (1L << (BINDVAR - 714)) | (1L << (COLON - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
						{
						setState(7334);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1034,_ctx) ) {
						case 1:
							{
							setState(7333);
							_la = _input.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						setState(7336);
						concatenation(0);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7341);
				match(RIGHT_PAREN);
				setState(7343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
				case 1:
					{
					setState(7342);
					over_clause();
					}
					break;
				}
				}
				break;
			case ROUND:
				enterOuterAlt(_localctx, 3);
				{
				setState(7345);
				match(ROUND);
				setState(7346);
				match(LEFT_PAREN);
				setState(7347);
				expression();
				setState(7350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7348);
					match(COMMA);
					setState(7349);
					match(UNSIGNED_INTEGER);
					}
				}

				setState(7352);
				match(RIGHT_PAREN);
				}
				break;
			case AVG:
				enterOuterAlt(_localctx, 4);
				{
				setState(7354);
				match(AVG);
				setState(7355);
				match(LEFT_PAREN);
				setState(7357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
				case 1:
					{
					setState(7356);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7359);
				expression();
				setState(7360);
				match(RIGHT_PAREN);
				}
				break;
			case MAX:
				enterOuterAlt(_localctx, 5);
				{
				setState(7362);
				match(MAX);
				setState(7363);
				match(LEFT_PAREN);
				setState(7365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1040,_ctx) ) {
				case 1:
					{
					setState(7364);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7367);
				expression();
				setState(7368);
				match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 6);
				{
				setState(7370);
				match(LEAST);
				setState(7371);
				match(LEFT_PAREN);
				setState(7372);
				expressions();
				setState(7373);
				match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 7);
				{
				setState(7375);
				match(GREATEST);
				setState(7376);
				match(LEFT_PAREN);
				setState(7377);
				expressions();
				setState(7378);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PlSqlParser.COALESCE, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentsContext function_arguments() {
			return getRuleContext(Function_argumentsContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_ISOPEN() { return getToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(PlSqlParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_NOTFOUND() { return getToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_ROWCOUNT() { return getToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Other_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_function; }
	}

	public final Other_functionContext other_function() throws RecognitionException {
		Other_functionContext _localctx = new Other_functionContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_other_function);
		int _la;
		try {
			int _alt;
			setState(7700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1097,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7382);
				over_clause_keyword();
				setState(7383);
				function_argument_analytic();
				setState(7385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
				case 1:
					{
					setState(7384);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7387);
				regular_id();
				setState(7388);
				function_argument_modeling();
				setState(7390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1043,_ctx) ) {
				case 1:
					{
					setState(7389);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7392);
				match(COUNT);
				setState(7393);
				match(LEFT_PAREN);
				setState(7399);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(7394);
					match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(7396);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1044,_ctx) ) {
					case 1:
						{
						setState(7395);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(7398);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7401);
				match(RIGHT_PAREN);
				setState(7403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1046,_ctx) ) {
				case 1:
					{
					setState(7402);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7405);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7406);
				match(LEFT_PAREN);
				setState(7413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1047,_ctx) ) {
				case 1:
					{
					setState(7407);
					match(MULTISET);
					setState(7408);
					match(LEFT_PAREN);
					setState(7409);
					subquery();
					setState(7410);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(7412);
					concatenation(0);
					}
					break;
				}
				setState(7415);
				match(AS);
				setState(7416);
				type_spec();
				setState(7417);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7419);
				match(COALESCE);
				setState(7420);
				match(LEFT_PAREN);
				setState(7421);
				table_element();
				setState(7427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7422);
					match(COMMA);
					setState(7425);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
					case PLUS_SIGN:
						{
						setState(7423);
						numeric();
						}
						break;
					case NATIONAL_CHAR_STRING_LIT:
					case CHAR_STRING:
						{
						setState(7424);
						string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(7429);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7431);
				match(COLLECT);
				setState(7432);
				match(LEFT_PAREN);
				setState(7434);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
				case 1:
					{
					setState(7433);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7436);
				concatenation(0);
				setState(7438);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7437);
					collect_order_by_part();
					}
				}

				setState(7440);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7442);
				within_or_over_clause_keyword();
				{
				setState(7443);
				function_arguments();
				setState(7445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KEEP) {
					{
					setState(7444);
					keep_clause();
					}
				}

				}
				setState(7448); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7447);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7450); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1053,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7452);
				cursor_name();
				setState(7453);
				_la = _input.LA(1);
				if ( !(((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (PERCENT_FOUND - 439)) | (1L << (PERCENT_ISOPEN - 439)) | (1L << (PERCENT_NOTFOUND - 439)) | (1L << (PERCENT_ROWCOUNT - 439)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7455);
				match(DECOMPOSE);
				setState(7456);
				match(LEFT_PAREN);
				setState(7457);
				concatenation(0);
				setState(7459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(7458);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7461);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7463);
				match(EXTRACT);
				setState(7464);
				match(LEFT_PAREN);
				setState(7465);
				regular_id();
				setState(7466);
				match(FROM);
				setState(7467);
				concatenation(0);
				setState(7468);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7470);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7471);
				function_argument_analytic();
				setState(7473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(7472);
					respect_or_ignore_nulls();
					}
				}

				setState(7475);
				over_clause();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7477);
				standard_prediction_function_keyword();
				setState(7478);
				match(LEFT_PAREN);
				setState(7479);
				expressions();
				setState(7481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(7480);
					cost_matrix_clause();
					}
				}

				setState(7484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7483);
					using_clause();
					}
				}

				setState(7486);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7488);
				match(TRANSLATE);
				setState(7489);
				match(LEFT_PAREN);
				setState(7490);
				expression();
				setState(7493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7491);
					match(USING);
					setState(7492);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7495);
					match(COMMA);
					setState(7496);
					expression();
					}
					}
					setState(7501);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7502);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7504);
				match(TREAT);
				setState(7505);
				match(LEFT_PAREN);
				setState(7506);
				expression();
				setState(7507);
				match(AS);
				setState(7509);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
				case 1:
					{
					setState(7508);
					match(REF);
					}
					break;
				}
				setState(7511);
				type_spec();
				setState(7512);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7514);
				match(TRIM);
				setState(7515);
				match(LEFT_PAREN);
				setState(7523);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
				case 1:
					{
					setState(7517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(7516);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7520);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(7519);
						string();
						}
					}

					setState(7522);
					match(FROM);
					}
					break;
				}
				setState(7525);
				concatenation(0);
				setState(7526);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7528);
				match(XMLAGG);
				setState(7529);
				match(LEFT_PAREN);
				setState(7530);
				expression();
				setState(7532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(7531);
					order_by_clause();
					}
				}

				setState(7534);
				match(RIGHT_PAREN);
				setState(7537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1065,_ctx) ) {
				case 1:
					{
					setState(7535);
					match(PERIOD);
					setState(7536);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7539);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7540);
				match(LEFT_PAREN);
				setState(7545); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7542);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7541);
						match(COMMA);
						}
					}

					setState(7544);
					xml_multiuse_expression_element();
					}
					}
					setState(7547); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0) );
				setState(7549);
				match(RIGHT_PAREN);
				setState(7552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1068,_ctx) ) {
				case 1:
					{
					setState(7550);
					match(PERIOD);
					setState(7551);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7554);
				match(XMLELEMENT);
				setState(7555);
				match(LEFT_PAREN);
				setState(7557);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
				case 1:
					{
					setState(7556);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1070,_ctx) ) {
				case 1:
					{
					setState(7559);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7562);
				expression();
				setState(7565);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1071,_ctx) ) {
				case 1:
					{
					setState(7563);
					match(COMMA);
					setState(7564);
					xml_attributes_clause();
					}
					break;
				}
				setState(7574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7567);
					match(COMMA);
					setState(7568);
					expression();
					setState(7570);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (NATIONAL_CHAR_STRING_LIT - 714)) | (1L << (CHAR_STRING - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
						{
						setState(7569);
						column_alias();
						}
					}

					}
					}
					setState(7576);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7577);
				match(RIGHT_PAREN);
				setState(7580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1074,_ctx) ) {
				case 1:
					{
					setState(7578);
					match(PERIOD);
					setState(7579);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7582);
				match(XMLEXISTS);
				setState(7583);
				match(LEFT_PAREN);
				setState(7584);
				expression();
				setState(7586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7585);
					xml_passing_clause();
					}
				}

				setState(7588);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7590);
				match(XMLPARSE);
				setState(7591);
				match(LEFT_PAREN);
				setState(7592);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7593);
				concatenation(0);
				setState(7595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(7594);
					match(WELLFORMED);
					}
				}

				setState(7597);
				match(RIGHT_PAREN);
				setState(7600);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
				case 1:
					{
					setState(7598);
					match(PERIOD);
					setState(7599);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7602);
				match(XMLPI);
				setState(7603);
				match(LEFT_PAREN);
				setState(7608);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(7604);
					match(NAME);
					setState(7605);
					identifier();
					}
					break;
				case EVALNAME:
					{
					setState(7606);
					match(EVALNAME);
					setState(7607);
					concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7610);
					match(COMMA);
					setState(7611);
					concatenation(0);
					}
				}

				setState(7614);
				match(RIGHT_PAREN);
				setState(7617);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1080,_ctx) ) {
				case 1:
					{
					setState(7615);
					match(PERIOD);
					setState(7616);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7619);
				match(XMLQUERY);
				setState(7620);
				match(LEFT_PAREN);
				setState(7621);
				concatenation(0);
				setState(7623);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7622);
					xml_passing_clause();
					}
				}

				setState(7625);
				match(RETURNING);
				setState(7626);
				match(CONTENT);
				setState(7630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(7627);
					match(NULL);
					setState(7628);
					match(ON);
					setState(7629);
					match(EMPTY);
					}
				}

				setState(7632);
				match(RIGHT_PAREN);
				setState(7635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1083,_ctx) ) {
				case 1:
					{
					setState(7633);
					match(PERIOD);
					setState(7634);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7637);
				match(XMLROOT);
				setState(7638);
				match(LEFT_PAREN);
				setState(7639);
				concatenation(0);
				setState(7642);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1084,_ctx) ) {
				case 1:
					{
					setState(7640);
					match(COMMA);
					setState(7641);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(7646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7644);
					match(COMMA);
					setState(7645);
					xmlroot_param_standalone_part();
					}
				}

				setState(7648);
				match(RIGHT_PAREN);
				setState(7651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1086,_ctx) ) {
				case 1:
					{
					setState(7649);
					match(PERIOD);
					setState(7650);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7653);
				match(XMLSERIALIZE);
				setState(7654);
				match(LEFT_PAREN);
				setState(7655);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7656);
				concatenation(0);
				setState(7659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7657);
					match(AS);
					setState(7658);
					type_spec();
					}
				}

				setState(7662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(7661);
					xmlserialize_param_enconding_part();
					}
				}

				setState(7665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(7664);
					xmlserialize_param_version_part();
					}
				}

				setState(7668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(7667);
					xmlserialize_param_ident_part();
					}
				}

				setState(7672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(7670);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7671);
					match(DEFAULTS);
					}
				}

				setState(7674);
				match(RIGHT_PAREN);
				setState(7677);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
				case 1:
					{
					setState(7675);
					match(PERIOD);
					setState(7676);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7679);
				match(XMLTABLE);
				setState(7680);
				match(LEFT_PAREN);
				setState(7682);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1093,_ctx) ) {
				case 1:
					{
					setState(7681);
					xml_namespaces_clause();
					}
					break;
				}
				setState(7684);
				concatenation(0);
				setState(7686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(7685);
					xml_passing_clause();
					}
				}

				setState(7693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(7688);
					match(COLUMNS);
					setState(7689);
					xml_table_column();
					{
					setState(7690);
					match(COMMA);
					setState(7691);
					xml_table_column();
					}
					}
				}

				setState(7695);
				match(RIGHT_PAREN);
				setState(7698);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
				case 1:
					{
					setState(7696);
					match(PERIOD);
					setState(7697);
					general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7702);
			_la = _input.LA(1);
			if ( !(((((_la - 705)) & ~0x3f) == 0 && ((1L << (_la - 705)) & ((1L << (AVG - 705)) | (1L << (CORR - 705)) | (1L << (COVAR_ - 705)) | (1L << (LAG - 705)) | (1L << (LEAD - 705)) | (1L << (MAX - 705)) | (1L << (MEDIAN - 705)) | (1L << (MIN - 705)) | (1L << (NTILE - 705)) | (1L << (RATIO_TO_REPORT - 705)) | (1L << (REGR_ - 705)) | (1L << (ROW_NUMBER - 705)) | (1L << (SUM - 705)) | (1L << (STDDEV - 705)) | (1L << (VAR_ - 705)) | (1L << (VARIANCE - 705)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7704);
			_la = _input.LA(1);
			if ( !(((((_la - 698)) & ~0x3f) == 0 && ((1L << (_la - 698)) & ((1L << (CUME_DIST - 698)) | (1L << (DENSE_RANK - 698)) | (1L << (LISTAGG - 698)) | (1L << (PERCENT_RANK - 698)) | (1L << (PERCENTILE_CONT - 698)) | (1L << (PERCENTILE_DISC - 698)) | (1L << (RANK - 698)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7706);
			_la = _input.LA(1);
			if ( !(((((_la - 692)) & ~0x3f) == 0 && ((1L << (_la - 692)) & ((1L << (PREDICTION - 692)) | (1L << (PREDICTION_BOUNDS - 692)) | (1L << (PREDICTION_COST - 692)) | (1L << (PREDICTION_DETAILS - 692)) | (1L << (PREDICTION_PROBABILITY - 692)) | (1L << (PREDICTION_SET - 692)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7708);
			match(OVER);
			setState(7709);
			match(LEFT_PAREN);
			setState(7711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7710);
				query_partition_clause();
				}
			}

			setState(7717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7713);
				order_by_clause();
				setState(7715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(7714);
					windowing_clause();
					}
				}

				}
			}

			setState(7719);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7721);
			windowing_type();
			setState(7728);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(7722);
				match(BETWEEN);
				setState(7723);
				windowing_elements();
				setState(7724);
				match(AND);
				setState(7725);
				windowing_elements();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(7727);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7730);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_windowing_elements);
		int _la;
		try {
			setState(7739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7732);
				match(UNBOUNDED);
				setState(7733);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7734);
				match(CURRENT);
				setState(7735);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7736);
				concatenation(0);
				setState(7737);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_using_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7741);
			match(USING);
			setState(7751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(7742);
				match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case IN:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(7747); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7744);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7743);
							match(COMMA);
							}
						}

						setState(7746);
						using_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7749); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1104,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1107,_ctx) ) {
			case 1:
				{
				setState(7753);
				match(IN);
				setState(7755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1106,_ctx) ) {
				case 1:
					{
					setState(7754);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7757);
				match(OUT);
				}
				break;
			}
			setState(7760);
			select_list_elements();
			setState(7762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1108,_ctx) ) {
			case 1:
				{
				setState(7761);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7764);
			match(ORDER);
			setState(7765);
			match(BY);
			setState(7766);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_within_or_over_part);
		try {
			setState(7775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7768);
				match(WITHIN);
				setState(7769);
				match(GROUP);
				setState(7770);
				match(LEFT_PAREN);
				setState(7771);
				order_by_clause();
				setState(7772);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7774);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7777);
			match(COST);
			setState(7799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(7778);
				match(MODEL);
				setState(7780);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(7779);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(7782);
				match(LEFT_PAREN);
				setState(7787); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7784);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7783);
						match(COMMA);
						}
					}

					setState(7786);
					cost_class_name();
					}
					}
					setState(7789); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
				setState(7791);
				match(RIGHT_PAREN);
				setState(7792);
				match(VALUES);
				setState(7793);
				match(LEFT_PAREN);
				setState(7795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
					{
					setState(7794);
					expressions();
					}
				}

				setState(7797);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7801);
			match(PASSING);
			setState(7804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(7802);
				match(BY);
				setState(7803);
				match(VALUE);
				}
			}

			setState(7806);
			expression();
			setState(7808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (NATIONAL_CHAR_STRING_LIT - 714)) | (1L << (CHAR_STRING - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (INTRODUCER - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) {
				{
				setState(7807);
				column_alias();
				}
			}

			{
			setState(7810);
			match(COMMA);
			setState(7811);
			expression();
			setState(7813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
			case 1:
				{
				setState(7812);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7815);
			match(XMLATTRIBUTES);
			setState(7816);
			match(LEFT_PAREN);
			setState(7818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
			case 1:
				{
				setState(7817);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
			case 1:
				{
				setState(7820);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7827); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7823);
					match(COMMA);
					}
				}

				setState(7826);
				xml_multiuse_expression_element();
				}
				}
				setState(7829); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0) );
			setState(7831);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7833);
			match(XMLNAMESPACES);
			setState(7834);
			match(LEFT_PAREN);
			setState(7838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1122,_ctx) ) {
			case 1:
				{
				setState(7835);
				concatenation(0);
				setState(7836);
				column_alias();
				}
				break;
			}
			setState(7846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7840);
				match(COMMA);
				setState(7841);
				concatenation(0);
				setState(7842);
				column_alias();
				}
				}
				setState(7848);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(7849);
				xml_general_default_part();
				}
			}

			setState(7852);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7854);
			xml_column_name();
			setState(7865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(7855);
				match(FOR);
				setState(7856);
				match(ORDINALITY);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(7857);
				type_spec();
				setState(7860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(7858);
					match(PATH);
					setState(7859);
					concatenation(0);
					}
				}

				setState(7863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(7862);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7867);
			match(DEFAULT);
			setState(7868);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7870);
			expression();
			setState(7877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7871);
				match(AS);
				setState(7875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1128,_ctx) ) {
				case 1:
					{
					setState(7872);
					id_expression();
					}
					break;
				case 2:
					{
					setState(7873);
					match(EVALNAME);
					setState(7874);
					concatenation(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7879);
			match(VERSION);
			setState(7883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1130,_ctx) ) {
			case 1:
				{
				setState(7880);
				match(NO);
				setState(7881);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(7882);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7885);
			match(STANDALONE);
			setState(7891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(7886);
				match(YES);
				}
				break;
			case NO:
				{
				setState(7887);
				match(NO);
				setState(7889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(7888);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7893);
			match(ENCODING);
			setState(7894);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7896);
			match(VERSION);
			setState(7897);
			concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(7907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(7899);
				match(NO);
				setState(7900);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7901);
				match(INDENT);
				setState(7905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(7902);
					match(SIZE);
					setState(7903);
					match(EQUALS_OP);
					setState(7904);
					concatenation(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode PROMPT() { return getToken(PlSqlParser.PROMPT, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode START_CMD() { return getToken(PlSqlParser.START_CMD, 0); }
		public Sqlplus_whenever_commandContext sqlplus_whenever_command() {
			return getRuleContext(Sqlplus_whenever_commandContext.class,0);
		}
		public Sqlplus_set_commandContext sqlplus_set_command() {
			return getRuleContext(Sqlplus_set_commandContext.class,0);
		}
		public Sqlplus_execute_commandContext sqlplus_execute_command() {
			return getRuleContext(Sqlplus_execute_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_sql_plus_command);
		int _la;
		try {
			setState(7918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7909);
				match(SOLIDUS);
				}
				break;
			case EXIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7910);
				match(EXIT);
				}
				break;
			case PROMPT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7911);
				match(PROMPT);
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(7912);
				match(SHOW);
				setState(7913);
				_la = _input.LA(1);
				if ( !(_la==ERR || _la==ERRORS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case START_CMD:
				enterOuterAlt(_localctx, 5);
				{
				setState(7914);
				match(START_CMD);
				}
				break;
			case WHENEVER:
				enterOuterAlt(_localctx, 6);
				{
				setState(7915);
				sqlplus_whenever_command();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 7);
				{
				setState(7916);
				sqlplus_set_command();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 8);
				{
				setState(7917);
				sqlplus_execute_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlplus_execute_commandContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Sqlplus_execute_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlplus_execute_command; }
	}

	public final Sqlplus_execute_commandContext sqlplus_execute_command() throws RecognitionException {
		Sqlplus_execute_commandContext _localctx = new Sqlplus_execute_commandContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_sqlplus_execute_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7920);
			match(EXECUTE);
			setState(7921);
			function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlplus_whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public Sqlplus_whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlplus_whenever_command; }
	}

	public final Sqlplus_whenever_commandContext sqlplus_whenever_command() throws RecognitionException {
		Sqlplus_whenever_commandContext _localctx = new Sqlplus_whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_sqlplus_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7923);
			match(WHENEVER);
			setState(7924);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7930);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(7925);
				match(EXIT);
				setState(7926);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7927);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(7928);
				match(CONTINUE);
				setState(7929);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return getRuleContext(ArgumentsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Function_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_arguments; }
	}

	public final Function_argumentsContext function_arguments() throws RecognitionException {
		Function_argumentsContext _localctx = new Function_argumentsContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_function_arguments);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7932);
			match(LEFT_PAREN);
			setState(7933);
			arguments();
			setState(7934);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentsContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arguments; }
	}

	public final ArgumentsContext arguments() throws RecognitionException {
		ArgumentsContext _localctx = new ArgumentsContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
				{
				setState(7936);
				argument();
				}
			}

			setState(7941); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7939);
				match(COMMA);
				setState(7940);
				argument();
				}
				}
				setState(7943); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode BIND_VAR() { return getToken(PlSqlParser.BIND_VAR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_argument);
		try {
			setState(7950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1139,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7945);
				regular_id();
				setState(7946);
				match(BIND_VAR);
				setState(7947);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7949);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlplus_set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Sqlplus_set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlplus_set_command; }
	}

	public final Sqlplus_set_commandContext sqlplus_set_command() throws RecognitionException {
		Sqlplus_set_commandContext _localctx = new Sqlplus_set_commandContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_sqlplus_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7952);
			match(SET);
			setState(7953);
			regular_id();
			setState(7959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1140,_ctx) ) {
			case 1:
				{
				setState(7954);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(7955);
				match(ON);
				}
				break;
			case 3:
				{
				setState(7956);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(7957);
				numeric();
				}
				break;
			case 5:
				{
				setState(7958);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7961);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(7962);
				match(FOR);
				}
			}

			setState(7965);
			match(LEFT_PAREN);
			setState(7967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
				{
				setState(7966);
				expressions();
				}
			}

			setState(7969);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_column_alias);
		int _la;
		try {
			setState(7979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7971);
					match(AS);
					}
				}

				setState(7976);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(7974);
					identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(7975);
					string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7978);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_table_alias);
		try {
			setState(7983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7981);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(7982);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7985);
			match(WHERE);
			setState(7990);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(7986);
				match(CURRENT);
				setState(7987);
				match(OF);
				setState(7988);
				cursor_name();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(7989);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_into_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK) {
				{
				setState(7992);
				match(BULK);
				setState(7993);
				match(COLLECT);
				}
			}

			setState(7996);
			match(INTO);
			setState(8001); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7998);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7997);
						match(COMMA);
						}
					}

					setState(8000);
					variable_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8003); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1150,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_xml_column_name);
		try {
			setState(8007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8005);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(8006);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdentifiersContext identifiers() {
			return getRuleContext(IdentifiersContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8009);
			identifiers();
			setState(8012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(8010);
				match(AT_SIGN);
				setState(8011);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndextypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndextypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indextype; }
	}

	public final IndextypeContext indextype() throws RecognitionException {
		IndextypeContext _localctx = new IndextypeContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_indextype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8014);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grantee_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Identified_byContext identified_by() {
			return getRuleContext(Identified_byContext.class,0);
		}
		public Grantee_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee_name; }
	}

	public final Grantee_nameContext grantee_name() throws RecognitionException {
		Grantee_nameContext _localctx = new Grantee_nameContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_grantee_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8016);
			id_expression();
			setState(8018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIED) {
				{
				setState(8017);
				identified_by();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_role_name);
		try {
			setState(8022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8020);
				id_expression();
				}
				break;
			case CONNECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8021);
				match(CONNECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdentifiersContext identifiers() {
			return getRuleContext(IdentifiersContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8024);
			identifiers();
			setState(8027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(8025);
				match(AT_SIGN);
				setState(8026);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_variable_name);
		int _la;
		try {
			setState(8039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(8029);
					match(INTRODUCER);
					setState(8030);
					char_set_name();
					}
				}

				setState(8033);
				id_expression();
				setState(8036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(8034);
					match(PERIOD);
					setState(8035);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8038);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_cursor_name);
		try {
			setState(8043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8041);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8042);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_record_name);
		try {
			setState(8047);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8045);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8046);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8049);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public Table_fullnameContext table_fullname() {
			return getRuleContext(Table_fullnameContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8051);
			table_fullname();
			setState(8055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1161,_ctx) ) {
			case 1:
				{
				setState(8052);
				match(AT_SIGN);
				setState(8053);
				link_name();
				}
				break;
			case 2:
				{
				setState(8054);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Element_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_name; }
	}

	public final Element_nameContext element_name() throws RecognitionException {
		Element_nameContext _localctx = new Element_nameContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_element_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8057);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_archive_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Flashback_archive_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_archive_name; }
	}

	public final Flashback_archive_nameContext flashback_archive_name() throws RecognitionException {
		Flashback_archive_nameContext _localctx = new Flashback_archive_nameContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_flashback_archive_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8059);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Zonemap_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Zonemap_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zonemap_name; }
	}

	public final Zonemap_nameContext zonemap_name() throws RecognitionException {
		Zonemap_nameContext _localctx = new Zonemap_nameContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_zonemap_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8061);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subpartition_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Subpartition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartition_name; }
	}

	public final Subpartition_nameContext subpartition_name() throws RecognitionException {
		Subpartition_nameContext _localctx = new Subpartition_nameContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_subpartition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8063);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_item_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Lob_item_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_item_name; }
	}

	public final Lob_item_nameContext lob_item_name() throws RecognitionException {
		Lob_item_nameContext _localctx = new Lob_item_nameContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_lob_item_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8065);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dir_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Dir_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dir_object_name; }
	}

	public final Dir_object_nameContext dir_object_name() throws RecognitionException {
		Dir_object_nameContext _localctx = new Dir_object_nameContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_dir_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8067);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public User_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_object_name; }
	}

	public final User_object_nameContext user_object_name() throws RecognitionException {
		User_object_nameContext _localctx = new User_object_nameContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_user_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8069);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tablespace_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Tablespace_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespace_name; }
	}

	public final Tablespace_nameContext tablespace_name() throws RecognitionException {
		Tablespace_nameContext _localctx = new Tablespace_nameContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_tablespace_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8071);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8073);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_name; }
	}

	public final Partition_nameContext partition_name() throws RecognitionException {
		Partition_nameContext _localctx = new Partition_nameContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_partition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8075);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_object_name; }
	}

	public final Schema_object_nameContext schema_object_name() throws RecognitionException {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_schema_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8077);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lob_segnameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Lob_segnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lob_segname; }
	}

	public final Lob_segnameContext lob_segname() throws RecognitionException {
		Lob_segnameContext _localctx = new Lob_segnameContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_lob_segname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8079);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ilm_policy_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Ilm_policy_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ilm_policy_name; }
	}

	public final Ilm_policy_nameContext ilm_policy_name() throws RecognitionException {
		Ilm_policy_nameContext _localctx = new Ilm_policy_nameContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_ilm_policy_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8081);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Directory_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Directory_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directory_name; }
	}

	public final Directory_nameContext directory_name() throws RecognitionException {
		Directory_nameContext _localctx = new Directory_nameContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_directory_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8083);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_identifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_identifier; }
	}

	public final Full_identifierContext full_identifier() throws RecognitionException {
		Full_identifierContext _localctx = new Full_identifierContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_full_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8085);
			identifier();
			setState(8088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1162,_ctx) ) {
			case 1:
				{
				setState(8086);
				match(PERIOD);
				setState(8087);
				id_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_implementation_type_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8090);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Container_tableview_nameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Container_tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_container_tableview_name; }
	}

	public final Container_tableview_nameContext container_tableview_name() throws RecognitionException {
		Container_tableview_nameContext _localctx = new Container_tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_container_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8092);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8094);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_procedure_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8096);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_trigger_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8098);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_collection_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8100);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8102);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_fullnameContext extends ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return getRuleContext(Full_identifierContext.class,0);
		}
		public Table_fullnameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_fullname; }
	}

	public final Table_fullnameContext table_fullname() throws RecognitionException {
		Table_fullnameContext _localctx = new Table_fullnameContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_table_fullname);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8104);
			full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_object_nameContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public List<User_object_nameContext> user_object_name() {
			return getRuleContexts(User_object_nameContext.class);
		}
		public User_object_nameContext user_object_name(int i) {
			return getRuleContext(User_object_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode DIRECTORY() { return getToken(PlSqlParser.DIRECTORY, 0); }
		public Dir_object_nameContext dir_object_name() {
			return getRuleContext(Dir_object_nameContext.class,0);
		}
		public TerminalNode EDITION() { return getToken(PlSqlParser.EDITION, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public TerminalNode MINING() { return getToken(PlSqlParser.MINING, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode SOURCE() { return getToken(PlSqlParser.SOURCE, 0); }
		public TerminalNode RESOURCE() { return getToken(PlSqlParser.RESOURCE, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode TRANSLATION() { return getToken(PlSqlParser.TRANSLATION, 0); }
		public TerminalNode PROFILE() { return getToken(PlSqlParser.PROFILE, 0); }
		public Grant_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_object_name; }
	}

	public final Grant_object_nameContext grant_object_name() throws RecognitionException {
		Grant_object_nameContext _localctx = new Grant_object_nameContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_grant_object_name);
		int _la;
		try {
			setState(8130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1165,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8106);
				tableview_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8107);
				match(USER);
				setState(8112); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8109);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8108);
						match(COMMA);
						}
					}

					setState(8111);
					user_object_name();
					}
					}
					setState(8114); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (DELIMITED_ID - 714)) | (1L << (COMMA - 714)) | (1L << (REGULAR_ID - 714)))) != 0) );
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8116);
				match(DIRECTORY);
				setState(8117);
				dir_object_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8118);
				match(EDITION);
				setState(8119);
				schema_object_name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8120);
				match(MINING);
				setState(8121);
				match(MODEL);
				setState(8122);
				schema_object_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8123);
				match(JAVA);
				setState(8124);
				_la = _input.LA(1);
				if ( !(_la==RESOURCE || _la==SOURCE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8125);
				schema_object_name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8126);
				match(SQL);
				setState(8127);
				match(TRANSLATION);
				setState(8128);
				match(PROFILE);
				setState(8129);
				schema_object_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_column_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8136); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(8133);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8132);
						match(COMMA);
						}
					}

					setState(8135);
					column_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8138); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1167,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Paren_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paren_column_list; }
	}

	public final Paren_column_listContext paren_column_list() throws RecognitionException {
		Paren_column_listContext _localctx = new Paren_column_listContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_paren_column_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8140);
			match(LEFT_PAREN);
			setState(8141);
			column_list();
			setState(8142);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8144);
			match(KEEP);
			setState(8145);
			match(LEFT_PAREN);
			setState(8146);
			match(DENSE_RANK);
			setState(8147);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8148);
			order_by_clause();
			setState(8149);
			match(RIGHT_PAREN);
			setState(8151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1168,_ctx) ) {
			case 1:
				{
				setState(8150);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8153);
			match(LEFT_PAREN);
			setState(8163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0)) {
				{
				{
				setState(8155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8154);
					match(COMMA);
					}
				}

				setState(8157);
				argument();
				setState(8159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1170,_ctx) ) {
				case 1:
					{
					setState(8158);
					respect_or_ignore_nulls();
					}
					break;
				}
				}
				}
				setState(8165);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8166);
			match(RIGHT_PAREN);
			setState(8168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1172,_ctx) ) {
			case 1:
				{
				setState(8167);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(PlSqlParser.ASTERISK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8170);
			match(LEFT_PAREN);
			setState(8171);
			column_name();
			setState(8184);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8172);
				match(COMMA);
				setState(8175);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case PLUS_SIGN:
					{
					setState(8173);
					numeric();
					}
					break;
				case NULL:
					{
					setState(8174);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8177);
					match(COMMA);
					setState(8180);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
					case PLUS_SIGN:
						{
						setState(8178);
						numeric();
						}
						break;
					case NULL:
						{
						setState(8179);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(8186);
			match(USING);
			setState(8203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1180,_ctx) ) {
			case 1:
				{
				setState(8187);
				tableview_name();
				setState(8188);
				match(PERIOD);
				setState(8189);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(8191);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(8199); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8193);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8192);
						match(COMMA);
						}
					}

					setState(8195);
					expression();
					setState(8197);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1178,_ctx) ) {
					case 1:
						{
						setState(8196);
						column_alias();
						}
						break;
					}
					}
					}
					setState(8201); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)) | (1L << (REGULAR_ID - 710)))) != 0) );
				}
				break;
			}
			setState(8205);
			match(RIGHT_PAREN);
			setState(8207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1181,_ctx) ) {
			case 1:
				{
				setState(8206);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8209);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8210);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_type_spec);
		int _la;
		try {
			setState(8220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1184,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8212);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8214);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1182,_ctx) ) {
				case 1:
					{
					setState(8213);
					match(REF);
					}
					break;
				}
				setState(8216);
				type_name();
				setState(8218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(8217);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_datatype);
		int _la;
		try {
			setState(8253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHARACTER:
			case CHAR:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INTEGER:
			case INT:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR2:
			case VARCHAR:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8222);
				native_datatype_element();
				setState(8224);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1185,_ctx) ) {
				case 1:
					{
					setState(8223);
					precision_part();
					}
					break;
				}
				setState(8235);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1187,_ctx) ) {
				case 1:
					{
					setState(8226);
					match(WITH);
					setState(8228);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(8227);
						match(LOCAL);
						}
					}

					setState(8230);
					match(TIME);
					setState(8231);
					match(ZONE);
					}
					break;
				case 2:
					{
					setState(8232);
					match(CHARACTER);
					setState(8233);
					match(SET);
					setState(8234);
					char_set_name();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8237);
				match(INTERVAL);
				setState(8238);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(8239);
					match(LEFT_PAREN);
					setState(8240);
					expression();
					setState(8241);
					match(RIGHT_PAREN);
					}
				}

				setState(8245);
				match(TO);
				setState(8246);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1189,_ctx) ) {
				case 1:
					{
					setState(8247);
					match(LEFT_PAREN);
					setState(8248);
					expression();
					setState(8249);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8255);
			match(LEFT_PAREN);
			setState(8256);
			numeric();
			setState(8259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8257);
				match(COMMA);
				setState(8258);
				numeric();
				}
			}

			setState(8262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(8261);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8264);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_native_datatype_element);
		try {
			setState(8326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(8266);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(8267);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8268);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(8269);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8270);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8271);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8272);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(8273);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(8274);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(8275);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(8276);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(8277);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(8278);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(8279);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(8280);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(8281);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(8282);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(8283);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(8284);
				match(DOUBLE);
				setState(8286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1193,_ctx) ) {
				case 1:
					{
					setState(8285);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(8288);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(8289);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(8290);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(8291);
				match(LONG);
				setState(8293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1194,_ctx) ) {
				case 1:
					{
					setState(8292);
					match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(8295);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(8296);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(8297);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(8298);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(8299);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(8300);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(8301);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(8302);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(8303);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(8304);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(8305);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(8306);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(8307);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(8308);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(8309);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(8310);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(8311);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(8312);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(8313);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(8314);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(8315);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(8316);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(8317);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(8318);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(8319);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(8320);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(8321);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(8322);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(8323);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(8324);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(8325);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PlSqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8331);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(8328);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(8329);
				match(COLON);
				setState(8330);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1199,_ctx) ) {
			case 1:
				{
				setState(8334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(8333);
					match(INDICATOR);
					}
				}

				setState(8339);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(8336);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(8337);
					match(COLON);
					setState(8338);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(8347);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1200,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8343);
					match(PERIOD);
					setState(8344);
					general_element_part();
					}
					} 
				}
				setState(8349);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1200,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8350);
			general_element_part();
			setState(8355);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1201,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8351);
					match(PERIOD);
					setState(8352);
					general_element_part();
					}
					} 
				}
				setState(8357);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1201,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return getRuleContext(Id_expressionsContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Function_argumentsContext function_arguments() {
			return getRuleContext(Function_argumentsContext.class,0);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_general_element_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(8358);
				match(INTRODUCER);
				setState(8359);
				char_set_name();
				}
			}

			setState(8362);
			id_expressions();
			setState(8365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1203,_ctx) ) {
			case 1:
				{
				setState(8363);
				match(AT_SIGN);
				setState(8364);
				link_name();
				}
				break;
			}
			setState(8368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1204,_ctx) ) {
			case 1:
				{
				setState(8367);
				function_arguments();
				}
				break;
			}
			setState(8371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1205,_ctx) ) {
			case 1:
				{
				setState(8370);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return getRuleContext(Id_expressionsContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(8373);
				match(INTRODUCER);
				setState(8374);
				char_set_name();
				}
			}

			setState(8377);
			id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_privilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlSqlParser.PRIVILEGES, 0); }
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode INHERIT() { return getToken(PlSqlParser.INHERIT, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode REFRESH() { return getToken(PlSqlParser.REFRESH, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode REWRITE() { return getToken(PlSqlParser.REWRITE, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REFERENCES() { return getToken(PlSqlParser.REFERENCES, 0); }
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public Object_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_privilege; }
	}

	public final Object_privilegeContext object_privilege() throws RecognitionException {
		Object_privilegeContext _localctx = new Object_privilegeContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_object_privilege);
		int _la;
		try {
			setState(8412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8379);
				match(ALL);
				setState(8381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(8380);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8383);
				match(ALTER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8384);
				match(DEBUG);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8385);
				match(DELETE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8386);
				match(EXECUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8387);
				match(FLASHBACK);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8388);
				match(FLASHBACK);
				setState(8389);
				match(ARCHIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8390);
				match(INDEX);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8391);
				match(INHERIT);
				setState(8392);
				match(PRIVILEGES);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8393);
				match(INSERT);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8394);
				match(KEEP);
				setState(8395);
				match(SEQUENCE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8396);
				match(MERGE);
				setState(8397);
				match(VIEW);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8398);
				match(ON);
				setState(8399);
				match(COMMIT);
				setState(8400);
				match(REFRESH);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8401);
				match(QUERY);
				setState(8402);
				match(REWRITE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8403);
				match(READ);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8404);
				match(REFERENCES);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8405);
				match(SELECT);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8406);
				match(TRANSLATE);
				setState(8407);
				match(SQL);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8408);
				match(UNDER);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8409);
				match(UPDATE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8410);
				match(USE);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8411);
				match(WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class System_privilegeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(PlSqlParser.PRIVILEGES, 0); }
		public TerminalNode ADVISOR() { return getToken(PlSqlParser.ADVISOR, 0); }
		public TerminalNode ADMINISTER() { return getToken(PlSqlParser.ADMINISTER, 0); }
		public TerminalNode SQL() { return getToken(PlSqlParser.SQL, 0); }
		public TerminalNode TUNING() { return getToken(PlSqlParser.TUNING, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public TerminalNode PROFILE() { return getToken(PlSqlParser.PROFILE, 0); }
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode MANAGEMENT() { return getToken(PlSqlParser.MANAGEMENT, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode EXEMPT() { return getToken(PlSqlParser.EXEMPT, 0); }
		public TerminalNode REDACTION() { return getToken(PlSqlParser.REDACTION, 0); }
		public TerminalNode POLICY() { return getToken(PlSqlParser.POLICY, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode LINK() { return getToken(PlSqlParser.LINK, 0); }
		public TerminalNode PUBLIC() { return getToken(PlSqlParser.PUBLIC, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode SESSION() { return getToken(PlSqlParser.SESSION, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode DICTIONARY() { return getToken(PlSqlParser.DICTIONARY, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DIRECTORY() { return getToken(PlSqlParser.DIRECTORY, 0); }
		public TerminalNode EDITION() { return getToken(PlSqlParser.EDITION, 0); }
		public TerminalNode FLASHBACK() { return getToken(PlSqlParser.FLASHBACK, 0); }
		public TerminalNode ARCHIVE() { return getToken(PlSqlParser.ARCHIVE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public TerminalNode INDEXTYPE() { return getToken(PlSqlParser.INDEXTYPE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode JOB() { return getToken(PlSqlParser.JOB, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode CLASS() { return getToken(PlSqlParser.CLASS, 0); }
		public TerminalNode PROGRAM() { return getToken(PlSqlParser.PROGRAM, 0); }
		public TerminalNode MANAGE() { return getToken(PlSqlParser.MANAGE, 0); }
		public TerminalNode SCHEDULER() { return getToken(PlSqlParser.SCHEDULER, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LOGMINING() { return getToken(PlSqlParser.LOGMINING, 0); }
		public TerminalNode MATERIALIZED() { return getToken(PlSqlParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(PlSqlParser.VIEW, 0); }
		public TerminalNode QUERY() { return getToken(PlSqlParser.QUERY, 0); }
		public TerminalNode REWRITE() { return getToken(PlSqlParser.REWRITE, 0); }
		public TerminalNode GLOBAL() { return getToken(PlSqlParser.GLOBAL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode REFRESH() { return getToken(PlSqlParser.REFRESH, 0); }
		public TerminalNode MINING() { return getToken(PlSqlParser.MINING, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode MEASURE() { return getToken(PlSqlParser.MEASURE, 0); }
		public TerminalNode FOLDER() { return getToken(PlSqlParser.FOLDER, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode BUILD() { return getToken(PlSqlParser.BUILD, 0); }
		public TerminalNode PROCESS() { return getToken(PlSqlParser.PROCESS, 0); }
		public TerminalNode OPERATOR() { return getToken(PlSqlParser.OPERATOR, 0); }
		public TerminalNode OUTLINE() { return getToken(PlSqlParser.OUTLINE, 0); }
		public TerminalNode PLUGGABLE() { return getToken(PlSqlParser.PLUGGABLE, 0); }
		public TerminalNode CONTAINER() { return getToken(PlSqlParser.CONTAINER, 0); }
		public TerminalNode ROLE() { return getToken(PlSqlParser.ROLE, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public TerminalNode RESTRICTED() { return getToken(PlSqlParser.RESTRICTED, 0); }
		public TerminalNode RESOURCE() { return getToken(PlSqlParser.RESOURCE, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode TRANSLATION() { return getToken(PlSqlParser.TRANSLATION, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode SYNONYM() { return getToken(PlSqlParser.SYNONYM, 0); }
		public TerminalNode BACKUP() { return getToken(PlSqlParser.BACKUP, 0); }
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode TABLESPACE() { return getToken(PlSqlParser.TABLESPACE, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode BECOME() { return getToken(PlSqlParser.BECOME, 0); }
		public TerminalNode CHANGE() { return getToken(PlSqlParser.CHANGE, 0); }
		public TerminalNode NOTIFICATION() { return getToken(PlSqlParser.NOTIFICATION, 0); }
		public TerminalNode ACCESS() { return getToken(PlSqlParser.ACCESS, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode PRIVILEGE() { return getToken(PlSqlParser.PRIVILEGE, 0); }
		public TerminalNode INHERIT() { return getToken(PlSqlParser.INHERIT, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode SYSGUID() { return getToken(PlSqlParser.SYSGUID, 0); }
		public TerminalNode PURGE() { return getToken(PlSqlParser.PURGE, 0); }
		public TerminalNode DBA_RECYCLEBIN() { return getToken(PlSqlParser.DBA_RECYCLEBIN, 0); }
		public TerminalNode RESUMABLE() { return getToken(PlSqlParser.RESUMABLE, 0); }
		public TerminalNode SYSBACKUP() { return getToken(PlSqlParser.SYSBACKUP, 0); }
		public TerminalNode SYSDBA() { return getToken(PlSqlParser.SYSDBA, 0); }
		public TerminalNode SYSDG() { return getToken(PlSqlParser.SYSDG, 0); }
		public TerminalNode SYSKM() { return getToken(PlSqlParser.SYSKM, 0); }
		public TerminalNode SYSOPER() { return getToken(PlSqlParser.SYSOPER, 0); }
		public System_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_privilege; }
	}

	public final System_privilegeContext system_privilege() throws RecognitionException {
		System_privilegeContext _localctx = new System_privilegeContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_system_privilege);
		int _la;
		try {
			setState(8740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8414);
				match(ALL);
				setState(8415);
				match(PRIVILEGES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8416);
				match(ADVISOR);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8417);
				match(ADMINISTER);
				setState(8419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8418);
					match(ANY);
					}
				}

				setState(8421);
				match(SQL);
				setState(8422);
				match(TUNING);
				setState(8423);
				match(SET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8424);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8425);
				match(ANY);
				setState(8426);
				match(SQL);
				setState(8427);
				match(PROFILE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8428);
				match(ADMINISTER);
				setState(8429);
				match(SQL);
				setState(8430);
				match(MANAGEMENT);
				setState(8431);
				match(OBJECT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8432);
				match(CREATE);
				setState(8434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8433);
					match(ANY);
					}
				}

				setState(8436);
				match(CLUSTER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8437);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8438);
				match(ANY);
				setState(8439);
				match(CLUSTER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8440);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8441);
				match(ANY);
				setState(8442);
				match(CONTEXT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8443);
				match(EXEMPT);
				setState(8444);
				match(REDACTION);
				setState(8445);
				match(POLICY);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8446);
				match(ALTER);
				setState(8447);
				match(DATABASE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8448);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PUBLIC) {
					{
					setState(8449);
					match(PUBLIC);
					}
				}

				setState(8452);
				match(DATABASE);
				setState(8453);
				match(LINK);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8454);
				match(DROP);
				setState(8455);
				match(PUBLIC);
				setState(8456);
				match(DATABASE);
				setState(8457);
				match(LINK);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8458);
				match(DEBUG);
				setState(8459);
				match(CONNECT);
				setState(8460);
				match(SESSION);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8461);
				match(DEBUG);
				setState(8462);
				match(ANY);
				setState(8463);
				match(PROCEDURE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8464);
				match(ANALYZE);
				setState(8465);
				match(ANY);
				setState(8466);
				match(DICTIONARY);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8467);
				match(CREATE);
				setState(8469);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8468);
					match(ANY);
					}
				}

				setState(8471);
				match(DIMENSION);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8472);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8473);
				match(ANY);
				setState(8474);
				match(DIMENSION);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8475);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8476);
				match(ANY);
				setState(8477);
				match(DIRECTORY);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8478);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8479);
				match(ANY);
				setState(8480);
				match(EDITION);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8481);
				match(FLASHBACK);
				setState(8486);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ARCHIVE:
					{
					setState(8482);
					match(ARCHIVE);
					setState(8483);
					match(ADMINISTER);
					}
					break;
				case ANY:
					{
					setState(8484);
					match(ANY);
					setState(8485);
					match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8488);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8489);
				match(ANY);
				setState(8490);
				match(INDEX);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8491);
				match(CREATE);
				setState(8493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8492);
					match(ANY);
					}
				}

				setState(8495);
				match(INDEXTYPE);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8496);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8497);
				match(ANY);
				setState(8498);
				match(INDEXTYPE);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8499);
				match(CREATE);
				setState(8501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==EXTERNAL) {
					{
					setState(8500);
					_la = _input.LA(1);
					if ( !(_la==ANY || _la==EXTERNAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(8503);
				match(JOB);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8504);
				match(EXECUTE);
				setState(8505);
				match(ANY);
				setState(8506);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==PROGRAM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8507);
				match(MANAGE);
				setState(8508);
				match(SCHEDULER);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(8509);
				match(ADMINISTER);
				setState(8510);
				match(KEY);
				setState(8511);
				match(MANAGEMENT);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(8512);
				match(CREATE);
				setState(8514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8513);
					match(ANY);
					}
				}

				setState(8516);
				match(LIBRARY);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(8517);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8518);
				match(ANY);
				setState(8519);
				match(LIBRARY);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(8520);
				match(LOGMINING);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(8521);
				match(CREATE);
				setState(8523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8522);
					match(ANY);
					}
				}

				setState(8525);
				match(MATERIALIZED);
				setState(8526);
				match(VIEW);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(8527);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8528);
				match(ANY);
				setState(8529);
				match(MATERIALIZED);
				setState(8530);
				match(VIEW);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(8532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL) {
					{
					setState(8531);
					match(GLOBAL);
					}
				}

				setState(8534);
				match(QUERY);
				setState(8535);
				match(REWRITE);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(8536);
				match(ON);
				setState(8537);
				match(COMMIT);
				setState(8538);
				match(REFRESH);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(8539);
				match(CREATE);
				setState(8541);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8540);
					match(ANY);
					}
				}

				setState(8543);
				match(MINING);
				setState(8544);
				match(MODEL);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(8545);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==COMMENT || _la==DROP || _la==SELECT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8546);
				match(ANY);
				setState(8547);
				match(MINING);
				setState(8548);
				match(MODEL);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(8549);
				match(CREATE);
				setState(8551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8550);
					match(ANY);
					}
				}

				setState(8553);
				match(CUBE);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(8554);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8555);
				match(ANY);
				setState(8556);
				match(CUBE);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(8557);
				match(CREATE);
				setState(8559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8558);
					match(ANY);
					}
				}

				setState(8561);
				match(MEASURE);
				setState(8562);
				match(FOLDER);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(8563);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==DROP || _la==INSERT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8564);
				match(ANY);
				setState(8565);
				match(MEASURE);
				setState(8566);
				match(FOLDER);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(8567);
				match(CREATE);
				setState(8569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8568);
					match(ANY);
					}
				}

				setState(8571);
				match(CUBE);
				setState(8572);
				match(DIMENSION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(8573);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DELETE || _la==DROP || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8574);
				match(ANY);
				setState(8575);
				match(CUBE);
				setState(8576);
				match(DIMENSION);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(8577);
				match(CREATE);
				setState(8579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8578);
					match(ANY);
					}
				}

				setState(8581);
				match(CUBE);
				setState(8582);
				match(BUILD);
				setState(8583);
				match(PROCESS);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(8584);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8585);
				match(ANY);
				setState(8586);
				match(CUBE);
				setState(8587);
				match(BUILD);
				setState(8588);
				match(PROCESS);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(8589);
				match(CREATE);
				setState(8591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8590);
					match(ANY);
					}
				}

				setState(8593);
				match(OPERATOR);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(8594);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8595);
				match(ANY);
				setState(8596);
				match(OPERATOR);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(8597);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8598);
				match(ANY);
				setState(8599);
				match(OUTLINE);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(8600);
				match(CREATE);
				setState(8601);
				match(PLUGGABLE);
				setState(8602);
				match(DATABASE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(8603);
				match(SET);
				setState(8604);
				match(CONTAINER);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(8605);
				match(CREATE);
				setState(8607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8606);
					match(ANY);
					}
				}

				setState(8609);
				match(PROCEDURE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(8610);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8611);
				match(ANY);
				setState(8612);
				match(PROCEDURE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(8613);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8614);
				match(PROFILE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(8615);
				match(CREATE);
				setState(8616);
				match(ROLE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(8617);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==GRANT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8618);
				match(ANY);
				setState(8619);
				match(ROLE);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(8620);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8621);
				match(ROLLBACK);
				setState(8622);
				match(SEGMENT);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(8623);
				match(CREATE);
				setState(8625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8624);
					match(ANY);
					}
				}

				setState(8627);
				match(SEQUENCE);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(8628);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8629);
				match(ANY);
				setState(8630);
				match(SEQUENCE);
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(8631);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==RESTRICTED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8632);
				match(SESSION);
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(8633);
				match(ALTER);
				setState(8634);
				match(RESOURCE);
				setState(8635);
				match(COST);
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(8636);
				match(CREATE);
				setState(8638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8637);
					match(ANY);
					}
				}

				setState(8640);
				match(SQL);
				setState(8641);
				match(TRANSLATION);
				setState(8642);
				match(PROFILE);
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(8643);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==USE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8644);
				match(ANY);
				setState(8645);
				match(SQL);
				setState(8646);
				match(TRANSLATION);
				setState(8647);
				match(PROFILE);
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(8648);
				match(TRANSLATE);
				setState(8649);
				match(ANY);
				setState(8650);
				match(SQL);
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(8651);
				match(CREATE);
				setState(8653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8652);
					match(ANY);
					}
				}

				setState(8655);
				match(SYNONYM);
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(8656);
				match(DROP);
				setState(8657);
				match(ANY);
				setState(8658);
				match(SYNONYM);
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(8659);
				_la = _input.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8660);
				match(PUBLIC);
				setState(8661);
				match(SYNONYM);
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(8662);
				match(CREATE);
				setState(8664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8663);
					match(ANY);
					}
				}

				setState(8666);
				match(TABLE);
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(8667);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==BACKUP || _la==COMMENT || _la==DELETE || _la==DROP || _la==INSERT || _la==LOCK || _la==READ || _la==SELECT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8668);
				match(ANY);
				setState(8669);
				match(TABLE);
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(8670);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP || _la==MANAGE || _la==UNLIMITED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8671);
				match(TABLESPACE);
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(8672);
				match(CREATE);
				setState(8674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8673);
					match(ANY);
					}
				}

				setState(8676);
				match(TRIGGER);
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(8677);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8678);
				match(ANY);
				setState(8679);
				match(TRIGGER);
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(8680);
				match(ADMINISTER);
				setState(8681);
				match(DATABASE);
				setState(8682);
				match(TRIGGER);
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(8683);
				match(CREATE);
				setState(8685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8684);
					match(ANY);
					}
				}

				setState(8687);
				match(TYPE);
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(8688);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE || _la==UNDER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8689);
				match(ANY);
				setState(8690);
				match(TYPE);
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(8691);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8692);
				match(USER);
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(8693);
				match(CREATE);
				setState(8695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8694);
					match(ANY);
					}
				}

				setState(8697);
				match(VIEW);
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(8698);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==MERGE || _la==UNDER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8699);
				match(ANY);
				setState(8700);
				match(VIEW);
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(8701);
				_la = _input.LA(1);
				if ( !(_la==ANALYZE || _la==AUDIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8702);
				match(ANY);
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(8703);
				match(BECOME);
				setState(8704);
				match(USER);
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(8705);
				match(CHANGE);
				setState(8706);
				match(NOTIFICATION);
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(8707);
				match(EXEMPT);
				setState(8708);
				match(ACCESS);
				setState(8709);
				match(POLICY);
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(8710);
				match(FORCE);
				setState(8712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(8711);
					match(ANY);
					}
				}

				setState(8714);
				match(TRANSACTION);
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(8715);
				match(GRANT);
				setState(8716);
				match(ANY);
				setState(8718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OBJECT) {
					{
					setState(8717);
					match(OBJECT);
					}
				}

				setState(8720);
				match(PRIVILEGE);
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(8721);
				match(INHERIT);
				setState(8722);
				match(ANY);
				setState(8723);
				match(PRIVILEGES);
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(8724);
				match(KEEP);
				setState(8725);
				match(DATE);
				setState(8726);
				match(TIME);
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(8727);
				match(KEEP);
				setState(8728);
				match(SYSGUID);
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(8729);
				match(PURGE);
				setState(8730);
				match(DBA_RECYCLEBIN);
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(8731);
				match(RESUMABLE);
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(8732);
				match(SELECT);
				setState(8733);
				match(ANY);
				setState(8734);
				_la = _input.LA(1);
				if ( !(_la==DICTIONARY || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(8735);
				match(SYSBACKUP);
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(8736);
				match(SYSDBA);
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(8737);
				match(SYSDG);
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(8738);
				match(SYSKM);
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(8739);
				match(SYSOPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_literal);
		try {
			setState(8744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8742);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8743);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Literal_datetimeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Literal_datetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal_datetime; }
	}

	public final Literal_datetimeContext literal_datetime() throws RecognitionException {
		Literal_datetimeContext _localctx = new Literal_datetimeContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_literal_datetime);
		try {
			setState(8749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8746);
				match(DATE);
				setState(8747);
				string();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8748);
				function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PlSqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PlSqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PlSqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(PlSqlParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(PlSqlParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(PlSqlParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_constant);
		int _la;
		try {
			setState(8813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(8751);
				match(TIMESTAMP);
				setState(8754);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(8752);
					string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(8753);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1239,_ctx) ) {
				case 1:
					{
					setState(8756);
					match(AT);
					setState(8757);
					match(TIME);
					setState(8758);
					match(ZONE);
					setState(8759);
					string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8762);
				match(INTERVAL);
				setState(8766);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(8763);
					string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(8764);
					bind_variable();
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(8765);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8768);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1244,_ctx) ) {
				case 1:
					{
					setState(8769);
					match(LEFT_PAREN);
					setState(8772);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(8770);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(8771);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8779);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8774);
						match(COMMA);
						setState(8777);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(8775);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(8776);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(8781);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(8799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1248,_ctx) ) {
				case 1:
					{
					setState(8784);
					match(TO);
					setState(8797);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(8785);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(8786);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(8787);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(8788);
						match(SECOND);
						setState(8795);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1246,_ctx) ) {
						case 1:
							{
							setState(8789);
							match(LEFT_PAREN);
							setState(8792);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(8790);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(8791);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8794);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case PLUS_SIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(8801);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(8802);
				match(DATE);
				setState(8803);
				string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(8804);
				string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(8805);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8806);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(8807);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(8808);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(8809);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(8810);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(8811);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(8812);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(8815);
				match(INTRODUCER);
				setState(8816);
				char_set_name();
				}
			}

			setState(8819);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Synonym_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_synonym_name; }
	}

	public final Synonym_nameContext synonym_name() throws RecognitionException {
		Synonym_nameContext _localctx = new Synonym_nameContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_synonym_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8821);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8823);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8825);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8827);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8829);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8831);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8833);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8835);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8837);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8839);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8841);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8843);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Log_group_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Log_group_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_log_group_name; }
	}

	public final Log_group_nameContext log_group_name() throws RecognitionException {
		Log_group_nameContext _localctx = new Log_group_nameContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_log_group_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8845);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifiersContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifiers; }
	}

	public final IdentifiersContext identifiers() throws RecognitionException {
		IdentifiersContext _localctx = new IdentifiersContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_identifiers);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8847);
			identifier();
			setState(8852);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1251,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8848);
					match(PERIOD);
					setState(8849);
					id_expression();
					}
					} 
				}
				setState(8854);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1251,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdentifiersContext identifiers() {
			return getRuleContext(IdentifiersContext.class,0);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_aggregate_function_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8855);
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdentifiersContext identifiers() {
			return getRuleContext(IdentifiersContext.class,0);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_exception_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8857);
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifiersContext identifiers() {
			return getRuleContext(IdentifiersContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8859);
			identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_id_expression);
		try {
			setState(8863);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8861);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8862);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionsContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Id_expressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expressions; }
	}

	public final Id_expressionsContext id_expressions() throws RecognitionException {
		Id_expressionsContext _localctx = new Id_expressionsContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_id_expressions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8865);
			id_expression();
			setState(8870);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1253,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8866);
					match(PERIOD);
					setState(8867);
					id_expression();
					}
					} 
				}
				setState(8872);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1253,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return getRuleContext(Id_expressionsContext.class,0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_type_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8873);
			id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return getRuleContext(Id_expressionsContext.class,0);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_sequence_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8875);
			id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return getRuleContext(Id_expressionsContext.class,0);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_char_set_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8877);
			id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8879);
			match(LEFT_PAREN);
			setState(8880);
			match(PLUS_SIGN);
			setState(8881);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode BUILD() { return getToken(PlSqlParser.BUILD, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode ID() { return getToken(PlSqlParser.ID, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode LINK() { return getToken(PlSqlParser.LINK, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode MINIMUM() { return getToken(PlSqlParser.MINIMUM, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public TerminalNode OPERATOR() { return getToken(PlSqlParser.OPERATOR, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode PRIVILEGE() { return getToken(PlSqlParser.PRIVILEGE, 0); }
		public TerminalNode PROGRAM() { return getToken(PlSqlParser.PROGRAM, 0); }
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode STORE() { return getToken(PlSqlParser.STORE, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode SYSDATE() { return getToken(PlSqlParser.SYSDATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(PlSqlParser.TEMPORARY, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode USER() { return getToken(PlSqlParser.USER, 0); }
		public TerminalNode USERS() { return getToken(PlSqlParser.USERS, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8883);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)) | (1L << (VALIDATE - 585)) | (1L << (VALUE - 585)) | (1L << (VARCHAR2 - 585)) | (1L << (VARCHAR - 585)) | (1L << (VARIABLE - 585)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (VARRAY - 650)) | (1L << (VARYING - 650)) | (1L << (VERSIONS - 650)) | (1L << (VERSION - 650)) | (1L << (WAIT - 650)) | (1L << (WARNING - 650)) | (1L << (WELLFORMED - 650)) | (1L << (WHENEVER - 650)) | (1L << (WHILE - 650)) | (1L << (WITHIN - 650)) | (1L << (WORK - 650)) | (1L << (WRITE - 650)) | (1L << (XMLAGG - 650)) | (1L << (XMLATTRIBUTES - 650)) | (1L << (XMLCAST - 650)) | (1L << (XMLCOLATTVAL - 650)) | (1L << (XMLELEMENT - 650)) | (1L << (XMLEXISTS - 650)) | (1L << (XMLFOREST - 650)) | (1L << (XMLNAMESPACES - 650)) | (1L << (XMLPARSE - 650)) | (1L << (XMLPI - 650)) | (1L << (XMLQUERY - 650)) | (1L << (XMLROOT - 650)) | (1L << (XMLSERIALIZE - 650)) | (1L << (XMLTABLE - 650)) | (1L << (XML - 650)) | (1L << (YEAR - 650)) | (1L << (YES - 650)) | (1L << (YMINTERVAL_UNCONSTRAINED - 650)) | (1L << (ZONE - 650)) | (1L << (PREDICTION - 650)) | (1L << (PREDICTION_BOUNDS - 650)) | (1L << (PREDICTION_COST - 650)) | (1L << (PREDICTION_DETAILS - 650)) | (1L << (PREDICTION_PROBABILITY - 650)) | (1L << (PREDICTION_SET - 650)) | (1L << (CUME_DIST - 650)) | (1L << (DENSE_RANK - 650)) | (1L << (LISTAGG - 650)) | (1L << (PERCENT_RANK - 650)) | (1L << (PERCENTILE_CONT - 650)) | (1L << (PERCENTILE_DISC - 650)) | (1L << (RANK - 650)) | (1L << (AVG - 650)) | (1L << (CORR - 650)) | (1L << (COVAR_ - 650)) | (1L << (LAG - 650)) | (1L << (LEAD - 650)) | (1L << (MAX - 650)) | (1L << (MEDIAN - 650)) | (1L << (MIN - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (NTILE - 714)) | (1L << (RATIO_TO_REPORT - 714)) | (1L << (REGR_ - 714)) | (1L << (ROW_NUMBER - 714)) | (1L << (SUBSTR - 714)) | (1L << (TRIM - 714)) | (1L << (SUM - 714)) | (1L << (STDDEV - 714)) | (1L << (VAR_ - 714)) | (1L << (VARIANCE - 714)) | (1L << (REGULAR_ID - 714)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_function_nameContext extends ParserRuleContext {
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function_name; }
	}

	public final String_function_nameContext string_function_name() throws RecognitionException {
		String_function_nameContext _localctx = new String_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_string_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8885);
			_la = _input.LA(1);
			if ( !(_la==CHR || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (DECODE - 708)) | (1L << (SUBSTR - 708)) | (1L << (TO_CHAR - 708)) | (1L << (TRIM - 708)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_nameContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_name; }
	}

	public final Numeric_function_nameContext numeric_function_name() throws RecognitionException {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_numeric_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8887);
			_la = _input.LA(1);
			if ( !(_la==COUNT || ((((_la - 705)) & ~0x3f) == 0 && ((1L << (_la - 705)) & ((1L << (AVG - 705)) | (1L << (NVL - 705)) | (1L << (ROUND - 705)) | (1L << (SUM - 705)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntegerContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integer; }
	}

	public final IntegerContext integer() throws RecognitionException {
		IntegerContext _localctx = new IntegerContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_integer);
		try {
			setState(8891);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case PLUS_SIGN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8889);
				numeric();
				}
				break;
			case MINUS_SIGN:
				enterOuterAlt(_localctx, 2);
				{
				setState(8890);
				numeric_negative();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(PlSqlParser.PLUS_SIGN, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_numeric);
		int _la;
		try {
			setState(8898);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case PLUS_SIGN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS_SIGN) {
					{
					setState(8893);
					match(PLUS_SIGN);
					}
				}

				setState(8896);
				match(UNSIGNED_INTEGER);
				}
				break;
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8897);
				match(APPROXIMATE_NUM_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8900);
			match(MINUS_SIGN);
			setState(8901);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8903);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 444:
			return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		case 446:
			return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 451:
			return concatenation_sempred((ConcatenationContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean concatenation_sempred(ConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0307\u22cc\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\3\2\3\2\5\2\u04a3\n\2\3\2\5\2\u04a6\n\2\7\2\u04a8\n\2\f\2\16"+
		"\2\u04ab\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u04d3\n\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3"+
		"\5\3\5\3\5\5\5\u04df\n\5\3\5\7\5\u04e2\n\5\f\5\16\5\u04e5\13\5\3\5\3\5"+
		"\5\5\u04e9\n\5\3\5\3\5\3\6\3\6\3\6\5\6\u04f0\n\6\3\6\3\6\3\6\3\6\5\6\u04f6"+
		"\n\6\3\6\6\6\u04f9\n\6\r\6\16\6\u04fa\3\6\3\6\5\6\u04ff\n\6\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\7\6\u0507\n\6\f\6\16\6\u050a\13\6\3\6\5\6\u050d\n\6\3\6"+
		"\3\6\5\6\u0511\n\6\3\6\5\6\u0514\n\6\3\6\3\6\5\6\u0518\n\6\3\6\3\6\3\6"+
		"\5\6\u051d\n\6\3\6\3\6\3\7\3\7\5\7\u0523\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3"+
		"\b\5\b\u052c\n\b\3\b\5\b\u052f\n\b\3\b\3\b\3\t\3\t\5\t\u0535\n\t\3\n\3"+
		"\n\3\n\3\n\3\n\7\n\u053c\n\n\f\n\16\n\u053f\13\n\3\n\3\n\3\13\3\13\3\13"+
		"\3\13\3\13\3\f\3\f\3\f\5\f\u054b\n\f\3\f\3\f\3\f\5\f\u0550\n\f\3\f\3\f"+
		"\3\f\3\r\3\r\3\r\3\r\3\r\5\r\u055a\n\r\3\r\5\r\u055d\n\r\3\r\7\r\u0560"+
		"\n\r\f\r\16\r\u0563\13\r\3\r\3\r\5\r\u0567\n\r\3\r\3\r\3\16\3\16\3\16"+
		"\5\16\u056e\n\16\3\16\3\16\3\16\3\16\5\16\u0574\n\16\3\16\3\16\5\16\u0578"+
		"\n\16\3\16\3\16\7\16\u057c\n\16\f\16\16\16\u057f\13\16\3\16\3\16\5\16"+
		"\u0583\n\16\3\16\3\16\3\17\3\17\3\17\5\17\u058a\n\17\3\17\3\17\3\17\3"+
		"\17\3\17\5\17\u0591\n\17\3\17\3\17\3\17\7\17\u0596\n\17\f\17\16\17\u0599"+
		"\13\17\3\17\3\17\5\17\u059d\n\17\3\17\3\17\5\17\u05a1\n\17\3\17\3\17\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u05ad\n\20\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\7\21\u05b5\n\21\f\21\16\21\u05b8\13\21\3\21\3\21\5\21"+
		"\u05bc\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u05c6\n\22\f"+
		"\22\16\22\u05c9\13\22\3\22\3\22\5\22\u05cd\n\22\3\22\3\22\3\22\5\22\u05d2"+
		"\n\22\3\22\5\22\u05d5\n\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\5\23\u05e2\n\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u05ee\n\25\3\25\7\25\u05f1\n\25\f\25\16\25\u05f4\13\25\3\25"+
		"\3\25\5\25\u05f8\n\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0602"+
		"\n\26\f\26\16\26\u0605\13\26\3\26\3\26\5\26\u0609\n\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\7\26\u0611\n\26\f\26\16\26\u0614\13\26\3\26\5\26\u0617"+
		"\n\26\3\26\3\26\5\26\u061b\n\26\3\26\5\26\u061e\n\26\3\26\3\26\5\26\u0622"+
		"\n\26\3\26\3\26\3\26\5\26\u0627\n\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27"+
		"\3\27\7\27\u0631\n\27\f\27\16\27\u0634\13\27\3\27\3\27\5\27\u0638\n\27"+
		"\3\27\3\27\5\27\u063c\n\27\3\27\5\27\u063f\n\27\3\27\3\27\3\27\5\27\u0644"+
		"\n\27\3\27\3\27\3\30\3\30\3\30\5\30\u064b\n\30\3\30\3\30\3\30\3\30\3\30"+
		"\3\30\7\30\u0653\n\30\f\30\16\30\u0656\13\30\3\30\3\30\5\30\u065a\n\30"+
		"\3\30\5\30\u065d\n\30\3\30\3\30\5\30\u0661\n\30\3\30\5\30\u0664\n\30\3"+
		"\30\3\30\3\30\5\30\u0669\n\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u067b\n\32\3\32\7\32\u067e"+
		"\n\32\f\32\16\32\u0681\13\32\3\32\3\32\5\32\u0685\n\32\5\32\u0687\n\32"+
		"\3\32\3\32\3\33\3\33\3\33\5\33\u068e\n\33\3\33\3\33\3\33\3\33\3\33\5\33"+
		"\u0695\n\33\3\33\5\33\u0698\n\33\3\33\5\33\u069b\n\33\3\33\5\33\u069e"+
		"\n\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\7\34\u06a7\n\34\f\34\16\34\u06aa"+
		"\13\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\5\36\u06b5\n\36\3"+
		"\36\3\36\5\36\u06b9\n\36\3\36\5\36\u06bc\n\36\3\37\3\37\3\37\3\37\3 \3"+
		" \3 \5 \u06c5\n \3!\3!\3!\3!\7!\u06cb\n!\f!\16!\u06ce\13!\3!\3!\3!\3!"+
		"\3!\5!\u06d5\n!\3!\5!\u06d8\n!\3\"\3\"\3\"\3\"\3\"\5\"\u06df\n\"\3#\5"+
		"#\u06e2\n#\3#\5#\u06e5\n#\3$\3$\3$\5$\u06ea\n$\3$\6$\u06ed\n$\r$\16$\u06ee"+
		"\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%"+
		"\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0718\n%\3&\3&\3&"+
		"\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&"+
		"\5&\u0734\n&\3\'\3\'\3\'\7\'\u0739\n\'\f\'\16\'\u073c\13\'\3\'\3\'\5\'"+
		"\u0740\n\'\3\'\3\'\3(\3(\3(\5(\u0747\n(\3)\3)\3)\3)\3)\3*\3*\6*\u0750"+
		"\n*\r*\16*\u0751\3+\3+\3+\3,\3,\3,\5,\u075a\n,\3,\3,\5,\u075e\n,\3,\3"+
		",\3-\3-\3-\3-\3-\3-\3-\3-\5-\u076a\n-\3-\5-\u076d\n-\3-\3-\3.\3.\5.\u0773"+
		"\n.\3.\5.\u0776\n.\3.\7.\u0779\n.\f.\16.\u077c\13.\3.\3.\5.\u0780\n.\3"+
		"/\3/\5/\u0784\n/\3/\3/\3/\3/\3/\3/\7/\u078c\n/\f/\16/\u078f\13/\3/\3/"+
		"\3\60\3\60\3\60\7\60\u0796\n\60\f\60\16\60\u0799\13\60\3\61\3\61\3\61"+
		"\5\61\u079e\n\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u07a7\n\62\f"+
		"\62\16\62\u07aa\13\62\3\62\3\62\5\62\u07ae\n\62\3\63\3\63\5\63\u07b2\n"+
		"\63\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u07ba\n\64\3\65\3\65\3\65\3\65"+
		"\3\65\3\65\5\65\u07c2\n\65\3\65\3\65\3\65\5\65\u07c7\n\65\3\65\5\65\u07ca"+
		"\n\65\5\65\u07cc\n\65\3\66\5\66\u07cf\n\66\3\66\3\66\3\66\3\66\3\67\3"+
		"\67\3\67\5\67\u07d8\n\67\3\67\3\67\3\67\5\67\u07dd\n\67\3\67\3\67\38\3"+
		"8\38\58\u07e4\n8\38\58\u07e7\n8\39\59\u07ea\n9\39\39\59\u07ee\n9\39\5"+
		"9\u07f1\n9\39\39\39\39\79\u07f7\n9\f9\169\u07fa\139\39\39\59\u07fe\n9"+
		"\39\79\u0801\n9\f9\169\u0804\139\3:\3:\3:\3:\5:\u080a\n:\3;\3;\3;\3<\3"+
		"<\3<\3<\3<\5<\u0814\n<\3=\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\6>\u0822\n"+
		">\r>\16>\u0823\3>\3>\3?\3?\5?\u082a\n?\3@\3@\3@\3@\3A\3A\3A\3A\5A\u0834"+
		"\nA\3B\3B\3B\3B\3B\3B\7B\u083c\nB\fB\16B\u083f\13B\3B\3B\3B\3B\5B\u0845"+
		"\nB\3B\5B\u0848\nB\3B\3B\3B\5B\u084d\nB\3C\3C\3C\3C\3C\3C\7C\u0855\nC"+
		"\fC\16C\u0858\13C\3C\3C\5C\u085c\nC\3C\3C\3C\3C\3C\5C\u0863\nC\3C\5C\u0866"+
		"\nC\3C\3C\3C\5C\u086b\nC\3D\5D\u086e\nD\3D\5D\u0871\nD\3D\3D\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\3D\3D\3D\7D\u0880\nD\fD\16D\u0883\13D\3D\3D\5D\u0887\n"+
		"D\3D\3D\3D\3D\3D\3D\3D\5D\u0890\nD\3D\5D\u0893\nD\3D\3D\3D\5D\u0898\n"+
		"D\3E\5E\u089b\nE\3E\3E\3F\3F\3F\5F\u08a2\nF\3F\5F\u08a5\nF\3G\3G\3G\3"+
		"G\3H\5H\u08ac\nH\3H\6H\u08af\nH\rH\16H\u08b0\3H\3H\5H\u08b5\nH\3I\3I\3"+
		"I\5I\u08ba\nI\3J\3J\3J\5J\u08bf\nJ\3K\3K\3K\3K\3K\3K\7K\u08c7\nK\fK\16"+
		"K\u08ca\13K\3K\3K\3K\5K\u08cf\nK\3L\3L\3L\3L\3L\3L\7L\u08d7\nL\fL\16L"+
		"\u08da\13L\3L\3L\5L\u08de\nL\3L\3L\3L\3L\3L\5L\u08e5\nL\3L\3L\3L\3L\5"+
		"L\u08eb\nL\3L\3L\5L\u08ef\nL\3M\5M\u08f2\nM\3M\5M\u08f5\nM\3M\3M\3M\3"+
		"M\3M\3M\3M\3M\3M\3M\3M\3M\3M\7M\u0904\nM\fM\16M\u0907\13M\3M\3M\5M\u090b"+
		"\nM\3M\3M\3M\3M\3M\3M\5M\u0913\nM\3N\3N\3N\3N\3O\3O\3O\3O\3O\3O\7O\u091f"+
		"\nO\fO\16O\u0922\13O\3O\3O\3P\3P\5P\u0928\nP\3Q\3Q\3Q\3R\3R\3R\3R\3R\3"+
		"S\3S\3S\3S\6S\u0936\nS\rS\16S\u0937\3S\3S\3T\3T\3T\3T\7T\u0940\nT\fT\16"+
		"T\u0943\13T\3T\3T\3U\3U\3U\3U\5U\u094b\nU\3U\3U\3U\3U\5U\u0951\nU\3U\3"+
		"U\3U\5U\u0956\nU\3U\3U\3U\3U\5U\u095c\nU\3U\3U\3U\5U\u0961\nU\3V\3V\5"+
		"V\u0965\nV\3V\3V\3V\3V\3V\3V\3V\5V\u096e\nV\3V\3V\5V\u0972\nV\3V\3V\3"+
		"W\3W\3W\3W\3W\3W\3W\3W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\6X\u098a\n"+
		"X\rX\16X\u098b\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\6Y\u099e"+
		"\nY\rY\16Y\u099f\3Y\3Y\3Y\5Y\u09a5\nY\3Y\6Y\u09a8\nY\rY\16Y\u09a9\3Y\3"+
		"Y\3Y\5Y\u09af\nY\3Z\3Z\3Z\5Z\u09b4\nZ\3[\3[\3[\3[\3\\\3\\\3\\\3\\\5\\"+
		"\u09be\n\\\3]\3]\3]\3]\3^\3^\3^\5^\u09c7\n^\3^\3^\3^\3_\3_\3_\3`\5`\u09d0"+
		"\n`\3`\6`\u09d3\n`\r`\16`\u09d4\3`\3`\3`\5`\u09da\n`\3`\6`\u09dd\n`\r"+
		"`\16`\u09de\7`\u09e1\n`\f`\16`\u09e4\13`\5`\u09e6\n`\3a\3a\3a\3a\5a\u09ec"+
		"\na\3b\3b\3b\3c\3c\3c\3d\3d\3d\3e\3e\3e\5e\u09fa\ne\3e\6e\u09fd\ne\re"+
		"\16e\u09fe\5e\u0a01\ne\3e\5e\u0a04\ne\3f\3f\3f\3f\3f\3f\5f\u0a0c\nf\3"+
		"f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0a19\nf\5f\u0a1b\nf\3f\3f\5f\u0a1f"+
		"\nf\3f\3f\3f\3f\3f\3f\5f\u0a27\nf\5f\u0a29\nf\5f\u0a2b\nf\5f\u0a2d\nf"+
		"\3g\3g\5g\u0a31\ng\3g\6g\u0a34\ng\rg\16g\u0a35\3g\3g\3h\3h\3h\3h\3h\3"+
		"h\5h\u0a40\nh\3i\3i\3i\3i\3i\3j\3j\3j\3j\5j\u0a4b\nj\5j\u0a4d\nj\3k\3"+
		"k\3k\3k\3k\3l\3l\3l\5l\u0a57\nl\3l\3l\3m\5m\u0a5c\nm\3m\3m\5m\u0a60\n"+
		"m\3m\3m\5m\u0a64\nm\3m\3m\6m\u0a68\nm\rm\16m\u0a69\3n\5n\u0a6d\nn\3n\3"+
		"n\5n\u0a71\nn\6n\u0a73\nn\rn\16n\u0a74\3n\3n\3n\3n\3n\5n\u0a7c\nn\3n\3"+
		"n\3n\6n\u0a81\nn\rn\16n\u0a82\3n\3n\3n\5n\u0a88\nn\3o\3o\5o\u0a8c\no\3"+
		"o\3o\3o\3o\5o\u0a92\no\5o\u0a94\no\6o\u0a96\no\ro\16o\u0a97\3o\3o\5o\u0a9c"+
		"\no\3o\3o\5o\u0aa0\no\3o\3o\6o\u0aa4\no\ro\16o\u0aa5\3o\3o\3o\5o\u0aab"+
		"\no\3o\3o\3o\5o\u0ab0\no\3o\3o\3o\5o\u0ab5\no\3o\5o\u0ab8\no\3o\3o\3p"+
		"\3p\3p\3p\3q\3q\3q\5q\u0ac3\nq\3q\5q\u0ac6\nq\3q\5q\u0ac9\nq\3q\3q\3q"+
		"\5q\u0ace\nq\3q\5q\u0ad1\nq\3q\3q\3q\5q\u0ad6\nq\3q\3q\3q\5q\u0adb\nq"+
		"\3r\3r\5r\u0adf\nr\3s\3s\5s\u0ae3\ns\3s\3s\5s\u0ae7\ns\3s\7s\u0aea\ns"+
		"\fs\16s\u0aed\13s\3s\5s\u0af0\ns\6s\u0af2\ns\rs\16s\u0af3\3s\3s\3t\3t"+
		"\3t\3t\3t\3t\3t\3t\5t\u0b00\nt\3t\6t\u0b03\nt\rt\16t\u0b04\3t\5t\u0b08"+
		"\nt\3t\3t\5t\u0b0c\nt\3t\3t\5t\u0b10\nt\3t\3t\3t\5t\u0b15\nt\6t\u0b17"+
		"\nt\rt\16t\u0b18\3t\3t\7t\u0b1d\nt\ft\16t\u0b20\13t\3u\3u\3u\3u\3u\3v"+
		"\3v\5v\u0b29\nv\3v\5v\u0b2c\nv\3v\3v\3v\3v\3v\3v\5v\u0b34\nv\3v\5v\u0b37"+
		"\nv\3w\3w\5w\u0b3b\nw\3w\3w\3w\3w\5w\u0b41\nw\6w\u0b43\nw\rw\16w\u0b44"+
		"\3w\5w\u0b48\nw\3x\5x\u0b4b\nx\3x\3x\3x\3x\3x\3x\3x\3x\6x\u0b55\nx\rx"+
		"\16x\u0b56\3y\3y\3y\3y\3y\3y\3y\3y\5y\u0b61\ny\5y\u0b63\ny\3z\3z\5z\u0b67"+
		"\nz\3z\6z\u0b6a\nz\rz\16z\u0b6b\6z\u0b6e\nz\rz\16z\u0b6f\3z\3z\3z\3z\5"+
		"z\u0b76\nz\5z\u0b78\nz\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\5{\u0b87"+
		"\n{\5{\u0b89\n{\3|\3|\5|\u0b8d\n|\3|\3|\5|\u0b91\n|\3|\3|\6|\u0b95\n|"+
		"\r|\16|\u0b96\3|\3|\3}\3}\3}\3}\3}\3}\3}\3}\7}\u0ba3\n}\f}\16}\u0ba6\13"+
		"}\3}\3}\5}\u0baa\n}\3~\6~\u0bad\n~\r~\16~\u0bae\3~\3~\6~\u0bb3\n~\r~\16"+
		"~\u0bb4\3\177\6\177\u0bb8\n\177\r\177\16\177\u0bb9\3\177\3\177\3\177\3"+
		"\177\3\177\5\177\u0bc1\n\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177"+
		"\u0bc9\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5"+
		"\u0080\u0bd2\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3"+
		"\u0081\3\u0081\7\u0081\u0bdc\n\u0081\f\u0081\16\u0081\u0bdf\13\u0081\3"+
		"\u0081\3\u0081\5\u0081\u0be3\n\u0081\3\u0081\3\u0081\5\u0081\u0be7\n\u0081"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081\u0bf0"+
		"\n\u0081\f\u0081\16\u0081\u0bf3\13\u0081\3\u0081\3\u0081\5\u0081\u0bf7"+
		"\n\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0bfe\n\u0082"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\6\u0083\u0c04\n\u0083\r\u0083\16\u0083"+
		"\u0c05\5\u0083\u0c08\n\u0083\3\u0083\5\u0083\u0c0b\n\u0083\3\u0083\3\u0083"+
		"\3\u0083\5\u0083\u0c10\n\u0083\3\u0083\3\u0083\6\u0083\u0c14\n\u0083\r"+
		"\u0083\16\u0083\u0c15\5\u0083\u0c18\n\u0083\3\u0083\5\u0083\u0c1b\n\u0083"+
		"\7\u0083\u0c1d\n\u0083\f\u0083\16\u0083\u0c20\13\u0083\3\u0083\3\u0083"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\6\u0084\u0c28\n\u0084\r\u0084\16\u0084"+
		"\u0c29\5\u0084\u0c2c\n\u0084\3\u0084\5\u0084\u0c2f\n\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\6\u0084\u0c35\n\u0084\r\u0084\16\u0084\u0c36\5\u0084"+
		"\u0c39\n\u0084\3\u0084\5\u0084\u0c3c\n\u0084\7\u0084\u0c3e\n\u0084\f\u0084"+
		"\16\u0084\u0c41\13\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\7\u0085\u0c4b\n\u0085\f\u0085\16\u0085\u0c4e\13\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0c55\n\u0085\3\u0085"+
		"\5\u0085\u0c58\n\u0085\3\u0085\5\u0085\u0c5b\n\u0085\3\u0085\3\u0085\3"+
		"\u0085\5\u0085\u0c60\n\u0085\3\u0085\5\u0085\u0c63\n\u0085\3\u0085\5\u0085"+
		"\u0c66\n\u0085\7\u0085\u0c68\n\u0085\f\u0085\16\u0085\u0c6b\13\u0085\3"+
		"\u0085\3\u0085\5\u0085\u0c6f\n\u0085\3\u0086\5\u0086\u0c72\n\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\6\u0086\u0c78\n\u0086\r\u0086\16\u0086\u0c79"+
		"\5\u0086\u0c7c\n\u0086\3\u0086\5\u0086\u0c7f\n\u0086\3\u0086\5\u0086\u0c82"+
		"\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\6\u0086\u0c88\n\u0086\r\u0086"+
		"\16\u0086\u0c89\5\u0086\u0c8c\n\u0086\3\u0086\5\u0086\u0c8f\n\u0086\3"+
		"\u0086\5\u0086\u0c92\n\u0086\7\u0086\u0c94\n\u0086\f\u0086\16\u0086\u0c97"+
		"\13\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089\3\u0089"+
		"\3\u0089\3\u008a\3\u008a\5\u008a\u0ca4\n\u008a\3\u008b\3\u008b\3\u008b"+
		"\3\u008c\3\u008c\3\u008c\5\u008c\u0cac\n\u008c\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0cb7\n\u008c"+
		"\3\u008c\3\u008c\3\u008c\6\u008c\u0cbc\n\u008c\r\u008c\16\u008c\u0cbd"+
		"\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0cc4\n\u008d\3\u008d\3\u008d"+
		"\5\u008d\u0cc8\n\u008d\3\u008e\3\u008e\5\u008e\u0ccc\n\u008e\3\u008e\3"+
		"\u008e\3\u008e\5\u008e\u0cd1\n\u008e\3\u008f\3\u008f\3\u008f\3\u008f\5"+
		"\u008f\u0cd7\n\u008f\3\u0090\5\u0090\u0cda\n\u0090\3\u0090\5\u0090\u0cdd"+
		"\n\u0090\3\u0090\5\u0090\u0ce0\n\u0090\3\u0090\5\u0090\u0ce3\n\u0090\5"+
		"\u0090\u0ce5\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u0cec"+
		"\n\u0091\5\u0091\u0cee\n\u0091\3\u0091\3\u0091\5\u0091\u0cf2\n\u0091\3"+
		"\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\5\u0093\u0cfe\n\u0093\5\u0093\u0d00\n\u0093\3\u0094\3\u0094\5"+
		"\u0094\u0d04\n\u0094\3\u0094\3\u0094\5\u0094\u0d08\n\u0094\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\5\u0095\u0d0f\n\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\5\u0095\u0d17\n\u0095\5\u0095\u0d19\n\u0095\3"+
		"\u0095\5\u0095\u0d1c\n\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0d21\n\u0095"+
		"\3\u0095\3\u0095\5\u0095\u0d25\n\u0095\3\u0096\3\u0096\5\u0096\u0d29\n"+
		"\u0096\3\u0097\3\u0097\5\u0097\u0d2d\n\u0097\3\u0097\5\u0097\u0d30\n\u0097"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d36\n\u0098\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d3f\n\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d46\n\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\5\u0099\u0d4c\n\u0099\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\5\u009a\u0d52\n\u009a\3\u009a\5\u009a\u0d55\n\u009a\3\u009a\5\u009a\u0d58"+
		"\n\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0d5d\n\u009a\3\u009a\5\u009a"+
		"\u0d60\n\u009a\3\u009a\5\u009a\u0d63\n\u009a\7\u009a\u0d65\n\u009a\f\u009a"+
		"\16\u009a\u0d68\13\u009a\3\u009a\3\u009a\5\u009a\u0d6c\n\u009a\3\u009b"+
		"\3\u009b\3\u009c\3\u009c\3\u009d\3\u009d\3\u009e\3\u009e\3\u009e\3\u009f"+
		"\3\u009f\3\u009f\5\u009f\u0d7a\n\u009f\3\u00a0\3\u00a0\5\u00a0\u0d7e\n"+
		"\u00a0\3\u00a0\5\u00a0\u0d81\n\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3"+
		"\u00a0\5\u00a0\u0d88\n\u00a0\3\u00a1\3\u00a1\5\u00a1\u0d8c\n\u00a1\3\u00a1"+
		"\3\u00a1\7\u00a1\u0d90\n\u00a1\f\u00a1\16\u00a1\u0d93\13\u00a1\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0d9d"+
		"\n\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a5\3\u00a5\5\u00a5\u0da9\n\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5"+
		"\u0dae\n\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\5\u00a6\u0db4\n\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u0dc5\n\u00a6"+
		"\f\u00a6\16\u00a6\u0dc8\13\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0dd6"+
		"\n\u00a9\5\u00a9\u0dd8\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0de5\n\u00ac"+
		"\3\u00ac\5\u00ac\u0de8\n\u00ac\3\u00ac\5\u00ac\u0deb\n\u00ac\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0df4\n\u00ae\3"+
		"\u00ae\5\u00ae\u0df7\n\u00ae\3\u00ae\5\u00ae\u0dfa\n\u00ae\3\u00af\3\u00af"+
		"\3\u00af\3\u00b0\3\u00b0\5\u00b0\u0e01\n\u00b0\3\u00b0\3\u00b0\3\u00b1"+
		"\3\u00b1\5\u00b1\u0e07\n\u00b1\3\u00b1\3\u00b1\3\u00b2\5\u00b2\u0e0c\n"+
		"\u00b2\3\u00b2\3\u00b2\5\u00b2\u0e10\n\u00b2\3\u00b2\5\u00b2\u0e13\n\u00b2"+
		"\3\u00b2\5\u00b2\u0e16\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3"+
		"\u0e1c\n\u00b3\3\u00b3\6\u00b3\u0e1f\n\u00b3\r\u00b3\16\u00b3\u0e20\3"+
		"\u00b3\5\u00b3\u0e24\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u0e28\n\u00b3\3\u00b3"+
		"\3\u00b3\5\u00b3\u0e2c\n\u00b3\3\u00b3\5\u00b3\u0e2f\n\u00b3\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0e36\n\u00b4\3\u00b4\5\u00b4\u0e39"+
		"\n\u00b4\5\u00b4\u0e3b\n\u00b4\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0e40\n"+
		"\u00b5\3\u00b6\3\u00b6\7\u00b6\u0e44\n\u00b6\f\u00b6\16\u00b6\u0e47\13"+
		"\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0e4c\n\u00b7\3\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b8\3\u00b8\6\u00b8\u0e54\n\u00b8\r\u00b8\16\u00b8"+
		"\u0e55\3\u00b8\3\u00b8\5\u00b8\u0e5a\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5"+
		"\u00b8\u0e5f\n\u00b8\3\u00b8\5\u00b8\u0e62\n\u00b8\3\u00b8\5\u00b8\u0e65"+
		"\n\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9"+
		"\u0e6e\n\u00b9\3\u00b9\5\u00b9\u0e71\n\u00b9\3\u00ba\5\u00ba\u0e74\n\u00ba"+
		"\3\u00ba\5\u00ba\u0e77\n\u00ba\3\u00ba\5\u00ba\u0e7a\n\u00ba\3\u00ba\5"+
		"\u00ba\u0e7d\n\u00ba\3\u00ba\5\u00ba\u0e80\n\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\5\u00ba\u0e87\n\u00ba\3\u00ba\5\u00ba\u0e8a\n\u00ba\3"+
		"\u00ba\5\u00ba\u0e8d\n\u00ba\3\u00ba\7\u00ba\u0e90\n\u00ba\f\u00ba\16"+
		"\u00ba\u0e93\13\u00ba\3\u00ba\5\u00ba\u0e96\n\u00ba\3\u00ba\5\u00ba\u0e99"+
		"\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0e9d\n\u00ba\3\u00ba\3\u00ba\5\u00ba"+
		"\u0ea1\n\u00ba\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0ea6\n\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\5\u00bb\u0eab\n\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bd\3\u00bd\5\u00bd\u0eb3\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u0eb7\n\u00bd"+
		"\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\5\u00bf"+
		"\u0ec1\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\6\u00c0\u0ecb\n\u00c0\r\u00c0\16\u00c0\u0ecc\3\u00c0\3\u00c0"+
		"\5\u00c0\u0ed1\n\u00c0\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0edc\n\u00c2\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0ee8"+
		"\n\u00c3\3\u00c4\3\u00c4\5\u00c4\u0eec\n\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0ef4\n\u00c4\3\u00c4\5\u00c4\u0ef7\n"+
		"\u00c4\3\u00c4\3\u00c4\5\u00c4\u0efb\n\u00c4\3\u00c4\3\u00c4\3\u00c4\5"+
		"\u00c4\u0f00\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3"+
		"\u00c5\5\u00c5\u0f09\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\7\u00c6\u0f19\n\u00c6\f\u00c6\16\u00c6\u0f1c\13\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u0f20\n\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0f25\n\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\5\u00c7\u0f31\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8"+
		"\u0f37\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0f3d\n\u00c8\f"+
		"\u00c8\16\u00c8\u0f40\13\u00c8\3\u00c8\5\u00c8\u0f43\n\u00c8\3\u00c9\3"+
		"\u00c9\5\u00c9\u0f47\n\u00c9\3\u00c9\3\u00c9\5\u00c9\u0f4b\n\u00c9\3\u00c9"+
		"\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0f54\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0f59\n\u00ca\3\u00ca\3\u00ca\5\u00ca"+
		"\u0f5d\n\u00ca\3\u00ca\5\u00ca\u0f60\n\u00ca\5\u00ca\u0f62\n\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0f68\n\u00ca\3\u00cb\3\u00cb\5\u00cb"+
		"\u0f6c\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0f73\n"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0f7a\n\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u0f7e\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u0f82\n\u00cb"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0f8b"+
		"\n\u00cc\3\u00cc\3\u00cc\3\u00cc\6\u00cc\u0f90\n\u00cc\r\u00cc\16\u00cc"+
		"\u0f91\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd"+
		"\u0fa4\n\u00cd\f\u00cd\16\u00cd\u0fa7\13\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\5\u00cd\u0fae\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0fbb"+
		"\n\u00ce\3\u00ce\3\u00ce\5\u00ce\u0fbf\n\u00ce\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0fc8\n\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\7\u00cf\u0fcd\n\u00cf\f\u00cf\16\u00cf\u0fd0\13\u00cf\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u0fda"+
		"\n\u00d0\f\u00d0\16\u00d0\u0fdd\13\u00d0\3\u00d0\3\u00d0\3\u00d0\7\u00d0"+
		"\u0fe2\n\u00d0\f\u00d0\16\u00d0\u0fe5\13\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\7\u00d0\u0fea\n\u00d0\f\u00d0\16\u00d0\u0fed\13\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\5\u00d0\u0ff2\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u0ffc\n\u00d1\f\u00d1\16\u00d1\u0fff"+
		"\13\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u1004\n\u00d1\f\u00d1\16\u00d1"+
		"\u1007\13\u00d1\3\u00d1\3\u00d1\3\u00d1\7\u00d1\u100c\n\u00d1\f\u00d1"+
		"\16\u00d1\u100f\13\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1014\n\u00d1"+
		"\3\u00d2\3\u00d2\5\u00d2\u1018\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u101c\n"+
		"\u00d2\3\u00d2\5\u00d2\u101f\n\u00d2\3\u00d3\3\u00d3\5\u00d3\u1023\n\u00d3"+
		"\3\u00d3\3\u00d3\5\u00d3\u1027\n\u00d3\3\u00d3\5\u00d3\u102a\n\u00d3\3"+
		"\u00d4\3\u00d4\5\u00d4\u102e\n\u00d4\3\u00d4\5\u00d4\u1031\n\u00d4\3\u00d4"+
		"\5\u00d4\u1034\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\7\u00d5\u103e\n\u00d5\f\u00d5\16\u00d5\u1041\13\u00d5"+
		"\3\u00d5\3\u00d5\5\u00d5\u1045\n\u00d5\3\u00d6\5\u00d6\u1048\n\u00d6\3"+
		"\u00d6\5\u00d6\u104b\n\u00d6\3\u00d6\5\u00d6\u104e\n\u00d6\3\u00d6\3\u00d6"+
		"\5\u00d6\u1052\n\u00d6\3\u00d6\5\u00d6\u1055\n\u00d6\3\u00d6\5\u00d6\u1058"+
		"\n\u00d6\3\u00d6\3\u00d6\5\u00d6\u105c\n\u00d6\5\u00d6\u105e\n\u00d6\3"+
		"\u00d6\3\u00d6\3\u00d6\7\u00d6\u1063\n\u00d6\f\u00d6\16\u00d6\u1066\13"+
		"\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7"+
		"\u106f\n\u00d7\f\u00d7\16\u00d7\u1072\13\u00d7\3\u00d7\5\u00d7\u1075\n"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8"+
		"\u107e\n\u00d8\f\u00d8\16\u00d8\u1081\13\u00d8\3\u00d8\5\u00d8\u1084\n"+
		"\u00d8\3\u00d8\3\u00d8\5\u00d8\u1088\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\7\u00db\u10a2\n\u00db\f\u00db\16\u00db\u10a5"+
		"\13\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\7\u00dc\u10b1\n\u00dc\f\u00dc\16\u00dc\u10b4\13\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u10b9\n\u00dc\f\u00dc\16\u00dc\u10bc"+
		"\13\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u10c1\n\u00dc\f\u00dc\16\u00dc"+
		"\u10c4\13\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u10c9\n\u00dc\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\5\u00dd\u10d5\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u10d9\n\u00dd\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\6\u00de\u10e3\n"+
		"\u00de\r\u00de\16\u00de\u10e4\5\u00de\u10e7\n\u00de\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00e0\5\u00e0\u10ee\n\u00e0\3\u00e0\3\u00e0\3\u00e0\5"+
		"\u00e0\u10f3\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5"+
		"\u00e0\u10fb\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u1101\n\u00e0"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u1108\n\u00e1\3\u00e1"+
		"\5\u00e1\u110b\n\u00e1\3\u00e1\3\u00e1\5\u00e1\u110f\n\u00e1\3\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\6\u00e1\u111b\n\u00e1\r\u00e1\16\u00e1\u111c\3\u00e1\3\u00e1\5\u00e1"+
		"\u1121\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\5\u00e2"+
		"\u1129\n\u00e2\3\u00e2\3\u00e2\5\u00e2\u112d\n\u00e2\3\u00e2\6\u00e2\u1130"+
		"\n\u00e2\r\u00e2\16\u00e2\u1131\3\u00e2\5\u00e2\u1135\n\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u113a\n\u00e2\5\u00e2\u113c\n\u00e2\3\u00e3\3"+
		"\u00e3\3\u00e3\5\u00e3\u1141\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u1145\n\u00e3"+
		"\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u114a\n\u00e4\3\u00e4\3\u00e4\5\u00e4"+
		"\u114e\n\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1155\n"+
		"\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u115c\n\u00e5\f"+
		"\u00e5\16\u00e5\u115f\13\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1169\n\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\7\u00e5\u116f\n\u00e5\f\u00e5\16\u00e5\u1172\13\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5"+
		"\u117d\n\u00e5\5\u00e5\u117f\n\u00e5\3\u00e6\3\u00e6\6\u00e6\u1183\n\u00e6"+
		"\r\u00e6\16\u00e6\u1184\3\u00e6\5\u00e6\u1188\n\u00e6\5\u00e6\u118a\n"+
		"\u00e6\3\u00e6\5\u00e6\u118d\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u11a3"+
		"\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u11a9\n\u00e8\3\u00e8"+
		"\5\u00e8\u11ac\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\5\u00e9\u11b4\n\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\5\u00eb\u11ba\n"+
		"\u00eb\3\u00eb\5\u00eb\u11bd\n\u00eb\3\u00ec\5\u00ec\u11c0\n\u00ec\3\u00ec"+
		"\3\u00ec\5\u00ec\u11c4\n\u00ec\3\u00ec\5\u00ec\u11c7\n\u00ec\3\u00ec\3"+
		"\u00ec\3\u00ec\5\u00ec\u11cc\n\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u11d1"+
		"\n\u00ec\3\u00ec\5\u00ec\u11d4\n\u00ec\3\u00ec\5\u00ec\u11d7\n\u00ec\3"+
		"\u00ec\5\u00ec\u11da\n\u00ec\3\u00ec\3\u00ec\5\u00ec\u11de\n\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\5\u00ec\u11e3\n\u00ec\5\u00ec\u11e5\n\u00ec\3\u00ed\3"+
		"\u00ed\5\u00ed\u11e9\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3"+
		"\u00ed\5\u00ed\u11f1\n\u00ed\5\u00ed\u11f3\n\u00ed\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u11ff"+
		"\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\6\u00ee\u1206\n\u00ee"+
		"\r\u00ee\16\u00ee\u1207\3\u00ee\3\u00ee\3\u00ef\5\u00ef\u120d\n\u00ef"+
		"\3\u00ef\5\u00ef\u1210\n\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\5\u00f0\u1218\n\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1"+
		"\5\u00f1\u121f\n\u00f1\3\u00f2\3\u00f2\5\u00f2\u1223\n\u00f2\3\u00f2\3"+
		"\u00f2\5\u00f2\u1227\n\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3"+
		"\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\7\u00f5"+
		"\u1236\n\u00f5\f\u00f5\16\u00f5\u1239\13\u00f5\3\u00f5\3\u00f5\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u124a\n\u00f6\5\u00f6\u124c\n\u00f6\3"+
		"\u00f7\3\u00f7\5\u00f7\u1250\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u125c\n\u00f8\3"+
		"\u00f8\3\u00f8\5\u00f8\u1260\n\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u126d\n"+
		"\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u1273\n\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9"+
		"\u127e\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\5\u00f9\u1288\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u128c\n\u00f9\5"+
		"\u00f9\u128e\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u12a5\n\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\6\u00fb\u12ac\n\u00fb\r\u00fb"+
		"\16\u00fb\u12ad\3\u00fb\3\u00fb\3\u00fc\3\u00fc\5\u00fc\u12b4\n\u00fc"+
		"\3\u00fc\5\u00fc\u12b7\n\u00fc\3\u00fc\5\u00fc\u12ba\n\u00fc\3\u00fc\3"+
		"\u00fc\3\u00fc\5\u00fc\u12bf\n\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fc\5\u00fc\u12c8\n\u00fc\5\u00fc\u12ca\n\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u12d2\n\u00fc\5\u00fc"+
		"\u12d4\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u12d8\n\u00fc\3\u00fc\6\u00fc\u12db"+
		"\n\u00fc\r\u00fc\16\u00fc\u12dc\3\u00fc\5\u00fc\u12e0\n\u00fc\3\u00fd"+
		"\3\u00fd\5\u00fd\u12e4\n\u00fd\3\u00fd\5\u00fd\u12e7\n\u00fd\3\u00fd\5"+
		"\u00fd\u12ea\n\u00fd\3\u00fd\3\u00fd\5\u00fd\u12ee\n\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\5\u00fd\u12f4\n\u00fd\3\u00fd\5\u00fd\u12f7\n\u00fd\3"+
		"\u00fd\5\u00fd\u12fa\n\u00fd\3\u00fd\7\u00fd\u12fd\n\u00fd\f\u00fd\16"+
		"\u00fd\u1300\13\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\5\u00fe\u1309\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff"+
		"\u130f\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\7\u0100"+
		"\u1317\n\u0100\f\u0100\16\u0100\u131a\13\u0100\3\u0100\3\u0100\5\u0100"+
		"\u131e\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\6\u0101\u1328\n\u0101\r\u0101\16\u0101\u1329\3\u0101\3\u0101"+
		"\3\u0101\3\u0102\3\u0102\3\u0102\5\u0102\u1332\n\u0102\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u133c\n\u0103"+
		"\3\u0104\3\u0104\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105"+
		"\u1346\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u134c\n\u0106\3"+
		"\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u1352\n\u0106\3\u0106\3\u0106\3"+
		"\u0106\5\u0106\u1357\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u135d"+
		"\n\u0106\3\u0106\5\u0106\u1360\n\u0106\3\u0107\3\u0107\5\u0107\u1364\n"+
		"\u0107\3\u0107\3\u0107\3\u0107\5\u0107\u1369\n\u0107\3\u0107\5\u0107\u136c"+
		"\n\u0107\3\u0107\5\u0107\u136f\n\u0107\3\u0107\5\u0107\u1372\n\u0107\3"+
		"\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u137b\n"+
		"\u0108\3\u0108\3\u0108\5\u0108\u137f\n\u0108\5\u0108\u1381\n\u0108\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1394"+
		"\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u139b\n\u0109"+
		"\5\u0109\u139d\n\u0109\3\u010a\3\u010a\5\u010a\u13a1\n\u010a\3\u010b\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\5\u010d\u13b4"+
		"\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d"+
		"\u13bd\n\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u13c2\n\u010d\3\u010d\3"+
		"\u010d\3\u010d\5\u010d\u13c7\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5"+
		"\u010d\u13cd\n\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u13d4"+
		"\n\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u13d9\n\u010d\5\u010d\u13db\n"+
		"\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u13eb\n\u010f"+
		"\3\u0110\3\u0110\3\u0110\5\u0110\u13f0\n\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\5\u0110\u13f6\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111"+
		"\5\u0111\u13fd\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0115\5\u0115\u1410\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u141a\n\u0116\5\u0116\u141c\n"+
		"\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1423\n\u0117\3"+
		"\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u011a\3\u011a"+
		"\5\u011a\u142e\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\6\u011a\u1434\n"+
		"\u011a\r\u011a\16\u011a\u1435\5\u011a\u1438\n\u011a\3\u011a\3\u011a\3"+
		"\u011a\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011d"+
		"\3\u011d\3\u011d\5\u011d\u1447\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011f\3\u011f\3\u011f\5\u011f\u1450\n\u011f\3\u011f\3\u011f\3\u011f"+
		"\5\u011f\u1455\n\u011f\3\u011f\3\u011f\5\u011f\u1459\n\u011f\3\u011f\5"+
		"\u011f\u145c\n\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3"+
		"\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u146a\n\u0121\3"+
		"\u0121\3\u0121\3\u0122\3\u0122\7\u0122\u1470\n\u0122\f\u0122\16\u0122"+
		"\u1473\13\u0122\3\u0122\5\u0122\u1476\n\u0122\3\u0122\5\u0122\u1479\n"+
		"\u0122\3\u0123\3\u0123\3\u0123\3\u0124\6\u0124\u147f\n\u0124\r\u0124\16"+
		"\u0124\u1480\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\5\u0125\u148d\n\u0125\3\u0126\3\u0126\5\u0126\u1491"+
		"\n\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1496\n\u0126\3\u0126\5\u0126"+
		"\u1499\n\u0126\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u14a6\n\u0127\3\u0127\3\u0127"+
		"\5\u0127\u14aa\n\u0127\3\u0127\3\u0127\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\5\u0128\u14b2\n\u0128\3\u0128\6\u0128\u14b5\n\u0128\r\u0128\16\u0128"+
		"\u14b6\3\u0128\3\u0128\5\u0128\u14bb\n\u0128\3\u0128\3\u0128\5\u0128\u14bf"+
		"\n\u0128\3\u0128\3\u0128\5\u0128\u14c3\n\u0128\3\u0128\3\u0128\3\u0129"+
		"\3\u0129\5\u0129\u14c9\n\u0129\3\u0129\5\u0129\u14cc\n\u0129\3\u0129\5"+
		"\u0129\u14cf\n\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\5\u012b\u14ea\n\u012b\3\u012b\3\u012b\6\u012b\u14ee\n\u012b\r"+
		"\u012b\16\u012b\u14ef\3\u012b\3\u012b\5\u012b\u14f4\n\u012b\3\u012b\3"+
		"\u012b\3\u012c\3\u012c\3\u012c\5\u012c\u14fb\n\u012c\3\u012c\6\u012c\u14fe"+
		"\n\u012c\r\u012c\16\u012c\u14ff\3\u012c\3\u012c\3\u012d\3\u012d\5\u012d"+
		"\u1506\n\u012d\3\u012d\3\u012d\5\u012d\u150a\n\u012d\3\u012d\5\u012d\u150d"+
		"\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1513\n\u012e\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u151c\n\u012f"+
		"\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u1524\n\u0130"+
		"\3\u0130\3\u0130\5\u0130\u1528\n\u0130\3\u0131\3\u0131\5\u0131\u152c\n"+
		"\u0131\3\u0131\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\5\u0132\u1534\n"+
		"\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u153d\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\6\u0133\u1543\n\u0133\r"+
		"\u0133\16\u0133\u1544\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\3\u0135\3\u0135\5\u0135\u1561\n\u0135\3\u0136\6\u0136\u1564\n\u0136\r"+
		"\u0136\16\u0136\u1565\3\u0137\3\u0137\5\u0137\u156a\n\u0137\3\u0137\3"+
		"\u0137\3\u0137\3\u0138\3\u0138\5\u0138\u1571\n\u0138\3\u0138\3\u0138\5"+
		"\u0138\u1575\n\u0138\3\u0139\3\u0139\5\u0139\u1579\n\u0139\3\u0139\3\u0139"+
		"\5\u0139\u157d\n\u0139\3\u013a\3\u013a\3\u013a\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\3\u013b\7\u013b\u1587\n\u013b\f\u013b\16\u013b\u158a\13\u013b"+
		"\3\u013b\5\u013b\u158d\n\u013b\3\u013b\3\u013b\3\u013b\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013e\5\u013e\u159b"+
		"\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u15a1\n\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u15a8\n\u013e\3\u013f\3\u013f"+
		"\3\u013f\5\u013f\u15ad\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u15b8\n\u013f\3\u013f\5\u013f"+
		"\u15bb\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u15c1\n\u013f\5"+
		"\u013f\u15c3\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3"+
		"\u0140\5\u0140\u15cc\n\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3"+
		"\u0141\3\u0141\3\u0141\5\u0141\u15d6\n\u0141\3\u0141\3\u0141\3\u0141\5"+
		"\u0141\u15db\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\3\u0143\3"+
		"\u0143\3\u0144\3\u0144\3\u0145\3\u0145\3\u0146\3\u0146\5\u0146\u15ea\n"+
		"\u0146\3\u0147\3\u0147\5\u0147\u15ee\n\u0147\3\u0148\5\u0148\u15f1\n\u0148"+
		"\3\u0148\3\u0148\5\u0148\u15f5\n\u0148\3\u0148\5\u0148\u15f8\n\u0148\3"+
		"\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\6\u014a\u1604\n\u014a\r\u014a\16\u014a\u1605\5\u014a\u1608\n"+
		"\u014a\3\u014a\3\u014a\5\u014a\u160c\n\u014a\3\u014b\3\u014b\3\u014b\3"+
		"\u014b\7\u014b\u1612\n\u014b\f\u014b\16\u014b\u1615\13\u014b\3\u014b\3"+
		"\u014b\3\u014b\3\u014c\5\u014c\u161b\n\u014c\3\u014c\6\u014c\u161e\n\u014c"+
		"\r\u014c\16\u014c\u161f\5\u014c\u1622\n\u014c\3\u014c\3\u014c\3\u014d"+
		"\5\u014d\u1627\n\u014d\3\u014d\6\u014d\u162a\n\u014d\r\u014d\16\u014d"+
		"\u162b\3\u014d\3\u014d\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u1634\n"+
		"\u014e\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u163b\n\u014f\3"+
		"\u014f\3\u014f\5\u014f\u163f\n\u014f\3\u014f\5\u014f\u1642\n\u014f\3\u0150"+
		"\3\u0150\3\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151"+
		"\u164d\n\u0151\3\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u1653\n\u0152\3"+
		"\u0153\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u165c\n"+
		"\u0154\3\u0154\5\u0154\u165f\n\u0154\3\u0155\3\u0155\3\u0155\3\u0155\5"+
		"\u0155\u1665\n\u0155\3\u0155\6\u0155\u1668\n\u0155\r\u0155\16\u0155\u1669"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u1670\n\u0155\3\u0155\6\u0155"+
		"\u1673\n\u0155\r\u0155\16\u0155\u1674\5\u0155\u1677\n\u0155\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u167e\n\u0156\3\u0156\5\u0156\u1681"+
		"\n\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u1688\n\u0157"+
		"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158"+
		"\5\u0158\u1693\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1699\n"+
		"\u0158\3\u0158\3\u0158\5\u0158\u169d\n\u0158\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\5\u0159\u16a3\n\u0159\3\u0159\6\u0159\u16a6\n\u0159\r\u0159\16"+
		"\u0159\u16a7\5\u0159\u16aa\n\u0159\3\u0159\3\u0159\3\u015a\3\u015a\5\u015a"+
		"\u16b0\n\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\5\u015a\u16bb\n\u015a\5\u015a\u16bd\n\u015a\5\u015a\u16bf"+
		"\n\u015a\3\u015a\5\u015a\u16c2\n\u015a\3\u015b\3\u015b\5\u015b\u16c6\n"+
		"\u015b\3\u015b\5\u015b\u16c9\n\u015b\3\u015c\3\u015c\5\u015c\u16cd\n\u015c"+
		"\3\u015c\3\u015c\5\u015c\u16d1\n\u015c\3\u015c\3\u015c\3\u015c\5\u015c"+
		"\u16d6\n\u015c\3\u015d\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\5\u015e\u16e1\n\u015e\3\u015e\3\u015e\5\u015e\u16e5\n"+
		"\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u16ed\n"+
		"\u015e\3\u015f\5\u015f\u16f0\n\u015f\3\u015f\3\u015f\3\u015f\7\u015f\u16f5"+
		"\n\u015f\f\u015f\16\u015f\u16f8\13\u015f\3\u0160\3\u0160\5\u0160\u16fc"+
		"\n\u0160\3\u0160\6\u0160\u16ff\n\u0160\r\u0160\16\u0160\u1700\3\u0161"+
		"\3\u0161\5\u0161\u1705\n\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161"+
		"\u170b\n\u0161\3\u0161\3\u0161\5\u0161\u170f\n\u0161\3\u0161\5\u0161\u1712"+
		"\n\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u171a"+
		"\n\u0162\3\u0162\5\u0162\u171d\n\u0162\3\u0162\3\u0162\5\u0162\u1721\n"+
		"\u0162\3\u0162\3\u0162\5\u0162\u1725\n\u0162\3\u0162\3\u0162\3\u0162\5"+
		"\u0162\u172a\n\u0162\3\u0162\5\u0162\u172d\n\u0162\3\u0162\3\u0162\5\u0162"+
		"\u1731\n\u0162\3\u0162\3\u0162\5\u0162\u1735\n\u0162\7\u0162\u1737\n\u0162"+
		"\f\u0162\16\u0162\u173a\13\u0162\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u174d\n\u0164\3\u0165\3\u0165\5\u0165"+
		"\u1751\n\u0165\3\u0165\3\u0165\5\u0165\u1755\n\u0165\3\u0165\3\u0165\3"+
		"\u0166\3\u0166\5\u0166\u175b\n\u0166\3\u0166\3\u0166\5\u0166\u175f\n\u0166"+
		"\3\u0166\6\u0166\u1762\n\u0166\r\u0166\16\u0166\u1763\5\u0166\u1766\n"+
		"\u0166\3\u0166\5\u0166\u1769\n\u0166\3\u0166\3\u0166\5\u0166\u176d\n\u0166"+
		"\3\u0166\5\u0166\u1770\n\u0166\3\u0166\5\u0166\u1773\n\u0166\3\u0166\5"+
		"\u0166\u1776\n\u0166\3\u0167\3\u0167\5\u0167\u177a\n\u0167\3\u0168\3\u0168"+
		"\3\u0168\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169"+
		"\u1786\n\u0169\3\u0169\5\u0169\u1789\n\u0169\3\u016a\5\u016a\u178c\n\u016a"+
		"\3\u016a\6\u016a\u178f\n\u016a\r\u016a\16\u016a\u1790\3\u016b\3\u016b"+
		"\7\u016b\u1795\n\u016b\f\u016b\16\u016b\u1798\13\u016b\3\u016b\3\u016b"+
		"\5\u016b\u179c\n\u016b\3\u016c\3\u016c\7\u016c\u17a0\n\u016c\f\u016c\16"+
		"\u016c\u17a3\13\u016c\3\u016c\5\u016c\u17a6\n\u016c\3\u016d\3\u016d\3"+
		"\u016d\5\u016d\u17ab\n\u016d\3\u016d\3\u016d\3\u016d\7\u016d\u17b0\n\u016d"+
		"\f\u016d\16\u016d\u17b3\13\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u17b8"+
		"\n\u016d\3\u016d\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u17bf\n\u016d"+
		"\3\u016e\5\u016e\u17c2\n\u016e\3\u016e\5\u016e\u17c5\n\u016e\3\u016e\3"+
		"\u016e\5\u016e\u17c9\n\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u17ce\n\u016e"+
		"\3\u016e\3\u016e\7\u016e\u17d2\n\u016e\f\u016e\16\u016e\u17d5\13\u016e"+
		"\3\u016f\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\3\u0171\3\u0171\5\u0171"+
		"\u17df\n\u0171\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u17e6\n"+
		"\u0172\3\u0172\3\u0172\5\u0172\u17ea\n\u0172\3\u0173\3\u0173\3\u0173\3"+
		"\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u17f4\n\u0173\3\u0174\3"+
		"\u0174\5\u0174\u17f8\n\u0174\3\u0174\3\u0174\5\u0174\u17fc\n\u0174\3\u0174"+
		"\6\u0174\u17ff\n\u0174\r\u0174\16\u0174\u1800\3\u0174\3\u0174\3\u0174"+
		"\3\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175\u180c\n\u0175"+
		"\3\u0176\3\u0176\3\u0176\5\u0176\u1811\n\u0176\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\5\u0177\u1817\n\u0177\3\u0177\6\u0177\u181a\n\u0177\r\u0177\16"+
		"\u0177\u181b\3\u0177\5\u0177\u181f\n\u0177\3\u0177\6\u0177\u1822\n\u0177"+
		"\r\u0177\16\u0177\u1823\5\u0177\u1826\n\u0177\3\u0177\3\u0177\3\u0178"+
		"\3\u0178\5\u0178\u182c\n\u0178\3\u0179\3\u0179\3\u0179\5\u0179\u1831\n"+
		"\u0179\3\u0179\5\u0179\u1834\n\u0179\3\u017a\3\u017a\3\u017a\5\u017a\u1839"+
		"\n\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u183e\n\u017a\3\u017a\3\u017a"+
		"\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b\5\u017b\u1847\n\u017b\3\u017b"+
		"\6\u017b\u184a\n\u017b\r\u017b\16\u017b\u184b\3\u017b\3\u017b\3\u017c"+
		"\3\u017c\5\u017c\u1852\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c"+
		"\u1858\n\u017c\3\u017c\6\u017c\u185b\n\u017c\r\u017c\16\u017c\u185c\3"+
		"\u017c\3\u017c\5\u017c\u1861\n\u017c\5\u017c\u1863\n\u017c\3\u017d\3\u017d"+
		"\3\u017d\5\u017d\u1868\n\u017d\3\u017d\3\u017d\5\u017d\u186c\n\u017d\3"+
		"\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u1872\n\u017d\3\u017d\3\u017d\5"+
		"\u017d\u1876\n\u017d\3\u017e\3\u017e\3\u017e\3\u017e\3\u017f\3\u017f\3"+
		"\u017f\5\u017f\u187f\n\u017f\3\u017f\6\u017f\u1882\n\u017f\r\u017f\16"+
		"\u017f\u1883\3\u017f\5\u017f\u1887\n\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\5\u017f\u188d\n\u017f\3\u017f\6\u017f\u1890\n\u017f\r\u017f\16\u017f"+
		"\u1891\5\u017f\u1894\n\u017f\5\u017f\u1896\n\u017f\3\u0180\3\u0180\3\u0180"+
		"\5\u0180\u189b\n\u0180\3\u0181\3\u0181\3\u0181\5\u0181\u18a0\n\u0181\3"+
		"\u0181\6\u0181\u18a3\n\u0181\r\u0181\16\u0181\u18a4\3\u0181\3\u0181\3"+
		"\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u18ad\n\u0182\3\u0182\6\u0182\u18b0"+
		"\n\u0182\r\u0182\16\u0182\u18b1\3\u0182\3\u0182\3\u0183\3\u0183\3\u0183"+
		"\5\u0183\u18b9\n\u0183\3\u0183\3\u0183\5\u0183\u18bd\n\u0183\3\u0184\3"+
		"\u0184\3\u0184\3\u0185\3\u0185\7\u0185\u18c4\n\u0185\f\u0185\16\u0185"+
		"\u18c7\13\u0185\3\u0185\5\u0185\u18ca\n\u0185\3\u0185\7\u0185\u18cd\n"+
		"\u0185\f\u0185\16\u0185\u18d0\13\u0185\3\u0185\3\u0185\3\u0186\3\u0186"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\5\u0186\u18da\n\u0186\5\u0186\u18dc\n"+
		"\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\7\u0188\u18ea\n\u0188\f\u0188\16\u0188"+
		"\u18ed\13\u0188\3\u0189\3\u0189\5\u0189\u18f1\n\u0189\3\u0189\3\u0189"+
		"\7\u0189\u18f5\n\u0189\f\u0189\16\u0189\u18f8\13\u0189\3\u0189\3\u0189"+
		"\3\u018a\5\u018a\u18fd\n\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a"+
		"\3\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\5\u018c\u190b"+
		"\n\u018c\3\u018c\6\u018c\u190e\n\u018c\r\u018c\16\u018c\u190f\3\u018c"+
		"\3\u018c\3\u018d\3\u018d\5\u018d\u1916\n\u018d\3\u018d\5\u018d\u1919\n"+
		"\u018d\3\u018e\5\u018e\u191c\n\u018e\3\u018e\3\u018e\5\u018e\u1920\n\u018e"+
		"\3\u018e\7\u018e\u1923\n\u018e\f\u018e\16\u018e\u1926\13\u018e\3\u018e"+
		"\3\u018e\3\u018f\3\u018f\3\u018f\3\u018f\5\u018f\u192e\n\u018f\5\u018f"+
		"\u1930\n\u018f\3\u018f\3\u018f\5\u018f\u1934\n\u018f\3\u018f\5\u018f\u1937"+
		"\n\u018f\3\u0190\3\u0190\3\u0190\5\u0190\u193c\n\u0190\5\u0190\u193e\n"+
		"\u0190\3\u0190\3\u0190\5\u0190\u1942\n\u0190\3\u0190\3\u0190\3\u0190\3"+
		"\u0191\3\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u194e\n"+
		"\u0192\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0194\3\u0194\5\u0194"+
		"\u1957\n\u0194\3\u0194\3\u0194\5\u0194\u195b\n\u0194\3\u0194\6\u0194\u195e"+
		"\n\u0194\r\u0194\16\u0194\u195f\3\u0195\3\u0195\5\u0195\u1964\n\u0195"+
		"\3\u0195\3\u0195\5\u0195\u1968\n\u0195\3\u0196\3\u0196\3\u0196\5\u0196"+
		"\u196d\n\u0196\3\u0196\5\u0196\u1970\n\u0196\3\u0197\3\u0197\3\u0197\3"+
		"\u0198\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u197a\n\u0198\3\u0199\3"+
		"\u0199\3\u0199\3\u0199\5\u0199\u1980\n\u0199\3\u0199\5\u0199\u1983\n\u0199"+
		"\3\u0199\5\u0199\u1986\n\u0199\3\u019a\3\u019a\5\u019a\u198a\n\u019a\3"+
		"\u019a\6\u019a\u198d\n\u019a\r\u019a\16\u019a\u198e\3\u019a\3\u019a\3"+
		"\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u1998\n\u019a\3\u019b\3"+
		"\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\5\u019b\u19a2\n"+
		"\u019b\3\u019c\3\u019c\5\u019c\u19a6\n\u019c\3\u019c\3\u019c\5\u019c\u19aa"+
		"\n\u019c\3\u019c\5\u019c\u19ad\n\u019c\3\u019c\5\u019c\u19b0\n\u019c\3"+
		"\u019d\3\u019d\3\u019d\5\u019d\u19b5\n\u019d\3\u019e\3\u019e\3\u019e\5"+
		"\u019e\u19ba\n\u019e\3\u019e\5\u019e\u19bd\n\u019e\3\u019e\5\u019e\u19c0"+
		"\n\u019e\3\u019f\3\u019f\6\u019f\u19c4\n\u019f\r\u019f\16\u019f\u19c5"+
		"\3\u019f\5\u019f\u19c9\n\u019f\3\u019f\3\u019f\3\u01a0\3\u01a0\5\u01a0"+
		"\u19cf\n\u01a0\3\u01a0\5\u01a0\u19d2\n\u01a0\3\u01a1\5\u01a1\u19d5\n\u01a1"+
		"\3\u01a1\6\u01a1\u19d8\n\u01a1\r\u01a1\16\u01a1\u19d9\3\u01a1\5\u01a1"+
		"\u19dd\n\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2\6\u01a2\u19e3\n\u01a2\r"+
		"\u01a2\16\u01a2\u19e4\3\u01a3\3\u01a3\6\u01a3\u19e9\n\u01a3\r\u01a3\16"+
		"\u01a3\u19ea\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u19f0\n\u01a4\3\u01a5\3\u01a5"+
		"\3\u01a5\5\u01a5\u19f5\n\u01a5\3\u01a5\3\u01a5\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\5\u01a6\u19fd\n\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1a07\n\u01a6\3\u01a6\3\u01a6\5\u01a6"+
		"\u1a0b\n\u01a6\5\u01a6\u1a0d\n\u01a6\3\u01a6\5\u01a6\u1a10\n\u01a6\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\7\u01a7\u1a1a"+
		"\n\u01a7\f\u01a7\16\u01a7\u1a1d\13\u01a7\3\u01a7\5\u01a7\u1a20\n\u01a7"+
		"\3\u01a7\5\u01a7\u1a23\n\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a9"+
		"\3\u01a9\3\u01a9\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa"+
		"\u1a32\n\u01aa\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u1a37\n\u01aa\3\u01aa\3"+
		"\u01aa\5\u01aa\u1a3b\n\u01aa\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\5"+
		"\u01ab\u1a42\n\u01ab\3\u01ab\5\u01ab\u1a45\n\u01ab\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\7\u01ac\u1a4c\n\u01ac\f\u01ac\16\u01ac\u1a4f\13\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1a55\n\u01ac\3\u01ad\3\u01ad"+
		"\3\u01ad\5\u01ad\u1a5a\n\u01ad\3\u01ae\3\u01ae\5\u01ae\u1a5e\n\u01ae\3"+
		"\u01af\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\5\u01af\u1a66\n\u01af\3"+
		"\u01af\3\u01af\3\u01af\3\u01af\5\u01af\u1a6c\n\u01af\3\u01b0\3\u01b0\3"+
		"\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1a74\n\u01b0\3\u01b0\5\u01b0\u1a77"+
		"\n\u01b0\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b2\3\u01b2\3\u01b2\5\u01b2"+
		"\u1a80\n\u01b2\3\u01b2\5\u01b2\u1a83\n\u01b2\3\u01b2\5\u01b2\u1a86\n\u01b2"+
		"\3\u01b3\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u1a8f"+
		"\n\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1a95\n\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\5\u01b5\u1a9b\n\u01b5\5\u01b5\u1a9d\n\u01b5\3"+
		"\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\5\u01b6\u1aaa\n\u01b6\5\u01b6\u1aac\n\u01b6\3\u01b7\3"+
		"\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\5\u01b7\u1ab5\n\u01b7\5"+
		"\u01b7\u1ab7\n\u01b7\3\u01b8\3\u01b8\5\u01b8\u1abb\n\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\5\u01b8\u1ac1\n\u01b8\3\u01b8\3\u01b8\5\u01b8\u1ac5\n"+
		"\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01ba\3\u01ba\3\u01bb"+
		"\3\u01bb\3\u01bb\7\u01bb\u1ad1\n\u01bb\f\u01bb\16\u01bb\u1ad4\13\u01bb"+
		"\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1ad9\n\u01bc\3\u01bd\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u1ae4\n\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\5\u01be\u1aef\n\u01be\3\u01be\3\u01be\5\u01be\u1af3\n\u01be\3\u01be\3"+
		"\u01be\3\u01be\7\u01be\u1af8\n\u01be\f\u01be\16\u01be\u1afb\13\u01be\3"+
		"\u01be\3\u01be\5\u01be\u1aff\n\u01be\7\u01be\u1b01\n\u01be\f\u01be\16"+
		"\u01be\u1b04\13\u01be\3\u01be\3\u01be\5\u01be\u1b08\n\u01be\3\u01be\3"+
		"\u01be\3\u01be\3\u01be\3\u01be\3\u01be\7\u01be\u1b10\n\u01be\f\u01be\16"+
		"\u01be\u1b13\13\u01be\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u1b18\n\u01bf\3"+
		"\u01bf\5\u01bf\u1b1b\n\u01bf\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3"+
		"\u01c0\3\u01c0\7\u01c0\u1b24\n\u01c0\f\u01c0\16\u01c0\u1b27\13\u01c0\3"+
		"\u01c1\3\u01c1\5\u01c1\u1b2b\n\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3"+
		"\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1b35\n\u01c1\5\u01c1\u1b37\n\u01c1"+
		"\5\u01c1\u1b39\n\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c2\3\u01c2\5\u01c2\u1b43\n\u01c2\3\u01c2\3\u01c2\5\u01c2\u1b47\n"+
		"\u01c2\5\u01c2\u1b49\n\u01c2\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3"+
		"\u01c3\3\u01c3\3\u01c3\7\u01c3\u1b53\n\u01c3\f\u01c3\16\u01c3\u1b56\13"+
		"\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1b5d\n\u01c3\3"+
		"\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\3\u01c5\5\u01c5\u1b6a\n\u01c5\3\u01c5\5\u01c5\u1b6d\n\u01c5\3"+
		"\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5"+
		"\3\u01c5\7\u01c5\u1b79\n\u01c5\f\u01c5\16\u01c5\u1b7c\13\u01c5\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1b83\n\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1b8b\n\u01c6\3\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1b92\n\u01c6\3\u01c6\3\u01c6\5\u01c6"+
		"\u1b96\n\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1b9d\n"+
		"\u01c7\3\u01c8\3\u01c8\5\u01c8\u1ba1\n\u01c8\3\u01c8\3\u01c8\3\u01c8\5"+
		"\u01c8\u1ba6\n\u01c8\7\u01c8\u1ba8\n\u01c8\f\u01c8\16\u01c8\u1bab\13\u01c8"+
		"\3\u01c8\3\u01c8\3\u01c8\7\u01c8\u1bb0\n\u01c8\f\u01c8\16\u01c8\u1bb3"+
		"\13\u01c8\3\u01c8\5\u01c8\u1bb6\n\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01c9"+
		"\3\u01c9\5\u01c9\u1bbd\n\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u1bc2\n"+
		"\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9"+
		"\u1bcb\n\u01c9\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca"+
		"\5\u01ca\u1bd4\n\u01ca\3\u01ca\5\u01ca\u1bd7\n\u01ca\3\u01ca\3\u01ca\3"+
		"\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb"+
		"\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\5\u01cb\u1beb"+
		"\n\u01cb\3\u01cc\3\u01cc\5\u01cc\u1bef\n\u01cc\3\u01cd\5\u01cd\u1bf2\n"+
		"\u01cd\3\u01cd\3\u01cd\3\u01cd\6\u01cd\u1bf7\n\u01cd\r\u01cd\16\u01cd"+
		"\u1bf8\3\u01cd\5\u01cd\u1bfc\n\u01cd\3\u01cd\3\u01cd\5\u01cd\u1c00\n\u01cd"+
		"\3\u01cd\5\u01cd\u1c03\n\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce"+
		"\5\u01ce\u1c0a\n\u01ce\3\u01cf\5\u01cf\u1c0d\n\u01cf\3\u01cf\3\u01cf\6"+
		"\u01cf\u1c11\n\u01cf\r\u01cf\16\u01cf\u1c12\3\u01cf\5\u01cf\u1c16\n\u01cf"+
		"\3\u01cf\3\u01cf\5\u01cf\u1c1a\n\u01cf\3\u01cf\5\u01cf\u1c1d\n\u01cf\3"+
		"\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\5\u01d0\u1c24\n\u01d0\3\u01d1\3"+
		"\u01d1\3\u01d1\5\u01d1\u1c29\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3"+
		"\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\7\u01d2\u1c35\n\u01d2\f"+
		"\u01d2\16\u01d2\u1c38\13\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2"+
		"\u1c3e\n\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\3\u01d3\3\u01d3\5\u01d3\u1c49\n\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1c52\n\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1c5b\n\u01d4\3\u01d4\3\u01d4"+
		"\5\u01d4\u1c5f\n\u01d4\3\u01d4\3\u01d4\5\u01d4\u1c63\n\u01d4\3\u01d4\3"+
		"\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1c7d\n\u01d4\3\u01d4"+
		"\5\u01d4\u1c80\n\u01d4\3\u01d4\5\u01d4\u1c83\n\u01d4\3\u01d4\3\u01d4\3"+
		"\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1c8d\n\u01d4\3"+
		"\u01d4\3\u01d4\5\u01d4\u1c91\n\u01d4\3\u01d5\3\u01d5\3\u01d5\5\u01d5\u1c96"+
		"\n\u01d5\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1c9b\n\u01d6\3\u01d7\3\u01d7"+
		"\3\u01d7\5\u01d7\u1ca0\n\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\5\u01d7\u1ca9\n\u01d7\3\u01d7\5\u01d7\u1cac\n\u01d7\5"+
		"\u01d7\u1cae\n\u01d7\3\u01d7\3\u01d7\5\u01d7\u1cb2\n\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u1cb9\n\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\5\u01d7\u1cc0\n\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\5\u01d7\u1cc8\n\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\5\u01d7\u1cd7\n\u01d7\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1cdc\n\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ce1\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3"+
		"\u01d8\5\u01d8\u1ce7\n\u01d8\3\u01d8\5\u01d8\u1cea\n\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u1cee\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\5\u01d8\u1cf8\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d04\n\u01d8"+
		"\5\u01d8\u1d06\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8"+
		"\u1d0d\n\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d11\n\u01d8\3\u01d8\3\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d18\n\u01d8\3\u01d8\6\u01d8\u1d1b\n\u01d8"+
		"\r\u01d8\16\u01d8\u1d1c\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\5\u01d8\u1d26\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d34"+
		"\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d3c"+
		"\n\u01d8\3\u01d8\5\u01d8\u1d3f\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d48\n\u01d8\3\u01d8\3\u01d8\7\u01d8"+
		"\u1d4c\n\u01d8\f\u01d8\16\u01d8\u1d4f\13\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d58\n\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d60\n\u01d8\3\u01d8\5\u01d8"+
		"\u1d63\n\u01d8\3\u01d8\5\u01d8\u1d66\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d6f\n\u01d8\3\u01d8\3\u01d8\3"+
		"\u01d8\5\u01d8\u1d74\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d79\n\u01d8"+
		"\3\u01d8\6\u01d8\u1d7c\n\u01d8\r\u01d8\16\u01d8\u1d7d\3\u01d8\3\u01d8"+
		"\3\u01d8\5\u01d8\u1d83\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d88\n"+
		"\u01d8\3\u01d8\5\u01d8\u1d8b\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d90"+
		"\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1d95\n\u01d8\7\u01d8\u1d97\n"+
		"\u01d8\f\u01d8\16\u01d8\u1d9a\13\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8"+
		"\u1d9f\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1da5\n\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1dae\n"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1db3\n\u01d8\3\u01d8\3\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1dbb\n\u01d8\3\u01d8\3\u01d8\5"+
		"\u01d8\u1dbf\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1dc4\n\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1dca\n\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\5\u01d8\u1dd1\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8"+
		"\u1dd6\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1ddd\n"+
		"\u01d8\3\u01d8\3\u01d8\5\u01d8\u1de1\n\u01d8\3\u01d8\3\u01d8\3\u01d8\5"+
		"\u01d8\u1de6\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5"+
		"\u01d8\u1dee\n\u01d8\3\u01d8\5\u01d8\u1df1\n\u01d8\3\u01d8\5\u01d8\u1df4"+
		"\n\u01d8\3\u01d8\5\u01d8\u1df7\n\u01d8\3\u01d8\3\u01d8\5\u01d8\u1dfb\n"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1e00\n\u01d8\3\u01d8\3\u01d8\3"+
		"\u01d8\5\u01d8\u1e05\n\u01d8\3\u01d8\3\u01d8\5\u01d8\u1e09\n\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u1e10\n\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\5\u01d8\u1e15\n\u01d8\5\u01d8\u1e17\n\u01d8\3\u01d9\3\u01d9\3"+
		"\u01da\3\u01da\3\u01db\3\u01db\3\u01dc\3\u01dc\3\u01dc\5\u01dc\u1e22\n"+
		"\u01dc\3\u01dc\3\u01dc\5\u01dc\u1e26\n\u01dc\5\u01dc\u1e28\n\u01dc\3\u01dc"+
		"\3\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd"+
		"\u1e33\n\u01dd\3\u01de\3\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df"+
		"\3\u01df\3\u01df\5\u01df\u1e3e\n\u01df\3\u01e0\3\u01e0\3\u01e0\5\u01e0"+
		"\u1e43\n\u01e0\3\u01e0\6\u01e0\u1e46\n\u01e0\r\u01e0\16\u01e0\u1e47\5"+
		"\u01e0\u1e4a\n\u01e0\3\u01e1\3\u01e1\5\u01e1\u1e4e\n\u01e1\3\u01e1\5\u01e1"+
		"\u1e51\n\u01e1\3\u01e1\3\u01e1\5\u01e1\u1e55\n\u01e1\3\u01e2\3\u01e2\3"+
		"\u01e2\3\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3"+
		"\5\u01e3\u1e62\n\u01e3\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u1e67\n\u01e4\3"+
		"\u01e4\3\u01e4\5\u01e4\u1e6b\n\u01e4\3\u01e4\6\u01e4\u1e6e\n\u01e4\r\u01e4"+
		"\16\u01e4\u1e6f\3\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u1e76\n\u01e4"+
		"\3\u01e4\3\u01e4\5\u01e4\u1e7a\n\u01e4\3\u01e5\3\u01e5\3\u01e5\5\u01e5"+
		"\u1e7f\n\u01e5\3\u01e5\3\u01e5\5\u01e5\u1e83\n\u01e5\3\u01e5\3\u01e5\3"+
		"\u01e5\5\u01e5\u1e88\n\u01e5\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e8d\n\u01e6"+
		"\3\u01e6\5\u01e6\u1e90\n\u01e6\3\u01e6\5\u01e6\u1e93\n\u01e6\3\u01e6\6"+
		"\u01e6\u1e96\n\u01e6\r\u01e6\16\u01e6\u1e97\3\u01e6\3\u01e6\3\u01e7\3"+
		"\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1ea1\n\u01e7\3\u01e7\3\u01e7\3"+
		"\u01e7\3\u01e7\7\u01e7\u1ea7\n\u01e7\f\u01e7\16\u01e7\u1eaa\13\u01e7\3"+
		"\u01e7\5\u01e7\u1ead\n\u01e7\3\u01e7\3\u01e7\3\u01e8\3\u01e8\3\u01e8\3"+
		"\u01e8\3\u01e8\3\u01e8\5\u01e8\u1eb7\n\u01e8\3\u01e8\5\u01e8\u1eba\n\u01e8"+
		"\5\u01e8\u1ebc\n\u01e8\3\u01e9\3\u01e9\3\u01e9\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01ea\3\u01ea\5\u01ea\u1ec6\n\u01ea\5\u01ea\u1ec8\n\u01ea\3\u01eb\3"+
		"\u01eb\3\u01eb\3\u01eb\5\u01eb\u1ece\n\u01eb\3\u01ec\3\u01ec\3\u01ec\3"+
		"\u01ec\5\u01ec\u1ed4\n\u01ec\5\u01ec\u1ed6\n\u01ec\3\u01ed\3\u01ed\3\u01ed"+
		"\3\u01ee\3\u01ee\3\u01ee\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef\3\u01ef"+
		"\5\u01ef\u1ee4\n\u01ef\5\u01ef\u1ee6\n\u01ef\3\u01f0\3\u01f0\3\u01f0\3"+
		"\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f0\5\u01f0\u1ef1\n\u01f0\3"+
		"\u01f1\3\u01f1\3\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\5\u01f2\u1efd\n\u01f2\3\u01f3\3\u01f3\3\u01f3\3\u01f3\3\u01f4"+
		"\5\u01f4\u1f04\n\u01f4\3\u01f4\3\u01f4\6\u01f4\u1f08\n\u01f4\r\u01f4\16"+
		"\u01f4\u1f09\3\u01f5\3\u01f5\3\u01f5\3\u01f5\3\u01f5\5\u01f5\u1f11\n\u01f5"+
		"\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\3\u01f6\5\u01f6\u1f1a"+
		"\n\u01f6\3\u01f7\3\u01f7\5\u01f7\u1f1e\n\u01f7\3\u01f7\3\u01f7\5\u01f7"+
		"\u1f22\n\u01f7\3\u01f7\3\u01f7\3\u01f8\5\u01f8\u1f27\n\u01f8\3\u01f8\3"+
		"\u01f8\5\u01f8\u1f2b\n\u01f8\3\u01f8\5\u01f8\u1f2e\n\u01f8\3\u01f9\3\u01f9"+
		"\5\u01f9\u1f32\n\u01f9\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\5\u01fa"+
		"\u1f39\n\u01fa\3\u01fb\3\u01fb\5\u01fb\u1f3d\n\u01fb\3\u01fb\3\u01fb\5"+
		"\u01fb\u1f41\n\u01fb\3\u01fb\6\u01fb\u1f44\n\u01fb\r\u01fb\16\u01fb\u1f45"+
		"\3\u01fc\3\u01fc\5\u01fc\u1f4a\n\u01fc\3\u01fd\3\u01fd\3\u01fd\5\u01fd"+
		"\u1f4f\n\u01fd\3\u01fe\3\u01fe\3\u01ff\3\u01ff\5\u01ff\u1f55\n\u01ff\3"+
		"\u0200\3\u0200\5\u0200\u1f59\n\u0200\3\u0201\3\u0201\3\u0201\5\u0201\u1f5e"+
		"\n\u0201\3\u0202\3\u0202\5\u0202\u1f62\n\u0202\3\u0202\3\u0202\3\u0202"+
		"\5\u0202\u1f67\n\u0202\3\u0202\5\u0202\u1f6a\n\u0202\3\u0203\3\u0203\5"+
		"\u0203\u1f6e\n\u0203\3\u0204\3\u0204\5\u0204\u1f72\n\u0204\3\u0205\3\u0205"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\5\u0206\u1f7a\n\u0206\3\u0207\3\u0207"+
		"\3\u0208\3\u0208\3\u0209\3\u0209\3\u020a\3\u020a\3\u020b\3\u020b\3\u020c"+
		"\3\u020c\3\u020d\3\u020d\3\u020e\3\u020e\3\u020f\3\u020f\3\u0210\3\u0210"+
		"\3\u0211\3\u0211\3\u0212\3\u0212\3\u0213\3\u0213\3\u0214\3\u0214\3\u0215"+
		"\3\u0215\3\u0215\5\u0215\u1f9b\n\u0215\3\u0216\3\u0216\3\u0217\3\u0217"+
		"\3\u0218\3\u0218\3\u0219\3\u0219\3\u021a\3\u021a\3\u021b\3\u021b\3\u021c"+
		"\3\u021c\3\u021d\3\u021d\3\u021e\3\u021e\3\u021e\5\u021e\u1fb0\n\u021e"+
		"\3\u021e\6\u021e\u1fb3\n\u021e\r\u021e\16\u021e\u1fb4\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e\3\u021e"+
		"\3\u021e\3\u021e\3\u021e\5\u021e\u1fc5\n\u021e\3\u021f\5\u021f\u1fc8\n"+
		"\u021f\3\u021f\6\u021f\u1fcb\n\u021f\r\u021f\16\u021f\u1fcc\3\u0220\3"+
		"\u0220\3\u0220\3\u0220\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221\3\u0221"+
		"\3\u0221\5\u0221\u1fda\n\u0221\3\u0222\3\u0222\5\u0222\u1fde\n\u0222\3"+
		"\u0222\3\u0222\5\u0222\u1fe2\n\u0222\7\u0222\u1fe4\n\u0222\f\u0222\16"+
		"\u0222\u1fe7\13\u0222\3\u0222\3\u0222\5\u0222\u1feb\n\u0222\3\u0223\3"+
		"\u0223\3\u0223\3\u0223\3\u0223\5\u0223\u1ff2\n\u0223\3\u0223\3\u0223\3"+
		"\u0223\5\u0223\u1ff7\n\u0223\5\u0223\u1ff9\n\u0223\5\u0223\u1ffb\n\u0223"+
		"\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\5\u0223\u2004"+
		"\n\u0223\3\u0223\3\u0223\5\u0223\u2008\n\u0223\6\u0223\u200a\n\u0223\r"+
		"\u0223\16\u0223\u200b\5\u0223\u200e\n\u0223\3\u0223\3\u0223\5\u0223\u2012"+
		"\n\u0223\3\u0224\3\u0224\3\u0224\3\u0225\3\u0225\5\u0225\u2019\n\u0225"+
		"\3\u0225\3\u0225\5\u0225\u201d\n\u0225\5\u0225\u201f\n\u0225\3\u0226\3"+
		"\u0226\5\u0226\u2023\n\u0226\3\u0226\3\u0226\5\u0226\u2027\n\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226\u202e\n\u0226\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226\u2036\n\u0226\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226\u203e\n\u0226\5\u0226\u2040\n"+
		"\u0226\3\u0227\3\u0227\3\u0227\3\u0227\5\u0227\u2046\n\u0227\3\u0227\5"+
		"\u0227\u2049\n\u0227\3\u0227\3\u0227\3\u0228\3\u0228\3\u0228\3\u0228\3"+
		"\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u2061"+
		"\n\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u2068\n\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\3\u0228\3\u0228\3\u0228\3\u0228\5\u0228\u2089\n\u0228\3\u0229\3\u0229"+
		"\3\u0229\5\u0229\u208e\n\u0229\3\u0229\5\u0229\u2091\n\u0229\3\u0229\3"+
		"\u0229\3\u0229\5\u0229\u2096\n\u0229\5\u0229\u2098\n\u0229\3\u0229\3\u0229"+
		"\7\u0229\u209c\n\u0229\f\u0229\16\u0229\u209f\13\u0229\3\u022a\3\u022a"+
		"\3\u022a\7\u022a\u20a4\n\u022a\f\u022a\16\u022a\u20a7\13\u022a\3\u022b"+
		"\3\u022b\5\u022b\u20ab\n\u022b\3\u022b\3\u022b\3\u022b\5\u022b\u20b0\n"+
		"\u022b\3\u022b\5\u022b\u20b3\n\u022b\3\u022b\5\u022b\u20b6\n\u022b\3\u022c"+
		"\3\u022c\5\u022c\u20ba\n\u022c\3\u022c\3\u022c\3\u022d\3\u022d\5\u022d"+
		"\u20c0\n\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\5\u022d\u20df\n\u022d\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\5\u022e\u20e6\n\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\5\u022e\u20f5\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\5\u022e\u2105\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\5\u022e\u2118\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\5\u022e\u2129\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\5\u022e\u2130\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\5\u022e\u2138\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u2145\n\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u214e"+
		"\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e"+
		"\u2157\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\5\u022e\u2160\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\5\u022e\u216a\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\5\u022e\u2172\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u217c\n\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u2186\n\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\5\u022e\u2192\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\5\u022e\u21a2\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\5\u022e\u21b4\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u21c1\n\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u21d0\n\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u21db"+
		"\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\5\u022e\u21e5\n\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\5\u022e\u21f0\n\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u21fa\n\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u220b\n\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\5\u022e\u2211\n\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e"+
		"\u2227\n\u022e\3\u022f\3\u022f\5\u022f\u222b\n\u022f\3\u0230\3\u0230\3"+
		"\u0230\5\u0230\u2230\n\u0230\3\u0231\3\u0231\3\u0231\5\u0231\u2235\n\u0231"+
		"\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u223b\n\u0231\3\u0231\3\u0231"+
		"\3\u0231\3\u0231\5\u0231\u2241\n\u0231\3\u0231\3\u0231\3\u0231\3\u0231"+
		"\5\u0231\u2247\n\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u224c\n\u0231\5"+
		"\u0231\u224e\n\u0231\3\u0231\5\u0231\u2251\n\u0231\3\u0231\3\u0231\3\u0231"+
		"\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\5\u0231\u225b\n\u0231\3\u0231"+
		"\5\u0231\u225e\n\u0231\5\u0231\u2260\n\u0231\5\u0231\u2262\n\u0231\3\u0231"+
		"\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231\3\u0231"+
		"\3\u0231\3\u0231\5\u0231\u2270\n\u0231\3\u0232\3\u0232\5\u0232\u2274\n"+
		"\u0232\3\u0232\3\u0232\3\u0233\3\u0233\3\u0234\3\u0234\3\u0235\3\u0235"+
		"\3\u0236\3\u0236\3\u0237\3\u0237\3\u0238\3\u0238\3\u0239\3\u0239\3\u023a"+
		"\3\u023a\3\u023b\3\u023b\3\u023c\3\u023c\3\u023d\3\u023d\3\u023e\3\u023e"+
		"\3\u023f\3\u023f\3\u0240\3\u0240\3\u0240\7\u0240\u2295\n\u0240\f\u0240"+
		"\16\u0240\u2298\13\u0240\3\u0241\3\u0241\3\u0242\3\u0242\3\u0243\3\u0243"+
		"\3\u0244\3\u0244\5\u0244\u22a2\n\u0244\3\u0245\3\u0245\3\u0245\7\u0245"+
		"\u22a7\n\u0245\f\u0245\16\u0245\u22aa\13\u0245\3\u0246\3\u0246\3\u0247"+
		"\3\u0247\3\u0248\3\u0248\3\u0249\3\u0249\3\u0249\3\u0249\3\u024a\3\u024a"+
		"\3\u024b\3\u024b\3\u024c\3\u024c\3\u024d\3\u024d\5\u024d\u22be\n\u024d"+
		"\3\u024e\5\u024e\u22c1\n\u024e\3\u024e\3\u024e\5\u024e\u22c5\n\u024e\3"+
		"\u024f\3\u024f\3\u024f\3\u0250\3\u0250\3\u0250\2\5\u037a\u037e\u0388\u0251"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc"+
		"\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314"+
		"\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c"+
		"\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344"+
		"\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c"+
		"\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374"+
		"\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c"+
		"\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4"+
		"\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc"+
		"\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4"+
		"\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec"+
		"\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404"+
		"\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c"+
		"\u041e\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434"+
		"\u0436\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c"+
		"\u044e\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464"+
		"\u0466\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c"+
		"\u047e\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494"+
		"\u0496\u0498\u049a\u049c\u049e\2\u009d\4\2\31\31\u011a\u011a\4\2\f\f\u01bf"+
		"\u01bf\5\2\u00ec\u00ec\u0133\u0133\u01db\u01db\4\2TT\u019e\u019e\5\28"+
		"8\u01a9\u01a9\u0233\u0233\4\2\u009b\u009b\u00b0\u00b0\4\2\n\n,,\5\2\u0094"+
		"\u0094\u010f\u010f\u027d\u027d\5\2\u016d\u016d\u0194\u0194\u01ad\u01ad"+
		"\4\2\u00da\u00da\u0285\u0285\4\288\u0233\u0233\4\2\5\5\u00a4\u00a4\5\2"+
		"\5\5\u00a4\u00a4\u015f\u015f\5\2zz\u019d\u019d\u0234\u0234\4\2\u0149\u0149"+
		"\u019e\u019e\4\2\u0152\u0152\u023c\u023c\5\2\u00d0\u00d0\u0110\u0110\u01a8"+
		"\u01a8\4\2{{\u0173\u0173\4\2\u0180\u0180\u019e\u019e\4\2\u0121\u0121\u0177"+
		"\u0177\4\2\u00e4\u00e4\u021d\u021d\4\2\u00ca\u00ca\u00e5\u00e5\4\2\u008e"+
		"\u008e\u0257\u0257\4\2\u013c\u013c\u0278\u0278\4\2\5\5\u01ec\u01ec\4\2"+
		"\6\6\u0093\u0093\4\2\16\16ww\4\2\u0119\u0119\u0292\u0292\5\2\u00f4\u00f4"+
		"\u00f6\u00f6\u0193\u0193\4\2\u0091\u0091\u00fa\u00fa\4\2\u0182\u0182\u01eb"+
		"\u01eb\4\2\u0188\u0188\u0285\u0285\4\2\u0185\u0185\u0230\u0230\4\2\u0191"+
		"\u0191\u0198\u0198\4\2))\u0213\u0213\4\2DD\u01d8\u01d8\4\2\u00f1\u00f1"+
		"\u0144\u0144\7\2tt\u00f1\u00f1\u0144\u0144\u0151\u0151\u017d\u017d\4\2"+
		"\b\b((\4\2\27\27\u01d8\u01d8\4\2\u027b\u027b\u0280\u0280\4\2\u00e1\u00e1"+
		"\u01ae\u01ae\4\2\60\60\u022c\u022c\4\2\u0190\u0190\u0196\u0196\5\2\u00cf"+
		"\u00cf\u013d\u013d\u0178\u0178\4\2##\u0148\u0148\4\2\u02e4\u02e4\u0306"+
		"\u0306\4\2\u00eb\u00eb\u0176\u0176\4\2\u0094\u0094\u01cc\u01cc\4\2AA\u0170"+
		"\u0170\4\2\u008e\u008e\u00da\u00da\4\2\u0183\u0183\u0203\u0203\4\2\u0115"+
		"\u0115\u0131\u0131\4\2\u017e\u017e\u02b2\u02b2\4\2\u0136\u0136\u0253\u0253"+
		"\4\2\17\17\u009c\u009c\4\2\u0139\u0139\u0287\u0287\4\2\u008d\u008d\u0120"+
		"\u0120\5\2\u00f1\u00f1\u0144\u0144\u0151\u0151\5\2\u0094\u0094\u009b\u009b"+
		"\u00b0\u00b0\4\2\u00e8\u00e8\u0215\u0215\5\2\u0080\u0081\u0160\u0161\u02b0"+
		"\u02b1\4\2\u0277\u0277\u02e2\u02e2\5\2\u008e\u008e\u0121\u0121\u01e1\u01e1"+
		"\5\2\u008e\u008e\u0121\u0121\u017d\u017d\4\2xx\u0092\u0092\6\2\u0107\u0107"+
		"\u010e\u010e\u0172\u0172\u01a5\u01a5\4\2\u008e\u008e\u02f1\u02f1\3\3\u02fa"+
		"\u02fa\3\2\u02fa\u02fa\3\2\u01f8\u01f9\4\2\u0197\u0197\u029e\u029e\3\2"+
		"ef\4\2\u0189\u0189\u0293\u0293\4\2**\u00fa\u00fa\4\2;;\u0095\u0095\5\2"+
		"\16\16\u009e\u009e\u0276\u0276\4\2uu\u0166\u0166\5\2\u00e1\u00e1\u0127"+
		"\u0127\u01fe\u01fe\4\2\u020f\u020f\u025e\u025e\5\2\u020f\u020f\u022e\u022e"+
		"\u025e\u025e\4\2\u00c0\u00c0\u00fb\u00fb\4\2vv\u0202\u0202\4\2\u00f8\u00f8"+
		"\u0121\u0121\4\2\16\16\u027c\u027c\4\2%%\u0219\u0219\4\2\32\32\u0096\u0096"+
		"\4\2\u00d1\u00d1\u0124\u0124\4\2\16\16\u00d1\u00d1\4\2\u0254\u0254\u025a"+
		"\u025a\4\2\u0152\u0152\u0241\u0241\3\2\u012c\u012f\3\2\u02f7\u02f8\4\2"+
		"\u02eb\u02eb\u02ef\u02ef\3\2\u02ec\u02ed\4\2\u008b\u008b\u00fd\u00fd\6"+
		"\2\16\16\24\24\u00c4\u00c4\u022f\u022f\5\2::\u0126\u0126\u0267\u0267\4"+
		"\2\16\16\u009e\u009e\4\2GG\u02a1\u02a1\4\2\u009e\u009e\u0276\u0276\3\2"+
		"\u01b9\u01bc\4\2CC]]\4\2\u00d2\u00d2\u0125\u0125\4\2LL\u0169\u0169\4\2"+
		"\u02a2\u02a2\u02a5\u02a5\4\2\u00b6\u00b6\u0175\u0175\4\2\u00ba\u00ba\u0164"+
		"\u0164\4\2jj\u00a2\u00a2\4\2\u00ef\u00ef\u0224\u0224\7\2\u02c3\u02c5\u02c7"+
		"\u02cc\u02ce\u02cf\u02d1\u02d1\u02d5\u02d8\3\2\u02bc\u02c2\3\2\u02b6\u02bb"+
		"\4\2\u01db\u01db\u0206\u0206\4\2\u00d7\u00d7\u01c9\u01c9\4\2\u0184\u0184"+
		"\u020d\u020d\3\2\u00b7\u00b8\4\2\u01a2\u01a2\u0235\u0235\5\2\u00cc\u00cc"+
		"\u0246\u0246\u0294\u0294\4\2[[\u0201\u0201\5\2[[\u017d\u017d\u0201\u0201"+
		"\4\2\u01af\u01af\u0243\u0243\4\2\u01f0\u01f0\u0231\u0231\4\2\u00f8\u00f8"+
		"\u01f1\u01f1\3\2\u01bd\u01be\4\2\u0080\u0080\u02b1\u02b1\4\2\u0160\u0160"+
		"\u0212\u0212\4\2@@KK\5\2\20\20rr\u00a4\u00a4\4\2\20\20\u00a4\u00a4\4\2"+
		"rr\u00a4\u00a4\4\2\20\20rr\5\2\20\20\u00a4\u00a4\u00c2\u00c2\4\2\24\24"+
		"\u00c9\u00c9\4\2PP\u01d5\u01d5\6\2\20\20ZZ\u00a4\u00a4\u0216\u0216\6\2"+
		"\20\20\u00a4\u00a4\u0216\u0216\u027d\u027d\5\2\u0094\u0094\u00a4\u00a4"+
		"\u010f\u010f\b\2\20\20\u0094\u0094\u00a4\u00a4\u010f\u010f\u0216\u0216"+
		"\u027d\u027d\4\2\u00a4\u00a4\u027d\u027d\5\2\20\20\u00a4\u00a4\u00e7\u00e7"+
		"\5\2\20\20\u00a4\u00a4\u0216\u0216\5\2\20\20rr\u01f2\u01f2\5\2\20\20\u00a4"+
		"\u00a4\u0283\u0283\f\2\20\20\'\'ZZ\u0094\u0094\u00a4\u00a4\u010f\u010f"+
		"\u013c\u013c\u01dd\u01dd\u0216\u0216\u027d\u027d\7\2\20\20rr\u00a4\u00a4"+
		"\u0146\u0146\u0277\u0277\6\2\20\20\u00a4\u00a4\u00c2\u00c2\u0272\u0272"+
		"\5\2\u00a4\u00a4\u0154\u0154\u0272\u0272\4\2\22\22\36\36\4\2\u0098\u0098"+
		"\u0268\u0268\b\2\u0080\u0080\u00f2\u00f2\u0159\u0159\u0160\u0160\u0212"+
		"\u0212\u02b1\u02b1\u00ab\2\5\5\n\r\22\22\30\30\33\36!!##%&**,,//\62\66"+
		"8:=>@@BCEEGGJLNNQTWWY_dgjquvx}\u0080\u0080\u0083\u0088\u008a\u008b\u008f"+
		"\u008f\u0091\u0092\u0094\u0094\u0097\u0097\u0099\u0099\u009b\u009b\u009d"+
		"\u009d\u00a2\u00a3\u00a5\u00a5\u00a7\u00a7\u00ac\u00ac\u00af\u00b1\u00b6"+
		"\u00ba\u00bd\u00c0\u00c2\u00c2\u00c5\u00c5\u00c7\u00c7\u00c9\u00c9\u00cb"+
		"\u00cc\u00d0\u00d2\u00d5\u00d5\u00d7\u00da\u00e1\u00e2\u00e9\u00e9\u00ec"+
		"\u00ec\u00ef\u00ef\u00f2\u00f2\u00f6\u00f6\u00f8\u00f8\u00fa\u00ff\u0103"+
		"\u0105\u010b\u010b\u010d\u010e\u0110\u0112\u0114\u0114\u0116\u0116\u0118"+
		"\u0118\u011b\u011d\u011f\u011f\u0121\u0127\u0129\u0129\u012b\u012e\u0130"+
		"\u0130\u0132\u0132\u0137\u0137\u013a\u013a\u013e\u013e\u0140\u0143\u0145"+
		"\u0145\u0149\u0149\u014b\u014b\u014e\u014e\u0150\u0150\u0152\u0152\u0154"+
		"\u0154\u0156\u0156\u0159\u015c\u015f\u0160\u0163\u016d\u016f\u016f\u0172"+
		"\u0173\u0175\u0175\u017d\u017e\u0184\u0184\u018b\u018f\u0191\u0191\u0193"+
		"\u0194\u0197\u0197\u0199\u019a\u019d\u019d\u019f\u019f\u01a2\u01a3\u01a5"+
		"\u01a5\u01a7\u01aa\u01ac\u01ad\u01af\u01af\u01b1\u01b1\u01b3\u01b3\u01bf"+
		"\u01bf\u01c2\u01c3\u01c6\u01cb\u01d0\u01d0\u01d5\u01d5\u01da\u01dd\u01df"+
		"\u01e0\u01e3\u01e3\u01e5\u01e6\u01e8\u01e8\u01ea\u01ea\u01ed\u01ee\u01f1"+
		"\u01f1\u01f3\u01f5\u01f8\u01fc\u01fe\u01fe\u0201\u0202\u0204\u0207\u0209"+
		"\u020b\u020d\u020f\u0212\u0212\u0214\u0215\u0217\u0217\u0219\u021c\u021e"+
		"\u0221\u0224\u0229\u022b\u022b\u022d\u022f\u0233\u0235\u0237\u0237\u0239"+
		"\u023d\u023f\u0241\u0243\u0246\u0248\u0248\u024b\u024b\u0257\u0257\u025d"+
		"\u0265\u0267\u0269\u026b\u026c\u026e\u026e\u0270\u0272\u0277\u0277\u027a"+
		"\u027a\u027c\u027c\u027e\u027f\u0281\u0283\u0285\u0285\u0287\u028a\u028c"+
		"\u028f\u0293\u0296\u0299\u029a\u029d\u02aa\u02ac\u02ad\u02af\u02af\u02b1"+
		"\u02b3\u02b5\u02c5\u02c7\u02cc\u02ce\u02cf\u02d1\u02d2\u02d4\u02d8\u0306"+
		"\u0306\5\2NN\u02c6\u02c6\u02d2\u02d4\7\2qq\u02c3\u02c3\u02cd\u02cd\u02d0"+
		"\u02d0\u02d5\u02d5\4\2\u02dd\u02dd\u02e4\u02e4\2\u27a0\2\u04a9\3\2\2\2"+
		"\4\u04d2\3\2\2\2\6\u04d4\3\2\2\2\b\u04d9\3\2\2\2\n\u04ec\3\2\2\2\f\u0520"+
		"\3\2\2\2\16\u0524\3\2\2\2\20\u0532\3\2\2\2\22\u0536\3\2\2\2\24\u0542\3"+
		"\2\2\2\26\u0547\3\2\2\2\30\u0554\3\2\2\2\32\u056a\3\2\2\2\34\u0586\3\2"+
		"\2\2\36\u05ac\3\2\2\2 \u05ae\3\2\2\2\"\u05bf\3\2\2\2$\u05e1\3\2\2\2&\u05e3"+
		"\3\2\2\2(\u05e8\3\2\2\2*\u05fb\3\2\2\2,\u062a\3\2\2\2.\u0647\3\2\2\2\60"+
		"\u066c\3\2\2\2\62\u0671\3\2\2\2\64\u068a\3\2\2\2\66\u06a2\3\2\2\28\u06ab"+
		"\3\2\2\2:\u06b4\3\2\2\2<\u06bd\3\2\2\2>\u06c1\3\2\2\2@\u06c6\3\2\2\2B"+
		"\u06de\3\2\2\2D\u06e1\3\2\2\2F\u06e6\3\2\2\2H\u0717\3\2\2\2J\u0733\3\2"+
		"\2\2L\u0735\3\2\2\2N\u0743\3\2\2\2P\u0748\3\2\2\2R\u074d\3\2\2\2T\u0753"+
		"\3\2\2\2V\u0756\3\2\2\2X\u0761\3\2\2\2Z\u0770\3\2\2\2\\\u0781\3\2\2\2"+
		"^\u0792\3\2\2\2`\u079a\3\2\2\2b\u079f\3\2\2\2d\u07af\3\2\2\2f\u07b3\3"+
		"\2\2\2h\u07cb\3\2\2\2j\u07ce\3\2\2\2l\u07d4\3\2\2\2n\u07e0\3\2\2\2p\u07e9"+
		"\3\2\2\2r\u0805\3\2\2\2t\u080b\3\2\2\2v\u080e\3\2\2\2x\u0815\3\2\2\2z"+
		"\u081d\3\2\2\2|\u0829\3\2\2\2~\u082b\3\2\2\2\u0080\u082f\3\2\2\2\u0082"+
		"\u0835\3\2\2\2\u0084\u084e\3\2\2\2\u0086\u086d\3\2\2\2\u0088\u089a\3\2"+
		"\2\2\u008a\u08a4\3\2\2\2\u008c\u08a6\3\2\2\2\u008e\u08ab\3\2\2\2\u0090"+
		"\u08b9\3\2\2\2\u0092\u08bb\3\2\2\2\u0094\u08c0\3\2\2\2\u0096\u08d0\3\2"+
		"\2\2\u0098\u08f1\3\2\2\2\u009a\u0914\3\2\2\2\u009c\u0918\3\2\2\2\u009e"+
		"\u0927\3\2\2\2\u00a0\u0929\3\2\2\2\u00a2\u092c\3\2\2\2\u00a4\u0931\3\2"+
		"\2\2\u00a6\u093b\3\2\2\2\u00a8\u0960\3\2\2\2\u00aa\u0962\3\2\2\2\u00ac"+
		"\u0975\3\2\2\2\u00ae\u097d\3\2\2\2\u00b0\u09ae\3\2\2\2\u00b2\u09b0\3\2"+
		"\2\2\u00b4\u09b5\3\2\2\2\u00b6\u09b9\3\2\2\2\u00b8\u09bf\3\2\2\2\u00ba"+
		"\u09c3\3\2\2\2\u00bc\u09cb\3\2\2\2\u00be\u09e5\3\2\2\2\u00c0\u09e7\3\2"+
		"\2\2\u00c2\u09ed\3\2\2\2\u00c4\u09f0\3\2\2\2\u00c6\u09f3\3\2\2\2\u00c8"+
		"\u09f6\3\2\2\2\u00ca\u0a2c\3\2\2\2\u00cc\u0a2e\3\2\2\2\u00ce\u0a39\3\2"+
		"\2\2\u00d0";
	private static final String _serializedATNSegment1 =
		"\u0a41\3\2\2\2\u00d2\u0a4c\3\2\2\2\u00d4\u0a4e\3\2\2\2\u00d6\u0a53\3\2"+
		"\2\2\u00d8\u0a5b\3\2\2\2\u00da\u0a72\3\2\2\2\u00dc\u0a89\3\2\2\2\u00de"+
		"\u0abb\3\2\2\2\u00e0\u0abf\3\2\2\2\u00e2\u0ade\3\2\2\2\u00e4\u0ae0\3\2"+
		"\2\2\u00e6\u0af7\3\2\2\2\u00e8\u0b21\3\2\2\2\u00ea\u0b28\3\2\2\2\u00ec"+
		"\u0b42\3\2\2\2\u00ee\u0b54\3\2\2\2\u00f0\u0b58\3\2\2\2\u00f2\u0b77\3\2"+
		"\2\2\u00f4\u0b79\3\2\2\2\u00f6\u0b8a\3\2\2\2\u00f8\u0b9a\3\2\2\2\u00fa"+
		"\u0bb2\3\2\2\2\u00fc\u0bc8\3\2\2\2\u00fe\u0bd1\3\2\2\2\u0100\u0bd3\3\2"+
		"\2\2\u0102\u0bf8\3\2\2\2\u0104\u0bff\3\2\2\2\u0106\u0c23\3\2\2\2\u0108"+
		"\u0c6e\3\2\2\2\u010a\u0c71\3\2\2\2\u010c\u0c9a\3\2\2\2\u010e\u0c9c\3\2"+
		"\2\2\u0110\u0c9e\3\2\2\2\u0112\u0ca1\3\2\2\2\u0114\u0ca5\3\2\2\2\u0116"+
		"\u0cbb\3\2\2\2\u0118\u0cc7\3\2\2\2\u011a\u0cd0\3\2\2\2\u011c\u0cd6\3\2"+
		"\2\2\u011e\u0ce4\3\2\2\2\u0120\u0cf1\3\2\2\2\u0122\u0cf3\3\2\2\2\u0124"+
		"\u0cf6\3\2\2\2\u0126\u0d07\3\2\2\2\u0128\u0d24\3\2\2\2\u012a\u0d28\3\2"+
		"\2\2\u012c\u0d2f\3\2\2\2\u012e\u0d35\3\2\2\2\u0130\u0d37\3\2\2\2\u0132"+
		"\u0d6b\3\2\2\2\u0134\u0d6d\3\2\2\2\u0136\u0d6f\3\2\2\2\u0138\u0d71\3\2"+
		"\2\2\u013a\u0d73\3\2\2\2\u013c\u0d79\3\2\2\2\u013e\u0d7b\3\2\2\2\u0140"+
		"\u0d89\3\2\2\2\u0142\u0d94\3\2\2\2\u0144\u0da0\3\2\2\2\u0146\u0da2\3\2"+
		"\2\2\u0148\u0da6\3\2\2\2\u014a\u0db1\3\2\2\2\u014c\u0dc9\3\2\2\2\u014e"+
		"\u0dcc\3\2\2\2\u0150\u0dce\3\2\2\2\u0152\u0dd9\3\2\2\2\u0154\u0dde\3\2"+
		"\2\2\u0156\u0de1\3\2\2\2\u0158\u0dec\3\2\2\2\u015a\u0df0\3\2\2\2\u015c"+
		"\u0dfb\3\2\2\2\u015e\u0dfe\3\2\2\2\u0160\u0e04\3\2\2\2\u0162\u0e0b\3\2"+
		"\2\2\u0164\u0e17\3\2\2\2\u0166\u0e30\3\2\2\2\u0168\u0e3c\3\2\2\2\u016a"+
		"\u0e41\3\2\2\2\u016c\u0e48\3\2\2\2\u016e\u0e59\3\2\2\2\u0170\u0e70\3\2"+
		"\2\2\u0172\u0e73\3\2\2\2\u0174\u0eaa\3\2\2\2\u0176\u0eac\3\2\2\2\u0178"+
		"\u0eb0\3\2\2\2\u017a\u0eba\3\2\2\2\u017c\u0ebe\3\2\2\2\u017e\u0ed0\3\2"+
		"\2\2\u0180\u0ed2\3\2\2\2\u0182\u0edb\3\2\2\2\u0184\u0ee7\3\2\2\2\u0186"+
		"\u0ee9\3\2\2\2\u0188\u0f08\3\2\2\2\u018a\u0f0a\3\2\2\2\u018c\u0f2a\3\2"+
		"\2\2\u018e\u0f42\3\2\2\2\u0190\u0f44\3\2\2\2\u0192\u0f4e\3\2\2\2\u0194"+
		"\u0f6b\3\2\2\2\u0196\u0f83\3\2\2\2\u0198\u0f95\3\2\2\2\u019a\u0fb3\3\2"+
		"\2\2\u019c\u0fc0\3\2\2\2\u019e\u0fd1\3\2\2\2\u01a0\u0ff3\3\2\2\2\u01a2"+
		"\u1015\3\2\2\2\u01a4\u1020\3\2\2\2\u01a6\u102b\3\2\2\2\u01a8\u1035\3\2"+
		"\2\2\u01aa\u1047\3\2\2\2\u01ac\u1067\3\2\2\2\u01ae\u1087\3\2\2\2\u01b0"+
		"\u1089\3\2\2\2\u01b2\u108f\3\2\2\2\u01b4\u1095\3\2\2\2\u01b6\u10aa\3\2"+
		"\2\2\u01b8\u10ca\3\2\2\2\u01ba\u10da\3\2\2\2\u01bc\u10e8\3\2\2\2\u01be"+
		"\u1100\3\2\2\2\u01c0\u1102\3\2\2\2\u01c2\u113b\3\2\2\2\u01c4\u113d\3\2"+
		"\2\2\u01c6\u1146\3\2\2\2\u01c8\u1156\3\2\2\2\u01ca\u118c\3\2\2\2\u01cc"+
		"\u118e\3\2\2\2\u01ce\u11ab\3\2\2\2\u01d0\u11ad\3\2\2\2\u01d2\u11b5\3\2"+
		"\2\2\u01d4\u11bc\3\2\2\2\u01d6\u11e4\3\2\2\2\u01d8\u11e6\3\2\2\2\u01da"+
		"\u11f4\3\2\2\2\u01dc\u120f\3\2\2\2\u01de\u1217\3\2\2\2\u01e0\u121e\3\2"+
		"\2\2\u01e2\u1222\3\2\2\2\u01e4\u1228\3\2\2\2\u01e6\u122c\3\2\2\2\u01e8"+
		"\u122f\3\2\2\2\u01ea\u124b\3\2\2\2\u01ec\u124f\3\2\2\2\u01ee\u126c\3\2"+
		"\2\2\u01f0\u128d\3\2\2\2\u01f2\u128f\3\2\2\2\u01f4\u1292\3\2\2\2\u01f6"+
		"\u12b1\3\2\2\2\u01f8\u12e1\3\2\2\2\u01fa\u1301\3\2\2\2\u01fc\u130a\3\2"+
		"\2\2\u01fe\u1310\3\2\2\2\u0200\u131f\3\2\2\2\u0202\u132e\3\2\2\2\u0204"+
		"\u1333\3\2\2\2\u0206\u133d\3\2\2\2\u0208\u133f\3\2\2\2\u020a\u135f\3\2"+
		"\2\2\u020c\u1363\3\2\2\2\u020e\u1380\3\2\2\2\u0210\u139c\3\2\2\2\u0212"+
		"\u139e\3\2\2\2\u0214\u13a2\3\2\2\2\u0216\u13a7\3\2\2\2\u0218\u13da\3\2"+
		"\2\2\u021a\u13dc\3\2\2\2\u021c\u13e3\3\2\2\2\u021e\u13ec\3\2\2\2\u0220"+
		"\u13f7\3\2\2\2\u0222\u13fe\3\2\2\2\u0224\u1402\3\2\2\2\u0226\u1406\3\2"+
		"\2\2\u0228\u140a\3\2\2\2\u022a\u1411\3\2\2\2\u022c\u141d\3\2\2\2\u022e"+
		"\u1424\3\2\2\2\u0230\u1427\3\2\2\2\u0232\u142d\3\2\2\2\u0234\u143c\3\2"+
		"\2\2\u0236\u143f\3\2\2\2\u0238\u1443\3\2\2\2\u023a\u1448\3\2\2\2\u023c"+
		"\u144c\3\2\2\2\u023e\u145d\3\2\2\2\u0240\u1463\3\2\2\2\u0242\u146d\3\2"+
		"\2\2\u0244\u147a\3\2\2\2\u0246\u147e\3\2\2\2\u0248\u148c\3\2\2\2\u024a"+
		"\u148e\3\2\2\2\u024c\u149c\3\2\2\2\u024e\u14ad\3\2\2\2\u0250\u14c6\3\2"+
		"\2\2\u0252\u14d0\3\2\2\2\u0254\u14d4\3\2\2\2\u0256\u14f7\3\2\2\2\u0258"+
		"\u1503\3\2\2\2\u025a\u150e\3\2\2\2\u025c\u1514\3\2\2\2\u025e\u151f\3\2"+
		"\2\2\u0260\u152b\3\2\2\2\u0262\u1533\3\2\2\2\u0264\u1542\3\2\2\2\u0266"+
		"\u1546\3\2\2\2\u0268\u1560\3\2\2\2\u026a\u1563\3\2\2\2\u026c\u1569\3\2"+
		"\2\2\u026e\u156e\3\2\2\2\u0270\u1576\3\2\2\2\u0272\u157e\3\2\2\2\u0274"+
		"\u1581\3\2\2\2\u0276\u1591\3\2\2\2\u0278\u1596\3\2\2\2\u027a\u159a\3\2"+
		"\2\2\u027c\u15c2\3\2\2\2\u027e\u15c4\3\2\2\2\u0280\u15da\3\2\2\2\u0282"+
		"\u15dc\3\2\2\2\u0284\u15e1\3\2\2\2\u0286\u15e3\3\2\2\2\u0288\u15e5\3\2"+
		"\2\2\u028a\u15e7\3\2\2\2\u028c\u15eb\3\2\2\2\u028e\u15f0\3\2\2\2\u0290"+
		"\u15f9\3\2\2\2\u0292\u15ff\3\2\2\2\u0294\u160d\3\2\2\2\u0296\u1621\3\2"+
		"\2\2\u0298\u1626\3\2\2\2\u029a\u1633\3\2\2\2\u029c\u1635\3\2\2\2\u029e"+
		"\u1643\3\2\2\2\u02a0\u164c\3\2\2\2\u02a2\u1652\3\2\2\2\u02a4\u1654\3\2"+
		"\2\2\u02a6\u1657\3\2\2\2\u02a8\u1660\3\2\2\2\u02aa\u1678\3\2\2\2\u02ac"+
		"\u1687\3\2\2\2\u02ae\u1689\3\2\2\2\u02b0\u169e\3\2\2\2\u02b2\u16ad\3\2"+
		"\2\2\u02b4\u16c3\3\2\2\2\u02b6\u16ca\3\2\2\2\u02b8\u16d7\3\2\2\2\u02ba"+
		"\u16da\3\2\2\2\u02bc\u16ef\3\2\2\2\u02be\u16f9\3\2\2\2\u02c0\u1702\3\2"+
		"\2\2\u02c2\u1713\3\2\2\2\u02c4\u173e\3\2\2\2\u02c6\u174c\3\2\2\2\u02c8"+
		"\u1754\3\2\2\2\u02ca\u1758\3\2\2\2\u02cc\u1777\3\2\2\2\u02ce\u177b\3\2"+
		"\2\2\u02d0\u1788\3\2\2\2\u02d2\u178e\3\2\2\2\u02d4\u1792\3\2\2\2\u02d6"+
		"\u179d\3\2\2\2\u02d8\u17be\3\2\2\2\u02da\u17c1\3\2\2\2\u02dc\u17d6\3\2"+
		"\2\2\u02de\u17d9\3\2\2\2\u02e0\u17dc\3\2\2\2\u02e2\u17e0\3\2\2\2\u02e4"+
		"\u17f3\3\2\2\2\u02e6\u17f5\3\2\2\2\u02e8\u1806\3\2\2\2\u02ea\u180d\3\2"+
		"\2\2\u02ec\u1812\3\2\2\2\u02ee\u1829\3\2\2\2\u02f0\u1833\3\2\2\2\u02f2"+
		"\u1835\3\2\2\2\u02f4\u1843\3\2\2\2\u02f6\u1851\3\2\2\2\u02f8\u1875\3\2"+
		"\2\2\u02fa\u1877\3\2\2\2\u02fc\u1895\3\2\2\2\u02fe\u189a\3\2\2\2\u0300"+
		"\u189c\3\2\2\2\u0302\u18a8\3\2\2\2\u0304\u18bc\3\2\2\2\u0306\u18be\3\2"+
		"\2\2\u0308\u18c1\3\2\2\2\u030a\u18db\3\2\2\2\u030c\u18dd\3\2\2\2\u030e"+
		"\u18e1\3\2\2\2\u0310\u18f0\3\2\2\2\u0312\u18fc\3\2\2\2\u0314\u1904\3\2"+
		"\2\2\u0316\u1908\3\2\2\2\u0318\u1915\3\2\2\2\u031a\u191b\3\2\2\2\u031c"+
		"\u1929\3\2\2\2\u031e\u193d\3\2\2\2\u0320\u1946\3\2\2\2\u0322\u1948\3\2"+
		"\2\2\u0324\u194f\3\2\2\2\u0326\u1954\3\2\2\2\u0328\u1961\3\2\2\2\u032a"+
		"\u1969\3\2\2\2\u032c\u1971\3\2\2\2\u032e\u1979\3\2\2\2\u0330\u197b\3\2"+
		"\2\2\u0332\u1987\3\2\2\2\u0334\u19a1\3\2\2\2\u0336\u19a3\3\2\2\2\u0338"+
		"\u19b1\3\2\2\2\u033a\u19b6\3\2\2\2\u033c\u19c8\3\2\2\2\u033e\u19cc\3\2"+
		"\2\2\u0340\u19d4\3\2\2\2\u0342\u19de\3\2\2\2\u0344\u19e6\3\2\2\2\u0346"+
		"\u19ec\3\2\2\2\u0348\u19f1\3\2\2\2\u034a\u19f8\3\2\2\2\u034c\u1a11\3\2"+
		"\2\2\u034e\u1a24\3\2\2\2\u0350\u1a28\3\2\2\2\u0352\u1a2b\3\2\2\2\u0354"+
		"\u1a41\3\2\2\2\u0356\u1a46\3\2\2\2\u0358\u1a59\3\2\2\2\u035a\u1a5b\3\2"+
		"\2\2\u035c\u1a6b\3\2\2\2\u035e\u1a73\3\2\2\2\u0360\u1a78\3\2\2\2\u0362"+
		"\u1a7c\3\2\2\2\u0364\u1a87\3\2\2\2\u0366\u1a8a\3\2\2\2\u0368\u1a9c\3\2"+
		"\2\2\u036a\u1a9e\3\2\2\2\u036c\u1aad\3\2\2\2\u036e\u1ab8\3\2\2\2\u0370"+
		"\u1ac6\3\2\2\2\u0372\u1acb\3\2\2\2\u0374\u1acd\3\2\2\2\u0376\u1ad8\3\2"+
		"\2\2\u0378\u1ada\3\2\2\2\u037a\u1b07\3\2\2\2\u037c\u1b14\3\2\2\2\u037e"+
		"\u1b1c\3\2\2\2\u0380\u1b28\3\2\2\2\u0382\u1b48\3\2\2\2\u0384\u1b5c\3\2"+
		"\2\2\u0386\u1b5e\3\2\2\2\u0388\u1b62\3\2\2\2\u038a\u1b95\3\2\2\2\u038c"+
		"\u1b97\3\2\2\2\u038e\u1bb5\3\2\2\2\u0390\u1bb7\3\2\2\2\u0392\u1bcc\3\2"+
		"\2\2\u0394\u1bea\3\2\2\2\u0396\u1bee\3\2\2\2\u0398\u1bf1\3\2\2\2\u039a"+
		"\u1c04\3\2\2\2\u039c\u1c0c\3\2\2\2\u039e\u1c1e\3\2\2\2\u03a0\u1c25\3\2"+
		"\2\2\u03a2\u1c3d\3\2\2\2\u03a4\u1c3f\3\2\2\2\u03a6\u1c90\3\2\2\2\u03a8"+
		"\u1c95\3\2\2\2\u03aa\u1c97\3\2\2\2\u03ac\u1cd6\3\2\2\2\u03ae\u1e16\3\2"+
		"\2\2\u03b0\u1e18\3\2\2\2\u03b2\u1e1a\3\2\2\2\u03b4\u1e1c\3\2\2\2\u03b6"+
		"\u1e1e\3\2\2\2\u03b8\u1e2b\3\2\2\2\u03ba\u1e34\3\2\2\2\u03bc\u1e3d\3\2"+
		"\2\2\u03be\u1e3f\3\2\2\2\u03c0\u1e50\3\2\2\2\u03c2\u1e56\3\2\2\2\u03c4"+
		"\u1e61\3\2\2\2\u03c6\u1e63\3\2\2\2\u03c8\u1e7b\3\2\2\2\u03ca\u1e89\3\2"+
		"\2\2\u03cc\u1e9b\3\2\2\2\u03ce\u1eb0\3\2\2\2\u03d0\u1ebd\3\2\2\2\u03d2"+
		"\u1ec0\3\2\2\2\u03d4\u1ec9\3\2\2\2\u03d6\u1ecf\3\2\2\2\u03d8\u1ed7\3\2"+
		"\2\2\u03da\u1eda\3\2\2\2\u03dc\u1ee5\3\2\2\2\u03de\u1ef0\3\2\2\2\u03e0"+
		"\u1ef2\3\2\2\2\u03e2\u1ef5\3\2\2\2\u03e4\u1efe\3\2\2\2\u03e6\u1f03\3\2"+
		"\2\2\u03e8\u1f10\3\2\2\2\u03ea\u1f12\3\2\2\2\u03ec\u1f1b\3\2\2\2\u03ee"+
		"\u1f2d\3\2\2\2\u03f0\u1f31\3\2\2\2\u03f2\u1f33\3\2\2\2\u03f4\u1f3c\3\2"+
		"\2\2\u03f6\u1f49\3\2\2\2\u03f8\u1f4b\3\2\2\2\u03fa\u1f50\3\2\2\2\u03fc"+
		"\u1f52\3\2\2\2\u03fe\u1f58\3\2\2\2\u0400\u1f5a\3\2\2\2\u0402\u1f69\3\2"+
		"\2\2\u0404\u1f6d\3\2\2\2\u0406\u1f71\3\2\2\2\u0408\u1f73\3\2\2\2\u040a"+
		"\u1f75\3\2\2\2\u040c\u1f7b\3\2\2\2\u040e\u1f7d\3\2\2\2\u0410\u1f7f\3\2"+
		"\2\2\u0412\u1f81\3\2\2\2\u0414\u1f83\3\2\2\2\u0416\u1f85\3\2\2\2\u0418"+
		"\u1f87\3\2\2\2\u041a\u1f89\3\2\2\2\u041c\u1f8b\3\2\2\2\u041e\u1f8d\3\2"+
		"\2\2\u0420\u1f8f\3\2\2\2\u0422\u1f91\3\2\2\2\u0424\u1f93\3\2\2\2\u0426"+
		"\u1f95\3\2\2\2\u0428\u1f97\3\2\2\2\u042a\u1f9c\3\2\2\2\u042c\u1f9e\3\2"+
		"\2\2\u042e\u1fa0\3\2\2\2\u0430\u1fa2\3\2\2\2\u0432\u1fa4\3\2\2\2\u0434"+
		"\u1fa6\3\2\2\2\u0436\u1fa8\3\2\2\2\u0438\u1faa\3\2\2\2\u043a\u1fc4\3\2"+
		"\2\2\u043c\u1fca\3\2\2\2\u043e\u1fce\3\2\2\2\u0440\u1fd2\3\2\2\2\u0442"+
		"\u1fdb\3\2\2\2\u0444\u1fec\3\2\2\2\u0446\u2013\3\2\2\2\u0448\u201e\3\2"+
		"\2\2\u044a\u203f\3\2\2\2\u044c\u2041\3\2\2\2\u044e\u2088\3\2\2\2\u0450"+
		"\u208d\3\2\2\2\u0452\u20a0\3\2\2\2\u0454\u20aa\3\2\2\2\u0456\u20b9\3\2"+
		"\2\2\u0458\u20de\3\2\2\2\u045a\u2226\3\2\2\2\u045c\u222a\3\2\2\2\u045e"+
		"\u222f\3\2\2\2\u0460\u226f\3\2\2\2\u0462\u2273\3\2\2\2\u0464\u2277\3\2"+
		"\2\2\u0466\u2279\3\2\2\2\u0468\u227b\3\2\2\2\u046a\u227d\3\2\2\2\u046c"+
		"\u227f\3\2\2\2\u046e\u2281\3\2\2\2\u0470\u2283\3\2\2\2\u0472\u2285\3\2"+
		"\2\2\u0474\u2287\3\2\2\2\u0476\u2289\3\2\2\2\u0478\u228b\3\2\2\2\u047a"+
		"\u228d\3\2\2\2\u047c\u228f\3\2\2\2\u047e\u2291\3\2\2\2\u0480\u2299\3\2"+
		"\2\2\u0482\u229b\3\2\2\2\u0484\u229d\3\2\2\2\u0486\u22a1\3\2\2\2\u0488"+
		"\u22a3\3\2\2\2\u048a\u22ab\3\2\2\2\u048c\u22ad\3\2\2\2\u048e\u22af\3\2"+
		"\2\2\u0490\u22b1\3\2\2\2\u0492\u22b5\3\2\2\2\u0494\u22b7\3\2\2\2\u0496"+
		"\u22b9\3\2\2\2\u0498\u22bd\3\2\2\2\u049a\u22c4\3\2\2\2\u049c\u22c6\3\2"+
		"\2\2\u049e\u22c9\3\2\2\2\u04a0\u04a3\5\4\3\2\u04a1\u04a3\5\u03de\u01f0"+
		"\2\u04a2\u04a0\3\2\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a5\3\2\2\2\u04a4\u04a6"+
		"\7\u02fa\2\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a8\3\2\2"+
		"\2\u04a7\u04a2\3\2\2\2\u04a8\u04ab\3\2\2\2\u04a9\u04a7\3\2\2\2\u04a9\u04aa"+
		"\3\2\2\2\u04aa\u04ac\3\2\2\2\u04ab\u04a9\3\2\2\2\u04ac\u04ad\7\2\2\3\u04ad"+
		"\3\3\2\2\2\u04ae\u04d3\5\u02ac\u0157\2\u04af\u04d3\5\b\5\2\u04b0\u04d3"+
		"\5\30\r\2\u04b1\u04d3\5(\25\2\u04b2\u04d3\5\u00a4S\2\u04b3\u04d3\5\62"+
		"\32\2\u04b4\u04d3\5X-\2\u04b5\u04d3\5\u021c\u010f\2\u04b6\u04d3\5\u00ac"+
		"W\2\u04b7\u04d3\5\u00b0Y\2\u04b8\u04d3\5\n\6\2\u04b9\u04d3\5.\30\2\u04ba"+
		"\u04d3\5\32\16\2\u04bb\u04d3\5\34\17\2\u04bc\u04d3\5\u00aaV\2\u04bd\u04d3"+
		"\5\u016c\u00b7\2\u04be\u04d3\5\u0148\u00a5\2\u04bf\u04d3\5\u00aeX\2\u04c0"+
		"\u04d3\5\u00a6T\2\u04c1\u04d3\5\64\33\2\u04c2\u04d3\5l\67\2\u04c3\u04d3"+
		"\5\u0218\u010d\2\u04c4\u04d3\5\6\4\2\u04c5\u04d3\5\26\f\2\u04c6\u04d3"+
		"\5&\24\2\u04c7\u04d3\5\u00a2R\2\u04c8\u04d3\5\60\31\2\u04c9\u04d3\5V,"+
		"\2\u04ca\u04d3\5\u02a0\u0151\2\u04cb\u04d3\5\u0214\u010b\2\u04cc\u04d3"+
		"\5\u00d4k\2\u04cd\u04d3\5\u0216\u010c\2\u04ce\u04d3\5\u021a\u010e\2\u04cf"+
		"\u04d3\5\u0232\u011a\2\u04d0\u04d3\5\u00dco\2\u04d1\u04d3\5\u00d6l\2\u04d2"+
		"\u04ae\3\2\2\2\u04d2\u04af\3\2\2\2\u04d2\u04b0\3\2\2\2\u04d2\u04b1\3\2"+
		"\2\2\u04d2\u04b2\3\2\2\2\u04d2\u04b3\3\2\2\2\u04d2\u04b4\3\2\2\2\u04d2"+
		"\u04b5\3\2\2\2\u04d2\u04b6\3\2\2\2\u04d2\u04b7\3\2\2\2\u04d2\u04b8\3\2"+
		"\2\2\u04d2\u04b9\3\2\2\2\u04d2\u04ba\3\2\2\2\u04d2\u04bb\3\2\2\2\u04d2"+
		"\u04bc\3\2\2\2\u04d2\u04bd\3\2\2\2\u04d2\u04be\3\2\2\2\u04d2\u04bf\3\2"+
		"\2\2\u04d2\u04c0\3\2\2\2\u04d2\u04c1\3\2\2\2\u04d2\u04c2\3\2\2\2\u04d2"+
		"\u04c3\3\2\2\2\u04d2\u04c4\3\2\2\2\u04d2\u04c5\3\2\2\2\u04d2\u04c6\3\2"+
		"\2\2\u04d2\u04c7\3\2\2\2\u04d2\u04c8\3\2\2\2\u04d2\u04c9\3\2\2\2\u04d2"+
		"\u04ca\3\2\2\2\u04d2\u04cb\3\2\2\2\u04d2\u04cc\3\2\2\2\u04d2\u04cd\3\2"+
		"\2\2\u04d2\u04ce\3\2\2\2\u04d2\u04cf\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2"+
		"\u04d1\3\2\2\2\u04d3\5\3\2\2\2\u04d4\u04d5\7\u00a4\2\2\u04d5\u04d6\7\u00e2"+
		"\2\2\u04d6\u04d7\5\u042e\u0218\2\u04d7\u04d8\7\u02fa\2\2\u04d8\7\3\2\2"+
		"\2\u04d9\u04da\7\20\2\2\u04da\u04db\7\u00e2\2\2\u04db\u04dc\5\u042e\u0218"+
		"\2\u04dc\u04de\7^\2\2\u04dd\u04df\7\u0086\2\2\u04de\u04dd\3\2\2\2\u04de"+
		"\u04df\3\2\2\2\u04df\u04e3\3\2\2\2\u04e0\u04e2\5\u0236\u011c\2\u04e1\u04e0"+
		"\3\2\2\2\u04e2\u04e5\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4"+
		"\u04e8\3\2\2\2\u04e5\u04e3\3\2\2\2\u04e6\u04e7\7\u01fa\2\2\u04e7\u04e9"+
		"\7\u0221\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\3\2\2"+
		"\2\u04ea\u04eb\7\u02fa\2\2\u04eb\t\3\2\2\2\u04ec\u04ef\7r\2\2\u04ed\u04ee"+
		"\7\u01a1\2\2\u04ee\u04f0\7\u01ee\2\2\u04ef\u04ed\3\2\2\2\u04ef\u04f0\3"+
		"\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f2\7\u00e2\2\2\u04f2\u04fe\5\u042e"+
		"\u0218\2\u04f3\u04f8\7\u02e8\2\2\u04f4\u04f6\7\u02ee\2\2\u04f5\u04f4\3"+
		"\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f9\5\u0242\u0122"+
		"\2\u04f8\u04f5\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fa\u04fb"+
		"\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fd\7\u02e9\2\2\u04fd\u04ff\3\2\2"+
		"\2\u04fe\u04f3\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\3\2\2\2\u0500\u0501"+
		"\7\u01f9\2\2\u0501\u0508\5\u0448\u0225\2\u0502\u0507\5\u0234\u011b\2\u0503"+
		"\u0507\5\f\7\2\u0504\u0507\5\20\t\2\u0505\u0507\7\u0097\2\2\u0506\u0502"+
		"\3\2\2\2\u0506\u0503\3\2\2\2\u0506\u0504\3\2\2\2\u0506\u0505\3\2\2\2\u0507"+
		"\u050a\3\2\2\2\u0508\u0506\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u051c\3\2"+
		"\2\2\u050a\u0508\3\2\2\2\u050b\u050d\7\u01bf\2\2\u050c\u050b\3\2\2\2\u050c"+
		"\u050d\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0517\t\2\2\2\u050f\u0511\7\u0089"+
		"\2\2\u0510\u050f\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0513\3\2\2\2\u0512"+
		"\u0514\5\u0246\u0124\2\u0513\u0512\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515"+
		"\3\2\2\2\u0515\u0518\5\u0292\u014a\2\u0516\u0518\5\u0238\u011d\2\u0517"+
		"\u0510\3\2\2\2\u0517\u0516\3\2\2\2\u0518\u051d\3\2\2\2\u0519\u051a\t\3"+
		"\2\2\u051a\u051b\7\u0284\2\2\u051b\u051d\5\u042a\u0216\2\u051c\u050c\3"+
		"\2\2\2\u051c\u0519\3\2\2\2\u051d\u051e\3\2\2\2\u051e\u051f\7\u02fa\2\2"+
		"\u051f\13\3\2\2\2\u0520\u0522\7\u01aa\2\2\u0521\u0523\5\16\b\2\u0522\u0521"+
		"\3\2\2\2\u0522\u0523\3\2\2\2\u0523\r\3\2\2\2\u0524\u0525\7\u02e8\2\2\u0525"+
		"\u0526\7\u01af\2\2\u0526\u0527\5\u0376\u01bc\2\u0527\u052b\7?\2\2\u0528"+
		"\u052c\7\24\2\2\u0529\u052a\t\4\2\2\u052a\u052c\5\u043e\u0220\2\u052b"+
		"\u0528\3\2\2\2\u052b\u0529\3\2\2\2\u052c\u052e\3\2\2\2\u052d\u052f\5\24"+
		"\13\2\u052e\u052d\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0530\3\2\2\2\u0530"+
		"\u0531\7\u02e9\2\2\u0531\17\3\2\2\2\u0532\u0534\7\u01f4\2\2\u0533\u0535"+
		"\5\22\n\2\u0534\u0533\3\2\2\2\u0534\u0535\3\2\2\2\u0535\21\3\2\2\2\u0536"+
		"\u0537\7\u01ea\2\2\u0537\u0538\7\u02e8\2\2\u0538\u053d\5\u040a\u0206\2"+
		"\u0539\u053a\7\u02ee\2\2\u053a\u053c\5\u040a\u0206\2\u053b\u0539\3\2\2"+
		"\2\u053c\u053f\3\2\2\2\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540"+
		"\3\2\2\2\u053f\u053d\3\2\2\2\u0540\u0541\7\u02e9\2\2\u0541\23\3\2\2\2"+
		"\u0542\u0543\t\5\2\2\u0543\u0544\5\u0376\u01bc\2\u0544\u0545\7?\2\2\u0545"+
		"\u0546\5\u043e\u0220\2\u0546\25\3\2\2\2\u0547\u0548\7\u00a4\2\2\u0548"+
		"\u054a\7\u01a9\2\2\u0549\u054b\78\2\2\u054a\u0549\3\2\2\2\u054a\u054b"+
		"\3\2\2\2\u054b\u054f\3\2\2\2\u054c\u054d\5\u0420\u0211\2\u054d\u054e\7"+
		"\u02e1\2\2\u054e\u0550\3\2\2\2\u054f\u054c\3\2\2\2\u054f\u0550\3\2\2\2"+
		"\u0550\u0551\3\2\2\2\u0551\u0552\5\u0466\u0234\2\u0552\u0553\7\u02fa\2"+
		"\2\u0553\27\3\2\2\2\u0554\u0555\7\20\2\2\u0555\u0556\7\u01a9\2\2\u0556"+
		"\u0557\5\u0466\u0234\2\u0557\u0559\7^\2\2\u0558\u055a\7\u0086\2\2\u0559"+
		"\u0558\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u055c\3\2\2\2\u055b\u055d\t\6"+
		"\2\2\u055c\u055b\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u0561\3\2\2\2\u055e"+
		"\u0560\5\u0236\u011c\2\u055f\u055e\3\2\2\2\u0560\u0563\3\2\2\2\u0561\u055f"+
		"\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0566\3\2\2\2\u0563\u0561\3\2\2\2\u0564"+
		"\u0565\7\u01fa\2\2\u0565\u0567\7\u0221\2\2\u0566\u0564\3\2\2\2\u0566\u0567"+
		"\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0569\7\u02fa\2\2\u0569\31\3\2\2\2"+
		"\u056a\u056d\7r\2\2\u056b\u056c\7\u01a1\2\2\u056c\u056e\7\u01ee\2\2\u056d"+
		"\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u056f\3\2\2\2\u056f\u0573\7\u01a9"+
		"\2\2\u0570\u0571\5\u0420\u0211\2\u0571\u0572\7\u02e1\2\2\u0572\u0574\3"+
		"\2\2\2\u0573\u0570\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575\3\2\2\2\u0575"+
		"\u0577\5\u0466\u0234\2\u0576\u0578\5\u0234\u011b\2\u0577\u0576\3\2\2\2"+
		"\u0577\u0578\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057d\t\2\2\2\u057a\u057c"+
		"\5\36\20\2\u057b\u057a\3\2\2\2\u057c\u057f\3\2\2\2\u057d\u057b\3\2\2\2"+
		"\u057d\u057e\3\2\2\2\u057e\u0580\3\2\2\2\u057f\u057d\3\2\2\2\u0580\u0582"+
		"\7\u00b4\2\2\u0581\u0583\5\u0466\u0234\2\u0582\u0581\3\2\2\2\u0582\u0583"+
		"\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585\7\u02fa\2\2\u0585\33\3\2\2\2"+
		"\u0586\u0589\7r\2\2\u0587\u0588\7\u01a1\2\2\u0588\u058a\7\u01ee\2\2\u0589"+
		"\u0587\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\3\2\2\2\u058b\u058c\7\u01a9"+
		"\2\2\u058c\u0590\78\2\2\u058d\u058e\5\u0420\u0211\2\u058e\u058f\7\u02e1"+
		"\2\2\u058f\u0591\3\2\2\2\u0590\u058d\3\2\2\2\u0590\u0591\3\2\2\2\u0591"+
		"\u0592\3\2\2\2\u0592\u0593\5\u0466\u0234\2\u0593\u0597\t\2\2\2\u0594\u0596"+
		"\5$\23\2\u0595\u0594\3\2\2\2\u0596\u0599\3\2\2\2\u0597\u0595\3\2\2\2\u0597"+
		"\u0598\3\2\2\2\u0598\u059c\3\2\2\2\u0599\u0597\3\2\2\2\u059a\u059b\7-"+
		"\2\2\u059b\u059d\5\u0264\u0133\2\u059c\u059a\3\2\2\2\u059c\u059d\3\2\2"+
		"\2\u059d\u059e\3\2\2\2\u059e\u05a0\7\u00b4\2\2\u059f\u05a1\5\u0466\u0234"+
		"\2\u05a0\u059f\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3"+
		"\7\u02fa\2\2\u05a3\35\3\2\2\2\u05a4\u05ad\5\u024a\u0126\2\u05a5\u05ad"+
		"\5\u024c\u0127\2\u05a6\u05ad\5\u024e\u0128\2\u05a7\u05ad\5\u0252\u012a"+
		"\2\u05a8\u05ad\5\u0254\u012b\2\u05a9\u05ad\5\u025c\u012f\2\u05aa\u05ad"+
		"\5 \21\2\u05ab\u05ad\5\"\22\2\u05ac\u05a4\3\2\2\2\u05ac\u05a5\3\2\2\2"+
		"\u05ac\u05a6\3\2\2\2\u05ac\u05a7\3\2\2\2\u05ac\u05a8\3\2\2\2\u05ac\u05a9"+
		"\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ab\3\2\2\2\u05ad\37\3\2\2\2\u05ae"+
		"\u05af\7\u01d2\2\2\u05af\u05bb\5\u0462\u0232\2\u05b0\u05b1\7\u02e8\2\2"+
		"\u05b1\u05b6\5\u0242\u0122\2\u05b2\u05b3\7\u02ee\2\2\u05b3\u05b5\5\u0242"+
		"\u0122\2\u05b4\u05b2\3\2\2\2\u05b5\u05b8\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b6"+
		"\u05b7\3\2\2\2\u05b7\u05b9\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b9\u05ba\7\u02e9"+
		"\2\2\u05ba\u05bc\3\2\2\2\u05bb\u05b0\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc"+
		"\u05bd\3\2\2\2\u05bd\u05be\7\u02fa\2\2\u05be!\3\2\2\2\u05bf\u05c0\7\u00e2"+
		"\2\2\u05c0\u05cc\5\u0462\u0232\2\u05c1\u05c2\7\u02e8\2\2\u05c2\u05c7\5"+
		"\u0242\u0122\2\u05c3\u05c4\7\u02ee\2\2\u05c4\u05c6\5\u0242\u0122\2\u05c5"+
		"\u05c3\3\2\2\2\u05c6\u05c9\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8\3\2"+
		"\2\2\u05c8\u05ca\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\u05cb\7\u02e9\2\2\u05cb"+
		"\u05cd\3\2\2\2\u05cc\u05c1\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05ce\3\2"+
		"\2\2\u05ce\u05cf\7\u01f9\2\2\u05cf\u05d1\5\u0448\u0225\2\u05d0\u05d2\7"+
		"\u0097\2\2\u05d1\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d4\3\2\2\2"+
		"\u05d3\u05d5\7\u01f4\2\2\u05d4\u05d3\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5"+
		"\u05d6\3\2\2\2\u05d6\u05d7\7\u02fa\2\2\u05d7#\3\2\2\2\u05d8\u05e2\5\u024a"+
		"\u0126\2\u05d9\u05e2\5\u024c\u0127\2\u05da\u05e2\5\u024e\u0128\2\u05db"+
		"\u05e2\5\u0252\u012a\2\u05dc\u05e2\5\u025c\u012f\2\u05dd\u05e2\5,\27\2"+
		"\u05de\u05e2\5*\26\2\u05df\u05e2\5 \21\2\u05e0\u05e2\5\"\22\2\u05e1\u05d8"+
		"\3\2\2\2\u05e1\u05d9\3\2\2\2\u05e1\u05da\3\2\2\2\u05e1\u05db\3\2\2\2\u05e1"+
		"\u05dc\3\2\2\2\u05e1\u05dd\3\2\2\2\u05e1\u05de\3\2\2\2\u05e1\u05df\3\2"+
		"\2\2\u05e1\u05e0\3\2\2\2\u05e2%\3\2\2\2\u05e3\u05e4\7\u00a4\2\2\u05e4"+
		"\u05e5\7\u01d2\2\2\u05e5\u05e6\5\u0430\u0219\2\u05e6\u05e7\7\u02fa\2\2"+
		"\u05e7\'\3\2\2\2\u05e8\u05e9\7\20\2\2\u05e9\u05ea\7\u01d2\2\2\u05ea\u05eb"+
		"\5\u0430\u0219\2\u05eb\u05ed\7^\2\2\u05ec\u05ee\7\u0086\2\2\u05ed\u05ec"+
		"\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f2\3\2\2\2\u05ef\u05f1\5\u0236\u011c"+
		"\2\u05f0\u05ef\3\2\2\2\u05f1\u05f4\3\2\2\2\u05f2\u05f0\3\2\2\2\u05f2\u05f3"+
		"\3\2\2\2\u05f3\u05f7\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f5\u05f6\7\u01fa\2"+
		"\2\u05f6\u05f8\7\u0221\2\2\u05f7\u05f5\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8"+
		"\u05f9\3\2\2\2\u05f9\u05fa\7\u02fa\2\2\u05fa)\3\2\2\2\u05fb\u05fc\7\u00e2"+
		"\2\2\u05fc\u0608\5\u042e\u0218\2\u05fd\u05fe\7\u02e8\2\2\u05fe\u0603\5"+
		"\u0242\u0122\2\u05ff\u0600\7\u02ee\2\2\u0600\u0602\5\u0242\u0122\2\u0601"+
		"\u05ff\3\2\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0604\3\2"+
		"\2\2\u0604\u0606\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u0607\7\u02e9\2\2\u0607"+
		"\u0609\3\2\2\2\u0608\u05fd\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060a\3\2"+
		"\2\2\u060a\u060b\7\u01f9\2\2\u060b\u0612\5\u0448\u0225\2\u060c\u0611\5"+
		"\u0234\u011b\2\u060d\u0611\5\f\7\2\u060e\u0611\5\20\t\2\u060f\u0611\7"+
		"\u0097\2\2\u0610\u060c\3\2\2\2\u0610\u060d\3\2\2\2\u0610\u060e\3\2\2\2"+
		"\u0610\u060f\3\2\2\2\u0611\u0614\3\2\2\2\u0612\u0610\3\2\2\2\u0612\u0613"+
		"\3\2\2\2\u0613\u0626\3\2\2\2\u0614\u0612\3\2\2\2\u0615\u0617\7\u01bf\2"+
		"\2\u0616\u0615\3\2\2\2\u0616\u0617\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u0621"+
		"\t\2\2\2\u0619\u061b\7\u0089\2\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2"+
		"\2\u061b\u061d\3\2\2\2\u061c\u061e\5\u0246\u0124\2\u061d\u061c\3\2\2\2"+
		"\u061d\u061e\3\2\2\2\u061e\u061f\3\2\2\2\u061f\u0622\5\u0292\u014a\2\u0620"+
		"\u0622\5\u0238\u011d\2\u0621\u061a\3\2\2\2\u0621\u0620\3\2\2\2\u0622\u0627"+
		"\3\2\2\2\u0623\u0624\t\3\2\2\u0624\u0625\7\u0284\2\2\u0625\u0627\5\u042a"+
		"\u0216\2\u0626\u0616\3\2\2\2\u0626\u0623\3\2\2\2\u0627\u0628\3\2\2\2\u0628"+
		"\u0629\7\u02fa\2\2\u0629+\3\2\2\2\u062a\u062b\7\u01d2\2\2\u062b\u0637"+
		"\5\u0430\u0219\2\u062c\u062d\7\u02e8\2\2\u062d\u0632\5\u0242\u0122\2\u062e"+
		"\u062f\7\u02ee\2\2\u062f\u0631\5\u0242\u0122\2\u0630\u062e\3\2\2\2\u0631"+
		"\u0634\3\2\2\2\u0632\u0630\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0635\3\2"+
		"\2\2\u0634\u0632\3\2\2\2\u0635\u0636\7\u02e9\2\2\u0636\u0638\3\2\2\2\u0637"+
		"\u062c\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u0643\t\2"+
		"\2\2\u063a\u063c\7\u0089\2\2\u063b\u063a\3\2\2\2\u063b\u063c\3\2\2\2\u063c"+
		"\u063e\3\2\2\2\u063d\u063f\5\u0246\u0124\2\u063e\u063d\3\2\2\2\u063e\u063f"+
		"\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0644\5\u0292\u014a\2\u0641\u0644\5"+
		"\u0238\u011d\2\u0642\u0644\7\u00c9\2\2\u0643\u063b\3\2\2\2\u0643\u0641"+
		"\3\2\2\2\u0643\u0642\3\2\2\2\u0644\u0645\3\2\2\2\u0645\u0646\7\u02fa\2"+
		"\2\u0646-\3\2\2\2\u0647\u064a\7r\2\2\u0648\u0649\7\u01a1\2\2\u0649\u064b"+
		"\7\u01ee\2\2\u064a\u0648\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064c\3\2\2"+
		"\2\u064c\u064d\7\u01d2\2\2\u064d\u0659\5\u0430\u0219\2\u064e\u064f\7\u02e8"+
		"\2\2\u064f\u0654\5\u0242\u0122\2\u0650\u0651\7\u02ee\2\2\u0651\u0653\5"+
		"\u0242\u0122\2\u0652\u0650\3\2\2\2\u0653\u0656\3\2\2\2\u0654\u0652\3\2"+
		"\2\2\u0654\u0655\3\2\2\2\u0655\u0657\3\2\2\2\u0656\u0654\3\2\2\2\u0657"+
		"\u0658\7\u02e9\2\2\u0658\u065a\3\2\2\2\u0659\u064e\3\2\2\2\u0659\u065a"+
		"\3\2\2\2\u065a\u065c\3\2\2\2\u065b\u065d\5\u0234\u011b\2\u065c\u065b\3"+
		"\2\2\2\u065c\u065d\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0668\t\2\2\2\u065f"+
		"\u0661\7\u0089\2\2\u0660\u065f\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u0663"+
		"\3\2\2\2\u0662\u0664\5\u0246\u0124\2\u0663\u0662\3\2\2\2\u0663\u0664\3"+
		"\2\2\2\u0664\u0665\3\2\2\2\u0665\u0669\5\u0292\u014a\2\u0666\u0669\5\u0238"+
		"\u011d\2\u0667\u0669\7\u00c9\2\2\u0668\u0660\3\2\2\2\u0668\u0666\3\2\2"+
		"\2\u0668\u0667\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b\7\u02fa\2\2\u066b"+
		"/\3\2\2\2\u066c\u066d\7\u00a4\2\2\u066d\u066e\7\u026c\2\2\u066e\u066f"+
		"\5\u0432\u021a\2\u066f\u0670\7\u02fa\2\2\u0670\61\3\2\2\2\u0671\u0672"+
		"\7\20\2\2\u0672\u0673\7\u026c\2\2\u0673\u0686\5\u0432\u021a\2\u0674\u0687"+
		"\t\7\2\2\u0675\u0676\7\u01ed\2\2\u0676\u0677\7\u0266\2\2\u0677\u0687\5"+
		"\u0432\u021a\2\u0678\u067a\7^\2\2\u0679\u067b\7\u0086\2\2\u067a\u0679"+
		"\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u067f\3\2\2\2\u067c\u067e\5\u0236\u011c"+
		"\2\u067d\u067c\3\2\2\2\u067e\u0681\3\2\2\2\u067f\u067d\3\2\2\2\u067f\u0680"+
		"\3\2\2\2\u0680\u0684\3\2\2\2\u0681\u067f\3\2\2\2\u0682\u0683\7\u01fa\2"+
		"\2\u0683\u0685\7\u0221\2\2\u0684\u0682\3\2\2\2\u0684\u0685\3\2\2\2\u0685"+
		"\u0687\3\2\2\2\u0686\u0674\3\2\2\2\u0686\u0675\3\2\2\2\u0686\u0678\3\2"+
		"\2\2\u0687\u0688\3\2\2\2\u0688\u0689\7\u02fa\2\2\u0689\63\3\2\2\2\u068a"+
		"\u068d\7r\2\2\u068b\u068c\7\u01a1\2\2\u068c\u068e\7\u01ee\2\2\u068d\u068b"+
		"\3\2\2\2\u068d\u068e\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0690\7\u026c\2"+
		"\2\u0690\u0694\5\u0432\u021a\2\u0691\u0695\5:\36\2\u0692\u0695\5> \2\u0693"+
		"\u0695\5@!\2\u0694\u0691\3\2\2\2\u0694\u0692\3\2\2\2\u0694\u0693\3\2\2"+
		"\2\u0695\u0697\3\2\2\2\u0696\u0698\5\66\34\2\u0697\u0696\3\2\2\2\u0697"+
		"\u0698\3\2\2\2\u0698\u069a\3\2\2\2\u0699\u069b\t\7\2\2\u069a\u0699\3\2"+
		"\2\2\u069a\u069b\3\2\2\2\u069b\u069d\3\2\2\2\u069c\u069e\58\35\2\u069d"+
		"\u069c\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a0\5B"+
		"\"\2\u06a0\u06a1\7\u02fa\2\2\u06a1\65\3\2\2\2\u06a2\u06a3\7\u00d8\2\2"+
		"\u06a3\u06a8\5\u0432\u021a\2\u06a4\u06a5\7\u02ee\2\2\u06a5\u06a7\5\u0432"+
		"\u021a\2\u06a6\u06a4\3\2\2\2\u06a7\u06aa\3\2\2\2\u06a8\u06a6\3\2\2\2\u06a8"+
		"\u06a9\3\2\2\2\u06a9\67\3\2\2\2\u06aa\u06a8\3\2\2\2\u06ab\u06ac\7\u0297"+
		"\2\2\u06ac\u06ad\7\u02e8\2\2\u06ad\u06ae\5\u0372\u01ba\2\u06ae\u06af\7"+
		"\u02e9\2\2\u06af9\3\2\2\2\u06b0\u06b5\7,\2\2\u06b1\u06b5\7\n\2\2\u06b2"+
		"\u06b3\7\u0111\2\2\u06b3\u06b5\7\u0192\2\2\u06b4\u06b0\3\2\2\2\u06b4\u06b1"+
		"\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b8\5L\'\2\u06b7"+
		"\u06b9\5R*\2\u06b8\u06b7\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2"+
		"\2\u06ba\u06bc\5<\37\2\u06bb\u06ba\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc;"+
		"\3\2\2\2\u06bd\u06be\7\u00dc\2\2\u06be\u06bf\7\u00a7\2\2\u06bf\u06c0\7"+
		"\u0205\2\2\u06c0=\3\2\2\2\u06c1\u06c2\7\u00dc\2\2\u06c2\u06c4\5L\'\2\u06c3"+
		"\u06c5\5R*\2\u06c4\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5?\3\2\2\2\u06c6"+
		"\u06c7\t\b\2\2\u06c7\u06cc\5J&\2\u06c8\u06c9\7\u01a1\2\2\u06c9\u06cb\5"+
		"J&\2\u06ca\u06c8\3\2\2\2\u06cb\u06ce\3\2\2\2\u06cc\u06ca\3\2\2\2\u06cc"+
		"\u06cd\3\2\2\2\u06cd\u06cf\3\2\2\2\u06ce\u06cc\3\2\2\2\u06cf\u06d7\7\u0198"+
		"\2\2\u06d0\u06d8\7|\2\2\u06d1\u06d2\5\u0476\u023c\2\u06d2\u06d3\7\u02e1"+
		"\2\2\u06d3\u06d5\3\2\2\2\u06d4\u06d1\3\2\2\2\u06d4\u06d5\3\2\2\2\u06d5"+
		"\u06d6\3\2\2\2\u06d6\u06d8\7\u020e\2\2\u06d7\u06d0\3\2\2\2\u06d7\u06d4"+
		"\3\2\2\2\u06d8A\3\2\2\2\u06d9\u06da\7_\2\2\u06da\u06df\7\u026c\2\2\u06db"+
		"\u06dc\7B\2\2\u06dc\u06df\5\u0462\u0232\2\u06dd\u06df\5\u0296\u014c\2"+
		"\u06de\u06d9\3\2\2\2\u06de\u06db\3\2\2\2\u06de\u06dd\3\2\2\2\u06dfC\3"+
		"\2\2\2\u06e0\u06e2\5\u03e4\u01f3\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2\3\2"+
		"\2\2\u06e2\u06e4\3\2\2\2\u06e3\u06e5\5\u0440\u0221\2\u06e4\u06e3\3\2\2"+
		"\2\u06e4\u06e5\3\2\2\2\u06e5E\3\2\2\2\u06e6\u06e7\7_\2\2\u06e7\u06e9\7"+
		"\u026c\2\2\u06e8\u06ea\5\u0246\u0124\2\u06e9\u06e8\3\2\2\2\u06e9\u06ea"+
		"\3\2\2\2\u06ea\u06ec\3\2\2\2\u06eb\u06ed\5H%\2\u06ec\u06eb\3\2\2\2\u06ed"+
		"\u06ee\3\2\2\2\u06ee\u06ec\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f0\3\2"+
		"\2\2\u06f0\u06f1\7\u00b4\2\2\u06f1\u06f2\5\u0432\u021a\2\u06f2G\3\2\2"+
		"\2\u06f3\u06f4\7,\2\2\u06f4\u06f5\7\u023b\2\2\u06f5\u06f6\7\u011a\2\2"+
		"\u06f6\u06f7\5\u0296\u014c\2\u06f7\u06f8\7,\2\2\u06f8\u06f9\7\u023b\2"+
		"\2\u06f9\u06fa\7\u02fa\2\2\u06fa\u0718\3\2\2\2\u06fb\u06fc\7,\2\2\u06fc"+
		"\u06fd\7\u00a7\2\2\u06fd\u06fe\7\u0205\2\2\u06fe\u06ff\7\u011a\2\2\u06ff"+
		"\u0700\5\u0296\u014c\2\u0700\u0701\7,\2\2\u0701\u0702\7\u00a7\2\2\u0702"+
		"\u0703\7\u0205\2\2\u0703\u0704\7\u02fa\2\2\u0704\u0718\3\2\2\2\u0705\u0706"+
		"\7\n\2\2\u0706\u0707\7\u023b\2\2\u0707\u0708\7\u011a\2\2\u0708\u0709\5"+
		"\u0296\u014c\2\u0709\u070a\7\n\2\2\u070a\u070b\7\u023b\2\2\u070b\u070c"+
		"\7\u02fa\2\2\u070c\u0718\3\2\2\2\u070d\u070e\7\n\2\2\u070e\u070f\7\u00a7"+
		"\2\2\u070f\u0710\7\u0205\2\2\u0710\u0711\7\u011a\2\2\u0711\u0712\5\u0296"+
		"\u014c\2\u0712\u0713\7\n\2\2\u0713\u0714\7\u00a7\2\2\u0714\u0715\7\u0205"+
		"\2\2\u0715\u0716\7\u02fa\2\2\u0716\u0718\3\2\2\2\u0717\u06f3\3\2\2\2\u0717"+
		"\u06fb\3\2\2\2\u0717\u0705\3\2\2\2\u0717\u070d\3\2\2\2\u0718I\3\2\2\2"+
		"\u0719\u0734\7\20\2\2\u071a\u0734\7\22\2\2\u071b\u071c\7\33\2\2\u071c"+
		"\u0734\7\u023d\2\2\u071d\u0734\7\36\2\2\u071e\u0734\7Z\2\2\u071f\u0734"+
		"\7r\2\2\u0720\u0721\7\u009d\2\2\u0721\u0734\7\u023d\2\2\u0722\u0734\7"+
		"\u00a4\2\2\u0723\u0734\7\u00e7\2\2\u0724\u0734\7\u016f\2\2\u0725\u0734"+
		"\7\u01ed\2\2\u0726\u0734\7\u01fc\2\2\u0727\u0734\7\u026e\2\2\u0728\u0734"+
		"\7\u0085\2\2\u0729\u0734\7\u0239\2\2\u072a\u0734\7\u0225\2\2\u072b\u0734"+
		"\7\u0083\2\2\u072c\u0734\7\u0141\2\2\u072d\u0734\7\u0140\2\2\u072e\u0734"+
		"\7\u021c\2\2\u072f\u0734\7\u0248\2\2\u0730\u0734\7|\2\2\u0731\u0734\7"+
		"\u020e\2\2\u0732\u0734\7\u00d8\2\2\u0733\u0719\3\2\2\2\u0733\u071a\3\2"+
		"\2\2\u0733\u071b\3\2\2\2\u0733\u071d\3\2\2\2\u0733\u071e\3\2\2\2\u0733"+
		"\u071f\3\2\2\2\u0733\u0720\3\2\2\2\u0733\u0722\3\2\2\2\u0733\u0723\3\2"+
		"\2\2\u0733\u0724\3\2\2\2\u0733\u0725\3\2\2\2\u0733\u0726\3\2\2\2\u0733"+
		"\u0727\3\2\2\2\u0733\u0728\3\2\2\2\u0733\u0729\3\2\2\2\u0733\u072a\3\2"+
		"\2\2\u0733\u072b\3\2\2\2\u0733\u072c\3\2\2\2\u0733\u072d\3\2\2\2\u0733"+
		"\u072e\3\2\2\2\u0733\u072f\3\2\2\2\u0733\u0730\3\2\2\2\u0733\u0731\3\2"+
		"\2\2\u0733\u0732\3\2\2\2\u0734K\3\2\2\2\u0735\u073a\5N(\2\u0736\u0737"+
		"\7\u01a1\2\2\u0737\u0739\5N(\2\u0738\u0736\3\2\2\2\u0739\u073c\3\2\2\2"+
		"\u073a\u0738\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d\3\2\2\2\u073c\u073a"+
		"\3\2\2\2\u073d\u073f\7\u0198\2\2\u073e\u0740\5P)\2\u073f\u073e\3\2\2\2"+
		"\u073f\u0740\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0742\5\u040a\u0206\2\u0742"+
		"M\3\2\2\2\u0743\u0746\t\t\2\2\u0744\u0745\7\u0192\2\2\u0745\u0747\5\u043c"+
		"\u021f\2\u0746\u0744\3\2\2\2\u0746\u0747\3\2\2\2\u0747O\3\2\2\2\u0748"+
		"\u0749\7\u016c\2\2\u0749\u074a\7\u0254\2\2\u074a\u074b\5\u040a\u0206\2"+
		"\u074b\u074c\7\u0192\2\2\u074cQ\3\2\2\2\u074d\u074f\7\u01e5\2\2\u074e"+
		"\u0750\5T+\2\u074f\u074e\3\2\2\2\u0750\u0751\3\2\2\2\u0751\u074f\3\2\2"+
		"\2\u0751\u0752\3\2\2\2\u0752S\3\2\2\2\u0753\u0754\t\n\2\2\u0754\u0755"+
		"\5\u03ee\u01f8\2\u0755U\3\2\2\2\u0756\u0757\7\u00a4\2\2\u0757\u0759\7"+
		"\u0270\2\2\u0758\u075a\78\2\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2\2\2"+
		"\u075a\u075b\3\2\2\2\u075b\u075d\5\u048a\u0246\2\u075c\u075e\t\13\2\2"+
		"\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u075f\3\2\2\2\u075f\u0760"+
		"\7\u02fa\2\2\u0760W\3\2\2\2\u0761\u0762\7\20\2\2\u0762\u0763\7\u0270\2"+
		"\2\u0763\u0769\5\u048a\u0246\2\u0764\u076a\5Z.\2\u0765\u076a\5\\/\2\u0766"+
		"\u076a\5^\60\2\u0767\u076a\5f\64\2\u0768\u076a\5\u0088E\2\u0769\u0764"+
		"\3\2\2\2\u0769\u0765\3\2\2\2\u0769\u0766\3\2\2\2\u0769\u0767\3\2\2\2\u0769"+
		"\u0768\3\2\2\2\u076a\u076c\3\2\2\2\u076b\u076d\5h\65\2\u076c\u076b\3\2"+
		"\2\2\u076c\u076d\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u076f\7\u02fa\2\2\u076f"+
		"Y\3\2\2\2\u0770\u0772\7^\2\2\u0771\u0773\7\u0086\2\2\u0772\u0771\3\2\2"+
		"\2\u0772\u0773\3\2\2\2\u0773\u0775\3\2\2\2\u0774\u0776\t\f\2\2\u0775\u0774"+
		"\3\2\2\2\u0775\u0776\3\2\2\2\u0776\u077a\3\2\2\2\u0777\u0779\5\u0236\u011c"+
		"\2\u0778\u0777\3\2\2\2\u0779\u077c\3\2\2\2\u077a\u0778\3\2\2\2\u077a\u077b"+
		"\3\2\2\2\u077b\u077f\3\2\2\2\u077c\u077a\3\2\2\2\u077d\u077e\7\u01fa\2"+
		"\2\u077e\u0780\7\u0221\2\2\u077f\u077d\3\2\2\2\u077f\u0780\3\2\2\2\u0780"+
		"[\3\2\2\2\u0781\u0783\7\u01ee\2\2\u0782\u0784\5\u0234\u011b\2\u0783\u0782"+
		"\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u0786\7\31\2\2"+
		"\u0786\u0787\7\u018f\2\2\u0787\u0788\7\u02e8\2\2\u0788\u078d\5\u008aF"+
		"\2\u0789\u078a\7\u02ee\2\2\u078a\u078c\5\u008aF\2\u078b\u0789\3\2\2\2"+
		"\u078c\u078f\3\2\2\2\u078d\u078b\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0790"+
		"\3\2\2\2\u078f\u078d\3\2\2\2\u0790\u0791\7\u02e9\2\2\u0791]\3\2\2\2\u0792"+
		"\u0797\5`\61\2\u0793\u0794\7\u02ee\2\2\u0794\u0796\5`\61\2\u0795\u0793"+
		"\3\2\2\2\u0796\u0799\3\2\2\2\u0797\u0795\3\2\2\2\u0797\u0798\3\2\2\2\u0798"+
		"_\3\2\2\2\u0799\u0797\3\2\2\2\u079a\u079d\t\r\2\2\u079b\u079e\5\u009a"+
		"N\2\u079c\u079e\5\u0092J\2\u079d\u079b\3\2\2\2\u079d\u079c\3\2\2\2\u079e"+
		"a\3\2\2\2\u079f\u07a0\t\16\2\2\u07a0\u07ad\7\35\2\2\u07a1\u07ae\5d\63"+
		"\2\u07a2\u07a3\7\u02e8\2\2\u07a3\u07a8\5d\63\2\u07a4\u07a5\7\u02ee\2\2"+
		"\u07a5\u07a7\5d\63\2\u07a6\u07a4\3\2\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6"+
		"\3\2\2\2\u07a8\u07a9\3\2\2\2\u07a9\u07ab\3\2\2\2\u07aa\u07a8\3\2\2\2\u07ab"+
		"\u07ac\7\u02e9\2\2\u07ac\u07ae\3\2\2\2\u07ad\u07a1\3\2\2\2\u07ad\u07a2"+
		"\3\2\2\2\u07aec\3\2\2\2\u07af\u07b1\5\u046e\u0238\2\u07b0\u07b2\5\u0448"+
		"\u0225\2\u07b1\u07b0\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2e\3\2\2\2\u07b3"+
		"\u07b9\7\u015f\2\2\u07b4\u07b5\7\u0130\2\2\u07b5\u07ba\5\u0376\u01bc\2"+
		"\u07b6\u07b7\7\u00ac\2\2\u07b7\u07b8\7\u0270\2\2\u07b8\u07ba\5\u0448\u0225"+
		"\2\u07b9\u07b4\3\2\2\2\u07b9\u07b6\3\2\2\2\u07bag\3\2\2\2\u07bb\u07cc"+
		"\7\u0118\2\2\u07bc\u07c6\7E\2\2\u07bd\u07be\7m\2\2\u07be\u07bf\7\u0266"+
		"\2\2\u07bf\u07c7\7\u0244\2\2\u07c0\u07c2\7\u0187\2\2\u07c1\u07c0\3\2\2"+
		"\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c4\7\u00fc\2\2\u07c4"+
		"\u07c5\7\u0254\2\2\u07c5\u07c7\7}\2\2\u07c6\u07bd\3\2\2\2\u07c6\u07c1"+
		"\3\2\2\2\u07c6\u07c7\3\2\2\2\u07c7\u07c9\3\2\2\2\u07c8\u07ca\5j\66\2\u07c9"+
		"\u07c8\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07bb\3\2"+
		"\2\2\u07cb\u07bc\3\2\2\2\u07cci\3\2\2\2\u07cd\u07cf\7\u00da\2\2\u07ce"+
		"\u07cd\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d1\7\u00bf"+
		"\2\2\u07d1\u07d2\7\u0117\2\2\u07d2\u07d3\5\u040a\u0206\2\u07d3k\3\2\2"+
		"\2\u07d4\u07d7\7r\2\2\u07d5\u07d6\7\u01a1\2\2\u07d6\u07d8\7\u01ee\2\2"+
		"\u07d7\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07dc"+
		"\7\u0270\2\2\u07da\u07dd\5n8\2\u07db\u07dd\5z>\2\u07dc\u07da\3\2\2\2\u07dc"+
		"\u07db\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07df\7\u02fa\2\2\u07dfm\3\2"+
		"\2\2\u07e0\u07e3\5\u048a\u0246\2\u07e1\u07e2\7\u0193\2\2\u07e2\u07e4\7"+
		"\u02e4\2\2\u07e3\u07e1\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4\u07e6\3\2\2\2"+
		"\u07e5\u07e7\5p9\2\u07e6\u07e5\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7o\3\2"+
		"\2\2\u07e8\u07ea\5\u0234\u011b\2\u07e9\u07e8\3\2\2\2\u07e9\u07ea\3\2\2"+
		"\2\u07ea\u07ed\3\2\2\2\u07eb\u07ee\5r:\2\u07ec\u07ee\5t;\2\u07ed\u07eb"+
		"\3\2\2\2\u07ed\u07ec\3\2\2\2\u07ee\u07f0\3\2\2\2\u07ef\u07f1\5x=\2\u07f0"+
		"\u07ef\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07fd\3\2\2\2\u07f2\u07f3\7\u02e8"+
		"\2\2\u07f3\u07f8\5\u008aF\2\u07f4\u07f5\7\u02ee\2\2\u07f5\u07f7\5\u008a"+
		"F\2\u07f6\u07f4\3\2\2\2\u07f7\u07fa\3\2\2\2\u07f8\u07f6\3\2\2\2\u07f8"+
		"\u07f9\3\2\2\2\u07f9\u07fb\3\2\2\2\u07fa\u07f8\3\2\2\2\u07fb\u07fc\7\u02e9"+
		"\2\2\u07fc\u07fe\3\2\2\2\u07fd\u07f2\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe"+
		"\u0802\3\2\2\2\u07ff\u0801\5\u0088E\2\u0800\u07ff\3\2\2\2\u0801\u0804"+
		"\3\2\2\2\u0802\u0800\3\2\2\2\u0802\u0803\3\2\2\2\u0803q\3\2\2\2\u0804"+
		"\u0802\3\2\2\2\u0805\u0809\t\2\2\2\u0806\u080a\7\u018f\2\2\u0807\u080a"+
		"\5\u0262\u0132\2\u0808\u080a\5v<\2\u0809\u0806\3\2\2\2\u0809\u0807\3\2"+
		"\2\2\u0809\u0808\3\2\2\2\u080as\3\2\2\2\u080b\u080c\7\u0272\2\2\u080c"+
		"\u080d\5\u0448\u0225\2\u080du\3\2\2\2\u080e\u080f\7\u0254\2\2\u080f\u0810"+
		"\7\u0192\2\2\u0810\u0813\5\u0448\u0225\2\u0811\u0812\7\u0187\2\2\u0812"+
		"\u0814\7\u018a\2\2\u0813\u0811\3\2\2\2\u0813\u0814\3\2\2\2\u0814w\3\2"+
		"\2\2\u0815\u0816\7\u00c9\2\2\u0816\u0817\7\u0164\2\2\u0817\u0818\5\u0376"+
		"\u01bc\2\u0818\u0819\7\u0123\2\2\u0819\u081a\7\u011d\2\2\u081a\u081b\7"+
		"\u0284\2\2\u081b\u081c\t\17\2\2\u081cy\3\2\2\2\u081d\u081e\78\2\2\u081e"+
		"\u081f\5\u048a\u0246\2\u081f\u0821\t\2\2\2\u0820\u0822\5|?\2\u0821\u0820"+
		"\3\2\2\2\u0822\u0823\3\2\2\2\u0823\u0821\3\2\2\2\u0823\u0824\3\2\2\2\u0824"+
		"\u0825\3\2\2\2\u0825\u0826\7\u00b4\2\2\u0826{\3\2\2\2\u0827\u082a\5~@"+
		"\2\u0828\u082a\5\u0080A\2\u0829\u0827\3\2\2\2\u0829\u0828\3\2\2\2\u082a"+
		"}\3\2\2\2\u082b\u082c\t\20\2\2\u082c\u082d\7\u0152\2\2\u082d\u082e\5\u0084"+
		"C\2\u082e\177\3\2\2\2\u082f\u0833\t\21\2\2\u0830\u0834\5\u0082B\2\u0831"+
		"\u0834\5\u0084C\2\u0832\u0834\5\u0086D\2\u0833\u0830\3\2\2\2\u0833\u0831"+
		"\3\2\2\2\u0833\u0832\3\2\2\2\u0834\u0081\3\2\2\2\u0835\u0836\7\u01d2\2"+
		"\2\u0836\u0837\5\u0430\u0219\2\u0837\u0838\7\u02e8\2\2\u0838\u083d\5\u00a0"+
		"Q\2\u0839\u083a\7\u02ee\2\2\u083a\u083c\5\u00a0Q\2\u083b\u0839\3\2\2\2"+
		"\u083c\u083f\3\2\2\2\u083d\u083b\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u0840"+
		"\3\2\2\2\u083f\u083d\3\2\2\2\u0840\u0841\7\u02e9\2\2\u0841\u084c\t\2\2"+
		"\2\u0842\u084d\5\u0238\u011d\2\u0843\u0845\7\u0089\2\2\u0844\u0843\3\2"+
		"\2\2\u0844\u0845\3\2\2\2\u0845\u0847\3\2\2\2\u0846\u0848\5\u0246\u0124"+
		"\2\u0847\u0846\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u0849\3\2\2\2\u0849\u084a"+
		"\5\u0292\u014a\2\u084a\u084b\7\u02fa\2\2\u084b\u084d\3\2\2\2\u084c\u0842"+
		"\3\2\2\2\u084c\u0844\3\2\2\2\u084d\u0083\3\2\2\2\u084e\u084f\7\u00e2\2"+
		"\2\u084f\u085b\5\u042e\u0218\2\u0850\u0851\7\u02e8\2\2\u0851\u0856\5\u00a0"+
		"Q\2\u0852\u0853\7\u02ee\2\2\u0853\u0855\5\u00a0Q\2\u0854\u0852\3\2\2\2"+
		"\u0855\u0858\3\2\2\2\u0856\u0854\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0859"+
		"\3\2\2\2\u0858\u0856\3\2\2\2\u0859\u085a\7\u02e9\2\2\u085a\u085c\3\2\2"+
		"\2\u085b\u0850\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e"+
		"\7\u01f9\2\2\u085e\u085f\5\u0448\u0225\2\u085f\u086a\t\2\2\2\u0860\u086b"+
		"\5\u0238\u011d\2\u0861\u0863\7\u0089\2\2\u0862\u0861\3\2\2\2\u0862\u0863"+
		"\3\2\2\2\u0863\u0865\3\2\2\2\u0864\u0866\5\u0246\u0124\2\u0865\u0864\3"+
		"\2\2\2\u0865\u0866\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0868\5\u0292\u014a"+
		"\2\u0868\u0869\7\u02fa\2\2\u0869\u086b\3\2\2\2\u086a\u0860\3\2\2\2\u086a"+
		"\u0862\3\2\2\2\u086b\u0085\3\2\2\2\u086c\u086e\7\u00d0\2\2\u086d\u086c"+
		"\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u0870\3\2\2\2\u086f\u0871\7\u0110\2"+
		"\2\u0870\u086f\3\2\2\2\u0870\u0871\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873"+
		"\7g\2\2\u0873\u0874\7\u00e2\2\2\u0874\u0886\5\u0448\u0225\2\u0875\u0876"+
		"\7\u02e8\2\2\u0876\u0877\7\u0217\2\2\u0877\u0878\7\u0107\2\2\u0878\u0879"+
		"\7\u01a5\2\2\u0879\u087a\5\u0448\u0225\2\u087a\u087b\7\u02ee\2\2\u087b"+
		"\u087c\3\2\2\2\u087c\u0881\5\u00a0Q\2\u087d\u087e\7\u02ee\2\2\u087e\u0880"+
		"\5\u00a0Q\2\u087f\u087d\3\2\2\2\u0880\u0883\3\2\2\2\u0881\u087f\3\2\2"+
		"\2\u0881\u0882\3\2\2\2\u0882\u0884\3\2\2\2\u0883\u0881\3\2\2\2\u0884\u0885"+
		"\7\u02e9\2\2\u0885\u0887\3\2\2\2\u0886\u0875\3\2\2\2\u0886\u0887\3\2\2"+
		"\2\u0887\u0888\3\2\2\2\u0888\u0889\7\u01f9\2\2\u0889\u088a\7\u0217\2\2"+
		"\u088a\u088b\7\31\2\2\u088b\u088c\7\u01f5\2\2\u088c\u0897\t\2\2\2\u088d"+
		"\u0898\5\u0238\u011d\2\u088e\u0890\7\u0089\2\2\u088f\u088e\3\2\2\2\u088f"+
		"\u0890\3\2\2\2\u0890\u0892\3\2\2\2\u0891\u0893\5\u0246\u0124\2\u0892\u0891"+
		"\3\2\2\2\u0892\u0893\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u0895\5\u0292\u014a"+
		"\2\u0895\u0896\7\u02fa\2\2\u0896\u0898\3\2\2\2\u0897\u088d\3\2\2\2\u0897"+
		"\u088f\3\2\2\2\u0898\u0087\3\2\2\2\u0899\u089b\7\u0187\2\2\u089a\u0899"+
		"\3\2\2\2\u089a\u089b\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089d\t\22\2\2"+
		"\u089d\u0089\3\2\2\2\u089e\u089f\5\u0462\u0232\2\u089f\u08a1\5\u0448\u0225"+
		"\2\u08a0\u08a2\5\u008cG\2\u08a1\u08a0\3\2\2\2\u08a1\u08a2\3\2\2\2\u08a2"+
		"\u08a5\3\2\2\2\u08a3\u08a5\5\u008eH\2\u08a4\u089e\3\2\2\2\u08a4\u08a3"+
		"\3\2\2\2\u08a5\u008b\3\2\2\2\u08a6\u08a7\7\u00c9\2\2\u08a7\u08a8\7\u0164"+
		"\2\2\u08a8\u08a9\5\u0376\u01bc\2\u08a9\u008d\3\2\2\2\u08aa\u08ac\5\u0088"+
		"E\2\u08ab\u08aa\3\2\2\2\u08ab\u08ac\3\2\2\2\u08ac\u08ae\3\2\2\2\u08ad"+
		"\u08af\5\u0090I\2\u08ae\u08ad\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08ae"+
		"\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b4\3\2\2\2\u08b2\u08b3\7\u02ee\2"+
		"\2\u08b3\u08b5\5\u009cO\2\u08b4\u08b2\3\2\2\2\u08b4\u08b5\3\2\2\2\u08b5"+
		"\u008f\3\2\2\2\u08b6\u08ba\5\u0092J\2\u08b7\u08ba\5\u0098M\2\u08b8\u08ba"+
		"\5\u009aN\2\u08b9\u08b6\3\2\2\2\u08b9\u08b7\3\2\2\2\u08b9\u08b8\3\2\2"+
		"\2\u08ba\u0091\3\2\2\2\u08bb\u08be\t\21\2\2\u08bc\u08bf\5\u0094K\2\u08bd"+
		"\u08bf\5\u0096L\2\u08be\u08bc\3\2\2\2\u08be\u08bd\3\2\2\2\u08bf\u0093"+
		"\3\2\2\2\u08c0\u08c1\7\u01d2\2\2\u08c1\u08c2\5\u0430\u0219\2\u08c2\u08c3"+
		"\7\u02e8\2\2\u08c3\u08c8\5\u00a0Q\2\u08c4\u08c5\7\u02ee\2\2\u08c5\u08c7"+
		"\5\u00a0Q\2\u08c6\u08c4\3\2\2\2\u08c7\u08ca\3\2\2\2\u08c8\u08c6\3\2\2"+
		"\2\u08c8\u08c9\3\2\2\2\u08c9\u08cb\3\2\2\2\u08ca\u08c8\3\2\2\2\u08cb\u08ce"+
		"\7\u02e9\2\2\u08cc\u08cd\t\2\2\2\u08cd\u08cf\5\u0238\u011d\2\u08ce\u08cc"+
		"\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u0095\3\2\2\2\u08d0\u08d1\7\u00e2\2"+
		"\2\u08d1\u08dd\5\u042e\u0218\2\u08d2\u08d3\7\u02e8\2\2\u08d3\u08d8\5\u00a0"+
		"Q\2\u08d4\u08d5\7\u02ee\2\2\u08d5\u08d7\5\u00a0Q\2\u08d6\u08d4\3\2\2\2"+
		"\u08d7\u08da\3\2\2\2\u08d8\u08d6\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u08db"+
		"\3\2\2\2\u08da\u08d8\3\2\2\2\u08db\u08dc\7\u02e9\2\2\u08dc\u08de\3\2\2"+
		"\2\u08dd\u08d2\3\2\2\2\u08dd\u08de\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u08e4"+
		"\7\u01f9\2\2\u08e0\u08e5\5\u0448\u0225\2\u08e1\u08e2\7\u0217\2\2\u08e2"+
		"\u08e3\7\31\2\2\u08e3\u08e5\7\u01f5\2\2\u08e4\u08e0\3\2\2\2\u08e4\u08e1"+
		"\3\2\2\2\u08e5\u08ee\3\2\2\2\u08e6\u08e7\t\2\2\2\u08e7\u08ef\5\u0238\u011d"+
		"\2\u08e8\u08ea\7\u00c9\2\2\u08e9\u08eb\7\u028a\2\2\u08ea\u08e9\3\2\2\2"+
		"\u08ea\u08eb\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec\u08ed\7\u0164\2\2\u08ed"+
		"\u08ef\5\u0376\u01bc\2\u08ee\u08e6\3\2\2\2\u08ee\u08e8\3\2\2\2\u08ee\u08ef"+
		"\3\2\2\2\u08ef\u0097\3\2\2\2\u08f0\u08f2\7\u00d0\2\2\u08f1\u08f0\3\2\2"+
		"\2\u08f1\u08f2\3\2\2\2\u08f2\u08f4\3\2\2\2\u08f3\u08f5\7\u0110\2\2\u08f4"+
		"\u08f3\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u08f7\7g"+
		"\2\2\u08f7\u08f8\7\u00e2\2\2\u08f8\u090a\5\u0448\u0225\2\u08f9\u08fa\7"+
		"\u02e8\2\2\u08fa\u08fb\7\u0217\2\2\u08fb\u08fc\7\u0107\2\2\u08fc\u08fd"+
		"\7\u01a5\2\2\u08fd\u08fe\5\u0448\u0225\2\u08fe\u08ff\7\u02ee\2\2\u08ff"+
		"\u0900\3\2\2\2\u0900\u0905\5\u00a0Q\2\u0901\u0902\7\u02ee\2\2\u0902\u0904"+
		"\5\u00a0Q\2\u0903\u0901\3\2\2\2\u0904\u0907\3\2\2\2\u0905\u0903\3\2\2"+
		"\2\u0905\u0906\3\2\2\2\u0906\u0908\3\2\2\2\u0907\u0905\3\2\2\2\u0908\u0909"+
		"\7\u02e9\2\2\u0909\u090b\3\2\2\2\u090a\u08f9\3\2\2\2\u090a\u090b\3\2\2"+
		"\2\u090b\u090c\3\2\2\2\u090c\u090d\7\u01f9\2\2\u090d\u090e\7\u0217\2\2"+
		"\u090e\u090f\7\31\2\2\u090f\u0912\7\u01f5\2\2\u0910\u0911\t\2\2\2\u0911"+
		"\u0913\5\u0238\u011d\2\u0912\u0910\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0099"+
		"\3\2\2\2\u0914\u0915\t\20\2\2\u0915\u0916\7\u0152\2\2\u0916\u0917\5\u0096"+
		"L\2\u0917\u009b\3\2\2\2\u0918\u0919\7\u01c8\2\2\u0919\u091a\7\u01f3\2"+
		"\2\u091a\u091b\7\u02e8\2\2\u091b\u0920\5\u009eP\2\u091c\u091d\7\u02ee"+
		"\2\2\u091d\u091f\5\u009eP\2\u091e\u091c\3\2\2\2\u091f\u0922\3\2\2\2\u0920"+
		"\u091e\3\2\2\2\u0920\u0921\3\2\2\2\u0921\u0923\3\2\2\2\u0922\u0920\3\2"+
		"\2\2\u0923\u0924\7\u02e9\2\2\u0924\u009d\3\2\2\2\u0925\u0928\5\u0462\u0232"+
		"\2\u0926\u0928\7\u008e\2\2\u0927\u0925\3\2\2\2\u0927\u0926\3\2\2\2\u0928"+
		"\u009f\3\2\2\2\u0929\u092a\5\u0468\u0235\2\u092a\u092b\5\u0448\u0225\2"+
		"\u092b\u00a1\3\2\2\2\u092c\u092d\7\u00a4\2\2\u092d\u092e\7\u0218\2\2\u092e"+
		"\u092f\5\u048c\u0247\2\u092f\u0930\7\u02fa\2\2\u0930\u00a3\3\2\2\2\u0931"+
		"\u0932\7\20\2\2\u0932\u0933\7\u0218\2\2\u0933\u0935\5\u048c\u0247\2\u0934"+
		"\u0936\5\u00a8U\2\u0935\u0934\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0935"+
		"\3\2\2\2\u0937\u0938\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u093a\7\u02fa\2"+
		"\2\u093a\u00a5\3\2\2\2\u093b\u093c\7r\2\2\u093c\u093d\7\u0218\2\2\u093d"+
		"\u0941\5\u048c\u0247\2\u093e\u0940\5\u00a8U\2\u093f\u093e\3\2\2\2\u0940"+
		"\u0943\3\2\2\2\u0941\u093f\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0944\3\2"+
		"\2\2\u0943\u0941\3\2\2\2\u0944\u0945\7\u02fa\2\2\u0945\u00a7\3\2\2\2\u0946"+
		"\u0947\7\u00fd\2\2\u0947\u094b\7?\2\2\u0948\u0949\7\u0238\2\2\u0949\u094b"+
		"\7\u029c\2\2\u094a\u0946\3\2\2\2\u094a\u0948\3\2\2\2\u094b\u094c\3\2\2"+
		"\2\u094c\u0961\5\u0498\u024d\2\u094d\u094e\7\u014e\2\2\u094e\u0951\5\u0498"+
		"\u024d\2\u094f\u0951\7\u017a\2\2\u0950\u094d\3\2\2\2\u0950\u094f\3\2\2"+
		"\2\u0951\u0961\3\2\2\2\u0952\u0953\7\u015a\2\2\u0953\u0956\5\u0498\u024d"+
		"\2\u0954\u0956\7\u017b\2\2\u0955\u0952\3\2\2\2\u0955\u0954\3\2\2\2\u0956"+
		"\u0961\3\2\2\2\u0957\u0961\t\23\2\2\u0958\u0959\7A\2\2\u0959\u095c\5\u0498"+
		"\u024d\2\u095a\u095c\7\u0170\2\2\u095b\u0958\3\2\2\2\u095b\u095a\3\2\2"+
		"\2\u095c\u0961\3\2\2\2\u095d\u0961\t\24\2\2\u095e\u0961\t\25\2\2\u095f"+
		"\u0961\t\26\2\2\u0960\u094a\3\2\2\2\u0960\u0950\3\2\2\2\u0960\u0955\3"+
		"\2\2\2\u0960\u0957\3\2\2\2\u0960\u095b\3\2\2\2\u0960\u095d\3\2\2\2\u0960"+
		"\u095e\3\2\2\2\u0960\u095f\3\2\2\2\u0961\u00a9\3\2\2\2\u0962\u0964\7r"+
		"\2\2\u0963\u0965\7\u0276\2\2\u0964\u0963\3\2\2\2\u0964\u0965\3\2\2\2\u0965"+
		"\u0966\3\2\2\2\u0966\u0967\7\u0100\2\2\u0967\u0968\5\u0436\u021c\2\u0968"+
		"\u0969\7\u0198\2\2\u0969\u096a\5\u040a\u0206\2\u096a\u096d\5\u043e\u0220"+
		"\2\u096b\u096c\7\u0252\2\2\u096c\u096e\7\u0306\2\2\u096d\u096b\3\2\2\2"+
		"\u096d\u096e\3\2\2\2\u096e\u0971\3\2\2\2\u096f\u0970\7a\2\2\u0970\u0972"+
		"\7\u023d\2\2\u0971\u096f\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0973\3\2\2"+
		"\2\u0973\u0974\7\u02fa\2\2\u0974\u00ab\3\2\2\2\u0975\u0976\7\20\2\2\u0976"+
		"\u0977\7\u0100\2\2\u0977\u0978\5\u0436\u021c\2\u0978\u0979\7\u01ed\2\2"+
		"\u0979\u097a\7\u0266\2\2\u097a\u097b\5\u0436\u021c\2\u097b\u097c\7\u02fa"+
		"\2\2\u097c\u00ad\3\2\2\2\u097d\u097e\7r\2\2\u097e\u097f\7\u0282\2\2\u097f"+
		"\u0989\5\u0418\u020d\2\u0980\u098a\5\u00b4[\2\u0981\u098a\5\u00b6\\\2"+
		"\u0982\u098a\5\u00b8]\2\u0983\u098a\5\u00ba^\2\u0984\u098a\5\u00bc_\2"+
		"\u0985\u098a\5\u00c2b\2\u0986\u098a\5\u00c4c\2\u0987\u098a\5\u00c6d\2"+
		"\u0988\u098a\5\u00dep\2\u0989\u0980\3\2\2\2\u0989\u0981\3\2\2\2\u0989"+
		"\u0982\3\2\2\2\u0989\u0983\3\2\2\2\u0989\u0984\3\2\2\2\u0989\u0985\3\2"+
		"\2\2\u0989\u0986\3\2\2\2\u0989\u0987\3\2\2\2\u0989\u0988\3\2\2\2\u098a"+
		"\u098b\3\2\2\2\u098b\u0989\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u098d\3\2"+
		"\2\2\u098d\u098e\7\u02fa\2\2\u098e\u00af\3\2\2\2\u098f\u0990\7\20\2\2"+
		"\u0990\u0991\7\u0282\2\2\u0991\u099d\5\u0418\u020d\2\u0992\u099e\5\u00b2"+
		"Z\2\u0993\u099e\5\u00b6\\\2\u0994\u099e\5\u00b8]\2\u0995\u099e\5\u00ba"+
		"^\2\u0996\u099e\5\u00bc_\2\u0997\u099e\5\u00c0a\2\u0998\u099e\5\u00c2"+
		"b\2\u0999\u099e\5\u00c4c\2\u099a\u099e\5\u00c8e\2\u099b\u099e\5\u00de"+
		"p\2\u099c\u099e\5\u00d2j\2\u099d\u0992\3\2\2\2\u099d\u0993\3\2\2\2\u099d"+
		"\u0994\3\2\2\2\u099d\u0995\3\2\2\2\u099d\u0996\3\2\2\2\u099d\u0997\3\2"+
		"\2\2\u099d\u0998\3\2\2\2\u099d\u0999\3\2\2\2\u099d\u099a\3\2\2\2\u099d"+
		"\u099b\3\2\2\2\u099d\u099c\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u099d\3\2"+
		"\2\2\u099f\u09a0\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1\u09a2\7\u02fa\2\2\u09a2"+
		"\u09af\3\2\2\2\u09a3\u09a5\7\u02ee\2\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5"+
		"\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a8\5\u0418\u020d\2\u09a7\u09a4\3"+
		"\2\2\2\u09a8\u09a9\3\2\2\2\u09a9\u09a7\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa"+
		"\u09ab\3\2\2\2\u09ab\u09ac\5\u00caf\2\u09ac\u09ad\7\u02fa\2\2\u09ad\u09af"+
		"\3\2\2\2\u09ae\u098f\3\2\2\2\u09ae\u09a7\3\2\2\2\u09af\u00b1\3\2\2\2\u09b0"+
		"\u09b3\5\u00b4[\2\u09b1\u09b2\7\u01ee\2\2\u09b2\u09b4\5\u0486\u0244\2"+
		"\u09b3\u09b1\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u00b3\3\2\2\2\u09b5\u09b6"+
		"\7\u00f3\2\2\u09b6\u09b7\7?\2\2\u09b7\u09b8\5\u0486\u0244\2\u09b8\u00b5"+
		"\3\2\2\2\u09b9\u09ba\7\u00f3\2\2\u09ba\u09bd\t\27\2\2\u09bb\u09bc\7\31"+
		"\2\2\u09bc\u09be\5\u049e\u0250\2\u09bd\u09bb\3\2\2\2\u09bd\u09be\3\2\2"+
		"\2\u09be\u00b7\3\2\2\2\u09bf\u09c0\t\30\2\2\u09c0\u09c1\7\u0252\2\2\u09c1"+
		"\u09c2\5\u0486\u0244\2\u09c2\u00b9\3\2\2\2\u09c3\u09c6\7\u01d9\2\2\u09c4"+
		"\u09c7\5\u0212\u010a\2\u09c5\u09c7\7\u0277\2\2\u09c6\u09c4\3\2\2\2\u09c6"+
		"\u09c5\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09c9\7\u0198\2\2\u09c9\u09ca"+
		"\5\u0486\u0244\2\u09ca\u00bb\3\2\2\2\u09cb\u09cc\7\u01d4\2\2\u09cc\u09cd"+
		"\5\u0486\u0244\2\u09cd\u00bd\3\2\2\2\u09ce\u09d0\7\u02ee\2\2\u09cf\u09ce"+
		"\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09d3\5\u03fe\u0200"+
		"\2\u09d2\u09cf\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d2\3\2\2\2\u09d4\u09d5"+
		"\3\2\2\2\u09d5\u09e6\3\2\2\2\u09d6\u09e2\7\16\2\2\u09d7\u09dc\7\u00bc"+
		"\2\2\u09d8\u09da\7\u02ee\2\2\u09d9\u09d8\3\2\2\2\u09d9\u09da\3\2\2\2\u09da"+
		"\u09db\3\2\2\2\u09db\u09dd\5\u03fe\u0200\2\u09dc\u09d9\3\2\2\2\u09dd\u09de"+
		"\3\2\2\2\u09de\u09dc\3\2\2\2\u09de\u09df\3\2\2\2\u09df\u09e1\3\2\2\2\u09e0"+
		"\u09d7\3\2\2\2\u09e1\u09e4\3\2\2\2\u09e2\u09e0\3\2\2\2\u09e2\u09e3\3\2"+
		"\2\2\u09e3\u09e6\3\2\2\2\u09e4\u09e2\3\2\2\2\u09e5\u09d2\3\2\2\2\u09e5"+
		"\u09d6\3\2\2\2\u09e6\u00bf\3\2\2\2\u09e7\u09e8\7\u008e\2\2\u09e8\u09eb"+
		"\7\u01ff\2\2\u09e9\u09ec\7\u017d\2\2\u09ea\u09ec\5\u00be`\2\u09eb\u09e9"+
		"\3\2\2\2\u09eb\u09ea\3\2\2\2\u09ec\u00c1\3\2\2\2\u09ed\u09ee\7\u01b2\2"+
		"\2\u09ee\u09ef\7\u00c6\2\2\u09ef\u00c3\3\2\2\2\u09f0\u09f1\7\4\2\2\u09f1"+
		"\u09f2\t\31\2\2\u09f2\u00c5\3\2\2\2\u09f3\u09f4\7\u00b0\2\2\u09f4\u09f5"+
		"\7\u00ab\2\2\u09f5\u00c7\3\2\2\2\u09f6\u0a00\5\u00c6d\2\u09f7\u09fc\7"+
		"\u00dc\2\2\u09f8\u09fa\7\u02ee\2\2\u09f9\u09f8\3\2\2\2\u09f9\u09fa\3\2"+
		"\2\2\u09fa\u09fb\3\2\2\2\u09fb\u09fd\5\u0492\u024a\2\u09fc\u09f9\3\2\2"+
		"\2\u09fd\u09fe\3\2\2\2\u09fe\u09fc\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a01"+
		"\3\2\2\2\u0a00\u09f7\3\2\2\2\u0a00\u0a01\3\2\2\2\u0a01\u0a03\3\2\2\2\u0a02"+
		"\u0a04\7\u00da\2\2\u0a03\u0a02\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u00c9"+
		"\3\2\2\2\u0a05\u0a06\7\u01fc\2\2\u0a06\u0a07\7c\2\2\u0a07\u0a0b\7\u025b"+
		"\2\2\u0a08\u0a09\7\u00b5\2\2\u0a09\u0a0c\7\u0281\2\2\u0a0a\u0a0c\5\u0418"+
		"\u020d\2\u0a0b\u0a08\3\2\2\2\u0a0b\u0a0a\3\2\2\2\u0a0c\u0a2d\3\2\2\2\u0a0d"+
		"\u0a0e\7\u00e7\2\2\u0a0e\u0a0f\7c\2\2\u0a0f\u0a2a\7\u025b\2\2\u0a10\u0a11"+
		"\7\u00b5\2\2\u0a11\u0a2b\7\u0281\2\2\u0a12\u0a1a\5\u0418\u020d\2\u0a13"+
		"\u0a18\7\u029c\2\2\u0a14\u0a15\7\u017e\2\2\u0a15\u0a19\7\u0200\2\2\u0a16"+
		"\u0a17\7\u01ff\2\2\u0a17\u0a19\5\u00be`\2\u0a18\u0a14\3\2\2\2\u0a18\u0a16"+
		"\3\2\2\2\u0a19\u0a1b\3\2\2\2\u0a1a\u0a13\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b"+
		"\u0a1e\3\2\2\2\u0a1c\u0a1d\7 \2\2\u0a1d\u0a1f\7\u01ef\2\2\u0a1e\u0a1c"+
		"\3\2\2\2\u0a1e\u0a1f\3\2\2\2\u0a1f\u0a28\3\2\2\2\u0a20\u0a21\7\37\2\2"+
		"\u0a21\u0a26\7\u0284\2\2\u0a22\u0a27\7\u01b2\2\2\u0a23\u0a27\7H\2\2\u0a24"+
		"\u0a25\7\u009f\2\2\u0a25\u0a27\7\u0164\2\2\u0a26\u0a22\3\2\2\2\u0a26\u0a23"+
		"\3\2\2\2\u0a26\u0a24\3\2\2\2\u0a27\u0a29\3\2\2\2\u0a28\u0a20\3\2\2\2\u0a28"+
		"\u0a29\3\2\2\2\u0a29\u0a2b\3\2\2\2\u0a2a\u0a10\3\2\2\2\u0a2a\u0a12\3\2"+
		"\2\2\u0a2b\u0a2d\3\2\2\2\u0a2c\u0a05\3\2\2\2\u0a2c\u0a0d\3\2\2\2\u0a2d"+
		"\u00cb\3\2\2\2\u0a2e\u0a33\7\u02e8\2\2\u0a2f\u0a31\7\u02ee\2\2\u0a30\u0a2f"+
		"\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a34\5\u0486\u0244"+
		"\2\u0a33\u0a30\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a33\3\2\2\2\u0a35\u0a36"+
		"\3\2\2\2\u0a36\u0a37\3\2\2\2\u0a37\u0a38\7\u02e9\2\2\u0a38\u00cd\3\2\2"+
		"\2\u0a39\u0a3a\7\u021f\2\2\u0a3a\u0a3b\7i\2\2\u0a3b\u0a3f\7\u02fc\2\2"+
		"\u0a3c\u0a40\7\16\2\2\u0a3d\u0a40\7\u008e\2\2\u0a3e\u0a40\5\u00ccg\2\u0a3f"+
		"\u0a3c\3\2\2\2\u0a3f\u0a3d\3\2\2\2\u0a3f\u0a3e\3\2\2\2\u0a40\u00cf\3\2"+
		"\2\2\u0a41\u0a42\t\32\2\2\u0a42\u0a43\7i\2\2\u0a43\u0a44\7\u02fc\2\2\u0a44"+
		"\u0a45\5\u00ccg\2\u0a45\u00d1\3\2\2\2\u0a46\u0a4d\5\u00ceh\2\u0a47\u0a4a"+
		"\5\u00d0i\2\u0a48\u0a49\7\u00dc\2\2\u0a49\u0a4b\5\u042c\u0217\2\u0a4a"+
		"\u0a48\3\2\2\2\u0a4a\u0a4b\3\2\2\2\u0a4b\u0a4d\3\2\2\2\u0a4c\u0a46\3\2"+
		"\2\2\u0a4c\u0a47\3\2\2\2\u0a4d\u00d3\3\2\2\2\u0a4e\u0a4f\7\u00a4\2\2\u0a4f"+
		"\u0a50\7\u0100\2\2\u0a50\u0a51\5\u0436\u021c\2\u0a51\u0a52\7\u02fa\2\2"+
		"\u0a52\u00d5\3\2\2\2\u0a53\u0a56\7\u01fc\2\2\u0a54\u0a57\5\u00d8m\2\u0a55"+
		"\u0a57\5\u00dan\2\u0a56\u0a54\3\2\2\2\u0a56\u0a55\3\2\2\2\u0a57\u0a58"+
		"\3\2\2\2\u0a58\u0a59\7\u02fa\2\2\u0a59\u00d7\3\2\2\2\u0a5a\u0a5c\7\u02ee"+
		"\2\2\u0a5b\u0a5a\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d"+
		"\u0a60\5\u03fe\u0200\2\u0a5e\u0a60\5\u045a\u022e\2\u0a5f\u0a5d\3\2\2\2"+
		"\u0a5f\u0a5e\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0a67\7\u00e0\2\2\u0a62"+
		"\u0a64\7\u02ee\2\2\u0a63\u0a62\3\2\2\2\u0a63\u0a64\3\2\2\2\u0a64\u0a65"+
		"\3\2\2\2\u0a65\u0a68\5\u03fc\u01ff\2\u0a66\u0a68\7\u01d6\2\2\u0a67\u0a63"+
		"\3\2\2\2\u0a67\u0a66\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a67\3\2\2\2\u0a69"+
		"\u0a6a\3\2\2\2\u0a6a\u00d9\3\2\2\2\u0a6b\u0a6d\7\u02ee\2\2\u0a6c\u0a6b"+
		"\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a70\3\2\2\2\u0a6e\u0a71\5\u03fe\u0200"+
		"\2\u0a6f\u0a71\5\u0458\u022d\2\u0a70\u0a6e\3\2\2\2\u0a70\u0a6f\3\2\2\2"+
		"\u0a71\u0a73\3\2\2\2\u0a72\u0a6c\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a72"+
		"\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a77\7\u0198\2"+
		"\2\u0a77\u0a78\5\u043a\u021e\2\u0a78\u0a79\3\2\2\2\u0a79\u0a80\7\u00e0"+
		"\2\2\u0a7a\u0a7c\7\u02ee\2\2\u0a7b\u0a7a\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c"+
		"\u0a7d\3\2\2\2\u0a7d\u0a81\5\u03fc\u01ff\2\u0a7e\u0a81\7\u01d6\2\2\u0a7f"+
		"\u0a81\5\u03fe\u0200\2\u0a80\u0a7b\3\2\2\2\u0a80\u0a7e\3\2\2\2\u0a80\u0a7f"+
		"\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a80\3\2\2\2\u0a82\u0a83\3\2\2\2\u0a83"+
		"\u0a87\3\2\2\2\u0a84\u0a85\7E\2\2\u0a85\u0a88\7f\2\2\u0a86\u0a88\7\u00da"+
		"\2\2\u0a87\u0a84\3\2\2\2\u0a87\u0a86\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88"+
		"\u00db\3\2\2\2\u0a89\u0a95\7\u00e7\2\2\u0a8a\u0a8c\7\u02ee\2\2\u0a8b\u0a8a"+
		"\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a93\3\2\2\2\u0a8d\u0a94\5\u03fe\u0200"+
		"\2\u0a8e\u0a94\5\u045a\u022e\2\u0a8f\u0a91\5\u0458\u022d\2\u0a90\u0a92"+
		"\5\u043e\u0220\2\u0a91\u0a90\3\2\2\2\u0a91\u0a92\3\2\2\2\u0a92\u0a94\3"+
		"\2\2\2\u0a93\u0a8d\3\2\2\2\u0a93\u0a8e\3\2\2\2\u0a93\u0a8f\3\2\2\2\u0a94"+
		"\u0a96\3\2\2\2\u0a95\u0a8b\3\2\2\2\u0a96\u0a97\3\2\2\2\u0a97\u0a95\3\2"+
		"\2\2\u0a97\u0a98\3\2\2\2\u0a98\u0a9b\3\2\2\2\u0a99\u0a9a\7\u0198\2\2\u0a9a"+
		"\u0a9c\5\u043a\u021e\2\u0a9b\u0a99\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u0a9d"+
		"\3\2\2\2\u0a9d\u0aa3\7\u0266\2\2\u0a9e\u0aa0\7\u02ee\2\2\u0a9f\u0a9e\3"+
		"\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa4\5\u03fc\u01ff"+
		"\2\u0aa2\u0aa4\7\u01d6\2\2\u0aa3\u0a9f\3\2\2\2\u0aa3\u0aa2\3\2\2\2\u0aa4"+
		"\u0aa5\3\2\2\2\u0aa5\u0aa3\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aaa\3\2"+
		"\2\2\u0aa7\u0aa8\7\u029c\2\2\u0aa8\u0aa9\t\33\2\2\u0aa9\u0aab\7\u019c"+
		"\2\2\u0aaa\u0aa7\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aaf\3\2\2\2\u0aac"+
		"\u0aad\7\u029c\2\2\u0aad\u0aae\7\u00f0\2\2\u0aae\u0ab0\7\u019c\2\2\u0aaf"+
		"\u0aac\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab4\3\2\2\2\u0ab1\u0ab2\7\u029c"+
		"\2\2\u0ab2\u0ab3\7\u00e7\2\2\u0ab3\u0ab5\7\u019c\2\2\u0ab4\u0ab1\3\2\2"+
		"\2\u0ab4\u0ab5\3\2\2\2\u0ab5\u0ab7\3\2\2\2\u0ab6\u0ab8\5\u00dep\2\u0ab7"+
		"\u0ab6\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0ab9\3\2\2\2\u0ab9\u0aba\7\u02fa"+
		"\2\2\u0aba\u00dd\3\2\2\2\u0abb\u0abc\7h\2\2\u0abc\u0abd\7\u02fc\2\2\u0abd"+
		"\u0abe\t\34\2\2\u0abe\u00df\3\2\2\2\u0abf\u0ac2\7r\2\2\u0ac0\u0ac1\7\u01a1"+
		"\2\2\u0ac1\u0ac3\7\u01ee\2\2\u0ac2\u0ac0\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3"+
		"\u0ac8\3\2\2\2\u0ac4\u0ac6\7\u017e\2\2\u0ac5\u0ac4\3\2\2\2\u0ac5\u0ac6"+
		"\3\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u0ac9\7\u00da\2\2\u0ac8\u0ac5\3\2\2"+
		"\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0ad0\3\2\2\2\u0aca\u0ad1\7\u00aa\2\2\u0acb"+
		"\u0acd\7\u00a8\2\2\u0acc\u0ace\7\u00aa\2\2\u0acd\u0acc\3\2\2\2\u0acd\u0ace"+
		"\3\2\2\2\u0ace\u0ad1\3\2\2\2\u0acf\u0ad1\7\u0174\2\2\u0ad0\u0aca\3\2\2"+
		"\2\u0ad0\u0acb\3\2\2\2\u0ad0\u0acf\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0ad2"+
		"\3\2\2\2\u0ad2\u0ad3\7\u0290\2\2\u0ad3\u0ad5\5\u040a\u0206\2\u0ad4\u0ad6"+
		"\5\u00e2r\2\u0ad5\u0ad4\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ad7\3\2\2"+
		"\2\u0ad7\u0ad8\7\31\2\2\u0ad8\u0ada\5\u016a\u00b6\2\u0ad9\u0adb\5\u036c"+
		"\u01b7\2\u0ada\u0ad9\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u00e1\3\2\2\2\u0adc"+
		"\u0adf\5\u00e4s\2\u0add\u0adf\5\u00e6t\2\u0ade\u0adc\3\2\2\2\u0ade\u0add"+
		"\3\2\2\2\u0adf\u00e3\3\2\2\2\u0ae0\u0af1\7\u02e8\2\2\u0ae1\u0ae3\7\u02ee"+
		"\2\2\u0ae2\u0ae1\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0aef\3\2\2\2\u0ae4"+
		"\u0ae6\5\u03f0\u01f9\2\u0ae5\u0ae7\t\35\2\2\u0ae6\u0ae5\3\2\2\2\u0ae6"+
		"\u0ae7\3\2\2\2\u0ae7\u0aeb\3\2\2\2\u0ae8\u0aea\5\u00eav\2\u0ae9\u0ae8"+
		"\3\2\2\2\u0aea\u0aed\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec"+
		"\u0af0\3\2\2\2\u0aed\u0aeb\3\2\2\2\u0aee\u0af0\5\u00ecw\2\u0aef\u0ae4"+
		"\3\2\2\2\u0aef\u0aee\3\2\2\2\u0af0\u0af2\3\2\2\2\u0af1\u0ae2\3\2\2\2\u0af2"+
		"\u0af3\3\2\2\2\u0af3\u0af1\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0af5\3\2"+
		"\2\2\u0af5\u0af6\7\u02e9\2\2\u0af6\u00e5\3\2\2\2\u0af7\u0af8\7\u0192\2"+
		"\2\u0af8\u0b0b\5\u048a\u0246\2\u0af9\u0afa\7\u029c\2\2\u0afa\u0afb\7\u018f"+
		"\2\2\u0afb\u0b07\t\36\2\2\u0afc\u0b08\7\u008e\2\2\u0afd\u0b02\7\u02e8"+
		"\2\2\u0afe\u0b00\7\u02ee\2\2\u0aff\u0afe\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00"+
		"\u0b01\3\2\2\2\u0b01\u0b03\7\u0306\2\2\u0b02\u0aff\3\2\2\2\u0b03\u0b04"+
		"\3\2\2\2\u0b04\u0b02\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06"+
		"\u0b08\7\u02e9\2\2\u0b07\u0afc\3\2\2\2\u0b07\u0afd\3\2\2\2\u0b08\u0b0c"+
		"\3\2\2\2\u0b09\u0b0a\7\u0272\2\2\u0b0a\u0b0c\5\u040a\u0206\2\u0b0b\u0af9"+
		"\3\2\2\2\u0b0b\u0b09\3\2\2\2\u0b0c\u0b1e\3\2\2\2\u0b0d\u0b16\7\u02e8\2"+
		"\2\u0b0e\u0b10\7\u02ee\2\2\u0b0f\u0b0e\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10"+
		"\u0b14\3\2\2\2\u0b11\u0b15\5\u00ecw\2\u0b12\u0b13\7\u0306\2\2\u0b13\u0b15"+
		"\5\u00eav\2\u0b14\u0b11\3\2\2\2\u0b14\u0b12\3\2\2\2\u0b15\u0b17\3\2\2"+
		"\2\u0b16\u0b0f\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0b16\3\2\2\2\u0b18\u0b19"+
		"\3\2\2\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b1b\7\u02e9\2\2\u0b1b\u0b1d\3\2\2"+
		"\2\u0b1c\u0b0d\3\2\2\2\u0b1d\u0b20\3\2\2\2\u0b1e\u0b1c\3\2\2\2\u0b1e\u0b1f"+
		"\3\2\2\2\u0b1f\u00e7\3\2\2\2\u0b20\u0b1e\3\2\2\2\u0b21\u0b22\5\u00eav"+
		"\2\u0b22\u0b23\5\u00ecw\2\u0b23\u0b24\5\u020e\u0108\2\u0b24\u0b25\5\u0210"+
		"\u0109\2\u0b25\u00e9\3\2\2\2\u0b26\u0b27\7e\2\2\u0b27\u0b29\5\u0400\u0201"+
		"\2\u0b28\u0b26\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b33\3\2\2\2\u0b2a\u0b2c"+
		"\7\u0187\2\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2d\3\2\2"+
		"\2\u0b2d\u0b34\7\u018a\2\2\u0b2e\u0b34\7\u0276\2\2\u0b2f\u0b30\7\u01cd"+
		"\2\2\u0b30\u0b34\7\u0122\2\2\u0b31\u0b34\5\u022a\u0116\2\u0b32\u0b34\5"+
		"\u0220\u0111\2\u0b33\u0b2b\3\2\2\2\u0b33\u0b2e\3\2\2\2\u0b33\u0b2f\3\2"+
		"\2\2\u0b33\u0b31\3\2\2\2\u0b33\u0b32\3\2\2\2\u0b34\u0b36\3\2\2\2\u0b35"+
		"\u0b37\5\u00eex\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3\2\2\2\u0b37\u00eb"+
		"\3\2\2\2\u0b38\u0b39\7e\2\2\u0b39\u0b3b\5\u0400\u0201\2\u0b3a\u0b38\3"+
		"\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b40\3\2\2\2\u0b3c\u0b41\5\u0230\u0119"+
		"\2\u0b3d\u0b41\5\u0228\u0115\2\u0b3e\u0b41\5\u022e\u0118\2\u0b3f\u0b41"+
		"\5\u0220\u0111\2\u0b40\u0b3c\3\2\2\2\u0b40\u0b3d\3\2\2\2\u0b40\u0b3e\3"+
		"\2\2\2\u0b40\u0b3f\3\2\2\2\u0b41\u0b43\3\2\2\2\u0b42\u0b3a\3\2\2\2\u0b43"+
		"\u0b44\3\2\2\2\u0b44\u0b42\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b47\3\2"+
		"\2\2\u0b46\u0b48\5\u00eex\2\u0b47\u0b46\3\2\2\2\u0b47\u0b48\3\2\2\2\u0b48"+
		"\u00ed\3\2\2\2\u0b49\u0b4b\7\u0187\2\2\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b"+
		"\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b55\7\u0090\2\2\u0b4d\u0b4e\7\u0109"+
		"\2\2\u0b4e\u0b55\t\37\2\2\u0b4f\u0b55\t \2\2\u0b50\u0b55\5\u00f0y\2\u0b51"+
		"\u0b55\t\7\2\2\u0b52\u0b55\t!\2\2\u0b53\u0b55\5\u0146\u00a4\2\u0b54\u0b4a"+
		"\3\2\2\2\u0b54\u0b4d\3\2\2\2\u0b54\u0b4f\3\2\2\2\u0b54\u0b50\3\2\2\2\u0b54"+
		"\u0b51\3\2\2\2\u0b54\u0b52\3\2\2\2\u0b54\u0b53\3\2\2\2\u0b55\u0b56\3\2"+
		"\2\2\u0b56\u0b54\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57\u00ef\3\2\2\2\u0b58"+
		"\u0b59\7\u0284\2\2\u0b59\u0b62\7\u0100\2\2\u0b5a\u0b63\5\u0436\u021c\2"+
		"\u0b5b\u0b5c\7\u02e8\2\2\u0b5c\u0b5d\5\u00aaV\2\u0b5d\u0b5e\7\u02e9\2"+
		"\2\u0b5e\u0b63\3\2\2\2\u0b5f\u0b61\5\u00f2z\2\u0b60\u0b5f\3\2\2\2\u0b60"+
		"\u0b61\3\2\2\2\u0b61\u0b63\3\2\2\2\u0b62\u0b5a\3\2\2\2\u0b62\u0b5b\3\2"+
		"\2\2\u0b62\u0b60\3\2\2\2\u0b63\u00f1\3\2\2\2\u0b64\u0b67\5\u00f4{\2\u0b65"+
		"\u0b67\5\u0102\u0082\2\u0b66\u0b64\3\2\2\2\u0b66\u0b65\3\2\2\2\u0b67\u0b6e"+
		"\3\2\2\2\u0b68\u0b6a\5\u00fc\177\2\u0b69\u0b68\3\2\2\2\u0b6a\u0b6b\3\2"+
		"\2\2\u0b6b\u0b69\3\2\2\2\u0b6b\u0b6c\3\2\2\2\u0b6c\u0b6e\3\2\2\2\u0b6d"+
		"\u0b66\3\2\2\2\u0b6d\u0b69\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6f\u0b6d\3\2"+
		"\2\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b78\3\2\2\2\u0b71\u0b72\7\u0102\2\2\u0b72"+
		"\u0b75\7\u011a\2\2\u0b73\u0b76\5\u013e\u00a0\2\u0b74\u0b76\5\u010e\u0088"+
		"\2\u0b75\u0b73\3\2\2\2\u0b75\u0b74\3\2\2\2\u0b76\u0b78\3\2\2\2\u0b77\u0b6d"+
		"\3\2\2\2\u0b77\u0b71\3\2\2\2\u0b78\u00f3\3\2\2\2\u0b79\u0b7a\7\u00e4\2"+
		"\2\u0b7a\u0b7b\7\u01af\2\2\u0b7b\u0b88\7?\2\2\u0b7c\u0b7d\7\u01db\2\2"+
		"\u0b7d\u0b7e\5\u043e\u0220\2\u0b7e\u0b7f\7\u02e8\2\2\u0b7f\u0b80\5\u00f8"+
		"}\2\u0b80\u0b81\7\u02e9\2\2\u0b81\u0b89\3\2\2\2\u0b82\u0b83\7\u00ec\2"+
		"\2\u0b83\u0b86\5\u043e\u0220\2\u0b84\u0b87\5\u00f6|\2\u0b85\u0b87\5\u0100"+
		"\u0081\2\u0b86\u0b84\3\2\2\2\u0b86\u0b85\3\2\2\2\u0b87\u0b89\3\2\2\2\u0b88"+
		"\u0b7c\3\2\2\2\u0b88\u0b82\3\2\2\2\u0b89\u00f5\3\2\2\2\u0b8a\u0b94\7\u02e8"+
		"\2\2\u0b8b\u0b8d\7\u02ee\2\2\u0b8c\u0b8b\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d"+
		"\u0b8e\3\2\2\2\u0b8e\u0b90\5\u0110\u0089\2\u0b8f\u0b91\5\u0114\u008b\2"+
		"\u0b90\u0b8f\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0b92\3\2\2\2\u0b92\u0b93"+
		"\5\u0116\u008c\2\u0b93\u0b95\3\2\2\2\u0b94\u0b8c\3\2\2\2\u0b95\u0b96\3"+
		"\2\2\2\u0b96\u0b94\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98"+
		"\u0b99\7\u02e9\2\2\u0b99\u00f7\3\2\2\2\u0b9a\u0b9b\5\u0112\u008a\2\u0b9b"+
		"\u0b9c\7\u0286\2\2\u0b9c\u0b9d\7\u0128\2\2\u0b9d\u0b9e\7\u0258\2\2\u0b9e"+
		"\u0b9f\7\u02e8\2\2\u0b9f\u0ba4\5\u045c\u022f\2\u0ba0\u0ba1\7\u02ee\2\2"+
		"\u0ba1\u0ba3\5\u045c\u022f\2\u0ba2\u0ba0\3\2\2\2\u0ba3\u0ba6\3\2\2\2\u0ba4"+
		"\u0ba2\3\2\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0ba7\3\2\2\2\u0ba6\u0ba4\3\2"+
		"\2\2\u0ba7\u0ba9\7\u02e9\2\2\u0ba8\u0baa\5\u00fa~\2\u0ba9\u0ba8\3\2\2"+
		"\2\u0ba9\u0baa\3\2\2\2\u0baa\u00f9\3\2\2\2\u0bab\u0bad\5\u00fe\u0080\2"+
		"\u0bac\u0bab\3\2\2\2\u0bad\u0bae\3\2\2\2\u0bae\u0bac\3\2\2\2\u0bae\u0baf"+
		"\3\2\2\2\u0baf\u0bb3\3\2\2\2\u0bb0\u0bb3\5\u01e6\u00f4\2\u0bb1\u0bb3\5"+
		"\u014e\u00a8\2\u0bb2\u0bac\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2\u0bb1\3\2"+
		"\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb2\3\2\2\2\u0bb4\u0bb5\3\2\2\2\u0bb5"+
		"\u00fb\3\2\2\2\u0bb6\u0bb8\5\u00fe\u0080\2\u0bb7\u0bb6\3\2\2\2\u0bb8\u0bb9"+
		"\3\2\2\2\u0bb9\u0bb7\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u0bc9\3\2\2\2\u0bbb"+
		"\u0bc9\5\u014e\u00a8\2\u0bbc\u0bc9\7\u0196\2\2\u0bbd\u0bc0\7\u0252\2\2"+
		"\u0bbe\u0bc1\5\u041a\u020e\2\u0bbf\u0bc1\7\u008e\2\2\u0bc0\u0bbe\3\2\2"+
		"\2\u0bc0\u0bbf\3\2\2\2\u0bc1\u0bc9\3\2\2\2\u0bc2\u0bc9\5\u012e\u0098\2"+
		"\u0bc3\u0bc9\t\"\2\2\u0bc4\u0bc9\7\u01fb\2\2\u0bc5\u0bc9\t\35\2\2\u0bc6"+
		"\u0bc9\5\u013a\u009e\2\u0bc7\u0bc9\5\u013c\u009f\2\u0bc8\u0bb7\3\2\2\2"+
		"\u0bc8\u0bbb\3\2\2\2\u0bc8\u0bbc\3\2\2\2\u0bc8\u0bbd\3\2\2\2\u0bc8\u0bc2"+
		"\3\2\2\2\u0bc8\u0bc3\3\2\2\2\u0bc8\u0bc4\3\2\2\2\u0bc8\u0bc5\3\2\2\2\u0bc8"+
		"\u0bc6\3\2\2\2\u0bc8\u0bc7\3\2\2\2\u0bc9\u00fd\3\2\2\2\u0bca\u0bcb\7\u01b4"+
		"\2\2\u0bcb\u0bd2\5\u0498\u024d\2\u0bcc\u0bcd\7\u01b7\2\2\u0bcd\u0bd2\5"+
		"\u0498\u024d\2\u0bce\u0bcf\7\u010a\2\2\u0bcf\u0bd2\5\u0498\u024d\2\u0bd0"+
		"\u0bd2\5\u01f4\u00fb\2\u0bd1\u0bca\3\2\2\2\u0bd1\u0bcc\3\2\2\2\u0bd1\u0bce"+
		"\3\2\2\2\u0bd1\u0bd0\3\2\2\2\u0bd2\u00ff\3\2\2\2\u0bd3\u0bd4\7\u01b0\2"+
		"\2\u0bd4\u0be2\5\u0136\u009c\2\u0bd5\u0bd6\7\u023f\2\2\u0bd6\u0bd7\7\u0107"+
		"\2\2\u0bd7\u0bd8\7\u02e8\2\2\u0bd8\u0bdd\5\u041a\u020e\2\u0bd9\u0bda\7"+
		"\u02ee\2\2\u0bda\u0bdc\5\u041a\u020e\2\u0bdb\u0bd9\3\2\2\2\u0bdc\u0bdf"+
		"\3\2\2\2\u0bdd\u0bdb\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u0be0\3\2\2\2\u0bdf"+
		"\u0bdd\3\2\2\2\u0be0\u0be1\7\u02e9\2\2\u0be1\u0be3\3\2\2\2\u0be2\u0bd5"+
		"\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be6\3\2\2\2\u0be4\u0be7\5\u0128\u0095"+
		"\2\u0be5\u0be7\5\u012a\u0096\2\u0be6\u0be4\3\2\2\2\u0be6\u0be5\3\2\2\2"+
		"\u0be6\u0be7\3\2\2\2\u0be7\u0bf6\3\2\2\2\u0be8\u0be9\7\u01a6\2\2\u0be9"+
		"\u0bea\7\u023f\2\2\u0bea\u0beb\7\u0107\2\2\u0beb\u0bec\7\u02e8\2\2\u0bec"+
		"\u0bf1\5\u041a\u020e\2\u0bed\u0bee\7\u02ee\2\2\u0bee\u0bf0\5\u041a\u020e"+
		"\2\u0bef\u0bed\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bef\3\2\2\2\u0bf1\u0bf2"+
		"\3\2\2\2\u0bf2\u0bf4\3\2\2\2\u0bf3\u0bf1\3\2\2\2\u0bf4\u0bf5\7\u02e9\2"+
		"\2\u0bf5\u0bf7\3\2\2\2\u0bf6\u0be8\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7\u0101"+
		"\3\2\2\2\u0bf8\u0bfd\7\u0137\2\2\u0bf9\u0bfe\5\u0104\u0083\2\u0bfa\u0bfe"+
		"\5\u0106\u0084\2\u0bfb\u0bfe\5\u0108\u0085\2\u0bfc\u0bfe\5\u010a\u0086"+
		"\2\u0bfd\u0bf9\3\2\2\2\u0bfd\u0bfa\3\2\2\2\u0bfd\u0bfb\3\2\2\2\u0bfd\u0bfc"+
		"\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0103\3\2\2\2\u0bff\u0c00\7\u02e8\2"+
		"\2\u0c00\u0c07\5\u0112\u008a\2\u0c01\u0c04\5\u00fa~\2\u0c02\u0c04\5\u012a"+
		"\u0096\2\u0c03\u0c01\3\2\2\2\u0c03\u0c02\3\2\2\2\u0c04\u0c05\3\2\2\2\u0c05"+
		"\u0c03\3\2\2\2\u0c05\u0c06\3\2\2\2\u0c06\u0c08\3\2\2\2\u0c07\u0c03\3\2"+
		"\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c0a\3\2\2\2\u0c09\u0c0b\7\u027b\2\2\u0c0a"+
		"\u0c09\3\2\2\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c1e\3\2\2\2\u0c0c\u0c0d\7\u02ee"+
		"\2\2\u0c0d\u0c0f\7\u01af\2\2\u0c0e\u0c10\5\u041e\u0210\2\u0c0f\u0c0e\3"+
		"\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c17\3\2\2\2\u0c11\u0c14\5\u00fa~\2"+
		"\u0c12\u0c14\5\u012a\u0096\2\u0c13\u0c11\3\2\2\2\u0c13\u0c12\3\2\2\2\u0c14"+
		"\u0c15\3\2\2\2\u0c15\u0c13\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c18\3\2"+
		"\2\2\u0c17\u0c13\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c1a\3\2\2\2\u0c19"+
		"\u0c1b\7\u027b\2\2\u0c1a\u0c19\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1d"+
		"\3\2\2\2\u0c1c\u0c0c\3\2\2\2\u0c1d\u0c20\3\2\2\2\u0c1e\u0c1c\3\2\2\2\u0c1e"+
		"\u0c1f\3\2\2\2\u0c1f\u0c21\3\2\2\2\u0c20\u0c1e\3\2\2\2\u0c21\u0c22\7\u02e9"+
		"\2\2\u0c22\u0105\3\2\2\2\u0c23\u0c24\7\u02e8\2\2\u0c24\u0c2b\5\u0112\u008a"+
		"\2\u0c25\u0c28\5\u00fa~\2\u0c26\u0c28\5\u012a\u0096\2\u0c27\u0c25\3\2"+
		"\2\2\u0c27\u0c26\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c27\3\2\2\2\u0c29"+
		"\u0c2a\3\2\2\2\u0c2a\u0c2c\3\2\2\2\u0c2b\u0c27\3\2\2\2\u0c2b\u0c2c\3\2"+
		"\2\2\u0c2c\u0c2e\3\2\2\2\u0c2d\u0c2f\5\u0134\u009b\2\u0c2e\u0c2d\3\2\2"+
		"\2\u0c2e\u0c2f\3\2\2\2\u0c2f\u0c3f\3\2\2\2\u0c30\u0c31\7\u02ee\2\2\u0c31"+
		"\u0c38\5\u0112\u008a\2\u0c32\u0c35\5\u00fa~\2\u0c33\u0c35\5\u012a\u0096"+
		"\2\u0c34\u0c32\3\2\2\2\u0c34\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c34"+
		"\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u0c39\3\2\2\2\u0c38\u0c34\3\2\2\2\u0c38"+
		"\u0c39\3\2\2\2\u0c39\u0c3b\3\2\2\2\u0c3a\u0c3c\5\u0134\u009b\2\u0c3b\u0c3a"+
		"\3\2\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3e\3\2\2\2\u0c3d\u0c30\3\2\2\2\u0c3e"+
		"\u0c41\3\2\2\2\u0c3f\u0c3d\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c42\3\2"+
		"\2\2\u0c41\u0c3f\3\2\2\2\u0c42\u0c43\7\u02e9\2\2\u0c43\u0107\3\2\2\2\u0c44"+
		"\u0c45\7\u023f\2\2\u0c45\u0c46\7\u0107\2\2\u0c46\u0c47\7\u02e8\2\2\u0c47"+
		"\u0c4c\5\u041a\u020e\2\u0c48\u0c49\7\u02ee\2\2\u0c49\u0c4b\5\u041a\u020e"+
		"\2\u0c4a\u0c48\3\2\2\2\u0c4b\u0c4e\3\2\2\2\u0c4c\u0c4a\3\2\2\2\u0c4c\u0c4d"+
		"\3\2\2\2\u0c4d\u0c4f\3\2\2\2\u0c4e\u0c4c\3\2\2\2\u0c4f\u0c50\7\u02e9\2"+
		"\2\u0c50\u0c6f\3\2\2\2\u0c51\u0c52\7\u02e8\2\2\u0c52\u0c54\5\u0112\u008a"+
		"\2\u0c53\u0c55\5\u01e6\u00f4\2\u0c54\u0c53\3\2\2\2\u0c54\u0c55\3\2\2\2"+
		"\u0c55\u0c57\3\2\2\2\u0c56\u0c58\5\u012e\u0098\2\u0c57\u0c56\3\2\2\2\u0c57"+
		"\u0c58\3\2\2\2\u0c58\u0c5a\3\2\2\2\u0c59\u0c5b\5\u0134\u009b\2\u0c5a\u0c59"+
		"\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c69\3\2\2\2\u0c5c\u0c5d\7\u02ee\2"+
		"\2\u0c5d\u0c5f\5\u0112\u008a\2\u0c5e\u0c60\5\u01e6\u00f4\2\u0c5f\u0c5e"+
		"\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u0c62\3\2\2\2\u0c61\u0c63\5\u012e\u0098"+
		"\2\u0c62\u0c61\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c65\3\2\2\2\u0c64\u0c66"+
		"\5\u0134\u009b\2\u0c65\u0c64\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c68\3"+
		"\2\2\2\u0c67\u0c5c\3\2\2\2\u0c68\u0c6b\3\2\2\2\u0c69\u0c67\3\2\2\2\u0c69"+
		"\u0c6a\3\2\2\2\u0c6a\u0c6c\3\2\2\2\u0c6b\u0c69\3\2\2\2\u0c6c\u0c6d\7\u02e9"+
		"\2\2\u0c6d\u0c6f\3\2\2\2\u0c6e\u0c44\3\2\2\2\u0c6e\u0c51\3\2\2\2\u0c6f"+
		"\u0109\3\2\2\2\u0c70\u0c72\5\u01e8\u00f5\2\u0c71\u0c70\3\2\2\2\u0c71\u0c72"+
		"\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c74\7\u02e8\2\2\u0c74\u0c7b\5\u0112"+
		"\u008a\2\u0c75\u0c78\5\u00fa~\2\u0c76\u0c78\5\u012e\u0098\2\u0c77\u0c75"+
		"\3\2\2\2\u0c77\u0c76\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c79"+
		"\u0c7a\3\2\2\2\u0c7a\u0c7c\3\2\2\2\u0c7b\u0c77\3\2\2\2\u0c7b\u0c7c\3\2"+
		"\2\2\u0c7c\u0c7e\3\2\2\2\u0c7d\u0c7f\5\u0134\u009b\2\u0c7e\u0c7d\3\2\2"+
		"\2\u0c7e\u0c7f\3\2\2\2\u0c7f\u0c81\3\2\2\2\u0c80\u0c82\5\u0132\u009a\2"+
		"\u0c81\u0c80\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c95\3\2\2\2\u0c83\u0c84"+
		"\7\u02ee\2\2\u0c84\u0c8b\5\u0112\u008a\2\u0c85\u0c88\5\u00fa~\2\u0c86"+
		"\u0c88\5\u012e\u0098\2\u0c87\u0c85\3\2\2\2\u0c87\u0c86\3\2\2\2\u0c88\u0c89"+
		"\3\2\2\2\u0c89\u0c87\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u0c8c\3\2\2\2\u0c8b"+
		"\u0c87\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8e\3\2\2\2\u0c8d\u0c8f\5\u0134"+
		"\u009b\2\u0c8e\u0c8d\3\2\2\2\u0c8e\u0c8f\3\2\2\2\u0c8f\u0c91\3\2\2\2\u0c90"+
		"\u0c92\5\u0132\u009a\2\u0c91\u0c90\3\2\2\2\u0c91\u0c92\3\2\2\2\u0c92\u0c94"+
		"\3\2\2\2\u0c93\u0c83\3\2\2\2\u0c94\u0c97\3\2\2\2\u0c95\u0c93\3\2\2\2\u0c95"+
		"\u0c96\3\2\2\2\u0c96\u0c98\3\2\2\2\u0c97\u0c95\3\2\2\2\u0c98\u0c99\7\u02e9"+
		"\2\2\u0c99\u010b\3\2\2\2\u0c9a\u0c9b\7\u00af\2\2\u0c9b\u010d\3\2\2\2\u0c9c"+
		"\u0c9d\7\u00af\2\2\u0c9d\u010f\3\2\2\2\u0c9e\u0c9f\7\u01af\2\2\u0c9f\u0ca0"+
		"\5\u041e\u0210\2\u0ca0\u0111\3\2\2\2\u0ca1\u0ca3\7\u01af\2\2\u0ca2\u0ca4"+
		"\5\u041e\u0210\2\u0ca3\u0ca2\3\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0113\3"+
		"\2\2\2\u0ca5\u0ca6\7\u0101\2\2\u0ca6\u0ca7\t#\2\2\u0ca7\u0115\3\2\2\2"+
		"\u0ca8\u0cbc\5\u01e6\u00f4\2\u0ca9\u0cab\7\u01a6\2\2\u0caa\u0cac\5\u01e6"+
		"\u00f4\2\u0cab\u0caa\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u0cbc\3\2\2\2\u0cad"+
		"\u0cbc\5\u0128\u0095\2\u0cae\u0cbc\5\u012a\u0096\2\u0caf\u0cbc\5\u011c"+
		"\u008f\2\u0cb0\u0cbc\5\u0130\u0099\2\u0cb1\u0cb2\7\u028c\2\2\u0cb2\u0cb3"+
		"\5\u0138\u009d\2\u0cb3\u0cb4\7\u023f\2\2\u0cb4\u0cb6\7\31\2\2\u0cb5\u0cb7"+
		"\t$\2\2\u0cb6\u0cb5\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8"+
		"\u0cb9\7\u0135\2\2\u0cb9\u0cba\5\u0422\u0212\2\u0cba\u0cbc\3\2\2\2\u0cbb"+
		"\u0ca8\3\2\2\2\u0cbb\u0ca9\3\2\2\2\u0cbb\u0cad\3\2\2\2\u0cbb\u0cae\3\2"+
		"\2\2\u0cbb\u0caf\3\2\2\2\u0cbb\u0cb0\3\2\2\2\u0cbb\u0cb1\3\2\2\2\u0cbc"+
		"\u0cbd\3\2\2\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0117\3\2"+
		"\2\2\u0cbf\u0cc3\7\u010c\2\2\u0cc0\u0cc1\5\u011e\u0090\2\u0cc1\u0cc2\5"+
		"\u011a\u008e\2\u0cc2\u0cc4\3\2\2\2\u0cc3\u0cc0\3\2\2\2\u0cc3\u0cc4\3\2"+
		"\2\2\u0cc4\u0cc8\3\2\2\2\u0cc5\u0cc6\7\u017e\2\2\u0cc6\u0cc8\7\u010c\2"+
		"\2\u0cc7\u0cbf\3\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc8\u0119\3\2\2\2\u0cc9\u0ccb"+
		"\7\u010c\2\2\u0cca\u0ccc\5\u0120\u0091\2\u0ccb\u0cca\3\2\2\2\u0ccb\u0ccc"+
		"\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd\u0cd1\5\u043e\u0220\2\u0cce\u0ccf\7"+
		"\u017e\2\2\u0ccf\u0cd1\7\u010c\2\2\u0cd0\u0cc9\3\2\2\2\u0cd0\u0cce\3\2"+
		"\2\2\u0cd1\u011b\3\2\2\2\u0cd2\u0cd3\7\u010c\2\2\u0cd3\u0cd7\5\u011e\u0090"+
		"\2\u0cd4\u0cd5\7\u017e\2\2\u0cd5\u0cd7\7\u010c\2\2\u0cd6\u0cd2\3\2\2\2"+
		"\u0cd6\u0cd4\3\2\2\2\u0cd7\u011d\3\2\2\2\u0cd8\u0cda\5\u0120\u0091\2\u0cd9"+
		"\u0cd8\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda\u0ce5\3\2\2\2\u0cdb\u0cdd\5\u0122"+
		"\u0092\2\u0cdc\u0cdb\3\2\2\2\u0cdc\u0cdd\3\2\2\2\u0cdd\u0ce5\3\2\2\2\u0cde"+
		"\u0ce0\5\u0124\u0093\2\u0cdf\u0cde\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce5"+
		"\3\2\2\2\u0ce1\u0ce3\5\u0126\u0094\2\u0ce2\u0ce1\3\2\2\2\u0ce2\u0ce3\3"+
		"\2\2\2\u0ce3\u0ce5\3\2\2\2\u0ce4\u0cd9\3\2\2\2\u0ce4\u0cdc\3\2\2\2\u0ce4"+
		"\u0cdf\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce5\u011f\3\2\2\2\u0ce6\u0ce7\7\u0153"+
		"\2\2\u0ce7\u0ced\7\u00dc\2\2\u0ce8\u0cee\7\u00a1\2\2\u0ce9\u0ceb\t%\2"+
		"\2\u0cea\u0cec\t&\2\2\u0ceb\u0cea\3\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0cee"+
		"\3\2\2\2\u0ced\u0ce8\3\2\2\2\u0ced\u0ce9\3\2\2\2\u0cee\u0cf2\3\2\2\2\u0cef"+
		"\u0cf0\7\u017e\2\2\u0cf0\u0cf2\7\u0153\2\2\u0cf1\u0ce6\3\2\2\2\u0cf1\u0cef"+
		"\3\2\2\2\u0cf2\u0121\3\2\2\2\u0cf3\u0cf4\7\u01ce\2\2\u0cf4\u0cf5\t\'\2"+
		"\2\u0cf5\u0123\3\2\2\2\u0cf6\u0cff\7\u00a0\2\2\u0cf7\u0d00\7#\2\2\u0cf8"+
		"\u0cfd\7?\2\2\u0cf9\u0cfa\7\u0204\2\2\u0cfa\u0cfe\7\u01db\2\2\u0cfb\u0cfe"+
		"\7\u01af\2\2\u0cfc\u0cfe\7\u0243\2\2\u0cfd\u0cf9\3\2\2\2\u0cfd\u0cfb\3"+
		"\2\2\2\u0cfd\u0cfc\3\2\2\2\u0cfe\u0d00\3\2\2\2\u0cff\u0cf7\3\2\2\2\u0cff"+
		"\u0cf8\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u0125\3\2\2\2\u0d01\u0d03\7\u00a6"+
		"\2\2\u0d02\u0d04\7\16\2\2\u0d03\u0d02\3\2\2\2\u0d03\u0d04\3\2\2\2\u0d04"+
		"\u0d08\3\2\2\2\u0d05\u0d06\7\u017e\2\2\u0d06\u0d08\7\u00a6\2\2\u0d07\u0d01"+
		"\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d08\u0127\3\2\2\2\u0d09\u0d25\7`\2\2\u0d0a"+
		"\u0d0b\7\u0205\2\2\u0d0b\u0d0c\7\u023f\2\2\u0d0c\u0d0e\7`\2\2\u0d0d\u0d0f"+
		"\t(\2\2\u0d0e\u0d0d\3\2\2\2\u0d0e\u0d0f\3\2\2\2\u0d0f\u0d25\3\2\2\2\u0d10"+
		"\u0d11\7X\2\2\u0d11\u0d12\7\u023f\2\2\u0d12\u0d18\7`\2\2\u0d13\u0d14\7"+
		"\u00dc\2\2\u0d14\u0d16\t)\2\2\u0d15\u0d17\t&\2\2\u0d16\u0d15\3\2\2\2\u0d16"+
		"\u0d17\3\2\2\2\u0d17\u0d19\3\2\2\2\u0d18\u0d13\3\2\2\2\u0d18\u0d19\3\2"+
		"\2\2\u0d19\u0d20\3\2\2\2\u0d1a\u0d1c\7\u017e\2\2\u0d1b\u0d1a\3\2\2\2\u0d1b"+
		"\u0d1c\3\2\2\2\u0d1c\u0d1d\3\2\2\2\u0d1d\u0d1e\7\u0205\2\2\u0d1e\u0d1f"+
		"\7\u0129\2\2\u0d1f\u0d21\7\u013b\2\2\u0d20\u0d1b\3\2\2\2\u0d20\u0d21\3"+
		"\2\2\2\u0d21\u0d25\3\2\2\2\u0d22\u0d23\7\u017e\2\2\u0d23\u0d25\7`\2\2"+
		"\u0d24\u0d09\3\2\2\2\u0d24\u0d0a\3\2\2\2\u0d24\u0d10\3\2\2\2\u0d24\u0d22"+
		"\3\2\2\2\u0d25\u0129\3\2\2\2\u0d26\u0d29\5\u012c\u0097\2\u0d27\u0d29\5"+
		"\u012e\u0098\2\u0d28\u0d26\3\2\2\2\u0d28\u0d27\3\2\2\2\u0d29\u012b\3\2"+
		"\2\2\u0d2a\u0d2c\7`\2\2\u0d2b\u0d2d\5\u0498\u024d\2\u0d2c\u0d2b\3\2\2"+
		"\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d30\3\2\2\2\u0d2e\u0d30\7\u0171\2\2\u0d2f"+
		"\u0d2a\3\2\2\2\u0d2f\u0d2e\3\2\2\2\u0d30\u012d\3\2\2\2\u0d31\u0d32\7`"+
		"\2\2\u0d32\u0d33\7\b\2\2\u0d33\u0d36\7\u0144\2\2\u0d34\u0d36\7\u0171\2"+
		"\2\u0d35\u0d31\3\2\2\2\u0d35\u0d34\3\2\2\2\u0d36\u012f\3\2\2\2\u0d37\u0d38"+
		"\7\u0135\2\2\u0d38\u0d39\7\u02e8\2\2\u0d39\u0d3a\5\u0414\u020b\2\u0d3a"+
		"\u0d3b\7\u02e9\2\2\u0d3b\u0d3c\7\u023f\2\2\u0d3c\u0d3e\7\31\2\2\u0d3d"+
		"\u0d3f\t$\2\2\u0d3e\u0d3d\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d4b\3\2"+
		"\2\2\u0d40\u0d45\5\u0422\u0212\2\u0d41\u0d42\7\u02e8\2\2\u0d42\u0d43\5"+
		"\u01e6\u00f4\2\u0d43\u0d44\7\u02e9\2\2\u0d44\u0d46\3\2\2\2\u0d45\u0d41"+
		"\3\2\2\2\u0d45\u0d46\3\2\2\2\u0d46\u0d4c\3\2\2\2\u0d47\u0d48\7\u02e8\2"+
		"\2\u0d48\u0d49\5\u01e6\u00f4\2\u0d49\u0d4a\7\u02e9\2\2\u0d4a\u0d4c\3\2"+
		"\2\2\u0d4b\u0d40\3\2\2\2\u0d4b\u0d47\3\2\2\2\u0d4b\u0d4c\3\2\2\2\u0d4c"+
		"\u0131\3\2\2\2\u0d4d\u0d6c\5\u01e8\u00f5\2\u0d4e\u0d4f\7\u02e8\2\2\u0d4f"+
		"\u0d51\5\u0112\u008a\2\u0d50\u0d52\5\u01e6\u00f4\2\u0d51\u0d50\3\2\2\2"+
		"\u0d51\u0d52\3\2\2\2\u0d52\u0d54\3\2\2\2\u0d53\u0d55\5\u012e\u0098\2\u0d54"+
		"\u0d53\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d57\3\2\2\2\u0d56\u0d58\5\u0134"+
		"\u009b\2\u0d57\u0d56\3\2\2\2\u0d57\u0d58\3\2\2\2\u0d58\u0d66\3\2\2\2\u0d59"+
		"\u0d5a\7\u02ee\2\2\u0d5a\u0d5c\5\u0112\u008a\2\u0d5b\u0d5d\5\u01e6\u00f4"+
		"\2\u0d5c\u0d5b\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5f\3\2\2\2\u0d5e\u0d60"+
		"\5\u012e\u0098\2\u0d5f\u0d5e\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d62\3"+
		"\2\2\2\u0d61\u0d63\5\u0134\u009b\2\u0d62\u0d61\3\2\2\2\u0d62\u0d63\3\2"+
		"\2\2\u0d63\u0d65\3\2\2\2\u0d64\u0d59\3\2\2\2\u0d65\u0d68\3\2\2\2\u0d66"+
		"\u0d64\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d69\3\2\2\2\u0d68\u0d66\3\2"+
		"\2\2\u0d69\u0d6a\7\u02e9\2\2\u0d6a\u0d6c\3\2\2\2\u0d6b\u0d4d\3\2\2\2\u0d6b"+
		"\u0d4e\3\2\2\2\u0d6c\u0133\3\2\2\2\u0d6d\u0d6e\t*\2\2\u0d6e\u0135\3\2"+
		"\2\2\u0d6f\u0d70\7\u02e2\2\2\u0d70\u0137\3\2\2\2\u0d71\u0d72\7\u0306\2"+
		"\2\u0d72\u0139\3\2\2\2\u0d73\u0d74\7\u0101\2\2\u0d74\u0d75\t+\2\2\u0d75"+
		"\u013b\3\2\2\2\u0d76\u0d7a\7\u0181\2\2\u0d77\u0d78\7\u01ab\2\2\u0d78\u0d7a"+
		"\5\u0498\u024d\2\u0d79\u0d76\3\2\2\2\u0d79\u0d77\3\2\2\2\u0d7a\u013d\3"+
		"\2\2\2\u0d7b\u0d7d\5\u03fa\u01fe\2\u0d7c\u0d7e\5\u0140\u00a1\2\u0d7d\u0d7c"+
		"\3\2\2\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u0d80\3\2\2\2\u0d7f\u0d81\5\u013c\u009f"+
		"\2\u0d80\u0d7f\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u0d87\3\2\2\2\u0d82\u0d83"+
		"\7\u01ac\2\2\u0d83\u0d84\7\u02e8\2\2\u0d84\u0d85\5\u0144\u00a3\2\u0d85"+
		"\u0d86\7\u02e9\2\2\u0d86\u0d88\3\2\2\2\u0d87\u0d82\3\2\2\2\u0d87\u0d88"+
		"\3\2\2\2\u0d88\u013f\3\2\2\2\u0d89\u0d8b\7\u0137\2\2\u0d8a\u0d8c\5\u0142"+
		"\u00a2\2\u0d8b\u0d8a\3\2\2\2\u0d8b\u0d8c\3\2\2\2\u0d8c\u0d91\3\2\2\2\u0d8d"+
		"\u0d8e\7\u02ee\2\2\u0d8e\u0d90\5\u0142\u00a2\2\u0d8f\u0d8d\3\2\2\2\u0d90"+
		"\u0d93\3\2\2\2\u0d91\u0d8f\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u0141\3\2"+
		"\2\2\u0d93\u0d91\3\2\2\2\u0d94\u0d95\7\u02e8\2\2\u0d95\u0d96\7\u01af\2"+
		"\2\u0d96\u0d9c\5\u041e\u0210\2\u0d97\u0d98\7\u01ac\2\2\u0d98\u0d99\7\u02e8"+
		"\2\2\u0d99\u0d9a\5\u0144\u00a3\2\u0d9a\u0d9b\7\u02e9\2\2\u0d9b\u0d9d\3"+
		"\2\2\2\u0d9c\u0d97\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e"+
		"\u0d9f\7\u02e9\2\2\u0d9f\u0143\3\2\2\2\u0da0\u0da1\7\u02e4\2\2\u0da1\u0145"+
		"\3\2\2\2\u0da2\u0da3\7\u00bf\2\2\u0da3\u0da4\7\u0117\2\2\u0da4\u0da5\5"+
		"\u0438\u021d\2\u0da5\u0147\3\2\2\2\u0da6\u0da8\7r\2\2\u0da7\u0da9\t,\2"+
		"\2\u0da8\u0da7\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0dad\3\2\2\2\u0daa\u0dae"+
		"\5\u014a\u00a6\2\u0dab\u0dae\5\u0156\u00ac\2\u0dac\u0dae\5\u015a\u00ae"+
		"\2\u0dad\u0daa\3\2\2\2\u0dad\u0dab\3\2\2\2\u0dad\u0dac\3\2\2\2\u0dae\u0daf"+
		"\3\2\2\2\u0daf\u0db0\7\u02fa\2\2\u0db0\u0149\3\2\2\2\u0db1\u0db3\5\u01e6"+
		"\u00f4\2\u0db2\u0db4\5\u015e\u00b0\2\u0db3\u0db2\3\2\2\2\u0db3\u0db4\3"+
		"\2\2\2\u0db4\u0dc6\3\2\2\2\u0db5\u0db6\7\u0156\2\2\u0db6\u0db7\7\u00c8"+
		"\2\2\u0db7\u0dc5\5\u0212\u010a\2\u0db8\u0db9\7\67\2\2\u0db9\u0dc5\5\u0212"+
		"\u010a\2\u0dba\u0dc5\5\u014e\u00a8\2\u0dbb\u0dbc\7\u00da\2\2\u0dbc\u0dc5"+
		"\7\u013d\2\2\u0dbd\u0dc5\t-\2\2\u0dbe\u0dbf\7\u00b3\2\2\u0dbf\u0dc5\5"+
		"\u014c\u00a7\2\u0dc0\u0dc5\7\u008e\2\2\u0dc1\u0dc5\5\u0150\u00a9\2\u0dc2"+
		"\u0dc5\5\u0152\u00aa\2\u0dc3\u0dc5\5\u0154\u00ab\2\u0dc4\u0db5\3\2\2\2"+
		"\u0dc4\u0db8\3\2\2\2\u0dc4\u0dba\3\2\2\2\u0dc4\u0dbb\3\2\2\2\u0dc4\u0dbd"+
		"\3\2\2\2\u0dc4\u0dbe\3\2\2\2\u0dc4\u0dc0\3\2\2\2\u0dc4\u0dc1\3\2\2\2\u0dc4"+
		"\u0dc2\3\2\2\2\u0dc4\u0dc3\3\2\2\2\u0dc5\u0dc8\3\2\2\2\u0dc6\u0dc4\3\2"+
		"\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u014b\3\2\2\2\u0dc8\u0dc6\3\2\2\2\u0dc9"+
		"\u0dca\7\u0284\2\2\u0dca\u0dcb\7\u02e4\2\2\u0dcb\u014d\3\2\2\2\u0dcc\u0dcd"+
		"\t.\2\2\u0dcd\u014f\3\2\2\2\u0dce\u0dcf\7\u00c8\2\2\u0dcf\u0dd0\7\u0147"+
		"\2\2\u0dd0\u0dd7\7\u0137\2\2\u0dd1\u0dd8\7\"\2\2\u0dd2\u0dd5\7\u0274\2"+
		"\2\u0dd3\u0dd4\7\u022a\2\2\u0dd4\u0dd6\5\u0212\u010a\2\u0dd5\u0dd3\3\2"+
		"\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd8\3\2\2\2\u0dd7\u0dd1\3\2\2\2\u0dd7"+
		"\u0dd2\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0151\3\2\2\2\u0dd9\u0dda\7\u0215"+
		"\2\2\u0dda\u0ddb\7\u0232\2\2\u0ddb\u0ddc\7\u0147\2\2\u0ddc\u0ddd\t/\2"+
		"\2\u0ddd\u0153\3\2\2\2\u0dde\u0ddf\7\u00d3\2\2\u0ddf\u0de0\t#\2\2\u0de0"+
		"\u0155\3\2\2\2\u0de1\u0de2\7\u0257\2\2\u0de2\u0de4\5\u01e6\u00f4\2\u0de3"+
		"\u0de5\5\u0160\u00b1\2\u0de4\u0de3\3\2\2\2\u0de4\u0de5\3\2\2\2\u0de5\u0de7"+
		"\3\2\2\2\u0de6\u0de8\5\u0158\u00ad\2\u0de7\u0de6\3\2\2\2\u0de7\u0de8\3"+
		"\2\2\2\u0de8\u0dea\3\2\2\2\u0de9\u0deb\5\u0150\u00a9\2\u0dea\u0de9\3\2"+
		"\2\2\u0dea\u0deb\3\2\2\2\u0deb\u0157\3\2\2\2\u0dec\u0ded\7\u0252\2\2\u0ded"+
		"\u0dee\7\u00e8\2\2\u0dee\u0def\t\60\2\2\u0def\u0159\3\2\2\2\u0df0\u0df1"+
		"\7\u0273\2\2\u0df1\u0df3\5\u01e6\u00f4\2\u0df2\u0df4\5\u015e\u00b0\2\u0df3"+
		"\u0df2\3\2\2\2\u0df3\u0df4\3\2\2\2\u0df4\u0df6\3\2\2\2\u0df5\u0df7\5\u0150"+
		"\u00a9\2\u0df6\u0df5\3\2\2\2\u0df6\u0df7\3\2\2\2\u0df7\u0df9\3\2\2\2\u0df8"+
		"\u0dfa\5\u015c\u00af\2\u0df9\u0df8\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u015b"+
		"\3\2\2\2\u0dfb\u0dfc\7\u01f7\2\2\u0dfc\u0dfd\t\61\2\2\u0dfd\u015d\3\2"+
		"\2\2\u0dfe\u0e00\7~\2\2\u0dff\u0e01\7\u02ee\2\2\u0e00\u0dff\3\2\2\2\u0e00"+
		"\u0e01\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e03\5\u0162\u00b2\2\u0e03\u015f"+
		"\3\2\2\2\u0e04\u0e06\7\u0255\2\2\u0e05\u0e07\7\u02ee\2\2\u0e06\u0e05\3"+
		"\2\2\2\u0e06\u0e07\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08\u0e09\5\u0162\u00b2"+
		"\2\u0e09\u0161\3\2\2\2\u0e0a\u0e0c\7\u02e4\2\2\u0e0b\u0e0a\3\2\2\2\u0e0b"+
		"\u0e0c\3\2\2\2\u0e0c\u0e0f\3\2\2\2\u0e0d\u0e0e\7\u022a\2\2\u0e0e\u0e10"+
		"\5\u0212\u010a\2\u0e0f\u0e0d\3\2\2\2\u0e0f\u0e10\3\2\2\2\u0e10\u0e12\3"+
		"\2\2\2\u0e11\u0e13\7\u01fa\2\2\u0e12\u0e11\3\2\2\2\u0e12\u0e13\3\2\2\2"+
		"\u0e13\u0e15\3\2\2\2\u0e14\u0e16\5\u0166\u00b4\2\u0e15\u0e14\3\2\2\2\u0e15"+
		"\u0e16\3\2\2\2\u0e16\u0163\3\2\2\2\u0e17\u0e23\7~\2\2\u0e18\u0e24\7\u02e4"+
		"\2\2\u0e19\u0e1e\7\u02e8\2\2\u0e1a\u0e1c\7\u02ee\2\2\u0e1b\u0e1a\3\2\2"+
		"\2\u0e1b\u0e1c\3\2\2\2\u0e1c\u0e1d\3\2\2\2\u0e1d\u0e1f\7\u02e4\2\2\u0e1e"+
		"\u0e1b\3\2\2\2\u0e1f\u0e20\3\2\2\2\u0e20\u0e1e\3\2\2\2\u0e20\u0e21\3\2"+
		"\2\2\u0e21\u0e22\3\2\2\2\u0e22\u0e24\7\u02e9\2\2\u0e23\u0e18\3\2\2\2\u0e23"+
		"\u0e19\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u0e27\3\2\2\2\u0e25\u0e26\7\u022a"+
		"\2\2\u0e26\u0e28\5\u0212\u010a\2\u0e27\u0e25\3\2\2\2\u0e27\u0e28\3\2\2"+
		"\2\u0e28\u0e2b\3\2\2\2\u0e29\u0e2a\7\67\2\2\u0e2a\u0e2c\5\u0212\u010a"+
		"\2\u0e2b\u0e29\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2e\3\2\2\2\u0e2d\u0e2f"+
		"\7\u01fa\2\2\u0e2e\u0e2d\3\2\2\2\u0e2e\u0e2f\3\2\2\2\u0e2f\u0165\3\2\2"+
		"\2\u0e30\u0e3a\7$\2\2\u0e31\u0e3b\7\u0191\2\2\u0e32\u0e35\7\u0198\2\2"+
		"\u0e33\u0e34\7\u016e\2\2\u0e34\u0e36\5\u0212\u010a\2\u0e35\u0e33\3\2\2"+
		"\2\u0e35\u0e36\3\2\2\2\u0e36\u0e38\3\2\2\2\u0e37\u0e39\5\u0168\u00b5\2"+
		"\u0e38\u0e37\3\2\2\2\u0e38\u0e39\3\2\2\2\u0e39\u0e3b\3\2\2\2\u0e3a\u0e31"+
		"\3\2\2\2\u0e3a\u0e32\3\2\2\2\u0e3b\u0167\3\2\2\2\u0e3c\u0e3f\7\u014d\2"+
		"\2\u0e3d\u0e40\7\u0277\2\2\u0e3e\u0e40\5\u0212\u010a\2\u0e3f\u0e3d\3\2"+
		"\2\2\u0e3f\u0e3e\3\2\2\2\u0e40\u0169\3\2\2\2\u0e41\u0e45\5\u02c6\u0164"+
		"\2\u0e42\u0e44\5\u02c8\u0165\2\u0e43\u0e42\3\2\2\2\u0e44\u0e47\3\2\2\2"+
		"\u0e45\u0e43\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u016b\3\2\2\2\u0e47\u0e45"+
		"\3\2\2\2\u0e48\u0e4b\7r\2\2\u0e49\u0e4a\7\u00e4\2\2\u0e4a\u0e4c\7\u0257"+
		"\2\2\u0e4b\u0e49\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d"+
		"\u0e4e\7\u0254\2\2\u0e4e\u0e4f\5\u040a\u0206\2\u0e4f\u0e50\5\u016e\u00b8"+
		"\2\u0e50\u016d\3\2\2\2\u0e51\u0e53\7\u02e8\2\2\u0e52\u0e54\5\u0170\u00b9"+
		"\2\u0e53\u0e52\3\2\2\2\u0e54\u0e55\3\2\2\2\u0e55\u0e53\3\2\2\2\u0e55\u0e56"+
		"\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e58\7\u02e9\2\2\u0e58\u0e5a\3\2\2"+
		"\2\u0e59\u0e51\3\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a\u0e61\3\2\2\2\u0e5b\u0e5c"+
		"\7\u0198\2\2\u0e5c\u0e5e\7[\2\2\u0e5d\u0e5f\t\62\2\2\u0e5e\u0e5d\3\2\2"+
		"\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60\u0e62\7\u0206\2\2\u0e61"+
		"\u0e5b\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e64\3\2\2\2\u0e63\u0e65\5\u01d6"+
		"\u00ec\2\u0e64\u0e63\3\2\2\2\u0e64\u0e65\3\2\2\2\u0e65\u0e66\3\2\2\2\u0e66"+
		"\u0e67\5\u0172\u00ba\2\u0e67\u016f\3\2\2\2\u0e68\u0e71\5\u01f6\u00fc\2"+
		"\u0e69\u0e71\5\u01f8\u00fd\2\u0e6a\u0e71\5\u01fa\u00fe\2\u0e6b\u0e6e\5"+
		"\u00ecw\2\u0e6c\u0e6e\5\u0210\u0109\2\u0e6d\u0e6b\3\2\2\2\u0e6d\u0e6c"+
		"\3\2\2\2\u0e6e\u0e71\3\2\2\2\u0e6f\u0e71\5\u01fc\u00ff\2\u0e70\u0e68\3"+
		"\2\2\2\u0e70\u0e69\3\2\2\2\u0e70\u0e6a\3\2\2\2\u0e70\u0e6d\3\2\2\2\u0e70"+
		"\u0e6f\3\2\2\2\u0e71\u0171\3\2\2\2\u0e72\u0e74\5\u018e\u00c8\2\u0e73\u0e72"+
		"\3\2\2\2\u0e73\u0e74\3\2\2\2\u0e74\u0e76\3\2\2\2\u0e75\u0e77\5\u0114\u008b"+
		"\2\u0e76\u0e75\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e79\3\2\2\2\u0e78\u0e7a"+
		"\5\u0188\u00c5\2\u0e79\u0e78\3\2\2\2\u0e79\u0e7a\3\2\2\2\u0e7a\u0e7c\3"+
		"\2\2\2\u0e7b\u0e7d\5\u0178\u00bd\2\u0e7c\u0e7b\3\2\2\2\u0e7c\u0e7d\3\2"+
		"\2\2\u0e7d\u0e7f\3\2\2\2\u0e7e\u0e80\t\63\2\2\u0e7f\u0e7e\3\2\2\2\u0e7f"+
		"\u0e80\3\2\2\2\u0e80\u0e86\3\2\2\2\u0e81\u0e82\7\u01f4\2\2\u0e82\u0e83"+
		"\7\u02e8\2\2\u0e83\u0e84\7\u015d\2\2\u0e84\u0e85\t\64\2\2\u0e85\u0e87"+
		"\7\u02e9\2\2\u0e86\u0e81\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e89\3\2\2"+
		"\2\u0e88\u0e8a\5\u013c\u009f\2\u0e89\u0e88\3\2\2\2\u0e89\u0e8a\3\2\2\2"+
		"\u0e8a\u0e8c\3\2\2\2\u0e8b\u0e8d\t\65\2\2\u0e8c\u0e8b\3\2\2\2\u0e8c\u0e8d"+
		"\3\2\2\2\u0e8d\u0e91\3\2\2\2\u0e8e\u0e90\5\u0186\u00c4\2\u0e8f\u0e8e\3"+
		"\2\2\2\u0e90\u0e93\3\2\2\2";
	private static final String _serializedATNSegment2 =
		"\u0e91\u0e8f\3\2\2\2\u0e91\u0e92\3\2\2\2\u0e92\u0e95\3\2\2\2\u0e93\u0e91"+
		"\3\2\2\2\u0e94\u0e96\5\u0176\u00bc\2\u0e95\u0e94\3\2\2\2\u0e95\u0e96\3"+
		"\2\2\2\u0e96\u0e98\3\2\2\2\u0e97\u0e99\5\u0174\u00bb\2\u0e98\u0e97\3\2"+
		"\2\2\u0e98\u0e99\3\2\2\2\u0e99\u0e9c\3\2\2\2\u0e9a\u0e9b\7\u0205\2\2\u0e9b"+
		"\u0e9d\7\26\2\2\u0e9c\u0e9a\3\2\2\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u0ea0\3"+
		"\2\2\2\u0e9e\u0e9f\7\31\2\2\u0e9f\u0ea1\5\u016a\u00b6\2\u0ea0\u0e9e\3"+
		"\2\2\2\u0ea0\u0ea1\3\2\2\2\u0ea1\u0173\3\2\2\2\u0ea2\u0ea3\7\u00d3\2\2"+
		"\u0ea3\u0ea5\7\27\2\2\u0ea4\u0ea6\5\u040e\u0208\2\u0ea5\u0ea4\3\2\2\2"+
		"\u0ea5\u0ea6\3\2\2\2\u0ea6\u0eab\3\2\2\2\u0ea7\u0ea8\7\u017e\2\2\u0ea8"+
		"\u0ea9\7\u00d3\2\2\u0ea9\u0eab\7\27\2\2\u0eaa\u0ea2\3\2\2\2\u0eaa\u0ea7"+
		"\3\2\2\2\u0eab\u0175\3\2\2\2\u0eac\u0ead\t\7\2\2\u0ead\u0eae\7\u0205\2"+
		"\2\u0eae\u0eaf\7\u0162\2\2\u0eaf\u0177\3\2\2\2\u0eb0\u0eb2\7U\2\2\u0eb1"+
		"\u0eb3\5\u017a\u00be\2\u0eb2\u0eb1\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0eb4"+
		"\3\2\2\2\u0eb4\u0eb6\5\u017c\u00bf\2\u0eb5\u0eb7\5\u0182\u00c2\2\u0eb6"+
		"\u0eb5\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8\u0eb9\5\u0184"+
		"\u00c3\2\u0eb9\u0179\3\2\2\2\u0eba\u0ebb\5\u0438\u021d\2\u0ebb\u0ebc\7"+
		"\u011f\2\2\u0ebc\u0ebd\5\u0438\u021d\2\u0ebd\u017b\3\2\2\2\u0ebe\u0ec0"+
		"\7?\2\2\u0ebf\u0ec1\t\66\2\2\u0ec0\u0ebf\3\2\2\2\u0ec0\u0ec1\3\2\2\2\u0ec1"+
		"\u0ec2\3\2\2\2\u0ec2\u0ec3\7\u019e\2\2\u0ec3\u0ec4\5\u017e\u00c0\2\u0ec4"+
		"\u017d\3\2\2\2\u0ec5\u0ed1\5\u0180\u00c1\2\u0ec6\u0ec7\7\u02e8\2\2\u0ec7"+
		"\u0eca\5\u017e\u00c0\2\u0ec8\u0ec9\7\u02ee\2\2\u0ec9\u0ecb\5\u017e\u00c0"+
		"\2\u0eca\u0ec8\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc\u0eca\3\2\2\2\u0ecc\u0ecd"+
		"\3\2\2\2\u0ecd\u0ece\3\2\2\2\u0ece\u0ecf\7\u02e9\2\2\u0ecf\u0ed1\3\2\2"+
		"\2\u0ed0\u0ec5\3\2\2\2\u0ed0\u0ec6\3\2\2\2\u0ed1\u017f\3\2\2\2\u0ed2\u0ed3"+
		"\5\u043e\u0220\2\u0ed3\u0181\3\2\2\2\u0ed4\u0ed5\t\67\2\2\u0ed5\u0ed6"+
		"\7\u0198\2\2\u0ed6\u0edc\7\u0134\2\2\u0ed7\u0ed8\t\67\2\2\u0ed8\u0ed9"+
		"\7\u0198\2\2\u0ed9\u0eda\7}\2\2\u0eda\u0edc\7\u0162\2\2\u0edb\u0ed4\3"+
		"\2\2\2\u0edb\u0ed7\3\2\2\2\u0edc\u0183\3\2\2\2\u0edd\u0ede\7\u029c\2\2"+
		"\u0ede\u0edf\7\u014c\2\2\u0edf\u0ee0\7\u02b4\2\2\u0ee0\u0ee1\7\u02e8\2"+
		"\2\u0ee1\u0ee2\5\u0410\u0209\2\u0ee2\u0ee3\7\u02e9\2\2\u0ee3\u0ee8\3\2"+
		"\2\2\u0ee4\u0ee5\7\u029b\2\2\u0ee5\u0ee6\7\u014c\2\2\u0ee6\u0ee8\7\u02b4"+
		"\2\2\u0ee7\u0edd\3\2\2\2\u0ee7\u0ee4\3\2\2\2\u0ee8\u0185\3\2\2\2\u0ee9"+
		"\u0eeb\t\7\2\2\u0eea\u0eec\t!\2\2\u0eeb\u0eea\3\2\2\2\u0eeb\u0eec\3\2"+
		"\2\2\u0eec\u0ef3\3\2\2\2\u0eed\u0eee\7\u0276\2\2\u0eee\u0ef4\5\u043e\u0220"+
		"\2\u0eef\u0ef0\7\u01cd\2\2\u0ef0\u0ef4\7\u0122\2\2\u0ef1\u0ef2\7e\2\2"+
		"\u0ef2\u0ef4\5\u0400\u0201\2\u0ef3\u0eed\3\2\2\2\u0ef3\u0eef\3\2\2\2\u0ef3"+
		"\u0ef1\3\2\2\2\u0ef4\u0ef6\3\2\2\2\u0ef5\u0ef7\5\u00f0y\2\u0ef6\u0ef5"+
		"\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7\u0ef8\3\2\2\2\u0ef8\u0efa\5\u0146\u00a4"+
		"\2\u0ef9\u0efb\7E\2\2\u0efa\u0ef9\3\2\2\2\u0efa\u0efb\3\2\2\2\u0efb\u0eff"+
		"\3\2\2\2\u0efc\u0efd\7\u0121\2\2\u0efd\u0f00\7\u0100\2\2\u0efe\u0f00\7"+
		"\u00a4\2\2\u0eff\u0efc\3\2\2\2\u0eff\u0efe\3\2\2\2\u0eff\u0f00\3\2\2\2"+
		"\u0f00\u0187\3\2\2\2\u0f01\u0f09\5\u018a\u00c6\2\u0f02\u0f09\5\u0196\u00cc"+
		"\2\u0f03\u0f09\5\u018c\u00c7\2\u0f04\u0f09\5\u0198\u00cd\2\u0f05\u0f09"+
		"\5\u019c\u00cf\2\u0f06\u0f09\5\u019a\u00ce\2\u0f07\u0f09\5\u01b8\u00dd"+
		"\2\u0f08\u0f01\3\2\2\2\u0f08\u0f02\3\2\2\2\u0f08\u0f03\3\2\2\2\u0f08\u0f04"+
		"\3\2\2\2\u0f08\u0f05\3\2\2\2\u0f08\u0f06\3\2\2\2\u0f08\u0f07\3\2\2\2\u0f09"+
		"\u0189\3\2\2\2\u0f0a\u0f0b\7\u01af\2\2\u0f0b\u0f0c\7?\2\2\u0f0c\u0f0d"+
		"\7\u01db\2\2\u0f0d\u0f1f\5\u043e\u0220\2\u0f0e\u0f0f\7\u0114\2\2\u0f0f"+
		"\u0f10\7\u02e8\2\2\u0f10\u0f11\5\u0376\u01bc\2\u0f11\u0f12\7\u02e9\2\2"+
		"\u0f12\u0f13\7\u023e\2\2\u0f13\u0f14\7\u0107\2\2\u0f14\u0f15\7\u02e8\2"+
		"\2\u0f15\u0f1a\5\u041a\u020e\2\u0f16\u0f17\7\u02ee\2\2\u0f17\u0f19\5\u041a"+
		"\u020e\2\u0f18\u0f16\3\2\2\2\u0f19\u0f1c\3\2\2\2\u0f1a\u0f18\3\2\2\2\u0f1a"+
		"\u0f1b\3\2\2\2\u0f1b\u0f1d\3\2\2\2\u0f1c\u0f1a\3\2\2\2\u0f1d\u0f1e\7\u02e9"+
		"\2\2\u0f1e\u0f20\3\2\2\2\u0f1f\u0f0e\3\2\2\2\u0f1f\u0f20\3\2\2\2\u0f20"+
		"\u0f21\3\2\2\2\u0f21\u0f22\7\u02e8\2\2\u0f22\u0f24\7\u01af\2\2\u0f23\u0f25"+
		"\5\u041e\u0210\2\u0f24\u0f23\3\2\2\2\u0f24\u0f25\3\2\2\2\u0f25\u0f26\3"+
		"\2\2\2\u0f26\u0f27\5\u01ac\u00d7\2\u0f27\u0f28\5\u01aa\u00d6\2\u0f28\u0f29"+
		"\7\u02e9\2\2\u0f29\u018b\3\2\2\2\u0f2a\u0f2b\7\u01af\2\2\u0f2b\u0f2c\7"+
		"?\2\2\u0f2c\u0f2d\7\u00ec\2\2\u0f2d\u0f30\5\u043e\u0220\2\u0f2e\u0f31"+
		"\5\u00f6|\2\u0f2f\u0f31\5\u0136\u009c\2\u0f30\u0f2e\3\2\2\2\u0f30\u0f2f"+
		"\3\2\2\2\u0f31\u018d\3\2\2\2\u0f32\u0f43\5\u01bc\u00df\2\u0f33\u0f43\5"+
		"\u01c0\u00e1\2\u0f34\u0f37\5\u01c4\u00e3\2\u0f35\u0f37\5\u01c8\u00e5\2"+
		"\u0f36\u0f34\3\2\2\2\u0f36\u0f35\3\2\2\2\u0f37\u0f3e\3\2\2\2\u0f38\u0f39"+
		"\7\u02e8\2\2\u0f39\u0f3a\5\u0130\u0099\2\u0f3a\u0f3b\7\u02e9\2\2\u0f3b"+
		"\u0f3d\3\2\2\2\u0f3c\u0f38\3\2\2\2\u0f3d\u0f40\3\2\2\2\u0f3e\u0f3c\3\2"+
		"\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f43\3\2\2\2\u0f40\u0f3e\3\2\2\2\u0f41"+
		"\u0f43\5\u0190\u00c9\2\u0f42\u0f32\3\2\2\2\u0f42\u0f33\3\2\2\2\u0f42\u0f36"+
		"\3\2\2\2\u0f42\u0f41\3\2\2\2\u0f43\u018f\3\2\2\2\u0f44\u0f46\7\u02ae\2"+
		"\2\u0f45\u0f47\7X\2\2\u0f46\u0f45\3\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f48"+
		"\3\2\2\2\u0f48\u0f4a\5\u0484\u0243\2\u0f49\u0f4b\5\u0192\u00ca\2\u0f4a"+
		"\u0f49\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u0f4d\5\u0194"+
		"\u00cb\2\u0f4d\u0191\3\2\2\2\u0f4e\u0f67\7\u023f\2\2\u0f4f\u0f61\7\31"+
		"\2\2\u0f50\u0f51\7\u018f\2\2\u0f51\u0f62\7\u01e9\2\2\u0f52\u0f54\t$\2"+
		"\2\u0f53\u0f52\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54\u0f58\3\2\2\2\u0f55\u0f59"+
		"\7R\2\2\u0f56\u0f57\7\61\2\2\u0f57\u0f59\7\u02af\2\2\u0f58\u0f55\3\2\2"+
		"\2\u0f58\u0f56\3\2\2\2\u0f58\u0f59\3\2\2\2\u0f59\u0f5f\3\2\2\2\u0f5a\u0f5c"+
		"\5\u0422\u0212\2\u0f5b\u0f5d\5\u01cc\u00e7\2\u0f5c\u0f5b\3\2\2\2\u0f5c"+
		"\u0f5d\3\2\2\2\u0f5d\u0f60\3\2\2\2\u0f5e\u0f60\5\u01cc\u00e7\2\u0f5f\u0f5a"+
		"\3\2\2\2\u0f5f\u0f5e\3\2\2\2\u0f5f\u0f60\3\2\2\2\u0f60\u0f62\3\2\2\2\u0f61"+
		"\u0f50\3\2\2\2\u0f61\u0f53\3\2\2\2\u0f62\u0f68\3\2\2\2\u0f63\u0f64\7\16"+
		"\2\2\u0f64\u0f65\7\u028b\2\2\u0f65\u0f66\7\31\2\2\u0f66\u0f68\t8\2\2\u0f67"+
		"\u0f4f\3\2\2\2\u0f67\u0f63\3\2\2\2\u0f68\u0193\3\2\2\2\u0f69\u0f6a\7\u02ab"+
		"\2\2\u0f6a\u0f6c\7\u02e4\2\2\u0f6b\u0f69\3\2\2\2\u0f6b\u0f6c\3\2\2\2\u0f6c"+
		"\u0f6d\3\2\2\2\u0f6d\u0f72\7\u00ac\2\2\u0f6e\u0f73\5\u040c\u0207\2\u0f6f"+
		"\u0f70\7\u02e4\2\2\u0f70\u0f71\7\u0223\2\2\u0f71\u0f73\5\u040c\u0207\2"+
		"\u0f72\u0f6e\3\2\2\2\u0f72\u0f6f\3\2\2\2\u0f73\u0f79\3\2\2\2\u0f74\u0f75"+
		"\7\u023f\2\2\u0f75\u0f76\7\16\2\2\u0f76\u0f77\7\u028b\2\2\u0f77\u0f78"+
		"\7\31\2\2\u0f78\u0f7a\t8\2\2\u0f79\u0f74\3\2\2\2\u0f79\u0f7a\3\2\2\2\u0f7a"+
		"\u0f7d\3\2\2\2\u0f7b\u0f7c\t9\2\2\u0f7c\u0f7e\7\u017f\2\2\u0f7d\u0f7b"+
		"\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e\u0f81\3\2\2\2\u0f7f\u0f80\t9\2\2\u0f80"+
		"\u0f82\7\25\2\2\u0f81\u0f7f\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0195\3"+
		"\2\2\2\u0f83\u0f84\7\u01af\2\2\u0f84\u0f85\7?\2\2\u0f85\u0f86\7\u0133"+
		"\2\2\u0f86\u0f87\5\u043e\u0220\2\u0f87\u0f8f\7\u02e8\2\2\u0f88\u0f8a\7"+
		"\u01af\2\2\u0f89\u0f8b\5\u041e\u0210\2\u0f8a\u0f89\3\2\2\2\u0f8a\u0f8b"+
		"\3\2\2\2\u0f8b\u0f8c\3\2\2\2\u0f8c\u0f8d\5\u01ae\u00d8\2\u0f8d\u0f8e\5"+
		"\u01aa\u00d6\2\u0f8e\u0f90\3\2\2\2\u0f8f\u0f88\3\2\2\2\u0f90\u0f91\3\2"+
		"\2\2\u0f91\u0f8f\3\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93"+
		"\u0f94\7\u02e9\2\2\u0f94\u0197\3\2\2\2\u0f95\u0f96\7\u01af\2\2\u0f96\u0f97"+
		"\7?\2\2\u0f97\u0f98\7\u01db\2\2\u0f98\u0f99\5\u043e\u0220\2\u0f99\u0f9a"+
		"\7\u0114\2\2\u0f9a\u0f9b\7\u02e8\2\2\u0f9b\u0f9c\5\u0376\u01bc\2\u0f9c"+
		"\u0f9d\7\u02e9\2\2\u0f9d\u0f9e\7\u023f\2\2\u0f9e\u0f9f\7\u0107\2\2\u0f9f"+
		"\u0fa0\7\u02e8\2\2\u0fa0\u0fa5\5\u041a\u020e\2\u0fa1\u0fa2\7\u02ee\2\2"+
		"\u0fa2\u0fa4\5\u041a\u020e\2\u0fa3\u0fa1\3\2\2\2\u0fa4\u0fa7\3\2\2\2\u0fa5"+
		"\u0fa3\3\2\2\2\u0fa5\u0fa6\3\2\2\2\u0fa6\u0fa8\3\2\2\2\u0fa7\u0fa5\3\2"+
		"\2\2\u0fa8\u0fa9\7\u02e9\2\2\u0fa9\u0fad\3\2\2\2\u0faa\u0fae\5\u01b0\u00d9"+
		"\2\u0fab\u0fae\5\u01b2\u00da\2\u0fac\u0fae\5\u01b4\u00db\2\u0fad\u0faa"+
		"\3\2\2\2\u0fad\u0fab\3\2\2\2\u0fad\u0fac\3\2\2\2\u0fae\u0faf\3\2\2\2\u0faf"+
		"\u0fb0\7\u02e8\2\2\u0fb0\u0fb1\5\u019e\u00d0\2\u0fb1\u0fb2\7\u02e9\2\2"+
		"\u0fb2\u0199\3\2\2\2\u0fb3\u0fb4\7\u01af\2\2\u0fb4\u0fb5\7?\2\2\u0fb5"+
		"\u0fb6\7\u00ec\2\2\u0fb6\u0fba\5\u043e\u0220\2\u0fb7\u0fbb\5\u01b0\u00d9"+
		"\2\u0fb8\u0fbb\5\u01b2\u00da\2\u0fb9\u0fbb\5\u01b4\u00db\2\u0fba\u0fb7"+
		"\3\2\2\2\u0fba\u0fb8\3\2\2\2\u0fba\u0fb9\3\2\2\2\u0fbb\u0fbe\3\2\2\2\u0fbc"+
		"\u0fbf\5\u00f6|\2\u0fbd\u0fbf\5\u0100\u0081\2\u0fbe\u0fbc\3\2\2\2\u0fbe"+
		"\u0fbd\3\2\2\2\u0fbf\u019b\3\2\2\2\u0fc0\u0fc1\7\u01af\2\2\u0fc1\u0fc2"+
		"\7?\2\2\u0fc2\u0fc3\7\u0133\2\2\u0fc3\u0fc7\5\u043e\u0220\2\u0fc4\u0fc8"+
		"\5\u01b0\u00d9\2\u0fc5\u0fc8\5\u01b2\u00da\2\u0fc6\u0fc8\5\u01b4\u00db"+
		"\2\u0fc7\u0fc4\3\2\2\2\u0fc7\u0fc5\3\2\2\2\u0fc7\u0fc6\3\2\2\2\u0fc8\u0fc9"+
		"\3\2\2\2\u0fc9\u0fce\5\u01a0\u00d1\2\u0fca\u0fcb\7\u02ee\2\2\u0fcb\u0fcd"+
		"\5\u01a0\u00d1\2\u0fcc\u0fca\3\2\2\2\u0fcd\u0fd0\3\2\2\2\u0fce\u0fcc\3"+
		"\2\2\2\u0fce\u0fcf\3\2\2\2\u0fcf\u019d\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd1"+
		"\u0fd2\7\u01af\2\2\u0fd2\u0fd3\5\u041e\u0210\2\u0fd3\u0fd4\5\u01ac\u00d7"+
		"\2\u0fd4\u0ff1\5\u01aa\u00d6\2\u0fd5\u0fd6\7\u02e8\2\2\u0fd6\u0fdb\5\u01a2"+
		"\u00d2\2\u0fd7\u0fd8\7\u02ee\2\2\u0fd8\u0fda\5\u01a2\u00d2\2\u0fd9\u0fd7"+
		"\3\2\2\2\u0fda\u0fdd\3\2\2\2\u0fdb\u0fd9\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc"+
		"\u0ff2\3\2\2\2\u0fdd\u0fdb\3\2\2\2\u0fde\u0fe3\5\u01a4\u00d3\2\u0fdf\u0fe0"+
		"\7\u02ee\2\2\u0fe0\u0fe2\5\u01a4\u00d3\2\u0fe1\u0fdf\3\2\2\2\u0fe2\u0fe5"+
		"\3\2\2\2\u0fe3\u0fe1\3\2\2\2\u0fe3\u0fe4\3\2\2\2\u0fe4\u0ff2\3\2\2\2\u0fe5"+
		"\u0fe3\3\2\2\2\u0fe6\u0feb\5\u01a6\u00d4\2\u0fe7\u0fe8\7\u02ee\2\2\u0fe8"+
		"\u0fea\5\u01a6\u00d4\2\u0fe9\u0fe7\3\2\2\2\u0fea\u0fed\3\2\2\2\u0feb\u0fe9"+
		"\3\2\2\2\u0feb\u0fec\3\2\2\2\u0fec\u0fee\3\2\2\2\u0fed\u0feb\3\2\2\2\u0fee"+
		"\u0fef\7\u02e9\2\2\u0fef\u0ff2\3\2\2\2\u0ff0\u0ff2\5\u01a8\u00d5\2\u0ff1"+
		"\u0fd5\3\2\2\2\u0ff1\u0fde\3\2\2\2\u0ff1\u0fe6\3\2\2\2\u0ff1\u0ff0\3\2"+
		"\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u019f\3\2\2\2\u0ff3\u0ff4\7\u01af\2\2\u0ff4"+
		"\u0ff5\5\u041e\u0210\2\u0ff5\u0ff6\5\u01ae\u00d8\2\u0ff6\u1013\5\u01aa"+
		"\u00d6\2\u0ff7\u0ff8\7\u02e8\2\2\u0ff8\u0ffd\5\u01a2\u00d2\2\u0ff9\u0ffa"+
		"\7\u02ee\2\2\u0ffa\u0ffc\5\u01a2\u00d2\2\u0ffb\u0ff9\3\2\2\2\u0ffc\u0fff"+
		"\3\2\2\2\u0ffd\u0ffb\3\2\2\2\u0ffd\u0ffe\3\2\2\2\u0ffe\u1014\3\2\2\2\u0fff"+
		"\u0ffd\3\2\2\2\u1000\u1005\5\u01a4\u00d3\2\u1001\u1002\7\u02ee\2\2\u1002"+
		"\u1004\5\u01a4\u00d3\2\u1003\u1001\3\2\2\2\u1004\u1007\3\2\2\2\u1005\u1003"+
		"\3\2\2\2\u1005\u1006\3\2\2\2\u1006\u1014\3\2\2\2\u1007\u1005\3\2\2\2\u1008"+
		"\u100d\5\u01a6\u00d4\2\u1009\u100a\7\u02ee\2\2\u100a\u100c\5\u01a6\u00d4"+
		"\2\u100b\u1009\3\2\2\2\u100c\u100f\3\2\2\2\u100d\u100b\3\2\2\2\u100d\u100e"+
		"\3\2\2\2\u100e\u1010\3\2\2\2\u100f\u100d\3\2\2\2\u1010\u1011\7\u02e9\2"+
		"\2\u1011\u1014\3\2\2\2\u1012\u1014\5\u01a8\u00d5\2\u1013\u0ff7\3\2\2\2"+
		"\u1013\u1000\3\2\2\2\u1013\u1008\3\2\2\2\u1013\u1012\3\2\2\2\u1013\u1014"+
		"\3\2\2\2\u1014\u01a1\3\2\2\2\u1015\u1017\7\u0243\2\2\u1016\u1018\5\u0412"+
		"\u020a\2\u1017\u1016\3\2\2\2\u1017\u1018\3\2\2\2\u1018\u1019\3\2\2\2\u1019"+
		"\u101b\5\u01ac\u00d7\2\u101a\u101c\5\u0114\u008b\2\u101b\u101a\3\2\2\2"+
		"\u101b\u101c\3\2\2\2\u101c\u101e\3\2\2\2\u101d\u101f\5\u0116\u008c\2\u101e"+
		"\u101d\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u01a3\3\2\2\2\u1020\u1022\7\u0243"+
		"\2\2\u1021\u1023\5\u0412\u020a\2\u1022\u1021\3\2\2\2\u1022\u1023\3\2\2"+
		"\2\u1023\u1024\3\2\2\2\u1024\u1026\5\u01ae\u00d8\2\u1025\u1027\5\u0114"+
		"\u008b\2\u1026\u1025\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u1029\3\2\2\2\u1028"+
		"\u102a\5\u0116\u008c\2\u1029\u1028\3\2\2\2\u1029\u102a\3\2\2\2\u102a\u01a5"+
		"\3\2\2\2\u102b\u102d\7\u0243\2\2\u102c\u102e\5\u0412\u020a\2\u102d\u102c"+
		"\3\2\2\2\u102d\u102e\3\2\2\2\u102e\u1030\3\2\2\2\u102f\u1031\5\u0114\u008b"+
		"\2\u1030\u102f\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u1033\3\2\2\2\u1032\u1034"+
		"\5\u0116\u008c\2\u1033\u1032\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u01a7\3"+
		"\2\2\2\u1035\u1036\7\u0243\2\2\u1036\u1044\5\u0498\u024d\2\u1037\u1038"+
		"\7\u023f\2\2\u1038\u1039\7\u0107\2\2\u1039\u103a\7\u02e8\2\2\u103a\u103f"+
		"\5\u041a\u020e\2\u103b\u103c\7\u02ee\2\2\u103c\u103e\5\u041a\u020e\2\u103d"+
		"\u103b\3\2\2\2\u103e\u1041\3\2\2\2\u103f\u103d\3\2\2\2\u103f\u1040\3\2"+
		"\2\2\u1040\u1042\3\2\2\2\u1041\u103f\3\2\2\2\u1042\u1043\7\u02e9\2\2\u1043"+
		"\u1045\3\2\2\2\u1044\u1037\3\2\2\2\u1044\u1045\3\2\2\2\u1045\u01a9\3\2"+
		"\2\2\u1046\u1048\5\u01e4\u00f3\2\u1047\u1046\3\2\2\2\u1047\u1048\3\2\2"+
		"\2\u1048\u104a\3\2\2\2\u1049\u104b\5\u0114\u008b\2\u104a\u1049\3\2\2\2"+
		"\u104a\u104b\3\2\2\2\u104b\u104d\3\2\2\2\u104c\u104e\5\u00fa~\2\u104d"+
		"\u104c\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u1051\3\2\2\2\u104f\u1052\5\u0128"+
		"\u0095\2\u1050\u1052\5\u012c\u0097\2\u1051\u104f\3\2\2\2\u1051\u1050\3"+
		"\2\2\2\u1051\u1052\3\2\2\2\u1052\u1054\3\2\2\2\u1053\u1055\5\u011c\u008f"+
		"\2\u1054\u1053\3\2\2\2\u1054\u1055\3\2\2\2\u1055\u1057\3\2\2\2\u1056\u1058"+
		"\5\u01ea\u00f6\2\u1057\u1056\3\2\2\2\u1057\u1058\3\2\2\2\u1058\u105d\3"+
		"\2\2\2\u1059\u105b\7\u01a6\2\2\u105a\u105c\5\u00fa~\2\u105b\u105a\3\2"+
		"\2\2\u105b\u105c\3\2\2\2\u105c\u105e\3\2\2\2\u105d\u1059\3\2\2\2\u105d"+
		"\u105e\3\2\2\2\u105e\u1064\3\2\2\2\u105f\u1063\5\u01c8\u00e5\2\u1060\u1063"+
		"\5\u01c4\u00e3\2\u1061\u1063\5\u01c0\u00e1\2\u1062\u105f\3\2\2\2\u1062"+
		"\u1060\3\2\2\2\u1062\u1061\3\2\2\2\u1063\u1066\3\2\2\2\u1064\u1062\3\2"+
		"\2\2\u1064\u1065\3\2\2\2\u1065\u01ab\3\2\2\2\u1066\u1064\3\2\2\2\u1067"+
		"\u1068\7\u0286\2\2\u1068\u1069\7\u0128\2\2\u1069\u106a\7\u0258\2\2\u106a"+
		"\u1074\7\u02e8\2\2\u106b\u1070\5\u045c\u022f\2\u106c\u106d\7\u02ee\2\2"+
		"\u106d\u106f\5\u045c\u022f\2\u106e\u106c\3\2\2\2\u106f\u1072\3\2\2\2\u1070"+
		"\u106e\3\2\2\2\u1070\u1071\3\2\2\2\u1071\u1075\3\2\2\2\u1072\u1070\3\2"+
		"\2\2\u1073\u1075\7\u014e\2\2\u1074\u106b\3\2\2\2\u1074\u1073\3\2\2\2\u1075"+
		"\u1076\3\2\2\2\u1076\u1077\7\u02e9\2\2\u1077\u01ad\3\2\2\2\u1078\u1079"+
		"\7\u0286\2\2\u1079\u1083\7\u02e8\2\2\u107a\u107f\5\u045c\u022f\2\u107b"+
		"\u107c\7\u02ee\2\2\u107c\u107e\5\u045c\u022f\2\u107d\u107b\3\2\2\2\u107e"+
		"\u1081\3\2\2\2\u107f\u107d\3\2\2\2\u107f\u1080\3\2\2\2\u1080\u1084\3\2"+
		"\2\2\u1081\u107f\3\2\2\2\u1082\u1084\7\u018a\2\2\u1083\u107a\3\2\2\2\u1083"+
		"\u1082\3\2\2\2\u1084\u1088\3\2\2\2\u1085\u1086\7\u008e\2\2\u1086\u1088"+
		"\7\u02e9\2\2\u1087\u1078\3\2\2\2\u1087\u1085\3\2\2\2\u1088\u01af\3\2\2"+
		"\2\u1089\u108a\7\u0243\2\2\u108a\u108b\7?\2\2\u108b\u108c\7\u01db\2\2"+
		"\u108c\u108d\5\u043e\u0220\2\u108d\u108e\5\u01b6\u00dc\2\u108e\u01b1\3"+
		"\2\2\2\u108f\u1090\7\u0243\2\2\u1090\u1091\7?\2\2\u1091\u1092\7\u0133"+
		"\2\2\u1092\u1093\5\u043e\u0220\2\u1093\u1094\5\u01b6\u00dc\2\u1094\u01b3"+
		"\3\2\2\2\u1095\u1096\7\u0243\2\2\u1096\u1097\7?\2\2\u1097\u1098\7\u00ec"+
		"\2\2\u1098\u1099\5\u043e\u0220\2\u1099\u109a\7\u0242\2\2\u109a\u109b\5"+
		"\u0498\u024d\2\u109b\u109c\7\u023f\2\2\u109c\u109d\7\u0107\2\2\u109d\u109e"+
		"\7\u02e8\2\2\u109e\u10a3\5\u041a\u020e\2\u109f\u10a0\7\u02ee\2\2\u10a0"+
		"\u10a2\5\u041a\u020e\2\u10a1\u109f\3\2\2\2\u10a2\u10a5\3\2\2\2\u10a3\u10a1"+
		"\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4\u10a6\3\2\2\2\u10a5\u10a3\3\2\2\2\u10a6"+
		"\u10a7\7\u02e9\2\2\u10a7\u10a8\3\2\2\2\u10a8\u10a9\5\u01b6\u00dc\2\u10a9"+
		"\u01b5\3\2\2\2\u10aa\u10ab\7\u0243\2\2\u10ab\u10c8\7\u0256\2\2\u10ac\u10ad"+
		"\7\u02e8\2\2\u10ad\u10b2\5\u01a2\u00d2\2\u10ae\u10af\7\u02ee\2\2\u10af"+
		"\u10b1\5\u01a2\u00d2\2\u10b0\u10ae\3\2\2\2\u10b1\u10b4\3\2\2\2\u10b2\u10b0"+
		"\3\2\2\2\u10b2\u10b3\3\2\2\2\u10b3\u10c9\3\2\2\2\u10b4\u10b2\3\2\2\2\u10b5"+
		"\u10ba\5\u01a4\u00d3\2\u10b6\u10b7\7\u02ee\2\2\u10b7\u10b9\5\u01a4\u00d3"+
		"\2\u10b8\u10b6\3\2\2\2\u10b9\u10bc\3\2\2\2\u10ba\u10b8\3\2\2\2\u10ba\u10bb"+
		"\3\2\2\2\u10bb\u10c9\3\2\2\2\u10bc\u10ba\3\2\2\2\u10bd\u10c2\5\u01a6\u00d4"+
		"\2\u10be\u10bf\7\u02ee\2\2\u10bf\u10c1\5\u01a6\u00d4\2\u10c0\u10be\3\2"+
		"\2\2\u10c1\u10c4\3\2\2\2\u10c2\u10c0\3\2\2\2\u10c2\u10c3\3\2\2\2\u10c3"+
		"\u10c5\3\2\2\2\u10c4\u10c2\3\2\2\2\u10c5\u10c6\7\u02e9\2\2\u10c6\u10c9"+
		"\3\2\2\2\u10c7\u10c9\5\u0136\u009c\2\u10c8\u10ac\3\2\2\2\u10c8\u10b5\3"+
		"\2\2\2\u10c8\u10bd\3\2\2\2\u10c8\u10c7\3\2\2\2\u10c9\u01b7\3\2\2\2\u10ca"+
		"\u10cb\7\u01af\2\2\u10cb\u10cc\7?\2\2\u10cc\u10cd\7\u01e3\2\2\u10cd\u10ce"+
		"\7\u02e8\2\2\u10ce\u10cf\5\u00e8u\2\u10cf\u10d8\7\u02e9\2\2\u10d0\u10d1"+
		"\7\u02e8\2\2\u10d1\u10d4\5\u01ba\u00de\2\u10d2\u10d3\7\u02ee\2\2\u10d3"+
		"\u10d5\5\u01ba\u00de\2\u10d4\u10d2\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u10d6"+
		"\3\2\2\2\u10d6\u10d7\7\u02e9\2\2\u10d7\u10d9\3\2\2\2\u10d8\u10d0\3\2\2"+
		"\2\u10d8\u10d9\3\2\2\2\u10d9\u01b9\3\2\2\2\u10da\u10db\7\u01af\2\2\u10db"+
		"\u10dc\7?\2\2\u10dc\u10e6\7\u0251\2\2\u10dd\u10de\7\u01b0\2\2\u10de\u10e7"+
		"\5\u0498\u024d\2\u10df\u10e2\5\u01ba\u00de\2\u10e0\u10e1\7\u02ee\2\2\u10e1"+
		"\u10e3\5\u01ba\u00de\2\u10e2\u10e0\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e2"+
		"\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u10e7\3\2\2\2\u10e6\u10dd\3\2\2\2\u10e6"+
		"\u10df\3\2\2\2\u10e6\u10e7\3\2\2\2\u10e7\u01bb\3\2\2\2\u10e8\u10e9\7X"+
		"\2\2\u10e9\u10ea\5\u0484\u0243\2\u10ea\u10eb\5\u01be\u00e0\2\u10eb\u01bd"+
		"\3\2\2\2\u10ec\u10ee\7\u00ac\2\2\u10ed\u10ec\3\2\2\2\u10ed\u10ee\3\2\2"+
		"\2\u10ee\u10ef\3\2\2\2\u10ef\u10f0\7\u011a\2\2\u10f0\u10f2\7\u0192\2\2"+
		"\u10f1\u10f3\7\u0270\2\2\u10f2\u10f1\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3"+
		"\u10f4\3\2\2\2\u10f4\u10f5\7\u02e8\2\2\u10f5\u10f6\7\u0197\2\2\u10f6\u10f7"+
		"\5\u048a\u0246\2\u10f7\u10f8\7\u02e9\2\2\u10f8\u1101\3\2\2\2\u10f9\u10fb"+
		"\7\u0187\2\2\u10fa\u10f9\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10fc\3\2\2"+
		"\2\u10fc\u10fd\7\u0244\2\2\u10fd\u10fe\7\34\2\2\u10fe\u10ff\7\16\2\2\u10ff"+
		"\u1101\7\u012a\2\2\u1100\u10ed\3\2\2\2\u1100\u10fa\3\2\2\2\u1101\u01bf"+
		"\3\2\2\2\u1102\u1103\7\u016c\2\2\u1103\u1107\7\u0254\2\2\u1104\u1108\5"+
		"\u0434\u021b\2\u1105\u1106\7X\2\2\u1106\u1108\7\u0287\2\2\u1107\u1104"+
		"\3\2\2\2\u1107\u1105\3\2\2\2\u1108\u110a\3\2\2\2\u1109\u110b\5\u01be\u00e0"+
		"\2\u110a\u1109\3\2\2\2\u110a\u110b\3\2\2\2\u110b\u110e\3\2\2\2\u110c\u110d"+
		"\7\u0137\2\2\u110d\u110f\7\u00e4\2\2\u110e\u110c\3\2\2\2\u110e\u110f\3"+
		"\2\2\2\u110f\u1110\3\2\2\2\u1110\u1111\7\u023f\2\2\u1111\u1112\7\31\2"+
		"\2\u1112\u1120\5\u0438\u021d\2\u1113\u111a\7\u02e8\2\2\u1114\u1115\7\u02e8"+
		"\2\2\u1115\u1116\5\u01c2\u00e2\2\u1116\u1117\7\u02e9\2\2\u1117\u111b\3"+
		"\2\2\2\u1118\u111b\5\u01d6\u00ec\2\u1119\u111b\5\u018e\u00c8\2\u111a\u1114"+
		"\3\2\2\2\u111a\u1118\3\2\2\2\u111a\u1119\3\2\2\2\u111b\u111c\3\2\2\2\u111c"+
		"\u111a\3\2\2\2\u111c\u111d\3\2\2\2\u111d\u111e\3\2\2\2\u111e\u111f\7\u02e9"+
		"\2\2\u111f\u1121\3\2\2\2\u1120\u1113\3\2\2\2\u1120\u1121\3\2\2\2\u1121"+
		"\u1122\3\2\2\2\u1122\u1123\7\u01f9\2\2\u1123\u1124\7\31\2\2\u1124\u1125"+
		"\t:\2\2\u1125\u01c1\3\2\2\2\u1126\u1129\5\u0484\u0243\2\u1127\u1129\5"+
		"\u046e\u0238\2\u1128\u1126\3\2\2\2\u1128\u1127\3\2\2\2\u1129\u112c\3\2"+
		"\2\2\u112a\u112b\7\u008e\2\2\u112b\u112d\5\u0376\u01bc\2\u112c\u112a\3"+
		"\2\2\2\u112c\u112d\3\2\2\2\u112d\u1134\3\2\2\2\u112e\u1130\5\u00eav\2"+
		"\u112f\u112e\3\2\2\2\u1130\u1131\3\2\2\2\u1131\u112f\3\2\2\2\u1131\u1132"+
		"\3\2\2\2\u1132\u1135\3\2\2\2\u1133\u1135\5\u020e\u0108\2\u1134\u112f\3"+
		"\2\2\2\u1134\u1133\3\2\2\2\u1134\u1135\3\2\2\2\u1135\u113c\3\2\2\2\u1136"+
		"\u113a\5\u00ecw\2\u1137\u113a\5\u0210\u0109\2\u1138\u113a\5\u01fc\u00ff"+
		"\2\u1139\u1136\3\2\2\2\u1139\u1137\3\2\2\2\u1139\u1138\3\2\2\2\u113a\u113c"+
		"\3\2\2\2\u113b\u1128\3\2\2\2\u113b\u1139\3\2\2\2\u113c\u01c3\3\2\2\2\u113d"+
		"\u113e\7\u028c\2\2\u113e\u1144\5\u0138\u009d\2\u113f\u1141\5\u01be\u00e0"+
		"\2\u1140\u113f\3\2\2\2\u1140\u1141\3\2\2\2\u1141\u1142\3\2\2\2\u1142\u1145"+
		"\5\u01c6\u00e4\2\u1143\u1145\5\u01be\u00e0\2\u1144\u1140\3\2\2\2\u1144"+
		"\u1143\3\2\2\2\u1145\u01c5\3\2\2\2\u1146\u1147\7\u023f\2\2\u1147\u1149"+
		"\7\31\2\2\u1148\u114a\t$\2\2\u1149\u1148\3\2\2\2\u1149\u114a\3\2\2\2\u114a"+
		"\u114b\3\2\2\2\u114b\u1154\7\u0135\2\2\u114c\u114e\5\u0422\u0212\2\u114d"+
		"\u114c\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u114f\3\2\2\2\u114f\u1150\7\u02e8"+
		"\2\2\u1150\u1151\5\u01ca\u00e6\2\u1151\u1152\7\u02e9\2\2\u1152\u1155\3"+
		"\2\2\2\u1153\u1155\5\u01ca\u00e6\2\u1154\u114d\3\2\2\2\u1154\u1153\3\2"+
		"\2\2\u1155\u01c7\3\2\2\2\u1156\u117e\7\u0135\2\2\u1157\u1158\7\u02e8\2"+
		"\2\u1158\u115d\5\u0414\u020b\2\u1159\u115a\7\u02ee\2\2\u115a\u115c\5\u0414"+
		"\u020b\2\u115b\u1159\3\2\2\2\u115c\u115f\3\2\2\2\u115d\u115b\3\2\2\2\u115d"+
		"\u115e\3\2\2\2\u115e\u1160\3\2\2\2\u115f\u115d\3\2\2\2\u1160\u1161\7\u02e9"+
		"\2\2\u1161\u1162\7\u023f\2\2\u1162\u1168\7\31\2\2\u1163\u1169\t$\2\2\u1164"+
		"\u1165\7\u02e8\2\2\u1165\u1166\5\u01ca\u00e6\2\u1166\u1167\7\u02e9\2\2"+
		"\u1167\u1169\3\2\2\2\u1168\u1163\3\2\2\2\u1168\u1164\3\2\2\2\u1169\u117f"+
		"\3\2\2\2\u116a\u116b\7\u02e8\2\2\u116b\u1170\5\u0414\u020b\2\u116c\u116d"+
		"\7\u02ee\2\2\u116d\u116f\5\u0414\u020b\2\u116e\u116c\3\2\2\2\u116f\u1172"+
		"\3\2\2\2\u1170\u116e\3\2\2\2\u1170\u1171\3\2\2\2\u1171\u1173\3\2\2\2\u1172"+
		"\u1170\3\2\2\2\u1173\u1174\7\u02e9\2\2\u1174\u1175\7\u023f\2\2\u1175\u117c"+
		"\7\31\2\2\u1176\u117d\t$\2\2\u1177\u117d\5\u0422\u0212\2\u1178\u1179\7"+
		"\u02e8\2\2\u1179\u117a\5\u01ca\u00e6\2\u117a\u117b\7\u02e9\2\2\u117b\u117d"+
		"\3\2\2\2\u117c\u1176\3\2\2\2\u117c\u1177\3\2\2\2\u117c\u1178\3\2\2\2\u117d"+
		"\u117f\3\2\2\2\u117e\u1157\3\2\2\2\u117e\u116a\3\2\2\2\u117f\u01c9\3\2"+
		"\2\2\u1180\u118a\5\u01e6\u00f4\2\u1181\u1183\5\u01ce\u00e8\2\u1182\u1181"+
		"\3\2\2\2\u1183\u1184\3\2\2\2\u1184\u1182\3\2\2\2\u1184\u1185\3\2\2\2\u1185"+
		"\u1187\3\2\2\2\u1186\u1188\5\u01f4\u00fb\2\u1187\u1186\3\2\2\2\u1187\u1188"+
		"\3\2\2\2\u1188\u118a\3\2\2\2\u1189\u1180\3\2\2\2\u1189\u1182\3\2\2\2\u118a"+
		"\u118d\3\2\2\2\u118b\u118d\5\u01f4\u00fb\2\u118c\u1189\3\2\2\2\u118c\u118b"+
		"\3\2\2\2\u118d\u01cb\3\2\2\2\u118e\u118f\7\u02e8\2\2\u118f\u1190\5\u01ce"+
		"\u00e8\2\u1190\u1191\7\u02e9\2\2\u1191\u01cd\3\2\2\2\u1192\u1193\t\7\2"+
		"\2\u1193\u1194\7\u023e\2\2\u1194\u1195\7\u0107\2\2\u1195\u11ac\7\u0205"+
		"\2\2\u1196\u1197\7O\2\2\u1197\u11ac\5\u0498\u024d\2\u1198\u1199\7\u01b8"+
		"\2\2\u1199\u11ac\5\u0498\u024d\2\u119a\u119b\7\u00df\2\2\u119b\u11ac\5"+
		"\u0498\u024d\2\u119c\u11ac\5\u01d0\u00e9\2\u119d\u11ac\5\u01d2\u00ea\2"+
		"\u119e\u11ac\5\u01d4\u00eb\2\u119f\u11a0\7\u00b2\2\2\u11a0\u11a3\5\u020c"+
		"\u0107\2\u11a1\u11a3\7\u008c\2\2\u11a2\u119f\3\2\2\2\u11a2\u11a1\3\2\2"+
		"\2\u11a3\u11ac\3\2\2\2\u11a4\u11a9\7A\2\2\u11a5\u11a9\7\u0170\2\2\u11a6"+
		"\u11a7\7A\2\2\u11a7\u11a9\7\u01de\2\2\u11a8\u11a4\3\2\2\2\u11a8\u11a5"+
		"\3\2\2\2\u11a8\u11a6\3\2\2\2\u11a9\u11aa\3\2\2\2\u11aa\u11ac\5\u014e\u00a8"+
		"\2\u11ab\u1192\3\2\2\2\u11ab\u1196\3\2\2\2\u11ab\u1198\3\2\2\2\u11ab\u119a"+
		"\3\2\2\2\u11ab\u119c\3\2\2\2\u11ab\u119d\3\2\2\2\u11ab\u119e\3\2\2\2\u11ab"+
		"\u11a2\3\2\2\2\u11ab\u11a8\3\2\2\2\u11ac\u01cf\3\2\2\2\u11ad\u11b3\7\u01f7"+
		"\2\2\u11ae\u11b4\7\u02c9\2\2\u11af\u11b0\7\u02cb\2\2\u11b0\u11b4\5\u0498"+
		"\u024d\2\u11b1\u11b4\7#\2\2\u11b2\u11b4\7\u017d\2\2\u11b3\u11ae\3\2\2"+
		"\2\u11b3\u11af\3\2\2\2\u11b3\u11b1\3\2\2\2\u11b3\u11b2\3\2\2\2\u11b3\u11b4"+
		"\3\2\2\2\u11b4\u01d1\3\2\2\2\u11b5\u11b6\t;\2\2\u11b6\u01d3\3\2\2\2\u11b7"+
		"\u11b9\7`\2\2\u11b8\u11ba\t<\2\2\u11b9\u11b8\3\2\2\2\u11b9\u11ba\3\2\2"+
		"\2\u11ba\u11bd\3\2\2\2\u11bb\u11bd\7\u0171\2\2\u11bc\u11b7\3\2\2\2\u11bc"+
		"\u11bb\3\2\2\2\u11bd\u01d5\3\2\2\2\u11be\u11c0\5\u01e4\u00f3\2\u11bf\u11be"+
		"\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1\u11c3\5\u00fa~"+
		"\2\u11c2\u11c4\5\u0128\u0095\2\u11c3\u11c2\3\2\2\2\u11c3\u11c4\3\2\2\2"+
		"\u11c4\u11c6\3\2\2\2\u11c5\u11c7\5\u0118\u008d\2\u11c6\u11c5\3\2\2\2\u11c6"+
		"\u11c7\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11c9\5\u01ea\u00f6\2\u11c9\u11e5"+
		"\3\2\2\2\u11ca\u11cc\5\u01e4\u00f3\2\u11cb\u11ca\3\2\2\2\u11cb\u11cc\3"+
		"\2\2\2\u11cc\u11cd\3\2\2\2\u11cd\u11e2\7\u01a0\2\2\u11ce\u11d0\7\u00ee"+
		"\2\2\u11cf\u11d1\5\u00fa~\2\u11d0\u11cf\3\2\2\2\u11d0\u11d1\3\2\2\2\u11d1"+
		"\u11d3\3\2\2\2\u11d2\u11d4\5\u0128\u0095\2\u11d3\u11d2\3\2\2\2\u11d3\u11d4"+
		"\3\2\2\2\u11d4\u11d6\3\2\2\2\u11d5\u11d7\5\u0118\u008d\2\u11d6\u11d5\3"+
		"\2\2\2\u11d6\u11d7\3\2\2\2\u11d7\u11d9\3\2\2\2\u11d8\u11da\5\u01ea\u00f6"+
		"\2\u11d9\u11d8\3\2\2\2\u11d9\u11da\3\2\2\2\u11da\u11e3\3\2\2\2\u11db\u11dd"+
		"\7\u0100\2\2\u11dc\u11de\5\u00fa~\2\u11dd\u11dc\3\2\2\2\u11dd\u11de\3"+
		"\2\2\2\u11de\u11df\3\2\2\2\u11df\u11e3\5\u01de\u00f0\2\u11e0\u11e1\7\u00c9"+
		"\2\2\u11e1\u11e3\5\u01d8\u00ed\2\u11e2\u11ce\3\2\2\2\u11e2\u11db\3\2\2"+
		"\2\u11e2\u11e0\3\2\2\2\u11e3\u11e5\3\2\2\2\u11e4\u11bf\3\2\2\2\u11e4\u11cb"+
		"\3\2\2\2\u11e5\u01d7\3\2\2\2\u11e6\u11e8\7\u02e8\2\2\u11e7\u11e9\7\u0270"+
		"\2\2\u11e8\u11e7\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea"+
		"\u11eb\5\u01da\u00ee\2\u11eb\u11f2\7\u02e9\2\2\u11ec\u11ed\7\u01e8\2\2"+
		"\u11ed\u11f0\7\u0130\2\2\u11ee\u11f1\5\u0498\u024d\2\u11ef\u11f1\7\u0277"+
		"\2\2\u11f0\u11ee\3\2\2\2\u11f0\u11ef\3\2\2\2\u11f1\u11f3\3\2\2\2\u11f2"+
		"\u11ec\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3\u01d9\3\2\2\2\u11f4\u11f5\7\u008e"+
		"\2\2\u11f5\u11f6\7\u009a\2\2\u11f6\u11f7\5\u0426\u0214\2\u11f7\u11f8\7"+
		"\3\2\2\u11f8\u11fe\7\u01ac\2\2\u11f9\u11fa\7\u02e8\2\2\u11fa\u11ff\7\u02e9"+
		"\2\2\u11fb\u11fc\7\u0284\2\2\u11fc\u11fd\7R\2\2\u11fd\u11ff\5\u016a\u00b6"+
		"\2\u11fe\u11f9\3\2\2\2\u11fe\u11fb\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u1201"+
		"\7\u0138\2\2\u1201\u1202\7\u02e8\2\2\u1202\u1205\5\u01dc\u00ef\2\u1203"+
		"\u1204\7\u02ee\2\2\u1204\u1206\5\u01dc\u00ef\2\u1205\u1203\3\2\2\2\u1206"+
		"\u1207\3\2\2\2\u1207\u1205\3\2\2\2\u1207\u1208\3\2\2\2\u1208\u1209\3\2"+
		"\2\2\u1209\u120a\7\u02e9\2\2\u120a\u01db\3\2\2\2\u120b\u120d\5\u0426\u0214"+
		"\2\u120c\u120b\3\2\2\2\u120c\u120d\3\2\2\2\u120d\u120e\3\2\2\2\u120e\u1210"+
		"\7\u02f9\2\2\u120f\u120c\3\2\2\2\u120f\u1210\3\2\2\2\u1210\u1211\3\2\2"+
		"\2\u1211\u1212\7\u02e4\2\2\u1212\u01dd\3\2\2\2\u1213\u1218\5\u01e0\u00f1"+
		"\2\u1214\u1215\7\u01b6\2\2\u1215\u1218\5\u0498\u024d\2\u1216\u1218\5\u012c"+
		"\u0097\2\u1217\u1213\3\2\2\2\u1217\u1214\3\2\2\2\u1217\u1216\3\2\2\2\u1217"+
		"\u1218\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u121a\5\u01e2\u00f2\2\u121a\u01df"+
		"\3\2\2\2\u121b\u121c\7\u014a\2\2\u121c\u121f\7\u0254\2\2\u121d\u121f\7"+
		"\u0179\2\2\u121e\u121b\3\2\2\2\u121e\u121d\3\2\2\2\u121f\u01e1\3\2\2\2"+
		"\u1220\u1221\7\u00fc\2\2\u1221\u1223\5\u0484\u0243\2\u1222\u1220\3\2\2"+
		"\2\u1222\u1223\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u1226\7\u01a6\2\2\u1225"+
		"\u1227\5\u00fa~\2\u1226\u1225\3\2\2\2\u1226\u1227\3\2\2\2\u1227\u01e3"+
		"\3\2\2\2\u1228\u1229\7\u0215\2\2\u1229\u122a\7s\2\2\u122a\u122b\t\37\2"+
		"\2\u122b\u01e5\3\2\2\2\u122c\u122d\7\u0252\2\2\u122d\u122e\5\u041a\u020e"+
		"\2\u122e\u01e7\3\2\2\2\u122f\u1230\7\u023f\2\2\u1230\u1231\7\u0107\2\2"+
		"\u1231\u1232\7\u02e8\2\2\u1232\u1237\5\u041a\u020e\2\u1233\u1234\7\u02ee"+
		"\2\2\u1234\u1236\5\u041a\u020e\2\u1235\u1233\3\2\2\2\u1236\u1239\3\2\2"+
		"\2\u1237\u1235\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u123a\3\2\2\2\u1239\u1237"+
		"\3\2\2\2\u123a\u123b\7\u02e9\2\2\u123b\u01e9\3\2\2\2\u123c\u123d\7\u00f9"+
		"\2\2\u123d\u123e\7\5\2\2\u123e\u123f\7\u01c5\2\2\u123f\u124c\5\u01ec\u00f7"+
		"\2\u1240\u1241\t=\2\2\u1241\u1242\7\u01c5\2\2\u1242\u124c\5\u0424\u0213"+
		"\2\u1243\u1244\7\u0094\2\2\u1244\u124a\7\16\2\2\u1245\u1246\7\u00b0\2"+
		"\2\u1246\u124a\7\16\2\2\u1247\u1248\7\u009b\2\2\u1248\u124a\7\16\2\2\u1249"+
		"\u1243\3\2\2\2\u1249\u1245\3\2\2\2\u1249\u1247\3\2\2\2\u124a\u124c\3\2"+
		"\2\2\u124b\u123c\3\2\2\2\u124b\u1240\3\2\2\2\u124b\u1249\3\2\2\2\u124c"+
		"\u01eb\3\2\2\2\u124d\u1250\5\u01ee\u00f8\2\u124e\u1250\5\u01f0\u00f9\2"+
		"\u124f\u124d\3\2\2\2\u124f\u124e\3\2\2\2\u1250\u01ed\3\2\2\2\u1251\u1252"+
		"\5\u0128\u0095\2\u1252\u125f\t>\2\2\u1253\u1254\7\n\2\2\u1254\u1255\5"+
		"\u01f2\u00fa\2\u1255\u125b\7\u0192\2\2\u1256\u1257\7\u017e\2\2\u1257\u125c"+
		"\7\3\2\2\u1258\u1259\7\u017e\2\2\u1259\u125c\7\u015e\2\2\u125a\u125c\7"+
		"s\2\2\u125b\u1256\3\2\2\2\u125b\u1258\3\2\2\2\u125b\u125a\3\2\2\2\u125c"+
		"\u1260\3\2\2\2\u125d\u125e\7\u0198\2\2\u125e\u1260\5\u042e\u0218\2\u125f"+
		"\u1253\3\2\2\2\u125f\u125d\3\2\2\2\u1260\u126d\3\2\2\2\u1261\u1262\7\u0205"+
		"\2\2\u1262\u1263\7\u023f\2\2\u1263\u1264\7`\2\2\u1264\u1265\7\b\2\2\u1265"+
		"\u1266\7\u0205\2\2\u1266\u1267\7\n\2\2\u1267\u1268\5\u01f2\u00fa\2\u1268"+
		"\u1269\7\u0192\2\2\u1269\u126a\7\u017e\2\2\u126a\u126b\7\u015e\2\2\u126b"+
		"\u126d\3\2\2\2\u126c\u1251\3\2\2\2\u126c\u1261\3\2\2\2\u126d\u01ef\3\2"+
		"\2\2\u126e\u126f\7\u025c\2\2\u126f\u1270\7\u0266\2\2\u1270\u1272\5\u041a"+
		"\u020e\2\u1271\u1273\t>\2\2\u1272\u1271\3\2\2\2\u1272\u1273\3\2\2\2\u1273"+
		"\u1274\3\2\2\2\u1274\u1275\7\u0198\2\2\u1275\u1276\5\u042e\u0218\2\u1276"+
		"\u128e\3\2\2\2\u1277\u1278\7\u025c\2\2\u1278\u1279\7\u0266\2\2\u1279\u127a"+
		"\5\u041a\u020e\2\u127a\u127b\7\u01dd\2\2\u127b\u127d\7\u0197\2\2\u127c"+
		"\u127e\t>\2\2\u127d\u127c\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u128b\3\2"+
		"\2\2\u127f\u1280\7\n\2\2\u1280\u1281\5\u01f2\u00fa\2\u1281\u1287\7\u0192"+
		"\2\2\u1282\u1283\7\u017e\2\2\u1283\u1288\7\3\2\2\u1284\u1285\7\u017e\2"+
		"\2\u1285\u1288\7\u015e\2\2\u1286\u1288\7s\2\2\u1287\u1282\3\2\2\2\u1287"+
		"\u1284\3\2\2\2\u1287\u1286\3\2\2\2\u1288\u128c\3\2\2\2\u1289\u128a\7\u0198"+
		"\2\2\u128a\u128c\5\u042e\u0218\2\u128b\u127f\3\2\2\2\u128b\u1289\3\2\2"+
		"\2\u128c\u128e\3\2\2\2\u128d\u126e\3\2\2\2\u128d\u1277\3\2\2\2\u128e\u01f1"+
		"\3\2\2\2\u128f\u1290\5\u0498\u024d\2\u1290\u1291\t?\2\2\u1291\u01f3\3"+
		"\2\2\2\u1292\u1293\7\u023e\2\2\u1293\u12ab\7\u02e8\2\2\u1294\u1295\7\u0108"+
		"\2\2\u1295\u12ac\5\u0212\u010a\2\u1296\u1297\7\u016e\2\2\u1297\u12ac\5"+
		"\u0212\u010a\2\u1298\u1299\7\u0155\2\2\u1299\u12ac\t@\2\2\u129a\u129b"+
		"\7\u01b5\2\2\u129b\u12ac\7\u02e2\2\2\u129c\u129d\7\u00de\2\2\u129d\u12ac"+
		"\7\u02e2\2\2\u129e\u129f\7\u00dd\2\2\u129f\u12a0\7\u00ea\2\2\u12a0\u12ac"+
		"\7\u02e2\2\2\u12a1\u12a4\7\u019b\2\2\u12a2\u12a5\5\u0212\u010a\2\u12a3"+
		"\u12a5\7\u018a\2\2\u12a4\u12a2\3\2\2\2\u12a4\u12a3\3\2\2\2\u12a5\u12ac"+
		"\3\2\2\2\u12a6\u12a7\7<\2\2\u12a7\u12ac\tA\2\2\u12a8\u12a9\7\u00d4\2\2"+
		"\u12a9\u12ac\tB\2\2\u12aa\u12ac\7\u00b2\2\2\u12ab\u1294\3\2\2\2\u12ab"+
		"\u1296\3\2\2\2\u12ab\u1298\3\2\2\2\u12ab\u129a\3\2\2\2\u12ab\u129c\3\2"+
		"\2\2\u12ab\u129e\3\2\2\2\u12ab\u12a1\3\2\2\2\u12ab\u12a6\3\2\2\2\u12ab"+
		"\u12a8\3\2\2\2\u12ab\u12aa\3\2\2\2\u12ac\u12ad\3\2\2\2\u12ad\u12ab\3\2"+
		"\2\2\u12ad\u12ae\3\2\2\2\u12ae\u12af\3\2\2\2\u12af\u12b0\7\u02e9\2\2\u12b0"+
		"\u01f5\3\2\2\2\u12b1\u12b3\5\u0484\u0243\2\u12b2\u12b4\5\u044a\u0226\2"+
		"\u12b3\u12b2\3\2\2\2\u12b3\u12b4\3\2\2\2\u12b4\u12b6\3\2\2\2\u12b5\u12b7"+
		"\7\u0230\2\2\u12b6\u12b5\3\2\2\2\u12b6\u12b7\3\2\2\2\u12b7\u12b9\3\2\2"+
		"\2\u12b8\u12ba\t\35\2\2\u12b9\u12b8\3\2\2\2\u12b9\u12ba\3\2\2\2\u12ba"+
		"\u12d3\3\2\2\2\u12bb\u12be\7\u008e\2\2\u12bc\u12bd\7\u0198\2\2\u12bd\u12bf"+
		"\7\u018a\2\2\u12be\u12bc\3\2\2\2\u12be\u12bf\3\2\2\2\u12bf\u12c0\3\2\2"+
		"\2\u12c0\u12d4\5\u0376\u01bc\2\u12c1\u12c9\7\u00e3\2\2\u12c2\u12ca\7\21"+
		"\2\2\u12c3\u12c4\7?\2\2\u12c4\u12c7\7\u008e\2\2\u12c5\u12c6\7\u0198\2"+
		"\2\u12c6\u12c8\7\u018a\2\2\u12c7\u12c5\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8"+
		"\u12ca\3\2\2\2\u12c9\u12c2\3\2\2\2\u12c9\u12c3\3\2\2\2\u12c9\u12ca\3\2"+
		"\2\2\u12ca\u12cb\3\2\2\2\u12cb\u12cc\7\31\2\2\u12cc\u12d1\7\u00f5\2\2"+
		"\u12cd\u12ce\7\u02e8\2\2\u12ce\u12cf\5\u020a\u0106\2\u12cf\u12d0\7\u02e9"+
		"\2\2\u12d0\u12d2\3\2\2\2\u12d1\u12cd\3\2\2\2\u12d1\u12d2\3\2\2\2\u12d2"+
		"\u12d4\3\2\2\2\u12d3\u12bb\3\2\2\2\u12d3\u12c1\3\2\2\2\u12d3\u12d4\3\2"+
		"\2\2\u12d4\u12d7\3\2\2\2\u12d5\u12d6\7\u00b2\2\2\u12d6\u12d8\5\u020c\u0107"+
		"\2\u12d7\u12d5\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u12df\3\2\2\2\u12d9\u12db"+
		"\5\u00eav\2\u12da\u12d9\3\2\2\2\u12db\u12dc\3\2\2\2\u12dc\u12da\3\2\2"+
		"\2\u12dc\u12dd\3\2\2\2\u12dd\u12e0\3\2\2\2\u12de\u12e0\5\u020e\u0108\2"+
		"\u12df\u12da\3\2\2\2\u12df\u12de\3\2\2\2\u12df\u12e0\3\2\2\2\u12e0\u01f7"+
		"\3\2\2\2\u12e1\u12e3\5\u0484\u0243\2\u12e2\u12e4\5\u044a\u0226\2\u12e3"+
		"\u12e2\3\2\2\2\u12e3\u12e4\3\2\2\2\u12e4\u12e6\3\2\2\2\u12e5\u12e7\7\u0230"+
		"\2\2\u12e6\u12e5\3\2\2\2\u12e6\u12e7\3\2\2\2\u12e7\u12e9\3\2\2\2\u12e8"+
		"\u12ea\t\35\2\2\u12e9\u12e8\3\2\2\2\u12e9\u12ea\3\2\2\2\u12ea\u12ed\3"+
		"\2\2\2\u12eb\u12ec\7\u00e3\2\2\u12ec\u12ee\7\21\2\2\u12ed\u12eb\3\2\2"+
		"\2\u12ed\u12ee\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef\u12f0\7\31\2\2\u12f0"+
		"\u12f1\7\u02e8\2\2\u12f1\u12f3\7\u02e9\2\2\u12f2\u12f4\7\u0291\2\2\u12f3"+
		"\u12f2\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u12f6\3\2\2\2\u12f5\u12f7\5\u0204"+
		"\u0103\2\u12f6\u12f5\3\2\2\2\u12f6\u12f7\3\2\2\2\u12f7\u12f9\3\2\2\2\u12f8"+
		"\u12fa\5\u0208\u0105\2\u12f9\u12f8\3\2\2\2\u12f9\u12fa\3\2\2\2\u12fa\u12fe"+
		"\3\2\2\2\u12fb\u12fd\5\u00eav\2\u12fc\u12fb\3\2\2\2\u12fd\u1300\3\2\2"+
		"\2\u12fe\u12fc\3\2\2\2\u12fe\u12ff\3\2\2\2\u12ff\u01f9\3\2\2\2\u1300\u12fe"+
		"\3\2\2\2\u1301\u1302\7\u02e1\2\2\u1302\u1303\7\u00dc\2\2\u1303\u1308\5"+
		"\u0484\u0243\2\u1304\u1305\5\u0484\u0243\2\u1305\u1306\7\u02ee\2\2\u1306"+
		"\u1307\5\u0484\u0243\2\u1307\u1309\3\2\2\2\u1308\u1304\3\2\2\2\u1308\u1309"+
		"\3\2\2\2\u1309\u01fb\3\2\2\2\u130a\u130b\7\u0247\2\2\u130b\u130e\7\u013e"+
		"\2\2\u130c\u130f\5\u01fe\u0100\2\u130d\u130f\5\u0200\u0101\2\u130e\u130c"+
		"\3\2\2\2\u130e\u130d\3\2\2\2\u130f\u01fd\3\2\2\2\u1310\u1311\7\u00e8\2"+
		"\2\u1311\u1312\5\u047c\u023f\2\u1312\u1313\7\u02e8\2\2\u1313\u1318\5\u0202"+
		"\u0102\2\u1314\u1315\7\u02ee\2\2\u1315\u1317\5\u0202\u0102\2\u1316\u1314"+
		"\3\2\2\2\u1317\u131a\3\2\2\2\u1318\u1316\3\2\2\2\u1318\u1319\3\2\2\2\u1319"+
		"\u131b\3\2\2\2\u131a\u1318\3\2\2\2\u131b\u131d\7\u02e9\2\2\u131c\u131e"+
		"\7\21\2\2\u131d\u131c\3\2\2\2\u131d\u131e\3\2\2\2\u131e\u01ff\3\2\2\2"+
		"\u131f\u1320\7}\2\2\u1320\u1327\7\u02e8\2\2\u1321\u1328\7\16\2\2\u1322"+
		"\u1323\7\u01cd\2\2\u1323\u1328\7\u0122\2\2\u1324\u1328\7\u0276\2\2\u1325"+
		"\u1326\7\u00db\2\2\u1326\u1328\7\u0122\2\2\u1327\u1321\3\2\2\2\u1327\u1322"+
		"\3\2\2\2\u1327\u1324\3\2\2\2\u1327\u1325\3\2\2\2\u1328\u1329\3\2\2\2\u1329"+
		"\u1327\3\2\2\2\u1329\u132a\3\2\2\2\u132a\u132b\3\2\2\2\u132b\u132c\7\u02e9"+
		"\2\2\u132c\u132d\7Y\2\2\u132d\u0201\3\2\2\2\u132e\u1331\5\u0484\u0243"+
		"\2\u132f\u1330\7\u017e\2\2\u1330\u1332\7\u013e\2\2\u1331\u132f\3\2\2\2"+
		"\u1331\u1332\3\2\2\2\u1332\u0203\3\2\2\2\u1333\u1334\7\u00bb\2\2\u1334"+
		"\u133b\7\u0284\2\2\u1335\u1336\7w\2\2\u1336\u133c\7\u00a9\2\2\u1337\u1338"+
		"\7\u00a9\2\2\u1338\u133c\5\u0206\u0104\2\u1339\u133a\7\u018a\2\2\u133a"+
		"\u133c\7\u00a9\2\2\u133b\u1335\3\2\2\2\u133b\u1337\3\2\2\2\u133b\u1339"+
		"\3\2\2\2\u133c\u0205\3\2\2\2\u133d\u133e\5\u0462\u0232\2\u133e\u0207\3"+
		"\2\2\2\u133f\u1340\7\u027b\2\2\u1340\u1345\7,\2\2\u1341\u1342\7w\2\2\u1342"+
		"\u1346\7\u00a9\2\2\u1343\u1344\7\u00a9\2\2\u1344\u1346\5\u0206\u0104\2"+
		"\u1345\u1341\3\2\2\2\u1345\u1343\3\2\2\2\u1346\u0209\3\2\2\2\u1347\u1348"+
		"\7\u00fd\2\2\u1348\u134c\7?\2\2\u1349\u134a\7\u0238\2\2\u134a\u134c\7"+
		"\u029c\2\2\u134b\u1347\3\2\2\2\u134b\u1349\3\2\2\2\u134c\u134d\3\2\2\2"+
		"\u134d\u1360\7\u02e2\2\2\u134e\u134f\7\u014e\2\2\u134f\u1352\7\u02e2\2"+
		"\2\u1350\u1352\7\u017a\2\2\u1351\u134e\3\2\2\2\u1351\u1350\3\2\2\2\u1352"+
		"\u1360\3\2\2\2\u1353\u1354\7\u015a\2\2\u1354\u1357\7\u02e2\2\2\u1355\u1357"+
		"\7\u017b\2\2\u1356\u1353\3\2\2\2\u1356\u1355\3\2\2\2\u1357\u1360\3\2\2"+
		"\2\u1358\u1360\t\23\2\2\u1359\u135a\7A\2\2\u135a\u135d\7\u02e2\2\2\u135b"+
		"\u135d\7\u0170\2\2\u135c\u1359\3\2\2\2\u135c\u135b\3\2\2\2\u135d\u1360"+
		"\3\2\2\2\u135e\u1360\t\24\2\2\u135f\u134b\3\2\2\2\u135f\u1351\3\2\2\2"+
		"\u135f\u1356\3\2\2\2\u135f\u1358\3\2\2\2\u135f\u135c\3\2\2\2\u135f\u135e"+
		"\3\2\2\2\u1360\u020b\3\2\2\2\u1361\u1362\7\u0284\2\2\u1362\u1364\7\u02e4"+
		"\2\2\u1363\u1361\3\2\2\2\u1363\u1364\3\2\2\2\u1364\u1368\3\2\2\2\u1365"+
		"\u1366\7\u00f3\2\2\u1366\u1367\7?\2\2\u1367\u1369\7\u02e4\2\2\u1368\u1365"+
		"\3\2\2\2\u1368\u1369\3\2\2\2\u1369\u136b\3\2\2\2\u136a\u136c\7\u02e4\2"+
		"\2\u136b\u136a\3\2\2\2\u136b\u136c\3\2\2\2\u136c\u1371\3\2\2\2\u136d\u136f"+
		"\7\u017e\2\2\u136e\u136d\3\2\2\2\u136e\u136f\3\2\2\2\u136f\u1370\3\2\2"+
		"\2\u1370\u1372\7\u0208\2\2\u1371\u136e\3\2\2\2\u1371\u1372\3\2\2\2\u1372"+
		"\u020d\3\2\2\2\u1373\u1374\7\u0210\2\2\u1374\u1375\7\u011a\2\2\u1375\u1381"+
		"\5\u0438\u021d\2\u1376\u1377\7\u029c\2\2\u1377\u1381\7\u0204\2\2\u1378"+
		"\u137a\7e\2\2\u1379\u137b\5\u0400\u0201\2\u137a\u1379\3\2\2\2\u137a\u137b"+
		"\3\2\2\2\u137b\u137c\3\2\2\2\u137c\u137e\5\u022a\u0116\2\u137d\u137f\5"+
		"\u00eex\2\u137e\u137d\3\2\2\2\u137e\u137f\3\2\2\2\u137f\u1381\3\2\2\2"+
		"\u1380\u1373\3\2\2\2\u1380\u1376\3\2\2\2\u1380\u1378\3\2\2\2\u1381\u020f"+
		"\3\2\2\2\u1382\u1383\7\u0210\2\2\u1383\u1384\7\u00dc\2\2\u1384\u1385\7"+
		"\u02e8\2\2\u1385\u1386\5\u0484\u0243\2\u1386\u1387\7\u02e9\2\2\u1387\u1388"+
		"\7\u011a\2\2\u1388\u1389\5\u0438\u021d\2\u1389\u139d\3\2\2\2\u138a\u138b"+
		"\7\u01e6\2\2\u138b\u138c\7\u02e8\2\2\u138c\u138d\5\u0484\u0243\2\u138d"+
		"\u138e\7\u02e9\2\2\u138e\u138f\7\u029c\2\2\u138f\u1390\7\u0204\2\2\u1390"+
		"\u139d\3\2\2\2\u1391\u1393\7e\2\2\u1392\u1394\5\u0400\u0201\2\u1393\u1392"+
		"\3\2\2\2\u1393\u1394\3\2\2\2\u1394\u1395\3\2\2\2\u1395\u1396\7\u00db\2"+
		"\2\u1396\u1397\7\u0122\2\2\u1397\u1398\5\u043e\u0220\2\u1398\u139a\5\u022a"+
		"\u0116\2\u1399\u139b\5\u00eex\2\u139a\u1399\3\2\2\2\u139a\u139b\3\2\2"+
		"\2\u139b\u139d\3\2\2\2\u139c\u1382\3\2\2\2\u139c\u138a\3\2\2\2\u139c\u1391"+
		"\3\2\2\2\u139d\u0211\3\2\2\2\u139e\u13a0\7\u02e2\2\2\u139f\u13a1\7\u0306"+
		"\2\2\u13a0\u139f\3\2\2\2\u13a0\u13a1\3\2\2\2\u13a1\u0213\3\2\2\2\u13a2"+
		"\u13a3\7\u00a4\2\2\u13a3\u13a4\7\u0254\2\2\u13a4\u13a5\5\u040a\u0206\2"+
		"\u13a5\u13a6\7\u02fa\2\2\u13a6\u0215\3\2\2\2\u13a7\u13a8\7Z\2\2\u13a8"+
		"\u13a9\7\u0198\2\2\u13a9\u13aa\7X\2\2\u13aa\u13ab\5\u040a\u0206\2\u13ab"+
		"\u13ac\7\u02e1\2\2\u13ac\u13ad\5\u0484\u0243\2\u13ad\u13ae\7\u011a\2\2"+
		"\u13ae\u13af\5\u049e\u0250\2\u13af\u0217\3\2\2\2\u13b0\u13b3\7r\2\2\u13b1"+
		"\u13b2\7\u01a1\2\2\u13b2\u13b4\7\u01ee\2\2\u13b3\u13b1\3\2\2\2\u13b3\u13b4"+
		"\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u13b6\7\u01d6\2\2\u13b6\u13b7\7\u0249"+
		"\2\2\u13b7\u13b8\5\u0464\u0233\2\u13b8\u13bc\7\u00dc\2\2\u13b9\u13ba\5"+
		"\u0476\u023c\2\u13ba\u13bb\7\u02e1\2\2\u13bb\u13bd\3\2\2\2\u13bc\u13b9"+
		"\3\2\2\2\u13bc\u13bd\3\2\2\2\u13bd\u13be\3\2\2\2\u13be\u13c1\5\u0420\u0211"+
		"\2\u13bf\u13c0\7\u02f0\2\2\u13c0\u13c2\5\u0408\u0205\2\u13c1\u13bf\3\2"+
		"\2\2\u13c1\u13c2\3\2\2\2\u13c2\u13db\3\2\2\2\u13c3\u13c6\7r\2\2\u13c4"+
		"\u13c5\7\u01a1\2\2\u13c5\u13c7\7\u01ee\2\2\u13c6\u13c4\3\2\2\2\u13c6\u13c7"+
		"\3\2\2\2\u13c7\u13c8\3\2\2\2\u13c8\u13cc\7\u0249\2\2\u13c9\u13ca\5\u0476"+
		"\u023c\2\u13ca\u13cb\7\u02e1\2\2\u13cb\u13cd\3\2\2\2\u13cc\u13c9\3\2\2"+
		"\2\u13cc\u13cd\3\2\2\2\u13cd\u13ce\3\2\2\2\u13ce\u13cf\5\u0464\u0233\2"+
		"\u13cf\u13d3\7\u00dc\2\2\u13d0\u13d1\5\u0476\u023c\2\u13d1\u13d2\7\u02e1"+
		"\2\2\u13d2\u13d4\3\2\2\2\u13d3\u13d0\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4"+
		"\u13d5\3\2\2\2\u13d5\u13d8\5\u0420\u0211\2\u13d6\u13d7\7\u02f0\2\2\u13d7"+
		"\u13d9\5\u0408\u0205\2\u13d8\u13d6\3\2\2\2\u13d8\u13d9\3\2\2\2\u13d9\u13db"+
		"\3\2\2\2\u13da\u13b0\3\2\2\2\u13da\u13c3\3\2\2\2\u13db\u0219\3\2\2\2\u13dc"+
		"\u13dd\7Z\2\2\u13dd\u13de\7\u0198\2\2\u13de\u13df\7\u0254\2\2\u13df\u13e0"+
		"\5\u040a\u0206\2\u13e0\u13e1\7\u011a\2\2\u13e1\u13e2\5\u049e\u0250\2\u13e2"+
		"\u021b\3\2\2\2\u13e3\u13e4\7\20\2\2\u13e4\u13e5\7\u0254\2\2\u13e5\u13ea"+
		"\5\u040a\u0206\2\u13e6\u13eb\5\u021e\u0110\2\u13e7\u13eb\5\u0222\u0112"+
		"\2\u13e8\u13eb\5\u0224\u0113\2\u13e9\u13eb\5\u0226\u0114\2\u13ea\u13e6"+
		"\3\2\2\2\u13ea\u13e7\3\2\2\2\u13ea\u13e8\3\2\2\2\u13ea\u13e9\3\2\2\2\u13eb"+
		"\u021d\3\2\2\2\u13ec\u13ef\7\5\2\2\u13ed\u13ee\7e\2\2\u13ee\u13f0\5\u0400"+
		"\u0201\2\u13ef\u13ed\3\2\2\2\u13ef\u13f0\3\2\2\2\u13f0\u13f5\3\2\2\2\u13f1"+
		"\u13f6\5\u0230\u0119\2\u13f2\u13f6\5\u0228\u0115\2\u13f3\u13f6\5\u022e"+
		"\u0118\2\u13f4\u13f6\5\u0220\u0111\2\u13f5\u13f1\3\2\2\2\u13f5\u13f2\3"+
		"\2\2\2\u13f5\u13f3\3\2\2\2\u13f5\u13f4\3\2\2\2\u13f6\u021f\3\2\2\2\u13f7"+
		"\u13f8\7M\2\2\u13f8\u13f9\7\u02e8\2\2\u13f9\u13fa\5\u0372\u01ba\2\u13fa"+
		"\u13fc\7\u02e9\2\2\u13fb\u13fd\7\u009b\2\2\u13fc\u13fb\3\2\2\2\u13fc\u13fd"+
		"\3\2\2\2\u13fd\u0221\3\2\2\2\u13fe\u13ff\7\u00a4\2\2\u13ff\u1400\7e\2"+
		"\2\u1400\u1401\5\u0400\u0201\2\u1401\u0223\3\2\2\2\u1402\u1403\7\u00b0"+
		"\2\2\u1403\u1404\7e\2\2\u1404\u1405\5\u0400\u0201\2\u1405\u0225\3\2\2"+
		"\2\u1406\u1407\7\u009b\2\2\u1407\u1408\7e\2\2\u1408\u1409\5\u0400\u0201"+
		"\2\u1409\u0227\3\2\2\2\u140a\u140b\7\u00db\2\2\u140b\u140c\7\u0122\2\2"+
		"\u140c\u140d\5\u043e\u0220\2\u140d\u140f\5\u022a\u0116\2\u140e\u1410\5"+
		"\u022c\u0117\2\u140f\u140e\3\2\2\2\u140f\u1410\3\2\2\2\u1410\u0229\3\2"+
		"\2\2\u1411\u1412\7\u01e4\2\2\u1412\u1413\5\u040a\u0206\2\u1413\u141b\5"+
		"\u043e\u0220\2\u1414\u1415\7\u0198\2\2\u1415\u1419\7\u0094\2\2\u1416\u141a"+
		"\7E\2\2\u1417\u1418\7\u021f\2\2\u1418\u141a\7\u018a\2\2\u1419\u1416\3"+
		"\2\2\2\u1419\u1417\3\2\2\2\u141a\u141c\3\2\2\2\u141b\u1414\3\2\2\2\u141b"+
		"\u141c\3\2\2\2\u141c\u022b\3\2\2\2\u141d\u141e\7\u0198\2\2\u141e\u1422"+
		"\7\u0094\2\2\u141f\u1423\7E\2\2\u1420\u1421\7\u021f\2\2\u1421\u1423\7"+
		"\u018a\2\2\u1422\u141f\3\2\2\2\u1422\u1420\3\2\2\2\u1423\u022d\3\2\2\2"+
		"\u1424\u1425\7\u0276\2\2\u1425\u1426\5\u043e\u0220\2\u1426\u022f\3\2\2"+
		"\2\u1427\u1428\7\u01cd\2\2\u1428\u1429\7\u0122\2\2\u1429\u142a\5\u043e"+
		"\u0220\2\u142a\u0231\3\2\2\2\u142b\u142c\7\u0089\2\2\u142c\u142e\5\u0246"+
		"\u0124\2\u142d\u142b\3\2\2\2\u142d\u142e\3\2\2\2\u142e\u142f\3\2\2\2\u142f"+
		"\u1430\7-\2\2\u1430\u1437\5\u0264\u0133\2\u1431\u1433\7\u00bd\2\2\u1432"+
		"\u1434\5\u0294\u014b\2\u1433\u1432\3\2\2\2\u1434\u1435\3\2\2\2\u1435\u1433"+
		"\3\2\2\2\u1435\u1436\3\2\2\2\u1436\u1438\3\2\2\2\u1437\u1431\3\2\2\2\u1437"+
		"\u1438\3\2\2\2\u1438\u1439\3\2\2\2\u1439\u143a\7\u00b4\2\2\u143a\u143b"+
		"\7\u02fa\2\2\u143b\u0233\3\2\2\2\u143c\u143d\7!\2\2\u143d\u143e\tC\2\2"+
		"\u143e\u0235\3\2\2\2\u143f\u1440\5\u0462\u0232\2\u1440\u1441\7\u02fc\2"+
		"\2\u1441\u1442\5\u0376\u01bc\2\u1442\u0237\3\2\2\2\u1443\u1446\7\u0123"+
		"\2\2\u1444\u1447\5\u023a\u011e\2\u1445\u1447\5\u023c\u011f\2\u1446\u1444"+
		"\3\2\2\2\u1446\u1445\3\2\2\2\u1447\u0239\3\2\2\2\u1448\u1449\7\u011d\2"+
		"\2\u1449\u144a\7\u0164\2\2\u144a\u144b\7\u02e4\2\2\u144b\u023b\3\2\2\2"+
		"\u144c\u144f\7Q\2\2\u144d\u144e\7\u0164\2\2\u144e\u1450\7\u02e4\2\2\u144f"+
		"\u144d\3\2\2\2\u144f\u1450\3\2\2\2\u1450\u1451\3\2\2\2\u1451\u1452\7\u012b"+
		"\2\2\u1452\u1454\5\u0462\u0232\2\u1453\u1455\5\u023e\u0120\2\u1454\u1453"+
		"\3\2\2\2\u1454\u1455\3\2\2\2\u1455\u1458\3\2\2\2\u1456\u1457\7\u029c\2"+
		"\2\u1457\u1459\7k\2\2\u1458\u1456\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u145b"+
		"\3\2\2\2\u145a\u145c\5\u0240\u0121\2\u145b\u145a\3\2\2\2\u145b\u145c\3"+
		"\2\2\2\u145c\u023d\3\2\2\2\u145d\u145e\7\13\2\2\u145e\u145f\7\u0107\2"+
		"\2\u145f\u1460\7\u02e8\2\2\u1460\u1461\5\u0374\u01bb\2\u1461\u1462\7\u02e9"+
		"\2\2\u1462\u023f\3\2\2\2\u1463\u1464\7\u01ac\2\2\u1464\u1469\7\u02e8\2"+
		"\2\u1465\u146a\5\u0374\u01bb\2\u1466\u1467\7\u02e1\2\2\u1467\u1468\7\u02e1"+
		"\2\2\u1468\u146a\7\u02e1\2\2\u1469\u1465\3\2\2\2\u1469\u1466\3\2\2\2\u146a"+
		"\u146b\3\2\2\2\u146b\u146c\7\u02e9\2\2\u146c\u0241\3\2\2\2\u146d\u1471"+
		"\5\u0468\u0235\2\u146e\u1470\tD\2\2\u146f\u146e\3\2\2\2\u1470\u1473\3"+
		"\2\2\2\u1471\u146f\3\2\2\2\u1471\u1472\3\2\2\2\u1472\u1475\3\2\2\2\u1473"+
		"\u1471\3\2\2\2\u1474\u1476\5\u0448\u0225\2\u1475\u1474\3\2\2\2\u1475\u1476"+
		"\3\2\2\2\u1476\u1478\3\2\2\2\u1477\u1479\5\u0244\u0123\2\u1478\u1477\3"+
		"\2\2\2\u1478\u1479\3\2\2\2\u1479\u0243\3\2\2\2\u147a\u147b\tE\2\2\u147b"+
		"\u147c\5\u0376\u01bc\2\u147c\u0245\3\2\2\2\u147d\u147f\5\u0248\u0125\2"+
		"\u147e\u147d\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u147e\3\2\2\2\u1480\u1481"+
		"\3\2\2\2\u1481\u0247\3\2\2\2\u1482\u148d\5\u024a\u0126\2\u1483\u148d\5"+
		"\u024c\u0127\2\u1484\u148d\5\u024e\u0128\2\u1485\u148d\5\u0252\u012a\2"+
		"\u1486\u148d\5\u0254\u012b\2\u1487\u148d\5\u025c\u012f\2\u1488\u148d\5"+
		" \21\2\u1489\u148d\5\"\22\2\u148a\u148d\5,\27\2\u148b\u148d\5*\26\2\u148c"+
		"\u1482\3\2\2\2\u148c\u1483\3\2\2\2\u148c\u1484\3\2\2\2\u148c\u1485\3\2"+
		"\2\2\u148c\u1486\3\2\2\2\u148c\u1487\3\2\2\2\u148c\u1488\3\2\2\2\u148c"+
		"\u1489\3\2\2\2\u148c\u148a\3\2\2\2\u148c\u148b\3\2\2\2\u148d\u0249\3\2"+
		"\2\2\u148e\u1490\5\u0462\u0232\2\u148f\u1491\7d\2\2\u1490\u148f\3\2\2"+
		"\2\u1490\u1491\3\2\2\2\u1491\u1492\3\2\2\2\u1492\u1495\5\u0448\u0225\2"+
		"\u1493\u1494\7\u0187\2\2\u1494\u1496\7\u018a\2\2\u1495\u1493\3\2\2\2\u1495"+
		"\u1496\3\2\2\2\u1496\u1498\3\2\2\2\u1497\u1499\5\u0244\u0123\2\u1498\u1497"+
		"\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u149a\3\2\2\2\u149a\u149b\7\u02fa\2"+
		"\2\u149b\u024b\3\2\2\2\u149c\u149d\7\u0245\2\2\u149d\u149e\5\u0462\u0232"+
		"\2\u149e\u149f\7\u011a\2\2\u149f\u14a5\5\u0448\u0225\2\u14a0\u14a1\7\u01db"+
		"\2\2\u14a1\u14a2\5\u0376\u01bc\2\u14a2\u14a3\7\u02e0\2\2\u14a3\u14a4\5"+
		"\u0376\u01bc\2\u14a4\u14a6\3\2\2\2\u14a5\u14a0\3\2\2\2\u14a5\u14a6\3\2"+
		"\2\2\u14a6\u14a9\3\2\2\2\u14a7\u14a8\7\u0187\2\2\u14a8\u14aa\7\u018a\2"+
		"\2\u14a9\u14a7\3\2\2\2\u14a9\u14aa\3\2\2\2\u14aa\u14ab\3\2\2\2\u14ab\u14ac"+
		"\7\u02fa\2\2\u14ac\u024d\3\2\2\2\u14ad\u14ae\7y\2\2\u14ae\u14ba\5\u0462"+
		"\u0232\2\u14af\u14b4\7\u02e8\2\2\u14b0\u14b2\7\u02ee\2\2\u14b1\u14b0\3"+
		"\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u14b3\3\2\2\2\u14b3\u14b5\5\u0250\u0129"+
		"\2\u14b4\u14b1\3\2\2\2\u14b5\u14b6\3\2\2\2\u14b6\u14b4\3\2\2\2\u14b6\u14b7"+
		"\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14b9\7\u02e9\2\2\u14b9\u14bb\3\2\2"+
		"\2\u14ba\u14af\3\2\2\2\u14ba\u14bb\3\2\2\2\u14bb\u14be\3\2\2\2\u14bc\u14bd"+
		"\7\u01f9\2\2\u14bd\u14bf\5\u0448\u0225\2\u14be\u14bc\3\2\2\2\u14be\u14bf"+
		"\3\2\2\2\u14bf\u14c2\3\2\2\2\u14c0\u14c1\7\u011a\2\2\u14c1\u14c3\5\u02bc"+
		"\u015f\2\u14c2\u14c0\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14c4\3\2\2\2\u14c4"+
		"\u14c5\7\u02fa\2\2\u14c5\u024f\3\2\2\2\u14c6\u14cb\5\u0468\u0235\2\u14c7"+
		"\u14c9\7\u0107\2\2\u14c8\u14c7\3\2\2\2\u14c8\u14c9\3\2\2\2\u14c9\u14ca"+
		"\3\2\2\2\u14ca\u14cc\5\u0448\u0225\2\u14cb\u14c8\3\2\2\2\u14cb\u14cc\3"+
		"\2\2\2\u14cc\u14ce\3\2\2\2\u14cd\u14cf\5\u0244\u0123\2\u14ce\u14cd\3\2"+
		"\2\2\u14ce\u14cf\3\2\2\2\u14cf\u0251\3\2\2\2\u14d0\u14d1\5\u0462\u0232"+
		"\2\u14d1\u14d2\7\u00bd\2\2\u14d2\u14d3\7\u02fa\2\2\u14d3\u0253\3\2\2\2"+
		"\u14d4\u14f3\7\u01c8\2\2\u14d5\u14f4\7\u021b\2\2\u14d6\u14f4\7&\2\2\u14d7"+
		"\u14d8\7\u00be\2\2\u14d8\u14d9\7\u02e8\2\2\u14d9\u14da\5\u0482\u0242\2"+
		"\u14da\u14db\7\u02ee\2\2\u14db\u14dc\5\u049c\u024f\2\u14dc\u14dd\7\u02e9"+
		"\2\2\u14dd\u14f4\3\2\2\2\u14de\u14df\7\u010b\2\2\u14df\u14e0\7\u02e8\2"+
		"\2\u14e0\u14e1\5\u0462\u0232\2\u14e1\u14e2\7\u02ee\2\2\u14e2\u14e3\5\u0376"+
		"\u01bc\2\u14e3\u14e4\7\u02e9\2\2\u14e4\u14f4\3\2\2\2\u14e5\u14e6\7\u01f3"+
		"\2\2\u14e6\u14e9\7\u02e8\2\2\u14e7\u14ea\5\u0462\u0232\2\u14e8\u14ea\7"+
		"\u008e\2\2\u14e9\u14e7\3\2\2\2\u14e9\u14e8\3\2\2\2\u14ea\u14ed\3\2\2\2"+
		"\u14eb\u14ec\7\u02ee\2\2\u14ec\u14ee\5\u0462\u0232\2\u14ed\u14eb\3\2\2"+
		"\2\u14ee\u14ef\3\2\2\2\u14ef\u14ed\3\2\2\2\u14ef\u14f0\3\2\2\2\u14f0\u14f1"+
		"\3\2\2\2\u14f1\u14f2\7\u02e9\2\2\u14f2\u14f4\3\2\2\2\u14f3\u14d5\3\2\2"+
		"\2\u14f3\u14d6\3\2\2\2\u14f3\u14d7\3\2\2\2\u14f3\u14de\3\2\2\2\u14f3\u14e5"+
		"\3\2\2\2\u14f4\u14f5\3\2\2\2\u14f5\u14f6\7\u02fa\2\2\u14f6\u0255\3\2\2"+
		"\2\u14f7\u14f8\7\u01e0\2\2\u14f8\u14fd\7\u02e8\2\2\u14f9\u14fb\7\u02ee"+
		"\2\2\u14fa\u14f9\3\2\2\2\u14fa\u14fb\3\2\2\2\u14fb\u14fc\3\2\2\2\u14fc"+
		"\u14fe\5\u0258\u012d\2\u14fd\u14fa\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff\u14fd"+
		"\3\2\2\2\u14ff\u1500\3\2\2\2\u1500\u1501\3\2\2\2\u1501\u1502\7\u02e9\2"+
		"\2\u1502\u0257\3\2\2\2\u1503\u1505\5\u0484\u0243\2\u1504\u1506\5\u0448"+
		"\u0225\2\u1505\u1504\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u1509\3\2\2\2\u1507"+
		"\u1508\7\u0187\2\2\u1508\u150a\7\u018a\2\2\u1509\u1507\3\2\2\2\u1509\u150a"+
		"\3\2\2\2\u150a\u150c\3\2\2\2\u150b\u150d\5\u0244\u0123\2\u150c\u150b\3"+
		"\2\2\2\u150c\u150d\3\2\2\2\u150d\u0259\3\2\2\2\u150e\u150f\7\u01e6\2\2"+
		"\u150f\u1512\7y\2\2\u1510\u1511\7\u01f9\2\2\u1511\u1513\5\u0448\u0225"+
		"\2\u1512\u1510\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u025b\3\2\2\2\u1514\u1515"+
		"\7\u0270\2\2\u1515\u1516\5\u0462\u0232\2\u1516\u151b\7\u011a\2\2\u1517"+
		"\u151c\5\u025e\u0130\2\u1518\u151c\5\u0262\u0132\2\u1519\u151c\5\u0256"+
		"\u012c\2\u151a\u151c\5\u025a\u012e\2\u151b\u1517\3\2\2\2\u151b\u1518\3"+
		"\2\2\2\u151b\u1519\3\2\2\2\u151b\u151a\3\2\2\2\u151c\u151d\3\2\2\2\u151d"+
		"\u151e\7\u02fa\2\2\u151e\u025d\3\2\2\2\u151f\u1520\7\u0254\2\2\u1520\u1521"+
		"\7\u0192\2\2\u1521\u1523\5\u0448\u0225\2\u1522\u1524\5\u0260\u0131\2\u1523"+
		"\u1522\3\2\2\2\u1523\u1524\3\2\2\2\u1524\u1527\3\2\2\2\u1525\u1526\7\u0187"+
		"\2\2\u1526\u1528\7\u018a\2\2\u1527\u1525\3\2\2\2\u1527\u1528\3\2\2\2\u1528"+
		"\u025f\3\2\2\2\u1529\u152c\7\u00ff\2\2\u152a\u152c\7\u0100\2\2\u152b\u1529"+
		"\3\2\2\2\u152b\u152a\3\2\2\2\u152c\u152d\3\2\2\2\u152d\u152e\7?\2\2\u152e"+
		"\u152f\5\u0448\u0225\2\u152f\u0261\3\2\2\2\u1530\u1534\7\u028c\2\2\u1531"+
		"\u1532\7\u028d\2\2\u1532\u1534\7\30\2\2\u1533\u1530\3\2\2\2\u1533\u1531"+
		"\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u1536\7\u02e8\2\2\u1536\u1537\5\u0376"+
		"\u01bc\2\u1537\u1538\7\u02e9\2\2\u1538\u1539\7\u0192\2\2\u1539\u153c\5"+
		"\u0448\u0225\2\u153a\u153b\7\u0187\2\2\u153b\u153d\7\u018a\2\2\u153c\u153a"+
		"\3\2\2\2\u153c\u153d\3\2\2\2\u153d\u0263\3\2\2\2\u153e\u153f\5\u0268\u0135"+
		"\2\u153f\u1540\tF\2\2\u1540\u1543\3\2\2\2\u1541\u1543\5\u0266\u0134\2"+
		"\u1542\u153e\3\2\2\2\u1542\u1541\3\2\2\2\u1543\u1544\3\2\2\2\u1544\u1542"+
		"\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u0265\3\2\2\2\u1546\u1547\7\u02f8\2"+
		"\2\u1547\u1548\7\u02f8\2\2\u1548\u1549\5\u041c\u020f\2\u1549\u154a\7\u02f7"+
		"\2\2\u154a\u154b\7\u02f7\2\2\u154b\u0267\3\2\2\2\u154c\u154d\7r\2\2\u154d"+
		"\u1561\5\u026a\u0136\2\u154e\u154f\7\u026e\2\2\u154f\u1561\5\u026a\u0136"+
		"\2\u1550\u1561\5\u0292\u014a\2\u1551\u1561\5\u0298\u014d\2\u1552\u1561"+
		"\5\u026c\u0137\2\u1553\u1561\5\u026e\u0138\2\u1554\u1561\5\u0270\u0139"+
		"\2\u1555\u1561\5\u0272\u013a\2\u1556\u1561\5\u0274\u013b\2\u1557\u1561"+
		"\5\u027a\u013e\2\u1558\u1561\5\u027e\u0140\2\u1559\u1561\5\u0288\u0145"+
		"\2\u155a\u1561\5\u028a\u0146\2\u155b\u1561\5\u028c\u0147\2\u155c\u1561"+
		"\5\u0396\u01cc\2\u155d\u1561\5\u029a\u014e\2\u155e\u1561\5\u028e\u0148"+
		"\2\u155f\u1561\5\u0290\u0149\2\u1560\u154c\3\2\2\2\u1560\u154e\3\2\2\2"+
		"\u1560\u1550\3\2\2\2\u1560\u1551\3\2\2\2\u1560\u1552\3\2\2\2\u1560\u1553"+
		"\3\2\2\2\u1560\u1554\3\2\2\2\u1560\u1555\3\2\2\2\u1560\u1556\3\2\2\2\u1560"+
		"\u1557\3\2\2\2\u1560\u1558\3\2\2\2\u1560\u1559\3\2\2\2\u1560\u155a\3\2"+
		"\2\2\u1560\u155b\3\2\2\2\u1560\u155c\3\2\2\2\u1560\u155d\3\2\2\2\u1560"+
		"\u155e\3\2\2\2\u1560\u155f\3\2\2\2\u1561\u0269\3\2\2\2\u1562\u1564\nG"+
		"\2\2\u1563\u1562\3\2\2\2\u1564\u1565\3\2\2\2\u1565\u1563\3\2\2\2\u1565"+
		"\u1566\3\2\2\2\u1566\u026b\3\2\2\2\u1567\u156a\5\u0452\u022a\2\u1568\u156a"+
		"\5\u0450\u0229\2\u1569\u1567\3\2\2\2\u1569\u1568\3\2\2\2\u156a\u156b\3"+
		"\2\2\2\u156b\u156c\7\u02f1\2\2\u156c\u156d\5\u0376\u01bc\2\u156d\u026d"+
		"\3\2\2\2\u156e\u1570\7l\2\2\u156f\u1571\5\u041c\u020f\2\u1570\u156f\3"+
		"\2\2\2\u1570\u1571\3\2\2\2\u1571\u1574\3\2\2\2\u1572\u1573\7\u0297\2\2"+
		"\u1573\u1575\5\u0372\u01ba\2\u1574\u1572\3\2\2\2\u1574\u1575\3\2\2\2\u1575"+
		"\u026f\3\2\2\2\u1576\u1578\7\u00c5\2\2\u1577\u1579\5\u041c\u020f\2\u1578"+
		"\u1577\3\2\2\2\u1578\u1579\3\2\2\2\u1579\u157c\3\2\2\2\u157a\u157b\7\u0297"+
		"\2\2\u157b\u157d\5\u0372\u01ba\2\u157c\u157a\3\2\2\2\u157c\u157d\3\2\2"+
		"\2\u157d\u0271\3\2\2\2\u157e\u157f\7\u00e6\2\2\u157f\u1580\5\u041c\u020f"+
		"\2\u1580\u0273\3\2\2\2\u1581\u1582\7\u00f7\2\2\u1582\u1583\5\u0372\u01ba"+
		"\2\u1583\u1584\7\u0259\2\2\u1584\u1588\5\u0264\u0133\2\u1585\u1587\5\u0276"+
		"\u013c\2\u1586\u1585\3\2\2\2\u1587\u158a\3\2\2\2\u1588\u1586\3\2\2\2\u1588"+
		"\u1589\3\2\2\2\u1589\u158c\3\2\2\2\u158a\u1588\3\2\2\2\u158b\u158d\5\u0278"+
		"\u013d\2\u158c\u158b\3\2\2\2\u158c\u158d\3\2\2\2\u158d\u158e\3\2\2\2\u158e"+
		"\u158f\7\u00b4\2\2\u158f\u1590\7\u00f7\2\2\u1590\u0275\3\2\2\2\u1591\u1592"+
		"\7\u00ae\2\2\u1592\u1593\5\u0372\u01ba\2\u1593\u1594\7\u0259\2\2\u1594"+
		"\u1595\5\u0264\u0133\2\u1595\u0277\3\2\2\2\u1596\u1597\7\u00ad\2\2\u1597"+
		"\u1598\5\u0264\u0133\2\u1598\u0279\3\2\2\2\u1599\u159b\5\u0266\u0134\2"+
		"\u159a\u1599\3\2\2\2\u159a\u159b\3\2\2\2\u159b\u15a0\3\2\2\2\u159c\u159d"+
		"\7\u0299\2\2\u159d\u15a1\5\u0372\u01ba\2\u159e\u159f\7\u00dc\2\2\u159f"+
		"\u15a1\5\u027c\u013f\2\u15a0\u159c\3\2\2\2\u15a0\u159e\3\2\2\2\u15a0\u15a1"+
		"\3\2\2\2\u15a1\u15a2\3\2\2\2\u15a2\u15a3\7\u0143\2\2\u15a3\u15a4\5\u0264"+
		"\u0133\2\u15a4\u15a5\7\u00b4\2\2\u15a5\u15a7\7\u0143\2\2\u15a6\u15a8\5"+
		"\u041c\u020f\2\u15a7\u15a6\3\2\2\2\u15a7\u15a8\3\2\2\2\u15a8\u027b\3\2"+
		"\2\2\u15a9\u15aa\5\u0436\u021c\2\u15aa\u15ac\7\u0107\2\2\u15ab\u15ad\7"+
		"\u01fb\2\2\u15ac\u15ab\3\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15ae\3\2\2\2"+
		"\u15ae\u15af\5\u0284\u0143\2\u15af\u15b0\7\u02e0\2\2\u15b0\u15b1\5\u0286"+
		"\u0144\2\u15b1\u15c3\3\2\2\2\u15b2\u15b3\5\u0406\u0204\2\u15b3\u15c0\7"+
		"\u0107\2\2\u15b4\u15ba\5\u0404\u0203\2\u15b5\u15b7\7\u02e8\2\2\u15b6\u15b8"+
		"\5\u0374\u01bb\2\u15b7\u15b6\3\2\2\2\u15b7\u15b8\3\2\2\2\u15b8\u15b9\3"+
		"\2\2\2\u15b9\u15bb\7\u02e9\2\2\u15ba\u15b5\3\2\2\2\u15ba\u15bb\3\2\2\2"+
		"\u15bb\u15c1\3\2\2\2\u15bc\u15bd\7\u02e8\2\2\u15bd\u15be\5\u02bc\u015f"+
		"\2\u15be\u15bf\7\u02e9\2\2\u15bf\u15c1\3\2\2\2\u15c0\u15b4\3\2\2\2\u15c0"+
		"\u15bc\3\2\2\2\u15c1\u15c3\3\2\2\2\u15c2\u15a9\3\2\2\2\u15c2\u15b2\3\2"+
		"\2\2\u15c3\u027d\3\2\2\2\u15c4\u15c5\7\u00d9\2\2\u15c5\u15c6\5\u0436\u021c"+
		"\2\u15c6\u15c7\7\u0107\2\2\u15c7\u15c8\5\u0280\u0141\2\u15c8\u15cb\5\u029a"+
		"\u014e\2\u15c9\u15ca\7\u020b\2\2\u15ca\u15cc\7\u00bf\2\2\u15cb\u15c9\3"+
		"\2\2\2\u15cb\u15cc\3\2\2\2\u15cc\u027f\3\2\2\2\u15cd\u15ce\5\u0284\u0143"+
		"\2\u15ce\u15cf\7\u02e0\2\2\u15cf\u15d0\5\u0286\u0144\2\u15d0\u15db\3\2"+
		"\2\2\u15d1\u15d2\7\u0104\2\2\u15d2\u15d3\7\u0192\2\2\u15d3\u15d5\5\u0434"+
		"\u021b\2\u15d4\u15d6\5\u0282\u0142\2\u15d5\u15d4\3\2\2\2\u15d5\u15d6\3"+
		"\2\2\2\u15d6\u15db\3\2\2\2\u15d7\u15d8\7\u0286\2\2\u15d8\u15d9\7\u0192"+
		"\2\2\u15d9\u15db\5\u0436\u021c\2\u15da\u15cd\3\2\2\2\u15da\u15d1\3\2\2"+
		"\2\u15da\u15d7\3\2\2\2\u15db\u0281\3\2\2\2\u15dc\u15dd\7.\2\2\u15dd\u15de"+
		"\5\u0284\u0143\2\u15de\u15df\7\23\2\2\u15df\u15e0\5\u0286\u0144\2\u15e0"+
		"\u0283\3\2\2\2\u15e1\u15e2\5\u0388\u01c5\2\u15e2\u0285\3\2\2\2\u15e3\u15e4"+
		"\5\u0388\u01c5\2\u15e4\u0287\3\2\2\2\u15e5\u15e6\7\u018a\2\2\u15e6\u0289"+
		"\3\2\2\2\u15e7\u15e9\7\u01da\2\2\u15e8\u15ea\5\u0482\u0242\2\u15e9\u15e8"+
		"\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u028b\3\2\2\2\u15eb\u15ed\7\u01f9\2"+
		"\2\u15ec\u15ee\5\u0376\u01bc\2\u15ed\u15ec\3\2\2\2\u15ed\u15ee\3\2\2\2"+
		"\u15ee\u028d\3\2\2\2\u15ef\u15f1\7B\2\2\u15f0\u15ef\3\2\2\2\u15f0\u15f1"+
		"\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2\u15f4\5\u03f8\u01fd\2\u15f3\u15f5\5"+
		"\u03e4\u01f3\2\u15f4\u15f3\3\2\2\2\u15f4\u15f5\3\2\2\2\u15f5\u15f7\3\2"+
		"\2\2\u15f6\u15f8\5\u0440\u0221\2\u15f7\u15f6\3\2\2\2\u15f7\u15f8\3\2\2"+
		"\2\u15f8\u028f\3\2\2\2\u15f9\u15fa\7\u01c0\2\2\u15fa\u15fb\7\u0205\2\2"+
		"\u15fb\u15fc\7\u02e8\2\2\u15fc\u15fd\5\u0376\u01bc\2\u15fd\u15fe\7\u02e9"+
		"\2\2\u15fe\u0291\3\2\2\2\u15ff\u1600\7-\2\2\u1600\u1607\5\u0264\u0133"+
		"\2\u1601\u1603\7\u00bd\2\2\u1602\u1604\5\u0294\u014b\2\u1603\u1602\3\2"+
		"\2\2\u1604\u1605\3\2\2\2\u1605\u1603\3\2\2\2\u1605\u1606\3\2\2\2\u1606"+
		"\u1608\3\2\2\2\u1607\u1601\3\2\2\2\u1607\u1608\3\2\2\2\u1608\u1609\3\2"+
		"\2\2\u1609\u160b\7\u00b4\2\2\u160a\u160c\5\u041c\u020f\2\u160b\u160a\3"+
		"\2\2\2\u160b\u160c\3\2\2\2\u160c\u0293\3\2\2\2\u160d\u160e\7\u0297\2\2"+
		"\u160e\u1613\5\u0482\u0242\2\u160f\u1610\7\u01a1\2\2\u1610\u1612\5\u0482"+
		"\u0242\2\u1611\u160f\3\2\2\2\u1612\u1615\3\2\2\2\u1613\u1611\3\2\2\2\u1613"+
		"\u1614\3\2\2\2\u1614\u1616\3\2\2\2\u1615\u1613\3\2\2\2\u1616\u1617\7\u0259"+
		"\2\2\u1617\u1618\5\u0264\u0133\2\u1618\u0295\3\2\2\2\u1619\u161b\7\u0089"+
		"\2\2\u161a\u1619\3\2\2\2\u161a\u161b\3\2\2\2\u161b\u161d\3\2\2\2\u161c"+
		"\u161e\5\u0248\u0125\2\u161d\u161c\3\2\2\2\u161e\u161f\3\2\2\2\u161f\u161d"+
		"\3\2\2\2\u161f\u1620\3\2\2\2\u1620\u1622\3\2\2\2\u1621\u161a\3\2\2\2\u1621"+
		"\u1622\3\2\2\2\u1622\u1623\3\2\2\2\u1623\u1624\5\u0292\u014a\2\u1624\u0297"+
		"\3\2\2\2\u1625\u1627\7\u0089\2\2\u1626\u1625\3\2\2\2\u1626\u1627\3\2\2"+
		"\2\u1627\u1629\3\2\2\2\u1628\u162a\5\u0248\u0125\2\u1629\u1628\3\2\2\2"+
		"\u162a\u162b\3\2\2\2\u162b\u1629\3\2\2\2\u162b\u162c\3\2\2\2\u162c\u162d"+
		"\3\2\2\2\u162d\u162e\5\u0292\u014a\2\u162e\u0299\3\2\2\2\u162f\u1634\5"+
		"\u029c\u014f\2\u1630\u1634\5\u02a0\u0151\2\u1631\u1634\5\u02a2\u0152\2"+
		"\u1632\u1634\5\u02ac\u0157\2\u1633\u162f\3\2\2\2\u1633\u1630\3\2\2\2\u1633"+
		"\u1631\3\2\2\2\u1633\u1632\3\2\2\2\u1634\u029b\3\2\2\2\u1635\u1636\7\u00c2"+
		"\2\2\u1636\u1637\7\u00fa\2\2\u1637\u1641\5\u0376\u01bc\2\u1638\u163a\5"+
		"\u03f4\u01fb\2\u1639\u163b\5\u03be\u01e0\2\u163a\u1639\3\2\2\2\u163a\u163b"+
		"\3\2\2\2\u163b\u1642\3\2\2\2\u163c\u163e\5\u03be\u01e0\2\u163d\u163f\5"+
		"\u029e\u0150\2\u163e\u163d\3\2\2\2\u163e\u163f\3\2\2\2\u163f\u1642\3\2"+
		"\2\2\u1640\u1642\5\u029e\u0150\2\u1641\u1638\3\2\2\2\u1641\u163c\3\2\2"+
		"\2\u1641\u1640\3\2\2\2\u1641\u1642\3\2\2\2\u1642\u029d\3\2\2\2\u1643\u1644"+
		"\tH\2\2\u1644\u1645\5\u03f4\u01fb\2\u1645\u029f\3\2\2\2\u1646\u164d\5"+
		"\u034a\u01a6\2\u1647\u164d\5\u0356\u01ac\2\u1648\u164d\5\u02bc\u015f\2"+
		"\u1649\u164d\5\u0330\u0199\2\u164a\u164d\5\u0336\u019c\2\u164b\u164d\5"+
		"\u0338\u019d\2\u164c\u1646\3\2\2\2\u164c\u1647\3\2\2\2\u164c\u1648\3\2"+
		"\2\2\u164c\u1649\3\2\2\2\u164c\u164a\3\2\2\2\u164c\u164b\3\2\2\2\u164d"+
		"\u02a1\3\2\2\2\u164e\u1653\5\u02a4\u0153\2\u164f\u1653\5\u02a6\u0154\2"+
		"\u1650\u1653\5\u02a8\u0155\2\u1651\u1653\5\u02aa\u0156\2\u1652\u164e\3"+
		"\2\2\2\u1652\u164f\3\2\2\2\u1652\u1650\3\2\2\2\u1652\u1651\3\2\2\2\u1653"+
		"\u02a3\3\2\2\2\u1654\u1655\7S\2\2\u1655\u1656\5\u0404\u0203\2\u1656\u02a5"+
		"\3\2\2\2\u1657\u1658\7\u0199\2\2\u1658\u165e\5\u0404\u0203\2\u1659\u165b"+
		"\7\u02e8\2\2\u165a\u165c\5\u0374\u01bb\2\u165b\u165a\3\2\2\2\u165b\u165c"+
		"\3\2\2\2\u165c\u165d\3\2\2\2\u165d\u165f\7\u02e9\2\2\u165e\u1659\3\2\2"+
		"\2\u165e\u165f\3\2\2\2\u165f\u02a7\3\2\2\2\u1660\u1661\7\u00ce\2\2\u1661"+
		"\u1676\5\u0404\u0203\2\u1662\u1667\7\u0117\2\2\u1663\u1665\7\u02ee\2\2"+
		"\u1664\u1663\3\2\2\2\u1664\u1665\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u1668"+
		"\5\u0402\u0202\2\u1667\u1664\3\2\2\2\u1668\u1669\3\2\2\2\u1669\u1667\3"+
		"\2\2\2\u1669\u166a\3\2\2\2\u166a\u1677\3\2\2\2\u166b\u166c\7>\2\2\u166c"+
		"\u166d\7W\2\2\u166d\u1672\7\u0117\2\2\u166e\u1670\7\u02ee\2\2\u166f\u166e"+
		"\3\2\2\2\u166f\u1670\3\2\2\2\u1670\u1671\3\2\2\2\u1671\u1673\5\u0402\u0202"+
		"\2\u1672\u166f\3\2\2\2\u1673\u1674\3\2\2\2\u1674\u1672\3\2\2\2\u1674\u1675"+
		"\3\2\2\2\u1675\u1677\3\2\2\2\u1676\u1662\3\2\2\2\u1676\u166b\3\2\2\2\u1677"+
		"\u02a9\3\2\2\2\u1678\u1679\7\u0199\2\2\u1679\u167a\5\u0402\u0202\2\u167a"+
		"\u167d\7\u00dc\2\2\u167b\u167e\5\u02bc\u015f\2\u167c\u167e\5\u0376\u01bc"+
		"\2\u167d\u167b\3\2\2\2\u167d\u167c\3\2\2\2\u167e\u1680\3\2\2\2\u167f\u1681"+
		"\5\u03be\u01e0\2\u1680\u167f\3\2\2\2\u1680\u1681\3\2\2\2\u1681\u02ab\3"+
		"\2\2\2\u1682\u1688\5\u02ae\u0158\2\u1683\u1688\5\u02b0\u0159\2\u1684\u1688"+
		"\5\u02b2\u015a\2\u1685\u1688\5\u02b6\u015c\2\u1686\u1688\5\u02b8\u015d"+
		"\2\u1687\u1682\3\2\2\2\u1687\u1683\3\2\2\2\u1687\u1684\3\2\2\2\u1687\u1685"+
		"\3\2\2\2\u1687\u1686\3\2\2\2\u1688\u02ad\3\2\2\2\u1689\u168a\7\u021f\2"+
		"\2\u168a\u1698\7\u0268\2\2\u168b\u168c\7\u01dd\2\2\u168c\u1699\tI\2\2"+
		"\u168d\u168e\7\u011b\2\2\u168e\u1692\7\u0129\2\2\u168f\u1693\7\u021a\2"+
		"\2\u1690\u1691\7\u01dd\2\2\u1691\u1693\7\\\2\2\u1692\u168f\3\2\2\2\u1692"+
		"\u1690\3\2\2\2\u1693\u1699\3\2\2\2\u1694\u1695\7\u0283\2\2\u1695\u1696"+
		"\7\u0201\2\2\u1696\u1697\7\u0215\2\2\u1697\u1699\5\u0472\u023a\2\u1698"+
		"\u168b\3\2\2\2\u1698\u168d\3\2\2\2\u1698\u1694\3\2\2\2\u1698\u1699\3\2"+
		"\2\2\u1699\u169c\3\2\2\2\u169a\u169b\7\u0164\2\2\u169b\u169d\5\u049e\u0250"+
		"\2\u169c\u169a\3\2\2\2\u169c\u169d\3\2\2\2\u169d\u02af\3\2\2\2\u169e\u169f"+
		"\7\u021f\2\2\u169f\u16a9\tJ\2\2\u16a0\u16aa\7\16\2\2\u16a1\u16a3\7\u02ee"+
		"\2\2\u16a2\u16a1\3\2\2\2\u16a2\u16a3\3\2\2\2\u16a3\u16a4\3\2\2\2\u16a4"+
		"\u16a6\5\u0400\u0201\2\u16a5\u16a2\3\2\2\2\u16a6\u16a7\3\2\2\2\u16a7\u16a5"+
		"\3\2\2\2\u16a7\u16a8\3\2\2\2\u16a8\u16aa\3\2\2\2\u16a9\u16a0\3\2\2\2\u16a9"+
		"\u16a5\3\2\2\2\u16aa\u16ab\3\2\2\2\u16ab\u16ac\t\37\2\2\u16ac\u02b1\3"+
		"\2\2\2\u16ad\u16af\7[\2\2\u16ae\u16b0\7\u029d\2\2\u16af\u16ae\3\2\2\2"+
		"\u16af\u16b0\3\2\2\2\u16b0\u16be\3\2\2\2\u16b1\u16b2\7Z\2\2\u16b2\u16bf"+
		"\5\u0376\u01bc\2\u16b3\u16bc\7\u00da\2\2\u16b4\u16b5\7o\2\2\u16b5\u16bd"+
		"\5\u0376\u01bc\2\u16b6\u16bd\7n\2\2\u16b7\u16ba\5\u0376\u01bc\2\u16b8"+
		"\u16b9\7\u02ee\2\2\u16b9\u16bb\5\u0376\u01bc\2\u16ba\u16b8\3\2\2\2\u16ba"+
		"\u16bb\3\2\2\2\u16bb\u16bd\3\2\2\2\u16bc\u16b4\3\2\2\2\u16bc\u16b6\3\2"+
		"\2\2\u16bc\u16b7\3\2\2\2\u16bd\u16bf\3\2\2\2\u16be\u16b1\3\2\2\2\u16be"+
		"\u16b3\3\2\2\2\u16be\u16bf\3\2\2\2\u16bf\u16c1\3\2\2\2\u16c0\u16c2\5\u02b4"+
		"\u015b\2\u16c1\u16c0\3\2\2\2\u16c1\u16c2\3\2\2\2\u16c2\u02b3\3\2\2\2\u16c3"+
		"\u16c5\7\u029e\2\2\u16c4\u16c6\tK\2\2\u16c5\u16c4\3\2\2\2\u16c5\u16c6"+
		"\3\2\2\2\u16c6\u16c8\3\2\2\2\u16c7\u16c9\tL\2\2\u16c8\u16c7\3\2\2\2\u16c8"+
		"\u16c9\3\2\2\2\u16c9\u02b5\3\2\2\2\u16ca\u16cc\7\u0201\2\2\u16cb\u16cd"+
		"\7\u029d\2\2\u16cc\u16cb\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16d5\3\2\2"+
		"\2\u16ce\u16d0\7\u0266\2\2\u16cf\u16d1\7\u020a\2\2\u16d0\u16cf\3\2\2\2"+
		"\u16d0\u16d1\3\2\2\2\u16d1\u16d2\3\2\2\2\u16d2\u16d6\5\u0470\u0239\2\u16d3"+
		"\u16d4\7\u00da\2\2\u16d4\u16d6\5\u049e\u0250\2\u16d5\u16ce\3\2\2\2\u16d5"+
		"\u16d3\3\2\2\2\u16d5\u16d6\3\2\2\2\u16d6\u02b7\3\2\2\2\u16d7\u16d8\7\u020a"+
		"\2\2\u16d8\u16d9\5\u0470\u0239\2\u16d9\u02b9\3\2\2\2\u16da\u16db\7\u00c7"+
		"\2\2\u16db\u16e0\7\u01c2\2\2\u16dc\u16dd\7\u021f\2\2\u16dd\u16de\7\u023a"+
		"\2\2\u16de\u16df\7\u02fc\2\2\u16df\u16e1\5\u049e\u0250\2\u16e0\u16dc\3"+
		"\2\2\2\u16e0\u16e1\3\2\2\2\u16e1\u16e4\3\2\2\2\u16e2\u16e3\7\u0117\2\2"+
		"\u16e3\u16e5\5\u040a\u0206\2\u16e4\u16e2\3\2\2\2\u16e4\u16e5\3\2\2\2\u16e5"+
		"\u16e6\3\2\2\2\u16e6\u16ec\7\u00dc\2\2\u16e7\u16ed\5\u02bc\u015f\2\u16e8"+
		"\u16ed\5\u0330\u0199\2\u16e9\u16ed\5\u0336\u019c\2\u16ea\u16ed\5\u0338"+
		"\u019d\2\u16eb\u16ed\5\u034a\u01a6\2\u16ec\u16e7\3\2\2\2\u16ec\u16e8\3"+
		"\2\2\2\u16ec\u16e9\3\2\2\2\u16ec\u16ea\3\2\2\2\u16ec\u16eb\3\2\2\2\u16ed"+
		"\u02bb\3\2\2\2\u16ee\u16f0\5\u02be\u0160\2\u16ef\u16ee\3\2\2\2\u16ef\u16f0"+
		"\3\2\2\2\u16f0\u16f1\3\2\2\2\u16f1\u16f6\5\u016a\u00b6\2\u16f2\u16f5\5"+
		"\u032a\u0196\2\u16f3\u16f5\5\u0326\u0194\2\u16f4\u16f2\3\2\2\2\u16f4\u16f3"+
		"\3\2\2\2\u16f5\u16f8\3\2\2\2\u16f6\u16f4\3\2\2\2\u16f6\u16f7\3\2\2\2\u16f7"+
		"\u02bd\3\2\2\2\u16f8\u16f6\3\2\2\2\u16f9\u16fe\7\u029c\2\2\u16fa\u16fc"+
		"\7\u02ee\2\2\u16fb\u16fa\3\2\2\2\u16fb\u16fc\3\2\2\2\u16fc\u16fd\3\2\2"+
		"\2\u16fd\u16ff\5\u02c0\u0161\2\u16fe\u16fb\3\2\2\2\u16ff\u1700\3\2\2\2"+
		"\u1700\u16fe\3\2\2\2\u1700\u1701\3\2\2\2\u1701\u02bf\3\2\2\2\u1702\u1704"+
		"\5\u047a\u023e\2\u1703\u1705\5\u043e\u0220\2\u1704\u1703\3\2\2\2\u1704"+
		"\u1705\3\2\2\2\u1705\u1706\3\2\2\2\u1706\u1707\7\31\2\2\u1707\u1708\7"+
		"\u02e8\2\2\u1708\u170a\5\u016a\u00b6\2\u1709\u170b\5\u0326\u0194\2\u170a"+
		"\u1709\3\2\2\2\u170a\u170b\3\2\2\2\u170b\u170c\3\2\2\2\u170c\u170e\7\u02e9"+
		"\2\2\u170d\u170f\5\u02c2\u0162\2\u170e\u170d\3\2\2\2\u170e\u170f\3\2\2"+
		"\2\u170f\u1711\3\2\2\2\u1710\u1712\5\u02c4\u0163\2\u1711\u1710\3\2\2\2"+
		"\u1711\u1712\3\2\2\2\u1712\u02c1\3\2\2\2\u1713\u1714\7\u0211\2\2\u1714"+
		"\u1715\tM\2\2\u1715\u1716\7\u00d1\2\2\u1716\u1717\7?\2\2\u1717\u1719\5"+
		"\u0484\u0243\2\u1718\u171a\7\32\2\2\u1719\u1718\3\2\2\2\u1719\u171a\3"+
		"\2\2\2\u171a\u171c\3\2\2\2\u171b\u171d\7\u0096\2\2\u171c\u171b\3\2\2\2"+
		"\u171c\u171d\3\2\2\2\u171d\u1720\3\2\2\2\u171e\u171f\7\u018b\2\2\u171f"+
		"\u1721\7\u00d1\2\2\u1720\u171e\3\2\2\2\u1720\u1721\3\2\2\2\u1721\u1724"+
		"\3\2\2\2\u1722\u1723\7\u018b\2\2\u1723\u1725\7\u0124\2\2\u1724\u1722\3"+
		"\2\2\2\u1724\u1725\3\2\2\2\u1725\u1738\3\2\2\2\u1726\u1727\7\u02ee\2\2"+
		"\u1727\u1729\5\u0484\u0243\2\u1728\u172a\7\32\2\2\u1729\u1728\3\2\2\2"+
		"\u1729\u172a\3\2\2\2\u172a\u172c\3\2\2\2\u172b\u172d\7\u0096\2\2\u172c"+
		"\u172b\3\2\2\2\u172c\u172d\3\2\2\2\u172d\u1730\3\2\2\2\u172e\u172f\7\u018b"+
		"\2\2\u172f\u1731\7\u00d1\2\2\u1730\u172e\3\2\2\2\u1730\u1731\3\2\2\2\u1731"+
		"\u1734\3\2\2\2\u1732\u1733\7\u018b\2\2\u1733\u1735\7\u0124\2\2\u1734\u1732"+
		"\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1737\3\2\2\2\u1736\u1726\3\2\2\2\u1737"+
		"\u173a\3\2\2\2\u1738\u1736\3\2\2\2\u1738\u1739\3\2\2\2\u1739\u173b\3\2"+
		"\2\2\u173a\u1738\3\2\2\2\u173b\u173c\7\u021f\2\2\u173c\u173d\5\u0484\u0243"+
		"\2\u173d\u02c3\3\2\2\2\u173e\u173f\7{\2\2\u173f\u1740\5\u043c\u021f\2"+
		"\u1740\u1741\7\u021f\2\2\u1741\u1742\5\u0484\u0243\2\u1742\u1743\7\u0266"+
		"\2\2\u1743\u1744\5\u0376\u01bc\2\u1744\u1745\7\u008e\2\2\u1745\u1746\5"+
		"\u0376\u01bc\2\u1746\u02c5\3\2\2\2\u1747\u174d\5\u02ca\u0166\2\u1748\u1749"+
		"\7\u02e8\2\2\u1749\u174a\5\u016a\u00b6\2\u174a\u174b\7\u02e9\2\2\u174b"+
		"\u174d\3\2\2\2\u174c\u1747\3\2\2\2\u174c\u1748\3\2\2\2\u174d\u02c7\3\2"+
		"\2\2\u174e\u1750\7\u0275\2\2\u174f\u1751\7\16\2\2\u1750\u174f\3\2\2\2"+
		"\u1750\u1751\3\2\2\2\u1751\u1755\3\2\2\2\u1752\u1755\7\u0113\2\2\u1753"+
		"\u1755\7\u0158\2\2\u1754\u174e\3\2\2\2\u1754\u1752\3\2\2\2\u1754\u1753"+
		"\3\2\2\2\u1755\u1756\3\2\2\2\u1756\u1757\5\u02c6\u0164\2\u1757\u02c9\3"+
		"\2\2\2\u1758\u175a\7\u0216\2\2\u1759\u175b\tN\2\2\u175a\u1759\3\2\2\2"+
		"\u175a\u175b\3\2\2\2\u175b\u1765\3\2\2\2\u175c\u1766\7\u02eb\2\2\u175d"+
		"\u175f\7\u02ee\2\2\u175e\u175d\3\2\2\2\u175e\u175f\3\2\2\2\u175f\u1760"+
		"\3\2\2\2\u1760\u1762\5\u02cc\u0167\2\u1761\u175e\3\2\2\2\u1762\u1763\3"+
		"\2\2\2\u1763\u1761\3\2\2\2\u1763\u1764\3\2\2\2\u1764\u1766\3\2\2\2\u1765"+
		"\u175c\3\2\2\2\u1765\u1761\3\2\2\2\u1766\u1768\3\2\2\2\u1767\u1769\5\u03f4"+
		"\u01fb\2\u1768\u1767\3\2\2\2\u1768\u1769\3\2\2\2\u1769\u176a\3\2\2\2\u176a"+
		"\u176c\5\u02ce\u0168\2\u176b\u176d\5\u03f2\u01fa\2\u176c\u176b\3\2\2\2"+
		"\u176c\u176d\3\2\2\2\u176d\u176f\3\2\2\2\u176e\u1770\5\u02f8\u017d\2\u176f"+
		"\u176e\3\2\2\2\u176f\u1770\3\2\2\2\u1770\u1772\3\2\2\2\u1771\u1773\5\u02fc"+
		"\u017f\2\u1772\u1771\3\2\2\2\u1772\u1773\3\2\2\2\u1773\u1775\3\2\2\2\u1774"+
		"\u1776\5\u0308\u0185\2\u1775\u1774\3\2\2\2\u1775\u1776\3\2\2\2\u1776\u02cb"+
		"\3\2\2\2\u1777\u1779\5\u02d0\u0169\2\u1778\u177a\5\u03ee\u01f8\2\u1779"+
		"\u1778\3\2\2\2\u1779\u177a\3\2\2\2\u177a\u02cd\3\2\2\2\u177b\u177c\7\u00e0"+
		"\2\2\u177c\u177d\5\u02d2\u016a\2\u177d\u02cf\3\2\2\2\u177e\u177f\5\u040a"+
		"\u0206\2\u177f\u1780\7\u02e1\2\2\u1780\u1781\7\u02eb\2\2\u1781\u1789\3"+
		"\2\2\2\u1782\u1783\5\u0492\u024a\2\u1783\u1784\7\u02e1\2\2\u1784\u1786"+
		"\3\2\2\2\u1785\u1782\3\2\2\2\u1785\u1786\3\2\2\2\u1786\u1787\3\2\2\2\u1787"+
		"\u1789\5\u0376\u01bc\2\u1788\u177e\3\2\2\2\u1788\u1785\3\2\2\2\u1789\u02d1"+
		"\3\2\2\2\u178a\u178c\7\u02ee\2\2\u178b\u178a\3\2\2\2\u178b\u178c\3\2\2"+
		"\2\u178c\u178d\3\2\2\2\u178d\u178f\5\u02d4\u016b\2\u178e\u178b\3\2\2\2"+
		"\u178f\u1790\3\2\2\2\u1790\u178e\3\2\2\2\u1790\u1791\3\2\2\2\u1791\u02d3"+
		"\3\2\2\2\u1792\u1796\5\u02d6\u016c\2\u1793\u1795\5\u02da\u016e\2\u1794"+
		"\u1793\3\2\2\2\u1795\u1798\3\2\2\2\u1796\u1794\3\2\2\2\u1796\u1797\3\2"+
		"\2\2\u1797\u179b\3\2\2\2\u1798\u1796\3\2\2\2\u1799\u179c\5\u02e6\u0174"+
		"\2\u179a\u179c\5\u02f2\u017a\2\u179b\u1799\3\2\2\2\u179b\u179a\3\2\2\2"+
		"\u179b\u179c\3\2\2\2\u179c\u02d5\3\2\2\2\u179d\u17a1\5\u02d8\u016d\2\u179e"+
		"\u17a0\5\u02e4\u0173\2\u179f\u179e\3\2\2\2\u17a0\u17a3\3\2\2\2\u17a1\u179f"+
		"\3\2\2\2\u17a1\u17a2\3\2\2\2\u17a2\u17a5\3\2\2\2\u17a3\u17a1\3\2\2\2\u17a4"+
		"\u17a6\5\u03f0\u01f9\2\u17a5\u17a4\3\2\2\2\u17a5\u17a6\3\2\2\2\u17a6\u02d7"+
		"\3\2\2\2\u17a7\u17aa\5\u0368\u01b5\2\u17a8\u17ab\5\u02e6\u0174\2\u17a9"+
		"\u17ab\5\u02f2\u017a\2\u17aa\u17a8\3\2\2\2\u17aa\u17a9\3\2\2\2\u17aa\u17ab"+
		"\3\2\2\2\u17ab\u17bf\3\2\2\2\u17ac\u17ad\7\u02e8\2\2\u17ad\u17b1\5\u02d4"+
		"\u016b\2\u17ae\u17b0\5\u02c8\u0165\2\u17af\u17ae\3\2\2\2\u17b0\u17b3\3"+
		"\2\2\2\u17b1\u17af\3\2\2\2\u17b1\u17b2\3\2\2\2\u17b2\u17b4\3\2\2\2\u17b3"+
		"\u17b1\3\2\2\2\u17b4\u17b7\7\u02e9\2\2\u17b5\u17b8\5\u02e6\u0174\2\u17b6"+
		"\u17b8\5\u02f2\u017a\2\u17b7\u17b5\3\2\2\2\u17b7\u17b6\3\2\2\2\u17b7\u17b8"+
		"\3\2\2\2\u17b8\u17bf\3\2\2\2\u17b9\u17ba\7\u0197\2\2\u17ba\u17bb\7\u02e8"+
		"\2\2\u17bb\u17bc\5\u0368\u01b5\2\u17bc\u17bd\7\u02e9\2\2\u17bd\u17bf\3"+
		"\2\2\2\u17be\u17a7\3\2\2\2\u17be\u17ac\3\2\2\2\u17be\u17b9\3\2\2\2\u17bf"+
		"\u02d9\3\2\2\2\u17c0\u17c2\5\u02e2\u0172\2\u17c1\u17c0\3\2\2\2\u17c1\u17c2"+
		"\3\2\2\2\u17c2\u17c4\3\2\2\2\u17c3\u17c5\tO\2\2\u17c4\u17c3\3\2\2\2\u17c4"+
		"\u17c5\3\2\2\2\u17c5\u17c8\3\2\2\2\u17c6\u17c9\7\u010d\2\2\u17c7\u17c9"+
		"\5\u02e0\u0171\2\u17c8\u17c6\3\2\2\2\u17c8\u17c7\3\2\2\2\u17c8\u17c9\3"+
		"\2\2\2\u17c9\u17ca\3\2\2\2\u17ca\u17cb\7\u011f\2\2\u17cb\u17cd\5\u02d6"+
		"\u016c\2\u17cc\u17ce\5\u02e2\u0172\2\u17cd\u17cc\3\2\2\2\u17cd\u17ce\3"+
		"\2\2\2\u17ce\u17d3\3\2\2\2\u17cf\u17d2\5\u02dc\u016f\2\u17d0\u17d2\5\u02de"+
		"\u0170\2\u17d1\u17cf\3\2\2\2\u17d1\u17d0\3\2\2\2\u17d2\u17d5\3\2\2\2\u17d3"+
		"\u17d1\3\2\2\2\u17d3\u17d4\3\2\2\2\u17d4\u02db\3\2\2\2\u17d5\u17d3\3\2"+
		"\2\2\u17d6\u17d7\7\u0198\2\2\u17d7\u17d8\5\u0372\u01ba\2\u17d8\u02dd\3"+
		"\2\2\2\u17d9\u17da\7\u0284\2\2\u17da\u17db\5\u043e\u0220\2\u17db\u02df"+
		"\3\2\2\2\u17dc\u17de\tP\2\2\u17dd\u17df\7\u01a3\2\2\u17de\u17dd\3\2\2"+
		"\2\u17de\u17df\3\2\2\2\u17df\u02e1\3\2\2\2\u17e0\u17e1\7\u01af\2\2\u17e1"+
		"\u17e9\7?\2\2\u17e2\u17e5\7\u02e8\2\2\u17e3\u17e6\5\u016a\u00b6\2\u17e4"+
		"\u17e6\5\u0374\u01bb\2\u17e5\u17e3\3\2\2\2\u17e5\u17e4\3\2\2\2\u17e5\u17e6"+
		"\3\2\2\2\u17e6\u17e7\3\2\2\2\u17e7\u17ea\7\u02e9\2\2\u17e8\u17ea\5\u0374"+
		"\u01bb\2\u17e9\u17e2\3\2\2\2\u17e9\u17e8\3\2\2\2\u17ea\u02e3\3\2\2\2\u17eb"+
		"\u17ec\7\u028e\2\2\u17ec\u17ed\7.\2\2\u17ed\u17ee\tQ\2\2\u17ee\u17f4\5"+
		"\u0376\u01bc\2\u17ef\u17f0\7\31\2\2\u17f0\u17f1\7\u0192\2\2\u17f1\u17f2"+
		"\tR\2\2\u17f2\u17f4\5\u0376\u01bc\2\u17f3\u17eb\3\2\2\2\u17f3\u17ef\3"+
		"\2\2\2\u17f4\u02e5\3\2\2\2\u17f5\u17f7\7\u01c1\2\2\u17f6\u17f8\7\u02af"+
		"\2\2\u17f7\u17f6\3\2\2\2\u17f7\u17f8\3\2\2\2\u17f8\u17f9\3\2\2\2\u17f9"+
		"\u17fe\7\u02e8\2\2\u17fa\u17fc\7\u02ee\2\2\u17fb\u17fa\3\2\2\2\u17fb\u17fc"+
		"\3\2\2\2\u17fc\u17fd\3\2\2\2\u17fd\u17ff\5\u02e8\u0175\2\u17fe\u17fb\3"+
		"\2\2\2\u17ff\u1800\3\2\2\2\u1800\u17fe\3\2\2\2\u1800\u1801\3\2\2\2\u1801"+
		"\u1802\3\2\2\2\u1802\u1803\5\u02ea\u0176\2\u1803\u1804\5\u02ec\u0177\2"+
		"\u1804\u1805\7\u02e9\2\2\u1805\u02e7\3\2\2\2\u1806\u1807\5\u0480\u0241"+
		"\2\u1807\u1808\7\u02e8\2\2\u1808\u1809\5\u0376\u01bc\2\u1809\u180b\7\u02e9"+
		"\2\2\u180a\u180c\5\u03ee\u01f8\2\u180b\u180a\3\2\2\2\u180b\u180c\3\2\2"+
		"\2\u180c\u02e9\3\2\2\2\u180d\u1810\7\u00dc\2\2\u180e\u1811\5\u0484\u0243"+
		"\2\u180f\u1811\5\u043e\u0220\2\u1810\u180e\3\2\2\2\u1810\u180f\3\2\2\2"+
		"\u1811\u02eb\3\2\2\2\u1812\u1813\7\u0107\2\2\u1813\u1825\7\u02e8\2\2\u1814"+
		"\u1826\5\u016a\u00b6\2\u1815\u1817\7\u02ee\2\2\u1816\u1815\3\2\2\2\u1816"+
		"\u1817\3\2\2\2\u1817\u1818\3\2\2\2\u1818\u181a\7\24\2\2\u1819\u1816\3"+
		"\2\2\2\u181a\u181b\3\2\2\2\u181b\u1819\3\2\2\2\u181b\u181c\3\2\2\2\u181c"+
		"\u1826\3\2\2\2\u181d\u181f\7\u02ee\2\2\u181e\u181d\3\2\2\2\u181e\u181f"+
		"\3\2\2\2\u181f\u1820\3\2\2\2\u1820\u1822\5\u02ee\u0178\2\u1821\u181e\3"+
		"\2\2\2\u1822\u1823\3\2\2\2\u1823\u1821\3\2\2\2\u1823\u1824\3\2\2\2\u1824"+
		"\u1826\3\2\2\2\u1825\u1814\3\2\2\2\u1825\u1819\3\2\2\2\u1825\u1821\3\2"+
		"\2\2\u1826\u1827\3\2\2\2\u1827\u1828\7\u02e9\2\2\u1828\u02ed\3\2\2\2\u1829"+
		"\u182b\5\u02f0\u0179\2\u182a\u182c\5\u03ee\u01f8\2\u182b\u182a\3\2\2\2"+
		"\u182b\u182c\3\2\2\2\u182c\u02ef\3\2\2\2\u182d\u1834\5\u0376\u01bc\2\u182e"+
		"\u1830\7\u02e8\2\2\u182f\u1831\5\u0374\u01bb\2\u1830\u182f\3\2\2\2\u1830"+
		"\u1831\3\2\2\2\u1831\u1832\3\2\2\2\u1832\u1834\7\u02e9\2\2\u1833\u182d"+
		"\3\2\2\2\u1833\u182e\3\2\2\2\u1834\u02f1\3\2\2\2\u1835\u1838\7\u0279\2"+
		"\2\u1836\u1837\tS\2\2\u1837\u1839\7\u018b\2\2\u1838\u1836\3\2\2\2\u1838"+
		"\u1839\3\2\2\2\u1839\u183a\3\2\2\2\u183a\u183d\7\u02e8\2\2\u183b\u183e"+
		"\5\u0484\u0243\2\u183c\u183e\5\u043e\u0220\2\u183d\u183b\3\2\2\2\u183d"+
		"\u183c\3\2\2\2\u183e\u183f\3\2\2\2\u183f\u1840\5\u02ea\u0176\2\u1840\u1841"+
		"\5\u02f4\u017b\2\u1841\u1842\7\u02e9\2\2\u1842\u02f3\3\2\2\2\u1843\u1844"+
		"\7\u0107\2\2\u1844\u1849\7\u02e8\2\2\u1845\u1847\7\u02ee\2\2\u1846\u1845"+
		"\3\2\2\2\u1846\u1847\3\2\2\2\u1847\u1848\3\2\2\2\u1848\u184a\5\u02f6\u017c"+
		"\2\u1849\u1846\3\2\2\2\u184a\u184b\3\2\2\2\u184b\u1849\3\2\2\2\u184b\u184c"+
		"\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u184e\7\u02e9\2\2\u184e\u02f5\3\2\2"+
		"\2\u184f\u1852\5\u0484\u0243\2\u1850\u1852\5\u043e\u0220\2\u1851\u184f"+
		"\3\2\2\2\u1851\u1850\3\2\2\2\u1852\u1862\3\2\2\2\u1853\u1860\7\31\2\2"+
		"\u1854\u1861\5\u0460\u0231\2\u1855\u185a\7\u02e8\2\2\u1856\u1858\7\u02ee"+
		"\2\2\u1857\u1856\3\2\2\2\u1857\u1858\3\2\2\2\u1858\u1859\3\2\2\2\u1859"+
		"\u185b\5\u0460\u0231\2\u185a\u1857\3\2\2\2\u185b\u185c\3\2\2\2\u185c\u185a"+
		"\3\2\2\2\u185c\u185d\3\2\2\2\u185d\u185e\3\2\2\2\u185e\u185f\7\u02e9\2"+
		"\2\u185f\u1861\3\2\2\2\u1860\u1854\3\2\2\2\u1860\u1855\3\2\2\2\u1861\u1863"+
		"\3\2\2\2\u1862\u1853\3\2\2\2\u1862\u1863\3\2\2\2\u1863\u02f7\3\2\2\2\u1864"+
		"\u1865\7c\2\2\u1865\u1867\7?\2\2\u1866\u1868\7\u0173\2\2\u1867\u1866\3"+
		"\2\2\2\u1867\u1868\3\2\2\2\u1868\u1869\3\2\2\2\u1869\u186b\5\u0372\u01ba"+
		"\2\u186a\u186c\5\u02fa\u017e\2\u186b\u186a\3\2\2\2\u186b\u186c\3\2\2\2"+
		"\u186c\u1876\3\2\2\2\u186d\u186e\5\u02fa\u017e\2\u186e\u186f\7c\2\2\u186f"+
		"\u1871\7?\2\2\u1870\u1872\7\u0173\2\2\u1871\u1870\3\2\2\2\u1871\u1872"+
		"\3\2\2\2\u1872\u1873\3\2\2\2\u1873\u1874\5\u0372\u01ba\2\u1874\u1876\3"+
		"\2\2\2\u1875\u1864\3\2\2\2\u1875\u186d\3\2\2\2\u1876\u02f9\3\2\2\2\u1877"+
		"\u1878\7\u0238\2\2\u1878\u1879\7\u029c\2\2\u1879\u187a\5\u0372\u01ba\2"+
		"\u187a\u02fb\3\2\2\2\u187b\u187c\7\u00e8\2\2\u187c\u1881\7?\2\2\u187d"+
		"\u187f\7\u02ee\2\2\u187e\u187d\3\2\2\2\u187e\u187f\3\2\2\2\u187f\u1880"+
		"\3\2\2\2\u1880\u1882\5\u02fe\u0180\2\u1881\u187e\3\2\2\2\u1882\u1883\3"+
		"\2\2\2\u1883\u1881\3\2\2\2\u1883\u1884\3\2\2\2\u1884\u1886\3\2\2\2\u1885"+
		"\u1887\5\u0306\u0184\2\u1886\u1885\3\2\2\2\u1886\u1887\3\2\2\2\u1887\u1896"+
		"\3\2\2\2\u1888\u1893\5\u0306\u0184\2\u1889\u188a\7\u00e8\2\2\u188a\u188f"+
		"\7?\2\2\u188b\u188d\7\u02ee\2\2\u188c\u188b\3\2\2\2\u188c\u188d\3\2\2"+
		"\2\u188d\u188e\3\2\2\2\u188e\u1890\5\u02fe\u0180\2\u188f\u188c\3\2\2\2"+
		"\u1890\u1891\3\2\2\2\u1891\u188f\3\2\2\2\u1891\u1892\3\2\2\2\u1892\u1894"+
		"\3\2\2\2\u1893\u1889\3\2\2\2\u1893\u1894\3\2\2\2\u1894\u1896\3\2\2\2\u1895"+
		"\u187b\3\2\2\2\u1895\u1888\3\2\2\2\u1896\u02fd\3\2\2\2\u1897\u189b\5\u0302"+
		"\u0182\2\u1898\u189b\5\u0300\u0181\2\u1899\u189b\5\u0376\u01bc\2\u189a"+
		"\u1897\3\2\2\2\u189a\u1898\3\2\2\2\u189a\u1899\3\2\2\2\u189b\u02ff\3\2"+
		"\2\2\u189c\u189d\tT\2\2\u189d\u18a2\7\u02e8\2\2\u189e\u18a0\7\u02ee\2"+
		"\2\u189f\u189e\3\2\2\2\u189f\u18a0\3\2\2\2\u18a0\u18a1\3\2\2\2\u18a1\u18a3"+
		"\5\u0304\u0183\2\u18a2\u189f\3\2\2\2\u18a3\u18a4\3\2\2\2\u18a4\u18a2\3"+
		"\2\2\2\u18a4\u18a5\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7\7\u02e9\2\2"+
		"\u18a7\u0301\3\2\2\2\u18a8\u18a9\7\u00e9\2\2\u18a9\u18aa\7\u0220\2\2\u18aa"+
		"\u18af\7\u02e8\2\2\u18ab\u18ad\7\u02ee\2\2\u18ac\u18ab\3\2\2\2\u18ac\u18ad"+
		"\3\2\2\2\u18ad\u18ae\3\2\2\2\u18ae\u18b0\5\u0304\u0183\2\u18af\u18ac\3"+
		"\2\2\2\u18b0\u18b1\3\2\2\2\u18b1\u18af\3\2\2\2\u18b1\u18b2\3\2\2\2\u18b2"+
		"\u18b3\3\2\2\2\u18b3\u18b4\7\u02e9\2\2\u18b4\u0303\3\2\2\2\u18b5\u18bd"+
		"\5\u0300\u0181\2\u18b6\u18b8\7\u02e8\2\2\u18b7\u18b9\5\u0374\u01bb\2\u18b8"+
		"\u18b7\3\2\2\2\u18b8\u18b9\3\2\2\2\u18b9\u18ba\3\2\2\2\u18ba\u18bd\7\u02e9"+
		"\2\2\u18bb\u18bd\5\u0376\u01bc\2\u18bc\u18b5\3\2\2\2\u18bc\u18b6\3\2\2"+
		"\2\u18bc\u18bb\3\2\2\2\u18bd\u0305\3\2\2\2\u18be\u18bf\7\u00ed\2\2\u18bf"+
		"\u18c0\5\u0372\u01ba\2\u18c0\u0307\3\2\2\2\u18c1\u18c5\7\u015c\2\2\u18c2"+
		"\u18c4\5\u030a\u0186\2\u18c3\u18c2\3\2\2\2\u18c4\u18c7\3\2\2\2\u18c5\u18c3"+
		"\3\2\2\2\u18c5\u18c6\3\2\2\2\u18c6\u18c9\3\2\2\2\u18c7\u18c5\3\2\2\2\u18c8"+
		"\u18ca\5\u030c\u0187\2\u18c9\u18c8\3\2\2\2\u18c9\u18ca\3\2\2\2\u18ca\u18ce"+
		"\3\2\2\2\u18cb\u18cd\5\u030e\u0188\2\u18cc\u18cb\3\2\2\2\u18cd\u18d0\3"+
		"\2\2\2\u18ce\u18cc\3\2\2\2\u18ce\u18cf\3\2\2\2\u18cf\u18d1\3\2\2\2\u18d0"+
		"\u18ce\3\2\2\2\u18d1\u18d2\5\u0310\u0189\2\u18d2\u0309\3\2\2\2\u18d3\u18d4"+
		"\tU\2\2\u18d4\u18dc\7\u0168\2\2\u18d5\u18d9\7\u0276\2\2\u18d6\u18da\7"+
		"\u0099\2\2\u18d7\u18d8\7\u0229\2\2\u18d8\u18da\7\u01e3\2\2\u18d9\u18d6"+
		"\3\2\2\2\u18d9\u18d7\3\2\2\2\u18da\u18dc\3\2\2\2\u18db\u18d3\3\2\2\2\u18db"+
		"\u18d5\3\2\2\2\u18dc\u030b\3\2\2\2\u18dd\u18de\7\u01f9\2\2\u18de\u18df"+
		"\tV\2\2\u18df\u18e0\7\u0206\2\2\u18e0\u030d\3\2\2\2\u18e1\u18e2\7\u01e3"+
		"\2\2\u18e2\u18e3\5\u046a\u0236\2\u18e3\u18e4\7\u0198\2\2\u18e4\u18e5\7"+
		"\u02e8\2\2\u18e5\u18e6\5\u016a\u00b6\2\u18e6\u18e7\7\u02e9\2\2\u18e7\u18eb"+
		"\5\u0312\u018a\2\u18e8\u18ea\5\u030a\u0186\2\u18e9\u18e8\3\2\2\2\u18ea"+
		"\u18ed\3\2\2\2\u18eb\u18e9\3\2\2\2\u18eb\u18ec\3\2\2\2\u18ec\u030f\3\2"+
		"\2\2\u18ed\u18eb\3\2\2\2\u18ee\u18ef\7\u0145\2\2\u18ef\u18f1\5\u0478\u023d"+
		"\2\u18f0\u18ee\3\2\2\2\u18f0\u18f1\3\2\2\2\u18f1\u18f2\3\2\2\2\u18f2\u18f6"+
		"\5\u0312\u018a\2\u18f3\u18f5\5\u030a\u0186\2\u18f4\u18f3\3\2\2\2\u18f5"+
		"\u18f8\3\2\2\2\u18f6\u18f4\3\2\2\2\u18f6\u18f7\3\2\2\2\u18f7\u18f9\3\2"+
		"\2\2\u18f8\u18f6\3\2\2\2\u18f9\u18fa\5\u031a\u018e\2\u18fa\u0311\3\2\2"+
		"\2\u18fb\u18fd\5\u0314\u018b\2\u18fc\u18fb\3\2\2\2\u18fc\u18fd\3\2\2\2"+
		"\u18fd\u18fe\3\2\2\2\u18fe\u18ff\7\u0099\2\2\u18ff\u1900\7?\2\2\u1900"+
		"\u1901\5\u0316\u018c\2\u1901\u1902\7\u0150\2\2\u1902\u1903\5\u0316\u018c"+
		"\2\u1903\u0313\3\2\2\2\u1904\u1905\7\u01af\2\2\u1905\u1906\7?\2\2\u1906"+
		"\u1907\5\u0316\u018c\2\u1907\u0315\3\2\2\2\u1908\u190d\7\u02e8\2\2\u1909"+
		"\u190b\7\u02ee\2\2\u190a\u1909\3\2\2\2\u190a\u190b\3\2\2\2\u190b\u190c"+
		"\3\2\2\2\u190c\u190e\5\u0318\u018d\2\u190d\u190a\3\2\2\2\u190e\u190f\3"+
		"\2\2\2\u190f\u190d\3\2\2\2\u190f\u1910\3\2\2\2\u1910\u1911\3\2\2\2\u1911"+
		"\u1912\7\u02e9\2\2\u1912\u0317\3\2\2\2\u1913\u1916\5\u0376\u01bc\2\u1914"+
		"\u1916\5\u02ca\u0166\2\u1915\u1913\3\2\2\2\u1915\u1914\3\2\2\2\u1916\u1918"+
		"\3\2\2\2\u1917\u1919\5\u03ee\u01f8\2\u1918\u1917\3\2\2\2\u1918\u1919\3"+
		"\2\2\2\u1919\u0319\3\2\2\2\u191a\u191c\5\u031c\u018f\2\u191b\u191a\3\2"+
		"\2\2\u191b\u191c\3\2\2\2\u191c\u191d\3\2\2\2\u191d\u1924\7\u02e8\2\2\u191e"+
		"\u1920\7\u02ee\2\2\u191f\u191e\3\2\2\2\u191f\u1920\3\2\2\2\u1920\u1921"+
		"\3\2\2\2\u1921\u1923\5\u031e\u0190\2\u1922\u191f\3\2\2\2\u1923\u1926\3"+
		"\2\2\2\u1924\u1922\3\2\2\2\u1924\u1925\3\2\2\2\u1925\u1927\3\2\2\2\u1926"+
		"\u1924\3\2\2\2\u1927\u1928\7\u02e9\2\2\u1928\u031b\3\2\2\2\u1929\u192f"+
		"\7\u0207\2\2\u192a\u1930\7\u027d\2\2\u192b\u192d\7\u027e\2\2\u192c\u192e"+
		"\7\16\2\2\u192d\u192c\3\2\2\2\u192d\u192e\3\2\2\2\u192e\u1930\3\2\2\2"+
		"\u192f\u192a\3\2\2\2\u192f\u192b\3\2\2\2\u192f\u1930\3\2\2\2\u1930\u1933"+
		"\3\2\2\2\u1931\u1932\tW\2\2\u1932\u1934\7\u019e\2\2\u1933\u1931\3\2\2"+
		"\2\u1933\u1934\3\2\2\2\u1934\u1936\3\2\2\2\u1935\u1937\5\u0322\u0192\2"+
		"\u1936\u1935\3\2\2\2\u1936\u1937\3\2\2\2\u1937\u031d\3\2\2\2\u1938\u193e"+
		"\7\u027d\2\2\u1939\u193b\7\u027e\2\2\u193a\u193c\7\16\2\2\u193b\u193a"+
		"\3\2\2\2\u193b\u193c\3\2\2\2\u193c\u193e\3\2\2\2\u193d\u1938\3\2\2\2\u193d"+
		"\u1939\3\2\2\2\u193d\u193e\3\2\2\2\u193e\u193f\3\2\2\2\u193f\u1941\5\u0320"+
		"\u0191\2\u1940\u1942\5\u0326\u0194\2\u1941\u1940\3\2\2\2\u1941\u1942\3"+
		"\2\2\2\u1942\u1943\3\2\2\2\u1943\u1944\7\u02fc\2\2\u1944\u1945\5\u0376"+
		"\u01bc\2\u1945\u031f\3\2\2\2\u1946\u1947\5\u038c\u01c7\2\u1947\u0321\3"+
		"\2\2\2\u1948\u1949\7\u011c\2\2\u1949\u194a\7\u02e8\2\2\u194a\u194b\5\u0376"+
		"\u01bc\2\u194b\u194d\7\u02e9\2\2\u194c\u194e\5\u0324\u0193\2\u194d\u194c"+
		"\3\2\2\2\u194d\u194e\3\2\2\2\u194e\u0323\3\2\2\2\u194f\u1950\7\u027a\2"+
		"\2\u1950\u1951\7\u02e8\2\2\u1951\u1952\5\u0372\u01ba\2\u1952\u1953\7\u02e9"+
		"\2\2\u1953\u0325\3\2\2\2\u1954\u1956\7\u019e\2\2\u1955\u1957\7\u0226\2"+
		"\2\u1956\u1955\3\2\2\2\u1956\u1957\3\2\2\2\u1957\u1958\3\2\2\2\u1958\u195d"+
		"\7?\2\2\u1959\u195b\7\u02ee\2\2\u195a\u1959\3\2\2\2\u195a\u195b\3\2\2"+
		"\2\u195b\u195c\3\2\2\2\u195c\u195e\5\u0328\u0195\2\u195d\u195a\3\2\2\2"+
		"\u195e\u195f\3\2\2\2\u195f\u195d\3\2\2\2\u195f\u1960\3\2\2\2\u1960\u0327"+
		"\3\2\2\2\u1961\u1963\5\u0376\u01bc\2\u1962\u1964\tX\2\2\u1963\u1962\3"+
		"\2\2\2\u1963\u1964\3\2\2\2\u1964\u1967\3\2\2\2\u1965\u1966\7\u018b\2\2"+
		"\u1966\u1968\tY\2\2\u1967\u1965\3\2\2\2\u1967\u1968\3\2\2\2\u1968\u0329"+
		"\3\2\2\2\u1969\u196a\7\u00dc\2\2\u196a\u196c\7\u027d\2\2\u196b\u196d\5"+
		"\u032c\u0197\2\u196c\u196b\3\2\2\2\u196c\u196d\3\2\2\2\u196d\u196f\3\2"+
		"\2\2\u196e\u1970\5\u032e\u0198\2\u196f\u196e\3\2\2\2\u196f\u1970\3\2\2"+
		"\2\u1970\u032b\3\2\2\2\u1971\u1972\7\u0192\2\2\u1972\u1973\5\u043c\u021f"+
		"\2\u1973\u032d\3\2\2\2\u1974\u1975\7\u022b\2\2\u1975\u197a\7\u013a\2\2"+
		"\u1976\u197a\7\u0189\2\2\u1977\u1978\7\u0293\2\2\u1978\u197a\5\u0376\u01bc"+
		"\2\u1979\u1974\3\2\2\2\u1979\u1976\3\2\2\2\u1979\u1977\3\2\2\2\u197a\u032f"+
		"\3\2\2\2\u197b\u197c\7\u027d\2\2\u197c\u197d\5\u035e\u01b0\2\u197d\u197f"+
		"\5\u0332\u019a\2\u197e\u1980\5\u03f2\u01fa\2\u197f\u197e\3\2\2\2\u197f"+
		"\u1980\3\2\2\2\u1980\u1982\3\2\2\2\u1981\u1983\5\u0360\u01b1\2\u1982\u1981"+
		"\3\2\2\2\u1982\u1983\3\2\2\2\u1983\u1985\3\2\2\2\u1984\u1986\5\u0362\u01b2"+
		"\2\u1985\u1984\3\2\2\2\u1985\u1986\3\2\2\2\u1986\u0331\3\2\2\2\u1987\u1997"+
		"\7\u021f\2\2\u1988\u198a\7\u02ee\2\2\u1989\u1988\3\2\2\2\u1989\u198a\3"+
		"\2\2\2\u198a\u198b\3\2\2\2\u198b\u198d\5\u0334\u019b\2\u198c\u1989\3\2"+
		"\2\2\u198d\u198e\3\2\2\2\u198e\u198c\3\2\2\2\u198e\u198f\3\2\2\2\u198f"+
		"\u1998\3\2\2\2\u1990\u1991\7\u0287\2\2\u1991\u1992\7\u02e8\2\2\u1992\u1993"+
		"\5\u0462\u0232\2\u1993\u1994\7\u02e9\2\2\u1994\u1995\7\u02fc\2\2\u1995"+
		"\u1996\5\u0376\u01bc\2\u1996\u1998\3\2\2\2\u1997\u198c\3\2\2\2\u1997\u1990"+
		"\3\2\2\2\u1998\u0333\3\2\2\2\u1999\u199a\5\u0484\u0243\2\u199a\u199b\7"+
		"\u02fc\2\2\u199b\u199c\5\u0376\u01bc\2\u199c\u19a2\3\2\2\2\u199d\u199e"+
		"\5\u043e\u0220\2\u199e\u199f\7\u02fc\2\2\u199f\u19a0\5\u016a\u00b6\2\u19a0"+
		"\u19a2\3\2\2\2\u19a1\u1999\3\2\2\2\u19a1\u199d\3\2\2\2\u19a2\u0335\3\2"+
		"\2\2\u19a3\u19a5\7\u0094\2\2\u19a4\u19a6\7\u00e0\2\2\u19a5\u19a4\3\2\2"+
		"\2\u19a5\u19a6\3\2\2\2\u19a6\u19a7\3\2\2\2\u19a7\u19a9\5\u035e\u01b0\2"+
		"\u19a8\u19aa\5\u03f2\u01fa\2\u19a9\u19a8\3\2\2\2\u19a9\u19aa\3\2\2\2\u19aa"+
		"\u19ac\3\2\2\2\u19ab\u19ad\5\u0360\u01b1\2\u19ac\u19ab\3\2\2\2\u19ac\u19ad"+
		"\3\2\2\2\u19ad\u19af\3\2\2\2\u19ae\u19b0\5\u0362\u01b2\2\u19af\u19ae\3"+
		"\2\2\2\u19af\u19b0\3\2\2\2\u19b0\u0337\3\2\2\2\u19b1\u19b4\7\u010f\2\2"+
		"\u19b2\u19b5\5\u033a\u019e\2\u19b3\u19b5\5\u033c\u019f\2\u19b4\u19b2\3"+
		"\2\2\2\u19b4\u19b3\3\2\2\2\u19b5\u0339\3\2\2\2\u19b6\u19bc\5\u0346\u01a4"+
		"\2\u19b7\u19b9\5\u0348\u01a5\2\u19b8\u19ba\5\u0360\u01b1\2\u19b9\u19b8"+
		"\3\2\2\2\u19b9\u19ba\3\2\2\2\u19ba\u19bd\3\2\2\2\u19bb\u19bd\5\u02bc\u015f"+
		"\2\u19bc\u19b7\3\2\2\2\u19bc\u19bb\3\2\2\2\u19bd\u19bf\3\2\2\2\u19be\u19c0"+
		"\5\u0362\u01b2\2\u19bf\u19be\3\2\2\2\u19bf\u19c0\3\2\2\2\u19c0\u033b\3"+
		"\2\2\2\u19c1\u19c3\7\16\2\2\u19c2\u19c4\5\u033e\u01a0\2\u19c3\u19c2\3"+
		"\2\2\2\u19c4\u19c5\3\2\2\2\u19c5\u19c3\3\2\2\2\u19c5\u19c6\3\2\2\2\u19c6"+
		"\u19c9\3\2\2\2\u19c7\u19c9\5\u0340\u01a1\2\u19c8\u19c1\3\2\2\2\u19c8\u19c7"+
		"\3\2\2\2\u19c9\u19ca\3\2\2\2\u19ca\u19cb\5\u02bc\u015f\2\u19cb\u033d\3"+
		"\2\2\2\u19cc\u19ce\5\u0346\u01a4\2\u19cd\u19cf\5\u0348\u01a5\2\u19ce\u19cd"+
		"\3\2\2\2\u19ce\u19cf\3\2\2\2\u19cf\u19d1\3\2\2\2\u19d0\u19d2\5\u0362\u01b2"+
		"\2\u19d1\u19d0\3\2\2\2\u19d1\u19d2\3\2\2\2\u19d2\u033f\3\2\2\2\u19d3\u19d5"+
		"\tZ\2\2\u19d4\u19d3\3\2\2\2\u19d4\u19d5\3\2\2\2\u19d5\u19d7\3\2\2\2\u19d6"+
		"\u19d8\5\u0342\u01a2\2\u19d7\u19d6\3\2\2\2\u19d8\u19d9\3\2\2\2\u19d9\u19d7"+
		"\3\2\2\2\u19d9\u19da\3\2\2\2\u19da\u19dc\3\2\2\2\u19db\u19dd\5\u0344\u01a3"+
		"\2\u19dc\u19db\3\2\2\2\u19dc\u19dd\3\2\2\2\u19dd\u0341\3\2\2\2\u19de\u19df"+
		"\7\u0297\2\2\u19df\u19e0\5\u0372\u01ba\2\u19e0\u19e2\7\u0259\2\2\u19e1"+
		"\u19e3\5\u033e\u01a0\2\u19e2\u19e1\3\2\2\2\u19e3\u19e4\3\2\2\2\u19e4\u19e2"+
		"\3\2\2\2\u19e4\u19e5\3\2\2\2\u19e5\u0343\3\2\2\2\u19e6\u19e8\7\u00ad\2"+
		"\2\u19e7\u19e9\5\u033e\u01a0\2\u19e8\u19e7\3\2\2\2\u19e9\u19ea\3\2\2\2"+
		"\u19ea\u19e8\3\2\2\2\u19ea\u19eb\3\2\2\2\u19eb\u0345\3\2\2\2\u19ec\u19ed"+
		"\7\u0117\2\2\u19ed\u19ef\5\u035e\u01b0\2\u19ee\u19f0\5\u043e\u0220\2\u19ef"+
		"\u19ee\3\2\2\2\u19ef\u19f0\3\2\2\2\u19f0\u0347\3\2\2\2\u19f1\u19f2\7\u0286"+
		"\2\2\u19f2\u19f4\7\u02e8\2\2\u19f3\u19f5\5\u0374\u01bb\2\u19f4\u19f3\3"+
		"\2\2\2\u19f4\u19f5\3\2\2\2\u19f5\u19f6\3\2\2\2\u19f6\u19f7\7\u02e9\2\2"+
		"\u19f7\u0349\3\2\2\2\u19f8\u19f9\7\u0154\2\2\u19f9\u19fa\7\u0117\2\2\u19fa"+
		"\u19fc\5\u040a\u0206\2\u19fb\u19fd\5\u03f0\u01f9\2\u19fc\u19fb\3\2\2\2"+
		"\u19fc\u19fd\3\2\2\2\u19fd\u19fe\3\2\2\2\u19fe\u19ff\7\u0284\2\2\u19ff"+
		"\u1a00\5\u0354\u01ab\2\u1a00\u1a01\7\u0198\2\2\u1a01\u1a02\7\u02e8\2\2"+
		"\u1a02\u1a03\5\u0372\u01ba\2\u1a03\u1a0c\7\u02e9\2\2\u1a04\u1a06\5\u034c"+
		"\u01a7\2\u1a05\u1a07\5\u0352\u01aa\2\u1a06\u1a05\3\2\2\2\u1a06\u1a07\3"+
		"\2\2\2\u1a07\u1a0d\3\2\2\2\u1a08\u1a0a\5\u0352\u01aa\2\u1a09\u1a0b\5\u034c"+
		"\u01a7\2\u1a0a\u1a09\3\2\2\2\u1a0a\u1a0b\3\2\2\2\u1a0b\u1a0d\3\2\2\2\u1a0c"+
		"\u1a04\3\2\2\2\u1a0c\u1a08\3\2\2\2\u1a0c\u1a0d\3\2\2\2\u1a0d\u1a0f\3\2"+
		"\2\2\u1a0e\u1a10\5\u0362\u01b2\2\u1a0f\u1a0e\3\2\2\2\u1a0f\u1a10\3\2\2"+
		"\2\u1a10\u034b\3\2\2\2\u1a11\u1a12\7\u0297\2\2\u1a12\u1a13\7\u014b\2\2"+
		"\u1a13\u1a14\7\u0259\2\2\u1a14\u1a15\7\u027d\2\2\u1a15\u1a16\7\u021f\2"+
		"\2\u1a16\u1a1b\5\u034e\u01a8\2\u1a17\u1a18\7\u02ee\2\2\u1a18\u1a1a\5\u034e"+
		"\u01a8\2\u1a19\u1a17\3\2\2\2\u1a1a\u1a1d\3\2\2\2\u1a1b\u1a19\3\2\2\2\u1a1b"+
		"\u1a1c\3\2\2\2\u1a1c\u1a1f\3\2\2\2\u1a1d\u1a1b\3\2\2\2\u1a1e\u1a20\5\u03f2"+
		"\u01fa\2\u1a1f\u1a1e\3\2\2\2\u1a1f\u1a20\3\2\2\2\u1a20\u1a22\3\2\2\2\u1a21"+
		"\u1a23\5\u0350\u01a9\2\u1a22\u1a21\3\2\2\2\u1a22\u1a23\3\2\2\2\u1a23\u034d"+
		"\3\2\2\2\u1a24\u1a25\5\u0484\u0243\2\u1a25\u1a26\7\u02fc\2\2\u1a26\u1a27"+
		"\5\u0376\u01bc\2\u1a27\u034f\3\2\2\2\u1a28\u1a29\7\u0094\2\2\u1a29\u1a2a"+
		"\5\u03f2\u01fa\2\u1a2a\u0351\3\2\2\2\u1a2b\u1a2c\7\u0297\2\2\u1a2c\u1a2d"+
		"\7\u0187\2\2\u1a2d\u1a2e\7\u014b\2\2\u1a2e\u1a2f\7\u0259\2\2\u1a2f\u1a31"+
		"\7\u010f\2\2\u1a30\u1a32\5\u043e\u0220\2\u1a31\u1a30\3\2\2\2\u1a31\u1a32"+
		"\3\2\2\2\u1a32\u1a33\3\2\2\2\u1a33\u1a34\7\u0286\2\2\u1a34\u1a36\7\u02e8"+
		"\2\2\u1a35\u1a37\5\u0374\u01bb\2\u1a36\u1a35\3\2\2\2\u1a36\u1a37\3\2\2"+
		"\2\u1a37\u1a38\3\2\2\2\u1a38\u1a3a\7\u02e9\2\2\u1a39\u1a3b\5\u03f2\u01fa"+
		"\2\u1a3a\u1a39\3\2\2\2\u1a3a\u1a3b\3\2\2\2\u1a3b\u0353\3\2\2\2\u1a3c\u1a42"+
		"\5\u040a\u0206\2\u1a3d\u1a3e\7\u02e8\2\2\u1a3e\u1a3f\5\u02bc\u015f\2\u1a3f"+
		"\u1a40\7\u02e9\2\2\u1a40\u1a42\3\2\2\2\u1a41\u1a3c\3\2\2\2\u1a41\u1a3d"+
		"\3\2\2\2\u1a42\u1a44\3\2\2\2\u1a43\u1a45\5\u03f0\u01f9\2\u1a44\u1a43\3"+
		"\2\2\2\u1a44\u1a45\3\2\2\2\u1a45\u0355\3\2\2\2\u1a46\u1a47\7\u013c\2\2"+
		"\u1a47\u1a48\7\u0254\2\2\u1a48\u1a4d\5\u035a\u01ae\2\u1a49\u1a4a\7\u02ee"+
		"\2\2\u1a4a\u1a4c\5\u035a\u01ae";
	private static final String _serializedATNSegment3 =
		"\2\u1a4b\u1a49\3\2\2\2\u1a4c\u1a4f\3\2\2\2\u1a4d\u1a4b\3\2\2\2\u1a4d\u1a4e"+
		"\3\2\2\2\u1a4e\u1a50\3\2\2\2\u1a4f\u1a4d\3\2\2\2\u1a50\u1a51\7\u0107\2"+
		"\2\u1a51\u1a52\5\u035c\u01af\2\u1a52\u1a54\7\u015d\2\2\u1a53\u1a55\5\u0358"+
		"\u01ad\2\u1a54\u1a53\3\2\2\2\u1a54\u1a55\3\2\2\2\u1a55\u0357\3\2\2\2\u1a56"+
		"\u1a57\7\u0293\2\2\u1a57\u1a5a\5\u0376\u01bc\2\u1a58\u1a5a\7\u0189\2\2"+
		"\u1a59\u1a56\3\2\2\2\u1a59\u1a58\3\2\2\2\u1a5a\u0359\3\2\2\2\u1a5b\u1a5d"+
		"\5\u040a\u0206\2\u1a5c\u1a5e\5\u03ec\u01f7\2\u1a5d\u1a5c\3\2\2\2\u1a5d"+
		"\u1a5e\3\2\2\2\u1a5e\u035b\3\2\2\2\u1a5f\u1a60\7\u0205\2\2\u1a60\u1a6c"+
		"\7\u0222\2\2\u1a61\u1a62\7\u0205\2\2\u1a62\u1a6c\7\u00c1\2\2\u1a63\u1a65"+
		"\7\u0222\2\2\u1a64\u1a66\7\u027d\2\2\u1a65\u1a64\3\2\2\2\u1a65\u1a66\3"+
		"\2\2\2\u1a66\u1a6c\3\2\2\2\u1a67\u1a68\7\u0222\2\2\u1a68\u1a69\7\u0205"+
		"\2\2\u1a69\u1a6c\7\u00c1\2\2\u1a6a\u1a6c\7\u00c1\2\2\u1a6b\u1a5f\3\2\2"+
		"\2\u1a6b\u1a61\3\2\2\2\u1a6b\u1a63\3\2\2\2\u1a6b\u1a67\3\2\2\2\u1a6b\u1a6a"+
		"\3\2\2\2\u1a6c\u035d\3\2\2\2\u1a6d\u1a74\5\u0368\u01b5\2\u1a6e\u1a6f\7"+
		"\u0197\2\2\u1a6f\u1a70\7\u02e8\2\2\u1a70\u1a71\5\u0368\u01b5\2\u1a71\u1a72"+
		"\7\u02e9\2\2\u1a72\u1a74\3\2\2\2\u1a73\u1a6d\3\2\2\2\u1a73\u1a6e\3\2\2"+
		"\2\u1a74\u1a76\3\2\2\2\u1a75\u1a77\5\u03f0\u01f9\2\u1a76\u1a75\3\2\2\2"+
		"\u1a76\u1a77\3\2\2\2\u1a77\u035f\3\2\2\2\u1a78\u1a79\tH\2\2\u1a79\u1a7a"+
		"\5\u0374\u01bb\2\u1a7a\u1a7b\5\u03f4\u01fb\2\u1a7b\u0361\3\2\2\2\u1a7c"+
		"\u1a7d\7\u013e\2\2\u1a7d\u1a7f\7\u00b8\2\2\u1a7e\u1a80\5\u0364\u01b3\2"+
		"\u1a7f\u1a7e\3\2\2\2\u1a7f\u1a80\3\2\2\2\u1a80\u1a82\3\2\2\2\u1a81\u1a83"+
		"\5\u0376\u01bc\2\u1a82\u1a81\3\2\2\2\u1a82\u1a83\3\2\2\2\u1a83\u1a85\3"+
		"\2\2\2\u1a84\u1a86\5\u0366\u01b4\2\u1a85\u1a84\3\2\2\2\u1a85\u1a86\3\2"+
		"\2\2\u1a86\u0363\3\2\2\2\u1a87\u1a88\7\u0117\2\2\u1a88\u1a89\5\u040a\u0206"+
		"\2\u1a89\u0365\3\2\2\2\u1a8a\u1a8b\7\u01e8\2\2\u1a8b\u1a8e\7\u0130\2\2"+
		"\u1a8c\u1a8f\7\u0277\2\2\u1a8d\u1a8f\5\u0376\u01bc\2\u1a8e\u1a8c\3\2\2"+
		"\2\u1a8e\u1a8d\3\2\2\2\u1a8f\u0367\3\2\2\2\u1a90\u1a9d\5\u036a\u01b6\2"+
		"\u1a91\u1a92\7\u02e8\2\2\u1a92\u1a94\5\u02bc\u015f\2\u1a93\u1a95\5\u036c"+
		"\u01b7\2\u1a94\u1a93\3\2\2\2\u1a94\u1a95\3\2\2\2\u1a95\u1a96\3\2\2\2\u1a96"+
		"\u1a97\7\u02e9\2\2\u1a97\u1a9d\3\2\2\2\u1a98\u1a9a\5\u040a\u0206\2\u1a99"+
		"\u1a9b\5\u036e\u01b8\2\u1a9a\u1a99\3\2\2\2\u1a9a\u1a9b\3\2\2\2\u1a9b\u1a9d"+
		"\3\2\2\2\u1a9c\u1a90\3\2\2\2\u1a9c\u1a91\3\2\2\2\u1a9c\u1a98\3\2\2\2\u1a9d"+
		"\u0369\3\2\2\2\u1a9e\u1aab\t[\2\2\u1a9f\u1aa0\7\u02e8\2\2\u1aa0\u1aa1"+
		"\5\u016a\u00b6\2\u1aa1\u1aa2\7\u02e9\2\2\u1aa2\u1aac\3\2\2\2\u1aa3\u1aa4"+
		"\7\u02e8\2\2\u1aa4\u1aa5\5\u0376\u01bc\2\u1aa5\u1aa9\7\u02e9\2\2\u1aa6"+
		"\u1aa7\7\u02e8\2\2\u1aa7\u1aa8\7\u02ec\2\2\u1aa8\u1aaa\7\u02e9\2\2\u1aa9"+
		"\u1aa6\3\2\2\2\u1aa9\u1aaa\3\2\2\2\u1aaa\u1aac\3\2\2\2\u1aab\u1a9f\3\2"+
		"\2\2\u1aab\u1aa3\3\2\2\2\u1aac\u036b\3\2\2\2\u1aad\u1ab6\7\u029c\2\2\u1aae"+
		"\u1aaf\7\u01dd\2\2\u1aaf\u1ab7\7\u0197\2\2\u1ab0\u1ab1\7M\2\2\u1ab1\u1ab4"+
		"\7\u019c\2\2\u1ab2\u1ab3\7e\2\2\u1ab3\u1ab5\5\u0400\u0201\2\u1ab4\u1ab2"+
		"\3\2\2\2\u1ab4\u1ab5\3\2\2\2\u1ab5\u1ab7\3\2\2\2\u1ab6\u1aae\3\2\2\2\u1ab6"+
		"\u1ab0\3\2\2\2\u1ab7\u036d\3\2\2\2\u1ab8\u1aba\7\u0209\2\2\u1ab9\u1abb"+
		"\7\66\2\2\u1aba\u1ab9\3\2\2\2\u1aba\u1abb\3\2\2\2\u1abb\u1abc\3\2\2\2"+
		"\u1abc\u1abd\7\u02e8\2\2\u1abd\u1ac0\5\u0376\u01bc\2\u1abe\u1abf\7\u02ee"+
		"\2\2\u1abf\u1ac1\5\u0376\u01bc\2\u1ac0\u1abe\3\2\2\2\u1ac0\u1ac1\3\2\2"+
		"\2\u1ac1\u1ac2\3\2\2\2\u1ac2\u1ac4\7\u02e9\2\2\u1ac3\u1ac5\5\u0370\u01b9"+
		"\2\u1ac4\u1ac3\3\2\2\2\u1ac4\u1ac5\3\2\2\2\u1ac5\u036f\3\2\2\2\u1ac6\u1ac7"+
		"\7\u0214\2\2\u1ac7\u1ac8\7\u02e8\2\2\u1ac8\u1ac9\5\u0376\u01bc\2\u1ac9"+
		"\u1aca\7\u02e9\2\2\u1aca\u0371\3\2\2\2\u1acb\u1acc\5\u0376\u01bc\2\u1acc"+
		"\u0373\3\2\2\2\u1acd\u1ad2\5\u0376\u01bc\2\u1ace\u1acf\7\u02ee\2\2\u1acf"+
		"\u1ad1\5\u0376\u01bc\2\u1ad0\u1ace\3\2\2\2\u1ad1\u1ad4\3\2\2\2\u1ad2\u1ad0"+
		"\3\2\2\2\u1ad2\u1ad3\3\2\2\2\u1ad3\u0375\3\2\2\2\u1ad4\u1ad2\3\2\2\2\u1ad5"+
		"\u1ad9\5\u0378\u01bd\2\u1ad6\u1ad9\5\u037a\u01be\2\u1ad7\u1ad9\7\u02dc"+
		"\2\2\u1ad8\u1ad5\3\2\2\2\u1ad8\u1ad6\3\2\2\2\u1ad8\u1ad7\3\2\2\2\u1ad9"+
		"\u0377\3\2\2\2\u1ada\u1adb\7y\2\2\u1adb\u1adc\7\u02e8\2\2\u1adc\u1add"+
		"\5\u016a\u00b6\2\u1add\u1ade\7\u02e9\2\2\u1ade\u0379\3\2\2\2\u1adf\u1ae0"+
		"\b\u01be\1\2\u1ae0\u1b02\5\u037c\u01bf\2\u1ae1\u1ae3\7\u011a\2\2\u1ae2"+
		"\u1ae4\7\u0187\2\2\u1ae3\u1ae2\3\2\2\2\u1ae3\u1ae4\3\2\2\2\u1ae4\u1afe"+
		"\3\2\2\2\u1ae5\u1aff\7\u018a\2\2\u1ae6\u1aff\7\u0165\2\2\u1ae7\u1aff\7"+
		"\u01cb\2\2\u1ae8\u1aff\7\u0105\2\2\u1ae9\u1aea\7\r\2\2\u1aea\u1aff\7\u021f"+
		"\2\2\u1aeb\u1aff\7\u00af\2\2\u1aec\u1aee\7\u0192\2\2\u1aed\u1aef\7\u0270"+
		"\2\2\u1aee\u1aed\3\2\2\2\u1aee\u1aef\3\2\2\2\u1aef\u1af0\3\2\2\2\u1af0"+
		"\u1af2\7\u02e8\2\2\u1af1\u1af3\7\u0197\2\2\u1af2\u1af1\3\2\2\2\u1af2\u1af3"+
		"\3\2\2\2\u1af3\u1af4\3\2\2\2\u1af4\u1af9\5\u0448\u0225\2\u1af5\u1af6\7"+
		"\u02ee\2\2\u1af6\u1af8\5\u0448\u0225\2\u1af7\u1af5\3\2\2\2\u1af8\u1afb"+
		"\3\2\2\2\u1af9\u1af7\3\2\2\2\u1af9\u1afa\3\2\2\2\u1afa\u1afc\3\2\2\2\u1afb"+
		"\u1af9\3\2\2\2\u1afc\u1afd\7\u02e9\2\2\u1afd\u1aff\3\2\2\2\u1afe\u1ae5"+
		"\3\2\2\2\u1afe\u1ae6\3\2\2\2\u1afe\u1ae7\3\2\2\2\u1afe\u1ae8\3\2\2\2\u1afe"+
		"\u1ae9\3\2\2\2\u1afe\u1aeb\3\2\2\2\u1afe\u1aec\3\2\2\2\u1aff\u1b01\3\2"+
		"\2\2\u1b00\u1ae1\3\2\2\2\u1b01\u1b04\3\2\2\2\u1b02\u1b00\3\2\2\2\u1b02"+
		"\u1b03\3\2\2\2\u1b03\u1b08\3\2\2\2\u1b04\u1b02\3\2\2\2\u1b05\u1b06\7\u0187"+
		"\2\2\u1b06\u1b08\5\u037a\u01be\5\u1b07\u1adf\3\2\2\2\u1b07\u1b05\3\2\2"+
		"\2\u1b08\u1b11\3\2\2\2\u1b09\u1b0a\f\4\2\2\u1b0a\u1b0b\7\23\2\2\u1b0b"+
		"\u1b10\5\u037a\u01be\5\u1b0c\u1b0d\f\3\2\2\u1b0d\u1b0e\7\u01a1\2\2\u1b0e"+
		"\u1b10\5\u037a\u01be\4\u1b0f\u1b09\3\2\2\2\u1b0f\u1b0c\3\2\2\2\u1b10\u1b13"+
		"\3\2\2\2\u1b11\u1b0f\3\2\2\2\u1b11\u1b12\3\2\2\2\u1b12\u037b\3\2\2\2\u1b13"+
		"\u1b11\3\2\2\2\u1b14\u1b1a\5\u037e\u01c0\2\u1b15\u1b17\t\\\2\2\u1b16\u1b18"+
		"\7\u0192\2\2\u1b17\u1b16\3\2\2\2\u1b17\u1b18\3\2\2\2\u1b18\u1b19\3\2\2"+
		"\2\u1b19\u1b1b\5\u0388\u01c5\2\u1b1a\u1b15\3\2\2\2\u1b1a\u1b1b\3\2\2\2"+
		"\u1b1b\u037d\3\2\2\2\u1b1c\u1b1d\b\u01c0\1\2\u1b1d\u1b1e\5\u0380\u01c1"+
		"\2\u1b1e\u1b25\3\2\2\2\u1b1f\u1b20\f\4\2\2\u1b20\u1b21\5\u0382\u01c2\2"+
		"\u1b21\u1b22\5\u037e\u01c0\5\u1b22\u1b24\3\2\2\2\u1b23\u1b1f\3\2\2\2\u1b24"+
		"\u1b27\3\2\2\2\u1b25\u1b23\3\2\2\2\u1b25\u1b26\3\2\2\2\u1b26\u037f\3\2"+
		"\2\2\u1b27\u1b25\3\2\2\2\u1b28\u1b38\5\u0388\u01c5\2\u1b29\u1b2b\7\u0187"+
		"\2\2\u1b2a\u1b29\3\2\2\2\u1b2a\u1b2b\3\2\2\2\u1b2b\u1b36\3\2\2\2\u1b2c"+
		"\u1b2d\7\u0107\2\2\u1b2d\u1b37\5\u0384\u01c3\2\u1b2e\u1b2f\7.\2\2\u1b2f"+
		"\u1b37\5\u0386\u01c4\2\u1b30\u1b31\t]\2\2\u1b31\u1b34\5\u0388\u01c5\2"+
		"\u1b32\u1b33\7\u00b9\2\2\u1b33\u1b35\5\u0388\u01c5\2\u1b34\u1b32\3\2\2"+
		"\2\u1b34\u1b35\3\2\2\2\u1b35\u1b37\3\2\2\2\u1b36\u1b2c\3\2\2\2\u1b36\u1b2e"+
		"\3\2\2\2\u1b36\u1b30\3\2\2\2\u1b37\u1b39\3\2\2\2\u1b38\u1b2a\3\2\2\2\u1b38"+
		"\u1b39\3\2\2\2\u1b39\u0381\3\2\2\2\u1b3a\u1b49\7\u02fc\2\2\u1b3b\u1b43"+
		"\7\u02f3\2\2\u1b3c\u1b3d\7\u02f8\2\2\u1b3d\u1b43\7\u02f7\2\2\u1b3e\u1b3f"+
		"\7\u02f6\2\2\u1b3f\u1b43\7\u02fc\2\2\u1b40\u1b41\7\u02f4\2\2\u1b41\u1b43"+
		"\7\u02fc\2\2\u1b42\u1b3b\3\2\2\2\u1b42\u1b3c\3\2\2\2\u1b42\u1b3e\3\2\2"+
		"\2\u1b42\u1b40\3\2\2\2\u1b43\u1b49\3\2\2\2\u1b44\u1b46\t^\2\2\u1b45\u1b47"+
		"\7\u02fc\2\2\u1b46\u1b45\3\2\2\2\u1b46\u1b47\3\2\2\2\u1b47\u1b49\3\2\2"+
		"\2\u1b48\u1b3a\3\2\2\2\u1b48\u1b42\3\2\2\2\u1b48\u1b44\3\2\2\2\u1b49\u0383"+
		"\3\2\2\2\u1b4a\u1b4b\7\u02e8\2\2\u1b4b\u1b4c\5\u016a\u00b6\2\u1b4c\u1b4d"+
		"\7\u02e9\2\2\u1b4d\u1b5d\3\2\2\2\u1b4e\u1b4f\7\u02e8\2\2\u1b4f\u1b54\5"+
		"\u0388\u01c5\2\u1b50\u1b51\7\u02ee\2\2\u1b51\u1b53\5\u0388\u01c5\2\u1b52"+
		"\u1b50\3\2\2\2\u1b53\u1b56\3\2\2\2\u1b54\u1b52\3\2\2\2\u1b54\u1b55\3\2"+
		"\2\2\u1b55\u1b57\3\2\2\2\u1b56\u1b54\3\2\2\2\u1b57\u1b58\7\u02e9\2\2\u1b58"+
		"\u1b5d\3\2\2\2\u1b59\u1b5d\5\u0460\u0231\2\u1b5a\u1b5d\5\u0450\u0229\2"+
		"\u1b5b\u1b5d\5\u0452\u022a\2\u1b5c\u1b4a\3\2\2\2\u1b5c\u1b4e\3\2\2\2\u1b5c"+
		"\u1b59\3\2\2\2\u1b5c\u1b5a\3\2\2\2\u1b5c\u1b5b\3\2\2\2\u1b5d\u0385\3\2"+
		"\2\2\u1b5e\u1b5f\5\u0388\u01c5\2\u1b5f\u1b60\7\23\2\2\u1b60\u1b61\5\u0388"+
		"\u01c5\2\u1b61\u0387\3\2\2\2\u1b62\u1b63\b\u01c5\1\2\u1b63\u1b6c\5\u038c"+
		"\u01c7\2\u1b64\u1b69\7\34\2\2\u1b65\u1b6a\7\u0137\2\2\u1b66\u1b67\7\u0261"+
		"\2\2\u1b67\u1b68\7\u02b5\2\2\u1b68\u1b6a\5\u0388\u01c5\2\u1b69\u1b65\3"+
		"\2\2\2\u1b69\u1b66\3\2\2\2\u1b6a\u1b6d\3\2\2\2\u1b6b\u1b6d\5\u038a\u01c6"+
		"\2\u1b6c\u1b64\3\2\2\2\u1b6c\u1b6b\3\2\2\2\u1b6c\u1b6d\3\2\2\2\u1b6d\u1b7a"+
		"\3\2\2\2\u1b6e\u1b6f\f\5\2\2\u1b6f\u1b70\t_\2\2\u1b70\u1b79\5\u0388\u01c5"+
		"\6\u1b71\u1b72\f\4\2\2\u1b72\u1b73\t`\2\2\u1b73\u1b79\5\u0388\u01c5\5"+
		"\u1b74\u1b75\f\3\2\2\u1b75\u1b76\7\u02fb\2\2\u1b76\u1b77\7\u02fb\2\2\u1b77"+
		"\u1b79\5\u0388\u01c5\4\u1b78\u1b6e\3\2\2\2\u1b78\u1b71\3\2\2\2\u1b78\u1b74"+
		"\3\2\2\2\u1b79\u1b7c\3\2\2\2\u1b7a\u1b78\3\2\2\2\u1b7a\u1b7b\3\2\2\2\u1b7b"+
		"\u0389\3\2\2\2\u1b7c\u1b7a\3\2\2\2\u1b7d\u1b82\7\u0080\2\2\u1b7e\u1b7f"+
		"\7\u02e8\2\2\u1b7f\u1b80\5\u0388\u01c5\2\u1b80\u1b81\7\u02e9\2\2\u1b81"+
		"\u1b83\3\2\2\2\u1b82\u1b7e\3\2\2\2\u1b82\u1b83\3\2\2\2\u1b83\u1b84\3\2"+
		"\2\2\u1b84\u1b85\7\u0266\2\2\u1b85\u1b8a\7\u0212\2\2\u1b86\u1b87\7\u02e8"+
		"\2\2\u1b87\u1b88\5\u0388\u01c5\2\u1b88\u1b89\7\u02e9\2\2\u1b89\u1b8b\3"+
		"\2\2\2\u1b8a\u1b86\3\2\2\2\u1b8a\u1b8b\3\2\2\2\u1b8b\u1b96\3\2\2\2\u1b8c"+
		"\u1b91\7\u02b1\2\2\u1b8d\u1b8e\7\u02e8\2\2\u1b8e\u1b8f\5\u0388\u01c5\2"+
		"\u1b8f\u1b90\7\u02e9\2\2\u1b90\u1b92\3\2\2\2\u1b91\u1b8d\3\2\2\2\u1b91"+
		"\u1b92\3\2\2\2\u1b92\u1b93\3\2\2\2\u1b93\u1b94\7\u0266\2\2\u1b94\u1b96"+
		"\7\u0160\2\2\u1b95\u1b7d\3\2\2\2\u1b95\u1b8c\3\2\2\2\u1b96\u038b\3\2\2"+
		"\2\u1b97\u1b9c\5\u0394\u01cb\2\u1b98\u1b99\7\u02fd\2\2\u1b99\u1b9a\5\u038e"+
		"\u01c8\2\u1b9a\u1b9b\7\u02fe\2\2\u1b9b\u1b9d\3\2\2\2\u1b9c\u1b98\3\2\2"+
		"\2\u1b9c\u1b9d\3\2\2\2\u1b9d\u038d\3\2\2\2\u1b9e\u1ba1\7\24\2\2\u1b9f"+
		"\u1ba1\5\u0376\u01bc\2\u1ba0\u1b9e\3\2\2\2\u1ba0\u1b9f\3\2\2\2\u1ba1\u1ba9"+
		"\3\2\2\2\u1ba2\u1ba5\7\u02ee\2\2\u1ba3\u1ba6\7\24\2\2\u1ba4\u1ba6\5\u0376"+
		"\u01bc\2\u1ba5\u1ba3\3\2\2\2\u1ba5\u1ba4\3\2\2\2\u1ba6\u1ba8\3\2\2\2\u1ba7"+
		"\u1ba2\3\2\2\2\u1ba8\u1bab\3\2\2\2\u1ba9\u1ba7\3\2\2\2\u1ba9\u1baa\3\2"+
		"\2\2\u1baa\u1bb6\3\2\2\2\u1bab\u1ba9\3\2\2\2\u1bac\u1bb1\5\u0390\u01c9"+
		"\2\u1bad\u1bae\7\u02ee\2\2\u1bae\u1bb0\5\u0390\u01c9\2\u1baf\u1bad\3\2"+
		"\2\2\u1bb0\u1bb3\3\2\2\2\u1bb1\u1baf\3\2\2\2\u1bb1\u1bb2\3\2\2\2\u1bb2"+
		"\u1bb6\3\2\2\2\u1bb3\u1bb1\3\2\2\2\u1bb4\u1bb6\5\u0392\u01ca\2\u1bb5\u1ba0"+
		"\3\2\2\2\u1bb5\u1bac\3\2\2\2\u1bb5\u1bb4\3\2\2\2\u1bb6\u038f\3\2\2\2\u1bb7"+
		"\u1bb8\7\u00dc\2\2\u1bb8\u1bca\5\u0484\u0243\2\u1bb9\u1bba\7\u0107\2\2"+
		"\u1bba\u1bbc\7\u02e8\2\2\u1bbb\u1bbd\5\u0374\u01bb\2\u1bbc\u1bbb\3\2\2"+
		"\2\u1bbc\u1bbd\3\2\2\2\u1bbd\u1bbe\3\2\2\2\u1bbe\u1bcb\7\u02e9\2\2\u1bbf"+
		"\u1bc0\7\u012f\2\2\u1bc0\u1bc2\5\u0376\u01bc\2\u1bc1\u1bbf\3\2\2\2\u1bc1"+
		"\u1bc2\3\2\2\2\u1bc2\u1bc3\3\2\2\2\u1bc3\u1bc4\7\u00e0\2\2\u1bc4\u1bc5"+
		"\5\u0376\u01bc\2\u1bc5\u1bc6\7\u0266\2\2\u1bc6\u1bc7\5\u0376\u01bc\2\u1bc7"+
		"\u1bc8\ta\2\2\u1bc8\u1bc9\5\u0376\u01bc\2\u1bc9\u1bcb\3\2\2\2\u1bca\u1bb9"+
		"\3\2\2\2\u1bca\u1bc1\3\2\2\2\u1bcb\u0391\3\2\2\2\u1bcc\u1bcd\7\u00dc\2"+
		"\2\u1bcd\u1bce\5\u043e\u0220\2\u1bce\u1bcf\7\u0107\2\2\u1bcf\u1bd6\7\u02e8"+
		"\2\2\u1bd0\u1bd7\5\u016a\u00b6\2\u1bd1\u1bd3\7\u02e8\2\2\u1bd2\u1bd4\5"+
		"\u0374\u01bb\2\u1bd3\u1bd2\3\2\2\2\u1bd3\u1bd4\3\2\2\2\u1bd4\u1bd5\3\2"+
		"\2\2\u1bd5\u1bd7\7\u02e9\2\2\u1bd6\u1bd0\3\2\2\2\u1bd6\u1bd1\3\2\2\2\u1bd7"+
		"\u1bd8\3\2\2\2\u1bd8\u1bd9\7\u02e9\2\2\u1bd9\u0393\3\2\2\2\u1bda\u1bdb"+
		"\t`\2\2\u1bdb\u1beb\5\u0394\u01cb\2\u1bdc\u1bdd\7\u01cf\2\2\u1bdd\u1beb"+
		"\5\u0394\u01cb\2\u1bde\u1bdf\7b\2\2\u1bdf\u1beb\5\u0394\u01cb\2\u1be0"+
		"\u1be1\7\u016d\2\2\u1be1\u1beb\5\u0394\u01cb\2\u1be2\u1be3\7\u009e\2\2"+
		"\u1be3\u1beb\5\u0394\u01cb\2\u1be4\u1be5\7\16\2\2\u1be5\u1beb\5\u0394"+
		"\u01cb\2\u1be6\u1beb\5\u0396\u01cc\2\u1be7\u1beb\5\u03a4\u01d3\2\u1be8"+
		"\u1beb\5\u03a8\u01d5\2\u1be9\u1beb\5\u03a2\u01d2\2\u1bea\u1bda\3\2\2\2"+
		"\u1bea\u1bdc\3\2\2\2\u1bea\u1bde\3\2\2\2\u1bea\u1be0\3\2\2\2\u1bea\u1be2"+
		"\3\2\2\2\u1bea\u1be4\3\2\2\2\u1bea\u1be6\3\2\2\2\u1bea\u1be7\3\2\2\2\u1bea"+
		"\u1be8\3\2\2\2\u1bea\u1be9\3\2\2\2\u1beb\u0395\3\2\2\2\u1bec\u1bef\5\u039c"+
		"\u01cf\2\u1bed\u1bef\5\u0398\u01cd\2\u1bee\u1bec\3\2\2\2\u1bee\u1bed\3"+
		"\2\2\2\u1bef\u0397\3\2\2\2\u1bf0\u1bf2\5\u041c\u020f\2\u1bf1\u1bf0\3\2"+
		"\2\2\u1bf1\u1bf2\3\2\2\2\u1bf2\u1bf3\3\2\2\2\u1bf3\u1bf4\7F\2\2\u1bf4"+
		"\u1bf6\5\u0376\u01bc\2\u1bf5\u1bf7\5\u039a\u01ce\2\u1bf6\u1bf5\3\2\2\2"+
		"\u1bf7\u1bf8\3\2\2\2\u1bf8\u1bf6\3\2\2\2\u1bf8\u1bf9\3\2\2\2\u1bf9\u1bfb"+
		"\3\2\2\2\u1bfa\u1bfc\5\u03a0\u01d1\2\u1bfb\u1bfa\3\2\2\2\u1bfb\u1bfc\3"+
		"\2\2\2\u1bfc\u1bfd\3\2\2\2\u1bfd\u1bff\7\u00b4\2\2\u1bfe\u1c00\7F\2\2"+
		"\u1bff\u1bfe\3\2\2\2\u1bff\u1c00\3\2\2\2\u1c00\u1c02\3\2\2\2\u1c01\u1c03"+
		"\5\u041c\u020f\2\u1c02\u1c01\3\2\2\2\u1c02\u1c03\3\2\2\2\u1c03\u0399\3"+
		"\2\2\2\u1c04\u1c05\7\u0297\2\2\u1c05\u1c06\5\u0376\u01bc\2\u1c06\u1c09"+
		"\7\u0259\2\2\u1c07\u1c0a\5\u0264\u0133\2\u1c08\u1c0a\5\u0376\u01bc\2\u1c09"+
		"\u1c07\3\2\2\2\u1c09\u1c08\3\2\2\2\u1c0a\u039b\3\2\2\2\u1c0b\u1c0d\5\u041c"+
		"\u020f\2\u1c0c\u1c0b\3\2\2\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u1c0e\3\2\2\2\u1c0e"+
		"\u1c10\7F\2\2\u1c0f\u1c11\5\u039e\u01d0\2\u1c10\u1c0f\3\2\2\2\u1c11\u1c12"+
		"\3\2\2\2\u1c12\u1c10\3\2\2\2\u1c12\u1c13\3\2\2\2\u1c13\u1c15\3\2\2\2\u1c14"+
		"\u1c16\5\u03a0\u01d1\2\u1c15\u1c14\3\2\2\2\u1c15\u1c16\3\2\2\2\u1c16\u1c17"+
		"\3\2\2\2\u1c17\u1c19\7\u00b4\2\2\u1c18\u1c1a\7F\2\2\u1c19\u1c18\3\2\2"+
		"\2\u1c19\u1c1a\3\2\2\2\u1c1a\u1c1c\3\2\2\2\u1c1b\u1c1d\5\u041c\u020f\2"+
		"\u1c1c\u1c1b\3\2\2\2\u1c1c\u1c1d\3\2\2\2\u1c1d\u039d\3\2\2\2\u1c1e\u1c1f"+
		"\7\u0297\2\2\u1c1f\u1c20\5\u0376\u01bc\2\u1c20\u1c23\7\u0259\2\2\u1c21"+
		"\u1c24\5\u0264\u0133\2\u1c22\u1c24\5\u0376\u01bc\2\u1c23\u1c21\3\2\2\2"+
		"\u1c23\u1c22\3\2\2\2\u1c24\u039f\3\2\2\2\u1c25\u1c28\7\u00ad\2\2\u1c26"+
		"\u1c29\5\u0264\u0133\2\u1c27\u1c29\5\u0376\u01bc\2\u1c28\u1c26\3\2\2\2"+
		"\u1c28\u1c27\3\2\2\2\u1c29\u03a1\3\2\2\2\u1c2a\u1c2b\5\u0456\u022c\2\u1c2b"+
		"\u1c2c\5\u0490\u0249\2\u1c2c\u1c3e\3\2\2\2\u1c2d\u1c3e\5\u0450\u0229\2"+
		"\u1c2e\u1c3e\5\u0460\u0231\2\u1c2f\u1c3e\5\u0452\u022a\2\u1c30\u1c31\7"+
		"\u02e8\2\2\u1c31\u1c32\5\u016a\u00b6\2\u1c32\u1c36\7\u02e9\2\2\u1c33\u1c35"+
		"\5\u02c8\u0165\2\u1c34\u1c33\3\2\2\2\u1c35\u1c38\3\2\2\2\u1c36\u1c34\3"+
		"\2\2\2\u1c36\u1c37\3\2\2\2\u1c37\u1c3e\3\2\2\2\u1c38\u1c36\3\2\2\2\u1c39"+
		"\u1c3a\7\u02e8\2\2\u1c3a\u1c3b\5\u0374\u01bb\2\u1c3b\u1c3c\7\u02e9\2\2"+
		"\u1c3c\u1c3e\3\2\2\2\u1c3d\u1c2a\3\2\2\2\u1c3d\u1c2d\3\2\2\2\u1c3d\u1c2e"+
		"\3\2\2\2\u1c3d\u1c2f\3\2\2\2\u1c3d\u1c30\3\2\2\2\u1c3d\u1c39\3\2\2\2\u1c3e"+
		"\u03a3\3\2\2\2\u1c3f\u1c48\tb\2\2\u1c40\u1c41\7\u02e8\2\2\u1c41\u1c42"+
		"\5\u016a\u00b6\2\u1c42\u1c43\7\u02e9\2\2\u1c43\u1c49\3\2\2\2\u1c44\u1c45"+
		"\7\u02e8\2\2\u1c45\u1c46\5\u0376\u01bc\2\u1c46\u1c47\7\u02e9\2\2\u1c47"+
		"\u1c49\3\2\2\2\u1c48\u1c40\3\2\2\2\u1c48\u1c44\3\2\2\2\u1c49\u03a5\3\2"+
		"\2\2\u1c4a\u1c4b\7\u02d2\2\2\u1c4b\u1c4c\7\u02e8\2\2\u1c4c\u1c4d\5\u0376"+
		"\u01bc\2\u1c4d\u1c4e\7\u02ee\2\2\u1c4e\u1c51\5\u0376\u01bc\2\u1c4f\u1c50"+
		"\7\u02ee\2\2\u1c50\u1c52\5\u0376\u01bc\2\u1c51\u1c4f\3\2\2\2\u1c51\u1c52"+
		"\3\2\2\2\u1c52\u1c53\3\2\2\2\u1c53\u1c54\7\u02e9\2\2\u1c54\u1c91\3\2\2"+
		"\2\u1c55\u1c56\7\u02d3\2\2\u1c56\u1c5a\7\u02e8\2\2\u1c57\u1c5b\5\u0456"+
		"\u022c\2\u1c58\u1c5b\5\u03a8\u01d5\2\u1c59\u1c5b\5\u0376\u01bc\2\u1c5a"+
		"\u1c57\3\2\2\2\u1c5a\u1c58\3\2\2\2\u1c5a\u1c59\3\2\2\2\u1c5b\u1c5e\3\2"+
		"\2\2\u1c5c\u1c5d\7\u02ee\2\2\u1c5d\u1c5f\5\u049e\u0250\2\u1c5e\u1c5c\3"+
		"\2\2\2\u1c5e\u1c5f\3\2\2\2\u1c5f\u1c62\3\2\2\2\u1c60\u1c61\7\u02ee\2\2"+
		"\u1c61\u1c63\5\u049e\u0250\2\u1c62\u1c60\3\2\2\2\u1c62\u1c63\3\2\2\2\u1c63"+
		"\u1c64\3\2\2\2\u1c64\u1c65\7\u02e9\2\2\u1c65\u1c91\3\2\2\2\u1c66\u1c67"+
		"\7\u02c6\2\2\u1c67\u1c68\7\u02e8\2\2\u1c68\u1c69\5\u0374\u01bb\2\u1c69"+
		"\u1c6a\7\u02e9\2\2\u1c6a\u1c91\3\2\2\2\u1c6b\u1c6c\7N\2\2\u1c6c\u1c6d"+
		"\7\u02e8\2\2\u1c6d\u1c6e\5\u0388\u01c5\2\u1c6e\u1c6f\7\u0284\2\2\u1c6f"+
		"\u1c70\7\u0169\2\2\u1c70\u1c71\7\u02e9\2\2\u1c71\u1c91\3\2\2\2\u1c72\u1c73"+
		"\7\u02cd\2\2\u1c73\u1c74\7\u02e8\2\2\u1c74\u1c75\5\u0376\u01bc\2\u1c75"+
		"\u1c76\7\u02ee\2\2\u1c76\u1c77\5\u0376\u01bc\2\u1c77\u1c78\7\u02e9\2\2"+
		"\u1c78\u1c91\3\2\2\2\u1c79\u1c7a\7\u02d4\2\2\u1c7a\u1c82\7\u02e8\2\2\u1c7b"+
		"\u1c7d\tc\2\2\u1c7c\u1c7b\3\2\2\2\u1c7c\u1c7d\3\2\2\2\u1c7d\u1c7f\3\2"+
		"\2\2\u1c7e\u1c80\5\u049e\u0250\2\u1c7f\u1c7e\3\2\2\2\u1c7f\u1c80\3\2\2"+
		"\2\u1c80\u1c81\3\2\2\2\u1c81\u1c83\7\u00e0\2\2\u1c82\u1c7c\3\2\2\2\u1c82"+
		"\u1c83\3\2\2\2\u1c83\u1c84\3\2\2\2\u1c84\u1c85\5\u0388\u01c5\2\u1c85\u1c86"+
		"\7\u02e9\2\2\u1c86\u1c91\3\2\2\2\u1c87\u1c88\7\u02db\2\2\u1c88\u1c89\7"+
		"\u02e8\2\2\u1c89\u1c8c\5\u0376\u01bc\2\u1c8a\u1c8b\7\u02ee\2\2\u1c8b\u1c8d"+
		"\5\u049e\u0250\2\u1c8c\u1c8a\3\2\2\2\u1c8c\u1c8d\3\2\2\2\u1c8d\u1c8e\3"+
		"\2\2\2\u1c8e\u1c8f\7\u02e9\2\2\u1c8f\u1c91\3\2\2\2\u1c90\u1c4a\3\2\2\2"+
		"\u1c90\u1c55\3\2\2\2\u1c90\u1c66\3\2\2\2\u1c90\u1c6b\3\2\2\2\u1c90\u1c72"+
		"\3\2\2\2\u1c90\u1c79\3\2\2\2\u1c90\u1c87\3\2\2\2\u1c91\u03a7\3\2\2\2\u1c92"+
		"\u1c96\5\u03a6\u01d4\2\u1c93\u1c96\5\u03aa\u01d6\2\u1c94\u1c96\5\u03ae"+
		"\u01d8\2\u1c95\u1c92\3\2\2\2\u1c95\u1c93\3\2\2\2\u1c95\u1c94\3\2\2\2\u1c96"+
		"\u03a9\3\2\2\2\u1c97\u1c9a\5\u03ac\u01d7\2\u1c98\u1c9b\5\u0390\u01c9\2"+
		"\u1c99\u1c9b\5\u0392\u01ca\2\u1c9a\u1c98\3\2\2\2\u1c9a\u1c99\3\2\2\2\u1c9a"+
		"\u1c9b\3\2\2\2\u1c9b\u03ab\3\2\2\2\u1c9c\u1c9d\7\u02d5\2\2\u1c9d\u1c9f"+
		"\7\u02e8\2\2\u1c9e\u1ca0\td\2\2\u1c9f\u1c9e\3\2\2\2\u1c9f\u1ca0\3\2\2"+
		"\2\u1ca0\u1ca1\3\2\2\2\u1ca1\u1ca2\5\u0376\u01bc\2\u1ca2\u1ca3\7\u02e9"+
		"\2\2\u1ca3\u1cd7\3\2\2\2\u1ca4\u1ca5\7q\2\2\u1ca5\u1cad\7\u02e8\2\2\u1ca6"+
		"\u1cae\7\u02eb\2\2\u1ca7\u1ca9\tN\2\2\u1ca8\u1ca7\3\2\2\2\u1ca8\u1ca9"+
		"\3\2\2\2\u1ca9\u1caa\3\2\2\2\u1caa\u1cac\5\u0388\u01c5\2\u1cab\u1ca8\3"+
		"\2\2\2\u1cab\u1cac\3\2\2\2\u1cac\u1cae\3\2\2\2\u1cad\u1ca6\3\2\2\2\u1cad"+
		"\u1cab\3\2\2\2\u1cae\u1caf\3\2\2\2\u1caf\u1cb1\7\u02e9\2\2\u1cb0\u1cb2"+
		"\5\u03b6\u01dc\2\u1cb1\u1cb0\3\2\2\2\u1cb1\u1cb2\3\2\2\2\u1cb2\u1cd7\3"+
		"\2\2\2\u1cb3\u1cb4\7\u02d0\2\2\u1cb4\u1cb5\7\u02e8\2\2\u1cb5\u1cb8\5\u0376"+
		"\u01bc\2\u1cb6\u1cb7\7\u02ee\2\2\u1cb7\u1cb9\7\u02e2\2\2\u1cb8\u1cb6\3"+
		"\2\2\2\u1cb8\u1cb9\3\2\2\2\u1cb9\u1cba\3\2\2\2\u1cba\u1cbb\7\u02e9\2\2"+
		"\u1cbb\u1cd7\3\2\2\2\u1cbc\u1cbd\7\u02c3\2\2\u1cbd\u1cbf\7\u02e8\2\2\u1cbe"+
		"\u1cc0\td\2\2\u1cbf\u1cbe\3\2\2\2\u1cbf\u1cc0\3\2\2\2\u1cc0\u1cc1\3\2"+
		"\2\2\u1cc1\u1cc2\5\u0376\u01bc\2\u1cc2\u1cc3\7\u02e9\2\2\u1cc3\u1cd7\3"+
		"\2\2\2\u1cc4\u1cc5\7\u02c9\2\2\u1cc5\u1cc7\7\u02e8\2\2\u1cc6\u1cc8\td"+
		"\2\2\u1cc7\u1cc6\3\2\2\2\u1cc7\u1cc8\3\2\2\2\u1cc8\u1cc9\3\2\2\2\u1cc9"+
		"\u1cca\5\u0376\u01bc\2\u1cca\u1ccb\7\u02e9\2\2\u1ccb\u1cd7\3\2\2\2\u1ccc"+
		"\u1ccd\7\u02d9\2\2\u1ccd\u1cce\7\u02e8\2\2\u1cce\u1ccf\5\u0374\u01bb\2"+
		"\u1ccf\u1cd0\7\u02e9\2\2\u1cd0\u1cd7\3\2\2\2\u1cd1\u1cd2\7\u02da\2\2\u1cd2"+
		"\u1cd3\7\u02e8\2\2\u1cd3\u1cd4\5\u0374\u01bb\2\u1cd4\u1cd5\7\u02e9\2\2"+
		"\u1cd5\u1cd7\3\2\2\2\u1cd6\u1c9c\3\2\2\2\u1cd6\u1ca4\3\2\2\2\u1cd6\u1cb3"+
		"\3\2\2\2\u1cd6\u1cbc\3\2\2\2\u1cd6\u1cc4\3\2\2\2\u1cd6\u1ccc\3\2\2\2\u1cd6"+
		"\u1cd1\3\2\2\2\u1cd7\u03ad\3\2\2\2\u1cd8\u1cd9\5\u03b0\u01d9\2\u1cd9\u1cdb"+
		"\5\u0442\u0222\2\u1cda\u1cdc\5\u03b6\u01dc\2\u1cdb\u1cda\3\2\2\2\u1cdb"+
		"\u1cdc\3\2\2\2\u1cdc\u1e17\3\2\2\2\u1cdd\u1cde\5\u0492\u024a\2\u1cde\u1ce0"+
		"\5\u0444\u0223\2\u1cdf\u1ce1\5\u03be\u01e0\2\u1ce0\u1cdf\3\2\2\2\u1ce0"+
		"\u1ce1\3\2\2\2\u1ce1\u1e17\3\2\2\2\u1ce2\u1ce3\7q\2\2\u1ce3\u1ce9\7\u02e8"+
		"\2\2\u1ce4\u1cea\7\u02eb\2\2\u1ce5\u1ce7\tN\2\2\u1ce6\u1ce5\3\2\2\2\u1ce6"+
		"\u1ce7\3\2\2\2\u1ce7\u1ce8\3\2\2\2\u1ce8\u1cea\5\u0388\u01c5\2\u1ce9\u1ce4"+
		"\3\2\2\2\u1ce9\u1ce6\3\2\2\2\u1cea\u1ceb\3\2\2\2\u1ceb\u1ced\7\u02e9\2"+
		"\2\u1cec\u1cee\5\u03b6\u01dc\2\u1ced\u1cec\3\2\2\2\u1ced\u1cee\3\2\2\2"+
		"\u1cee\u1e17\3\2\2\2\u1cef\u1cf0\te\2\2\u1cf0\u1cf7\7\u02e8\2\2\u1cf1"+
		"\u1cf2\7\u0163\2\2\u1cf2\u1cf3\7\u02e8\2\2\u1cf3\u1cf4\5\u016a\u00b6\2"+
		"\u1cf4\u1cf5\7\u02e9\2\2\u1cf5\u1cf8\3\2\2\2\u1cf6\u1cf8\5\u0388\u01c5"+
		"\2\u1cf7\u1cf1\3\2\2\2\u1cf7\u1cf6\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1cfa"+
		"\7\31\2\2\u1cfa\u1cfb\5\u0448\u0225\2\u1cfb\u1cfc\7\u02e9\2\2\u1cfc\u1e17"+
		"\3\2\2\2\u1cfd\u1cfe\7V\2\2\u1cfe\u1cff\7\u02e8\2\2\u1cff\u1d05\5\u0456"+
		"\u022c\2\u1d00\u1d03\7\u02ee\2\2\u1d01\u1d04\5\u049a\u024e\2\u1d02\u1d04"+
		"\5\u049e\u0250\2\u1d03\u1d01\3\2\2\2\u1d03\u1d02\3\2\2\2\u1d04\u1d06\3"+
		"\2\2\2\u1d05\u1d00\3\2\2\2\u1d05\u1d06\3\2\2\2\u1d06\u1d07\3\2\2\2\u1d07"+
		"\u1d08\7\u02e9\2\2\u1d08\u1e17\3\2\2\2\u1d09\u1d0a\7W\2\2\u1d0a\u1d0c"+
		"\7\u02e8\2\2\u1d0b\u1d0d\tf\2\2\u1d0c\u1d0b\3\2\2\2\u1d0c\u1d0d\3\2\2"+
		"\2\u1d0d\u1d0e\3\2\2\2\u1d0e\u1d10\5\u0388\u01c5\2\u1d0f\u1d11\5\u03c2"+
		"\u01e2\2\u1d10\u1d0f\3\2\2\2\u1d10\u1d11\3\2\2\2\u1d11\u1d12\3\2\2\2\u1d12"+
		"\u1d13\7\u02e9\2\2\u1d13\u1e17\3\2\2\2\u1d14\u1d15\5\u03b2\u01da\2\u1d15"+
		"\u1d17\5\u03e4\u01f3\2\u1d16\u1d18\5\u0440\u0221\2\u1d17\u1d16\3\2\2\2"+
		"\u1d17\u1d18\3\2\2\2\u1d18\u1d1a\3\2\2\2\u1d19\u1d1b\5\u03c4\u01e3\2\u1d1a"+
		"\u1d19\3\2\2\2\u1d1b\u1d1c\3\2\2\2\u1d1c\u1d1a\3\2\2\2\u1d1c\u1d1d\3\2"+
		"\2\2\u1d1d\u1e17\3\2\2\2\u1d1e\u1d1f\5\u0404\u0203\2\u1d1f\u1d20\tg\2"+
		"\2\u1d20\u1e17\3\2\2\2\u1d21\u1d22\7\u008a\2\2\u1d22\u1d23\7\u02e8\2\2"+
		"\u1d23\u1d25\5\u0388\u01c5\2\u1d24\u1d26\th\2\2\u1d25\u1d24\3\2\2\2\u1d25"+
		"\u1d26\3\2\2\2\u1d26\u1d27\3\2\2\2\u1d27\u1d28\7\u02e9\2\2\u1d28\u1e17"+
		"\3\2\2\2\u1d29\u1d2a\7\u00cb\2\2\u1d2a\u1d2b\7\u02e8\2\2\u1d2b\u1d2c\5"+
		"\u0492\u024a\2\u1d2c\u1d2d\7\u00e0\2\2\u1d2d\u1d2e\5\u0388\u01c5\2\u1d2e"+
		"\u1d2f\7\u02e9\2\2\u1d2f\u1e17\3\2\2\2\u1d30\u1d31\ti\2\2\u1d31\u1d33"+
		"\5\u0442\u0222\2\u1d32\u1d34\5\u0446\u0224\2\u1d33\u1d32\3\2\2\2\u1d33"+
		"\u1d34\3\2\2\2\u1d34\u1d35\3\2\2\2\u1d35\u1d36\5\u03b6\u01dc\2\u1d36\u1e17"+
		"\3\2\2\2\u1d37\u1d38\5\u03b4\u01db\2\u1d38\u1d39\7\u02e8\2\2\u1d39\u1d3b"+
		"\5\u0374\u01bb\2\u1d3a\u1d3c\5\u03c6\u01e4\2\u1d3b\u1d3a\3\2\2\2\u1d3b"+
		"\u1d3c\3\2\2\2\u1d3c\u1d3e\3\2\2\2\u1d3d\u1d3f\5\u03be\u01e0\2\u1d3e\u1d3d"+
		"\3\2\2\2\u1d3e\u1d3f\3\2\2\2\u1d3f\u1d40\3\2\2\2\u1d40\u1d41\7\u02e9\2"+
		"\2\u1d41\u1e17\3\2\2\2\u1d42\u1d43\7\u0269\2\2\u1d43\u1d44\7\u02e8\2\2"+
		"\u1d44\u1d47\5\u0376\u01bc\2\u1d45\u1d46\7\u0284\2\2\u1d46\u1d48\tj\2"+
		"\2\u1d47\u1d45\3\2\2\2\u1d47\u1d48\3\2\2\2\u1d48\u1d4d\3\2\2\2\u1d49\u1d4a"+
		"\7\u02ee\2\2\u1d4a\u1d4c\5\u0376\u01bc\2\u1d4b\u1d49\3\2\2\2\u1d4c\u1d4f"+
		"\3\2\2\2\u1d4d\u1d4b\3\2\2\2\u1d4d\u1d4e\3\2\2\2\u1d4e\u1d50\3\2\2\2\u1d4f"+
		"\u1d4d\3\2\2\2\u1d50\u1d51\7\u02e9\2\2\u1d51\u1e17\3\2\2\2\u1d52\u1d53"+
		"\7\u026b\2\2\u1d53\u1d54\7\u02e8\2\2\u1d54\u1d55\5\u0376\u01bc\2\u1d55"+
		"\u1d57\7\31\2\2\u1d56\u1d58\7\u01e6\2\2\u1d57\u1d56\3\2\2\2\u1d57\u1d58"+
		"\3\2\2\2\u1d58\u1d59\3\2\2\2\u1d59\u1d5a\5\u0448\u0225\2\u1d5a\u1d5b\7"+
		"\u02e9\2\2\u1d5b\u1e17\3\2\2\2\u1d5c\u1d5d\7\u02d4\2\2\u1d5d\u1d65\7\u02e8"+
		"\2\2\u1d5e\u1d60\tc\2\2\u1d5f\u1d5e\3\2\2\2\u1d5f\u1d60\3\2\2\2\u1d60"+
		"\u1d62\3\2\2\2\u1d61\u1d63\5\u049e\u0250\2\u1d62\u1d61\3\2\2\2\u1d62\u1d63"+
		"\3\2\2\2\u1d63\u1d64\3\2\2\2\u1d64\u1d66\7\u00e0\2\2\u1d65\u1d5f\3\2\2"+
		"\2\u1d65\u1d66\3\2\2\2\u1d66\u1d67\3\2\2\2\u1d67\u1d68\5\u0388\u01c5\2"+
		"\u1d68\u1d69\7\u02e9\2\2\u1d69\u1e17\3\2\2\2\u1d6a\u1d6b\7\u029f\2\2\u1d6b"+
		"\u1d6c\7\u02e8\2\2\u1d6c\u1d6e\5\u0376\u01bc\2\u1d6d\u1d6f\5\u0326\u0194"+
		"\2\u1d6e\u1d6d\3\2\2\2\u1d6e\u1d6f\3\2\2\2\u1d6f\u1d70\3\2\2\2\u1d70\u1d73"+
		"\7\u02e9\2\2\u1d71\u1d72\7\u02e1\2\2\u1d72\u1d74\5\u0454\u022b\2\u1d73"+
		"\u1d71\3\2\2\2\u1d73\u1d74\3\2\2\2\u1d74\u1e17\3\2\2\2\u1d75\u1d76\tk"+
		"\2\2\u1d76\u1d7b\7\u02e8\2\2\u1d77\u1d79\7\u02ee\2\2\u1d78\u1d77\3\2\2"+
		"\2\u1d78\u1d79\3\2\2\2\u1d79\u1d7a\3\2\2\2\u1d7a\u1d7c\5\u03d2\u01ea\2"+
		"\u1d7b\u1d78\3\2\2\2\u1d7c\u1d7d\3\2\2\2\u1d7d\u1d7b\3\2\2\2\u1d7d\u1d7e"+
		"\3\2\2\2\u1d7e\u1d7f\3\2\2\2\u1d7f\u1d82\7\u02e9\2\2\u1d80\u1d81\7\u02e1"+
		"\2\2\u1d81\u1d83\5\u0454\u022b\2\u1d82\u1d80\3\2\2\2\u1d82\u1d83\3\2\2"+
		"\2\u1d83\u1e17\3\2\2\2\u1d84\u1d85\7\u02a3\2\2\u1d85\u1d87\7\u02e8\2\2"+
		"\u1d86\u1d88\tl\2\2\u1d87\u1d86\3\2\2\2\u1d87\u1d88\3\2\2\2\u1d88\u1d8a"+
		"\3\2\2\2\u1d89\u1d8b\tm\2\2\u1d8a\u1d89\3\2\2\2\u1d8a\u1d8b\3\2\2\2\u1d8b"+
		"\u1d8c\3\2\2\2\u1d8c\u1d8f\5\u0376\u01bc\2\u1d8d\u1d8e\7\u02ee\2\2\u1d8e"+
		"\u1d90\5\u03ca\u01e6\2\u1d8f\u1d8d\3\2\2\2\u1d8f\u1d90\3\2\2\2\u1d90\u1d98"+
		"\3\2\2\2\u1d91\u1d92\7\u02ee\2\2\u1d92\u1d94\5\u0376\u01bc\2\u1d93\u1d95"+
		"\5\u03ee\u01f8\2\u1d94\u1d93\3\2\2\2\u1d94\u1d95\3\2\2\2\u1d95\u1d97\3"+
		"\2\2\2\u1d96\u1d91\3\2\2\2\u1d97\u1d9a\3\2\2\2\u1d98\u1d96\3\2\2\2\u1d98"+
		"\u1d99\3\2\2\2\u1d99\u1d9b\3\2\2\2\u1d9a\u1d98\3\2\2\2\u1d9b\u1d9e\7\u02e9"+
		"\2\2\u1d9c\u1d9d\7\u02e1\2\2\u1d9d\u1d9f\5\u0454\u022b\2\u1d9e\u1d9c\3"+
		"\2\2\2\u1d9e\u1d9f\3\2\2\2\u1d9f\u1e17\3\2\2\2\u1da0\u1da1\7\u02a4\2\2"+
		"\u1da1\u1da2\7\u02e8\2\2\u1da2\u1da4\5\u0376\u01bc\2\u1da3\u1da5\5\u03c8"+
		"\u01e5\2\u1da4\u1da3\3\2\2\2\u1da4\u1da5\3\2\2\2\u1da5\u1da6\3\2\2\2\u1da6"+
		"\u1da7\7\u02e9\2\2\u1da7\u1e17\3\2\2\2\u1da8\u1da9\7\u02a7\2\2\u1da9\u1daa"+
		"\7\u02e8\2\2\u1daa\u1dab\tn\2\2\u1dab\u1dad\5\u0388\u01c5\2\u1dac\u1dae"+
		"\7\u0295\2\2\u1dad\u1dac\3\2\2\2\u1dad\u1dae\3\2\2\2\u1dae\u1daf\3\2\2"+
		"\2\u1daf\u1db2\7\u02e9\2\2\u1db0\u1db1\7\u02e1\2\2\u1db1\u1db3\5\u0454"+
		"\u022b\2\u1db2\u1db0\3\2\2\2\u1db2\u1db3\3\2\2\2\u1db3\u1e17\3\2\2\2\u1db4"+
		"\u1db5\7\u02a8\2\2\u1db5\u1dba\7\u02e8\2\2\u1db6\u1db7\7\u0164\2\2\u1db7"+
		"\u1dbb\5\u0462\u0232\2\u1db8\u1db9\7\u00ba\2\2\u1db9\u1dbb\5\u0388\u01c5"+
		"\2\u1dba\u1db6\3\2\2\2\u1dba\u1db8\3\2\2\2\u1dbb\u1dbe\3\2\2\2\u1dbc\u1dbd"+
		"\7\u02ee\2\2\u1dbd\u1dbf\5\u0388\u01c5\2\u1dbe\u1dbc\3\2\2\2\u1dbe\u1dbf"+
		"\3\2\2\2\u1dbf\u1dc0\3\2\2\2\u1dc0\u1dc3\7\u02e9\2\2\u1dc1\u1dc2\7\u02e1"+
		"\2\2\u1dc2\u1dc4\5\u0454\u022b\2\u1dc3\u1dc1\3\2\2\2\u1dc3\u1dc4\3\2\2"+
		"\2\u1dc4\u1e17\3\2\2\2\u1dc5\u1dc6\7\u02a9\2\2\u1dc6\u1dc7\7\u02e8\2\2"+
		"\u1dc7\u1dc9\5\u0388\u01c5\2\u1dc8\u1dca\5\u03c8\u01e5\2\u1dc9\u1dc8\3"+
		"\2\2\2\u1dc9\u1dca\3\2\2\2\u1dca\u1dcb\3\2\2\2\u1dcb\u1dcc\7\u01f8\2\2"+
		"\u1dcc\u1dd0\7j\2\2\u1dcd\u1dce\7\u018a\2\2\u1dce\u1dcf\7\u0198\2\2\u1dcf"+
		"\u1dd1\7\u00af\2\2\u1dd0\u1dcd\3\2\2\2\u1dd0\u1dd1\3\2\2\2\u1dd1\u1dd2"+
		"\3\2\2\2\u1dd2\u1dd5\7\u02e9\2\2\u1dd3\u1dd4\7\u02e1\2\2\u1dd4\u1dd6\5"+
		"\u0454\u022b\2\u1dd5\u1dd3\3\2\2\2\u1dd5\u1dd6\3\2\2\2\u1dd6\u1e17\3\2"+
		"\2\2\u1dd7\u1dd8\7\u02aa\2\2\u1dd8\u1dd9\7\u02e8\2\2\u1dd9\u1ddc\5\u0388"+
		"\u01c5\2\u1dda\u1ddb\7\u02ee\2\2\u1ddb\u1ddd\5\u03d4\u01eb\2\u1ddc\u1dda"+
		"\3\2\2\2\u1ddc\u1ddd\3\2\2\2\u1ddd\u1de0\3\2\2\2\u1dde\u1ddf\7\u02ee\2"+
		"\2\u1ddf\u1de1\5\u03d6\u01ec\2\u1de0\u1dde\3\2\2\2\u1de0\u1de1\3\2\2\2"+
		"\u1de1\u1de2\3\2\2\2\u1de2\u1de5\7\u02e9\2\2\u1de3\u1de4\7\u02e1\2\2\u1de4"+
		"\u1de6\5\u0454\u022b\2\u1de5\u1de3\3\2\2\2\u1de5\u1de6\3\2\2\2\u1de6\u1e17"+
		"\3\2\2\2\u1de7\u1de8\7\u02ac\2\2\u1de8\u1de9\7\u02e8\2\2\u1de9\u1dea\t"+
		"n\2\2\u1dea\u1ded\5\u0388\u01c5\2\u1deb\u1dec\7\31\2\2\u1dec\u1dee\5\u0448"+
		"\u0225\2\u1ded\u1deb\3\2\2\2\u1ded\u1dee\3\2\2\2\u1dee\u1df0\3\2\2\2\u1def"+
		"\u1df1\5\u03d8\u01ed\2\u1df0\u1def\3\2\2\2\u1df0\u1df1\3\2\2\2\u1df1\u1df3"+
		"\3\2\2\2\u1df2\u1df4\5\u03da\u01ee\2\u1df3\u1df2\3\2\2\2\u1df3\u1df4\3"+
		"\2\2\2\u1df4\u1df6\3\2\2\2\u1df5\u1df7\5\u03dc\u01ef\2\u1df6\u1df5\3\2"+
		"\2\2\u1df6\u1df7\3\2\2\2\u1df7\u1dfa\3\2\2\2\u1df8\u1df9\to\2\2\u1df9"+
		"\u1dfb\7\u008f\2\2\u1dfa\u1df8\3\2\2\2\u1dfa\u1dfb\3\2\2\2\u1dfb\u1dfc"+
		"\3\2\2\2\u1dfc\u1dff\7\u02e9\2\2\u1dfd\u1dfe\7\u02e1\2\2\u1dfe\u1e00\5"+
		"\u0454\u022b\2\u1dff\u1dfd\3\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u1e17\3\2"+
		"\2\2\u1e01\u1e02\7\u02ad\2\2\u1e02\u1e04\7\u02e8\2\2\u1e03\u1e05\5\u03cc"+
		"\u01e7\2\u1e04\u1e03\3\2\2\2\u1e04\u1e05\3\2\2\2\u1e05\u1e06\3\2\2\2\u1e06"+
		"\u1e08\5\u0388\u01c5\2\u1e07\u1e09\5\u03c8\u01e5\2\u1e08\u1e07\3\2\2\2"+
		"\u1e08\u1e09\3\2\2\2\u1e09\u1e0f\3\2\2\2\u1e0a\u1e0b\7Y\2\2\u1e0b\u1e0c"+
		"\5\u03ce\u01e8\2\u1e0c\u1e0d\7\u02ee\2\2\u1e0d\u1e0e\5\u03ce\u01e8\2\u1e0e"+
		"\u1e10\3\2\2\2\u1e0f\u1e0a\3\2\2\2\u1e0f\u1e10\3\2\2\2\u1e10\u1e11\3\2"+
		"\2\2\u1e11\u1e14\7\u02e9\2\2\u1e12\u1e13\7\u02e1\2\2\u1e13\u1e15\5\u0454"+
		"\u022b\2\u1e14\u1e12\3\2\2\2\u1e14\u1e15\3\2\2\2\u1e15\u1e17\3\2\2\2\u1e16"+
		"\u1cd8\3\2\2\2\u1e16\u1cdd\3\2\2\2\u1e16\u1ce2\3\2\2\2\u1e16\u1cef\3\2"+
		"\2\2\u1e16\u1cfd\3\2\2\2\u1e16\u1d09\3\2\2\2\u1e16\u1d14\3\2\2\2\u1e16"+
		"\u1d1e\3\2\2\2\u1e16\u1d21\3\2\2\2\u1e16\u1d29\3\2\2\2\u1e16\u1d30\3\2"+
		"\2\2\u1e16\u1d37\3\2\2\2\u1e16\u1d42\3\2\2\2\u1e16\u1d52\3\2\2\2\u1e16"+
		"\u1d5c\3\2\2\2\u1e16\u1d6a\3\2\2\2\u1e16\u1d75\3\2\2\2\u1e16\u1d84\3\2"+
		"\2\2\u1e16\u1da0\3\2\2\2\u1e16\u1da8\3\2\2\2\u1e16\u1db4\3\2\2\2\u1e16"+
		"\u1dc5\3\2\2\2\u1e16\u1dd7\3\2\2\2\u1e16\u1de7\3\2\2\2\u1e16\u1e01\3\2"+
		"\2\2\u1e17\u03af\3\2\2\2\u1e18\u1e19\tp\2\2\u1e19\u03b1\3\2\2\2\u1e1a"+
		"\u1e1b\tq\2\2\u1e1b\u03b3\3\2\2\2\u1e1c\u1e1d\tr\2\2\u1e1d\u03b5\3\2\2"+
		"\2\u1e1e\u1e1f\7\u01a7\2\2\u1e1f\u1e21\7\u02e8\2\2\u1e20\u1e22\5\u02e2"+
		"\u0172\2\u1e21\u1e20\3\2\2\2\u1e21\u1e22\3\2\2\2\u1e22\u1e27\3\2\2\2\u1e23"+
		"\u1e25\5\u0326\u0194\2\u1e24\u1e26\5\u03b8\u01dd\2\u1e25\u1e24\3\2\2\2"+
		"\u1e25\u1e26\3\2\2\2\u1e26\u1e28\3\2\2\2\u1e27\u1e23\3\2\2\2\u1e27\u1e28"+
		"\3\2\2\2\u1e28\u1e29\3\2\2\2\u1e29\u1e2a\7\u02e9\2\2\u1e2a\u03b7\3\2\2"+
		"\2\u1e2b\u1e32\5\u03ba\u01de\2\u1e2c\u1e2d\7.\2\2\u1e2d\u1e2e\5\u03bc"+
		"\u01df\2\u1e2e\u1e2f\7\23\2\2\u1e2f\u1e30\5\u03bc\u01df\2\u1e30\u1e33"+
		"\3\2\2\2\u1e31\u1e33\5\u03bc\u01df\2\u1e32\u1e2c\3\2\2\2\u1e32\u1e31\3"+
		"\2\2\2\u1e33\u03b9\3\2\2\2\u1e34\u1e35\ts\2\2\u1e35\u03bb\3\2\2\2\u1e36"+
		"\u1e37\7\u0271\2\2\u1e37\u1e3e\7\u01c9\2\2\u1e38\u1e39\7w\2\2\u1e39\u1e3e"+
		"\7\u0205\2\2\u1e3a\u1e3b\5\u0388\u01c5\2\u1e3b\u1e3c\tt\2\2\u1e3c\u1e3e"+
		"\3\2\2\2\u1e3d\u1e36\3\2\2\2\u1e3d\u1e38\3\2\2\2\u1e3d\u1e3a\3\2\2\2\u1e3e"+
		"\u03bd\3\2\2\2\u1e3f\u1e49\7\u0284\2\2\u1e40\u1e4a\7\u02eb\2\2\u1e41\u1e43"+
		"\7\u02ee\2\2\u1e42\u1e41\3\2\2\2\u1e42\u1e43\3\2\2\2\u1e43\u1e44\3\2\2"+
		"\2\u1e44\u1e46\5\u03c0\u01e1\2\u1e45\u1e42\3\2\2\2\u1e46\u1e47\3\2\2\2"+
		"\u1e47\u1e45\3\2\2\2\u1e47\u1e48\3\2\2\2\u1e48\u1e4a\3\2\2\2\u1e49\u1e40"+
		"\3\2\2\2\u1e49\u1e45\3\2\2\2\u1e4a\u03bf\3\2\2\2\u1e4b\u1e4d\7\u0107\2"+
		"\2\u1e4c\u1e4e\7\u01a5\2\2\u1e4d\u1e4c\3\2\2\2\u1e4d\u1e4e\3\2\2\2\u1e4e"+
		"\u1e51\3\2\2\2\u1e4f\u1e51\7\u01a5\2\2\u1e50\u1e4b\3\2\2\2\u1e50\u1e4f"+
		"\3\2\2\2\u1e50\u1e51\3\2\2\2\u1e51\u1e52\3\2\2\2\u1e52\u1e54\5\u02d0\u0169"+
		"\2\u1e53\u1e55\5\u03ee\u01f8\2\u1e54\u1e53\3\2\2\2\u1e54\u1e55\3\2\2\2"+
		"\u1e55\u03c1\3\2\2\2\u1e56\u1e57\7\u019e\2\2\u1e57\u1e58\7?\2\2\u1e58"+
		"\u1e59\5\u0388\u01c5\2\u1e59\u03c3\3\2\2\2\u1e5a\u1e5b\7\u029a\2\2\u1e5b"+
		"\u1e5c\7\u00e8\2\2\u1e5c\u1e5d\7\u02e8\2\2\u1e5d\u1e5e\5\u0326\u0194\2"+
		"\u1e5e\u1e5f\7\u02e9\2\2\u1e5f\u1e62\3\2\2\2\u1e60\u1e62\5\u03b6\u01dc"+
		"\2\u1e61\u1e5a\3\2\2\2\u1e61\u1e60\3\2\2\2\u1e62\u03c5\3\2\2\2\u1e63\u1e79"+
		"\7p\2\2\u1e64\u1e66\7\u015c\2\2\u1e65\u1e67\7#\2\2\u1e66\u1e65\3\2\2\2"+
		"\u1e66\u1e67\3\2\2\2\u1e67\u1e7a\3\2\2\2\u1e68\u1e6d\7\u02e8\2\2\u1e69"+
		"\u1e6b\7\u02ee\2\2\u1e6a\u1e69\3\2\2\2\u1e6a\u1e6b\3\2\2\2\u1e6b\u1e6c"+
		"\3\2\2\2\u1e6c\u1e6e\5\u046c\u0237\2\u1e6d\u1e6a\3\2\2\2\u1e6e\u1e6f\3"+
		"\2\2\2\u1e6f\u1e6d\3\2\2\2\u1e6f\u1e70\3\2\2\2\u1e70\u1e71\3\2\2\2\u1e71"+
		"\u1e72\7\u02e9\2\2\u1e72\u1e73\7\u0286\2\2\u1e73\u1e75\7\u02e8\2\2\u1e74"+
		"\u1e76\5\u0374\u01bb\2\u1e75\u1e74\3\2\2\2\u1e75\u1e76\3\2\2\2\u1e76\u1e77"+
		"\3\2\2\2\u1e77\u1e78\7\u02e9\2\2\u1e78\u1e7a\3\2\2\2\u1e79\u1e64\3\2\2"+
		"\2\u1e79\u1e68\3\2\2\2\u1e7a\u03c7\3\2\2\2\u1e7b\u1e7e\7\u01b1\2\2\u1e7c"+
		"\u1e7d\7?\2\2\u1e7d\u1e7f\7\u0287\2\2\u1e7e\u1e7c\3\2\2\2\u1e7e\u1e7f"+
		"\3\2\2\2\u1e7f\u1e80\3\2\2\2\u1e80\u1e82\5\u0376\u01bc\2\u1e81\u1e83\5"+
		"\u03ee\u01f8\2\u1e82\u1e81\3\2\2\2\u1e82\u1e83\3\2\2\2\u1e83\u1e84\3\2"+
		"\2\2\u1e84\u1e85\7\u02ee\2\2\u1e85\u1e87\5\u0376\u01bc\2\u1e86\u1e88\5"+
		"\u03ee\u01f8\2\u1e87\u1e86\3\2\2\2\u1e87\u1e88\3\2\2\2\u1e88\u03c9\3\2"+
		"\2\2\u1e89\u1e8a\7\u02a0\2\2\u1e8a\u1e8c\7\u02e8\2\2\u1e8b\u1e8d\tl\2"+
		"\2\u1e8c\u1e8b\3\2\2\2\u1e8c\u1e8d\3\2\2\2\u1e8d\u1e8f\3\2\2\2\u1e8e\u1e90"+
		"\tu\2\2\u1e8f\u1e8e\3\2\2\2\u1e8f\u1e90\3\2\2\2\u1e90\u1e95\3\2\2\2\u1e91"+
		"\u1e93\7\u02ee\2\2\u1e92\u1e91\3\2\2\2\u1e92\u1e93\3\2\2\2\u1e93\u1e94"+
		"\3\2\2\2\u1e94\u1e96\5\u03d2\u01ea\2\u1e95\u1e92\3\2\2\2\u1e96\u1e97\3"+
		"\2\2\2\u1e97\u1e95\3\2\2\2\u1e97\u1e98\3\2\2\2\u1e98\u1e99\3\2\2\2\u1e99"+
		"\u1e9a\7\u02e9\2\2\u1e9a\u03cb\3\2\2\2\u1e9b\u1e9c\7\u02a6\2\2\u1e9c\u1ea0"+
		"\7\u02e8\2\2\u1e9d\u1e9e\5\u0388\u01c5\2\u1e9e\u1e9f\5\u03ee\u01f8\2\u1e9f"+
		"\u1ea1\3\2\2\2\u1ea0\u1e9d\3\2\2\2\u1ea0\u1ea1\3\2\2\2\u1ea1\u1ea8\3\2"+
		"\2\2\u1ea2\u1ea3\7\u02ee\2\2\u1ea3\u1ea4\5\u0388\u01c5\2\u1ea4\u1ea5\5"+
		"\u03ee\u01f8\2\u1ea5\u1ea7\3\2\2\2\u1ea6\u1ea2\3\2\2\2\u1ea7\u1eaa\3\2"+
		"\2\2\u1ea8\u1ea6\3\2\2\2\u1ea8\u1ea9\3\2\2\2\u1ea9\u1eac\3\2\2\2\u1eaa"+
		"\u1ea8\3\2\2\2\u1eab\u1ead\5\u03d0\u01e9\2\u1eac\u1eab\3\2\2\2\u1eac\u1ead"+
		"\3\2\2\2\u1ead\u1eae\3\2\2\2\u1eae\u1eaf\7\u02e9\2\2\u1eaf\u03cd\3\2\2"+
		"\2\u1eb0\u1ebb\5\u03f6\u01fc\2\u1eb1\u1eb2\7\u00dc\2\2\u1eb2\u1ebc\7\u019f"+
		"\2\2\u1eb3\u1eb6\5\u0448\u0225\2\u1eb4\u1eb5\7\u01b3\2\2\u1eb5\u1eb7\5"+
		"\u0388\u01c5\2\u1eb6\u1eb4\3\2\2\2\u1eb6\u1eb7\3\2\2\2\u1eb7\u1eb9\3\2"+
		"\2\2\u1eb8\u1eba\5\u03d0\u01e9\2\u1eb9\u1eb8\3\2\2\2\u1eb9\u1eba\3\2\2"+
		"\2\u1eba\u1ebc\3\2\2\2\u1ebb\u1eb1\3\2\2\2\u1ebb\u1eb3\3\2\2\2\u1ebc\u03cf"+
		"\3\2\2\2\u1ebd\u1ebe\7\u008e\2\2\u1ebe\u1ebf\5\u0388\u01c5\2\u1ebf\u03d1"+
		"\3\2\2\2\u1ec0\u1ec7\5\u0376\u01bc\2\u1ec1\u1ec5\7\31\2\2\u1ec2\u1ec6"+
		"\5\u0486\u0244\2\u1ec3\u1ec4\7\u00ba\2\2\u1ec4\u1ec6\5\u0388\u01c5\2\u1ec5"+
		"\u1ec2\3\2\2\2\u1ec5\u1ec3\3\2\2\2\u1ec6\u1ec8\3\2\2\2\u1ec7\u1ec1\3\2"+
		"\2\2\u1ec7\u1ec8\3\2\2\2\u1ec8\u03d3\3\2\2\2\u1ec9\u1ecd\7\u028f\2\2\u1eca"+
		"\u1ecb\7\u017e\2\2\u1ecb\u1ece\7\u0287\2\2\u1ecc\u1ece\5\u0376\u01bc\2"+
		"\u1ecd\u1eca\3\2\2\2\u1ecd\u1ecc\3\2\2\2\u1ece\u03d5\3\2\2\2\u1ecf\u1ed5"+
		"\7\u0237\2\2\u1ed0\u1ed6\7\u02b2\2\2\u1ed1\u1ed3\7\u017e\2\2\u1ed2\u1ed4"+
		"\7\u0287\2\2\u1ed3\u1ed2\3\2\2\2\u1ed3\u1ed4\3\2\2\2\u1ed4\u1ed6\3\2\2"+
		"\2\u1ed5\u1ed0\3\2\2\2\u1ed5\u1ed1\3\2\2\2\u1ed6\u03d7\3\2\2\2\u1ed7\u1ed8"+
		"\7\u00b1\2\2\u1ed8\u1ed9\5\u0388\u01c5\2\u1ed9\u03d9\3\2\2\2\u1eda\u1edb"+
		"\7\u028f\2\2\u1edb\u1edc\5\u0388\u01c5\2\u1edc\u03db\3\2\2\2\u1edd\u1ede"+
		"\7\u017e\2\2\u1ede\u1ee6\7\u00fe\2\2\u1edf\u1ee3\7\u00fe\2\2\u1ee0\u1ee1"+
		"\7\u022a\2\2\u1ee1\u1ee2\7\u02fc\2\2\u1ee2\u1ee4\5\u0388\u01c5\2\u1ee3"+
		"\u1ee0\3\2\2\2\u1ee3\u1ee4\3\2\2\2\u1ee4\u1ee6\3\2\2\2\u1ee5\u1edd\3\2"+
		"\2\2\u1ee5\u1edf\3\2\2\2\u1ee6\u03dd\3\2\2\2\u1ee7\u1ef1\7\u02ef\2\2\u1ee8"+
		"\u1ef1\7\u00c5\2\2\u1ee9\u1ef1\7\u0304\2\2\u1eea\u1eeb\7\u0224\2\2\u1eeb"+
		"\u1ef1\tv\2\2\u1eec\u1ef1\7\u0305\2\2\u1eed\u1ef1\5\u03e2\u01f2\2\u1eee"+
		"\u1ef1\5\u03ea\u01f6\2\u1eef\u1ef1\5\u03e0\u01f1\2\u1ef0\u1ee7\3\2\2\2"+
		"\u1ef0\u1ee8\3\2\2\2\u1ef0\u1ee9\3\2\2\2\u1ef0\u1eea\3\2\2\2\u1ef0\u1eec"+
		"\3\2\2\2\u1ef0\u1eed\3\2\2\2\u1ef0\u1eee\3\2\2\2\u1ef0\u1eef\3\2\2\2\u1ef1"+
		"\u03df\3\2\2\2\u1ef2\u1ef3\7\u00c2\2\2\u1ef3\u1ef4\5\u028e\u0148\2\u1ef4"+
		"\u03e1\3\2\2\2\u1ef5\u1ef6\7\u0296\2\2\u1ef6\u1efc\tw\2\2\u1ef7\u1ef8"+
		"\7\u00c5\2\2\u1ef8\u1ef9\tx\2\2\u1ef9\u1efd\ty\2\2\u1efa\u1efb\7l\2\2"+
		"\u1efb\u1efd\tz\2\2\u1efc\u1ef7\3\2\2\2\u1efc\u1efa\3\2\2\2\u1efd\u03e3"+
		"\3\2\2\2\u1efe\u1eff\7\u02e8\2\2\u1eff\u1f00\5\u03e6\u01f4\2\u1f00\u1f01"+
		"\7\u02e9\2\2\u1f01\u03e5\3\2\2\2\u1f02\u1f04\5\u03e8\u01f5\2\u1f03\u1f02"+
		"\3\2\2\2\u1f03\u1f04\3\2\2\2\u1f04\u1f07\3\2\2\2\u1f05\u1f06\7\u02ee\2"+
		"\2\u1f06\u1f08\5\u03e8\u01f5\2\u1f07\u1f05\3\2\2\2\u1f08\u1f09\3\2\2\2"+
		"\u1f09\u1f07\3\2\2\2\u1f09\u1f0a\3\2\2\2\u1f0a\u03e7\3\2\2\2\u1f0b\u1f0c"+
		"\5\u0492\u024a\2\u1f0c\u1f0d\7\u02ff\2\2\u1f0d\u1f0e\5\u0376\u01bc\2\u1f0e"+
		"\u1f11\3\2\2\2\u1f0f\u1f11\5\u0376\u01bc\2\u1f10\u1f0b\3\2\2\2\u1f10\u1f0f"+
		"\3\2\2\2\u1f11\u03e9\3\2\2\2\u1f12\u1f13\7\u021f\2\2\u1f13\u1f19\5\u0492"+
		"\u024a\2\u1f14\u1f1a\7\u02e4\2\2\u1f15\u1f1a\7\u0198\2\2\u1f16\u1f1a\7"+
		"\u0191\2\2\u1f17\u1f1a\5\u049a\u024e\2\u1f18\u1f1a\5\u0492\u024a\2\u1f19"+
		"\u1f14\3\2\2\2\u1f19\u1f15\3\2\2\2\u1f19\u1f16\3\2\2\2\u1f19\u1f17\3\2"+
		"\2\2\u1f19\u1f18\3\2\2\2\u1f1a\u03eb\3\2\2\2\u1f1b\u1f1d\t{\2\2\u1f1c"+
		"\u1f1e\7\u00dc\2\2\u1f1d\u1f1c\3\2\2\2\u1f1d\u1f1e\3\2\2\2\u1f1e\u1f1f"+
		"\3\2\2\2\u1f1f\u1f21\7\u02e8\2\2\u1f20\u1f22\5\u0374\u01bb\2\u1f21\u1f20"+
		"\3\2\2\2\u1f21\u1f22\3\2\2\2\u1f22\u1f23\3\2\2\2\u1f23\u1f24\7\u02e9\2"+
		"\2\u1f24\u03ed\3\2\2\2\u1f25\u1f27\7\31\2\2\u1f26\u1f25\3\2\2\2\u1f26"+
		"\u1f27\3\2\2\2\u1f27\u1f2a\3\2\2\2\u1f28\u1f2b\5\u0462\u0232\2\u1f29\u1f2b"+
		"\5\u049e\u0250\2\u1f2a\u1f28\3\2\2\2\u1f2a\u1f29\3\2\2\2\u1f2b\u1f2e\3"+
		"\2\2\2\u1f2c\u1f2e\7\31\2\2\u1f2d\u1f26\3\2\2\2\u1f2d\u1f2c\3\2\2\2\u1f2e"+
		"\u03ef\3\2\2\2\u1f2f\u1f32\5\u0462\u0232\2\u1f30\u1f32\5\u049e\u0250\2"+
		"\u1f31\u1f2f\3\2\2\2\u1f31\u1f30\3\2\2\2\u1f32\u03f1\3\2\2\2\u1f33\u1f38"+
		"\7\u0298\2\2\u1f34\u1f35\7w\2\2\u1f35\u1f36\7\u0192\2\2\u1f36\u1f39\5"+
		"\u0404\u0203\2\u1f37\u1f39\5\u0376\u01bc\2\u1f38\u1f34\3\2\2\2\u1f38\u1f37"+
		"\3\2\2\2\u1f39\u03f3\3\2\2\2\u1f3a\u1f3b\7>\2\2\u1f3b\u1f3d\7W\2\2\u1f3c"+
		"\u1f3a\3\2\2\2\u1f3c\u1f3d\3\2\2\2\u1f3d\u1f3e\3\2\2\2\u1f3e\u1f43\7\u0117"+
		"\2\2\u1f3f\u1f41\7\u02ee\2\2\u1f40\u1f3f\3\2\2\2\u1f40\u1f41\3\2\2\2\u1f41"+
		"\u1f42\3\2\2\2\u1f42\u1f44\5\u0402\u0202\2\u1f43\u1f40\3\2\2\2\u1f44\u1f45"+
		"\3\2\2\2\u1f45\u1f43\3\2\2\2\u1f45\u1f46\3\2\2\2\u1f46\u03f5\3\2\2\2\u1f47"+
		"\u1f4a\5\u0462\u0232\2\u1f48\u1f4a\5\u049e\u0250\2\u1f49\u1f47\3\2\2\2"+
		"\u1f49\u1f48\3\2\2\2\u1f4a\u03f7\3\2\2\2\u1f4b\u1f4e\5\u047e\u0240\2\u1f4c"+
		"\u1f4d\7\u02f0\2\2\u1f4d\u1f4f\5\u0408\u0205\2\u1f4e\u1f4c\3\2\2\2\u1f4e"+
		"\u1f4f\3\2\2\2\u1f4f\u03f9\3\2\2\2\u1f50\u1f51\5\u0462\u0232\2\u1f51\u03fb"+
		"\3\2\2\2\u1f52\u1f54\5\u0486\u0244\2\u1f53\u1f55\5\u00b4[\2\u1f54\u1f53"+
		"\3\2\2\2\u1f54\u1f55\3\2\2\2\u1f55\u03fd\3\2\2\2\u1f56\u1f59\5\u0486\u0244"+
		"\2\u1f57\u1f59\7c\2\2\u1f58\u1f56\3\2\2\2\u1f58\u1f57\3\2\2\2\u1f59\u03ff"+
		"\3\2\2\2\u1f5a\u1f5d\5\u047e\u0240\2\u1f5b\u1f5c\7\u02f0\2\2\u1f5c\u1f5e"+
		"\5\u0408\u0205\2\u1f5d\u1f5b\3\2\2\2\u1f5d\u1f5e\3\2\2\2\u1f5e\u0401\3"+
		"\2\2\2\u1f5f\u1f60\7\u0300\2\2\u1f60\u1f62\5\u048e\u0248\2\u1f61\u1f5f"+
		"\3\2\2\2\u1f61\u1f62\3\2\2\2\u1f62\u1f63\3\2\2\2\u1f63\u1f66\5\u0486\u0244"+
		"\2\u1f64\u1f65\7\u02e1\2\2\u1f65\u1f67\5\u0486\u0244\2\u1f66\u1f64\3\2"+
		"\2\2\u1f66\u1f67\3\2\2\2\u1f67\u1f6a\3\2\2\2\u1f68\u1f6a\5\u0450\u0229"+
		"\2\u1f69\u1f61\3\2\2\2\u1f69\u1f68\3\2\2\2\u1f6a\u0403\3\2\2\2\u1f6b\u1f6e"+
		"\5\u0452\u022a\2\u1f6c\u1f6e\5\u0450\u0229\2\u1f6d\u1f6b\3\2\2\2\u1f6d"+
		"\u1f6c\3\2\2\2\u1f6e\u0405\3\2\2\2\u1f6f\u1f72\5\u0462\u0232\2\u1f70\u1f72"+
		"\5\u0450\u0229\2\u1f71\u1f6f\3\2\2\2\u1f71\u1f70\3\2\2\2\u1f72\u0407\3"+
		"\2\2\2\u1f73\u1f74\5\u0462\u0232\2\u1f74\u0409\3\2\2\2\u1f75\u1f79\5\u0438"+
		"\u021d\2\u1f76\u1f77\7\u02f0\2\2\u1f77\u1f7a\5\u0408\u0205\2\u1f78\u1f7a"+
		"\5\u03ec\u01f7\2\u1f79\u1f76\3\2\2\2\u1f79\u1f78\3\2\2\2\u1f79\u1f7a\3"+
		"\2\2\2\u1f7a\u040b\3\2\2\2\u1f7b\u1f7c\5\u0486\u0244\2\u1f7c\u040d\3\2"+
		"\2\2\u1f7d\u1f7e\5\u0486\u0244\2\u1f7e\u040f\3\2\2\2\u1f7f\u1f80\5\u0486"+
		"\u0244\2\u1f80\u0411\3\2\2\2\u1f81\u1f82\5\u0486\u0244\2\u1f82\u0413\3"+
		"\2\2\2\u1f83\u1f84\5\u0486\u0244\2\u1f84\u0415\3\2\2\2\u1f85\u1f86\5\u0486"+
		"\u0244\2\u1f86\u0417\3\2\2\2\u1f87\u1f88\5\u0486\u0244\2\u1f88\u0419\3"+
		"\2\2\2\u1f89\u1f8a\5\u0486\u0244\2\u1f8a\u041b\3\2\2\2\u1f8b\u1f8c\5\u0486"+
		"\u0244\2\u1f8c\u041d\3\2\2\2\u1f8d\u1f8e\5\u0486\u0244\2\u1f8e\u041f\3"+
		"\2\2\2\u1f8f\u1f90\5\u0486\u0244\2\u1f90\u0421\3\2\2\2\u1f91\u1f92\5\u0486"+
		"\u0244\2\u1f92\u0423\3\2\2\2\u1f93\u1f94\5\u0486\u0244\2\u1f94\u0425\3"+
		"\2\2\2\u1f95\u1f96\5\u0486\u0244\2\u1f96\u0427\3\2\2\2\u1f97\u1f9a\5\u0462"+
		"\u0232\2\u1f98\u1f99\7\u02e1\2\2\u1f99\u1f9b\5\u0486\u0244\2\u1f9a\u1f98"+
		"\3\2\2\2\u1f9a\u1f9b\3\2\2\2\u1f9b\u0429\3\2\2\2\u1f9c\u1f9d\5\u0428\u0215"+
		"\2\u1f9d\u042b\3\2\2\2\u1f9e\u1f9f\5\u0428\u0215\2\u1f9f\u042d\3\2\2\2"+
		"\u1fa0\u1fa1\5\u0428\u0215\2\u1fa1\u042f\3\2\2\2\u1fa2\u1fa3\5\u0428\u0215"+
		"\2\u1fa3\u0431\3\2\2\2\u1fa4\u1fa5\5\u0428\u0215\2\u1fa5\u0433\3\2\2\2"+
		"\u1fa6\u1fa7\5\u0428\u0215\2\u1fa7\u0435\3\2\2\2\u1fa8\u1fa9\5\u0428\u0215"+
		"\2\u1fa9\u0437\3\2\2\2\u1faa\u1fab\5\u0428\u0215\2\u1fab\u0439\3\2\2\2"+
		"\u1fac\u1fc5\5\u040a\u0206\2\u1fad\u1fb2\7\u0282\2\2\u1fae\u1fb0\7\u02ee"+
		"\2\2\u1faf\u1fae\3\2\2\2\u1faf\u1fb0\3\2\2\2\u1fb0\u1fb1\3\2\2\2\u1fb1"+
		"\u1fb3\5\u0418\u020d\2\u1fb2\u1faf\3\2\2\2\u1fb3\u1fb4\3\2\2\2\u1fb4\u1fb2"+
		"\3\2\2\2\u1fb4\u1fb5\3\2\2\2\u1fb5\u1fc5\3\2\2\2\u1fb6\u1fb7\7\u009a\2"+
		"\2\u1fb7\u1fc5\5\u0416\u020c\2\u1fb8\u1fb9\7\u00a9\2\2\u1fb9\u1fc5\5\u0420"+
		"\u0211\2\u1fba\u1fbb\7\u0157\2\2\u1fbb\u1fbc\7\u015c\2\2\u1fbc\u1fc5\5"+
		"\u0420\u0211\2\u1fbd\u1fbe\7\u011d\2\2\u1fbe\u1fbf\t|\2\2\u1fbf\u1fc5"+
		"\5\u0420\u0211\2\u1fc0\u1fc1\7\u0236\2\2\u1fc1\u1fc2\7\u026a\2\2\u1fc2"+
		"\u1fc3\7\u01d4\2\2\u1fc3\u1fc5\5\u0420\u0211\2\u1fc4\u1fac\3\2\2\2\u1fc4"+
		"\u1fad\3\2\2\2\u1fc4\u1fb6\3\2\2\2\u1fc4\u1fb8\3\2\2\2\u1fc4\u1fba\3\2"+
		"\2\2\u1fc4\u1fbd\3\2\2\2\u1fc4\u1fc0\3\2\2\2\u1fc5\u043b\3\2\2\2\u1fc6"+
		"\u1fc8\7\u02ee\2\2\u1fc7\u1fc6\3\2\2\2\u1fc7\u1fc8\3\2\2\2\u1fc8\u1fc9"+
		"\3\2\2\2\u1fc9\u1fcb\5\u0484\u0243\2\u1fca\u1fc7\3\2\2\2\u1fcb\u1fcc\3"+
		"\2\2\2\u1fcc\u1fca\3\2\2\2\u1fcc\u1fcd\3\2\2\2\u1fcd\u043d\3\2\2\2\u1fce"+
		"\u1fcf\7\u02e8\2\2\u1fcf\u1fd0\5\u043c\u021f\2\u1fd0\u1fd1\7\u02e9\2\2"+
		"\u1fd1\u043f\3\2\2\2\u1fd2\u1fd3\7\u0121\2\2\u1fd3\u1fd4\7\u02e8\2\2\u1fd4"+
		"\u1fd5\7\u02bd\2\2\u1fd5\u1fd6\tY\2\2\u1fd6\u1fd7\5\u0326\u0194\2\u1fd7"+
		"\u1fd9\7\u02e9\2\2\u1fd8\u1fda\5\u03b6\u01dc\2\u1fd9\u1fd8\3\2\2\2\u1fd9"+
		"\u1fda\3\2\2\2\u1fda\u0441\3\2\2\2\u1fdb\u1fe5\7\u02e8\2\2\u1fdc\u1fde"+
		"\7\u02ee\2\2\u1fdd\u1fdc\3\2\2\2\u1fdd\u1fde\3\2\2\2\u1fde\u1fdf\3\2\2"+
		"\2\u1fdf\u1fe1\5\u03e8\u01f5\2\u1fe0\u1fe2\5\u0446\u0224\2\u1fe1\u1fe0"+
		"\3\2\2\2\u1fe1\u1fe2\3\2\2\2\u1fe2\u1fe4\3\2\2\2\u1fe3\u1fdd\3\2\2\2\u1fe4"+
		"\u1fe7\3\2\2\2\u1fe5\u1fe3\3\2\2\2\u1fe5\u1fe6\3\2\2\2\u1fe6\u1fe8\3\2"+
		"\2\2\u1fe7\u1fe5\3\2\2\2\u1fe8\u1fea\7\u02e9\2\2\u1fe9\u1feb\5\u0440\u0221"+
		"\2\u1fea\u1fe9\3\2\2\2\u1fea\u1feb\3\2\2\2\u1feb\u0443\3\2\2\2\u1fec\u1fed"+
		"\7\u02e8\2\2\u1fed\u1ffa\5\u0484\u0243\2\u1fee\u1ff1\7\u02ee\2\2\u1fef"+
		"\u1ff2\5\u049a\u024e\2\u1ff0\u1ff2\7\u018a\2\2\u1ff1\u1fef\3\2\2\2\u1ff1"+
		"\u1ff0\3\2\2\2\u1ff2\u1ff8\3\2\2\2\u1ff3\u1ff6\7\u02ee\2\2\u1ff4\u1ff7"+
		"\5\u049a\u024e\2\u1ff5\u1ff7\7\u018a\2\2\u1ff6\u1ff4\3\2\2\2\u1ff6\u1ff5"+
		"\3\2\2\2\u1ff7\u1ff9\3\2\2\2\u1ff8\u1ff3\3\2\2\2\u1ff8\u1ff9\3\2\2\2\u1ff9"+
		"\u1ffb\3\2\2\2\u1ffa\u1fee\3\2\2\2\u1ffa\u1ffb\3\2\2\2\u1ffb\u1ffc\3\2"+
		"\2\2\u1ffc\u200d\7\u0284\2\2\u1ffd\u1ffe\5\u040a\u0206\2\u1ffe\u1fff\7"+
		"\u02e1\2\2\u1fff\u2000\7\u02eb\2\2\u2000\u200e\3\2\2\2\u2001\u200e\7\u02eb"+
		"\2\2\u2002\u2004\7\u02ee\2\2\u2003\u2002\3\2\2\2\u2003\u2004\3\2\2\2\u2004"+
		"\u2005\3\2\2\2\u2005\u2007\5\u0376\u01bc\2\u2006\u2008\5\u03ee\u01f8\2"+
		"\u2007\u2006\3\2\2\2\u2007\u2008\3\2\2\2\u2008\u200a\3\2\2\2\u2009\u2003"+
		"\3\2\2\2\u200a\u200b\3\2\2\2\u200b\u2009\3\2\2\2\u200b\u200c\3\2\2\2\u200c"+
		"\u200e\3\2\2\2\u200d\u1ffd\3\2\2\2\u200d\u2001\3\2\2\2\u200d\u2009\3\2"+
		"\2\2\u200e\u200f\3\2\2\2\u200f\u2011\7\u02e9\2\2\u2010\u2012\5\u0440\u0221"+
		"\2\u2011\u2010\3\2\2\2\u2011\u2012\3\2\2\2\u2012\u0445\3\2\2\2\u2013\u2014"+
		"\t}\2\2\u2014\u2015\7\u018b\2\2\u2015\u0447\3\2\2\2\u2016\u201f\5\u044a"+
		"\u0226\2\u2017\u2019\7\u01e6\2\2\u2018\u2017\3\2\2\2\u2018\u2019\3\2\2"+
		"\2\u2019\u201a\3\2\2\2\u201a\u201c\5\u048a\u0246\2\u201b\u201d\t~\2\2"+
		"\u201c\u201b\3\2\2\2\u201c\u201d\3\2\2\2\u201d\u201f\3\2\2\2\u201e\u2016"+
		"\3\2\2\2\u201e\u2018\3\2\2\2\u201f\u0449\3\2\2\2\u2020\u2022\5\u044e\u0228"+
		"\2\u2021\u2023\5\u044c\u0227\2\u2022\u2021\3\2\2\2\u2022\u2023\3\2\2\2"+
		"\u2023\u202d\3\2\2\2\u2024\u2026\7\u029c\2\2\u2025\u2027\7\u0137\2\2\u2026"+
		"\u2025\3\2\2\2\u2026\u2027\3\2\2\2\u2027\u2028\3\2\2\2\u2028\u2029\7\u0261"+
		"\2\2\u2029\u202e\7\u02b5\2\2\u202a\u202b\7J\2\2\u202b\u202c\7\u021f\2"+
		"\2\u202c\u202e\5\u048e\u0248\2\u202d\u2024\3\2\2\2\u202d\u202a\3\2\2\2"+
		"\u202d\u202e\3\2\2\2\u202e\u2040\3\2\2\2\u202f\u2030\7\u0114\2\2\u2030"+
		"\u2035\t\177\2\2\u2031\u2032\7\u02e8\2\2\u2032\u2033\5\u0376\u01bc\2\u2033"+
		"\u2034\7\u02e9\2\2\u2034\u2036\3\2\2\2\u2035\u2031\3\2\2\2\u2035\u2036"+
		"\3\2\2\2\u2036\u2037\3\2\2\2\u2037\u2038\7\u0266\2\2\u2038\u203d\t\u0080"+
		"\2\2\u2039\u203a\7\u02e8\2\2\u203a\u203b\5\u0376\u01bc\2\u203b\u203c\7"+
		"\u02e9\2\2\u203c\u203e\3\2\2\2\u203d\u2039\3\2\2\2\u203d\u203e\3\2\2\2"+
		"\u203e\u2040\3\2\2\2\u203f\u2020\3\2\2\2\u203f\u202f\3\2\2\2\u2040\u044b"+
		"\3\2\2\2\u2041\u2042\7\u02e8\2\2\u2042\u2045\5\u049a\u024e\2\u2043\u2044"+
		"\7\u02ee\2\2\u2044\u2046\5\u049a\u024e\2\u2045\u2043\3\2\2\2\u2045\u2046"+
		"\3\2\2\2\u2046\u2048\3\2\2\2\u2047\u2049\t\u0081\2\2\u2048\u2047\3\2\2"+
		"\2\u2048\u2049\3\2\2\2\u2049\u204a\3\2\2\2\u204a\u204b\7\u02e9\2\2\u204b"+
		"\u044d\3\2\2\2\u204c\u2089\7\64\2\2\u204d\u2089\7\u01c3\2\2\u204e\u2089"+
		"\7\u0166\2\2\u204f\u2089\7\63\2\2\u2050\u2089\7\62\2\2\u2051\u2089\7\u0167"+
		"\2\2\u2052\u2089\7\u01c7\2\2\u2053\u2089\7\u01c6\2\2\u2054\u2089\7\u0227"+
		"\2\2\u2055\u2089\7\u0228\2\2\u2056\u2089\7\u018e\2\2\u2057\u2089\7\u0087"+
		"\2\2\u2058\u2089\7\u0112\2\2\u2059\u2089\7\u0116\2\2\u205a\u2089\7\u018d"+
		"\2\2\u205b\u2089\7\u022d\2\2\u205c\u2089\7\u018c\2\2\u205d\u2089\7\u0088"+
		"\2\2\u205e\u2060\7\u00a3\2\2\u205f\u2061\7\u01ca\2\2\u2060\u205f\3\2\2"+
		"\2\u2060\u2061\3\2\2\2\u2061\u2089\3\2\2\2\u2062\u2089\7\u00d5\2\2\u2063"+
		"\u2089\7\u01df\2\2\u2064\u2089\7\u016a\2\2\u2065\u2067\7\u0142\2\2\u2066"+
		"\u2068\7\u01dc\2\2\u2067\u2066\3\2\2\2\u2067\u2068\3\2\2\2\u2068\u2089"+
		"\3\2\2\2\u2069\u2089\7K\2\2\u206a\u2089\7J\2\2\u206b\u2089\7\u0288\2\2"+
		"\u206c\u2089\7\u0289\2\2\u206d\u2089\7\u0240\2\2\u206e\u2089\7\u01dc\2"+
		"\2\u206f\u2089\79\2\2\u2070\u2089\7\177\2\2\u2071\u2089\7\u0204\2\2\u2072"+
		"\u2089\7\u027f\2\2\u2073\u2089\7\u02b1\2\2\u2074\u2089\7\u0160\2\2\u2075"+
		"\u2089\7\u0080\2\2\u2076\u2089\7\u00f2\2\2\u2077\u2089\7\u0159\2\2\u2078"+
		"\u2089\7\u0212\2\2\u2079\u2089\7\u0263\2\2\u207a\u2089\7\u0264\2\2\u207b"+
		"\u2089\7\u0265\2\2\u207c\u2089\7\u0262\2\2\u207d\u2089\7\u025e\2\2\u207e"+
		"\u2089\7\u0260\2\2\u207f\u2089\7\u025f\2\2\u2080\u2089\7\u025d\2\2\u2081"+
		"\u2089\7\u02b3\2\2\u2082\u2089\7\u00a5\2\2\u2083\u2089\7/\2\2\u2084\u2089"+
		"\7\65\2\2\u2085\u2089\7R\2\2\u2086\u2089\7\u016b\2\2\u2087\u2089\7\u015b"+
		"\2\2\u2088\u204c\3\2\2\2\u2088\u204d\3\2\2\2\u2088\u204e\3\2\2\2\u2088"+
		"\u204f\3\2\2\2\u2088\u2050\3\2\2\2\u2088\u2051\3\2\2\2\u2088\u2052\3\2"+
		"\2\2\u2088\u2053\3\2\2\2\u2088\u2054\3\2\2\2\u2088\u2055\3\2\2\2\u2088"+
		"\u2056\3\2\2\2\u2088\u2057\3\2\2\2\u2088\u2058\3\2\2\2\u2088\u2059\3\2"+
		"\2\2\u2088\u205a\3\2\2\2\u2088\u205b\3\2\2\2\u2088\u205c\3\2\2\2\u2088"+
		"\u205d\3\2\2\2\u2088\u205e\3\2\2\2\u2088\u2062\3\2\2\2\u2088\u2063\3\2"+
		"\2\2\u2088\u2064\3\2\2\2\u2088\u2065\3\2\2\2\u2088\u2069\3\2\2\2\u2088"+
		"\u206a\3\2\2\2\u2088\u206b\3\2\2\2\u2088\u206c\3\2\2\2\u2088\u206d\3\2"+
		"\2\2\u2088\u206e\3\2\2\2\u2088\u206f\3\2\2\2\u2088\u2070\3\2\2\2\u2088"+
		"\u2071\3\2\2\2\u2088\u2072\3\2\2\2\u2088\u2073\3\2\2\2\u2088\u2074\3\2"+
		"\2\2\u2088\u2075\3\2\2\2\u2088\u2076\3\2\2\2\u2088\u2077\3\2\2\2\u2088"+
		"\u2078\3\2\2\2\u2088\u2079\3\2\2\2\u2088\u207a\3\2\2\2\u2088\u207b\3\2"+
		"\2\2\u2088\u207c\3\2\2\2\u2088\u207d\3\2\2\2\u2088\u207e\3\2\2\2\u2088"+
		"\u207f\3\2\2\2\u2088\u2080\3\2\2\2\u2088\u2081\3\2\2\2\u2088\u2082\3\2"+
		"\2\2\u2088\u2083\3\2\2\2\u2088\u2084\3\2\2\2\u2088\u2085\3\2\2\2\u2088"+
		"\u2086\3\2\2\2\u2088\u2087\3\2\2\2\u2089\u044f\3\2\2\2\u208a\u208e\7\u02f2"+
		"\2\2\u208b\u208c\7\u02f9\2\2\u208c\u208e\7\u02e2\2\2\u208d\u208a\3\2\2"+
		"\2\u208d\u208b\3\2\2\2\u208e\u2097\3\2\2\2\u208f\u2091\7\u0103\2\2\u2090"+
		"\u208f\3\2\2\2\u2090\u2091\3\2\2\2\u2091\u2095\3\2\2\2\u2092\u2096\7\u02f2"+
		"\2\2\u2093\u2094\7\u02f9\2\2\u2094\u2096\7\u02e2\2\2\u2095\u2092\3\2\2"+
		"\2\u2095\u2093\3\2\2\2\u2096\u2098\3\2\2\2\u2097\u2090\3\2\2\2\u2097\u2098"+
		"\3\2\2\2\u2098\u209d\3\2\2\2\u2099\u209a\7\u02e1\2\2\u209a\u209c\5\u0454"+
		"\u022b\2\u209b\u2099\3\2\2\2\u209c\u209f\3\2\2\2\u209d\u209b\3\2\2\2\u209d"+
		"\u209e\3\2\2\2\u209e\u0451\3\2\2\2\u209f\u209d\3\2\2\2\u20a0\u20a5\5\u0454"+
		"\u022b\2\u20a1\u20a2\7\u02e1\2\2\u20a2\u20a4\5\u0454\u022b\2\u20a3\u20a1"+
		"\3\2\2\2\u20a4\u20a7\3\2\2\2\u20a5\u20a3\3\2\2\2\u20a5\u20a6\3\2\2\2\u20a6"+
		"\u0453\3\2\2\2\u20a7\u20a5\3\2\2\2\u20a8\u20a9\7\u0300\2\2\u20a9\u20ab"+
		"\5\u048e\u0248\2\u20aa\u20a8\3\2\2\2\u20aa\u20ab\3\2\2\2\u20ab\u20ac\3"+
		"\2\2\2\u20ac\u20af\5\u0488\u0245\2\u20ad\u20ae\7\u02f0\2\2\u20ae\u20b0"+
		"\5\u0408\u0205\2\u20af\u20ad\3\2\2\2\u20af\u20b0\3\2\2\2\u20b0\u20b2\3"+
		"\2\2\2\u20b1\u20b3\5\u03e4\u01f3\2\u20b2\u20b1\3\2\2\2\u20b2\u20b3\3\2"+
		"\2\2\u20b3\u20b5\3\2\2\2\u20b4\u20b6\5\u0440\u0221\2\u20b5\u20b4\3\2\2"+
		"\2\u20b5\u20b6\3\2\2\2\u20b6\u0455\3\2\2\2\u20b7\u20b8\7\u0300\2\2\u20b8"+
		"\u20ba\5\u048e\u0248\2\u20b9\u20b7\3\2\2\2\u20b9\u20ba\3\2\2\2\u20ba\u20bb"+
		"\3\2\2\2\u20bb\u20bc\5\u0488\u0245\2\u20bc\u0457\3\2\2\2\u20bd\u20bf\7"+
		"\16\2\2\u20be\u20c0\7\u01d1\2\2\u20bf\u20be\3\2\2\2\u20bf\u20c0\3\2\2"+
		"\2\u20c0\u20df\3\2\2\2\u20c1\u20df\7\20\2\2\u20c2\u20df\7\u0086\2\2\u20c3"+
		"\u20df\7\u0094\2\2\u20c4\u20df\7\u00c2\2\2\u20c5\u20df\7\u00d3\2\2\u20c6"+
		"\u20c7\7\u00d3\2\2\u20c7\u20df\7\27\2\2\u20c8\u20df\7\u0100\2\2\u20c9"+
		"\u20ca\7\u0106\2\2\u20ca\u20df\7\u01d1\2\2\u20cb\u20df\7\u010f\2\2\u20cc"+
		"\u20cd\7\u0121\2\2\u20cd\u20df\7\u0218\2\2\u20ce\u20cf\7\u0154\2\2\u20cf"+
		"\u20df\7\u0290\2\2\u20d0\u20d1\7\u0198\2\2\u20d1\u20d2\7[\2\2\u20d2\u20df"+
		"\7\u01e7\2\2\u20d3\u20d4\7\u01d8\2\2\u20d4\u20df\7\u01fd\2\2\u20d5\u20df"+
		"\7\u01dd\2\2\u20d6\u20df\7\u01e4\2\2\u20d7\u20df\7\u0216\2\2\u20d8\u20d9"+
		"\7\u0269\2\2\u20d9\u20df\7\u0236\2\2\u20da\u20df\7\u0272\2\2\u20db\u20df"+
		"\7\u027d\2\2\u20dc\u20df\7\u0283\2\2\u20dd\u20df\7\u029e\2\2\u20de\u20bd"+
		"\3\2\2\2\u20de\u20c1\3\2\2\2\u20de\u20c2\3\2\2\2\u20de\u20c3\3\2\2\2\u20de"+
		"\u20c4\3\2\2\2\u20de\u20c5\3\2\2\2\u20de\u20c6\3\2\2\2\u20de\u20c8\3\2"+
		"\2\2\u20de\u20c9\3\2\2\2\u20de\u20cb\3\2\2\2\u20de\u20cc\3\2\2\2\u20de"+
		"\u20ce\3\2\2\2\u20de\u20d0\3\2\2\2\u20de\u20d3\3\2\2\2\u20de\u20d5\3\2"+
		"\2\2\u20de\u20d6\3\2\2\2\u20de\u20d7\3\2\2\2\u20de\u20d8\3\2\2\2\u20de"+
		"\u20da\3\2\2\2\u20de\u20db\3\2\2\2\u20de\u20dc\3\2\2\2\u20de\u20dd\3\2"+
		"\2\2\u20df\u0459\3\2\2\2\u20e0\u20e1\7\16\2\2\u20e1\u2227\7\u01d1\2\2"+
		"\u20e2\u2227\7\t\2\2\u20e3\u20e5\7\7\2\2\u20e4\u20e6\7\24\2\2\u20e5\u20e4"+
		"\3\2\2\2\u20e5\u20e6\3\2\2\2\u20e6\u20e7\3\2\2\2\u20e7\u20e8\7\u0236\2"+
		"\2\u20e8\u20e9\7\u026f\2\2\u20e9\u2227\7\u021f\2\2\u20ea\u20eb\t\u0082"+
		"\2\2\u20eb\u20ec\7\24\2\2\u20ec\u20ed\7\u0236\2\2\u20ed\u2227\7\u01d4"+
		"\2\2\u20ee\u20ef\7\7\2\2\u20ef\u20f0\7\u0236\2\2\u20f0\u20f1\7\u0147\2"+
		"\2\u20f1\u2227\7\u018f\2\2\u20f2\u20f4\7r\2\2\u20f3\u20f5\7\24\2\2\u20f4"+
		"\u20f3\3\2\2\2\u20f4\u20f5\3\2\2\2\u20f5\u20f6\3\2\2\2\u20f6\u2227\7T"+
		"\2\2\u20f7\u20f8\t\u0083\2\2\u20f8\u20f9\7\24\2\2\u20f9\u2227\7T\2\2\u20fa"+
		"\u20fb\t\u0084\2\2\u20fb\u20fc\7\24\2\2\u20fc\u2227\7k\2\2\u20fd\u20fe"+
		"\7\u00c3\2\2\u20fe\u20ff\7\u01e2\2\2\u20ff\u2227\7\u01c5\2\2\u2100\u2101"+
		"\7\20\2\2\u2101\u2227\7|\2\2\u2102\u2104\t\u0085\2\2\u2103\u2105\7\u01d6"+
		"\2\2\u2104\u2103\3\2\2\2\u2104\u2105\3\2\2\2\u2105\u2106\3\2\2\2\u2106"+
		"\u2107\7|\2\2\u2107\u2227\7\u0132\2\2\u2108\u2109\7\u00a4\2\2\u2109\u210a"+
		"\7\u01d6\2\2\u210a\u210b\7|\2\2\u210b\u2227\7\u0132\2\2\u210c\u210d\7"+
		"\u0086\2\2\u210d\u210e\7c\2\2\u210e\u2227\7\u021d\2\2\u210f\u2110\7\u0086"+
		"\2\2\u2110\u2111\7\24\2\2\u2111\u2227\7\u01d2\2\2\u2112\u2113\7\22\2\2"+
		"\u2113\u2114\7\24\2\2\u2114\u2227\7\u0098\2\2\u2115\u2117\7r\2\2\u2116"+
		"\u2118\7\24\2\2\u2117\u2116\3\2\2\2\u2117\u2118\3\2\2\2\u2118\u2119\3"+
		"\2\2\2\u2119\u2227\7\u0099\2\2\u211a\u211b\t\u0083\2\2\u211b\u211c\7\24"+
		"\2\2\u211c\u2227\7\u0099\2\2\u211d\u211e\t\u0084\2\2\u211e\u211f\7\24"+
		"\2\2\u211f\u2227\7\u009a\2\2\u2120\u2121\t\u0084\2\2\u2121\u2122\7\24"+
		"\2\2\u2122\u2227\7\u00a9\2\2\u2123\u2128\7\u00d3\2\2\u2124\u2125\7\27"+
		"\2\2\u2125\u2129\7\7\2\2\u2126\u2127\7\24\2\2\u2127\u2129\7\u0254\2\2"+
		"\u2128\u2124\3\2\2\2\u2128\u2126\3\2\2\2\u2129\u2227\3\2\2\2\u212a\u212b"+
		"\t\u0082\2\2\u212b\u212c\7\24\2\2\u212c\u2227\7\u0100\2\2\u212d\u212f"+
		"\7r\2\2\u212e\u2130\7\24\2\2\u212f\u212e\3\2\2\2\u212f\u2130\3\2\2\2\u2130"+
		"\u2131\3\2\2\2\u2131\u2227\7\u0102\2\2\u2132\u2133\t\u0086\2\2\u2133\u2134"+
		"\7\24\2\2\u2134\u2227\7\u0102\2\2\u2135\u2137\7r\2\2\u2136\u2138\t\u0087"+
		"\2\2\u2137\u2136\3\2\2\2\u2137\u2138\3\2\2\2\u2138\u2139\3\2\2\2\u2139"+
		"\u2227\7\u011e\2\2\u213a\u213b\7\u00c2\2\2\u213b\u213c\7\24\2\2\u213c"+
		"\u2227\t\u0088\2\2\u213d\u213e\7\u0146\2\2\u213e\u2227\7\u020c\2\2\u213f"+
		"\u2140\7\7\2\2\u2140\u2141\7\u0122\2\2\u2141\u2227\7\u0147\2\2\u2142\u2144"+
		"\7r\2\2\u2143\u2145\7\24\2\2\u2144\u2143\3\2\2\2\u2144\u2145\3\2\2\2\u2145"+
		"\u2146\3\2\2\2\u2146\u2227\7\u012b\2\2\u2147\u2148\t\u0086\2\2\u2148\u2149"+
		"\7\24\2\2\u2149\u2227\7\u012b\2\2\u214a\u2227\7\u013f\2\2\u214b\u214d"+
		"\7r\2\2\u214c\u214e\7\24\2\2\u214d\u214c\3\2\2\2\u214d\u214e\3\2\2\2\u214e"+
		"\u214f\3\2\2\2\u214f\u2150\7\u014c\2\2\u2150\u2227\7\u0290\2\2\u2151\u2152"+
		"\t\u0083\2\2\u2152\u2153\7\24\2\2\u2153\u2154\7\u014c\2\2\u2154\u2227"+
		"\7\u0290\2\2\u2155\u2157\7\u00e4\2\2\u2156\u2155\3\2\2\2\u2156\u2157\3"+
		"\2\2\2\u2157\u2158\3\2\2\2\u2158\u2159\7\u01d8\2\2\u2159\u2227\7\u01fd"+
		"\2\2\u215a\u215b\7\u0198\2\2\u215b\u215c\7[\2\2\u215c\u2227\7\u01e7\2"+
		"\2\u215d\u215f\7r\2\2\u215e\u2160\7\24\2\2\u215f\u215e\3\2\2\2\u215f\u2160"+
		"\3\2\2\2\u2160\u2161\3\2\2\2\u2161\u2162\7\u0157\2\2\u2162\u2227\7\u015c"+
		"\2\2\u2163\u2164\t\u0089\2\2\u2164\u2165\7\24\2\2\u2165\u2166\7\u0157"+
		"\2\2\u2166\u2227\7\u015c\2\2\u2167\u2169\7r\2\2\u2168\u216a\7\24\2\2\u2169"+
		"\u2168\3\2\2\2\u2169\u216a\3\2\2\2\u216a\u216b\3\2\2\2\u216b\u2227\7v"+
		"\2\2\u216c\u216d\t\u008a\2\2\u216d\u216e\7\24\2\2\u216e\u2227\7v\2\2\u216f"+
		"\u2171\7r\2\2\u2170\u2172\7\24\2\2\u2171\u2170\3\2\2\2\u2171\u2172\3\2"+
		"\2\2\u2172\u2173\3\2\2\2\u2173\u2174\7\u014f\2\2\u2174\u2227\7\u00d6\2"+
		"\2\u2175\u2176\t\u008b\2\2\u2176\u2177\7\24\2\2\u2177\u2178\7\u014f\2"+
		"\2\u2178\u2227\7\u00d6\2\2\u2179\u217b\7r\2\2\u217a\u217c\7\24\2\2\u217b"+
		"\u217a\3\2\2\2\u217b\u217c\3\2\2\2\u217c\u217d\3\2\2\2\u217d\u217e\7v"+
		"\2\2\u217e\u2227\7\u0099\2\2\u217f\u2180\t\u008c\2\2\u2180\u2181\7\24"+
		"\2\2\u2181\u2182\7v\2\2\u2182\u2227\7\u0099\2\2\u2183\u2185\7r\2\2\u2184"+
		"\u2186\7\24\2\2\u2185\u2184\3\2\2\2\u2185\u2186\3\2\2\2\u2186\u2187\3"+
		"\2\2\2\u2187\u2188\7v\2\2\u2188\u2189\7=\2\2\u2189\u2227\7\u01d3\2\2\u218a"+
		"\u218b\t\u008d\2\2\u218b\u218c\7\24\2\2\u218c\u218d\7v\2\2\u218d\u218e"+
		"\7=\2\2\u218e\u2227\7\u01d3\2\2\u218f\u2191\7r\2\2\u2190\u2192\7\24\2"+
		"\2\u2191\u2190\3\2\2\2\u2191\u2192\3\2\2\2\u2192\u2193\3\2\2\2\u2193\u2227"+
		"\7\u019a\2\2\u2194\u2195\t\u0086\2\2\u2195\u2196\7\24\2\2\u2196\u2227"+
		"\7\u019a\2\2\u2197\u2198\t\u0082\2\2\u2198\u2199\7\24\2\2\u2199\u2227"+
		"\7\u01a4\2\2\u219a\u219b\7r\2\2\u219b\u219c\7\u01c4\2\2\u219c\u2227\7"+
		"|\2\2\u219d\u219e\7\u021f\2\2\u219e\u2227\7h\2\2\u219f\u21a1\7r\2\2\u21a0"+
		"\u21a2\7\24\2\2\u21a1\u21a0\3\2\2\2\u21a1\u21a2\3\2\2\2\u21a2\u21a3\3"+
		"\2\2\2\u21a3\u2227\7\u01d2\2\2\u21a4\u21a5\t\u0086\2\2\u21a5\u21a6\7\24"+
		"\2\2\u21a6\u2227\7\u01d2\2\2\u21a7\u21a8\t\u0082\2\2\u21a8\u2227\7\u01d4"+
		"\2\2\u21a9\u21aa\7r\2\2\u21aa\u2227\7\u01ff\2\2\u21ab\u21ac\t\u008e\2"+
		"\2\u21ac\u21ad\7\24\2\2\u21ad\u2227\7\u01ff\2\2\u21ae\u21af\t\u0082\2"+
		"\2\u21af\u21b0\7\u0201\2\2\u21b0\u2227\7\u0215\2\2\u21b1\u21b3\7r\2\2"+
		"\u21b2\u21b4\7\24\2\2\u21b3\u21b2\3\2\2\2\u21b3\u21b4\3\2\2\2\u21b4\u21b5"+
		"\3\2\2\2\u21b5\u2227\7\u0218\2\2\u21b6\u21b7\t\u008f\2\2\u21b7\u21b8\7"+
		"\24\2\2\u21b8\u2227\7\u0218\2\2\u21b9\u21ba\t\u0090\2\2\u21ba\u2227\7"+
		"\u021d\2\2\u21bb\u21bc\7\20\2\2\u21bc\u21bd\7\u01f0\2\2\u21bd\u2227\7"+
		"p\2\2\u21be\u21c0\7r\2\2\u21bf\u21c1\7\24\2\2\u21c0\u21bf\3\2\2\2\u21c0"+
		"\u21c1\3\2\2\2\u21c1\u21c2\3\2\2\2\u21c2\u21c3\7\u0236\2\2\u21c3\u21c4"+
		"\7\u026a\2\2\u21c4\u2227\7\u01d4\2\2\u21c5\u21c6\t\u0091\2\2\u21c6\u21c7"+
		"\7\24\2\2\u21c7\u21c8\7\u0236\2\2\u21c8\u21c9\7\u026a\2\2\u21c9\u2227"+
		"\7\u01d4\2\2\u21ca\u21cb\7\u0269\2\2\u21cb\u21cc\7\24\2\2\u21cc\u2227"+
		"\7\u0236\2\2\u21cd\u21cf\7r\2\2\u21ce\u21d0\7\24\2\2\u21cf\u21ce\3\2\2"+
		"\2\u21cf\u21d0\3\2\2\2\u21d0\u21d1\3\2\2\2\u21d1\u2227\7\u0249\2\2\u21d2"+
		"\u21d3\7\u00a4\2\2\u21d3\u21d4\7\24\2\2\u21d4\u2227\7\u0249\2\2\u21d5"+
		"\u21d6\t\u0084\2\2\u21d6\u21d7\7\u01d6\2\2\u21d7\u2227\7\u0249\2\2\u21d8"+
		"\u21da\7r\2\2\u21d9\u21db\7\24\2\2\u21da\u21d9\3\2\2\2\u21da\u21db\3\2"+
		"\2\2\u21db\u21dc\3\2\2\2\u21dc\u2227\7\u0254\2\2\u21dd\u21de\t\u0092\2"+
		"\2\u21de\u21df\7\24\2\2\u21df\u2227\7\u0254\2\2\u21e0\u21e1\t\u0093\2"+
		"\2\u21e1\u2227\7\u0252\2\2\u21e2\u21e4\7r\2\2\u21e3\u21e5\7\24\2\2\u21e4"+
		"\u21e3\3\2\2\2\u21e4\u21e5\3\2\2\2\u21e5\u21e6\3\2\2\2\u21e6\u2227\7\u026c"+
		"\2\2\u21e7\u21e8\t\u0083\2\2\u21e8\u21e9\7\24\2\2\u21e9\u2227\7\u026c"+
		"\2\2\u21ea\u21eb\7\7\2\2\u21eb\u21ec\7|\2\2\u21ec\u2227\7\u026c\2\2\u21ed"+
		"\u21ef\7r\2\2\u21ee\u21f0\7\24\2\2\u21ef\u21ee\3\2\2\2\u21ef\u21f0\3\2"+
		"\2\2\u21f0\u21f1\3\2\2\2\u21f1\u2227\7\u0270\2\2\u21f2\u21f3\t\u0094\2"+
		"\2\u21f3\u21f4\7\24\2\2\u21f4\u2227\7\u0270\2\2\u21f5\u21f6\t\u0082\2"+
		"\2\u21f6\u2227\7\u0282\2\2\u21f7\u21f9\7r\2\2\u21f8\u21fa\7\24\2\2\u21f9"+
		"\u21f8\3\2\2\2\u21f9\u21fa\3\2\2\2\u21fa\u21fb\3\2\2\2\u21fb\u2227\7\u0290"+
		"\2\2\u21fc\u21fd\t\u0095\2\2\u21fd\u21fe\7\24\2\2\u21fe\u2227\7\u0290"+
		"\2\2\u21ff\u2200\t\u0096\2\2\u2200\u2227\7\24\2\2\u2201\u2202\7+\2\2\u2202"+
		"\u2227\7\u0282\2\2\u2203\u2204\7I\2\2\u2204\u2227\7\u0186\2\2\u2205\u2206"+
		"\7\u00c3\2\2\u2206\u2207\7\3\2\2\u2207\u2227\7\u01c5\2\2\u2208\u220a\7"+
		"\u00da\2\2\u2209\u220b\7\24\2\2\u220a\u2209\3\2\2\2\u220a\u220b\3\2\2"+
		"\2\u220b\u220c\3\2\2\2\u220c\u2227\7\u0268\2\2\u220d\u220e\7\u00e7\2\2"+
		"\u220e\u2210\7\24\2\2\u220f\u2211\7\u018f\2\2\u2210\u220f\3\2\2\2\u2210"+
		"\u2211\3\2\2\2\u2211\u2212\3\2\2\2\u2212\u2227\7\u01d0\2\2\u2213\u2214"+
		"\7\u0106\2\2\u2214\u2215\7\24\2\2\u2215\u2227\7\u01d1\2\2\u2216\u2217"+
		"\7\u0121\2\2\u2217\u2218\7\177\2\2\u2218\u2227\7\u0261\2\2\u2219\u221a"+
		"\7\u0121\2\2\u221a\u2227\7\u024e\2\2\u221b\u221c\7\u01d7\2\2\u221c\u2227"+
		"\7\u0082\2\2\u221d\u2227\7\u01f6\2\2\u221e\u221f\7\u0216\2\2\u221f\u2220"+
		"\7\24\2\2\u2220\u2227\t\u0097\2\2\u2221\u2227\7\u024a\2\2\u2222\u2227"+
		"\7\u024c\2\2\u2223\u2227\7\u024d\2\2\u2224\u2227\7\u024f\2\2\u2225\u2227"+
		"\7\u0250\2\2\u2226\u20e0\3\2\2\2\u2226\u20e2\3\2\2\2\u2226\u20e3\3\2\2"+
		"\2\u2226\u20ea\3\2\2\2\u2226\u20ee\3\2\2\2\u2226\u20f2\3\2\2\2\u2226\u20f7"+
		"\3\2\2\2\u2226\u20fa\3\2\2\2\u2226\u20fd\3\2\2\2\u2226\u2100\3\2\2\2\u2226"+
		"\u2102\3\2\2\2\u2226\u2108\3\2\2\2\u2226\u210c\3\2\2\2\u2226\u210f\3\2"+
		"\2\2\u2226\u2112\3\2\2\2\u2226\u2115\3\2\2\2\u2226\u211a\3\2\2\2\u2226"+
		"\u211d\3\2\2\2\u2226\u2120\3\2\2\2\u2226\u2123\3\2\2\2\u2226\u212a\3\2"+
		"\2\2\u2226\u212d\3\2\2\2\u2226\u2132\3\2\2\2\u2226\u2135\3\2\2\2\u2226"+
		"\u213a\3\2\2\2\u2226\u213d\3\2\2\2\u2226\u213f\3\2\2\2\u2226\u2142\3\2"+
		"\2\2\u2226\u2147\3\2\2\2\u2226\u214a\3\2\2\2\u2226\u214b\3\2\2\2\u2226"+
		"\u2151\3\2\2\2\u2226\u2156\3\2\2\2\u2226\u215a\3\2\2\2\u2226\u215d\3\2"+
		"\2\2\u2226\u2163\3\2\2\2\u2226\u2167\3\2\2\2\u2226\u216c\3\2\2\2\u2226"+
		"\u216f\3\2\2\2\u2226\u2175\3\2\2\2\u2226\u2179\3\2\2\2\u2226\u217f\3\2"+
		"\2\2\u2226\u2183\3\2\2\2\u2226\u218a\3\2\2\2\u2226\u218f\3\2\2\2\u2226"+
		"\u2194\3\2\2\2\u2226\u2197\3\2\2\2\u2226\u219a\3\2\2\2\u2226\u219d\3\2"+
		"\2\2\u2226\u219f\3\2\2\2\u2226\u21a4\3\2\2\2\u2226\u21a7\3\2\2\2\u2226"+
		"\u21a9\3\2\2\2\u2226\u21ab\3\2\2\2\u2226\u21ae\3\2\2\2\u2226\u21b1\3\2"+
		"\2\2\u2226\u21b6\3\2\2\2\u2226\u21b9\3\2\2\2\u2226\u21bb\3\2\2\2\u2226"+
		"\u21be\3\2\2\2\u2226\u21c5\3\2\2\2\u2226\u21ca\3\2\2\2\u2226\u21cd\3\2"+
		"\2\2\u2226\u21d2\3\2\2\2\u2226\u21d5\3\2\2\2\u2226\u21d8\3\2\2\2\u2226"+
		"\u21dd\3\2\2\2\u2226\u21e0\3\2\2\2\u2226\u21e2\3\2\2\2\u2226\u21e7\3\2"+
		"\2\2\u2226\u21ea\3\2\2\2\u2226\u21ed\3\2\2\2\u2226\u21f2\3\2\2\2\u2226"+
		"\u21f5\3\2\2\2\u2226\u21f7\3\2\2\2\u2226\u21fc\3\2\2\2\u2226\u21ff\3\2"+
		"\2\2\u2226\u2201\3\2\2\2\u2226\u2203\3\2\2\2\u2226\u2205\3\2\2\2\u2226"+
		"\u2208\3\2\2\2\u2226\u220d\3\2\2\2\u2226\u2213\3\2\2\2\u2226\u2216\3\2"+
		"\2\2\u2226\u2219\3\2\2\2\u2226\u221b\3\2\2\2\u2226\u221d\3\2\2\2\u2226"+
		"\u221e\3\2\2\2\u2226\u2221\3\2\2\2\u2226\u2222\3\2\2\2\u2226\u2223\3\2"+
		"\2\2\u2226\u2224\3\2\2\2\u2226\u2225\3\2\2\2\u2227\u045b\3\2\2\2\u2228"+
		"\u222b\5\u0460\u0231\2\u2229\u222b\5\u028e\u0148\2\u222a\u2228\3\2\2\2"+
		"\u222a\u2229\3\2\2\2\u222b\u045d\3\2\2\2\u222c\u222d\7\177\2\2\u222d\u2230"+
		"\5\u049e\u0250\2\u222e\u2230\5\u028e\u0148\2\u222f\u222c\3\2\2\2\u222f"+
		"\u222e\3\2\2\2\u2230\u045f\3\2\2\2\u2231\u2234\7\u025e\2\2\u2232\u2235"+
		"\5\u049e\u0250\2\u2233\u2235\5\u0450\u0229\2\u2234\u2232\3\2\2\2\u2234"+
		"\u2233\3\2\2\2\u2235\u223a\3\2\2\2\u2236\u2237\7\34\2\2\u2237\u2238\7"+
		"\u0261\2\2\u2238\u2239\7\u02b5\2\2\u2239\u223b\5\u049e\u0250\2\u223a\u2236"+
		"\3\2\2\2\u223a\u223b\3\2\2\2\u223b\u2270\3\2\2\2\u223c\u2240\7\u0114\2"+
		"\2\u223d\u2241\5\u049e\u0250\2\u223e\u2241\5\u0450\u0229\2\u223f\u2241"+
		"\5\u0454\u022b\2\u2240\u223d\3\2\2\2\u2240\u223e\3\2\2\2\u2240\u223f\3"+
		"\2\2\2\u2241\u2242\3\2\2\2\u2242\u2250\t\u0098\2\2\u2243\u2246\7\u02e8"+
		"\2\2\u2244\u2247\7\u02e2\2\2\u2245\u2247\5\u0450\u0229\2\u2246\u2244\3"+
		"\2\2\2\u2246\u2245\3\2\2\2\u2247\u224d\3\2\2\2\u2248\u224b\7\u02ee\2\2"+
		"\u2249\u224c\7\u02e2\2\2\u224a\u224c\5\u0450\u0229\2\u224b\u2249\3\2\2"+
		"\2\u224b\u224a\3\2\2\2\u224c\u224e\3\2\2\2\u224d\u2248\3\2\2\2\u224d\u224e"+
		"\3\2\2\2\u224e\u224f\3\2\2\2\u224f\u2251\7\u02e9\2\2\u2250\u2243\3\2\2"+
		"\2\u2250\u2251\3\2\2\2\u2251\u2261\3\2\2\2\u2252\u225f\7\u0266\2\2\u2253"+
		"\u2260\7\u0080\2\2\u2254\u2260\7\u00f2\2\2\u2255\u2260\7\u0159\2\2\u2256"+
		"\u225d\7\u0212\2\2\u2257\u225a\7\u02e8\2\2\u2258\u225b\7\u02e2\2\2\u2259"+
		"\u225b\5\u0450\u0229\2\u225a\u2258\3\2\2\2\u225a\u2259\3\2\2\2\u225b\u225c"+
		"\3\2\2\2\u225c\u225e\7\u02e9\2\2\u225d\u2257\3\2\2\2\u225d\u225e\3\2\2"+
		"\2\u225e\u2260\3\2\2\2\u225f\u2253\3\2\2\2\u225f\u2254\3\2\2\2\u225f\u2255"+
		"\3\2\2\2\u225f\u2256\3\2\2\2\u2260\u2262\3\2\2\2\u2261\u2252\3\2\2\2\u2261"+
		"\u2262\3\2\2\2\u2262\u2270\3\2\2\2\u2263\u2270\5\u049a\u024e\2\u2264\u2265"+
		"\7\177\2\2\u2265\u2270\5\u049e\u0250\2\u2266\u2270\5\u049e\u0250\2\u2267"+
		"\u2270\7\u018a\2\2\u2268\u2270\7\u026d\2\2\u2269\u2270\7\u00cd\2\2\u226a"+
		"\u2270\7\u0084\2\2\u226b\u2270\7\u021e\2\2\u226c\u2270\7\u015a\2\2\u226d"+
		"\u2270\7\u014e\2\2\u226e\u2270\7\u008e\2\2\u226f\u2231\3\2\2\2\u226f\u223c"+
		"\3\2\2\2\u226f\u2263\3\2\2\2\u226f\u2264\3\2\2\2\u226f\u2266\3\2\2\2\u226f"+
		"\u2267\3\2\2\2\u226f\u2268\3\2\2\2\u226f\u2269\3\2\2\2\u226f\u226a\3\2"+
		"\2\2\u226f\u226b\3\2\2\2\u226f\u226c\3\2\2\2\u226f\u226d\3\2\2\2\u226f"+
		"\u226e\3\2\2\2\u2270\u0461\3\2\2\2\u2271\u2272\7\u0300\2\2\u2272\u2274"+
		"\5\u048e\u0248\2\u2273\u2271\3\2\2\2\u2273\u2274\3\2\2\2\u2274\u2275\3"+
		"\2\2\2\u2275\u2276\5\u0486\u0244\2\u2276\u0463\3\2\2\2\u2277\u2278\5\u0462"+
		"\u0232\2\u2278\u0465\3\2\2\2\u2279\u227a\5\u0462\u0232\2\u227a\u0467\3"+
		"\2\2\2\u227b\u227c\5\u0462\u0232\2\u227c\u0469\3\2\2\2\u227d\u227e\5\u0462"+
		"\u0232\2\u227e\u046b\3\2\2\2\u227f\u2280\5\u0462\u0232\2\u2280\u046d\3"+
		"\2\2\2\u2281\u2282\5\u0462\u0232\2\u2282\u046f\3\2\2\2\u2283\u2284\5\u0462"+
		"\u0232\2\u2284\u0471\3\2\2\2\u2285\u2286\5\u0462\u0232\2\u2286\u0473\3"+
		"\2\2\2\u2287\u2288\5\u0462\u0232\2\u2288\u0475\3\2\2\2\u2289\u228a\5\u0462"+
		"\u0232\2\u228a\u0477\3\2\2\2\u228b\u228c\5\u0462\u0232\2\u228c\u0479\3"+
		"\2\2\2\u228d\u228e\5\u0462\u0232\2\u228e\u047b\3\2\2\2\u228f\u2290\5\u0462"+
		"\u0232\2\u2290\u047d\3\2\2\2\u2291\u2296\5\u0462\u0232\2\u2292\u2293\7"+
		"\u02e1\2\2\u2293\u2295\5\u0486\u0244\2\u2294\u2292\3\2\2\2\u2295\u2298"+
		"\3\2\2\2\u2296\u2294\3\2\2\2\u2296\u2297\3\2\2\2\u2297\u047f\3\2\2\2\u2298"+
		"\u2296\3\2\2\2\u2299\u229a\5\u047e\u0240\2\u229a\u0481\3\2\2\2\u229b\u229c"+
		"\5\u047e\u0240\2\u229c\u0483\3\2\2\2\u229d\u229e\5\u047e\u0240\2\u229e"+
		"\u0485\3\2\2\2\u229f\u22a2\5\u0492\u024a\2\u22a0\u22a2\7\u02e5\2\2\u22a1"+
		"\u229f\3\2\2\2\u22a1\u22a0\3\2\2\2\u22a2\u0487\3\2\2\2\u22a3\u22a8\5\u0486"+
		"\u0244\2\u22a4\u22a5\7\u02e1\2\2\u22a5\u22a7\5\u0486\u0244\2\u22a6\u22a4"+
		"\3\2\2\2\u22a7\u22aa\3\2\2\2\u22a8\u22a6\3\2\2\2\u22a8\u22a9\3\2\2\2\u22a9"+
		"\u0489\3\2\2\2\u22aa\u22a8\3\2\2\2\u22ab\u22ac\5\u0488\u0245\2\u22ac\u048b"+
		"\3\2\2\2\u22ad\u22ae\5\u0488\u0245\2\u22ae\u048d\3\2\2\2\u22af\u22b0\5"+
		"\u0488\u0245\2\u22b0\u048f\3\2\2\2\u22b1\u22b2\7\u02e8\2\2\u22b2\u22b3"+
		"\7\u02ec\2\2\u22b3\u22b4\7\u02e9\2\2\u22b4\u0491\3\2\2\2\u22b5\u22b6\t"+
		"\u0099\2\2\u22b6\u0493\3\2\2\2\u22b7\u22b8\t\u009a\2\2\u22b8\u0495\3\2"+
		"\2\2\u22b9\u22ba\t\u009b\2\2\u22ba\u0497\3\2\2\2\u22bb\u22be\5\u049a\u024e"+
		"\2\u22bc\u22be\5\u049c\u024f\2\u22bd\u22bb\3\2\2\2\u22bd\u22bc\3\2\2\2"+
		"\u22be\u0499\3\2\2\2\u22bf\u22c1\7\u02ec\2\2\u22c0\u22bf\3\2\2\2\u22c0"+
		"\u22c1\3\2\2\2\u22c1\u22c2\3\2\2\2\u22c2\u22c5\7\u02e2\2\2\u22c3\u22c5"+
		"\7\u02e3\2\2\u22c4\u22c0\3\2\2\2\u22c4\u22c3\3\2\2\2\u22c5\u049b\3\2\2"+
		"\2\u22c6\u22c7\7\u02ed\2\2\u22c7\u22c8\7\u02e2\2\2\u22c8\u049d\3\2\2\2"+
		"\u22c9\u22ca\t\u009c\2\2\u22ca\u049f\3\2\2\2\u04eb\u04a2\u04a5\u04a9\u04d2"+
		"\u04de\u04e3\u04e8\u04ef\u04f5\u04fa\u04fe\u0506\u0508\u050c\u0510\u0513"+
		"\u0517\u051c\u0522\u052b\u052e\u0534\u053d\u054a\u054f\u0559\u055c\u0561"+
		"\u0566\u056d\u0573\u0577\u057d\u0582\u0589\u0590\u0597\u059c\u05a0\u05ac"+
		"\u05b6\u05bb\u05c7\u05cc\u05d1\u05d4\u05e1\u05ed\u05f2\u05f7\u0603\u0608"+
		"\u0610\u0612\u0616\u061a\u061d\u0621\u0626\u0632\u0637\u063b\u063e\u0643"+
		"\u064a\u0654\u0659\u065c\u0660\u0663\u0668\u067a\u067f\u0684\u0686\u068d"+
		"\u0694\u0697\u069a\u069d\u06a8\u06b4\u06b8\u06bb\u06c4\u06cc\u06d4\u06d7"+
		"\u06de\u06e1\u06e4\u06e9\u06ee\u0717\u0733\u073a\u073f\u0746\u0751\u0759"+
		"\u075d\u0769\u076c\u0772\u0775\u077a\u077f\u0783\u078d\u0797\u079d\u07a8"+
		"\u07ad\u07b1\u07b9\u07c1\u07c6\u07c9\u07cb\u07ce\u07d7\u07dc\u07e3\u07e6"+
		"\u07e9\u07ed\u07f0\u07f8\u07fd\u0802\u0809\u0813\u0823\u0829\u0833\u083d"+
		"\u0844\u0847\u084c\u0856\u085b\u0862\u0865\u086a\u086d\u0870\u0881\u0886"+
		"\u088f\u0892\u0897\u089a\u08a1\u08a4\u08ab\u08b0\u08b4\u08b9\u08be\u08c8"+
		"\u08ce\u08d8\u08dd\u08e4\u08ea\u08ee\u08f1\u08f4\u0905\u090a\u0912\u0920"+
		"\u0927\u0937\u0941\u094a\u0950\u0955\u095b\u0960\u0964\u096d\u0971\u0989"+
		"\u098b\u099d\u099f\u09a4\u09a9\u09ae\u09b3\u09bd\u09c6\u09cf\u09d4\u09d9"+
		"\u09de\u09e2\u09e5\u09eb\u09f9\u09fe\u0a00\u0a03\u0a0b\u0a18\u0a1a\u0a1e"+
		"\u0a26\u0a28\u0a2a\u0a2c\u0a30\u0a35\u0a3f\u0a4a\u0a4c\u0a56\u0a5b\u0a5f"+
		"\u0a63\u0a67\u0a69\u0a6c\u0a70\u0a74\u0a7b\u0a80\u0a82\u0a87\u0a8b\u0a91"+
		"\u0a93\u0a97\u0a9b\u0a9f\u0aa3\u0aa5\u0aaa\u0aaf\u0ab4\u0ab7\u0ac2\u0ac5"+
		"\u0ac8\u0acd\u0ad0\u0ad5\u0ada\u0ade\u0ae2\u0ae6\u0aeb\u0aef\u0af3\u0aff"+
		"\u0b04\u0b07\u0b0b\u0b0f\u0b14\u0b18\u0b1e\u0b28\u0b2b\u0b33\u0b36\u0b3a"+
		"\u0b40\u0b44\u0b47\u0b4a\u0b54\u0b56\u0b60\u0b62\u0b66\u0b6b\u0b6d\u0b6f"+
		"\u0b75\u0b77\u0b86\u0b88\u0b8c\u0b90\u0b96\u0ba4\u0ba9\u0bae\u0bb2\u0bb4"+
		"\u0bb9\u0bc0\u0bc8\u0bd1\u0bdd\u0be2\u0be6\u0bf1\u0bf6\u0bfd\u0c03\u0c05"+
		"\u0c07\u0c0a\u0c0f\u0c13\u0c15\u0c17\u0c1a\u0c1e\u0c27\u0c29\u0c2b\u0c2e"+
		"\u0c34\u0c36\u0c38\u0c3b\u0c3f\u0c4c\u0c54\u0c57\u0c5a\u0c5f\u0c62\u0c65"+
		"\u0c69\u0c6e\u0c71\u0c77\u0c79\u0c7b\u0c7e\u0c81\u0c87\u0c89\u0c8b\u0c8e"+
		"\u0c91\u0c95\u0ca3\u0cab\u0cb6\u0cbb\u0cbd\u0cc3\u0cc7\u0ccb\u0cd0\u0cd6"+
		"\u0cd9\u0cdc\u0cdf\u0ce2\u0ce4\u0ceb\u0ced\u0cf1\u0cfd\u0cff\u0d03\u0d07"+
		"\u0d0e\u0d16\u0d18\u0d1b\u0d20\u0d24\u0d28\u0d2c\u0d2f\u0d35\u0d3e\u0d45"+
		"\u0d4b\u0d51\u0d54\u0d57\u0d5c\u0d5f\u0d62\u0d66\u0d6b\u0d79\u0d7d\u0d80"+
		"\u0d87\u0d8b\u0d91\u0d9c\u0da8\u0dad\u0db3\u0dc4\u0dc6\u0dd5\u0dd7\u0de4"+
		"\u0de7\u0dea\u0df3\u0df6\u0df9\u0e00\u0e06\u0e0b\u0e0f\u0e12\u0e15\u0e1b"+
		"\u0e20\u0e23\u0e27\u0e2b\u0e2e\u0e35\u0e38\u0e3a\u0e3f\u0e45\u0e4b\u0e55"+
		"\u0e59\u0e5e\u0e61\u0e64\u0e6d\u0e70\u0e73\u0e76\u0e79\u0e7c\u0e7f\u0e86"+
		"\u0e89\u0e8c\u0e91\u0e95\u0e98\u0e9c\u0ea0\u0ea5\u0eaa\u0eb2\u0eb6\u0ec0"+
		"\u0ecc\u0ed0\u0edb\u0ee7\u0eeb\u0ef3\u0ef6\u0efa\u0eff\u0f08\u0f1a\u0f1f"+
		"\u0f24\u0f30\u0f36\u0f3e\u0f42\u0f46\u0f4a\u0f53\u0f58\u0f5c\u0f5f\u0f61"+
		"\u0f67\u0f6b\u0f72\u0f79\u0f7d\u0f81\u0f8a\u0f91\u0fa5\u0fad\u0fba\u0fbe"+
		"\u0fc7\u0fce\u0fdb\u0fe3\u0feb\u0ff1\u0ffd\u1005\u100d\u1013\u1017\u101b"+
		"\u101e\u1022\u1026\u1029\u102d\u1030\u1033\u103f\u1044\u1047\u104a\u104d"+
		"\u1051\u1054\u1057\u105b\u105d\u1062\u1064\u1070\u1074\u107f\u1083\u1087"+
		"\u10a3\u10b2\u10ba\u10c2\u10c8\u10d4\u10d8\u10e4\u10e6\u10ed\u10f2\u10fa"+
		"\u1100\u1107\u110a\u110e\u111a\u111c\u1120\u1128\u112c\u1131\u1134\u1139"+
		"\u113b\u1140\u1144\u1149\u114d\u1154\u115d\u1168\u1170\u117c\u117e\u1184"+
		"\u1187\u1189\u118c\u11a2\u11a8\u11ab\u11b3\u11b9\u11bc\u11bf\u11c3\u11c6"+
		"\u11cb\u11d0\u11d3\u11d6\u11d9\u11dd\u11e2\u11e4\u11e8\u11f0\u11f2\u11fe"+
		"\u1207\u120c\u120f\u1217\u121e\u1222\u1226\u1237\u1249\u124b\u124f\u125b"+
		"\u125f\u126c\u1272\u127d\u1287\u128b\u128d\u12a4\u12ab\u12ad\u12b3\u12b6"+
		"\u12b9\u12be\u12c7\u12c9\u12d1\u12d3\u12d7\u12dc\u12df\u12e3\u12e6\u12e9"+
		"\u12ed\u12f3\u12f6\u12f9\u12fe\u1308\u130e\u1318\u131d\u1327\u1329\u1331"+
		"\u133b\u1345\u134b\u1351\u1356\u135c\u135f\u1363\u1368\u136b\u136e\u1371"+
		"\u137a\u137e\u1380\u1393\u139a\u139c\u13a0\u13b3\u13bc\u13c1\u13c6\u13cc"+
		"\u13d3\u13d8\u13da\u13ea\u13ef\u13f5\u13fc\u140f\u1419\u141b\u1422\u142d"+
		"\u1435\u1437\u1446\u144f\u1454\u1458\u145b\u1469\u1471\u1475\u1478\u1480"+
		"\u148c\u1490\u1495\u1498\u14a5\u14a9\u14b1\u14b6\u14ba\u14be\u14c2\u14c8"+
		"\u14cb\u14ce\u14e9\u14ef\u14f3\u14fa\u14ff\u1505\u1509\u150c\u1512\u151b"+
		"\u1523\u1527\u152b\u1533\u153c\u1542\u1544\u1560\u1565\u1569\u1570\u1574"+
		"\u1578\u157c\u1588\u158c\u159a\u15a0\u15a7\u15ac\u15b7\u15ba\u15c0\u15c2"+
		"\u15cb\u15d5\u15da\u15e9\u15ed\u15f0\u15f4\u15f7\u1605\u1607\u160b\u1613"+
		"\u161a\u161f\u1621\u1626\u162b\u1633\u163a\u163e\u1641\u164c\u1652\u165b"+
		"\u165e\u1664\u1669\u166f\u1674\u1676\u167d\u1680\u1687\u1692\u1698\u169c"+
		"\u16a2\u16a7\u16a9\u16af\u16ba\u16bc\u16be\u16c1\u16c5\u16c8\u16cc\u16d0"+
		"\u16d5\u16e0\u16e4\u16ec\u16ef\u16f4\u16f6\u16fb\u1700\u1704\u170a\u170e"+
		"\u1711\u1719\u171c\u1720\u1724\u1729\u172c\u1730\u1734\u1738\u174c\u1750"+
		"\u1754\u175a\u175e\u1763\u1765\u1768\u176c\u176f\u1772\u1775\u1779\u1785"+
		"\u1788\u178b\u1790\u1796\u179b\u17a1\u17a5\u17aa\u17b1\u17b7\u17be\u17c1"+
		"\u17c4\u17c8\u17cd\u17d1\u17d3\u17de\u17e5\u17e9\u17f3\u17f7\u17fb\u1800"+
		"\u180b\u1810\u1816\u181b\u181e\u1823\u1825\u182b\u1830\u1833\u1838\u183d"+
		"\u1846\u184b\u1851\u1857\u185c\u1860\u1862\u1867\u186b\u1871\u1875\u187e"+
		"\u1883\u1886\u188c\u1891\u1893\u1895\u189a\u189f\u18a4\u18ac\u18b1\u18b8"+
		"\u18bc\u18c5\u18c9\u18ce\u18d9\u18db\u18eb\u18f0\u18f6\u18fc\u190a\u190f"+
		"\u1915\u1918\u191b\u191f\u1924\u192d\u192f\u1933\u1936\u193b\u193d\u1941"+
		"\u194d\u1956\u195a\u195f\u1963\u1967\u196c\u196f\u1979\u197f\u1982\u1985"+
		"\u1989\u198e\u1997\u19a1\u19a5\u19a9\u19ac\u19af\u19b4\u19b9\u19bc\u19bf"+
		"\u19c5\u19c8\u19ce\u19d1\u19d4\u19d9\u19dc\u19e4\u19ea\u19ef\u19f4\u19fc"+
		"\u1a06\u1a0a\u1a0c\u1a0f\u1a1b\u1a1f\u1a22\u1a31\u1a36\u1a3a\u1a41\u1a44"+
		"\u1a4d\u1a54\u1a59\u1a5d\u1a65\u1a6b\u1a73\u1a76\u1a7f\u1a82\u1a85\u1a8e"+
		"\u1a94\u1a9a\u1a9c\u1aa9\u1aab\u1ab4\u1ab6\u1aba\u1ac0\u1ac4\u1ad2\u1ad8"+
		"\u1ae3\u1aee\u1af2\u1af9\u1afe\u1b02\u1b07\u1b0f\u1b11\u1b17\u1b1a\u1b25"+
		"\u1b2a\u1b34\u1b36\u1b38\u1b42\u1b46\u1b48\u1b54\u1b5c\u1b69\u1b6c\u1b78"+
		"\u1b7a\u1b82\u1b8a\u1b91\u1b95\u1b9c\u1ba0\u1ba5\u1ba9\u1bb1\u1bb5\u1bbc"+
		"\u1bc1\u1bca\u1bd3\u1bd6\u1bea\u1bee\u1bf1\u1bf8\u1bfb\u1bff\u1c02\u1c09"+
		"\u1c0c\u1c12\u1c15\u1c19\u1c1c\u1c23\u1c28\u1c36\u1c3d\u1c48\u1c51\u1c5a"+
		"\u1c5e\u1c62\u1c7c\u1c7f\u1c82\u1c8c\u1c90\u1c95\u1c9a\u1c9f\u1ca8\u1cab"+
		"\u1cad\u1cb1\u1cb8\u1cbf\u1cc7\u1cd6\u1cdb\u1ce0\u1ce6\u1ce9\u1ced\u1cf7"+
		"\u1d03\u1d05\u1d0c\u1d10\u1d17\u1d1c\u1d25\u1d33\u1d3b\u1d3e\u1d47\u1d4d"+
		"\u1d57\u1d5f\u1d62\u1d65\u1d6e\u1d73\u1d78\u1d7d\u1d82\u1d87\u1d8a\u1d8f"+
		"\u1d94\u1d98\u1d9e\u1da4\u1dad\u1db2\u1dba\u1dbe\u1dc3\u1dc9\u1dd0\u1dd5"+
		"\u1ddc\u1de0\u1de5\u1ded\u1df0\u1df3\u1df6\u1dfa\u1dff\u1e04\u1e08\u1e0f"+
		"\u1e14\u1e16\u1e21\u1e25\u1e27\u1e32\u1e3d\u1e42\u1e47\u1e49\u1e4d\u1e50"+
		"\u1e54\u1e61\u1e66\u1e6a\u1e6f\u1e75\u1e79\u1e7e\u1e82\u1e87\u1e8c\u1e8f"+
		"\u1e92\u1e97\u1ea0\u1ea8\u1eac\u1eb6\u1eb9\u1ebb\u1ec5\u1ec7\u1ecd\u1ed3"+
		"\u1ed5\u1ee3\u1ee5\u1ef0\u1efc\u1f03\u1f09\u1f10\u1f19\u1f1d\u1f21\u1f26"+
		"\u1f2a\u1f2d\u1f31\u1f38\u1f3c\u1f40\u1f45\u1f49\u1f4e\u1f54\u1f58\u1f5d"+
		"\u1f61\u1f66\u1f69\u1f6d\u1f71\u1f79\u1f9a\u1faf\u1fb4\u1fc4\u1fc7\u1fcc"+
		"\u1fd9\u1fdd\u1fe1\u1fe5\u1fea\u1ff1\u1ff6\u1ff8\u1ffa\u2003\u2007\u200b"+
		"\u200d\u2011\u2018\u201c\u201e\u2022\u2026\u202d\u2035\u203d\u203f\u2045"+
		"\u2048\u2060\u2067\u2088\u208d\u2090\u2095\u2097\u209d\u20a5\u20aa\u20af"+
		"\u20b2\u20b5\u20b9\u20bf\u20de\u20e5\u20f4\u2104\u2117\u2128\u212f\u2137"+
		"\u2144\u214d\u2156\u215f\u2169\u2171\u217b\u2185\u2191\u21a1\u21b3\u21c0"+
		"\u21cf\u21da\u21e4\u21ef\u21f9\u220a\u2210\u2226\u222a\u222f\u2234\u223a"+
		"\u2240\u2246\u224b\u224d\u2250\u225a\u225d\u225f\u2261\u226f\u2273\u2296"+
		"\u22a1\u22a8\u22bd\u22c0\u22c4";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}