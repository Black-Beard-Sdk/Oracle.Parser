//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PlSqlParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Oracle.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class PlSqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCESS=1, ACCOUNT=2, ADD=3, ADMIN=4, ADMINISTER=5, ADVANCED=6, ADVISOR=7, 
		AFTER=8, AGENT=9, AGGREGATE=10, A_LETTER=11, ALL=12, ALTER=13, ANALYZE=14, 
		AND=15, ANY=16, ARCHIVE=17, ARRAY=18, AS=19, ASC=20, ASSOCIATE=21, AT=22, 
		ATTRIBUTE=23, AUDIT=24, AUTHENTICATED=25, AUTHENTICATION=26, AUTHID=27, 
		AUTOALLOCATE=28, AUTO=29, AUTOEXTEND=30, AUTOMATIC=31, AUTONOMOUS_TRANSACTION=32, 
		BACKUP=33, BASIC=34, BASICFILE=35, BATCH=36, BECOME=37, BEFORE=38, BEGIN=39, 
		BETWEEN=40, BFILE=41, BIGFILE=42, BINARY_DOUBLE=43, BINARY_FLOAT=44, BINARY_INTEGER=45, 
		BLOB=46, BLOCK=47, BLOCKSIZE=48, BODY=49, BOOLEAN=50, BOTH=51, BREADTH=52, 
		BUFFER_POOL=53, BUILD=54, BULK=55, BY=56, BYTE=57, CACHE=58, CALL=59, 
		CANONICAL=60, CAPACITY=61, CASCADE=62, CASE=63, CAST=64, CERTIFICATE=65, 
		CHANGE=66, CHARACTER=67, CHAR=68, CHAR_CS=69, CHECK=70, CHR=71, CLASS=72, 
		C_LETTER=73, CLOB=74, CLOSE=75, CLUSTER=76, COALESCE=77, COLLECT=78, COLUMN=79, 
		COLUMNS=80, COMMENT=81, COMMIT=82, COMMITTED=83, COMPATIBILITY=84, COMPILE=85, 
		COMPOUND=86, COMPRESS=87, COMPUTE=88, CONNECT_BY_ROOT=89, CONNECT=90, 
		CONSTANT=91, CONSTRAINT=92, CONSTRAINTS=93, CONSTRUCTOR=94, CONTAINER=95, 
		CONTAINER_DATA=96, CONTENT=97, CONTEXT=98, CONTINUE=99, CONVERT=100, CORRUPT_XID_ALL=101, 
		CORRUPT_XID=102, COST=103, COUNT=104, CREATE=105, CREATION=106, CRITICAL=107, 
		CROSS=108, CUBE=109, CURRENT=110, CURRENT_USER=111, CURSOR=112, CUSTOMDATUM=113, 
		CYCLE=114, DATABASE=115, DATA=116, DATAFILE=117, DATE=118, DAY=119, DBA_RECYCLEBIN=120, 
		DB_ROLE_CHANGE=121, DBTIMEZONE=122, DDL=123, DEBUG=124, DEC=125, DECIMAL=126, 
		DECLARE=127, DECOMPOSE=128, DECREMENT=129, DEFAULT=130, DEFAULTS=131, 
		DEFERRABLE=132, DEFERRED=133, DEFINER=134, DELEGATE=135, DELETE=136, DEPTH=137, 
		DESC=138, DETERMINISTIC=139, DICTIONARY=140, DIMENSION=141, DIRECTORY=142, 
		DISABLE=143, DISASSOCIATE=144, DISTINCT=145, DISTINGUISHED=146, DISTRIBUTE=147, 
		DML=148, DOCUMENT=149, DOUBLE=150, DROP=151, DSINTERVAL_UNCONSTRAINED=152, 
		DUPLICATE=153, EACH=154, EDITIONABLE=155, EDITION=156, EDITIONING=157, 
		EDITIONS=158, ELEMENT=159, ELSE=160, ELSIF=161, EMPTY=162, ENABLE=163, 
		ENCODING=164, ENCRYPT=165, ENCRYPTION=166, END=167, ENTERPRISE=168, ENTITYESCAPING=169, 
		ERR=170, ERRORS=171, ESCAPE=172, EVALNAME=173, EXCEPT=174, EXCEPTION=175, 
		EXCEPTION_INIT=176, EXCEPTIONS=177, EXCLUDE=178, EXCLUSIVE=179, EXECUTE=180, 
		EXEMPT=181, EXISTS=182, EXIT=183, EXPIRE=184, EXPLAIN=185, EXTENT=186, 
		EXTERNAL=187, EXTERNALLY=188, EXTRACT=189, FAILURE=190, FALSE=191, FETCH=192, 
		FILESYSTEM_LIKE_LOGGING=193, FINAL=194, FIRST=195, FIRST_VALUE=196, FLASHBACK=197, 
		FLASH_CACHE=198, FLOAT=199, FOLDER=200, FOLLOWING=201, FOLLOWS=202, FORALL=203, 
		FORCE=204, FOREIGN=205, FOR=206, FREELIST=207, FREELISTS=208, FROM=209, 
		FULL=210, FUNCTION=211, GLOBAL=212, GLOBALLY=213, GOTO=214, GRANT=215, 
		GROUP=216, GROUPING=217, GROUPS=218, GUARANTEE=219, HASH=220, HAVING=221, 
		HIDE=222, HIERARCHY=223, HIGH=224, HOUR=225, IDENTIFIED=226, IDENTIFIER=227, 
		ID=228, IF=229, IGNORE=230, IMMEDIATE=231, INCLUDE=232, INCLUDING=233, 
		INCREMENT=234, INDENT=235, INDEXED=236, INDEX=237, INDEXING=238, INDEXTYPE=239, 
		INDICATOR=240, INDICES=241, INFINITE=242, INHERIT=243, IN=244, INITIAL=245, 
		INITIALLY=246, INITRANS=247, INLINE=248, INMEMORY=249, INNER=250, INOUT=251, 
		INSERT=252, INSTANTIABLE=253, INSTEAD=254, INTEGER=255, INTERSECT=256, 
		INTERVAL=257, INT=258, INTO=259, INVALIDATE=260, INVISIBLE=261, IS=262, 
		ISOLATION=263, ITERATE=264, JAVA=265, JOB=266, JOIN=267, KEEP=268, KEY=269, 
		LANGUAGE=270, LAST=271, LAST_VALUE=272, LEADING=273, LEFT=274, LESS=275, 
		LEVEL=276, LIBRARY=277, LIKE2=278, LIKE4=279, LIKEC=280, LIKE=281, LIMIT=282, 
		LINK=283, LIST=284, LOB=285, LOCAL=286, LOCKED=287, LOCKING=288, LOCK=289, 
		LOGGING=290, LOG=291, LOGMINING=292, LOGOFF=293, LOGON=294, LONG=295, 
		LOOP=296, LOW=297, MAIN=298, MANAGE=299, MANAGEMENT=300, MANUAL=301, MAP=302, 
		MATCHED=303, MATERIALIZED=304, MAXSIZE=305, MAXVALUE=306, MEASURE=307, 
		MEASURES=308, MEDIUM=309, MEMBER=310, MEMCOMPRESS=311, MERGE=312, MINEXTENTS=313, 
		MINIMUM=314, MINING=315, MINUS=316, MINUTE=317, MINVALUE=318, MLSLABEL=319, 
		MODEL=320, MODE=321, MODIFY=322, MONTH=323, MOVEMENT=324, MULTISET=325, 
		NAME=326, NAN=327, NATURAL=328, NATURALN=329, NAV=330, NCHAR_CS=331, NCHAR=332, 
		NCLOB=333, NESTED=334, NEW=335, NEXT=336, NOAUDIT=337, NOCACHE=338, NOCOMPRESS=339, 
		NOCOPY=340, NOCYCLE=341, NOEDITIONABLE=342, NOENTITYESCAPING=343, NOGUARANTEE=344, 
		NOLOGGING=345, NOMAXVALUE=346, NOMINVALUE=347, NONEDITIONABLE=348, NONE=349, 
		NO=350, NOORDER=351, NOPARALLEL=352, NORELY=353, NOSCHEMACHECK=354, NOSORT=355, 
		NOTIFICATION=356, NOT=357, NOVALIDATE=358, NOWAIT=359, NULL=360, NULLS=361, 
		NUMBER=362, NUMERIC=363, NVARCHAR2=364, OBJECT=365, OFFLINE=366, OFF=367, 
		OF=368, OID=369, OLD=370, OLTP=371, ONLINE=372, ONLY=373, ON=374, OPEN=375, 
		OPERATOR=376, OPTIMAL=377, OPTION=378, ORADATA=379, ORDER=380, ORDINALITY=381, 
		OR=382, OSERROR=383, OUTER=384, OUTLINE=385, OUT=386, OVERFLOW=387, OVER=388, 
		OVERRIDING=389, PACKAGE=390, PARALLEL_ENABLE=391, PARALLEL=392, PARAMETERS=393, 
		PARENT=394, PARTIAL=395, PARTITION=396, PARTITIONS=397, PASSING=398, PASSWORD=399, 
		PATH=400, PCTFREE=401, PCTINCREASE=402, PCTUSED=403, PERCENT_FOUND=404, 
		PERCENT_ISOPEN=405, PERCENT_NOTFOUND=406, PERCENT_ROWCOUNT=407, PERCENT_ROWTYPE=408, 
		PERCENT_TYPE=409, PIPELINED=410, PIPE=411, PIVOT=412, PLAN=413, PLS_INTEGER=414, 
		PLUGGABLE=415, POLICY=416, POSITIVEN=417, POSITIVE=418, PRAGMA=419, PRECEDING=420, 
		PRECISION=421, PRESENT=422, PRESERVE=423, PRIMARY=424, PRIORITY=425, PRIOR=426, 
		PRIVILEGE=427, PRIVILEGES=428, PROCEDURE=429, PROCESS=430, PROFILE=431, 
		PROGRAM=432, PUBLIC=433, PURGE=434, QUERY=435, QUOTA=436, RAISE=437, RANGE=438, 
		RAW=439, READ=440, REAL=441, RECORD=442, RECYCLE=443, REDACTION=444, REFERENCE=445, 
		REFERENCES=446, REFERENCING=447, REF=448, REFRESH=449, REJECT=450, RELIES_ON=451, 
		RELY=452, REMOVE=453, RENAME=454, REPLACE=455, REQUIRED=456, RESOURCE=457, 
		RESPECT=458, RESTRICTED=459, RESTRICT_REFERENCES=460, RESULT_CACHE=461, 
		RESULT=462, RESUMABLE=463, RETENTION=464, RETURNING=465, RETURN=466, REUSE=467, 
		REVERSE=468, REVOKE=469, REWRITE=470, RIGHT=471, ROLE=472, ROLES=473, 
		ROLLBACK=474, ROLLUP=475, ROWID=476, ROW=477, ROWS=478, RULES=479, SALT=480, 
		SAMPLE=481, SAVEPOINT=482, SAVE=483, SCHEDULER=484, SCHEMACHECK=485, SCHEMA=486, 
		SCN=487, SEARCH=488, SECOND=489, SECUREFILE=490, SEED=491, SEGMENT=492, 
		SELECT=493, SELF=494, SEQUENCE=495, SEQUENTIAL=496, SERIALIZABLE=497, 
		SERIALLY_REUSABLE=498, SERVERERROR=499, SESSION=500, SESSIONTIMEZONE=501, 
		SET=502, SETS=503, SETTINGS=504, SHARE=505, SHOW=506, SHUTDOWN=507, SIBLINGS=508, 
		SIGNTYPE=509, SIMPLE_INTEGER=510, SINGLE=511, SIZE=512, SKIP_=513, SMALLFILE=514, 
		SMALLINT=515, SNAPSHOT=516, SOME=517, SORT=518, SOURCE=519, SPACE_KEYWORD=520, 
		SPECIFICATION=521, SQLDATA=522, SQLERROR=523, SQL=524, STANDALONE=525, 
		START=526, STARTUP=527, STATEMENT_ID=528, STATEMENT=529, STATIC=530, STATISTICS=531, 
		STORAGE=532, STORE=533, STRING=534, SUBMULTISET=535, SUBPARTITION=536, 
		SUBSTITUTABLE=537, SUBTYPE=538, SUCCESS=539, SUSPEND=540, SYNONYM=541, 
		SYSBACKUP=542, SYSDATE=543, SYSDBA=544, SYSDG=545, SYSGUID=546, SYSKM=547, 
		SYSOPER=548, TABLESPACE=549, TABLE=550, TEMPFILE=551, TEMPORARY=552, THAN=553, 
		THEN=554, THE=555, THROUGH=556, TIMESTAMP_LTZ_UNCONSTRAINED=557, TIMESTAMP=558, 
		TIMESTAMP_TZ_UNCONSTRAINED=559, TIMESTAMP_UNCONSTRAINED=560, TIME=561, 
		TIMEZONE_ABBR=562, TIMEZONE_HOUR=563, TIMEZONE_MINUTE=564, TIMEZONE_REGION=565, 
		TO=566, TRAILING=567, TRANSACTION=568, TRANSLATE=569, TRANSLATION=570, 
		TREAT=571, TRIGGER=572, TRUE=573, TRUNCATE=574, TUNING=575, TYPE=576, 
		UNBOUNDED=577, UNDER=578, UNDO=579, UNIFORM=580, UNION=581, UNIQUE=582, 
		UNLIMITED=583, UNLOCK=584, UNPIVOT=585, UNTIL=586, UNUSABLE=587, UPDATED=588, 
		UPDATE=589, UPSERT=590, UROWID=591, USABLE=592, USERS=593, USER=594, USE=595, 
		USING=596, VALIDATE=597, VALUES=598, VALUE=599, VARCHAR2=600, VARCHAR=601, 
		VARIABLE=602, VARRAY=603, VARYING=604, VERSIONS=605, VERSION=606, VIEW=607, 
		VISIBLE=608, WAIT=609, WARNING=610, WELLFORMED=611, WHENEVER=612, WHEN=613, 
		WHERE=614, WHILE=615, WITHIN=616, WITH=617, WORK=618, WRITE=619, XMLAGG=620, 
		XMLATTRIBUTES=621, XMLCAST=622, XMLCOLATTVAL=623, XMLELEMENT=624, XMLEXISTS=625, 
		XMLFOREST=626, XMLNAMESPACES=627, XMLPARSE=628, XMLPI=629, XMLQUERY=630, 
		XMLROOT=631, XMLSERIALIZE=632, XMLTABLE=633, XML=634, YEAR=635, YES=636, 
		YMINTERVAL_UNCONSTRAINED=637, ZONE=638, PREDICTION=639, PREDICTION_BOUNDS=640, 
		PREDICTION_COST=641, PREDICTION_DETAILS=642, PREDICTION_PROBABILITY=643, 
		PREDICTION_SET=644, CUME_DIST=645, DENSE_RANK=646, LISTAGG=647, PERCENT_RANK=648, 
		PERCENTILE_CONT=649, PERCENTILE_DISC=650, RANK=651, AVG=652, CORR=653, 
		COVAR_=654, DECODE=655, LAG=656, LEAD=657, MAX=658, MEDIAN=659, MIN=660, 
		NTILE=661, NVL=662, RATIO_TO_REPORT=663, REGR_=664, ROUND=665, ROW_NUMBER=666, 
		SUBSTR=667, TO_CHAR=668, TRIM=669, SUM=670, STDDEV=671, VAR_=672, VARIANCE=673, 
		LEAST=674, GREATEST=675, TO_DATE=676, VARIABLE_SESSION=677, NATIONAL_CHAR_STRING_LIT=678, 
		BIT_STRING_LIT=679, HEX_STRING_LIT=680, DOUBLE_PERIOD=681, PERIOD=682, 
		UNSIGNED_INTEGER=683, APPROXIMATE_NUM_LIT=684, CHAR_STRING=685, DELIMITED_ID=686, 
		PERCENT=687, AMPERSAND=688, LEFT_PAREN=689, RIGHT_PAREN=690, DOUBLE_ASTERISK=691, 
		ASTERISK=692, PLUS_SIGN=693, MINUS_SIGN=694, COMMA=695, SOLIDUS=696, AT_SIGN=697, 
		ASSIGN_OP=698, BINDVAR=699, NOT_EQUAL_OP=700, CARRET_OPERATOR_PART=701, 
		TILDE_OPERATOR_PART=702, EXCLAMATION_OPERATOR_PART=703, GREATER_THAN_OP=704, 
		LESS_THAN_OP=705, COLON=706, SEMICOLON=707, BAR=708, EQUALS_OP=709, LEFT_BRACKET=710, 
		RIGHT_BRACKET=711, INTRODUCER=712, SPACES=713, SINGLE_LINE_COMMENT=714, 
		MULTI_LINE_COMMENT=715, PROMPT=716, START_CMD=717, REGULAR_ID=718, ZV=719;
	public const int
		RULE_sql_script = 0, RULE_unit_statement = 1, RULE_drop_function = 2, 
		RULE_alter_function = 3, RULE_create_function_body = 4, RULE_parallel_enable_clause = 5, 
		RULE_partition_by_clause = 6, RULE_result_cache_clause = 7, RULE_relies_on_part = 8, 
		RULE_streaming_clause = 9, RULE_drop_package = 10, RULE_alter_package = 11, 
		RULE_create_package = 12, RULE_create_package_body = 13, RULE_package_obj_spec = 14, 
		RULE_procedure_spec = 15, RULE_function_spec = 16, RULE_package_obj_body = 17, 
		RULE_drop_procedure = 18, RULE_alter_procedure = 19, RULE_function_body = 20, 
		RULE_procedure_body = 21, RULE_create_procedure_body = 22, RULE_drop_trigger = 23, 
		RULE_alter_trigger = 24, RULE_create_trigger = 25, RULE_trigger_follows_clause = 26, 
		RULE_trigger_when_clause = 27, RULE_simple_dml_trigger = 28, RULE_for_each_row = 29, 
		RULE_compound_dml_trigger = 30, RULE_non_dml_trigger = 31, RULE_trigger_body = 32, 
		RULE_routine_clause = 33, RULE_compound_trigger_block = 34, RULE_timing_point_section = 35, 
		RULE_non_dml_event = 36, RULE_dml_event_clause = 37, RULE_dml_event_element = 38, 
		RULE_dml_event_nested_clause = 39, RULE_referencing_clause = 40, RULE_referencing_element = 41, 
		RULE_drop_type = 42, RULE_alter_type = 43, RULE_compile_type_clause = 44, 
		RULE_replace_type_clause = 45, RULE_alter_method_spec = 46, RULE_alter_method_element = 47, 
		RULE_alter_attribute_definition = 48, RULE_attribute_definition = 49, 
		RULE_alter_collection_clauses = 50, RULE_dependent_handling_clause = 51, 
		RULE_dependent_exceptions_part = 52, RULE_create_type = 53, RULE_type_definition = 54, 
		RULE_object_type_def = 55, RULE_object_as_part = 56, RULE_object_under_part = 57, 
		RULE_nested_table_type_def = 58, RULE_sqlj_object_type = 59, RULE_type_body = 60, 
		RULE_type_body_elements = 61, RULE_map_order_func_declaration = 62, RULE_subprog_decl_in_type = 63, 
		RULE_proc_decl_in_type = 64, RULE_func_decl_in_type = 65, RULE_constructor_declaration = 66, 
		RULE_modifier_clause = 67, RULE_object_member_spec = 68, RULE_sqlj_object_type_attr = 69, 
		RULE_element_spec = 70, RULE_element_spec_options = 71, RULE_subprogram_spec = 72, 
		RULE_type_procedure_spec = 73, RULE_type_function_spec = 74, RULE_constructor_spec = 75, 
		RULE_map_order_function_spec = 76, RULE_pragma_clause = 77, RULE_pragma_elements = 78, 
		RULE_type_elements_parameter = 79, RULE_drop_sequence = 80, RULE_alter_sequence = 81, 
		RULE_create_sequence = 82, RULE_sequence_spec = 83, RULE_sequence_start_clause = 84, 
		RULE_create_index = 85, RULE_alter_index = 86, RULE_create_user = 87, 
		RULE_alter_user = 88, RULE_alter_identified_by = 89, RULE_identified_by = 90, 
		RULE_identified_other_clause = 91, RULE_user_tablespace_clause = 92, RULE_quota_clause = 93, 
		RULE_profile_clause = 94, RULE_role_clause = 95, RULE_user_default_role_clause = 96, 
		RULE_password_expire_clause = 97, RULE_user_lock_clause = 98, RULE_user_editions_clause = 99, 
		RULE_alter_user_editions_clause = 100, RULE_proxy_clause = 101, RULE_container_names = 102, 
		RULE_set_container_data = 103, RULE_add_rem_container_data = 104, RULE_container_data_clause = 105, 
		RULE_drop_index = 106, RULE_revoke_statment = 107, RULE_revoke_system_privileges = 108, 
		RULE_revoke_object_privileges = 109, RULE_grant_statement = 110, RULE_container_clause = 111, 
		RULE_create_view = 112, RULE_view_options = 113, RULE_view_alias_constraint = 114, 
		RULE_object_view_clause = 115, RULE_inline_constraint = 116, RULE_out_of_line_constraint = 117, 
		RULE_constraint_state = 118, RULE_xmltable_index_clause = 119, RULE_xmlindex_clause = 120, 
		RULE_physicial_attributes_clause = 121, RULE_partition_clause = 122, RULE_partition_clause_optional = 123, 
		RULE_indexing_clause = 124, RULE_partitioning_storage_clause = 125, RULE_inmemory_clause = 126, 
		RULE_inmemory_parameters = 127, RULE_inmemory_memcompress = 128, RULE_inmemory_priority = 129, 
		RULE_inmemory_distribute = 130, RULE_inmemory_duplicate = 131, RULE_table_compression = 132, 
		RULE_index_compression = 133, RULE_prefix_compression = 134, RULE_advanced_index_compression = 135, 
		RULE_lob_partitioning_storage = 136, RULE_index_subpartition_clause = 137, 
		RULE_usable_clause = 138, RULE_index_attributes = 139, RULE_hash_partition_quantity = 140, 
		RULE_varray_item = 141, RULE_partial_index_clause = 142, RULE_parallel_clause = 143, 
		RULE_domain_index_clause = 144, RULE_exceptions_clause = 145, RULE_create_tablespace = 146, 
		RULE_permanent_tablespace_clause = 147, RULE_tablespace_encryption_spec = 148, 
		RULE_logging_clause = 149, RULE_extent_management_clause = 150, RULE_segment_management_clause = 151, 
		RULE_flashback_mode_clause = 152, RULE_temporary_tablespace_clause = 153, 
		RULE_tablespace_group_clause = 154, RULE_undo_tablespace_clause = 155, 
		RULE_tablespace_retention_clause = 156, RULE_datafile_specification = 157, 
		RULE_tempfile_specification = 158, RULE_datafile_tempfile_spec = 159, 
		RULE_redo_log_file_spec = 160, RULE_autoextend_clause = 161, RULE_maxsize_clause = 162, 
		RULE_subquery = 163, RULE_create_table = 164, RULE_tablespace_clause = 165, 
		RULE_store_in = 166, RULE_storage_clause = 167, RULE_datatype_null_enable = 168, 
		RULE_size_clause = 169, RULE_drop_table = 170, RULE_comment_on_column = 171, 
		RULE_create_synonym = 172, RULE_comment_on_table = 173, RULE_alter_table = 174, 
		RULE_add_constraint = 175, RULE_check_constraint = 176, RULE_drop_constraint = 177, 
		RULE_enable_constraint = 178, RULE_disable_constraint = 179, RULE_foreign_key_clause = 180, 
		RULE_references_clause = 181, RULE_on_delete_clause = 182, RULE_unique_key_clause = 183, 
		RULE_primary_key_clause = 184, RULE_anonymous_block = 185, RULE_invoker_rights_clause = 186, 
		RULE_compiler_parameters_clause = 187, RULE_call_spec = 188, RULE_java_spec = 189, 
		RULE_c_spec = 190, RULE_c_agent_in_clause = 191, RULE_c_parameters_clause = 192, 
		RULE_parameter = 193, RULE_default_value_part = 194, RULE_seq_of_declare_specs = 195, 
		RULE_declare_spec = 196, RULE_variable_declaration = 197, RULE_subtype_declaration = 198, 
		RULE_cursor_declaration = 199, RULE_parameter_spec = 200, RULE_exception_declaration = 201, 
		RULE_pragma_declaration = 202, RULE_record_type_def = 203, RULE_field_spec = 204, 
		RULE_ref_cursor_type_def = 205, RULE_type_declaration = 206, RULE_table_type_def = 207, 
		RULE_table_indexed_by_part = 208, RULE_varray_type_def = 209, RULE_seq_of_statements = 210, 
		RULE_label_declaration = 211, RULE_statement = 212, RULE_swallow_to_semi = 213, 
		RULE_assignment_statement = 214, RULE_continue_statement = 215, RULE_exit_statement = 216, 
		RULE_goto_statement = 217, RULE_if_statement = 218, RULE_elsif_part = 219, 
		RULE_else_part = 220, RULE_loop_statement = 221, RULE_cursor_loop_param = 222, 
		RULE_forall_statement = 223, RULE_bounds_clause = 224, RULE_between_bound = 225, 
		RULE_lower_bound = 226, RULE_upper_bound = 227, RULE_null_statement = 228, 
		RULE_raise_statement = 229, RULE_return_statement = 230, RULE_function_call = 231, 
		RULE_pipe_row_statement = 232, RULE_body = 233, RULE_exception_handler = 234, 
		RULE_trigger_block = 235, RULE_block = 236, RULE_sql_statement = 237, 
		RULE_execute_immediate = 238, RULE_dynamic_returning_clause = 239, RULE_data_manipulation_language_statements = 240, 
		RULE_cursor_manipulation_statements = 241, RULE_close_statement = 242, 
		RULE_open_statement = 243, RULE_fetch_statement = 244, RULE_open_for_statement = 245, 
		RULE_transaction_control_statements = 246, RULE_set_transaction_command = 247, 
		RULE_set_constraint_command = 248, RULE_commit_statement = 249, RULE_write_clause = 250, 
		RULE_rollback_statement = 251, RULE_savepoint_statement = 252, RULE_explain_statement = 253, 
		RULE_select_statement = 254, RULE_subquery_factoring_clause = 255, RULE_factoring_element = 256, 
		RULE_search_clause = 257, RULE_cycle_clause = 258, RULE_subquery_basic_elements = 259, 
		RULE_subquery_operation_part = 260, RULE_query_block = 261, RULE_selected_element = 262, 
		RULE_from_clause = 263, RULE_select_list_elements = 264, RULE_table_ref_list = 265, 
		RULE_table_ref = 266, RULE_table_ref_aux = 267, RULE_table_ref_aux_internal = 268, 
		RULE_join_clause = 269, RULE_join_on_part = 270, RULE_join_using_part = 271, 
		RULE_outer_join_type = 272, RULE_query_partition_clause = 273, RULE_flashback_query_clause = 274, 
		RULE_pivot_clause = 275, RULE_pivot_element = 276, RULE_pivot_for_clause = 277, 
		RULE_pivot_in_clause = 278, RULE_pivot_in_clause_element = 279, RULE_pivot_in_clause_elements = 280, 
		RULE_unpivot_clause = 281, RULE_unpivot_in_clause = 282, RULE_unpivot_in_elements = 283, 
		RULE_hierarchical_query_clause = 284, RULE_start_part = 285, RULE_group_by_clause = 286, 
		RULE_group_by_elements = 287, RULE_rollup_cube_clause = 288, RULE_grouping_sets_clause = 289, 
		RULE_grouping_sets_elements = 290, RULE_having_clause = 291, RULE_model_clause = 292, 
		RULE_cell_reference_options = 293, RULE_return_rows_clause = 294, RULE_reference_model = 295, 
		RULE_main_model = 296, RULE_model_column_clauses = 297, RULE_model_column_partition_part = 298, 
		RULE_model_column_list = 299, RULE_model_column = 300, RULE_model_rules_clause = 301, 
		RULE_model_rules_part = 302, RULE_model_rules_element = 303, RULE_cell_assignment = 304, 
		RULE_model_iterate_clause = 305, RULE_until_part = 306, RULE_order_by_clause = 307, 
		RULE_order_by_elements = 308, RULE_for_update_clause = 309, RULE_for_update_of_part = 310, 
		RULE_for_update_options = 311, RULE_update_statement = 312, RULE_update_set_clause = 313, 
		RULE_column_based_update_set_clause = 314, RULE_delete_statement = 315, 
		RULE_insert_statement = 316, RULE_single_table_insert = 317, RULE_multi_table_insert = 318, 
		RULE_multi_table_element = 319, RULE_conditional_insert_clause = 320, 
		RULE_conditional_insert_when_part = 321, RULE_conditional_insert_else_part = 322, 
		RULE_insert_into_clause = 323, RULE_values_clause = 324, RULE_merge_statement = 325, 
		RULE_merge_update_clause = 326, RULE_merge_element = 327, RULE_merge_update_delete_part = 328, 
		RULE_merge_insert_clause = 329, RULE_selected_tableview = 330, RULE_lock_table_statement = 331, 
		RULE_wait_nowait_part = 332, RULE_lock_table_element = 333, RULE_lock_mode = 334, 
		RULE_general_table_ref = 335, RULE_static_returning_clause = 336, RULE_error_logging_clause = 337, 
		RULE_error_logging_into_part = 338, RULE_error_logging_reject_part = 339, 
		RULE_dml_table_expression_clause = 340, RULE_table_collection_expression = 341, 
		RULE_subquery_restriction_clause = 342, RULE_sample_clause = 343, RULE_seed_part = 344, 
		RULE_condition = 345, RULE_expressions = 346, RULE_expression = 347, RULE_cursor_expression = 348, 
		RULE_logical_expression = 349, RULE_multiset_expression = 350, RULE_relational_expression = 351, 
		RULE_compound_expression = 352, RULE_relational_operator = 353, RULE_in_elements = 354, 
		RULE_between_elements = 355, RULE_concatenation = 356, RULE_interval_expression = 357, 
		RULE_model_expression = 358, RULE_model_expression_element = 359, RULE_single_column_for_loop = 360, 
		RULE_multi_column_for_loop = 361, RULE_unary_expression = 362, RULE_case_statement = 363, 
		RULE_simple_case_statement = 364, RULE_simple_case_when_part = 365, RULE_searched_case_statement = 366, 
		RULE_searched_case_when_part = 367, RULE_case_else_part = 368, RULE_atom = 369, 
		RULE_quantified_expression = 370, RULE_string_function = 371, RULE_standard_function = 372, 
		RULE_numeric_function_wrapper = 373, RULE_numeric_function = 374, RULE_other_function = 375, 
		RULE_over_clause_keyword = 376, RULE_within_or_over_clause_keyword = 377, 
		RULE_standard_prediction_function_keyword = 378, RULE_over_clause = 379, 
		RULE_windowing_clause = 380, RULE_windowing_type = 381, RULE_windowing_elements = 382, 
		RULE_using_clause = 383, RULE_using_element = 384, RULE_collect_order_by_part = 385, 
		RULE_within_or_over_part = 386, RULE_cost_matrix_clause = 387, RULE_xml_passing_clause = 388, 
		RULE_xml_attributes_clause = 389, RULE_xml_namespaces_clause = 390, RULE_xml_table_column = 391, 
		RULE_xml_general_default_part = 392, RULE_xml_multiuse_expression_element = 393, 
		RULE_xmlroot_param_version_part = 394, RULE_xmlroot_param_standalone_part = 395, 
		RULE_xmlserialize_param_enconding_part = 396, RULE_xmlserialize_param_version_part = 397, 
		RULE_xmlserialize_param_ident_part = 398, RULE_sql_plus_command = 399, 
		RULE_whenever_command = 400, RULE_set_command = 401, RULE_partition_extension_clause = 402, 
		RULE_column_alias = 403, RULE_table_alias = 404, RULE_where_clause = 405, 
		RULE_into_clause = 406, RULE_xml_column_name = 407, RULE_routine_name = 408, 
		RULE_grantee_name = 409, RULE_role_name = 410, RULE_constraint_name = 411, 
		RULE_variable_name = 412, RULE_cursor_name = 413, RULE_record_name = 414, 
		RULE_link_name = 415, RULE_tableview_name = 416, RULE_lob_item_name = 417, 
		RULE_dir_object_name = 418, RULE_user_object_name = 419, RULE_tablespace_name = 420, 
		RULE_label_name = 421, RULE_partition_name = 422, RULE_schema_object_name = 423, 
		RULE_lob_segname = 424, RULE_full_identifier = 425, RULE_implementation_type_name = 426, 
		RULE_container_tableview_name = 427, RULE_function_name = 428, RULE_procedure_name = 429, 
		RULE_trigger_name = 430, RULE_collection_name = 431, RULE_index_name = 432, 
		RULE_table_fullname = 433, RULE_grant_object_name = 434, RULE_column_list = 435, 
		RULE_paren_column_list = 436, RULE_keep_clause = 437, RULE_function_argument = 438, 
		RULE_function_argument_analytic = 439, RULE_function_argument_modeling = 440, 
		RULE_respect_or_ignore_nulls = 441, RULE_argument = 442, RULE_type_spec = 443, 
		RULE_datatype = 444, RULE_precision_part = 445, RULE_native_datatype_element = 446, 
		RULE_bind_variable = 447, RULE_general_element = 448, RULE_general_element_part = 449, 
		RULE_table_element = 450, RULE_object_privilege = 451, RULE_system_privilege = 452, 
		RULE_literal = 453, RULE_constant = 454, RULE_identifier = 455, RULE_synonym_name = 456, 
		RULE_package_name = 457, RULE_parameter_name = 458, RULE_reference_model_name = 459, 
		RULE_cost_class_name = 460, RULE_attribute_name = 461, RULE_savepoint_name = 462, 
		RULE_rollback_segment_name = 463, RULE_table_var_name = 464, RULE_schema_name = 465, 
		RULE_main_model_name = 466, RULE_query_name = 467, RULE_identifiers = 468, 
		RULE_aggregate_function_name = 469, RULE_exception_name = 470, RULE_column_name = 471, 
		RULE_id_expression = 472, RULE_id_expressions = 473, RULE_type_name = 474, 
		RULE_sequence_name = 475, RULE_char_set_name = 476, RULE_outer_join_sign = 477, 
		RULE_regular_id = 478, RULE_string_function_name = 479, RULE_numeric_function_name = 480, 
		RULE_integer = 481, RULE_numeric = 482, RULE_numeric_negative = 483, RULE_string = 484;
	public static readonly string[] ruleNames = {
		"sql_script", "unit_statement", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "create_package_body", "package_obj_spec", "procedure_spec", 
		"function_spec", "package_obj_body", "drop_procedure", "alter_procedure", 
		"function_body", "procedure_body", "create_procedure_body", "drop_trigger", 
		"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
		"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
		"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
		"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
		"referencing_clause", "referencing_element", "drop_type", "alter_type", 
		"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
		"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
		"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
		"type_definition", "object_type_def", "object_as_part", "object_under_part", 
		"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
		"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
		"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
		"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
		"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
		"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
		"alter_sequence", "create_sequence", "sequence_spec", "sequence_start_clause", 
		"create_index", "alter_index", "create_user", "alter_user", "alter_identified_by", 
		"identified_by", "identified_other_clause", "user_tablespace_clause", 
		"quota_clause", "profile_clause", "role_clause", "user_default_role_clause", 
		"password_expire_clause", "user_lock_clause", "user_editions_clause", 
		"alter_user_editions_clause", "proxy_clause", "container_names", "set_container_data", 
		"add_rem_container_data", "container_data_clause", "drop_index", "revoke_statment", 
		"revoke_system_privileges", "revoke_object_privileges", "grant_statement", 
		"container_clause", "create_view", "view_options", "view_alias_constraint", 
		"object_view_clause", "inline_constraint", "out_of_line_constraint", "constraint_state", 
		"xmltable_index_clause", "xmlindex_clause", "physicial_attributes_clause", 
		"partition_clause", "partition_clause_optional", "indexing_clause", "partitioning_storage_clause", 
		"inmemory_clause", "inmemory_parameters", "inmemory_memcompress", "inmemory_priority", 
		"inmemory_distribute", "inmemory_duplicate", "table_compression", "index_compression", 
		"prefix_compression", "advanced_index_compression", "lob_partitioning_storage", 
		"index_subpartition_clause", "usable_clause", "index_attributes", "hash_partition_quantity", 
		"varray_item", "partial_index_clause", "parallel_clause", "domain_index_clause", 
		"exceptions_clause", "create_tablespace", "permanent_tablespace_clause", 
		"tablespace_encryption_spec", "logging_clause", "extent_management_clause", 
		"segment_management_clause", "flashback_mode_clause", "temporary_tablespace_clause", 
		"tablespace_group_clause", "undo_tablespace_clause", "tablespace_retention_clause", 
		"datafile_specification", "tempfile_specification", "datafile_tempfile_spec", 
		"redo_log_file_spec", "autoextend_clause", "maxsize_clause", "subquery", 
		"create_table", "tablespace_clause", "store_in", "storage_clause", "datatype_null_enable", 
		"size_clause", "drop_table", "comment_on_column", "create_synonym", "comment_on_table", 
		"alter_table", "add_constraint", "check_constraint", "drop_constraint", 
		"enable_constraint", "disable_constraint", "foreign_key_clause", "references_clause", 
		"on_delete_clause", "unique_key_clause", "primary_key_clause", "anonymous_block", 
		"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
		"c_spec", "c_agent_in_clause", "c_parameters_clause", "parameter", "default_value_part", 
		"seq_of_declare_specs", "declare_spec", "variable_declaration", "subtype_declaration", 
		"cursor_declaration", "parameter_spec", "exception_declaration", "pragma_declaration", 
		"record_type_def", "field_spec", "ref_cursor_type_def", "type_declaration", 
		"table_type_def", "table_indexed_by_part", "varray_type_def", "seq_of_statements", 
		"label_declaration", "statement", "swallow_to_semi", "assignment_statement", 
		"continue_statement", "exit_statement", "goto_statement", "if_statement", 
		"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
		"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
		"raise_statement", "return_statement", "function_call", "pipe_row_statement", 
		"body", "exception_handler", "trigger_block", "block", "sql_statement", 
		"execute_immediate", "dynamic_returning_clause", "data_manipulation_language_statements", 
		"cursor_manipulation_statements", "close_statement", "open_statement", 
		"fetch_statement", "open_for_statement", "transaction_control_statements", 
		"set_transaction_command", "set_constraint_command", "commit_statement", 
		"write_clause", "rollback_statement", "savepoint_statement", "explain_statement", 
		"select_statement", "subquery_factoring_clause", "factoring_element", 
		"search_clause", "cycle_clause", "subquery_basic_elements", "subquery_operation_part", 
		"query_block", "selected_element", "from_clause", "select_list_elements", 
		"table_ref_list", "table_ref", "table_ref_aux", "table_ref_aux_internal", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "condition", "expressions", "expression", 
		"cursor_expression", "logical_expression", "multiset_expression", "relational_expression", 
		"compound_expression", "relational_operator", "in_elements", "between_elements", 
		"concatenation", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "multi_column_for_loop", "unary_expression", 
		"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
		"searched_case_when_part", "case_else_part", "atom", "quantified_expression", 
		"string_function", "standard_function", "numeric_function_wrapper", "numeric_function", 
		"other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "partition_extension_clause", "column_alias", 
		"table_alias", "where_clause", "into_clause", "xml_column_name", "routine_name", 
		"grantee_name", "role_name", "constraint_name", "variable_name", "cursor_name", 
		"record_name", "link_name", "tableview_name", "lob_item_name", "dir_object_name", 
		"user_object_name", "tablespace_name", "label_name", "partition_name", 
		"schema_object_name", "lob_segname", "full_identifier", "implementation_type_name", 
		"container_tableview_name", "function_name", "procedure_name", "trigger_name", 
		"collection_name", "index_name", "table_fullname", "grant_object_name", 
		"column_list", "paren_column_list", "keep_clause", "function_argument", 
		"function_argument_analytic", "function_argument_modeling", "respect_or_ignore_nulls", 
		"argument", "type_spec", "datatype", "precision_part", "native_datatype_element", 
		"bind_variable", "general_element", "general_element_part", "table_element", 
		"object_privilege", "system_privilege", "literal", "constant", "identifier", 
		"synonym_name", "package_name", "parameter_name", "reference_model_name", 
		"cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name", 
		"table_var_name", "schema_name", "main_model_name", "query_name", "identifiers", 
		"aggregate_function_name", "exception_name", "column_name", "id_expression", 
		"id_expressions", "type_name", "sequence_name", "char_set_name", "outer_join_sign", 
		"regular_id", "string_function_name", "numeric_function_name", "integer", 
		"numeric", "numeric_negative", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ACCESS'", "'ACCOUNT'", "'ADD'", "'ADMIN'", "'ADMINISTER'", "'ADVANCED'", 
		"'ADVISOR'", "'AFTER'", "'AGENT'", "'AGGREGATE'", "'A'", "'ALL'", "'ALTER'", 
		"'ANALYZE'", "'AND'", "'ANY'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", 
		"'ASSOCIATE'", "'AT'", "'ATTRIBUTE'", "'AUDIT'", "'AUTHENTICATED'", "'AUTHENTICATION'", 
		"'AUTHID'", "'AUTOALLOCATE'", "'AUTO'", "'AUTOEXTEND'", "'AUTOMATIC'", 
		"'AUTONOMOUS_TRANSACTION'", "'BACKUP'", "'BASIC'", "'BASICFILE'", "'BATCH'", 
		"'BECOME'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", "'BFILE'", "'BIGFILE'", 
		"'BINARY_DOUBLE'", "'BINARY_FLOAT'", "'BINARY_INTEGER'", "'BLOB'", "'BLOCK'", 
		"'BLOCKSIZE'", "'BODY'", "'BOOLEAN'", "'BOTH'", "'BREADTH'", "'BUFFER_POOL'", 
		"'BUILD'", "'BULK'", "'BY'", "'BYTE'", "'CACHE'", "'CALL'", "'CANONICAL'", 
		"'CAPACITY'", "'CASCADE'", "'CASE'", "'CAST'", "'CERTIFICATE'", "'CHANGE'", 
		"'CHARACTER'", "'CHAR'", "'CHAR_CS'", "'CHECK'", "'CHR'", "'CLASS'", "'C'", 
		"'CLOB'", "'CLOSE'", "'CLUSTER'", "'COALESCE'", "'COLLECT'", "'COLUMN'", 
		"'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY'", 
		"'COMPILE'", "'COMPOUND'", "'COMPRESS'", "'COMPUTE'", "'CONNECT_BY_ROOT'", 
		"'CONNECT'", "'CONSTANT'", "'CONSTRAINT'", "'CONSTRAINTS'", "'CONSTRUCTOR'", 
		"'CONTAINER'", "'CONTAINER_DATA'", "'CONTENT'", "'CONTEXT'", "'CONTINUE'", 
		"'CONVERT'", "'CORRUPT_XID_ALL'", "'CORRUPT_XID'", "'COST'", "'COUNT'", 
		"'CREATE'", "'CREATION'", "'CRITICAL'", "'CROSS'", "'CUBE'", "'CURRENT'", 
		"'CURRENT_USER'", "'CURSOR'", "'CUSTOMDATUM'", "'CYCLE'", "'DATABASE'", 
		"'DATA'", "'DATAFILE'", "'DATE'", "'DAY'", "'DBA_RECYCLEBIN'", "'DB_ROLE_CHANGE'", 
		"'DBTIMEZONE'", "'DDL'", "'DEBUG'", "'DEC'", "'DECIMAL'", "'DECLARE'", 
		"'DECOMPOSE'", "'DECREMENT'", "'DEFAULT'", "'DEFAULTS'", "'DEFERRABLE'", 
		"'DEFERRED'", "'DEFINER'", "'DELEGATE'", "'DELETE'", "'DEPTH'", "'DESC'", 
		"'DETERMINISTIC'", "'DICTIONARY'", "'DIMENSION'", "'DIRECTORY'", "'DISABLE'", 
		"'DISASSOCIATE'", "'DISTINCT'", "'DISTINGUISHED'", "'DISTRIBUTE'", "'DML'", 
		"'DOCUMENT'", "'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", "'DUPLICATE'", 
		"'EACH'", "'EDITIONABLE'", "'EDITION'", "'EDITIONING'", "'EDITIONS'", 
		"'ELEMENT'", "'ELSE'", "'ELSIF'", "'EMPTY'", "'ENABLE'", "'ENCODING'", 
		"'ENCRYPT'", "'ENCRYPTION'", "'END'", "'ENTERPRISE'", "'ENTITYESCAPING'", 
		"'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EXCEPT'", "'EXCEPTION'", 
		"'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", "'EXECUTE'", 
		"'EXEMPT'", "'EXISTS'", "'EXIT'", "'EXPIRE'", "'EXPLAIN'", "'EXTENT'", 
		"'EXTERNAL'", "'EXTERNALLY'", "'EXTRACT'", "'FAILURE'", "'FALSE'", "'FETCH'", 
		"'FILESYSTEM_LIKE_LOGGING'", "'FINAL'", "'FIRST'", "'FIRST_VALUE'", "'FLASHBACK'", 
		"'FLASH_CACHE'", "'FLOAT'", "'FOLDER'", "'FOLLOWING'", "'FOLLOWS'", "'FORALL'", 
		"'FORCE'", "'FOREIGN'", "'FOR'", "'FREELIST'", "'FREELISTS'", "'FROM'", 
		"'FULL'", "'FUNCTION'", "'GLOBAL'", "'GLOBALLY'", "'GOTO'", "'GRANT'", 
		"'GROUP'", "'GROUPING'", "'GROUPS'", "'GUARANTEE'", "'HASH'", "'HAVING'", 
		"'HIDE'", "'HIERARCHY'", "'HIGH'", "'HOUR'", "'IDENTIFIED'", "'IDENTIFIER'", 
		"'ID'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'INCLUDE'", "'INCLUDING'", 
		"'INCREMENT'", "'INDENT'", "'INDEXED'", "'INDEX'", "'INDEXING'", "'INDEXTYPE'", 
		"'INDICATOR'", "'INDICES'", "'INFINITE'", "'INHERIT'", "'IN'", "'INITIAL'", 
		"'INITIALLY'", "'INITRANS'", "'INLINE'", "'INMEMORY'", "'INNER'", "'INOUT'", 
		"'INSERT'", "'INSTANTIABLE'", "'INSTEAD'", "'INTEGER'", "'INTERSECT'", 
		"'INTERVAL'", "'INT'", "'INTO'", "'INVALIDATE'", "'INVISIBLE'", "'IS'", 
		"'ISOLATION'", "'ITERATE'", "'JAVA'", "'JOB'", "'JOIN'", "'KEEP'", "'KEY'", 
		"'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEADING'", "'LEFT'", "'LESS'", 
		"'LEVEL'", "'LIBRARY'", "'LIKE2'", "'LIKE4'", "'LIKEC'", "'LIKE'", "'LIMIT'", 
		"'LINK'", "'LIST'", "'LOB'", "'LOCAL'", "'LOCKED'", "'LOCKING'", "'LOCK'", 
		"'LOGGING'", "'LOG'", "'LOGMINING'", "'LOGOFF'", "'LOGON'", "'LONG'", 
		"'LOOP'", "'LOW'", "'MAIN'", "'MANAGE'", "'MANAGEMENT'", "'MANUAL'", "'MAP'", 
		"'MATCHED'", "'MATERIALIZED'", "'MAXSIZE'", "'MAXVALUE'", "'MEASURE'", 
		"'MEASURES'", "'MEDIUM'", "'MEMBER'", "'MEMCOMPRESS'", "'MERGE'", "'MINEXTENTS'", 
		"'MINIMUM'", "'MINING'", "'MINUS'", "'MINUTE'", "'MINVALUE'", "'MLSLABEL'", 
		"'MODEL'", "'MODE'", "'MODIFY'", "'MONTH'", "'MOVEMENT'", "'MULTISET'", 
		"'NAME'", "'NAN'", "'NATURAL'", "'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", 
		"'NCLOB'", "'NESTED'", "'NEW'", "'NEXT'", "'NOAUDIT'", "'NOCACHE'", "'NOCOMPRESS'", 
		"'NOCOPY'", "'NOCYCLE'", "'NOEDITIONABLE'", "'NOENTITYESCAPING'", "'NOGUARANTEE'", 
		"'NOLOGGING'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NONEDITIONABLE'", "'NONE'", 
		"'NO'", "'NOORDER'", "'NOPARALLEL'", "'NORELY'", "'NOSCHEMACHECK'", "'NOSORT'", 
		"'NOTIFICATION'", "'NOT'", "'NOVALIDATE'", "'NOWAIT'", "'NULL'", "'NULLS'", 
		"'NUMBER'", "'NUMERIC'", "'NVARCHAR2'", "'OBJECT'", "'OFFLINE'", "'OFF'", 
		"'OF'", "'OID'", "'OLD'", "'OLTP'", "'ONLINE'", "'ONLY'", "'ON'", "'OPEN'", 
		"'OPERATOR'", "'OPTIMAL'", "'OPTION'", "'ORADATA'", "'ORDER'", "'ORDINALITY'", 
		"'OR'", "'OSERROR'", "'OUTER'", "'OUTLINE'", "'OUT'", "'OVERFLOW'", "'OVER'", 
		"'OVERRIDING'", "'PACKAGE'", "'PARALLEL_ENABLE'", "'PARALLEL'", "'PARAMETERS'", 
		"'PARENT'", "'PARTIAL'", "'PARTITION'", "'PARTITIONS'", "'PASSING'", "'PASSWORD'", 
		"'PATH'", "'PCTFREE'", "'PCTINCREASE'", "'PCTUSED'", "'%FOUND'", "'%ISOPEN'", 
		"'%NOTFOUND'", "'%ROWCOUNT'", "'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", 
		"'PIPE'", "'PIVOT'", "'PLAN'", "'PLS_INTEGER'", "'PLUGGABLE'", "'POLICY'", 
		"'POSITIVEN'", "'POSITIVE'", "'PRAGMA'", "'PRECEDING'", "'PRECISION'", 
		"'PRESENT'", "'PRESERVE'", "'PRIMARY'", "'PRIORITY'", "'PRIOR'", "'PRIVILEGE'", 
		"'PRIVILEGES'", "'PROCEDURE'", "'PROCESS'", "'PROFILE'", "'PROGRAM'", 
		"'PUBLIC'", "'PURGE'", "'QUERY'", "'QUOTA'", "'RAISE'", "'RANGE'", "'RAW'", 
		"'READ'", "'REAL'", "'RECORD'", "'RECYCLE'", "'REDACTION'", "'REFERENCE'", 
		"'REFERENCES'", "'REFERENCING'", "'REF'", "'REFRESH'", "'REJECT'", "'RELIES_ON'", 
		"'RELY'", "'REMOVE'", "'RENAME'", "'REPLACE'", "'REQUIRED'", "'RESOURCE'", 
		"'RESPECT'", "'RESTRICTED'", "'RESTRICT_REFERENCES'", "'RESULT_CACHE'", 
		"'RESULT'", "'RESUMABLE'", "'RETENTION'", "'RETURNING'", "'RETURN'", "'REUSE'", 
		"'REVERSE'", "'REVOKE'", "'REWRITE'", "'RIGHT'", "'ROLE'", "'ROLES'", 
		"'ROLLBACK'", "'ROLLUP'", "'ROWID'", "'ROW'", "'ROWS'", "'RULES'", "'SALT'", 
		"'SAMPLE'", "'SAVEPOINT'", "'SAVE'", "'SCHEDULER'", "'SCHEMACHECK'", "'SCHEMA'", 
		"'SCN'", "'SEARCH'", "'SECOND'", "'SECUREFILE'", "'SEED'", "'SEGMENT'", 
		"'SELECT'", "'SELF'", "'SEQUENCE'", "'SEQUENTIAL'", "'SERIALIZABLE'", 
		"'SERIALLY_REUSABLE'", "'SERVERERROR'", "'SESSION'", "'SESSIONTIMEZONE'", 
		"'SET'", "'SETS'", "'SETTINGS'", "'SHARE'", "'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", 
		"'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SINGLE'", "'SIZE'", "'SKIP'", "'SMALLFILE'", 
		"'SMALLINT'", "'SNAPSHOT'", "'SOME'", "'SORT'", "'SOURCE'", "'SPACE'", 
		"'SPECIFICATION'", "'SQLDATA'", "'SQLERROR'", "'SQL'", "'STANDALONE'", 
		"'START'", "'STARTUP'", "'STATEMENT_ID'", "'STATEMENT'", "'STATIC'", "'STATISTICS'", 
		"'STORAGE'", "'STORE'", "'STRING'", "'SUBMULTISET'", "'SUBPARTITION'", 
		"'SUBSTITUTABLE'", "'SUBTYPE'", "'SUCCESS'", "'SUSPEND'", "'SYNONYM'", 
		"'SYSBACKUP'", "'SYSDATE'", "'SYSDBA'", "'SYSDG'", "'SYSGUID'", "'SYSKM'", 
		"'SYSOPER'", "'TABLESPACE'", "'TABLE'", "'TEMPFILE'", "'TEMPORARY'", "'THAN'", 
		"'THEN'", "'THE'", "'THROUGH'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP'", 
		"'TIMESTAMP_TZ_UNCONSTRAINED'", "'TIMESTAMP_UNCONSTRAINED'", "'TIME'", 
		"'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", 
		"'TO'", "'TRAILING'", "'TRANSACTION'", "'TRANSLATE'", "'TRANSLATION'", 
		"'TREAT'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", "'TUNING'", "'TYPE'", 
		"'UNBOUNDED'", "'UNDER'", "'UNDO'", "'UNIFORM'", "'UNION'", "'UNIQUE'", 
		"'UNLIMITED'", "'UNLOCK'", "'UNPIVOT'", "'UNTIL'", "'UNUSABLE'", "'UPDATED'", 
		"'UPDATE'", "'UPSERT'", "'UROWID'", "'USABLE'", "'USERS'", "'USER'", "'USE'", 
		"'USING'", "'VALIDATE'", "'VALUES'", "'VALUE'", "'VARCHAR2'", "'VARCHAR'", 
		"'VARIABLE'", "'VARRAY'", "'VARYING'", "'VERSIONS'", "'VERSION'", "'VIEW'", 
		"'VISIBLE'", "'WAIT'", "'WARNING'", "'WELLFORMED'", "'WHENEVER'", "'WHEN'", 
		"'WHERE'", "'WHILE'", "'WITHIN'", "'WITH'", "'WORK'", "'WRITE'", "'XMLAGG'", 
		"'XMLATTRIBUTES'", "'XMLCAST'", "'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", 
		"'XMLFOREST'", "'XMLNAMESPACES'", "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", 
		"'XMLROOT'", "'XMLSERIALIZE'", "'XMLTABLE'", "'XML'", "'YEAR'", "'YES'", 
		"'YMINTERVAL_UNCONSTRAINED'", "'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", 
		"'PREDICTION_COST'", "'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", 
		"'PREDICTION_SET'", "'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", 
		"'PERCENTILE_CONT'", "'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", 
		"'COVAR_'", "'DECODE'", "'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", "'MIN'", 
		"'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", "'REGR_'", "'ROUND'", "'ROW_NUMBER'", 
		"'SUBSTR'", "'TO_CHAR'", "'TRIM'", "'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", 
		"'LEAST'", "'GREATEST'", "'TO_DATE'", null, null, null, null, "'..'", 
		"'.'", null, null, null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", 
		"'+'", "'-'", "','", "'/'", "'@'", "':='", null, null, "'^'", "'~'", "'!'", 
		"'>'", "'<'", "':'", "';'", "'|'", "'='", "'['", "']'", "'_'", null, null, 
		null, null, null, null, "'@!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESS", "ACCOUNT", "ADD", "ADMIN", "ADMINISTER", "ADVANCED", "ADVISOR", 
		"AFTER", "AGENT", "AGGREGATE", "A_LETTER", "ALL", "ALTER", "ANALYZE", 
		"AND", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
		"AUDIT", "AUTHENTICATED", "AUTHENTICATION", "AUTHID", "AUTOALLOCATE", 
		"AUTO", "AUTOEXTEND", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BACKUP", 
		"BASIC", "BASICFILE", "BATCH", "BECOME", "BEFORE", "BEGIN", "BETWEEN", 
		"BFILE", "BIGFILE", "BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", 
		"BLOB", "BLOCK", "BLOCKSIZE", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", 
		"BUILD", "BULK", "BY", "BYTE", "CACHE", "CALL", "CANONICAL", "CAPACITY", 
		"CASCADE", "CASE", "CAST", "CERTIFICATE", "CHANGE", "CHARACTER", "CHAR", 
		"CHAR_CS", "CHECK", "CHR", "CLASS", "C_LETTER", "CLOB", "CLOSE", "CLUSTER", 
		"COALESCE", "COLLECT", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", 
		"COMPATIBILITY", "COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT_BY_ROOT", 
		"CONNECT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINER", 
		"CONTAINER_DATA", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID_ALL", 
		"CORRUPT_XID", "COST", "COUNT", "CREATE", "CREATION", "CRITICAL", "CROSS", 
		"CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", "DATABASE", 
		"DATA", "DATAFILE", "DATE", "DAY", "DBA_RECYCLEBIN", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", 
		"DELEGATE", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DICTIONARY", 
		"DIMENSION", "DIRECTORY", "DISABLE", "DISASSOCIATE", "DISTINCT", "DISTINGUISHED", 
		"DISTRIBUTE", "DML", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
		"DUPLICATE", "EACH", "EDITIONABLE", "EDITION", "EDITIONING", "EDITIONS", 
		"ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "ENCRYPT", 
		"ENCRYPTION", "END", "ENTERPRISE", "ENTITYESCAPING", "ERR", "ERRORS", 
		"ESCAPE", "EVALNAME", "EXCEPT", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", 
		"EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXEMPT", "EXISTS", "EXIT", "EXPIRE", 
		"EXPLAIN", "EXTENT", "EXTERNAL", "EXTERNALLY", "EXTRACT", "FAILURE", "FALSE", 
		"FETCH", "FILESYSTEM_LIKE_LOGGING", "FINAL", "FIRST", "FIRST_VALUE", "FLASHBACK", 
		"FLASH_CACHE", "FLOAT", "FOLDER", "FOLLOWING", "FOLLOWS", "FORALL", "FORCE", 
		"FOREIGN", "FOR", "FREELIST", "FREELISTS", "FROM", "FULL", "FUNCTION", 
		"GLOBAL", "GLOBALLY", "GOTO", "GRANT", "GROUP", "GROUPING", "GROUPS", 
		"GUARANTEE", "HASH", "HAVING", "HIDE", "HIERARCHY", "HIGH", "HOUR", "IDENTIFIED", 
		"IDENTIFIER", "ID", "IF", "IGNORE", "IMMEDIATE", "INCLUDE", "INCLUDING", 
		"INCREMENT", "INDENT", "INDEXED", "INDEX", "INDEXING", "INDEXTYPE", "INDICATOR", 
		"INDICES", "INFINITE", "INHERIT", "IN", "INITIAL", "INITIALLY", "INITRANS", 
		"INLINE", "INMEMORY", "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", 
		"INTEGER", "INTERSECT", "INTERVAL", "INT", "INTO", "INVALIDATE", "INVISIBLE", 
		"IS", "ISOLATION", "ITERATE", "JAVA", "JOB", "JOIN", "KEEP", "KEY", "LANGUAGE", 
		"LAST", "LAST_VALUE", "LEADING", "LEFT", "LESS", "LEVEL", "LIBRARY", "LIKE2", 
		"LIKE4", "LIKEC", "LIKE", "LIMIT", "LINK", "LIST", "LOB", "LOCAL", "LOCKED", 
		"LOCKING", "LOCK", "LOGGING", "LOG", "LOGMINING", "LOGOFF", "LOGON", "LONG", 
		"LOOP", "LOW", "MAIN", "MANAGE", "MANAGEMENT", "MANUAL", "MAP", "MATCHED", 
		"MATERIALIZED", "MAXSIZE", "MAXVALUE", "MEASURE", "MEASURES", "MEDIUM", 
		"MEMBER", "MEMCOMPRESS", "MERGE", "MINEXTENTS", "MINIMUM", "MINING", "MINUS", 
		"MINUTE", "MINVALUE", "MLSLABEL", "MODEL", "MODE", "MODIFY", "MONTH", 
		"MOVEMENT", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR_CS", 
		"NCHAR", "NCLOB", "NESTED", "NEW", "NEXT", "NOAUDIT", "NOCACHE", "NOCOMPRESS", 
		"NOCOPY", "NOCYCLE", "NOEDITIONABLE", "NOENTITYESCAPING", "NOGUARANTEE", 
		"NOLOGGING", "NOMAXVALUE", "NOMINVALUE", "NONEDITIONABLE", "NONE", "NO", 
		"NOORDER", "NOPARALLEL", "NORELY", "NOSCHEMACHECK", "NOSORT", "NOTIFICATION", 
		"NOT", "NOVALIDATE", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", 
		"OBJECT", "OFFLINE", "OFF", "OF", "OID", "OLD", "OLTP", "ONLINE", "ONLY", 
		"ON", "OPEN", "OPERATOR", "OPTIMAL", "OPTION", "ORADATA", "ORDER", "ORDINALITY", 
		"OR", "OSERROR", "OUTER", "OUTLINE", "OUT", "OVERFLOW", "OVER", "OVERRIDING", 
		"PACKAGE", "PARALLEL_ENABLE", "PARALLEL", "PARAMETERS", "PARENT", "PARTIAL", 
		"PARTITION", "PARTITIONS", "PASSING", "PASSWORD", "PATH", "PCTFREE", "PCTINCREASE", 
		"PCTUSED", "PERCENT_FOUND", "PERCENT_ISOPEN", "PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", 
		"PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", "PIPE", "PIVOT", "PLAN", 
		"PLS_INTEGER", "PLUGGABLE", "POLICY", "POSITIVEN", "POSITIVE", "PRAGMA", 
		"PRECEDING", "PRECISION", "PRESENT", "PRESERVE", "PRIMARY", "PRIORITY", 
		"PRIOR", "PRIVILEGE", "PRIVILEGES", "PROCEDURE", "PROCESS", "PROFILE", 
		"PROGRAM", "PUBLIC", "PURGE", "QUERY", "QUOTA", "RAISE", "RANGE", "RAW", 
		"READ", "REAL", "RECORD", "RECYCLE", "REDACTION", "REFERENCE", "REFERENCES", 
		"REFERENCING", "REF", "REFRESH", "REJECT", "RELIES_ON", "RELY", "REMOVE", 
		"RENAME", "REPLACE", "REQUIRED", "RESOURCE", "RESPECT", "RESTRICTED", 
		"RESTRICT_REFERENCES", "RESULT_CACHE", "RESULT", "RESUMABLE", "RETENTION", 
		"RETURNING", "RETURN", "REUSE", "REVERSE", "REVOKE", "REWRITE", "RIGHT", 
		"ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROWID", "ROW", "ROWS", "RULES", 
		"SALT", "SAMPLE", "SAVEPOINT", "SAVE", "SCHEDULER", "SCHEMACHECK", "SCHEMA", 
		"SCN", "SEARCH", "SECOND", "SECUREFILE", "SEED", "SEGMENT", "SELECT", 
		"SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
		"SERVERERROR", "SESSION", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", 
		"SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
		"SINGLE", "SIZE", "SKIP_", "SMALLFILE", "SMALLINT", "SNAPSHOT", "SOME", 
		"SORT", "SOURCE", "SPACE_KEYWORD", "SPECIFICATION", "SQLDATA", "SQLERROR", 
		"SQL", "STANDALONE", "START", "STARTUP", "STATEMENT_ID", "STATEMENT", 
		"STATIC", "STATISTICS", "STORAGE", "STORE", "STRING", "SUBMULTISET", "SUBPARTITION", 
		"SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUSPEND", "SYNONYM", "SYSBACKUP", 
		"SYSDATE", "SYSDBA", "SYSDG", "SYSGUID", "SYSKM", "SYSOPER", "TABLESPACE", 
		"TABLE", "TEMPFILE", "TEMPORARY", "THAN", "THEN", "THE", "THROUGH", "TIMESTAMP_LTZ_UNCONSTRAINED", 
		"TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
		"TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TREAT", 
		"TRIGGER", "TRUE", "TRUNCATE", "TUNING", "TYPE", "UNBOUNDED", "UNDER", 
		"UNDO", "UNIFORM", "UNION", "UNIQUE", "UNLIMITED", "UNLOCK", "UNPIVOT", 
		"UNTIL", "UNUSABLE", "UPDATED", "UPDATE", "UPSERT", "UROWID", "USABLE", 
		"USERS", "USER", "USE", "USING", "VALIDATE", "VALUES", "VALUE", "VARCHAR2", 
		"VARCHAR", "VARIABLE", "VARRAY", "VARYING", "VERSIONS", "VERSION", "VIEW", 
		"VISIBLE", "WAIT", "WARNING", "WELLFORMED", "WHENEVER", "WHEN", "WHERE", 
		"WHILE", "WITHIN", "WITH", "WORK", "WRITE", "XMLAGG", "XMLATTRIBUTES", 
		"XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", 
		"XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", 
		"XML", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", "ZONE", "PREDICTION", 
		"PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", 
		"PREDICTION_SET", "CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", 
		"PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", 
		"DECODE", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", 
		"REGR_", "ROUND", "ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", 
		"VAR_", "VARIANCE", "LEAST", "GREATEST", "TO_DATE", "VARIABLE_SESSION", 
		"NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
		"PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", 
		"PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", 
		"ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
		"ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", 
		"EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", "LESS_THAN_OP", "COLON", 
		"SEMICOLON", "BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", "INTRODUCER", 
		"SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "PROMPT", "START_CMD", 
		"REGULAR_ID", "ZV"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PlSqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PlSqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlSqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Sql_scriptContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PlSqlParser.Eof, 0); }
		public Unit_statementContext[] unit_statement() {
			return GetRuleContexts<Unit_statementContext>();
		}
		public Unit_statementContext unit_statement(int i) {
			return GetRuleContext<Unit_statementContext>(i);
		}
		public Sql_plus_commandContext[] sql_plus_command() {
			return GetRuleContexts<Sql_plus_commandContext>();
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return GetRuleContext<Sql_plus_commandContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(PlSqlParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(PlSqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_script(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_scriptContext sql_script() {
		Sql_scriptContext _localctx = new Sql_scriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_sql_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GRANT - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)) | (1L << (SOLIDUS - 647)))) != 0) || ((((_la - 716)) & ~0x3f) == 0 && ((1L << (_la - 716)) & ((1L << (PROMPT - 716)) | (1L << (START_CMD - 716)) | (1L << (REGULAR_ID - 716)))) != 0)) {
				{
				{
				State = 972;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 970; unit_statement();
					}
					break;
				case 2:
					{
					State = 971; sql_plus_command();
					}
					break;
				}
				State = 975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 974; Match(SEMICOLON);
					}
				}

				}
				}
				State = 981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 982; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unit_statementContext : ParserRuleContext {
		public Transaction_control_statementsContext transaction_control_statements() {
			return GetRuleContext<Transaction_control_statementsContext>(0);
		}
		public Alter_functionContext alter_function() {
			return GetRuleContext<Alter_functionContext>(0);
		}
		public Alter_packageContext alter_package() {
			return GetRuleContext<Alter_packageContext>(0);
		}
		public Alter_procedureContext alter_procedure() {
			return GetRuleContext<Alter_procedureContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_triggerContext alter_trigger() {
			return GetRuleContext<Alter_triggerContext>(0);
		}
		public Alter_typeContext alter_type() {
			return GetRuleContext<Alter_typeContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_indexContext alter_index() {
			return GetRuleContext<Alter_indexContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Create_function_bodyContext create_function_body() {
			return GetRuleContext<Create_function_bodyContext>(0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return GetRuleContext<Create_procedure_bodyContext>(0);
		}
		public Create_packageContext create_package() {
			return GetRuleContext<Create_packageContext>(0);
		}
		public Create_package_bodyContext create_package_body() {
			return GetRuleContext<Create_package_bodyContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Grant_statementContext grant_statement() {
			return GetRuleContext<Grant_statementContext>(0);
		}
		public Revoke_statmentContext revoke_statment() {
			return GetRuleContext<Revoke_statmentContext>(0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unit_statementContext unit_statement() {
		Unit_statementContext _localctx = new Unit_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_unit_statement);
		try {
			State = 1002;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 984; transaction_control_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 985; alter_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 986; alter_package();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 987; alter_procedure();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 988; alter_sequence();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 989; alter_trigger();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 990; alter_type();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 991; alter_table();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 992; alter_index();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 993; alter_user();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 994; create_function_body();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 995; create_procedure_body();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 996; create_package();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 997; create_package_body();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 998; create_index();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 999; create_table();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1000; grant_statement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1001; revoke_statment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 4, RULE_drop_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004; Match(DROP);
			State = 1005; Match(FUNCTION);
			State = 1006; function_name();
			State = 1007; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_functionContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_functionContext alter_function() {
		Alter_functionContext _localctx = new Alter_functionContext(Context, State);
		EnterRule(_localctx, 6, RULE_alter_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009; Match(ALTER);
			State = 1010; Match(FUNCTION);
			State = 1011; function_name();
			State = 1012; Match(COMPILE);
			State = 1014;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 1013; Match(DEBUG);
				}
				break;
			}
			State = 1019;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1016; compiler_parameters_clause();
					}
					} 
				}
				State = 1021;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 1024;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1022; Match(REUSE);
				State = 1023; Match(SETTINGS);
				}
			}

			State = 1026; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_function_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return GetRuleContext<Implementation_type_nameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Invoker_rights_clauseContext[] invoker_rights_clause() {
			return GetRuleContexts<Invoker_rights_clauseContext>();
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return GetRuleContext<Invoker_rights_clauseContext>(i);
		}
		public Parallel_enable_clauseContext[] parallel_enable_clause() {
			return GetRuleContexts<Parallel_enable_clauseContext>();
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return GetRuleContext<Parallel_enable_clauseContext>(i);
		}
		public Result_cache_clauseContext[] result_cache_clause() {
			return GetRuleContexts<Result_cache_clauseContext>();
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return GetRuleContext<Result_cache_clauseContext>(i);
		}
		public ITerminalNode[] DETERMINISTIC() { return GetTokens(PlSqlParser.DETERMINISTIC); }
		public ITerminalNode DETERMINISTIC(int i) {
			return GetToken(PlSqlParser.DETERMINISTIC, i);
		}
		public ITerminalNode PIPELINED() { return GetToken(PlSqlParser.PIPELINED, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(PlSqlParser.AGGREGATE, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_function_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_function_bodyContext create_function_body() {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_create_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1028; Match(CREATE);
			State = 1031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1029; Match(OR);
				State = 1030; Match(REPLACE);
				}
			}

			State = 1033; Match(FUNCTION);
			State = 1034; function_name();
			State = 1046;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1035; Match(LEFT_PAREN);
				State = 1040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1037;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1036; Match(COMMA);
						}
					}

					State = 1039; parameter();
					}
					}
					State = 1042;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				State = 1044; Match(RIGHT_PAREN);
				}
			}

			State = 1048; Match(RETURN);
			State = 1049; type_spec();
			State = 1056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				State = 1054;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTHID:
					{
					State = 1050; invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					State = 1051; parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					State = 1052; result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					State = 1053; Match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1076;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				{
				State = 1060;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PIPELINED) {
					{
					State = 1059; Match(PIPELINED);
					}
				}

				State = 1062;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1071;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 1064;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DECLARE) {
						{
						State = 1063; Match(DECLARE);
						}
					}

					State = 1067;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						State = 1066; seq_of_declare_specs();
						}
					}

					State = 1069; body();
					}
					break;
				case 2:
					{
					State = 1070; call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 1073;
				_la = TokenStream.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1074; Match(USING);
				State = 1075; implementation_type_name();
				}
				break;
			}
			State = 1078; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_enable_clauseContext : ParserRuleContext {
		public ITerminalNode PARALLEL_ENABLE() { return GetToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return GetRuleContext<Partition_by_clauseContext>(0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_enable_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_enable_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_enable_clauseContext parallel_enable_clause() {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_parallel_enable_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1080; Match(PARALLEL_ENABLE);
			State = 1082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1081; partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_by_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode ANY() { return GetToken(PlSqlParser.ANY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(PlSqlParser.HASH, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ITerminalNode LIST() { return GetToken(PlSqlParser.LIST, 0); }
		public Streaming_clauseContext streaming_clause() {
			return GetRuleContext<Streaming_clauseContext>(0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_by_clauseContext partition_by_clause() {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_partition_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1084; Match(LEFT_PAREN);
			State = 1085; Match(PARTITION);
			State = 1086; expression();
			State = 1087; Match(BY);
			State = 1091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
				{
				State = 1088; Match(ANY);
				}
				break;
			case HASH:
			case LIST:
			case RANGE:
				{
				State = 1089;
				_la = TokenStream.LA(1);
				if ( !(_la==HASH || _la==LIST || _la==RANGE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1090; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				State = 1093; streaming_clause();
				}
			}

			State = 1096; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_cache_clauseContext : ParserRuleContext {
		public ITerminalNode RESULT_CACHE() { return GetToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return GetRuleContext<Relies_on_partContext>(0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_cache_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_cache_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_cache_clauseContext result_cache_clause() {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_result_cache_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098; Match(RESULT_CACHE);
			State = 1100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELIES_ON) {
				{
				State = 1099; relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relies_on_partContext : ParserRuleContext {
		public ITerminalNode RELIES_ON() { return GetToken(PlSqlParser.RELIES_ON, 0); }
		public Tableview_nameContext[] tableview_name() {
			return GetRuleContexts<Tableview_nameContext>();
		}
		public Tableview_nameContext tableview_name(int i) {
			return GetRuleContext<Tableview_nameContext>(i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relies_on_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelies_on_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relies_on_partContext relies_on_part() {
		Relies_on_partContext _localctx = new Relies_on_partContext(Context, State);
		EnterRule(_localctx, 16, RULE_relies_on_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1102; Match(RELIES_ON);
			State = 1103; Match(LEFT_PAREN);
			State = 1104; tableview_name();
			State = 1109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1105; Match(COMMA);
				State = 1106; tableview_name();
				}
				}
				State = 1111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1112; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Streaming_clauseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(PlSqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streaming_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreaming_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Streaming_clauseContext streaming_clause() {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_streaming_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			_la = TokenStream.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1115; expression();
			State = 1116; Match(BY);
			State = 1117; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_packageContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_packageContext drop_package() {
		Drop_packageContext _localctx = new Drop_packageContext(Context, State);
		EnterRule(_localctx, 20, RULE_drop_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1119; Match(DROP);
			State = 1120; Match(PACKAGE);
			State = 1122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1121; Match(BODY);
				}
				break;
			}
			State = 1127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1124; schema_object_name();
				State = 1125; Match(PERIOD);
				}
				break;
			}
			State = 1129; package_name();
			State = 1130; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_packageContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode[] PACKAGE() { return GetTokens(PlSqlParser.PACKAGE); }
		public ITerminalNode PACKAGE(int i) {
			return GetToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_packageContext alter_package() {
		Alter_packageContext _localctx = new Alter_packageContext(Context, State);
		EnterRule(_localctx, 22, RULE_alter_package);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1132; Match(ALTER);
			State = 1133; Match(PACKAGE);
			State = 1134; package_name();
			State = 1135; Match(COMPILE);
			State = 1137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1136; Match(DEBUG);
				}
				break;
			}
			State = 1140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 1139;
				_la = TokenStream.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1142; compiler_parameters_clause();
					}
					} 
				}
				State = 1147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 1150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1148; Match(REUSE);
				State = 1149; Match(SETTINGS);
				}
			}

			State = 1152; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_packageContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext[] package_name() {
			return GetRuleContexts<Package_nameContext>();
		}
		public Package_nameContext package_name(int i) {
			return GetRuleContext<Package_nameContext>(i);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Package_obj_specContext[] package_obj_spec() {
			return GetRuleContexts<Package_obj_specContext>();
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return GetRuleContext<Package_obj_specContext>(i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_packageContext create_package() {
		Create_packageContext _localctx = new Create_packageContext(Context, State);
		EnterRule(_localctx, 24, RULE_create_package);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1154; Match(CREATE);
			State = 1157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1155; Match(OR);
				State = 1156; Match(REPLACE);
				}
			}

			State = 1159; Match(PACKAGE);
			State = 1163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 1160; schema_object_name();
				State = 1161; Match(PERIOD);
				}
				break;
			}
			State = 1165; package_name();
			State = 1167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1166; invoker_rights_clause();
				}
			}

			State = 1169;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				State = 1170; package_obj_spec();
				}
				}
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1176; Match(END);
			State = 1178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 1177; package_name();
				}
			}

			State = 1180; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_package_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Package_nameContext[] package_name() {
			return GetRuleContexts<Package_nameContext>();
		}
		public Package_nameContext package_name(int i) {
			return GetRuleContext<Package_nameContext>(i);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Package_obj_bodyContext[] package_obj_body() {
			return GetRuleContexts<Package_obj_bodyContext>();
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return GetRuleContext<Package_obj_bodyContext>(i);
		}
		public ITerminalNode BEGIN() { return GetToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_package_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_package_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_package_bodyContext create_package_body() {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_package_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1182; Match(CREATE);
			State = 1185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1183; Match(OR);
				State = 1184; Match(REPLACE);
				}
			}

			State = 1187; Match(PACKAGE);
			State = 1188; Match(BODY);
			State = 1192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 1189; schema_object_name();
				State = 1190; Match(PERIOD);
				}
				break;
			}
			State = 1194; package_name();
			State = 1195;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				State = 1196; package_obj_body();
				}
				}
				State = 1201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN) {
				{
				State = 1202; Match(BEGIN);
				State = 1203; seq_of_statements();
				}
			}

			State = 1206; Match(END);
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 1207; package_name();
				}
			}

			State = 1210; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_obj_specContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return GetRuleContext<Pragma_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_obj_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_obj_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_obj_specContext package_obj_spec() {
		Package_obj_specContext _localctx = new Package_obj_specContext(Context, State);
		EnterRule(_localctx, 28, RULE_package_obj_spec);
		try {
			State = 1220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1212; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1213; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1214; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1215; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1216; pragma_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1217; type_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1218; procedure_spec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1219; function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_specContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_specContext procedure_spec() {
		Procedure_specContext _localctx = new Procedure_specContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedure_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1222; Match(PROCEDURE);
			State = 1223; identifier();
			State = 1235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1224; Match(LEFT_PAREN);
				State = 1225; parameter();
				State = 1230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1226; Match(COMMA);
					State = 1227; parameter();
					}
					}
					State = 1232;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1233; Match(RIGHT_PAREN);
				}
			}

			State = 1237; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_specContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode DETERMINISTIC() { return GetToken(PlSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode RESULT_CACHE() { return GetToken(PlSqlParser.RESULT_CACHE, 0); }
		public Function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_specContext function_spec() {
		Function_specContext _localctx = new Function_specContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1239; Match(FUNCTION);
			State = 1240; identifier();
			State = 1252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1241; Match(LEFT_PAREN);
				State = 1242; parameter();
				State = 1247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1243; Match(COMMA);
					State = 1244; parameter();
					}
					}
					State = 1249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1250; Match(RIGHT_PAREN);
				}
			}

			State = 1254; Match(RETURN);
			State = 1255; type_spec();
			State = 1257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DETERMINISTIC) {
				{
				State = 1256; Match(DETERMINISTIC);
				}
			}

			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RESULT_CACHE) {
				{
				State = 1259; Match(RESULT_CACHE);
				}
			}

			State = 1262; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_obj_bodyContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_bodyContext procedure_body() {
			return GetRuleContext<Procedure_bodyContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_obj_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_obj_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_obj_bodyContext package_obj_body() {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_package_obj_body);
		try {
			State = 1273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1264; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1265; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1266; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1267; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1268; type_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1269; procedure_body();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1270; function_body();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1271; procedure_spec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1272; function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 36, RULE_drop_procedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275; Match(DROP);
			State = 1276; Match(PROCEDURE);
			State = 1277; procedure_name();
			State = 1278; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_procedureContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_procedure; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_procedureContext alter_procedure() {
		Alter_procedureContext _localctx = new Alter_procedureContext(Context, State);
		EnterRule(_localctx, 38, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280; Match(ALTER);
			State = 1281; Match(PROCEDURE);
			State = 1282; procedure_name();
			State = 1283; Match(COMPILE);
			State = 1285;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 1284; Match(DEBUG);
				}
				break;
			}
			State = 1290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1287; compiler_parameters_clause();
					}
					} 
				}
				State = 1292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			State = 1295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1293; Match(REUSE);
				State = 1294; Match(SETTINGS);
				}
			}

			State = 1297; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return GetRuleContext<Implementation_type_nameContext>(0);
		}
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public Invoker_rights_clauseContext[] invoker_rights_clause() {
			return GetRuleContexts<Invoker_rights_clauseContext>();
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return GetRuleContext<Invoker_rights_clauseContext>(i);
		}
		public Parallel_enable_clauseContext[] parallel_enable_clause() {
			return GetRuleContexts<Parallel_enable_clauseContext>();
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return GetRuleContext<Parallel_enable_clauseContext>(i);
		}
		public Result_cache_clauseContext[] result_cache_clause() {
			return GetRuleContexts<Result_cache_clauseContext>();
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return GetRuleContext<Result_cache_clauseContext>(i);
		}
		public ITerminalNode[] DETERMINISTIC() { return GetTokens(PlSqlParser.DETERMINISTIC); }
		public ITerminalNode DETERMINISTIC(int i) {
			return GetToken(PlSqlParser.DETERMINISTIC, i);
		}
		public ITerminalNode PIPELINED() { return GetToken(PlSqlParser.PIPELINED, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(PlSqlParser.AGGREGATE, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1299; Match(FUNCTION);
			State = 1300; identifier();
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1301; Match(LEFT_PAREN);
				State = 1302; parameter();
				State = 1307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1303; Match(COMMA);
					State = 1304; parameter();
					}
					}
					State = 1309;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1310; Match(RIGHT_PAREN);
				}
			}

			State = 1314; Match(RETURN);
			State = 1315; type_spec();
			State = 1322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				State = 1320;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTHID:
					{
					State = 1316; invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					State = 1317; parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					State = 1318; result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					State = 1319; Match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				{
				State = 1326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PIPELINED) {
					{
					State = 1325; Match(PIPELINED);
					}
				}

				State = 1328;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1337;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 1330;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DECLARE) {
						{
						State = 1329; Match(DECLARE);
						}
					}

					State = 1333;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						State = 1332; seq_of_declare_specs();
						}
					}

					State = 1335; body();
					}
					break;
				case 2:
					{
					State = 1336; call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 1339;
				_la = TokenStream.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1340; Match(USING);
				State = 1341; implementation_type_name();
				}
				break;
			}
			State = 1344; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_bodyContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_bodyContext procedure_body() {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_procedure_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1346; Match(PROCEDURE);
			State = 1347; identifier();
			State = 1359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1348; Match(LEFT_PAREN);
				State = 1349; parameter();
				State = 1354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1350; Match(COMMA);
					State = 1351; parameter();
					}
					}
					State = 1356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1357; Match(RIGHT_PAREN);
				}
			}

			State = 1361;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 1363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1362; Match(DECLARE);
					}
				}

				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 1365; seq_of_declare_specs();
					}
				}

				State = 1368; body();
				}
				break;
			case 2:
				{
				State = 1369; call_spec();
				}
				break;
			case 3:
				{
				State = 1370; Match(EXTERNAL);
				}
				break;
			}
			State = 1373; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedure_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedure_bodyContext create_procedure_body() {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_procedure_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375; Match(CREATE);
			State = 1378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1376; Match(OR);
				State = 1377; Match(REPLACE);
				}
			}

			State = 1380; Match(PROCEDURE);
			State = 1381; procedure_name();
			State = 1393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1382; Match(LEFT_PAREN);
				State = 1383; parameter();
				State = 1388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1384; Match(COMMA);
					State = 1385; parameter();
					}
					}
					State = 1390;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1391; Match(RIGHT_PAREN);
				}
			}

			State = 1396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1395; invoker_rights_clause();
				}
			}

			State = 1398;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 1400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1399; Match(DECLARE);
					}
				}

				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 1402; seq_of_declare_specs();
					}
				}

				State = 1405; body();
				}
				break;
			case 2:
				{
				State = 1406; call_spec();
				}
				break;
			case 3:
				{
				State = 1407; Match(EXTERNAL);
				}
				break;
			}
			State = 1410; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(Context, State);
		EnterRule(_localctx, 46, RULE_drop_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1412; Match(DROP);
			State = 1413; Match(TRIGGER);
			State = 1414; trigger_name();
			State = 1415; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_triggerContext : ParserRuleContext {
		public Trigger_nameContext alter_trigger_name;
		public Trigger_nameContext rename_trigger_name;
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext[] trigger_name() {
			return GetRuleContexts<Trigger_nameContext>();
		}
		public Trigger_nameContext trigger_name(int i) {
			return GetRuleContext<Trigger_nameContext>(i);
		}
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_triggerContext alter_trigger() {
		Alter_triggerContext _localctx = new Alter_triggerContext(Context, State);
		EnterRule(_localctx, 48, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417; Match(ALTER);
			State = 1418; Match(TRIGGER);
			State = 1419; _localctx.alter_trigger_name = trigger_name();
			State = 1438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				State = 1420;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case RENAME:
				{
				State = 1421; Match(RENAME);
				State = 1422; Match(TO);
				State = 1423; _localctx.rename_trigger_name = trigger_name();
				}
				break;
			case COMPILE:
				{
				State = 1424; Match(COMPILE);
				State = 1426;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 1425; Match(DEBUG);
					}
					break;
				}
				State = 1431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1428; compiler_parameters_clause();
						}
						} 
					}
					State = 1433;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				}
				State = 1436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REUSE) {
					{
					State = 1434; Match(REUSE);
					State = 1435; Match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1440; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_triggerContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Trigger_bodyContext trigger_body() {
			return GetRuleContext<Trigger_bodyContext>(0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return GetRuleContext<Simple_dml_triggerContext>(0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return GetRuleContext<Compound_dml_triggerContext>(0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return GetRuleContext<Non_dml_triggerContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return GetRuleContext<Trigger_follows_clauseContext>(0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return GetRuleContext<Trigger_when_clauseContext>(0);
		}
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_triggerContext create_trigger() {
		Create_triggerContext _localctx = new Create_triggerContext(Context, State);
		EnterRule(_localctx, 50, RULE_create_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1442; Match(CREATE);
			State = 1445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1443; Match(OR);
				State = 1444; Match(REPLACE);
				}
			}

			State = 1447; Match(TRIGGER);
			State = 1448; trigger_name();
			State = 1452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 1449; simple_dml_trigger();
				}
				break;
			case 2:
				{
				State = 1450; compound_dml_trigger();
				}
				break;
			case 3:
				{
				State = 1451; non_dml_trigger();
				}
				break;
			}
			State = 1455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 1454; trigger_follows_clause();
				}
				break;
			}
			State = 1458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 1457;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1460; trigger_when_clause();
				}
			}

			State = 1463; trigger_body();
			State = 1464; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_follows_clauseContext : ParserRuleContext {
		public ITerminalNode FOLLOWS() { return GetToken(PlSqlParser.FOLLOWS, 0); }
		public Trigger_nameContext[] trigger_name() {
			return GetRuleContexts<Trigger_nameContext>();
		}
		public Trigger_nameContext trigger_name(int i) {
			return GetRuleContext<Trigger_nameContext>(i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_follows_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_follows_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_follows_clauseContext trigger_follows_clause() {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(Context, State);
		EnterRule(_localctx, 52, RULE_trigger_follows_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1466; Match(FOLLOWS);
			State = 1467; trigger_name();
			State = 1472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1468; Match(COMMA);
				State = 1469; trigger_name();
				}
				}
				State = 1474;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_when_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_when_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_when_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_when_clauseContext trigger_when_clause() {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(Context, State);
		EnterRule(_localctx, 54, RULE_trigger_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; Match(WHEN);
			State = 1476; Match(LEFT_PAREN);
			State = 1477; condition();
			State = 1478; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_dml_triggerContext : ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return GetRuleContext<Dml_event_clauseContext>(0);
		}
		public ITerminalNode BEFORE() { return GetToken(PlSqlParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(PlSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return GetRuleContext<Referencing_clauseContext>(0);
		}
		public For_each_rowContext for_each_row() {
			return GetRuleContext<For_each_rowContext>(0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_dml_triggerContext simple_dml_trigger() {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(Context, State);
		EnterRule(_localctx, 56, RULE_simple_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				{
				State = 1480; Match(BEFORE);
				}
				break;
			case AFTER:
				{
				State = 1481; Match(AFTER);
				}
				break;
			case INSTEAD:
				{
				State = 1482; Match(INSTEAD);
				State = 1483; Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1486; dml_event_clause();
			State = 1488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 1487; referencing_clause();
				}
				break;
			}
			State = 1491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 1490; for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_rowContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(PlSqlParser.EACH, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_row; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_each_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_each_rowContext for_each_row() {
		For_each_rowContext _localctx = new For_each_rowContext(Context, State);
		EnterRule(_localctx, 58, RULE_for_each_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1493; Match(FOR);
			State = 1494; Match(EACH);
			State = 1495; Match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_dml_triggerContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return GetRuleContext<Dml_event_clauseContext>(0);
		}
		public Referencing_clauseContext referencing_clause() {
			return GetRuleContext<Referencing_clauseContext>(0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_dml_triggerContext compound_dml_trigger() {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(Context, State);
		EnterRule(_localctx, 60, RULE_compound_dml_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497; Match(FOR);
			State = 1498; dml_event_clause();
			State = 1500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 1499; referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_dml_triggerContext : ParserRuleContext {
		public Non_dml_eventContext[] non_dml_event() {
			return GetRuleContexts<Non_dml_eventContext>();
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return GetRuleContext<Non_dml_eventContext>(i);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode BEFORE() { return GetToken(PlSqlParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(PlSqlParser.SCHEMA, 0); }
		public ITerminalNode[] OR() { return GetTokens(PlSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_dml_triggerContext non_dml_trigger() {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(Context, State);
		EnterRule(_localctx, 62, RULE_non_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502;
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1503; non_dml_event();
			State = 1508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1504; Match(OR);
				State = 1505; non_dml_event();
				}
				}
				State = 1510;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1511; Match(ON);
			State = 1519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 1512; Match(DATABASE);
				}
				break;
			case 2:
				{
				State = 1516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 1513; schema_name();
					State = 1514; Match(PERIOD);
					}
					break;
				}
				State = 1518; Match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_bodyContext : ParserRuleContext {
		public ITerminalNode COMPOUND() { return GetToken(PlSqlParser.COMPOUND, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode CALL() { return GetToken(PlSqlParser.CALL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Trigger_blockContext trigger_block() {
			return GetRuleContext<Trigger_blockContext>(0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_bodyContext trigger_body() {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_trigger_body);
		try {
			State = 1526;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1521; Match(COMPOUND);
				State = 1522; Match(TRIGGER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1523; Match(CALL);
				State = 1524; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1525; trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Routine_clauseContext : ParserRuleContext {
		public Routine_nameContext routine_name() {
			return GetRuleContext<Routine_nameContext>(0);
		}
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutine_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Routine_clauseContext routine_clause() {
		Routine_clauseContext _localctx = new Routine_clauseContext(Context, State);
		EnterRule(_localctx, 66, RULE_routine_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1528; routine_name();
			State = 1530;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1529; function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_trigger_blockContext : ParserRuleContext {
		public ITerminalNode COMPOUND() { return GetToken(PlSqlParser.COMPOUND, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Timing_point_sectionContext[] timing_point_section() {
			return GetRuleContexts<Timing_point_sectionContext>();
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return GetRuleContext<Timing_point_sectionContext>(i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_trigger_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_trigger_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_trigger_blockContext compound_trigger_block() {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(Context, State);
		EnterRule(_localctx, 68, RULE_compound_trigger_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1532; Match(COMPOUND);
			State = 1533; Match(TRIGGER);
			State = 1535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 1534; seq_of_declare_specs();
				}
				break;
			}
			State = 1538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1537; timing_point_section();
				}
				}
				State = 1540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			State = 1542; Match(END);
			State = 1543; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timing_point_sectionContext : ParserRuleContext {
		public IToken bk;
		public IToken ak;
		public ITerminalNode[] STATEMENT() { return GetTokens(PlSqlParser.STATEMENT); }
		public ITerminalNode STATEMENT(int i) {
			return GetToken(PlSqlParser.STATEMENT, i);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return GetRuleContext<Trigger_blockContext>(0);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(PlSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(PlSqlParser.BEFORE, i);
		}
		public ITerminalNode[] EACH() { return GetTokens(PlSqlParser.EACH); }
		public ITerminalNode EACH(int i) {
			return GetToken(PlSqlParser.EACH, i);
		}
		public ITerminalNode[] ROW() { return GetTokens(PlSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(PlSqlParser.ROW, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(PlSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timing_point_section; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiming_point_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timing_point_sectionContext timing_point_section() {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(Context, State);
		EnterRule(_localctx, 70, RULE_timing_point_section);
		try {
			State = 1581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1545; _localctx.bk = Match(BEFORE);
				State = 1546; Match(STATEMENT);
				State = 1547; Match(IS);
				State = 1548; trigger_block();
				State = 1549; Match(BEFORE);
				State = 1550; Match(STATEMENT);
				State = 1551; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1553; _localctx.bk = Match(BEFORE);
				State = 1554; Match(EACH);
				State = 1555; Match(ROW);
				State = 1556; Match(IS);
				State = 1557; trigger_block();
				State = 1558; Match(BEFORE);
				State = 1559; Match(EACH);
				State = 1560; Match(ROW);
				State = 1561; Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1563; _localctx.ak = Match(AFTER);
				State = 1564; Match(STATEMENT);
				State = 1565; Match(IS);
				State = 1566; trigger_block();
				State = 1567; Match(AFTER);
				State = 1568; Match(STATEMENT);
				State = 1569; Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1571; _localctx.ak = Match(AFTER);
				State = 1572; Match(EACH);
				State = 1573; Match(ROW);
				State = 1574; Match(IS);
				State = 1575; trigger_block();
				State = 1576; Match(AFTER);
				State = 1577; Match(EACH);
				State = 1578; Match(ROW);
				State = 1579; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_dml_eventContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode ANALYZE() { return GetToken(PlSqlParser.ANALYZE, 0); }
		public ITerminalNode ASSOCIATE() { return GetToken(PlSqlParser.ASSOCIATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(PlSqlParser.STATISTICS, 0); }
		public ITerminalNode AUDIT() { return GetToken(PlSqlParser.AUDIT, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode DISASSOCIATE() { return GetToken(PlSqlParser.DISASSOCIATE, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode GRANT() { return GetToken(PlSqlParser.GRANT, 0); }
		public ITerminalNode NOAUDIT() { return GetToken(PlSqlParser.NOAUDIT, 0); }
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(PlSqlParser.TRUNCATE, 0); }
		public ITerminalNode DDL() { return GetToken(PlSqlParser.DDL, 0); }
		public ITerminalNode STARTUP() { return GetToken(PlSqlParser.STARTUP, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(PlSqlParser.SHUTDOWN, 0); }
		public ITerminalNode DB_ROLE_CHANGE() { return GetToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public ITerminalNode LOGON() { return GetToken(PlSqlParser.LOGON, 0); }
		public ITerminalNode LOGOFF() { return GetToken(PlSqlParser.LOGOFF, 0); }
		public ITerminalNode SERVERERROR() { return GetToken(PlSqlParser.SERVERERROR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(PlSqlParser.SUSPEND, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(PlSqlParser.SCHEMA, 0); }
		public ITerminalNode FOLLOWS() { return GetToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_dml_event; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_dml_event(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_dml_eventContext non_dml_event() {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(Context, State);
		EnterRule(_localctx, 72, RULE_non_dml_event);
		try {
			State = 1609;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1583; Match(ALTER);
				}
				break;
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1584; Match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1585; Match(ASSOCIATE);
				State = 1586; Match(STATISTICS);
				}
				break;
			case AUDIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1587; Match(AUDIT);
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1588; Match(COMMENT);
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1589; Match(CREATE);
				}
				break;
			case DISASSOCIATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1590; Match(DISASSOCIATE);
				State = 1591; Match(STATISTICS);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1592; Match(DROP);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1593; Match(GRANT);
				}
				break;
			case NOAUDIT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1594; Match(NOAUDIT);
				}
				break;
			case RENAME:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1595; Match(RENAME);
				}
				break;
			case REVOKE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1596; Match(REVOKE);
				}
				break;
			case TRUNCATE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1597; Match(TRUNCATE);
				}
				break;
			case DDL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1598; Match(DDL);
				}
				break;
			case STARTUP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1599; Match(STARTUP);
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1600; Match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1601; Match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1602; Match(LOGON);
				}
				break;
			case LOGOFF:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1603; Match(LOGOFF);
				}
				break;
			case SERVERERROR:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1604; Match(SERVERERROR);
				}
				break;
			case SUSPEND:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1605; Match(SUSPEND);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1606; Match(DATABASE);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1607; Match(SCHEMA);
				}
				break;
			case FOLLOWS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1608; Match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_clauseContext : ParserRuleContext {
		public Dml_event_elementContext[] dml_event_element() {
			return GetRuleContexts<Dml_event_elementContext>();
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return GetRuleContext<Dml_event_elementContext>(i);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(PlSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return GetRuleContext<Dml_event_nested_clauseContext>(0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_clauseContext dml_event_clause() {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_dml_event_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1611; dml_event_element();
			State = 1616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1612; Match(OR);
				State = 1613; dml_event_element();
				}
				}
				State = 1618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1619; Match(ON);
			State = 1621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1620; dml_event_nested_clause();
				}
				break;
			}
			State = 1623; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_elementContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_elementContext dml_event_element() {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(Context, State);
		EnterRule(_localctx, 76, RULE_dml_event_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1625;
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF) {
				{
				State = 1626; Match(OF);
				State = 1627; column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_nested_clauseContext : ParserRuleContext {
		public ITerminalNode NESTED() { return GetToken(PlSqlParser.NESTED, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_nested_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_nested_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_nested_clauseContext dml_event_nested_clause() {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_dml_event_nested_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1630; Match(NESTED);
			State = 1631; Match(TABLE);
			State = 1632; tableview_name();
			State = 1633; Match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Referencing_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCING() { return GetToken(PlSqlParser.REFERENCING, 0); }
		public Referencing_elementContext[] referencing_element() {
			return GetRuleContexts<Referencing_elementContext>();
		}
		public Referencing_elementContext referencing_element(int i) {
			return GetRuleContext<Referencing_elementContext>(i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Referencing_clauseContext referencing_clause() {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_referencing_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635; Match(REFERENCING);
			State = 1637;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1636; referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1639;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Referencing_elementContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(PlSqlParser.NEW, 0); }
		public ITerminalNode OLD() { return GetToken(PlSqlParser.OLD, 0); }
		public ITerminalNode PARENT() { return GetToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencing_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencing_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Referencing_elementContext referencing_element() {
		Referencing_elementContext _localctx = new Referencing_elementContext(Context, State);
		EnterRule(_localctx, 82, RULE_referencing_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1641;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (NEW - 335)) | (1L << (OLD - 335)) | (1L << (PARENT - 335)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1642; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode VALIDATE() { return GetToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(Context, State);
		EnterRule(_localctx, 84, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644; Match(DROP);
			State = 1645; Match(TYPE);
			State = 1647;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				{
				State = 1646; Match(BODY);
				}
				break;
			}
			State = 1649; type_name();
			State = 1651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				State = 1650;
				_la = TokenStream.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1653; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_typeContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return GetRuleContext<Compile_type_clauseContext>(0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return GetRuleContext<Replace_type_clauseContext>(0);
		}
		public Alter_method_specContext alter_method_spec() {
			return GetRuleContext<Alter_method_specContext>(0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return GetRuleContext<Alter_collection_clausesContext>(0);
		}
		public Modifier_clauseContext modifier_clause() {
			return GetRuleContext<Modifier_clauseContext>(0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return GetRuleContext<Dependent_handling_clauseContext>(0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_typeContext alter_type() {
		Alter_typeContext _localctx = new Alter_typeContext(Context, State);
		EnterRule(_localctx, 86, RULE_alter_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655; Match(ALTER);
			State = 1656; Match(TYPE);
			State = 1657; type_name();
			State = 1663;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPILE:
				{
				State = 1658; compile_type_clause();
				}
				break;
			case REPLACE:
				{
				State = 1659; replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				State = 1660; alter_method_spec();
				}
				break;
			case MODIFY:
				{
				State = 1661; alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				State = 1662; modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1666;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				State = 1665; dependent_handling_clause();
				}
			}

			State = 1668; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compile_type_clauseContext : ParserRuleContext {
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(PlSqlParser.SPECIFICATION, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compile_type_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompile_type_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compile_type_clauseContext compile_type_clause() {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1670; Match(COMPILE);
			State = 1672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				State = 1671; Match(DEBUG);
				}
				break;
			}
			State = 1675;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1674;
				_la = TokenStream.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1680;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1677; compiler_parameters_clause();
					}
					} 
				}
				State = 1682;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			}
			State = 1685;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1683; Match(REUSE);
				State = 1684; Match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replace_type_clauseContext : ParserRuleContext {
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public Object_member_specContext[] object_member_spec() {
			return GetRuleContexts<Object_member_specContext>();
		}
		public Object_member_specContext object_member_spec(int i) {
			return GetRuleContext<Object_member_specContext>(i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replace_type_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplace_type_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Replace_type_clauseContext replace_type_clause() {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_replace_type_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1687; Match(REPLACE);
			State = 1689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1688; invoker_rights_clause();
				}
			}

			State = 1691; Match(AS);
			State = 1692; Match(OBJECT);
			State = 1693; Match(LEFT_PAREN);
			State = 1694; object_member_spec();
			State = 1699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1695; Match(COMMA);
				State = 1696; object_member_spec();
				}
				}
				State = 1701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1702; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_method_specContext : ParserRuleContext {
		public Alter_method_elementContext[] alter_method_element() {
			return GetRuleContexts<Alter_method_elementContext>();
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return GetRuleContext<Alter_method_elementContext>(i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_method_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_method_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_method_specContext alter_method_spec() {
		Alter_method_specContext _localctx = new Alter_method_specContext(Context, State);
		EnterRule(_localctx, 92, RULE_alter_method_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1704; alter_method_element();
			State = 1709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1705; Match(COMMA);
				State = 1706; alter_method_element();
				}
				}
				State = 1711;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_method_elementContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return GetRuleContext<Map_order_function_specContext>(0);
		}
		public Subprogram_specContext subprogram_spec() {
			return GetRuleContext<Subprogram_specContext>(0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_method_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_method_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_method_elementContext alter_method_element() {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(Context, State);
		EnterRule(_localctx, 94, RULE_alter_method_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1712;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAP:
			case ORDER:
				{
				State = 1713; map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				State = 1714; subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_attribute_definitionContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(PlSqlParser.ATTRIBUTE, 0); }
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode MODIFY() { return GetToken(PlSqlParser.MODIFY, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public Attribute_definitionContext[] attribute_definition() {
			return GetRuleContexts<Attribute_definitionContext>();
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return GetRuleContext<Attribute_definitionContext>(i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_attribute_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_attribute_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_attribute_definitionContext alter_attribute_definition() {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_alter_attribute_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1718; Match(ATTRIBUTE);
			State = 1731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 1719; attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				State = 1720; Match(LEFT_PAREN);
				State = 1721; attribute_definition();
				State = 1726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1722; Match(COMMA);
					State = 1723; attribute_definition();
					}
					}
					State = 1728;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1729; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_definitionContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_definitionContext attribute_definition() {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_attribute_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733; attribute_name();
			State = 1735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==REGULAR_ID) {
				{
				State = 1734; type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_collection_clausesContext : ParserRuleContext {
		public ITerminalNode MODIFY() { return GetToken(PlSqlParser.MODIFY, 0); }
		public ITerminalNode LIMIT() { return GetToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ELEMENT() { return GetToken(PlSqlParser.ELEMENT, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_collection_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_collection_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_collection_clausesContext alter_collection_clauses() {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(Context, State);
		EnterRule(_localctx, 100, RULE_alter_collection_clauses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1737; Match(MODIFY);
			State = 1743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				{
				State = 1738; Match(LIMIT);
				State = 1739; expression();
				}
				break;
			case ELEMENT:
				{
				State = 1740; Match(ELEMENT);
				State = 1741; Match(TYPE);
				State = 1742; type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dependent_handling_clauseContext : ParserRuleContext {
		public ITerminalNode INVALIDATE() { return GetToken(PlSqlParser.INVALIDATE, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode CONVERT() { return GetToken(PlSqlParser.CONVERT, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode SUBSTITUTABLE() { return GetToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public ITerminalNode INCLUDING() { return GetToken(PlSqlParser.INCLUDING, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode DATA() { return GetToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return GetRuleContext<Dependent_exceptions_partContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent_handling_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent_handling_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dependent_handling_clauseContext dependent_handling_clause() {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_dependent_handling_clause);
		int _la;
		try {
			State = 1761;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INVALIDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1745; Match(INVALIDATE);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1746; Match(CASCADE);
				State = 1756;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONVERT:
					{
					State = 1747; Match(CONVERT);
					State = 1748; Match(TO);
					State = 1749; Match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					State = 1751;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT) {
						{
						State = 1750; Match(NOT);
						}
					}

					State = 1753; Match(INCLUDING);
					State = 1754; Match(TABLE);
					State = 1755; Match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				State = 1759;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					State = 1758; dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dependent_exceptions_partContext : ParserRuleContext {
		public ITerminalNode EXCEPTIONS() { return GetToken(PlSqlParser.EXCEPTIONS, 0); }
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent_exceptions_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent_exceptions_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dependent_exceptions_partContext dependent_exceptions_part() {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(Context, State);
		EnterRule(_localctx, 104, RULE_dependent_exceptions_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE) {
				{
				State = 1763; Match(FORCE);
				}
			}

			State = 1766; Match(EXCEPTIONS);
			State = 1767; Match(INTO);
			State = 1768; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return GetRuleContext<Type_definitionContext>(0);
		}
		public Type_bodyContext type_body() {
			return GetRuleContext<Type_bodyContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(Context, State);
		EnterRule(_localctx, 106, RULE_create_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; Match(CREATE);
			State = 1773;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1771; Match(OR);
				State = 1772; Match(REPLACE);
				}
			}

			State = 1775; Match(TYPE);
			State = 1778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				{
				State = 1776; type_definition();
				}
				break;
			case 2:
				{
				State = 1777; type_body();
				}
				break;
			}
			State = 1780; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OID() { return GetToken(PlSqlParser.OID, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return GetRuleContext<Object_type_defContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1782; type_name();
			State = 1785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OID) {
				{
				State = 1783; Match(OID);
				State = 1784; Match(CHAR_STRING);
				}
			}

			State = 1788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				State = 1787; object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_defContext : ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return GetRuleContext<Object_as_partContext>(0);
		}
		public Object_under_partContext object_under_part() {
			return GetRuleContext<Object_under_partContext>(0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return GetRuleContext<Sqlj_object_typeContext>(0);
		}
		public Object_member_specContext[] object_member_spec() {
			return GetRuleContexts<Object_member_specContext>();
		}
		public Object_member_specContext object_member_spec(int i) {
			return GetRuleContext<Object_member_specContext>(i);
		}
		public Modifier_clauseContext[] modifier_clause() {
			return GetRuleContexts<Modifier_clauseContext>();
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return GetRuleContext<Modifier_clauseContext>(i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_defContext object_type_def() {
		Object_type_defContext _localctx = new Object_type_defContext(Context, State);
		EnterRule(_localctx, 110, RULE_object_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1790; invoker_rights_clause();
				}
			}

			State = 1795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case IS:
				{
				State = 1793; object_as_part();
				}
				break;
			case UNDER:
				{
				State = 1794; object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1798;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 1797; sqlj_object_type();
				}
			}

			State = 1811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1800; Match(LEFT_PAREN);
				State = 1801; object_member_spec();
				State = 1806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1802; Match(COMMA);
					State = 1803; object_member_spec();
					}
					}
					State = 1808;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1809; Match(RIGHT_PAREN);
				}
			}

			State = 1816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				State = 1813; modifier_clause();
				}
				}
				State = 1818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_as_partContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return GetRuleContext<Varray_type_defContext>(0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return GetRuleContext<Nested_table_type_defContext>(0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_as_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_as_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_as_partContext object_as_part() {
		Object_as_partContext _localctx = new Object_as_partContext(Context, State);
		EnterRule(_localctx, 112, RULE_object_as_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1819;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1823;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT:
				{
				State = 1820; Match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				State = 1821; varray_type_def();
				}
				break;
			case TABLE:
				{
				State = 1822; nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_under_partContext : ParserRuleContext {
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_under_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_under_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_under_partContext object_under_part() {
		Object_under_partContext _localctx = new Object_under_partContext(Context, State);
		EnterRule(_localctx, 114, RULE_object_under_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1825; Match(UNDER);
			State = 1826; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_table_type_defContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_table_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_table_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_table_type_defContext nested_table_type_def() {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(Context, State);
		EnterRule(_localctx, 116, RULE_nested_table_type_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828; Match(TABLE);
			State = 1829; Match(OF);
			State = 1830; type_spec();
			State = 1833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				{
				State = 1831; Match(NOT);
				State = 1832; Match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlj_object_typeContext : ParserRuleContext {
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LANGUAGE() { return GetToken(PlSqlParser.LANGUAGE, 0); }
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode SQLDATA() { return GetToken(PlSqlParser.SQLDATA, 0); }
		public ITerminalNode CUSTOMDATUM() { return GetToken(PlSqlParser.CUSTOMDATUM, 0); }
		public ITerminalNode ORADATA() { return GetToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlj_object_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlj_object_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlj_object_typeContext sqlj_object_type() {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(Context, State);
		EnterRule(_localctx, 118, RULE_sqlj_object_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835; Match(EXTERNAL);
			State = 1836; Match(NAME);
			State = 1837; expression();
			State = 1838; Match(LANGUAGE);
			State = 1839; Match(JAVA);
			State = 1840; Match(USING);
			State = 1841;
			_la = TokenStream.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bodyContext : ParserRuleContext {
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Type_body_elementsContext[] type_body_elements() {
			return GetRuleContexts<Type_body_elementsContext>();
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return GetRuleContext<Type_body_elementsContext>(i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_bodyContext type_body() {
		Type_bodyContext _localctx = new Type_bodyContext(Context, State);
		EnterRule(_localctx, 120, RULE_type_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1843; Match(BODY);
			State = 1844; type_name();
			State = 1845;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1846; type_body_elements();
				}
				}
				State = 1849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			State = 1851; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_body_elementsContext : ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return GetRuleContext<Map_order_func_declarationContext>(0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return GetRuleContext<Subprog_decl_in_typeContext>(0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_body_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_body_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_body_elementsContext type_body_elements() {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(Context, State);
		EnterRule(_localctx, 122, RULE_type_body_elements);
		try {
			State = 1855;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAP:
			case ORDER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1853; map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1854; subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_order_func_declarationContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return GetRuleContext<Func_decl_in_typeContext>(0);
		}
		public ITerminalNode MAP() { return GetToken(PlSqlParser.MAP, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_order_func_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_order_func_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_order_func_declarationContext map_order_func_declaration() {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_map_order_func_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			_la = TokenStream.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1858; Match(MEMBER);
			State = 1859; func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprog_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return GetRuleContext<Proc_decl_in_typeContext>(0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return GetRuleContext<Func_decl_in_typeContext>(0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprog_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprog_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprog_decl_in_typeContext subprog_decl_in_type() {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 126, RULE_subprog_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1861;
			_la = TokenStream.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				{
				State = 1862; proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				State = 1863; func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				State = 1864; constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proc_decl_in_typeContext proc_decl_in_type() {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 128, RULE_proc_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1867; Match(PROCEDURE);
			State = 1868; procedure_name();
			State = 1869; Match(LEFT_PAREN);
			State = 1870; type_elements_parameter();
			State = 1875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1871; Match(COMMA);
				State = 1872; type_elements_parameter();
				}
				}
				State = 1877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1878; Match(RIGHT_PAREN);
			State = 1879;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1890;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
			case 1:
				{
				State = 1880; call_spec();
				}
				break;
			case 2:
				{
				State = 1882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1881; Match(DECLARE);
					}
				}

				State = 1885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 1884; seq_of_declare_specs();
					}
				}

				State = 1887; body();
				State = 1888; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_decl_in_typeContext func_decl_in_type() {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 130, RULE_func_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1892; Match(FUNCTION);
			State = 1893; function_name();
			State = 1905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1894; Match(LEFT_PAREN);
				State = 1895; type_elements_parameter();
				State = 1900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1896; Match(COMMA);
					State = 1897; type_elements_parameter();
					}
					}
					State = 1902;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1903; Match(RIGHT_PAREN);
				}
			}

			State = 1907; Match(RETURN);
			State = 1908; type_spec();
			State = 1909;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1920;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1910; call_spec();
				}
				break;
			case 2:
				{
				State = 1912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1911; Match(DECLARE);
					}
				}

				State = 1915;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 1914; seq_of_declare_specs();
					}
				}

				State = 1917; body();
				State = 1918; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(PlSqlParser.CONSTRUCTOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode[] SELF() { return GetTokens(PlSqlParser.SELF); }
		public ITerminalNode SELF(int i) {
			return GetToken(PlSqlParser.SELF, i);
		}
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL) {
				{
				State = 1922; Match(FINAL);
				}
			}

			State = 1926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSTANTIABLE) {
				{
				State = 1925; Match(INSTANTIABLE);
				}
			}

			State = 1928; Match(CONSTRUCTOR);
			State = 1929; Match(FUNCTION);
			State = 1930; type_spec();
			State = 1948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1931; Match(LEFT_PAREN);
				{
				State = 1932; Match(SELF);
				State = 1933; Match(IN);
				State = 1934; Match(OUT);
				State = 1935; type_spec();
				State = 1936; Match(COMMA);
				}
				State = 1938; type_elements_parameter();
				State = 1943;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1939; Match(COMMA);
					State = 1940; type_elements_parameter();
					}
					}
					State = 1945;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1946; Match(RIGHT_PAREN);
				}
			}

			State = 1950; Match(RETURN);
			State = 1951; Match(SELF);
			State = 1952; Match(AS);
			State = 1953; Match(RESULT);
			State = 1954;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1965;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				State = 1955; call_spec();
				}
				break;
			case 2:
				{
				State = 1957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1956; Match(DECLARE);
					}
				}

				State = 1960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 1959; seq_of_declare_specs();
					}
				}

				State = 1962; body();
				State = 1963; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modifier_clauseContext : ParserRuleContext {
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode OVERRIDING() { return GetToken(PlSqlParser.OVERRIDING, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modifier_clauseContext modifier_clause() {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(Context, State);
		EnterRule(_localctx, 134, RULE_modifier_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 1967; Match(NOT);
				}
			}

			State = 1970;
			_la = TokenStream.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_member_specContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return GetRuleContext<Sqlj_object_type_attrContext>(0);
		}
		public Element_specContext element_spec() {
			return GetRuleContext<Element_specContext>(0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_member_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_member_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_member_specContext object_member_spec() {
		Object_member_specContext _localctx = new Object_member_specContext(Context, State);
		EnterRule(_localctx, 136, RULE_object_member_spec);
		int _la;
		try {
			State = 1978;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1972; identifier();
				State = 1973; type_spec();
				State = 1975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTERNAL) {
					{
					State = 1974; sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1977; element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlj_object_type_attrContext : ParserRuleContext {
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlj_object_type_attr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlj_object_type_attr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlj_object_type_attrContext sqlj_object_type_attr() {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(Context, State);
		EnterRule(_localctx, 138, RULE_sqlj_object_type_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1980; Match(EXTERNAL);
			State = 1981; Match(NAME);
			State = 1982; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_specContext : ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return GetRuleContext<Modifier_clauseContext>(0);
		}
		public Element_spec_optionsContext[] element_spec_options() {
			return GetRuleContexts<Element_spec_optionsContext>();
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return GetRuleContext<Element_spec_optionsContext>(i);
		}
		public Pragma_clauseContext pragma_clause() {
			return GetRuleContext<Pragma_clauseContext>(0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_specContext element_spec() {
		Element_specContext _localctx = new Element_specContext(Context, State);
		EnterRule(_localctx, 140, RULE_element_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1984; modifier_clause();
				}
				break;
			}
			State = 1988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1987; element_spec_options();
				}
				}
				State = 1990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			State = 1994;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				{
				State = 1992; Match(COMMA);
				State = 1993; pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_spec_optionsContext : ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return GetRuleContext<Subprogram_specContext>(0);
		}
		public Constructor_specContext constructor_spec() {
			return GetRuleContext<Constructor_specContext>(0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return GetRuleContext<Map_order_function_specContext>(0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_spec_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_spec_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_spec_optionsContext element_spec_options() {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(Context, State);
		EnterRule(_localctx, 142, RULE_element_spec_options);
		try {
			State = 1999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEMBER:
			case STATIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1996; subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1997; constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1998; map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_specContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return GetRuleContext<Type_procedure_specContext>(0);
		}
		public Type_function_specContext type_function_spec() {
			return GetRuleContext<Type_function_specContext>(0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_specContext subprogram_spec() {
		Subprogram_specContext _localctx = new Subprogram_specContext(Context, State);
		EnterRule(_localctx, 144, RULE_subprogram_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2001;
			_la = TokenStream.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				{
				State = 2002; type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				State = 2003; type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_procedure_specContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_procedure_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_procedure_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_procedure_specContext type_procedure_spec() {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(Context, State);
		EnterRule(_localctx, 146, RULE_type_procedure_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2006; Match(PROCEDURE);
			State = 2007; procedure_name();
			State = 2008; Match(LEFT_PAREN);
			State = 2009; type_elements_parameter();
			State = 2014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2010; Match(COMMA);
				State = 2011; type_elements_parameter();
				}
				}
				State = 2016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2017; Match(RIGHT_PAREN);
			State = 2020;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IS) {
				{
				State = 2018;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2019; call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_function_specContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(PlSqlParser.SELF, 0); }
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode VARIABLE() { return GetToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_function_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_function_specContext type_function_spec() {
		Type_function_specContext _localctx = new Type_function_specContext(Context, State);
		EnterRule(_localctx, 148, RULE_type_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022; Match(FUNCTION);
			State = 2023; function_name();
			State = 2035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2024; Match(LEFT_PAREN);
				State = 2025; type_elements_parameter();
				State = 2030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2026; Match(COMMA);
					State = 2027; type_elements_parameter();
					}
					}
					State = 2032;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2033; Match(RIGHT_PAREN);
				}
			}

			State = 2037; Match(RETURN);
			State = 2042;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 2038; type_spec();
				}
				break;
			case 2:
				{
				State = 2039; Match(SELF);
				State = 2040; Match(AS);
				State = 2041; Match(RESULT);
				}
				break;
			}
			State = 2052;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case IS:
				{
				State = 2044;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2045; call_spec();
				}
				break;
			case EXTERNAL:
				{
				State = 2046; Match(EXTERNAL);
				State = 2048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 2047; Match(VARIABLE);
					}
				}

				State = 2050; Match(NAME);
				State = 2051; expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_specContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(PlSqlParser.CONSTRUCTOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode[] SELF() { return GetTokens(PlSqlParser.SELF); }
		public ITerminalNode SELF(int i) {
			return GetToken(PlSqlParser.SELF, i);
		}
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_specContext constructor_spec() {
		Constructor_specContext _localctx = new Constructor_specContext(Context, State);
		EnterRule(_localctx, 150, RULE_constructor_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL) {
				{
				State = 2054; Match(FINAL);
				}
			}

			State = 2058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSTANTIABLE) {
				{
				State = 2057; Match(INSTANTIABLE);
				}
			}

			State = 2060; Match(CONSTRUCTOR);
			State = 2061; Match(FUNCTION);
			State = 2062; type_spec();
			State = 2080;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2063; Match(LEFT_PAREN);
				{
				State = 2064; Match(SELF);
				State = 2065; Match(IN);
				State = 2066; Match(OUT);
				State = 2067; type_spec();
				State = 2068; Match(COMMA);
				}
				State = 2070; type_elements_parameter();
				State = 2075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2071; Match(COMMA);
					State = 2072; type_elements_parameter();
					}
					}
					State = 2077;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2078; Match(RIGHT_PAREN);
				}
			}

			State = 2082; Match(RETURN);
			State = 2083; Match(SELF);
			State = 2084; Match(AS);
			State = 2085; Match(RESULT);
			State = 2088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IS) {
				{
				State = 2086;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2087; call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_order_function_specContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return GetRuleContext<Type_function_specContext>(0);
		}
		public ITerminalNode MAP() { return GetToken(PlSqlParser.MAP, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_order_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_order_function_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_order_function_specContext map_order_function_spec() {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(Context, State);
		EnterRule(_localctx, 152, RULE_map_order_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2090;
			_la = TokenStream.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2091; Match(MEMBER);
			State = 2092; type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_clauseContext : ParserRuleContext {
		public ITerminalNode PRAGMA() { return GetToken(PlSqlParser.PRAGMA, 0); }
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public Pragma_elementsContext[] pragma_elements() {
			return GetRuleContexts<Pragma_elementsContext>();
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return GetRuleContext<Pragma_elementsContext>(i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_clauseContext pragma_clause() {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(Context, State);
		EnterRule(_localctx, 154, RULE_pragma_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2094; Match(PRAGMA);
			State = 2095; Match(RESTRICT_REFERENCES);
			State = 2096; Match(LEFT_PAREN);
			State = 2097; pragma_elements();
			State = 2102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2098; Match(COMMA);
				State = 2099; pragma_elements();
				}
				}
				State = 2104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2105; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_elementsContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_elementsContext pragma_elements() {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(Context, State);
		EnterRule(_localctx, 156, RULE_pragma_elements);
		try {
			State = 2109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2107; identifier();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2108; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_elements_parameterContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_elements_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_elements_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_elements_parameterContext type_elements_parameter() {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(Context, State);
		EnterRule(_localctx, 158, RULE_type_elements_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111; parameter_name();
			State = 2112; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(Context, State);
		EnterRule(_localctx, 160, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2114; Match(DROP);
			State = 2115; Match(SEQUENCE);
			State = 2116; sequence_name();
			State = 2117; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Sequence_specContext[] sequence_spec() {
			return GetRuleContexts<Sequence_specContext>();
		}
		public Sequence_specContext sequence_spec(int i) {
			return GetRuleContext<Sequence_specContext>(i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(Context, State);
		EnterRule(_localctx, 162, RULE_alter_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119; Match(ALTER);
			State = 2120; Match(SEQUENCE);
			State = 2121; sequence_name();
			State = 2123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2122; sequence_spec();
				}
				}
				State = 2125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (MAXVALUE - 306)) | (1L << (MINVALUE - 306)) | (1L << (NOCACHE - 306)) | (1L << (NOCYCLE - 306)) | (1L << (NOMAXVALUE - 306)) | (1L << (NOMINVALUE - 306)) | (1L << (NOORDER - 306)))) != 0) || _la==ORDER );
			State = 2127; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Sequence_start_clauseContext[] sequence_start_clause() {
			return GetRuleContexts<Sequence_start_clauseContext>();
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return GetRuleContext<Sequence_start_clauseContext>(i);
		}
		public Sequence_specContext[] sequence_spec() {
			return GetRuleContexts<Sequence_specContext>();
		}
		public Sequence_specContext sequence_spec(int i) {
			return GetRuleContext<Sequence_specContext>(i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(Context, State);
		EnterRule(_localctx, 164, RULE_create_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2129; Match(CREATE);
			State = 2130; Match(SEQUENCE);
			State = 2131; sequence_name();
			State = 2136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (MAXVALUE - 306)) | (1L << (MINVALUE - 306)) | (1L << (NOCACHE - 306)) | (1L << (NOCYCLE - 306)) | (1L << (NOMAXVALUE - 306)) | (1L << (NOMINVALUE - 306)) | (1L << (NOORDER - 306)))) != 0) || _la==ORDER || _la==START) {
				{
				State = 2134;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case START:
					{
					State = 2132; sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					State = 2133; sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2139; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_specContext : ParserRuleContext {
		public ITerminalNode INCREMENT() { return GetToken(PlSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode NOMAXVALUE() { return GetToken(PlSqlParser.NOMAXVALUE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(PlSqlParser.MINVALUE, 0); }
		public ITerminalNode NOMINVALUE() { return GetToken(PlSqlParser.NOMINVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(PlSqlParser.CYCLE, 0); }
		public ITerminalNode NOCYCLE() { return GetToken(PlSqlParser.NOCYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(PlSqlParser.CACHE, 0); }
		public ITerminalNode NOCACHE() { return GetToken(PlSqlParser.NOCACHE, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode NOORDER() { return GetToken(PlSqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_specContext sequence_spec() {
		Sequence_specContext _localctx = new Sequence_specContext(Context, State);
		EnterRule(_localctx, 166, RULE_sequence_spec);
		try {
			State = 2157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2141; Match(INCREMENT);
				State = 2142; Match(BY);
				State = 2143; Match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2144; Match(MAXVALUE);
				State = 2145; Match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2146; Match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2147; Match(MINVALUE);
				State = 2148; Match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2149; Match(NOMINVALUE);
				}
				break;
			case CYCLE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2150; Match(CYCLE);
				}
				break;
			case NOCYCLE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2151; Match(NOCYCLE);
				}
				break;
			case CACHE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2152; Match(CACHE);
				State = 2153; Match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2154; Match(NOCACHE);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2155; Match(ORDER);
				}
				break;
			case NOORDER:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2156; Match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_start_clauseContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(PlSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_start_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_start_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_start_clauseContext sequence_start_clause() {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(Context, State);
		EnterRule(_localctx, 168, RULE_sequence_start_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2159; Match(START);
			State = 2160; Match(WITH);
			State = 2161; Match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public ITerminalNode COMPUTE() { return GetToken(PlSqlParser.COMPUTE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(PlSqlParser.STATISTICS, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 170, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2163; Match(CREATE);
			State = 2165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 2164; Match(UNIQUE);
				}
			}

			State = 2167; Match(INDEX);
			State = 2168; index_name();
			State = 2169; Match(ON);
			State = 2170; tableview_name();
			State = 2171; paren_column_list();
			State = 2174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 2172; Match(TABLESPACE);
				State = 2173; Match(REGULAR_ID);
				}
			}

			State = 2178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPUTE) {
				{
				State = 2176; Match(COMPUTE);
				State = 2177; Match(STATISTICS);
				}
			}

			State = 2180; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_indexContext : ParserRuleContext {
		public Index_nameContext old_index_name;
		public Index_nameContext new_index_name;
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public Index_nameContext[] index_name() {
			return GetRuleContexts<Index_nameContext>();
		}
		public Index_nameContext index_name(int i) {
			return GetRuleContext<Index_nameContext>(i);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_indexContext alter_index() {
		Alter_indexContext _localctx = new Alter_indexContext(Context, State);
		EnterRule(_localctx, 172, RULE_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2182; Match(ALTER);
			State = 2183; Match(INDEX);
			State = 2184; _localctx.old_index_name = index_name();
			State = 2185; Match(RENAME);
			State = 2186; Match(TO);
			State = 2187; _localctx.new_index_name = index_name();
			State = 2188; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public User_object_nameContext user_object_name() {
			return GetRuleContext<User_object_nameContext>(0);
		}
		public Identified_byContext[] identified_by() {
			return GetRuleContexts<Identified_byContext>();
		}
		public Identified_byContext identified_by(int i) {
			return GetRuleContext<Identified_byContext>(i);
		}
		public Identified_other_clauseContext[] identified_other_clause() {
			return GetRuleContexts<Identified_other_clauseContext>();
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return GetRuleContext<Identified_other_clauseContext>(i);
		}
		public User_tablespace_clauseContext[] user_tablespace_clause() {
			return GetRuleContexts<User_tablespace_clauseContext>();
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return GetRuleContext<User_tablespace_clauseContext>(i);
		}
		public Quota_clauseContext[] quota_clause() {
			return GetRuleContexts<Quota_clauseContext>();
		}
		public Quota_clauseContext quota_clause(int i) {
			return GetRuleContext<Quota_clauseContext>(i);
		}
		public Profile_clauseContext[] profile_clause() {
			return GetRuleContexts<Profile_clauseContext>();
		}
		public Profile_clauseContext profile_clause(int i) {
			return GetRuleContext<Profile_clauseContext>(i);
		}
		public Password_expire_clauseContext[] password_expire_clause() {
			return GetRuleContexts<Password_expire_clauseContext>();
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return GetRuleContext<Password_expire_clauseContext>(i);
		}
		public User_lock_clauseContext[] user_lock_clause() {
			return GetRuleContexts<User_lock_clauseContext>();
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return GetRuleContext<User_lock_clauseContext>(i);
		}
		public User_editions_clauseContext[] user_editions_clause() {
			return GetRuleContexts<User_editions_clauseContext>();
		}
		public User_editions_clauseContext user_editions_clause(int i) {
			return GetRuleContext<User_editions_clauseContext>(i);
		}
		public Container_clauseContext[] container_clause() {
			return GetRuleContexts<Container_clauseContext>();
		}
		public Container_clauseContext container_clause(int i) {
			return GetRuleContext<Container_clauseContext>(i);
		}
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(Context, State);
		EnterRule(_localctx, 174, RULE_create_user);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190; Match(CREATE);
			State = 2191; Match(USER);
			State = 2192; user_object_name();
			State = 2202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2202;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
				case 1:
					{
					State = 2193; identified_by();
					}
					break;
				case 2:
					{
					State = 2194; identified_other_clause();
					}
					break;
				case 3:
					{
					State = 2195; user_tablespace_clause();
					}
					break;
				case 4:
					{
					State = 2196; quota_clause();
					}
					break;
				case 5:
					{
					State = 2197; profile_clause();
					}
					break;
				case 6:
					{
					State = 2198; password_expire_clause();
					}
					break;
				case 7:
					{
					State = 2199; user_lock_clause();
					}
					break;
				case 8:
					{
					State = 2200; user_editions_clause();
					}
					break;
				case 9:
					{
					State = 2201; container_clause();
					}
					break;
				}
				}
				State = 2204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ACCOUNT || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (PASSWORD - 399)) | (1L << (PROFILE - 399)) | (1L << (QUOTA - 399)))) != 0) || _la==TEMPORARY );
			State = 2206; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public User_object_nameContext[] user_object_name() {
			return GetRuleContexts<User_object_nameContext>();
		}
		public User_object_nameContext user_object_name(int i) {
			return GetRuleContext<User_object_nameContext>(i);
		}
		public Alter_identified_byContext[] alter_identified_by() {
			return GetRuleContexts<Alter_identified_byContext>();
		}
		public Alter_identified_byContext alter_identified_by(int i) {
			return GetRuleContext<Alter_identified_byContext>(i);
		}
		public Identified_other_clauseContext[] identified_other_clause() {
			return GetRuleContexts<Identified_other_clauseContext>();
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return GetRuleContext<Identified_other_clauseContext>(i);
		}
		public User_tablespace_clauseContext[] user_tablespace_clause() {
			return GetRuleContexts<User_tablespace_clauseContext>();
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return GetRuleContext<User_tablespace_clauseContext>(i);
		}
		public Quota_clauseContext[] quota_clause() {
			return GetRuleContexts<Quota_clauseContext>();
		}
		public Quota_clauseContext quota_clause(int i) {
			return GetRuleContext<Quota_clauseContext>(i);
		}
		public Profile_clauseContext[] profile_clause() {
			return GetRuleContexts<Profile_clauseContext>();
		}
		public Profile_clauseContext profile_clause(int i) {
			return GetRuleContext<Profile_clauseContext>(i);
		}
		public User_default_role_clauseContext[] user_default_role_clause() {
			return GetRuleContexts<User_default_role_clauseContext>();
		}
		public User_default_role_clauseContext user_default_role_clause(int i) {
			return GetRuleContext<User_default_role_clauseContext>(i);
		}
		public Password_expire_clauseContext[] password_expire_clause() {
			return GetRuleContexts<Password_expire_clauseContext>();
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return GetRuleContext<Password_expire_clauseContext>(i);
		}
		public User_lock_clauseContext[] user_lock_clause() {
			return GetRuleContexts<User_lock_clauseContext>();
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return GetRuleContext<User_lock_clauseContext>(i);
		}
		public Alter_user_editions_clauseContext[] alter_user_editions_clause() {
			return GetRuleContexts<Alter_user_editions_clauseContext>();
		}
		public Alter_user_editions_clauseContext alter_user_editions_clause(int i) {
			return GetRuleContext<Alter_user_editions_clauseContext>(i);
		}
		public Container_clauseContext[] container_clause() {
			return GetRuleContexts<Container_clauseContext>();
		}
		public Container_clauseContext container_clause(int i) {
			return GetRuleContext<Container_clauseContext>(i);
		}
		public Container_data_clauseContext[] container_data_clause() {
			return GetRuleContexts<Container_data_clauseContext>();
		}
		public Container_data_clauseContext container_data_clause(int i) {
			return GetRuleContext<Container_data_clauseContext>(i);
		}
		public Proxy_clauseContext proxy_clause() {
			return GetRuleContext<Proxy_clauseContext>(0);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(Context, State);
		EnterRule(_localctx, 176, RULE_alter_user);
		int _la;
		try {
			int _alt;
			State = 2239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2208; Match(ALTER);
				State = 2209; Match(USER);
				State = 2210; user_object_name();
				State = 2222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2222;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
					case 1:
						{
						State = 2211; alter_identified_by();
						}
						break;
					case 2:
						{
						State = 2212; identified_other_clause();
						}
						break;
					case 3:
						{
						State = 2213; user_tablespace_clause();
						}
						break;
					case 4:
						{
						State = 2214; quota_clause();
						}
						break;
					case 5:
						{
						State = 2215; profile_clause();
						}
						break;
					case 6:
						{
						State = 2216; user_default_role_clause();
						}
						break;
					case 7:
						{
						State = 2217; password_expire_clause();
						}
						break;
					case 8:
						{
						State = 2218; user_lock_clause();
						}
						break;
					case 9:
						{
						State = 2219; alter_user_editions_clause();
						}
						break;
					case 10:
						{
						State = 2220; container_clause();
						}
						break;
					case 11:
						{
						State = 2221; container_data_clause();
						}
						break;
					}
					}
					State = 2224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ACCOUNT || _la==ADD || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (PASSWORD - 399)) | (1L << (PROFILE - 399)) | (1L << (QUOTA - 399)) | (1L << (REMOVE - 399)))) != 0) || _la==SET || _la==TEMPORARY );
				State = 2226; Match(SEMICOLON);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2232;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2229;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2228; Match(COMMA);
							}
						}

						State = 2231; user_object_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2234;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2236; proxy_clause();
				State = 2237; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identified_byContext : ParserRuleContext {
		public Identified_byContext identified_by() {
			return GetRuleContext<Identified_byContext>(0);
		}
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Alter_identified_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identified_by; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_identified_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identified_byContext alter_identified_by() {
		Alter_identified_byContext _localctx = new Alter_identified_byContext(Context, State);
		EnterRule(_localctx, 178, RULE_alter_identified_by);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2241; identified_by();
			State = 2244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPLACE) {
				{
				State = 2242; Match(REPLACE);
				State = 2243; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identified_byContext : ParserRuleContext {
		public ITerminalNode IDENTIFIED() { return GetToken(PlSqlParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Identified_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identified_by; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentified_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identified_byContext identified_by() {
		Identified_byContext _localctx = new Identified_byContext(Context, State);
		EnterRule(_localctx, 180, RULE_identified_by);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2246; Match(IDENTIFIED);
			State = 2247; Match(BY);
			State = 2248; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identified_other_clauseContext : ParserRuleContext {
		public ITerminalNode IDENTIFIED() { return GetToken(PlSqlParser.IDENTIFIED, 0); }
		public ITerminalNode EXTERNALLY() { return GetToken(PlSqlParser.EXTERNALLY, 0); }
		public ITerminalNode GLOBALLY() { return GetToken(PlSqlParser.GLOBALLY, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Identified_other_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identified_other_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentified_other_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identified_other_clauseContext identified_other_clause() {
		Identified_other_clauseContext _localctx = new Identified_other_clauseContext(Context, State);
		EnterRule(_localctx, 182, RULE_identified_other_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2250; Match(IDENTIFIED);
			State = 2251;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTERNALLY || _la==GLOBALLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2252; Match(AS);
				State = 2253; @string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public User_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_tablespace_clauseContext user_tablespace_clause() {
		User_tablespace_clauseContext _localctx = new User_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_user_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2256;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==TEMPORARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2257; Match(TABLESPACE);
			State = 2258; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quota_clauseContext : ParserRuleContext {
		public ITerminalNode QUOTA() { return GetToken(PlSqlParser.QUOTA, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public Quota_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quota_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuota_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quota_clauseContext quota_clause() {
		Quota_clauseContext _localctx = new Quota_clauseContext(Context, State);
		EnterRule(_localctx, 186, RULE_quota_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2260; Match(QUOTA);
			State = 2263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSIGNED_INTEGER:
				{
				State = 2261; size_clause();
				}
				break;
			case UNLIMITED:
				{
				State = 2262; Match(UNLIMITED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2265; Match(ON);
			State = 2266; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Profile_clauseContext : ParserRuleContext {
		public ITerminalNode PROFILE() { return GetToken(PlSqlParser.PROFILE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Profile_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profile_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfile_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Profile_clauseContext profile_clause() {
		Profile_clauseContext _localctx = new Profile_clauseContext(Context, State);
		EnterRule(_localctx, 188, RULE_profile_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2268; Match(PROFILE);
			State = 2269; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_clauseContext : ParserRuleContext {
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode[] EXCEPT() { return GetTokens(PlSqlParser.EXCEPT); }
		public ITerminalNode EXCEPT(int i) {
			return GetToken(PlSqlParser.EXCEPT, i);
		}
		public Role_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Role_clauseContext role_clause() {
		Role_clauseContext _localctx = new Role_clauseContext(Context, State);
		EnterRule(_localctx, 190, RULE_role_clause);
		int _la;
		try {
			int _alt;
			State = 2294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2275;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2272;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2271; Match(COMMA);
							}
						}

						State = 2274; role_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2277;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,190,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2279; Match(ALL);
				State = 2291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXCEPT) {
					{
					{
					State = 2280; Match(EXCEPT);
					State = 2285;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2282;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 2281; Match(COMMA);
								}
							}

							State = 2284; role_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2287;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,192,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					State = 2293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_default_role_clauseContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode ROLE() { return GetToken(PlSqlParser.ROLE, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public Role_clauseContext role_clause() {
			return GetRuleContext<Role_clauseContext>(0);
		}
		public User_default_role_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_default_role_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_default_role_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_default_role_clauseContext user_default_role_clause() {
		User_default_role_clauseContext _localctx = new User_default_role_clauseContext(Context, State);
		EnterRule(_localctx, 192, RULE_user_default_role_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2296; Match(DEFAULT);
			State = 2297; Match(ROLE);
			State = 2300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2298; Match(NONE);
				}
				break;
			case 2:
				{
				State = 2299; role_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Password_expire_clauseContext : ParserRuleContext {
		public ITerminalNode PASSWORD() { return GetToken(PlSqlParser.PASSWORD, 0); }
		public ITerminalNode EXPIRE() { return GetToken(PlSqlParser.EXPIRE, 0); }
		public Password_expire_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_password_expire_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassword_expire_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Password_expire_clauseContext password_expire_clause() {
		Password_expire_clauseContext _localctx = new Password_expire_clauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_password_expire_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2302; Match(PASSWORD);
			State = 2303; Match(EXPIRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_lock_clauseContext : ParserRuleContext {
		public ITerminalNode ACCOUNT() { return GetToken(PlSqlParser.ACCOUNT, 0); }
		public ITerminalNode LOCK() { return GetToken(PlSqlParser.LOCK, 0); }
		public ITerminalNode UNLOCK() { return GetToken(PlSqlParser.UNLOCK, 0); }
		public User_lock_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_lock_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_lock_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_lock_clauseContext user_lock_clause() {
		User_lock_clauseContext _localctx = new User_lock_clauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_user_lock_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2305; Match(ACCOUNT);
			State = 2306;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_editions_clauseContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode EDITIONS() { return GetToken(PlSqlParser.EDITIONS, 0); }
		public User_editions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_editions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_editions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_editions_clauseContext user_editions_clause() {
		User_editions_clauseContext _localctx = new User_editions_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_user_editions_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308; Match(ENABLE);
			State = 2309; Match(EDITIONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_editions_clauseContext : ParserRuleContext {
		public User_editions_clauseContext user_editions_clause() {
			return GetRuleContext<User_editions_clauseContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Regular_idContext[] regular_id() {
			return GetRuleContexts<Regular_idContext>();
		}
		public Regular_idContext regular_id(int i) {
			return GetRuleContext<Regular_idContext>(i);
		}
		public Alter_user_editions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_editions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user_editions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_editions_clauseContext alter_user_editions_clause() {
		Alter_user_editions_clauseContext _localctx = new Alter_user_editions_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_alter_user_editions_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2311; user_editions_clause();
			State = 2321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 2312; Match(FOR);
				State = 2317;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2314;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2313; Match(COMMA);
							}
						}

						State = 2316; regular_id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2319;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,197,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 2324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE) {
				{
				State = 2323; Match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proxy_clauseContext : ParserRuleContext {
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public ITerminalNode THROUGH() { return GetToken(PlSqlParser.THROUGH, 0); }
		public ITerminalNode ENTERPRISE() { return GetToken(PlSqlParser.ENTERPRISE, 0); }
		public ITerminalNode USERS() { return GetToken(PlSqlParser.USERS, 0); }
		public User_object_nameContext user_object_name() {
			return GetRuleContext<User_object_nameContext>(0);
		}
		public ITerminalNode GRANT() { return GetToken(PlSqlParser.GRANT, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(PlSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode REQUIRED() { return GetToken(PlSqlParser.REQUIRED, 0); }
		public ITerminalNode AUTHENTICATED() { return GetToken(PlSqlParser.AUTHENTICATED, 0); }
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode ROLES() { return GetToken(PlSqlParser.ROLES, 0); }
		public ITerminalNode ROLE() { return GetToken(PlSqlParser.ROLE, 0); }
		public Role_clauseContext role_clause() {
			return GetRuleContext<Role_clauseContext>(0);
		}
		public ITerminalNode PASSWORD() { return GetToken(PlSqlParser.PASSWORD, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(PlSqlParser.CERTIFICATE, 0); }
		public ITerminalNode DISTINGUISHED() { return GetToken(PlSqlParser.DISTINGUISHED, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public Proxy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proxy_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProxy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proxy_clauseContext proxy_clause() {
		Proxy_clauseContext _localctx = new Proxy_clauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_proxy_clause);
		int _la;
		try {
			State = 2365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REVOKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2326; Match(REVOKE);
				State = 2327; Match(CONNECT);
				State = 2328; Match(THROUGH);
				State = 2332;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTERPRISE:
					{
					State = 2329; Match(ENTERPRISE);
					State = 2330; Match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 2331; user_object_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2334; Match(GRANT);
				State = 2335; Match(CONNECT);
				State = 2336; Match(THROUGH);
				State = 2363;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTERPRISE:
					{
					State = 2337; Match(ENTERPRISE);
					State = 2338; Match(USERS);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 2339; user_object_name();
					State = 2347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 2340; Match(WITH);
						State = 2345;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NO:
							{
							State = 2341; Match(NO);
							State = 2342; Match(ROLES);
							}
							break;
						case ROLE:
							{
							State = 2343; Match(ROLE);
							State = 2344; role_clause();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					State = 2351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTHENTICATION) {
						{
						State = 2349; Match(AUTHENTICATION);
						State = 2350; Match(REQUIRED);
						}
					}

					State = 2361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTHENTICATED) {
						{
						State = 2353; Match(AUTHENTICATED);
						State = 2354; Match(USING);
						State = 2359;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case PASSWORD:
							{
							State = 2355; Match(PASSWORD);
							}
							break;
						case CERTIFICATE:
							{
							State = 2356; Match(CERTIFICATE);
							}
							break;
						case DISTINGUISHED:
							{
							State = 2357; Match(DISTINGUISHED);
							State = 2358; Match(NAME);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_namesContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Container_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_names; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_namesContext container_names() {
		Container_namesContext _localctx = new Container_namesContext(Context, State);
		EnterRule(_localctx, 204, RULE_container_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367; Match(LEFT_PAREN);
			State = 2372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2368; Match(COMMA);
					}
				}

				State = 2371; id_expression();
				}
				}
				State = 2374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==REGULAR_ID );
			State = 2376; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_container_dataContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode CONTAINER_DATA() { return GetToken(PlSqlParser.CONTAINER_DATA, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(PlSqlParser.EQUALS_OP, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Container_namesContext container_names() {
			return GetRuleContext<Container_namesContext>(0);
		}
		public Set_container_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_container_data; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_container_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_container_dataContext set_container_data() {
		Set_container_dataContext _localctx = new Set_container_dataContext(Context, State);
		EnterRule(_localctx, 206, RULE_set_container_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2378; Match(SET);
			State = 2379; Match(CONTAINER_DATA);
			State = 2380; Match(EQUALS_OP);
			State = 2384;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 2381; Match(ALL);
				}
				break;
			case DEFAULT:
				{
				State = 2382; Match(DEFAULT);
				}
				break;
			case LEFT_PAREN:
				{
				State = 2383; container_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_rem_container_dataContext : ParserRuleContext {
		public ITerminalNode CONTAINER_DATA() { return GetToken(PlSqlParser.CONTAINER_DATA, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(PlSqlParser.EQUALS_OP, 0); }
		public Container_namesContext container_names() {
			return GetRuleContext<Container_namesContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(PlSqlParser.REMOVE, 0); }
		public Add_rem_container_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_rem_container_data; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_rem_container_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_rem_container_dataContext add_rem_container_data() {
		Add_rem_container_dataContext _localctx = new Add_rem_container_dataContext(Context, State);
		EnterRule(_localctx, 208, RULE_add_rem_container_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==REMOVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2387; Match(CONTAINER_DATA);
			State = 2388; Match(EQUALS_OP);
			State = 2389; container_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_data_clauseContext : ParserRuleContext {
		public Set_container_dataContext set_container_data() {
			return GetRuleContext<Set_container_dataContext>(0);
		}
		public Add_rem_container_dataContext add_rem_container_data() {
			return GetRuleContext<Add_rem_container_dataContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Container_tableview_nameContext container_tableview_name() {
			return GetRuleContext<Container_tableview_nameContext>(0);
		}
		public Container_data_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_data_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_data_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_data_clauseContext container_data_clause() {
		Container_data_clauseContext _localctx = new Container_data_clauseContext(Context, State);
		EnterRule(_localctx, 210, RULE_container_data_clause);
		int _la;
		try {
			State = 2397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2391; set_container_data();
				}
				break;
			case ADD:
			case REMOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2392; add_rem_container_data();
				State = 2395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 2393; Match(FOR);
					State = 2394; container_tableview_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 212, RULE_drop_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2399; Match(DROP);
			State = 2400; Match(INDEX);
			State = 2401; index_name();
			State = 2402; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_statmentContext : ParserRuleContext {
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public Revoke_system_privilegesContext revoke_system_privileges() {
			return GetRuleContext<Revoke_system_privilegesContext>(0);
		}
		public Revoke_object_privilegesContext revoke_object_privileges() {
			return GetRuleContext<Revoke_object_privilegesContext>(0);
		}
		public Revoke_statmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_statment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke_statment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_statmentContext revoke_statment() {
		Revoke_statmentContext _localctx = new Revoke_statmentContext(Context, State);
		EnterRule(_localctx, 214, RULE_revoke_statment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2404; Match(REVOKE);
			State = 2407;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 2405; revoke_system_privileges();
				}
				break;
			case 2:
				{
				State = 2406; revoke_object_privileges();
				}
				break;
			}
			State = 2409; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_system_privilegesContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public Grantee_nameContext[] grantee_name() {
			return GetRuleContexts<Grantee_nameContext>();
		}
		public Grantee_nameContext grantee_name(int i) {
			return GetRuleContext<Grantee_nameContext>(i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(PlSqlParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(PlSqlParser.PUBLIC, i);
		}
		public Role_nameContext role_name() {
			return GetRuleContext<Role_nameContext>(0);
		}
		public System_privilegeContext system_privilege() {
			return GetRuleContext<System_privilegeContext>(0);
		}
		public Revoke_system_privilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_system_privileges; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke_system_privileges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_system_privilegesContext revoke_system_privileges() {
		Revoke_system_privilegesContext _localctx = new Revoke_system_privilegesContext(Context, State);
		EnterRule(_localctx, 216, RULE_revoke_system_privileges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2411; Match(COMMA);
				}
			}

			State = 2416;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				{
				State = 2414; role_name();
				}
				break;
			case 2:
				{
				State = 2415; system_privilege();
				}
				break;
			}
			}
			State = 2418; Match(FROM);
			State = 2424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2424;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					State = 2420;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2419; Match(COMMA);
						}
					}

					State = 2422; grantee_name();
					}
					break;
				case PUBLIC:
					{
					State = 2423; Match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (PUBLIC - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_object_privilegesContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return GetRuleContext<Grant_object_nameContext>(0);
		}
		public Grantee_nameContext[] grantee_name() {
			return GetRuleContexts<Grantee_nameContext>();
		}
		public Grantee_nameContext grantee_name(int i) {
			return GetRuleContext<Grantee_nameContext>(i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(PlSqlParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(PlSqlParser.PUBLIC, i);
		}
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(PlSqlParser.CONSTRAINTS, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Object_privilegeContext[] object_privilege() {
			return GetRuleContexts<Object_privilegeContext>();
		}
		public Object_privilegeContext object_privilege(int i) {
			return GetRuleContext<Object_privilegeContext>(i);
		}
		public Revoke_object_privilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_object_privileges; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke_object_privileges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_object_privilegesContext revoke_object_privileges() {
		Revoke_object_privilegesContext _localctx = new Revoke_object_privilegesContext(Context, State);
		EnterRule(_localctx, 218, RULE_revoke_object_privileges);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2429;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2428; Match(COMMA);
						}
					}

					State = 2433;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
					case 1:
						{
						State = 2431; role_name();
						}
						break;
					case 2:
						{
						State = 2432; object_privilege();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2437;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			{
			State = 2439; Match(ON);
			State = 2440; grant_object_name();
			}
			State = 2442; Match(FROM);
			State = 2449;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2449;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
					case 1:
						{
						State = 2444;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2443; Match(COMMA);
							}
						}

						State = 2446; grantee_name();
						}
						break;
					case 2:
						{
						State = 2447; Match(PUBLIC);
						}
						break;
					case 3:
						{
						State = 2448; role_name();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,224,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2456;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE:
				{
				State = 2453; Match(CASCADE);
				State = 2454; Match(CONSTRAINTS);
				}
				break;
			case FORCE:
				{
				State = 2455; Match(FORCE);
				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_statementContext : ParserRuleContext {
		public ITerminalNode[] GRANT() { return GetTokens(PlSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(PlSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return GetRuleContext<Grant_object_nameContext>(0);
		}
		public Grantee_nameContext[] grantee_name() {
			return GetRuleContexts<Grantee_nameContext>();
		}
		public Grantee_nameContext grantee_name(int i) {
			return GetRuleContext<Grantee_nameContext>(i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(PlSqlParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(PlSqlParser.PUBLIC, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(PlSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(PlSqlParser.WITH, i);
		}
		public ITerminalNode[] OPTION() { return GetTokens(PlSqlParser.OPTION); }
		public ITerminalNode OPTION(int i) {
			return GetToken(PlSqlParser.OPTION, i);
		}
		public ITerminalNode HIERARCHY() { return GetToken(PlSqlParser.HIERARCHY, 0); }
		public Container_clauseContext container_clause() {
			return GetRuleContext<Container_clauseContext>(0);
		}
		public ITerminalNode ADMIN() { return GetToken(PlSqlParser.ADMIN, 0); }
		public ITerminalNode DELEGATE() { return GetToken(PlSqlParser.DELEGATE, 0); }
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public System_privilegeContext[] system_privilege() {
			return GetRuleContexts<System_privilegeContext>();
		}
		public System_privilegeContext system_privilege(int i) {
			return GetRuleContext<System_privilegeContext>(i);
		}
		public Object_privilegeContext[] object_privilege() {
			return GetRuleContexts<Object_privilegeContext>();
		}
		public Object_privilegeContext object_privilege(int i) {
			return GetRuleContext<Object_privilegeContext>(i);
		}
		public Paren_column_listContext[] paren_column_list() {
			return GetRuleContexts<Paren_column_listContext>();
		}
		public Paren_column_listContext paren_column_list(int i) {
			return GetRuleContext<Paren_column_listContext>(i);
		}
		public Grant_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_statementContext grant_statement() {
		Grant_statementContext _localctx = new Grant_statementContext(Context, State);
		EnterRule(_localctx, 220, RULE_grant_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2458; Match(GRANT);
			State = 2470;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2460;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2459; Match(COMMA);
						}
					}

					State = 2468;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
					case 1:
						{
						State = 2462; role_name();
						}
						break;
					case 2:
						{
						State = 2463; system_privilege();
						}
						break;
					case 3:
						{
						State = 2464; object_privilege();
						State = 2466;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LEFT_PAREN) {
							{
							State = 2465; paren_column_list();
							}
						}

						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,229,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2474; Match(ON);
				State = 2475; grant_object_name();
				}
			}

			State = 2478; Match(TO);
			State = 2484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2484;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					State = 2480;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2479; Match(COMMA);
						}
					}

					State = 2482; grantee_name();
					}
					break;
				case PUBLIC:
					{
					State = 2483; Match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (PUBLIC - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==REGULAR_ID );
			State = 2491;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,234,Context) ) {
			case 1:
				{
				State = 2488; Match(WITH);
				State = 2489;
				_la = TokenStream.LA(1);
				if ( !(_la==ADMIN || _la==DELEGATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2490; Match(OPTION);
				}
				break;
			}
			State = 2496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,235,Context) ) {
			case 1:
				{
				State = 2493; Match(WITH);
				State = 2494; Match(HIERARCHY);
				State = 2495; Match(OPTION);
				}
				break;
			}
			State = 2501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2498; Match(WITH);
				State = 2499; Match(GRANT);
				State = 2500; Match(OPTION);
				}
			}

			State = 2504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINER) {
				{
				State = 2503; container_clause();
				}
			}

			State = 2506; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_clauseContext : ParserRuleContext {
		public ITerminalNode CONTAINER() { return GetToken(PlSqlParser.CONTAINER, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(PlSqlParser.EQUALS_OP, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Container_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_clauseContext container_clause() {
		Container_clauseContext _localctx = new Container_clauseContext(Context, State);
		EnterRule(_localctx, 222, RULE_container_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2508; Match(CONTAINER);
			State = 2509; Match(EQUALS_OP);
			State = 2510;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==CURRENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(PlSqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode EDITIONING() { return GetToken(PlSqlParser.EDITIONING, 0); }
		public ITerminalNode EDITIONABLE() { return GetToken(PlSqlParser.EDITIONABLE, 0); }
		public ITerminalNode NOEDITIONABLE() { return GetToken(PlSqlParser.NOEDITIONABLE, 0); }
		public View_optionsContext view_options() {
			return GetRuleContext<View_optionsContext>(0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return GetRuleContext<Subquery_restriction_clauseContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 224, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2512; Match(CREATE);
			State = 2515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2513; Match(OR);
				State = 2514; Match(REPLACE);
				}
			}

			State = 2521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE || _la==NO) {
				{
				State = 2518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 2517; Match(NO);
					}
				}

				State = 2520; Match(FORCE);
				}
			}

			State = 2529;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EDITIONING:
				{
				State = 2523; Match(EDITIONING);
				}
				break;
			case EDITIONABLE:
				{
				State = 2524; Match(EDITIONABLE);
				State = 2526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EDITIONING) {
					{
					State = 2525; Match(EDITIONING);
					}
				}

				}
				break;
			case NOEDITIONABLE:
				{
				State = 2528; Match(NOEDITIONABLE);
				}
				break;
			case VIEW:
				break;
			default:
				break;
			}
			State = 2531; Match(VIEW);
			State = 2532; tableview_name();
			State = 2534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF || _la==LEFT_PAREN) {
				{
				State = 2533; view_options();
				}
			}

			State = 2536; Match(AS);
			State = 2537; subquery();
			State = 2539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2538; subquery_restriction_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_optionsContext : ParserRuleContext {
		public View_alias_constraintContext view_alias_constraint() {
			return GetRuleContext<View_alias_constraintContext>(0);
		}
		public Object_view_clauseContext object_view_clause() {
			return GetRuleContext<Object_view_clauseContext>(0);
		}
		public View_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_optionsContext view_options() {
		View_optionsContext _localctx = new View_optionsContext(Context, State);
		EnterRule(_localctx, 226, RULE_view_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 2541; view_alias_constraint();
				}
				break;
			case OF:
				{
				State = 2542; object_view_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_alias_constraintContext : ParserRuleContext {
		public Table_aliasContext[] table_alias() {
			return GetRuleContexts<Table_aliasContext>();
		}
		public Table_aliasContext table_alias(int i) {
			return GetRuleContext<Table_aliasContext>(i);
		}
		public Out_of_line_constraintContext[] out_of_line_constraint() {
			return GetRuleContexts<Out_of_line_constraintContext>();
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return GetRuleContext<Out_of_line_constraintContext>(i);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public ITerminalNode[] VISIBLE() { return GetTokens(PlSqlParser.VISIBLE); }
		public ITerminalNode VISIBLE(int i) {
			return GetToken(PlSqlParser.VISIBLE, i);
		}
		public ITerminalNode[] INVISIBLE() { return GetTokens(PlSqlParser.INVISIBLE); }
		public ITerminalNode INVISIBLE(int i) {
			return GetToken(PlSqlParser.INVISIBLE, i);
		}
		public View_alias_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_alias_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_alias_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_alias_constraintContext view_alias_constraint() {
		View_alias_constraintContext _localctx = new View_alias_constraintContext(Context, State);
		EnterRule(_localctx, 228, RULE_view_alias_constraint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2545; Match(LEFT_PAREN);
			State = 2562;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2546; Match(COMMA);
					}
				}

				State = 2560;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 2549; table_alias();
					State = 2551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INVISIBLE || _la==VISIBLE) {
						{
						State = 2550;
						_la = TokenStream.LA(1);
						if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 2556;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,248,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2553; inline_constraint();
							}
							} 
						}
						State = 2558;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,248,Context);
					}
					}
					break;
				case 2:
					{
					State = 2559; out_of_line_constraint();
					}
					break;
				}
				}
				}
				State = 2564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FOREIGN - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIMARY - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (UNIQUE - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (LAG - 646)) | (1L << (LEAD - 646)) | (1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (COMMA - 646)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 2566; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_view_clauseContext : ParserRuleContext {
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(PlSqlParser.IDENTIFIER, 0); }
		public ITerminalNode ID() { return GetToken(PlSqlParser.ID, 0); }
		public ITerminalNode OID() { return GetToken(PlSqlParser.OID, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode[] REGULAR_ID() { return GetTokens(PlSqlParser.REGULAR_ID); }
		public ITerminalNode REGULAR_ID(int i) {
			return GetToken(PlSqlParser.REGULAR_ID, i);
		}
		public Out_of_line_constraintContext[] out_of_line_constraint() {
			return GetRuleContexts<Out_of_line_constraintContext>();
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return GetRuleContext<Out_of_line_constraintContext>(i);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public Object_view_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_view_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_view_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_view_clauseContext object_view_clause() {
		Object_view_clauseContext _localctx = new Object_view_clauseContext(Context, State);
		EnterRule(_localctx, 230, RULE_object_view_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568; Match(OF);
			State = 2569; type_name();
			State = 2588;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 2570; Match(WITH);
				State = 2571; Match(OBJECT);
				State = 2572;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==ID || _la==OID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2584;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 2573; Match(DEFAULT);
					}
					break;
				case LEFT_PAREN:
					{
					State = 2574; Match(LEFT_PAREN);
					State = 2579;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 2576;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2575; Match(COMMA);
							}
						}

						State = 2578; Match(REGULAR_ID);
						}
						}
						State = 2581;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMMA || _la==REGULAR_ID );
					State = 2583; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case UNDER:
				{
				State = 2586; Match(UNDER);
				State = 2587; tableview_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LEFT_PAREN) {
				{
				{
				State = 2590; Match(LEFT_PAREN);
				State = 2599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2591; Match(COMMA);
						}
					}

					State = 2597;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHECK:
					case CONSTRAINT:
					case FOREIGN:
					case PRIMARY:
					case UNIQUE:
						{
						State = 2594; out_of_line_constraint();
						}
						break;
					case REGULAR_ID:
						{
						State = 2595; Match(REGULAR_ID);
						State = 2596; inline_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 2601;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE || _la==COMMA || _la==REGULAR_ID );
				State = 2603; Match(RIGHT_PAREN);
				}
				}
				State = 2609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_constraintContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(PlSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_constraintContext inline_constraint() {
		Inline_constraintContext _localctx = new Inline_constraintContext(Context, State);
		EnterRule(_localctx, 232, RULE_inline_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 2610; Match(CONSTRAINT);
				State = 2611; constraint_name();
				}
			}

			State = 2623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL:
				{
				State = 2615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2614; Match(NOT);
					}
				}

				State = 2617; Match(NULL);
				}
				break;
			case UNIQUE:
				{
				State = 2618; Match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				State = 2619; Match(PRIMARY);
				State = 2620; Match(KEY);
				}
				break;
			case REFERENCES:
				{
				State = 2621; references_clause();
				}
				break;
			case CHECK:
				{
				State = 2622; check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 2625; constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_of_line_constraintContext : ParserRuleContext {
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public Primary_key_clauseContext[] primary_key_clause() {
			return GetRuleContexts<Primary_key_clauseContext>();
		}
		public Primary_key_clauseContext primary_key_clause(int i) {
			return GetRuleContext<Primary_key_clauseContext>(i);
		}
		public Foreign_key_clauseContext[] foreign_key_clause() {
			return GetRuleContexts<Foreign_key_clauseContext>();
		}
		public Foreign_key_clauseContext foreign_key_clause(int i) {
			return GetRuleContext<Foreign_key_clauseContext>(i);
		}
		public Unique_key_clauseContext[] unique_key_clause() {
			return GetRuleContexts<Unique_key_clauseContext>();
		}
		public Unique_key_clauseContext unique_key_clause(int i) {
			return GetRuleContext<Unique_key_clauseContext>(i);
		}
		public Check_constraintContext[] check_constraint() {
			return GetRuleContexts<Check_constraintContext>();
		}
		public Check_constraintContext check_constraint(int i) {
			return GetRuleContext<Check_constraintContext>(i);
		}
		public ITerminalNode[] CONSTRAINT() { return GetTokens(PlSqlParser.CONSTRAINT); }
		public ITerminalNode CONSTRAINT(int i) {
			return GetToken(PlSqlParser.CONSTRAINT, i);
		}
		public Constraint_nameContext[] constraint_name() {
			return GetRuleContexts<Constraint_nameContext>();
		}
		public Constraint_nameContext constraint_name(int i) {
			return GetRuleContext<Constraint_nameContext>(i);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_of_line_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_of_line_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_of_line_constraintContext out_of_line_constraint() {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(Context, State);
		EnterRule(_localctx, 234, RULE_out_of_line_constraint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2638;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2630;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CONSTRAINT) {
						{
						State = 2628; Match(CONSTRAINT);
						State = 2629; constraint_name();
						}
					}

					State = 2636;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY:
						{
						State = 2632; primary_key_clause();
						}
						break;
					case FOREIGN:
						{
						State = 2633; foreign_key_clause();
						}
						break;
					case UNIQUE:
						{
						State = 2634; unique_key_clause();
						}
						break;
					case CHECK:
						{
						State = 2635; check_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,265,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 2642; constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraint_stateContext : ParserRuleContext {
		public ITerminalNode[] DEFERRABLE() { return GetTokens(PlSqlParser.DEFERRABLE); }
		public ITerminalNode DEFERRABLE(int i) {
			return GetToken(PlSqlParser.DEFERRABLE, i);
		}
		public ITerminalNode[] INITIALLY() { return GetTokens(PlSqlParser.INITIALLY); }
		public ITerminalNode INITIALLY(int i) {
			return GetToken(PlSqlParser.INITIALLY, i);
		}
		public Exceptions_clauseContext[] exceptions_clause() {
			return GetRuleContexts<Exceptions_clauseContext>();
		}
		public Exceptions_clauseContext exceptions_clause(int i) {
			return GetRuleContext<Exceptions_clauseContext>(i);
		}
		public ITerminalNode[] IMMEDIATE() { return GetTokens(PlSqlParser.IMMEDIATE); }
		public ITerminalNode IMMEDIATE(int i) {
			return GetToken(PlSqlParser.IMMEDIATE, i);
		}
		public ITerminalNode[] DEFERRED() { return GetTokens(PlSqlParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(PlSqlParser.DEFERRED, i);
		}
		public ITerminalNode[] RELY() { return GetTokens(PlSqlParser.RELY); }
		public ITerminalNode RELY(int i) {
			return GetToken(PlSqlParser.RELY, i);
		}
		public ITerminalNode[] NORELY() { return GetTokens(PlSqlParser.NORELY); }
		public ITerminalNode NORELY(int i) {
			return GetToken(PlSqlParser.NORELY, i);
		}
		public ITerminalNode[] ENABLE() { return GetTokens(PlSqlParser.ENABLE); }
		public ITerminalNode ENABLE(int i) {
			return GetToken(PlSqlParser.ENABLE, i);
		}
		public ITerminalNode[] DISABLE() { return GetTokens(PlSqlParser.DISABLE); }
		public ITerminalNode DISABLE(int i) {
			return GetToken(PlSqlParser.DISABLE, i);
		}
		public ITerminalNode[] VALIDATE() { return GetTokens(PlSqlParser.VALIDATE); }
		public ITerminalNode VALIDATE(int i) {
			return GetToken(PlSqlParser.VALIDATE, i);
		}
		public ITerminalNode[] NOVALIDATE() { return GetTokens(PlSqlParser.NOVALIDATE); }
		public ITerminalNode NOVALIDATE(int i) {
			return GetToken(PlSqlParser.NOVALIDATE, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(PlSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(PlSqlParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint_state; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constraint_stateContext constraint_state() {
		Constraint_stateContext _localctx = new Constraint_stateContext(Context, State);
		EnterRule(_localctx, 236, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2655;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2655;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						State = 2646;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2645; Match(NOT);
							}
						}

						State = 2648; Match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						State = 2649; Match(INITIALLY);
						State = 2650;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						State = 2651;
						_la = TokenStream.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						State = 2652;
						_la = TokenStream.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						State = 2653;
						_la = TokenStream.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case EXCEPTIONS:
						{
						State = 2654; exceptions_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2657;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,269,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_index_clauseContext : ParserRuleContext {
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public Xmltable_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmltable_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_index_clauseContext xmltable_index_clause() {
		Xmltable_index_clauseContext _localctx = new Xmltable_index_clauseContext(Context, State);
		EnterRule(_localctx, 238, RULE_xmltable_index_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2659; Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlindex_clauseContext : ParserRuleContext {
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public Xmlindex_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlindex_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlindex_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlindex_clauseContext xmlindex_clause() {
		Xmlindex_clauseContext _localctx = new Xmlindex_clauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_xmlindex_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2661; Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Physicial_attributes_clauseContext : ParserRuleContext {
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public Physicial_attributes_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_physicial_attributes_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhysicial_attributes_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Physicial_attributes_clauseContext physicial_attributes_clause() {
		Physicial_attributes_clauseContext _localctx = new Physicial_attributes_clauseContext(Context, State);
		EnterRule(_localctx, 242, RULE_physicial_attributes_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2663; Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public Partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_clauseContext partition_clause() {
		Partition_clauseContext _localctx = new Partition_clauseContext(Context, State);
		EnterRule(_localctx, 244, RULE_partition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2665; Match(PARTITION);
			State = 2666; partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_clause_optionalContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public Partition_clause_optionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_clause_optional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_clause_optional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_clause_optionalContext partition_clause_optional() {
		Partition_clause_optionalContext _localctx = new Partition_clause_optionalContext(Context, State);
		EnterRule(_localctx, 246, RULE_partition_clause_optional);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2668; Match(PARTITION);
			State = 2670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==REGULAR_ID) {
				{
				State = 2669; partition_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexing_clauseContext : ParserRuleContext {
		public ITerminalNode INDEXING() { return GetToken(PlSqlParser.INDEXING, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public Indexing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexing_clauseContext indexing_clause() {
		Indexing_clauseContext _localctx = new Indexing_clauseContext(Context, State);
		EnterRule(_localctx, 248, RULE_indexing_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2672; Match(INDEXING);
			State = 2673;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partitioning_storage_clauseContext : ParserRuleContext {
		public Tablespace_clauseContext[] tablespace_clause() {
			return GetRuleContexts<Tablespace_clauseContext>();
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return GetRuleContext<Tablespace_clauseContext>(i);
		}
		public ITerminalNode[] OVERFLOW() { return GetTokens(PlSqlParser.OVERFLOW); }
		public ITerminalNode OVERFLOW(int i) {
			return GetToken(PlSqlParser.OVERFLOW, i);
		}
		public Table_compressionContext[] table_compression() {
			return GetRuleContexts<Table_compressionContext>();
		}
		public Table_compressionContext table_compression(int i) {
			return GetRuleContext<Table_compressionContext>(i);
		}
		public Index_compressionContext[] index_compression() {
			return GetRuleContexts<Index_compressionContext>();
		}
		public Index_compressionContext index_compression(int i) {
			return GetRuleContext<Index_compressionContext>(i);
		}
		public Inmemory_clauseContext[] inmemory_clause() {
			return GetRuleContexts<Inmemory_clauseContext>();
		}
		public Inmemory_clauseContext inmemory_clause(int i) {
			return GetRuleContext<Inmemory_clauseContext>(i);
		}
		public Lob_partitioning_storageContext[] lob_partitioning_storage() {
			return GetRuleContexts<Lob_partitioning_storageContext>();
		}
		public Lob_partitioning_storageContext lob_partitioning_storage(int i) {
			return GetRuleContext<Lob_partitioning_storageContext>(i);
		}
		public ITerminalNode[] VARRAY() { return GetTokens(PlSqlParser.VARRAY); }
		public ITerminalNode VARRAY(int i) {
			return GetToken(PlSqlParser.VARRAY, i);
		}
		public Varray_itemContext[] varray_item() {
			return GetRuleContexts<Varray_itemContext>();
		}
		public Varray_itemContext varray_item(int i) {
			return GetRuleContext<Varray_itemContext>(i);
		}
		public ITerminalNode[] STORE() { return GetTokens(PlSqlParser.STORE); }
		public ITerminalNode STORE(int i) {
			return GetToken(PlSqlParser.STORE, i);
		}
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode[] LOB() { return GetTokens(PlSqlParser.LOB); }
		public ITerminalNode LOB(int i) {
			return GetToken(PlSqlParser.LOB, i);
		}
		public Lob_segnameContext[] lob_segname() {
			return GetRuleContexts<Lob_segnameContext>();
		}
		public Lob_segnameContext lob_segname(int i) {
			return GetRuleContext<Lob_segnameContext>(i);
		}
		public ITerminalNode[] SECUREFILE() { return GetTokens(PlSqlParser.SECUREFILE); }
		public ITerminalNode SECUREFILE(int i) {
			return GetToken(PlSqlParser.SECUREFILE, i);
		}
		public ITerminalNode[] BASICFILE() { return GetTokens(PlSqlParser.BASICFILE); }
		public ITerminalNode BASICFILE(int i) {
			return GetToken(PlSqlParser.BASICFILE, i);
		}
		public Partitioning_storage_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitioning_storage_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitioning_storage_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partitioning_storage_clauseContext partitioning_storage_clause() {
		Partitioning_storage_clauseContext _localctx = new Partitioning_storage_clauseContext(Context, State);
		EnterRule(_localctx, 250, RULE_partitioning_storage_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMN || _la==COMPRESS || _la==INMEMORY || _la==LOB || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (NOCOMPRESS - 339)) | (1L << (NO - 339)) | (1L << (OVERFLOW - 339)))) != 0) || _la==ROW || _la==TABLESPACE || _la==VARRAY) {
				{
				State = 2694;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2694;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
					case 1:
						{
						State = 2675; tablespace_clause();
						}
						break;
					case 2:
						{
						State = 2676; Match(OVERFLOW);
						State = 2678;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
						case 1:
							{
							State = 2677; tablespace_clause();
							}
							break;
						}
						}
						break;
					case 3:
						{
						State = 2680; table_compression();
						}
						break;
					case 4:
						{
						State = 2681; index_compression();
						}
						break;
					case 5:
						{
						State = 2682; inmemory_clause();
						}
						break;
					case 6:
						{
						State = 2683; lob_partitioning_storage();
						}
						break;
					case 7:
						{
						State = 2684; Match(VARRAY);
						State = 2685; varray_item();
						State = 2686; Match(STORE);
						State = 2687; Match(AS);
						State = 2689;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==BASICFILE || _la==SECUREFILE) {
							{
							State = 2688;
							_la = TokenStream.LA(1);
							if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 2691; Match(LOB);
						State = 2692; lob_segname();
						}
						break;
					}
					}
					State = 2696;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COLUMN || _la==COMPRESS || _la==INMEMORY || _la==LOB || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (NOCOMPRESS - 339)) | (1L << (NO - 339)) | (1L << (OVERFLOW - 339)))) != 0) || _la==ROW || _la==TABLESPACE || _la==VARRAY );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_clauseContext : ParserRuleContext {
		public ITerminalNode INMEMORY() { return GetToken(PlSqlParser.INMEMORY, 0); }
		public Inmemory_parametersContext inmemory_parameters() {
			return GetRuleContext<Inmemory_parametersContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_clauseContext inmemory_clause() {
		Inmemory_clauseContext _localctx = new Inmemory_clauseContext(Context, State);
		EnterRule(_localctx, 252, RULE_inmemory_clause);
		try {
			State = 2704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INMEMORY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2700; Match(INMEMORY);
				State = 2701; inmemory_parameters();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2702; Match(NO);
				State = 2703; Match(INMEMORY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_parametersContext : ParserRuleContext {
		public Inmemory_memcompressContext inmemory_memcompress() {
			return GetRuleContext<Inmemory_memcompressContext>(0);
		}
		public Inmemory_priorityContext inmemory_priority() {
			return GetRuleContext<Inmemory_priorityContext>(0);
		}
		public Inmemory_distributeContext inmemory_distribute() {
			return GetRuleContext<Inmemory_distributeContext>(0);
		}
		public Inmemory_duplicateContext inmemory_duplicate() {
			return GetRuleContext<Inmemory_duplicateContext>(0);
		}
		public Inmemory_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_parametersContext inmemory_parameters() {
		Inmemory_parametersContext _localctx = new Inmemory_parametersContext(Context, State);
		EnterRule(_localctx, 254, RULE_inmemory_parameters);
		int _la;
		try {
			State = 2718;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2707;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
				case 1:
					{
					State = 2706; inmemory_memcompress();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIORITY) {
					{
					State = 2709; inmemory_priority();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTRIBUTE) {
					{
					State = 2712; inmemory_distribute();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2716;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 2715; inmemory_duplicate();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_memcompressContext : ParserRuleContext {
		public ITerminalNode MEMCOMPRESS() { return GetToken(PlSqlParser.MEMCOMPRESS, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode DML() { return GetToken(PlSqlParser.DML, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode CAPACITY() { return GetToken(PlSqlParser.CAPACITY, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_memcompressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_memcompress; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_memcompress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_memcompressContext inmemory_memcompress() {
		Inmemory_memcompressContext _localctx = new Inmemory_memcompressContext(Context, State);
		EnterRule(_localctx, 256, RULE_inmemory_memcompress);
		int _la;
		try {
			State = 2731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEMCOMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2720; Match(MEMCOMPRESS);
				State = 2721; Match(FOR);
				State = 2727;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DML:
					{
					State = 2722; Match(DML);
					}
					break;
				case CAPACITY:
				case QUERY:
					{
					State = 2723;
					_la = TokenStream.LA(1);
					if ( !(_la==CAPACITY || _la==QUERY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HIGH || _la==LOW) {
						{
						State = 2724;
						_la = TokenStream.LA(1);
						if ( !(_la==HIGH || _la==LOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2729; Match(NO);
				State = 2730; Match(MEMCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_priorityContext : ParserRuleContext {
		public ITerminalNode PRIORITY() { return GetToken(PlSqlParser.PRIORITY, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode MEDIUM() { return GetToken(PlSqlParser.MEDIUM, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public ITerminalNode CRITICAL() { return GetToken(PlSqlParser.CRITICAL, 0); }
		public Inmemory_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_priority; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_priorityContext inmemory_priority() {
		Inmemory_priorityContext _localctx = new Inmemory_priorityContext(Context, State);
		EnterRule(_localctx, 258, RULE_inmemory_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2733; Match(PRIORITY);
			State = 2734;
			_la = TokenStream.LA(1);
			if ( !(_la==CRITICAL || _la==HIGH || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (LOW - 297)) | (1L << (MEDIUM - 297)) | (1L << (NONE - 297)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_distributeContext : ParserRuleContext {
		public ITerminalNode DISTRIBUTE() { return GetToken(PlSqlParser.DISTRIBUTE, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public Inmemory_distributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_distribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_distribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_distributeContext inmemory_distribute() {
		Inmemory_distributeContext _localctx = new Inmemory_distributeContext(Context, State);
		EnterRule(_localctx, 260, RULE_inmemory_distribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2736; Match(DISTRIBUTE);
			State = 2745;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTO:
				{
				State = 2737; Match(AUTO);
				}
				break;
			case BY:
				{
				{
				State = 2738; Match(BY);
				State = 2743;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROWID:
					{
					State = 2739; Match(ROWID);
					State = 2740; Match(RANGE);
					}
					break;
				case PARTITION:
					{
					State = 2741; Match(PARTITION);
					}
					break;
				case SUBPARTITION:
					{
					State = 2742; Match(SUBPARTITION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			case Eof:
			case COLUMN:
			case COMPRESS:
			case INMEMORY:
			case LOB:
			case NOCOMPRESS:
			case NO:
			case OVERFLOW:
			case ROW:
			case TABLESPACE:
			case VARRAY:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_duplicateContext : ParserRuleContext {
		public ITerminalNode DUPLICATE() { return GetToken(PlSqlParser.DUPLICATE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_duplicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_duplicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_duplicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_duplicateContext inmemory_duplicate() {
		Inmemory_duplicateContext _localctx = new Inmemory_duplicateContext(Context, State);
		EnterRule(_localctx, 262, RULE_inmemory_duplicate);
		int _la;
		try {
			State = 2753;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DUPLICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2747; Match(DUPLICATE);
				State = 2749;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 2748; Match(ALL);
					}
				}

				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2751; Match(NO);
				State = 2752; Match(DUPLICATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_compressionContext : ParserRuleContext {
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode COLUMN() { return GetToken(PlSqlParser.COLUMN, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode LEVEL() { return GetToken(PlSqlParser.LEVEL, 0); }
		public ITerminalNode LOCKING() { return GetToken(PlSqlParser.LOCKING, 0); }
		public ITerminalNode BASIC() { return GetToken(PlSqlParser.BASIC, 0); }
		public ITerminalNode ADVANCED() { return GetToken(PlSqlParser.ADVANCED, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_compressionContext table_compression() {
		Table_compressionContext _localctx = new Table_compressionContext(Context, State);
		EnterRule(_localctx, 264, RULE_table_compression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2782;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				{
				State = 2755; Match(COMPRESS);
				}
				break;
			case ROW:
				{
				State = 2756; Match(ROW);
				State = 2757; Match(STORE);
				State = 2758; Match(COMPRESS);
				State = 2760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADVANCED || _la==BASIC) {
					{
					State = 2759;
					_la = TokenStream.LA(1);
					if ( !(_la==ADVANCED || _la==BASIC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case COLUMN:
				{
				State = 2762; Match(COLUMN);
				State = 2763; Match(STORE);
				State = 2764; Match(COMPRESS);
				State = 2770;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 2765; Match(FOR);
					State = 2766;
					_la = TokenStream.LA(1);
					if ( !(_la==ARCHIVE || _la==QUERY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2768;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HIGH || _la==LOW) {
						{
						State = 2767;
						_la = TokenStream.LA(1);
						if ( !(_la==HIGH || _la==LOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
				}

				State = 2778;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
				case 1:
					{
					State = 2773;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO) {
						{
						State = 2772; Match(NO);
						}
					}

					State = 2775; Match(ROW);
					State = 2776; Match(LEVEL);
					State = 2777; Match(LOCKING);
					}
					break;
				}
				}
				break;
			case NO:
				{
				State = 2780; Match(NO);
				State = 2781; Match(COMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_compressionContext : ParserRuleContext {
		public Prefix_compressionContext prefix_compression() {
			return GetRuleContext<Prefix_compressionContext>(0);
		}
		public Advanced_index_compressionContext advanced_index_compression() {
			return GetRuleContext<Advanced_index_compressionContext>(0);
		}
		public Index_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_compressionContext index_compression() {
		Index_compressionContext _localctx = new Index_compressionContext(Context, State);
		EnterRule(_localctx, 266, RULE_index_compression);
		try {
			State = 2786;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2784; prefix_compression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2785; advanced_index_compression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_compressionContext : ParserRuleContext {
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode NOCOMPRESS() { return GetToken(PlSqlParser.NOCOMPRESS, 0); }
		public Prefix_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_compressionContext prefix_compression() {
		Prefix_compressionContext _localctx = new Prefix_compressionContext(Context, State);
		EnterRule(_localctx, 268, RULE_prefix_compression);
		int _la;
		try {
			State = 2793;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2788; Match(COMPRESS);
				State = 2790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 683)) & ~0x3f) == 0 && ((1L << (_la - 683)) & ((1L << (UNSIGNED_INTEGER - 683)) | (1L << (APPROXIMATE_NUM_LIT - 683)) | (1L << (MINUS_SIGN - 683)))) != 0)) {
					{
					State = 2789; integer();
					}
				}

				}
				break;
			case NOCOMPRESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2792; Match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Advanced_index_compressionContext : ParserRuleContext {
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public ITerminalNode ADVANCED() { return GetToken(PlSqlParser.ADVANCED, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode NOCOMPRESS() { return GetToken(PlSqlParser.NOCOMPRESS, 0); }
		public Advanced_index_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_advanced_index_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdvanced_index_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Advanced_index_compressionContext advanced_index_compression() {
		Advanced_index_compressionContext _localctx = new Advanced_index_compressionContext(Context, State);
		EnterRule(_localctx, 270, RULE_advanced_index_compression);
		try {
			State = 2799;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2795; Match(COMPRESS);
				State = 2796; Match(ADVANCED);
				State = 2797; Match(LOW);
				}
				break;
			case NOCOMPRESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2798; Match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_partitioning_storageContext : ParserRuleContext {
		public ITerminalNode LOB() { return GetToken(PlSqlParser.LOB, 0); }
		public Lob_item_nameContext lob_item_name() {
			return GetRuleContext<Lob_item_nameContext>(0);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Lob_segnameContext lob_segname() {
			return GetRuleContext<Lob_segnameContext>(0);
		}
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public ITerminalNode BASICFILE() { return GetToken(PlSqlParser.BASICFILE, 0); }
		public ITerminalNode SECUREFILE() { return GetToken(PlSqlParser.SECUREFILE, 0); }
		public Lob_partitioning_storageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_partitioning_storage; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_partitioning_storage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_partitioning_storageContext lob_partitioning_storage() {
		Lob_partitioning_storageContext _localctx = new Lob_partitioning_storageContext(Context, State);
		EnterRule(_localctx, 272, RULE_lob_partitioning_storage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801; Match(LOB);
			State = 2802; Match(LEFT_PAREN);
			State = 2803; lob_item_name();
			State = 2804; Match(RIGHT_PAREN);
			State = 2805; Match(STORE);
			State = 2806; Match(AS);
			State = 2808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				State = 2807;
				_la = TokenStream.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2821;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 2810; lob_segname();
				State = 2815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 2811; Match(LEFT_PAREN);
					State = 2812; tablespace_clause();
					State = 2813; Match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 2:
				{
				State = 2817; Match(LEFT_PAREN);
				State = 2818; tablespace_clause();
				State = 2819; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_subpartition_clauseContext : ParserRuleContext {
		public Store_inContext store_in() {
			return GetRuleContext<Store_inContext>(0);
		}
		public Partition_clause_optionalContext[] partition_clause_optional() {
			return GetRuleContexts<Partition_clause_optionalContext>();
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return GetRuleContext<Partition_clause_optionalContext>(i);
		}
		public Tablespace_clauseContext[] tablespace_clause() {
			return GetRuleContexts<Tablespace_clauseContext>();
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return GetRuleContext<Tablespace_clauseContext>(i);
		}
		public Advanced_index_compressionContext[] advanced_index_compression() {
			return GetRuleContexts<Advanced_index_compressionContext>();
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return GetRuleContext<Advanced_index_compressionContext>(i);
		}
		public Usable_clauseContext[] usable_clause() {
			return GetRuleContexts<Usable_clauseContext>();
		}
		public Usable_clauseContext usable_clause(int i) {
			return GetRuleContext<Usable_clauseContext>(i);
		}
		public Index_subpartition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_subpartition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_subpartition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_subpartition_clauseContext index_subpartition_clause() {
		Index_subpartition_clauseContext _localctx = new Index_subpartition_clauseContext(Context, State);
		EnterRule(_localctx, 274, RULE_index_subpartition_clause);
		int _la;
		try {
			State = 2853;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2823; store_in();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2824; Match(LEFT_PAREN);
				State = 2825; partition_clause_optional();
				State = 2827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 2826; tablespace_clause();
					}
				}

				State = 2830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPRESS || _la==NOCOMPRESS) {
					{
					State = 2829; advanced_index_compression();
					}
				}

				State = 2833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					State = 2832; usable_clause();
					}
				}

				State = 2848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2835; Match(COMMA);
					State = 2836; partition_clause_optional();
					State = 2838;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TABLESPACE) {
						{
						State = 2837; tablespace_clause();
						}
					}

					State = 2841;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						State = 2840; advanced_index_compression();
						}
					}

					State = 2844;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==UNUSABLE || _la==USABLE) {
						{
						State = 2843; usable_clause();
						}
					}

					}
					}
					State = 2850;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2851; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Usable_clauseContext : ParserRuleContext {
		public ITerminalNode USABLE() { return GetToken(PlSqlParser.USABLE, 0); }
		public ITerminalNode UNUSABLE() { return GetToken(PlSqlParser.UNUSABLE, 0); }
		public Usable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usable_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsable_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Usable_clauseContext usable_clause() {
		Usable_clauseContext _localctx = new Usable_clauseContext(Context, State);
		EnterRule(_localctx, 276, RULE_usable_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2855;
			_la = TokenStream.LA(1);
			if ( !(_la==UNUSABLE || _la==USABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_attributesContext : ParserRuleContext {
		public Physicial_attributes_clauseContext[] physicial_attributes_clause() {
			return GetRuleContexts<Physicial_attributes_clauseContext>();
		}
		public Physicial_attributes_clauseContext physicial_attributes_clause(int i) {
			return GetRuleContext<Physicial_attributes_clauseContext>(i);
		}
		public Logging_clauseContext[] logging_clause() {
			return GetRuleContexts<Logging_clauseContext>();
		}
		public Logging_clauseContext logging_clause(int i) {
			return GetRuleContext<Logging_clauseContext>(i);
		}
		public ITerminalNode[] ONLINE() { return GetTokens(PlSqlParser.ONLINE); }
		public ITerminalNode ONLINE(int i) {
			return GetToken(PlSqlParser.ONLINE, i);
		}
		public ITerminalNode[] TABLESPACE() { return GetTokens(PlSqlParser.TABLESPACE); }
		public ITerminalNode TABLESPACE(int i) {
			return GetToken(PlSqlParser.TABLESPACE, i);
		}
		public Advanced_index_compressionContext[] advanced_index_compression() {
			return GetRuleContexts<Advanced_index_compressionContext>();
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return GetRuleContext<Advanced_index_compressionContext>(i);
		}
		public ITerminalNode[] REVERSE() { return GetTokens(PlSqlParser.REVERSE); }
		public ITerminalNode REVERSE(int i) {
			return GetToken(PlSqlParser.REVERSE, i);
		}
		public Partial_index_clauseContext[] partial_index_clause() {
			return GetRuleContexts<Partial_index_clauseContext>();
		}
		public Partial_index_clauseContext partial_index_clause(int i) {
			return GetRuleContext<Partial_index_clauseContext>(i);
		}
		public Parallel_clauseContext[] parallel_clause() {
			return GetRuleContexts<Parallel_clauseContext>();
		}
		public Parallel_clauseContext parallel_clause(int i) {
			return GetRuleContext<Parallel_clauseContext>(i);
		}
		public ITerminalNode[] SORT() { return GetTokens(PlSqlParser.SORT); }
		public ITerminalNode SORT(int i) {
			return GetToken(PlSqlParser.SORT, i);
		}
		public ITerminalNode[] NOSORT() { return GetTokens(PlSqlParser.NOSORT); }
		public ITerminalNode NOSORT(int i) {
			return GetToken(PlSqlParser.NOSORT, i);
		}
		public ITerminalNode[] VISIBLE() { return GetTokens(PlSqlParser.VISIBLE); }
		public ITerminalNode VISIBLE(int i) {
			return GetToken(PlSqlParser.VISIBLE, i);
		}
		public ITerminalNode[] INVISIBLE() { return GetTokens(PlSqlParser.INVISIBLE); }
		public ITerminalNode INVISIBLE(int i) {
			return GetToken(PlSqlParser.INVISIBLE, i);
		}
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(PlSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(PlSqlParser.DEFAULT, i);
		}
		public Index_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_attributes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_attributesContext index_attributes() {
		Index_attributesContext _localctx = new Index_attributesContext(Context, State);
		EnterRule(_localctx, 278, RULE_index_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2873;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMPRESS || _la==EMPTY || _la==FILESYSTEM_LIKE_LOGGING || ((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (INDEXING - 238)) | (1L << (INVISIBLE - 238)) | (1L << (LOGGING - 238)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (NOCOMPRESS - 339)) | (1L << (NOLOGGING - 339)) | (1L << (NOPARALLEL - 339)) | (1L << (NOSORT - 339)) | (1L << (ONLINE - 339)) | (1L << (PARALLEL - 339)))) != 0) || _la==REVERSE || _la==SORT || _la==TABLESPACE || _la==VISIBLE) {
				{
				State = 2871;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EMPTY:
					{
					State = 2857; physicial_attributes_clause();
					}
					break;
				case FILESYSTEM_LIKE_LOGGING:
				case LOGGING:
				case NOLOGGING:
					{
					State = 2858; logging_clause();
					}
					break;
				case ONLINE:
					{
					State = 2859; Match(ONLINE);
					}
					break;
				case TABLESPACE:
					{
					State = 2860; Match(TABLESPACE);
					State = 2863;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case A_LETTER:
					case ANALYZE:
					case ARRAY:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BUILD:
					case BULK:
					case BYTE:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CAST:
					case CHARACTER:
					case CHAR:
					case CHAR_CS:
					case CHR:
					case C_LETTER:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOUND:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID_ALL:
					case CORRUPT_XID:
					case COST:
					case COUNT:
					case CROSS:
					case CUBE:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATABASE:
					case DATA:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case ELEMENT:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENTITYESCAPING:
					case ERR:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FORALL:
					case FORCE:
					case FULL:
					case FUNCTION:
					case GROUPING:
					case HASH:
					case HIDE:
					case HOUR:
					case ID:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSTANTIABLE:
					case INSTEAD:
					case INTEGER:
					case INTERVAL:
					case INT:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case KEY:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LINK:
					case LOCAL:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINIMUM:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MONTH:
					case MULTISET:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR_CS:
					case NCHAR:
					case NCLOB:
					case NESTED:
					case NEW:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NO:
					case NOSCHEMACHECK:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPEN:
					case OPERATOR:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUTER:
					case OUT:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVEN:
					case POSITIVE:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PROGRAM:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REFERENCE:
					case REFERENCING:
					case REF:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT_CACHE:
					case RESULT:
					case RETURNING:
					case RETURN:
					case REUSE:
					case REVERSE:
					case REVOKE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROWID:
					case ROW:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVEPOINT:
					case SAVE:
					case SCHEMACHECK:
					case SCHEMA:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case STANDALONE:
					case STARTUP:
					case STATEMENT_ID:
					case STATEMENT:
					case STATIC:
					case STATISTICS:
					case STORE:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case SYSDATE:
					case TEMPORARY:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIME:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USERS:
					case USER:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR2:
					case VARCHAR:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSIONS:
					case VERSION:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITHIN:
					case WORK:
					case WRITE:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case XML:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case COVAR_:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case REGR_:
					case ROW_NUMBER:
					case SUBSTR:
					case TRIM:
					case SUM:
					case STDDEV:
					case VAR_:
					case VARIANCE:
					case DELIMITED_ID:
					case REGULAR_ID:
						{
						State = 2861; tablespace_name();
						}
						break;
					case DEFAULT:
						{
						State = 2862; Match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case COMPRESS:
				case NOCOMPRESS:
					{
					State = 2865; advanced_index_compression();
					}
					break;
				case NOSORT:
				case SORT:
					{
					State = 2866;
					_la = TokenStream.LA(1);
					if ( !(_la==NOSORT || _la==SORT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case REVERSE:
					{
					State = 2867; Match(REVERSE);
					}
					break;
				case INVISIBLE:
				case VISIBLE:
					{
					State = 2868;
					_la = TokenStream.LA(1);
					if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case INDEXING:
					{
					State = 2869; partial_index_clause();
					}
					break;
				case NOPARALLEL:
				case PARALLEL:
					{
					State = 2870; parallel_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partition_quantityContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Hash_partition_quantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partition_quantity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_partition_quantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partition_quantityContext hash_partition_quantity() {
		Hash_partition_quantityContext _localctx = new Hash_partition_quantityContext(Context, State);
		EnterRule(_localctx, 280, RULE_hash_partition_quantity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2876; Match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varray_itemContext : ParserRuleContext {
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public Varray_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varray_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarray_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Varray_itemContext varray_item() {
		Varray_itemContext _localctx = new Varray_itemContext(Context, State);
		EnterRule(_localctx, 282, RULE_varray_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2878; Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partial_index_clauseContext : ParserRuleContext {
		public ITerminalNode INDEXING() { return GetToken(PlSqlParser.INDEXING, 0); }
		public ITerminalNode PARTIAL() { return GetToken(PlSqlParser.PARTIAL, 0); }
		public ITerminalNode FULL() { return GetToken(PlSqlParser.FULL, 0); }
		public Partial_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartial_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partial_index_clauseContext partial_index_clause() {
		Partial_index_clauseContext _localctx = new Partial_index_clauseContext(Context, State);
		EnterRule(_localctx, 284, RULE_partial_index_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2880; Match(INDEXING);
			State = 2881;
			_la = TokenStream.LA(1);
			if ( !(_la==FULL || _la==PARTIAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_clauseContext : ParserRuleContext {
		public ITerminalNode NOPARALLEL() { return GetToken(PlSqlParser.NOPARALLEL, 0); }
		public ITerminalNode PARALLEL() { return GetToken(PlSqlParser.PARALLEL, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Parallel_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_clauseContext parallel_clause() {
		Parallel_clauseContext _localctx = new Parallel_clauseContext(Context, State);
		EnterRule(_localctx, 286, RULE_parallel_clause);
		try {
			State = 2886;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOPARALLEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2883; Match(NOPARALLEL);
				}
				break;
			case PARALLEL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2884; Match(PARALLEL);
				State = 2885; integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Domain_index_clauseContext : ParserRuleContext {
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public Domain_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domain_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Domain_index_clauseContext domain_index_clause() {
		Domain_index_clauseContext _localctx = new Domain_index_clauseContext(Context, State);
		EnterRule(_localctx, 288, RULE_domain_index_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2888; Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exceptions_clauseContext : ParserRuleContext {
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public Exceptions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exceptions_clauseContext exceptions_clause() {
		Exceptions_clauseContext _localctx = new Exceptions_clauseContext(Context, State);
		EnterRule(_localctx, 290, RULE_exceptions_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2890; Match(EXCEPTIONS);
			State = 2891; Match(INTO);
			State = 2892; table_fullname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tablespaceContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
			return GetRuleContext<Permanent_tablespace_clauseContext>(0);
		}
		public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
			return GetRuleContext<Temporary_tablespace_clauseContext>(0);
		}
		public Undo_tablespace_clauseContext undo_tablespace_clause() {
			return GetRuleContext<Undo_tablespace_clauseContext>(0);
		}
		public ITerminalNode BIGFILE() { return GetToken(PlSqlParser.BIGFILE, 0); }
		public ITerminalNode SMALLFILE() { return GetToken(PlSqlParser.SMALLFILE, 0); }
		public Create_tablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_tablespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_tablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tablespaceContext create_tablespace() {
		Create_tablespaceContext _localctx = new Create_tablespaceContext(Context, State);
		EnterRule(_localctx, 292, RULE_create_tablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2894; Match(CREATE);
			State = 2896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BIGFILE || _la==SMALLFILE) {
				{
				State = 2895;
				_la = TokenStream.LA(1);
				if ( !(_la==BIGFILE || _la==SMALLFILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2901;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE:
				{
				State = 2898; permanent_tablespace_clause();
				}
				break;
			case TEMPORARY:
				{
				State = 2899; temporary_tablespace_clause();
				}
				break;
			case UNDO:
				{
				State = 2900; undo_tablespace_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2903; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permanent_tablespace_clauseContext : ParserRuleContext {
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public Datafile_specificationContext datafile_specification() {
			return GetRuleContext<Datafile_specificationContext>(0);
		}
		public ITerminalNode[] MINIMUM() { return GetTokens(PlSqlParser.MINIMUM); }
		public ITerminalNode MINIMUM(int i) {
			return GetToken(PlSqlParser.MINIMUM, i);
		}
		public ITerminalNode[] EXTENT() { return GetTokens(PlSqlParser.EXTENT); }
		public ITerminalNode EXTENT(int i) {
			return GetToken(PlSqlParser.EXTENT, i);
		}
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(PlSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(PlSqlParser.BLOCKSIZE, i);
		}
		public Logging_clauseContext[] logging_clause() {
			return GetRuleContexts<Logging_clauseContext>();
		}
		public Logging_clauseContext logging_clause(int i) {
			return GetRuleContext<Logging_clauseContext>(i);
		}
		public ITerminalNode[] FORCE() { return GetTokens(PlSqlParser.FORCE); }
		public ITerminalNode FORCE(int i) {
			return GetToken(PlSqlParser.FORCE, i);
		}
		public ITerminalNode[] LOGGING() { return GetTokens(PlSqlParser.LOGGING); }
		public ITerminalNode LOGGING(int i) {
			return GetToken(PlSqlParser.LOGGING, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(PlSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(PlSqlParser.ENCRYPTION, i);
		}
		public Tablespace_encryption_specContext[] tablespace_encryption_spec() {
			return GetRuleContexts<Tablespace_encryption_specContext>();
		}
		public Tablespace_encryption_specContext tablespace_encryption_spec(int i) {
			return GetRuleContext<Tablespace_encryption_specContext>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(PlSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(PlSqlParser.DEFAULT, i);
		}
		public Extent_management_clauseContext[] extent_management_clause() {
			return GetRuleContexts<Extent_management_clauseContext>();
		}
		public Extent_management_clauseContext extent_management_clause(int i) {
			return GetRuleContext<Extent_management_clauseContext>(i);
		}
		public Segment_management_clauseContext[] segment_management_clause() {
			return GetRuleContexts<Segment_management_clauseContext>();
		}
		public Segment_management_clauseContext segment_management_clause(int i) {
			return GetRuleContext<Segment_management_clauseContext>(i);
		}
		public Flashback_mode_clauseContext[] flashback_mode_clause() {
			return GetRuleContexts<Flashback_mode_clauseContext>();
		}
		public Flashback_mode_clauseContext flashback_mode_clause(int i) {
			return GetRuleContext<Flashback_mode_clauseContext>(i);
		}
		public ITerminalNode[] ONLINE() { return GetTokens(PlSqlParser.ONLINE); }
		public ITerminalNode ONLINE(int i) {
			return GetToken(PlSqlParser.ONLINE, i);
		}
		public ITerminalNode[] OFFLINE() { return GetTokens(PlSqlParser.OFFLINE); }
		public ITerminalNode OFFLINE(int i) {
			return GetToken(PlSqlParser.OFFLINE, i);
		}
		public Permanent_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permanent_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermanent_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
		Permanent_tablespace_clauseContext _localctx = new Permanent_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 294, RULE_permanent_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905; tablespace_clause();
			State = 2907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATAFILE) {
				{
				State = 2906; datafile_specification();
				}
			}

			State = 2926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BLOCKSIZE || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (DEFAULT - 130)) | (1L << (ENCRYPTION - 130)) | (1L << (EXTENT - 130)) | (1L << (FILESYSTEM_LIKE_LOGGING - 130)))) != 0) || _la==FLASHBACK || _la==FORCE || ((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & ((1L << (LOGGING - 290)) | (1L << (MINIMUM - 290)) | (1L << (NOLOGGING - 290)))) != 0) || _la==OFFLINE || _la==ONLINE || _la==SEGMENT) {
				{
				State = 2924;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINIMUM:
					{
					State = 2909; Match(MINIMUM);
					State = 2910; Match(EXTENT);
					State = 2911; size_clause();
					}
					break;
				case BLOCKSIZE:
					{
					State = 2912; Match(BLOCKSIZE);
					State = 2913; size_clause();
					}
					break;
				case FILESYSTEM_LIKE_LOGGING:
				case LOGGING:
				case NOLOGGING:
					{
					State = 2914; logging_clause();
					}
					break;
				case FORCE:
					{
					State = 2915; Match(FORCE);
					State = 2916; Match(LOGGING);
					}
					break;
				case OFFLINE:
				case ONLINE:
					{
					State = 2917;
					_la = TokenStream.LA(1);
					if ( !(_la==OFFLINE || _la==ONLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case ENCRYPTION:
					{
					State = 2918; Match(ENCRYPTION);
					State = 2919; tablespace_encryption_spec();
					}
					break;
				case DEFAULT:
					{
					State = 2920; Match(DEFAULT);
					}
					break;
				case EXTENT:
					{
					State = 2921; extent_management_clause();
					}
					break;
				case SEGMENT:
					{
					State = 2922; segment_management_clause();
					}
					break;
				case FLASHBACK:
					{
					State = 2923; flashback_mode_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_encryption_specContext : ParserRuleContext {
		public IToken encrypt_algorithm;
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_encryption_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_encryption_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_encryption_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_encryption_specContext tablespace_encryption_spec() {
		Tablespace_encryption_specContext _localctx = new Tablespace_encryption_specContext(Context, State);
		EnterRule(_localctx, 296, RULE_tablespace_encryption_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2929; Match(USING);
			State = 2930; _localctx.encrypt_algorithm = Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logging_clauseContext : ParserRuleContext {
		public ITerminalNode LOGGING() { return GetToken(PlSqlParser.LOGGING, 0); }
		public ITerminalNode NOLOGGING() { return GetToken(PlSqlParser.NOLOGGING, 0); }
		public ITerminalNode FILESYSTEM_LIKE_LOGGING() { return GetToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logging_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogging_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logging_clauseContext logging_clause() {
		Logging_clauseContext _localctx = new Logging_clauseContext(Context, State);
		EnterRule(_localctx, 298, RULE_logging_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2932;
			_la = TokenStream.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extent_management_clauseContext : ParserRuleContext {
		public ITerminalNode EXTENT() { return GetToken(PlSqlParser.EXTENT, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(PlSqlParser.MANAGEMENT, 0); }
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode AUTOALLOCATE() { return GetToken(PlSqlParser.AUTOALLOCATE, 0); }
		public ITerminalNode UNIFORM() { return GetToken(PlSqlParser.UNIFORM, 0); }
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Extent_management_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extent_management_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtent_management_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extent_management_clauseContext extent_management_clause() {
		Extent_management_clauseContext _localctx = new Extent_management_clauseContext(Context, State);
		EnterRule(_localctx, 300, RULE_extent_management_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2934; Match(EXTENT);
			State = 2935; Match(MANAGEMENT);
			State = 2936; Match(LOCAL);
			State = 2943;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTOALLOCATE:
				{
				State = 2937; Match(AUTOALLOCATE);
				}
				break;
			case UNIFORM:
				{
				State = 2938; Match(UNIFORM);
				State = 2941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIZE) {
					{
					State = 2939; Match(SIZE);
					State = 2940; size_clause();
					}
				}

				}
				break;
			case BLOCKSIZE:
			case DEFAULT:
			case ENCRYPTION:
			case EXTENT:
			case FILESYSTEM_LIKE_LOGGING:
			case FLASHBACK:
			case FORCE:
			case LOGGING:
			case MINIMUM:
			case NOLOGGING:
			case OFFLINE:
			case ONLINE:
			case RETENTION:
			case SEGMENT:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Segment_management_clauseContext : ParserRuleContext {
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode SPACE_KEYWORD() { return GetToken(PlSqlParser.SPACE_KEYWORD, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(PlSqlParser.MANAGEMENT, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public ITerminalNode MANUAL() { return GetToken(PlSqlParser.MANUAL, 0); }
		public Segment_management_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment_management_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment_management_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Segment_management_clauseContext segment_management_clause() {
		Segment_management_clauseContext _localctx = new Segment_management_clauseContext(Context, State);
		EnterRule(_localctx, 302, RULE_segment_management_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945; Match(SEGMENT);
			State = 2946; Match(SPACE_KEYWORD);
			State = 2947; Match(MANAGEMENT);
			State = 2948;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTO || _la==MANUAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_mode_clauseContext : ParserRuleContext {
		public ITerminalNode FLASHBACK() { return GetToken(PlSqlParser.FLASHBACK, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public Flashback_mode_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_mode_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_mode_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_mode_clauseContext flashback_mode_clause() {
		Flashback_mode_clauseContext _localctx = new Flashback_mode_clauseContext(Context, State);
		EnterRule(_localctx, 304, RULE_flashback_mode_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950; Match(FLASHBACK);
			State = 2951;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Temporary_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public Tempfile_specificationContext tempfile_specification() {
			return GetRuleContext<Tempfile_specificationContext>(0);
		}
		public Tablespace_group_clauseContext tablespace_group_clause() {
			return GetRuleContext<Tablespace_group_clauseContext>(0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return GetRuleContext<Extent_management_clauseContext>(0);
		}
		public Temporary_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporary_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemporary_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
		Temporary_tablespace_clauseContext _localctx = new Temporary_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 306, RULE_temporary_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2953; Match(TEMPORARY);
			State = 2954; tablespace_clause();
			State = 2956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPFILE) {
				{
				State = 2955; tempfile_specification();
				}
			}

			State = 2959;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 2958; tablespace_group_clause();
				}
			}

			State = 2962;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT) {
				{
				State = 2961; extent_management_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_group_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_group_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_group_clauseContext tablespace_group_clause() {
		Tablespace_group_clauseContext _localctx = new Tablespace_group_clauseContext(Context, State);
		EnterRule(_localctx, 308, RULE_tablespace_group_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2964; Match(TABLESPACE);
			State = 2965; Match(GROUP);
			State = 2966;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR_STRING || _la==REGULAR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undo_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode UNDO() { return GetToken(PlSqlParser.UNDO, 0); }
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public Datafile_specificationContext datafile_specification() {
			return GetRuleContext<Datafile_specificationContext>(0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return GetRuleContext<Extent_management_clauseContext>(0);
		}
		public Tablespace_retention_clauseContext tablespace_retention_clause() {
			return GetRuleContext<Tablespace_retention_clauseContext>(0);
		}
		public Undo_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undo_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndo_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undo_tablespace_clauseContext undo_tablespace_clause() {
		Undo_tablespace_clauseContext _localctx = new Undo_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 310, RULE_undo_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2968; Match(UNDO);
			State = 2969; tablespace_clause();
			State = 2971;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATAFILE) {
				{
				State = 2970; datafile_specification();
				}
			}

			State = 2974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT) {
				{
				State = 2973; extent_management_clause();
				}
			}

			State = 2977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETENTION) {
				{
				State = 2976; tablespace_retention_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_retention_clauseContext : ParserRuleContext {
		public ITerminalNode RETENTION() { return GetToken(PlSqlParser.RETENTION, 0); }
		public ITerminalNode GUARANTEE() { return GetToken(PlSqlParser.GUARANTEE, 0); }
		public ITerminalNode NOGUARANTEE() { return GetToken(PlSqlParser.NOGUARANTEE, 0); }
		public Tablespace_retention_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_retention_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_retention_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_retention_clauseContext tablespace_retention_clause() {
		Tablespace_retention_clauseContext _localctx = new Tablespace_retention_clauseContext(Context, State);
		EnterRule(_localctx, 312, RULE_tablespace_retention_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2979; Match(RETENTION);
			State = 2980;
			_la = TokenStream.LA(1);
			if ( !(_la==GUARANTEE || _la==NOGUARANTEE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datafile_specificationContext : ParserRuleContext {
		public ITerminalNode DATAFILE() { return GetToken(PlSqlParser.DATAFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return GetRuleContext<Datafile_tempfile_specContext>(0);
		}
		public Datafile_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datafile_specification; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatafile_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datafile_specificationContext datafile_specification() {
		Datafile_specificationContext _localctx = new Datafile_specificationContext(Context, State);
		EnterRule(_localctx, 314, RULE_datafile_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2982; Match(DATAFILE);
			{
			State = 2984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2983; Match(COMMA);
				}
			}

			State = 2986; datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tempfile_specificationContext : ParserRuleContext {
		public ITerminalNode TEMPFILE() { return GetToken(PlSqlParser.TEMPFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return GetRuleContext<Datafile_tempfile_specContext>(0);
		}
		public Tempfile_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempfile_specification; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempfile_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tempfile_specificationContext tempfile_specification() {
		Tempfile_specificationContext _localctx = new Tempfile_specificationContext(Context, State);
		EnterRule(_localctx, 316, RULE_tempfile_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2988; Match(TEMPFILE);
			{
			State = 2990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2989; Match(COMMA);
				}
			}

			State = 2992; datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datafile_tempfile_specContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public Autoextend_clauseContext autoextend_clause() {
			return GetRuleContext<Autoextend_clauseContext>(0);
		}
		public Datafile_tempfile_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datafile_tempfile_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatafile_tempfile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datafile_tempfile_specContext datafile_tempfile_spec() {
		Datafile_tempfile_specContext _localctx = new Datafile_tempfile_specContext(Context, State);
		EnterRule(_localctx, 318, RULE_datafile_tempfile_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 2994; Match(CHAR_STRING);
				}
			}

			State = 2999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 2997; Match(SIZE);
				State = 2998; size_clause();
				}
			}

			State = 3002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 3001; Match(REUSE);
				}
			}

			State = 3005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND) {
				{
				State = 3004; autoextend_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Redo_log_file_specContext : ParserRuleContext {
		public ITerminalNode DATAFILE() { return GetToken(PlSqlParser.DATAFILE, 0); }
		public ITerminalNode[] CHAR_STRING() { return GetTokens(PlSqlParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(PlSqlParser.CHAR_STRING, i);
		}
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode BLOCKSIZE() { return GetToken(PlSqlParser.BLOCKSIZE, 0); }
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public Redo_log_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redo_log_file_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedo_log_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Redo_log_file_specContext redo_log_file_spec() {
		Redo_log_file_specContext _localctx = new Redo_log_file_specContext(Context, State);
		EnterRule(_localctx, 320, RULE_redo_log_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3007; Match(DATAFILE);
			State = 3019;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_STRING:
				{
				State = 3008; Match(CHAR_STRING);
				}
				break;
			case LEFT_PAREN:
				{
				State = 3009; Match(LEFT_PAREN);
				State = 3014;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3011;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3010; Match(COMMA);
						}
					}

					State = 3013; Match(CHAR_STRING);
					}
					}
					State = 3016;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHAR_STRING || _la==COMMA );
				State = 3018; Match(RIGHT_PAREN);
				}
				break;
			case Eof:
			case BLOCKSIZE:
			case REUSE:
			case SIZE:
				break;
			default:
				break;
			}
			State = 3023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 3021; Match(SIZE);
				State = 3022; size_clause();
				}
			}

			State = 3027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLOCKSIZE) {
				{
				State = 3025; Match(BLOCKSIZE);
				State = 3026; size_clause();
				}
			}

			State = 3030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 3029; Match(REUSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Autoextend_clauseContext : ParserRuleContext {
		public ITerminalNode AUTOEXTEND() { return GetToken(PlSqlParser.AUTOEXTEND, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode NEXT() { return GetToken(PlSqlParser.NEXT, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Maxsize_clauseContext maxsize_clause() {
			return GetRuleContext<Maxsize_clauseContext>(0);
		}
		public Autoextend_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_autoextend_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoextend_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Autoextend_clauseContext autoextend_clause() {
		Autoextend_clauseContext _localctx = new Autoextend_clauseContext(Context, State);
		EnterRule(_localctx, 322, RULE_autoextend_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032; Match(AUTOEXTEND);
			State = 3042;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
				{
				State = 3033; Match(OFF);
				}
				break;
			case ON:
				{
				State = 3034; Match(ON);
				State = 3037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT) {
					{
					State = 3035; Match(NEXT);
					State = 3036; size_clause();
					}
				}

				State = 3040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MAXSIZE) {
					{
					State = 3039; maxsize_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maxsize_clauseContext : ParserRuleContext {
		public ITerminalNode MAXSIZE() { return GetToken(PlSqlParser.MAXSIZE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Maxsize_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxsize_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxsize_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Maxsize_clauseContext maxsize_clause() {
		Maxsize_clauseContext _localctx = new Maxsize_clauseContext(Context, State);
		EnterRule(_localctx, 324, RULE_maxsize_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3044; Match(MAXSIZE);
			State = 3047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNLIMITED:
				{
				State = 3045; Match(UNLIMITED);
				}
				break;
			case UNSIGNED_INTEGER:
				{
				State = 3046; size_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return GetRuleContext<Subquery_basic_elementsContext>(0);
		}
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 326, RULE_subquery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3049; subquery_basic_elements();
			State = 3053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				State = 3050; subquery_operation_part();
				}
				}
				State = 3055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(PlSqlParser.GLOBAL, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode CREATION() { return GetToken(PlSqlParser.CREATION, 0); }
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public ITerminalNode NOCOMPRESS() { return GetToken(PlSqlParser.NOCOMPRESS, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(PlSqlParser.PRESERVE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode DEFERRED() { return GetToken(PlSqlParser.DEFERRED, 0); }
		public ITerminalNode LOGGING() { return GetToken(PlSqlParser.LOGGING, 0); }
		public ITerminalNode NOLOGGING() { return GetToken(PlSqlParser.NOLOGGING, 0); }
		public ITerminalNode FILESYSTEM_LIKE_LOGGING() { return GetToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Datatype_null_enableContext[] datatype_null_enable() {
			return GetRuleContexts<Datatype_null_enableContext>();
		}
		public Datatype_null_enableContext datatype_null_enable(int i) {
			return GetRuleContext<Datatype_null_enableContext>(i);
		}
		public ITerminalNode BASIC() { return GetToken(PlSqlParser.BASIC, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Primary_key_clauseContext[] primary_key_clause() {
			return GetRuleContexts<Primary_key_clauseContext>();
		}
		public Primary_key_clauseContext primary_key_clause(int i) {
			return GetRuleContext<Primary_key_clauseContext>(i);
		}
		public Foreign_key_clauseContext[] foreign_key_clause() {
			return GetRuleContexts<Foreign_key_clauseContext>();
		}
		public Foreign_key_clauseContext foreign_key_clause(int i) {
			return GetRuleContext<Foreign_key_clauseContext>(i);
		}
		public Unique_key_clauseContext[] unique_key_clause() {
			return GetRuleContexts<Unique_key_clauseContext>();
		}
		public Unique_key_clauseContext unique_key_clause(int i) {
			return GetRuleContext<Unique_key_clauseContext>(i);
		}
		public Check_constraintContext[] check_constraint() {
			return GetRuleContexts<Check_constraintContext>();
		}
		public Check_constraintContext check_constraint(int i) {
			return GetRuleContext<Check_constraintContext>(i);
		}
		public ITerminalNode OLTP() { return GetToken(PlSqlParser.OLTP, 0); }
		public ITerminalNode[] CONSTRAINT() { return GetTokens(PlSqlParser.CONSTRAINT); }
		public ITerminalNode CONSTRAINT(int i) {
			return GetToken(PlSqlParser.CONSTRAINT, i);
		}
		public Constraint_nameContext[] constraint_name() {
			return GetRuleContexts<Constraint_nameContext>();
		}
		public Constraint_nameContext constraint_name(int i) {
			return GetRuleContext<Constraint_nameContext>(i);
		}
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 328, RULE_create_table);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3056; Match(CREATE);
			State = 3059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL) {
				{
				State = 3057; Match(GLOBAL);
				State = 3058; Match(TEMPORARY);
				}
			}

			State = 3061; Match(TABLE);
			State = 3062; tableview_name();
			State = 3090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3063; Match(LEFT_PAREN);
				State = 3068;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3065;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3064; Match(COMMA);
							}
						}

						State = 3067; datatype_null_enable();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3070;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,346,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3072; Match(COMMA);
					State = 3075;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CONSTRAINT) {
						{
						State = 3073; Match(CONSTRAINT);
						State = 3074; constraint_name();
						}
					}

					State = 3081;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY:
						{
						State = 3077; primary_key_clause();
						}
						break;
					case FOREIGN:
						{
						State = 3078; foreign_key_clause();
						}
						break;
					case UNIQUE:
						{
						State = 3079; unique_key_clause();
						}
						break;
					case CHECK:
						{
						State = 3080; check_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 3087;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3088; Match(RIGHT_PAREN);
				}
			}

			State = 3096;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3092; Match(ON);
				State = 3093; Match(COMMIT);
				State = 3094;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETE || _la==PRESERVE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3095; Match(ROWS);
				}
			}

			State = 3101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
			case 1:
				{
				State = 3098; Match(SEGMENT);
				State = 3099; Match(CREATION);
				State = 3100;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 3103; tablespace_clause();
				}
			}

			State = 3107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) {
				{
				State = 3106;
				_la = TokenStream.LA(1);
				if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				{
				State = 3109; Match(COMPRESS);
				State = 3119;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BASIC:
					{
					State = 3110; Match(BASIC);
					}
					break;
				case FOR:
					{
					State = 3111; Match(FOR);
					State = 3117;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OLTP:
						{
						State = 3112; Match(OLTP);
						}
						break;
					case ARCHIVE:
					case QUERY:
						{
						State = 3113;
						_la = TokenStream.LA(1);
						if ( !(_la==ARCHIVE || _la==QUERY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 3115;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==HIGH || _la==LOW) {
							{
							State = 3114;
							_la = TokenStream.LA(1);
							if ( !(_la==HIGH || _la==LOW) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case Eof:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GRANT:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case SOLIDUS:
				case SEMICOLON:
				case PROMPT:
				case START_CMD:
				case REGULAR_ID:
					break;
				default:
					break;
				}
				}
				break;
			case NOCOMPRESS:
				{
				State = 3121; Match(NOCOMPRESS);
				}
				break;
			case Eof:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CREATE:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GRANT:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case SOLIDUS:
			case SEMICOLON:
			case PROMPT:
			case START_CMD:
			case REGULAR_ID:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public Tablespace_nameContext tablespace_name() {
			return GetRuleContext<Tablespace_nameContext>(0);
		}
		public Tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_clauseContext tablespace_clause() {
		Tablespace_clauseContext _localctx = new Tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 330, RULE_tablespace_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3124; Match(TABLESPACE);
			State = 3125; tablespace_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_inContext : ParserRuleContext {
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public Store_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_in; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStore_in(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Store_inContext store_in() {
		Store_inContext _localctx = new Store_inContext(Context, State);
		EnterRule(_localctx, 332, RULE_store_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3127; Match(STORE);
			State = 3128; Match(IN);
			State = 3129; Match(LEFT_PAREN);
			State = 3130; tablespace_name();
			State = 3135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3131; Match(COMMA);
				State = 3132; tablespace_name();
				}
				}
				State = 3137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3138; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Storage_clauseContext : ParserRuleContext {
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public IToken minextents;
		public IToken pctincrease;
		public IToken freelists;
		public IToken freelist_groups;
		public ITerminalNode STORAGE() { return GetToken(PlSqlParser.STORAGE, 0); }
		public ITerminalNode[] INITIAL() { return GetTokens(PlSqlParser.INITIAL); }
		public ITerminalNode INITIAL(int i) {
			return GetToken(PlSqlParser.INITIAL, i);
		}
		public ITerminalNode[] NEXT() { return GetTokens(PlSqlParser.NEXT); }
		public ITerminalNode NEXT(int i) {
			return GetToken(PlSqlParser.NEXT, i);
		}
		public ITerminalNode[] MINEXTENTS() { return GetTokens(PlSqlParser.MINEXTENTS); }
		public ITerminalNode MINEXTENTS(int i) {
			return GetToken(PlSqlParser.MINEXTENTS, i);
		}
		public ITerminalNode[] PCTINCREASE() { return GetTokens(PlSqlParser.PCTINCREASE); }
		public ITerminalNode PCTINCREASE(int i) {
			return GetToken(PlSqlParser.PCTINCREASE, i);
		}
		public ITerminalNode[] FREELISTS() { return GetTokens(PlSqlParser.FREELISTS); }
		public ITerminalNode FREELISTS(int i) {
			return GetToken(PlSqlParser.FREELISTS, i);
		}
		public ITerminalNode[] FREELIST() { return GetTokens(PlSqlParser.FREELIST); }
		public ITerminalNode FREELIST(int i) {
			return GetToken(PlSqlParser.FREELIST, i);
		}
		public ITerminalNode[] GROUPS() { return GetTokens(PlSqlParser.GROUPS); }
		public ITerminalNode GROUPS(int i) {
			return GetToken(PlSqlParser.GROUPS, i);
		}
		public ITerminalNode[] OPTIMAL() { return GetTokens(PlSqlParser.OPTIMAL); }
		public ITerminalNode OPTIMAL(int i) {
			return GetToken(PlSqlParser.OPTIMAL, i);
		}
		public ITerminalNode[] BUFFER_POOL() { return GetTokens(PlSqlParser.BUFFER_POOL); }
		public ITerminalNode BUFFER_POOL(int i) {
			return GetToken(PlSqlParser.BUFFER_POOL, i);
		}
		public ITerminalNode[] FLASH_CACHE() { return GetTokens(PlSqlParser.FLASH_CACHE); }
		public ITerminalNode FLASH_CACHE(int i) {
			return GetToken(PlSqlParser.FLASH_CACHE, i);
		}
		public ITerminalNode[] ENCRYPT() { return GetTokens(PlSqlParser.ENCRYPT); }
		public ITerminalNode ENCRYPT(int i) {
			return GetToken(PlSqlParser.ENCRYPT, i);
		}
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public ITerminalNode[] KEEP() { return GetTokens(PlSqlParser.KEEP); }
		public ITerminalNode KEEP(int i) {
			return GetToken(PlSqlParser.KEEP, i);
		}
		public ITerminalNode[] RECYCLE() { return GetTokens(PlSqlParser.RECYCLE); }
		public ITerminalNode RECYCLE(int i) {
			return GetToken(PlSqlParser.RECYCLE, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(PlSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(PlSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(PlSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(PlSqlParser.NONE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(PlSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(PlSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(PlSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(PlSqlParser.NULL, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storage_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorage_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Storage_clauseContext storage_clause() {
		Storage_clauseContext _localctx = new Storage_clauseContext(Context, State);
		EnterRule(_localctx, 334, RULE_storage_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3140; Match(STORAGE);
			State = 3141; Match(LEFT_PAREN);
			State = 3165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 3165;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INITIAL:
					{
					State = 3142; Match(INITIAL);
					State = 3143; _localctx.initial_size = size_clause();
					}
					break;
				case NEXT:
					{
					State = 3144; Match(NEXT);
					State = 3145; _localctx.next_size = size_clause();
					}
					break;
				case MINEXTENTS:
					{
					State = 3146; Match(MINEXTENTS);
					State = 3147;
					_localctx.minextents = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						_localctx.minextents = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					State = 3148; Match(PCTINCREASE);
					State = 3149; _localctx.pctincrease = Match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					State = 3150; Match(FREELISTS);
					State = 3151; _localctx.freelists = Match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					State = 3152; Match(FREELIST);
					State = 3153; Match(GROUPS);
					State = 3154; _localctx.freelist_groups = Match(UNSIGNED_INTEGER);
					}
					break;
				case OPTIMAL:
					{
					State = 3155; Match(OPTIMAL);
					State = 3158;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						State = 3156; size_clause();
						}
						break;
					case NULL:
						{
						State = 3157; Match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case BUFFER_POOL:
					{
					State = 3160; Match(BUFFER_POOL);
					State = 3161;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					State = 3162; Match(FLASH_CACHE);
					State = 3163;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case ENCRYPT:
					{
					State = 3164; Match(ENCRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 3167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BUFFER_POOL || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (ENCRYPT - 165)) | (1L << (FLASH_CACHE - 165)) | (1L << (FREELIST - 165)) | (1L << (FREELISTS - 165)))) != 0) || _la==INITIAL || _la==MINEXTENTS || _la==NEXT || _la==OPTIMAL || _la==PCTINCREASE );
			State = 3169; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype_null_enableContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode SORT() { return GetToken(PlSqlParser.SORT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ENCRYPT() { return GetToken(PlSqlParser.ENCRYPT, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode[] CHAR_STRING() { return GetTokens(PlSqlParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(PlSqlParser.CHAR_STRING, i);
		}
		public ITerminalNode IDENTIFIED() { return GetToken(PlSqlParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public ITerminalNode SALT() { return GetToken(PlSqlParser.SALT, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Datatype_null_enableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype_null_enable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype_null_enable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datatype_null_enableContext datatype_null_enable() {
		Datatype_null_enableContext _localctx = new Datatype_null_enableContext(Context, State);
		EnterRule(_localctx, 336, RULE_datatype_null_enable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3171; column_name();
			State = 3172; datatype();
			State = 3174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SORT) {
				{
				State = 3173; Match(SORT);
				}
			}

			State = 3178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 3176; Match(DEFAULT);
				State = 3177; expression();
				}
			}

			State = 3199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCRYPT) {
				{
				State = 3180; Match(ENCRYPT);
				State = 3183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 3181; Match(USING);
					State = 3182; Match(CHAR_STRING);
					}
				}

				State = 3188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIED) {
					{
					State = 3185; Match(IDENTIFIED);
					State = 3186; Match(BY);
					State = 3187; Match(REGULAR_ID);
					}
				}

				State = 3191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHAR_STRING) {
					{
					State = 3190; Match(CHAR_STRING);
					}
				}

				State = 3197;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
				case 1:
					{
					State = 3194;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO) {
						{
						State = 3193; Match(NO);
						}
					}

					State = 3196; Match(SALT);
					}
					break;
				}
				}
			}

			State = 3203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3201; Match(NOT);
				State = 3202; Match(NULL);
				}
			}

			State = 3206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				{
				State = 3205;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Size_clauseContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_size_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSize_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Size_clauseContext size_clause() {
		Size_clauseContext _localctx = new Size_clauseContext(Context, State);
		EnterRule(_localctx, 338, RULE_size_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3208; Match(UNSIGNED_INTEGER);
			State = 3210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REGULAR_ID) {
				{
				State = 3209; Match(REGULAR_ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 340, RULE_drop_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3212; Match(DROP);
			State = 3213; Match(TABLE);
			State = 3214; tableview_name();
			State = 3215; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_on_columnContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COLUMN() { return GetToken(PlSqlParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode PERIOD() { return GetToken(PlSqlParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_on_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_on_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_on_columnContext comment_on_column() {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(Context, State);
		EnterRule(_localctx, 342, RULE_comment_on_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3217; Match(COMMENT);
			State = 3218; Match(ON);
			State = 3219; Match(COLUMN);
			State = 3220; tableview_name();
			State = 3221; Match(PERIOD);
			State = 3222; column_name();
			State = 3223; Match(IS);
			State = 3224; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(PlSqlParser.PUBLIC, 0); }
		public ITerminalNode SYNONYM() { return GetToken(PlSqlParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return GetRuleContext<Synonym_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public ITerminalNode[] PERIOD() { return GetTokens(PlSqlParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(PlSqlParser.PERIOD, i);
		}
		public ITerminalNode AT_SIGN() { return GetToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(Context, State);
		EnterRule(_localctx, 344, RULE_create_synonym);
		int _la;
		try {
			State = 3268;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3226; Match(CREATE);
				State = 3229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 3227; Match(OR);
					State = 3228; Match(REPLACE);
					}
				}

				State = 3231; Match(PUBLIC);
				State = 3232; Match(SYNONYM);
				State = 3233; synonym_name();
				State = 3234; Match(FOR);
				State = 3238;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
				case 1:
					{
					State = 3235; schema_name();
					State = 3236; Match(PERIOD);
					}
					break;
				}
				State = 3240; schema_object_name();
				State = 3243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN) {
					{
					State = 3241; Match(AT_SIGN);
					State = 3242; link_name();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3245; Match(CREATE);
				State = 3248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 3246; Match(OR);
					State = 3247; Match(REPLACE);
					}
				}

				State = 3250; Match(SYNONYM);
				State = 3254;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
				case 1:
					{
					State = 3251; schema_name();
					State = 3252; Match(PERIOD);
					}
					break;
				}
				State = 3256; synonym_name();
				State = 3257; Match(FOR);
				State = 3261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
				case 1:
					{
					State = 3258; schema_name();
					State = 3259; Match(PERIOD);
					}
					break;
				}
				State = 3263; schema_object_name();
				State = 3266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SIGN) {
					{
					State = 3264; Match(AT_SIGN);
					State = 3265; link_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_on_tableContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_on_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_on_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_on_tableContext comment_on_table() {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(Context, State);
		EnterRule(_localctx, 346, RULE_comment_on_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3270; Match(COMMENT);
			State = 3271; Match(ON);
			State = 3272; Match(TABLE);
			State = 3273; tableview_name();
			State = 3274; Match(IS);
			State = 3275; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Add_constraintContext add_constraint() {
			return GetRuleContext<Add_constraintContext>(0);
		}
		public Drop_constraintContext drop_constraint() {
			return GetRuleContext<Drop_constraintContext>(0);
		}
		public Enable_constraintContext enable_constraint() {
			return GetRuleContext<Enable_constraintContext>(0);
		}
		public Disable_constraintContext disable_constraint() {
			return GetRuleContext<Disable_constraintContext>(0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 348, RULE_alter_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3277; Match(ALTER);
			State = 3278; Match(TABLE);
			State = 3279; tableview_name();
			State = 3284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 3280; add_constraint();
				}
				break;
			case DROP:
				{
				State = 3281; drop_constraint();
				}
				break;
			case ENABLE:
				{
				State = 3282; enable_constraint();
				}
				break;
			case DISABLE:
				{
				State = 3283; disable_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_constraintContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return GetRuleContext<Primary_key_clauseContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return GetRuleContext<Unique_key_clauseContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_constraintContext add_constraint() {
		Add_constraintContext _localctx = new Add_constraintContext(Context, State);
		EnterRule(_localctx, 350, RULE_add_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3286; Match(ADD);
			State = 3289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 3287; Match(CONSTRAINT);
				State = 3288; constraint_name();
				}
			}

			State = 3295;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				{
				State = 3291; primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				State = 3292; foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				State = 3293; unique_key_clause();
				}
				break;
			case CHECK:
				{
				State = 3294; check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(PlSqlParser.CHECK, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_constraintContext check_constraint() {
		Check_constraintContext _localctx = new Check_constraintContext(Context, State);
		EnterRule(_localctx, 352, RULE_check_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3297; Match(CHECK);
			State = 3298; Match(LEFT_PAREN);
			State = 3299; condition();
			State = 3300; Match(RIGHT_PAREN);
			State = 3302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
			case 1:
				{
				State = 3301; Match(DISABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_constraintContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Drop_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_constraintContext drop_constraint() {
		Drop_constraintContext _localctx = new Drop_constraintContext(Context, State);
		EnterRule(_localctx, 354, RULE_drop_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3304; Match(DROP);
			State = 3305; Match(CONSTRAINT);
			State = 3306; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_constraintContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Enable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_constraintContext enable_constraint() {
		Enable_constraintContext _localctx = new Enable_constraintContext(Context, State);
		EnterRule(_localctx, 356, RULE_enable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3308; Match(ENABLE);
			State = 3309; Match(CONSTRAINT);
			State = 3310; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_constraintContext : ParserRuleContext {
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Disable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disable_constraintContext disable_constraint() {
		Disable_constraintContext _localctx = new Disable_constraintContext(Context, State);
		EnterRule(_localctx, 358, RULE_disable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3312; Match(DISABLE);
			State = 3313; Match(CONSTRAINT);
			State = 3314; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode FOREIGN() { return GetToken(PlSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return GetRuleContext<On_delete_clauseContext>(0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 360, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3316; Match(FOREIGN);
			State = 3317; Match(KEY);
			State = 3318; paren_column_list();
			State = 3319; references_clause();
			State = 3321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3320; on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class References_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCES() { return GetToken(PlSqlParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public References_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferences_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public References_clauseContext references_clause() {
		References_clauseContext _localctx = new References_clauseContext(Context, State);
		EnterRule(_localctx, 362, RULE_references_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3323; Match(REFERENCES);
			State = 3324; tableview_name();
			State = 3325; paren_column_list();
			State = 3333;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				{
				State = 3326; Match(ON);
				State = 3327; Match(DELETE);
				State = 3331;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CASCADE:
					{
					State = 3328; Match(CASCADE);
					}
					break;
				case SET:
					{
					State = 3329; Match(SET);
					State = 3330; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_delete_clauseContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_delete_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_delete_clauseContext on_delete_clause() {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(Context, State);
		EnterRule(_localctx, 364, RULE_on_delete_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3335; Match(ON);
			State = 3336; Match(DELETE);
			State = 3340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE:
				{
				State = 3337; Match(CASCADE);
				}
				break;
			case SET:
				{
				State = 3338; Match(SET);
				State = 3339; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_key_clauseContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnique_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unique_key_clauseContext unique_key_clause() {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(Context, State);
		EnterRule(_localctx, 366, RULE_unique_key_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3342; Match(UNIQUE);
			State = 3343; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_key_clauseContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(PlSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_key_clauseContext primary_key_clause() {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(Context, State);
		EnterRule(_localctx, 368, RULE_primary_key_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3345; Match(PRIMARY);
			State = 3346; Match(KEY);
			State = 3347; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_blockContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(PlSqlParser.SEMICOLON, 0); }
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_handlerContext[] exception_handler() {
			return GetRuleContexts<Exception_handlerContext>();
		}
		public Exception_handlerContext exception_handler(int i) {
			return GetRuleContext<Exception_handlerContext>(i);
		}
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_blockContext anonymous_block() {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(Context, State);
		EnterRule(_localctx, 370, RULE_anonymous_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 3349; Match(DECLARE);
				State = 3350; seq_of_declare_specs();
				}
			}

			State = 3353; Match(BEGIN);
			State = 3354; seq_of_statements();
			State = 3361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 3355; Match(EXCEPTION);
				State = 3357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3356; exception_handler();
					}
					}
					State = 3359;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
			}

			State = 3363; Match(END);
			State = 3364; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoker_rights_clauseContext : ParserRuleContext {
		public ITerminalNode AUTHID() { return GetToken(PlSqlParser.AUTHID, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(PlSqlParser.CURRENT_USER, 0); }
		public ITerminalNode DEFINER() { return GetToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoker_rights_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoker_rights_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Invoker_rights_clauseContext invoker_rights_clause() {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(Context, State);
		EnterRule(_localctx, 372, RULE_invoker_rights_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3366; Match(AUTHID);
			State = 3367;
			_la = TokenStream.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_parameters_clauseContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_parameters_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler_parameters_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_parameters_clauseContext compiler_parameters_clause() {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(Context, State);
		EnterRule(_localctx, 374, RULE_compiler_parameters_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3369; identifier();
			State = 3370; Match(EQUALS_OP);
			State = 3371; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_specContext : ParserRuleContext {
		public ITerminalNode LANGUAGE() { return GetToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return GetRuleContext<Java_specContext>(0);
		}
		public C_specContext c_spec() {
			return GetRuleContext<C_specContext>(0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_specContext call_spec() {
		Call_specContext _localctx = new Call_specContext(Context, State);
		EnterRule(_localctx, 376, RULE_call_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3373; Match(LANGUAGE);
			State = 3376;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JAVA:
				{
				State = 3374; java_spec();
				}
				break;
			case C_LETTER:
				{
				State = 3375; c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_specContext : ParserRuleContext {
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJava_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Java_specContext java_spec() {
		Java_specContext _localctx = new Java_specContext(Context, State);
		EnterRule(_localctx, 378, RULE_java_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3378; Match(JAVA);
			State = 3379; Match(NAME);
			State = 3380; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_specContext : ParserRuleContext {
		public ITerminalNode C_LETTER() { return GetToken(PlSqlParser.C_LETTER, 0); }
		public ITerminalNode LIBRARY() { return GetToken(PlSqlParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return GetRuleContext<C_agent_in_clauseContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode CONTEXT() { return GetToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return GetRuleContext<C_parameters_clauseContext>(0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_specContext c_spec() {
		C_specContext _localctx = new C_specContext(Context, State);
		EnterRule(_localctx, 380, RULE_c_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3382; Match(C_LETTER);
			State = 3385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 3383; Match(NAME);
				State = 3384; Match(CHAR_STRING);
				}
			}

			State = 3387; Match(LIBRARY);
			State = 3388; identifier();
			State = 3390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGENT) {
				{
				State = 3389; c_agent_in_clause();
				}
			}

			State = 3394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 3392; Match(WITH);
				State = 3393; Match(CONTEXT);
				}
			}

			State = 3397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMETERS) {
				{
				State = 3396; c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_agent_in_clauseContext : ParserRuleContext {
		public ITerminalNode AGENT() { return GetToken(PlSqlParser.AGENT, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_agent_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_agent_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_agent_in_clauseContext c_agent_in_clause() {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(Context, State);
		EnterRule(_localctx, 382, RULE_c_agent_in_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3399; Match(AGENT);
			State = 3400; Match(IN);
			State = 3401; Match(LEFT_PAREN);
			State = 3402; expressions();
			State = 3403; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_parameters_clauseContext : ParserRuleContext {
		public ITerminalNode PARAMETERS() { return GetToken(PlSqlParser.PARAMETERS, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_parameters_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_parameters_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_parameters_clauseContext c_parameters_clause() {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(Context, State);
		EnterRule(_localctx, 384, RULE_c_parameters_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3405; Match(PARAMETERS);
			State = 3406; Match(LEFT_PAREN);
			State = 3411;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 3407; expressions();
				}
				break;
			case PERIOD:
				{
				State = 3408; Match(PERIOD);
				State = 3409; Match(PERIOD);
				State = 3410; Match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3413; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public ITerminalNode[] IN() { return GetTokens(PlSqlParser.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(PlSqlParser.IN, i);
		}
		public ITerminalNode[] OUT() { return GetTokens(PlSqlParser.OUT); }
		public ITerminalNode OUT(int i) {
			return GetToken(PlSqlParser.OUT, i);
		}
		public ITerminalNode[] INOUT() { return GetTokens(PlSqlParser.INOUT); }
		public ITerminalNode INOUT(int i) {
			return GetToken(PlSqlParser.INOUT, i);
		}
		public ITerminalNode[] NOCOPY() { return GetTokens(PlSqlParser.NOCOPY); }
		public ITerminalNode NOCOPY(int i) {
			return GetToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 386, RULE_parameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3415; parameter_name();
			State = 3419;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,399,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3416;
					_la = TokenStream.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 3421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,399,Context);
			}
			State = 3423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				{
				State = 3422; type_spec();
				}
				break;
			}
			State = 3426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3425; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_partContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(PlSqlParser.ASSIGN_OP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_partContext default_value_part() {
		Default_value_partContext _localctx = new Default_value_partContext(Context, State);
		EnterRule(_localctx, 388, RULE_default_value_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3428;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3429; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seq_of_declare_specsContext : ParserRuleContext {
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public Seq_of_declare_specsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seq_of_declare_specs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq_of_declare_specs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seq_of_declare_specsContext seq_of_declare_specs() {
		Seq_of_declare_specsContext _localctx = new Seq_of_declare_specsContext(Context, State);
		EnterRule(_localctx, 390, RULE_seq_of_declare_specs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3432;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3431; declare_spec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3434;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,402,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_specContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return GetRuleContext<Pragma_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Procedure_bodyContext procedure_body() {
			return GetRuleContext<Procedure_bodyContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_specContext declare_spec() {
		Declare_specContext _localctx = new Declare_specContext(Context, State);
		EnterRule(_localctx, 392, RULE_declare_spec);
		try {
			State = 3446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,403,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3436; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3437; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3438; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3439; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3440; pragma_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3441; type_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3442; procedure_spec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3443; function_spec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3444; procedure_body();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3445; function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode CONSTANT() { return GetToken(PlSqlParser.CONSTANT, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 394, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3448; identifier();
			State = 3450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,404,Context) ) {
			case 1:
				{
				State = 3449; Match(CONSTANT);
				}
				break;
			}
			State = 3452; type_spec();
			State = 3455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3453; Match(NOT);
				State = 3454; Match(NULL);
				}
			}

			State = 3458;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3457; default_value_part();
				}
			}

			State = 3460; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_declarationContext : ParserRuleContext {
		public ITerminalNode SUBTYPE() { return GetToken(PlSqlParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtype_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_declarationContext subtype_declaration() {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(Context, State);
		EnterRule(_localctx, 396, RULE_subtype_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3462; Match(SUBTYPE);
			State = 3463; identifier();
			State = 3464; Match(IS);
			State = 3465; type_spec();
			State = 3471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE) {
				{
				State = 3466; Match(RANGE);
				State = 3467; expression();
				State = 3468; Match(DOUBLE_PERIOD);
				State = 3469; expression();
				}
			}

			State = 3475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3473; Match(NOT);
				State = 3474; Match(NULL);
				}
			}

			State = 3477; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_declarationContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Parameter_specContext[] parameter_spec() {
			return GetRuleContexts<Parameter_specContext>();
		}
		public Parameter_specContext parameter_spec(int i) {
			return GetRuleContext<Parameter_specContext>(i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_declarationContext cursor_declaration() {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(Context, State);
		EnterRule(_localctx, 398, RULE_cursor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3479; Match(CURSOR);
			State = 3480; identifier();
			State = 3492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3481; Match(LEFT_PAREN);
				State = 3486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3483;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3482; Match(COMMA);
						}
					}

					State = 3485; parameter_spec();
					}
					}
					State = 3488;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				State = 3490; Match(RIGHT_PAREN);
				}
			}

			State = 3496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 3494; Match(RETURN);
				State = 3495; type_spec();
				}
			}

			State = 3500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 3498; Match(IS);
				State = 3499; select_statement();
				}
			}

			State = 3502; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_specContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_specContext parameter_spec() {
		Parameter_specContext _localctx = new Parameter_specContext(Context, State);
		EnterRule(_localctx, 400, RULE_parameter_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3504; parameter_name();
			State = 3509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
			case 1:
				{
				State = 3506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 3505; Match(IN);
					}
				}

				State = 3508; type_spec();
				}
				break;
			}
			State = 3512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3511; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_declarationContext exception_declaration() {
		Exception_declarationContext _localctx = new Exception_declarationContext(Context, State);
		EnterRule(_localctx, 402, RULE_exception_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3514; identifier();
			State = 3515; Match(EXCEPTION);
			State = 3516; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_declarationContext : ParserRuleContext {
		public IdentifierContext id1;
		public ITerminalNode PRAGMA() { return GetToken(PlSqlParser.PRAGMA, 0); }
		public ITerminalNode SERIALLY_REUSABLE() { return GetToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public ITerminalNode AUTONOMOUS_TRANSACTION() { return GetToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public ITerminalNode EXCEPTION_INIT() { return GetToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return GetRuleContext<Exception_nameContext>(0);
		}
		public Numeric_negativeContext numeric_negative() {
			return GetRuleContext<Numeric_negativeContext>(0);
		}
		public ITerminalNode INLINE() { return GetToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_declarationContext pragma_declaration() {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(Context, State);
		EnterRule(_localctx, 404, RULE_pragma_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3518; Match(PRAGMA);
			State = 3549;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				State = 3519; Match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				State = 3520; Match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				State = 3521; Match(EXCEPTION_INIT);
				State = 3522; Match(LEFT_PAREN);
				State = 3523; exception_name();
				State = 3524; Match(COMMA);
				State = 3525; numeric_negative();
				State = 3526; Match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				State = 3528; Match(INLINE);
				State = 3529; Match(LEFT_PAREN);
				State = 3530; _localctx.id1 = identifier();
				State = 3531; Match(COMMA);
				State = 3532; expression();
				State = 3533; Match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				State = 3535; Match(RESTRICT_REFERENCES);
				State = 3536; Match(LEFT_PAREN);
				State = 3539;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 3537; identifier();
					}
					break;
				case DEFAULT:
					{
					State = 3538; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3541; Match(COMMA);
					State = 3542; identifier();
					}
					}
					State = 3545;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 3547; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3551; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_type_defContext : ParserRuleContext {
		public ITerminalNode RECORD() { return GetToken(PlSqlParser.RECORD, 0); }
		public Field_specContext[] field_spec() {
			return GetRuleContexts<Field_specContext>();
		}
		public Field_specContext field_spec(int i) {
			return GetRuleContext<Field_specContext>(i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_type_defContext record_type_def() {
		Record_type_defContext _localctx = new Record_type_defContext(Context, State);
		EnterRule(_localctx, 406, RULE_record_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3553; Match(RECORD);
			State = 3554; Match(LEFT_PAREN);
			State = 3559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3555; Match(COMMA);
					}
				}

				State = 3558; field_spec();
				}
				}
				State = 3561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 3563; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_specContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_specContext field_spec() {
		Field_specContext _localctx = new Field_specContext(Context, State);
		EnterRule(_localctx, 408, RULE_field_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3565; column_name();
			State = 3567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				{
				State = 3566; type_spec();
				}
				break;
			}
			State = 3571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3569; Match(NOT);
				State = 3570; Match(NULL);
				}
			}

			State = 3574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 3573; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_cursor_type_defContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_cursor_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef_cursor_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ref_cursor_type_defContext ref_cursor_type_def() {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(Context, State);
		EnterRule(_localctx, 410, RULE_ref_cursor_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3576; Match(REF);
			State = 3577; Match(CURSOR);
			State = 3580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 3578; Match(RETURN);
				State = 3579; type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Table_type_defContext table_type_def() {
			return GetRuleContext<Table_type_defContext>(0);
		}
		public Varray_type_defContext varray_type_def() {
			return GetRuleContext<Varray_type_defContext>(0);
		}
		public Record_type_defContext record_type_def() {
			return GetRuleContext<Record_type_defContext>(0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return GetRuleContext<Ref_cursor_type_defContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 412, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3582; Match(TYPE);
			State = 3583; identifier();
			State = 3584; Match(IS);
			State = 3589;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
				{
				State = 3585; table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				State = 3586; varray_type_def();
				}
				break;
			case RECORD:
				{
				State = 3587; record_type_def();
				}
				break;
			case REF:
				{
				State = 3588; ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3591; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_defContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return GetRuleContext<Table_indexed_by_partContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_defContext table_type_def() {
		Table_type_defContext _localctx = new Table_type_defContext(Context, State);
		EnterRule(_localctx, 414, RULE_table_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3593; Match(TABLE);
			State = 3594; Match(OF);
			State = 3595; type_spec();
			State = 3597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXED || _la==INDEX) {
				{
				State = 3596; table_indexed_by_part();
				}
			}

			State = 3601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 3599; Match(NOT);
				State = 3600; Match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indexed_by_partContext : ParserRuleContext {
		public IToken idx1;
		public IToken idx2;
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode INDEXED() { return GetToken(PlSqlParser.INDEXED, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indexed_by_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_indexed_by_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_indexed_by_partContext table_indexed_by_part() {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(Context, State);
		EnterRule(_localctx, 416, RULE_table_indexed_by_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEXED:
				{
				State = 3603; _localctx.idx1 = Match(INDEXED);
				}
				break;
			case INDEX:
				{
				State = 3604; _localctx.idx2 = Match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3607; Match(BY);
			State = 3608; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varray_type_defContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode VARRAY() { return GetToken(PlSqlParser.VARRAY, 0); }
		public ITerminalNode VARYING() { return GetToken(PlSqlParser.VARYING, 0); }
		public ITerminalNode ARRAY() { return GetToken(PlSqlParser.ARRAY, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varray_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarray_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Varray_type_defContext varray_type_def() {
		Varray_type_defContext _localctx = new Varray_type_defContext(Context, State);
		EnterRule(_localctx, 418, RULE_varray_type_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3613;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARRAY:
				{
				State = 3610; Match(VARRAY);
				}
				break;
			case VARYING:
				{
				State = 3611; Match(VARYING);
				State = 3612; Match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3615; Match(LEFT_PAREN);
			State = 3616; expression();
			State = 3617; Match(RIGHT_PAREN);
			State = 3618; Match(OF);
			State = 3619; type_spec();
			State = 3622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				{
				State = 3620; Match(NOT);
				State = 3621; Match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seq_of_statementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Label_declarationContext[] label_declaration() {
			return GetRuleContexts<Label_declarationContext>();
		}
		public Label_declarationContext label_declaration(int i) {
			return GetRuleContext<Label_declarationContext>(i);
		}
		public ITerminalNode[] Eof() { return GetTokens(PlSqlParser.Eof); }
		public ITerminalNode Eof(int i) {
			return GetToken(PlSqlParser.Eof, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seq_of_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq_of_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seq_of_statementsContext seq_of_statements() {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(Context, State);
		EnterRule(_localctx, 420, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3628;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3628;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
					case 1:
						{
						State = 3624; statement();
						State = 3625;
						_la = TokenStream.LA(1);
						if ( !(_la==Eof || _la==SEMICOLON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 3627; label_declaration();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3630;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,433,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declarationContext : ParserRuleContext {
		public IToken ltp1;
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_declarationContext label_declaration() {
		Label_declarationContext _localctx = new Label_declarationContext(Context, State);
		EnterRule(_localctx, 422, RULE_label_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3632; _localctx.ltp1 = Match(LESS_THAN_OP);
			State = 3633; Match(LESS_THAN_OP);
			State = 3634; label_name();
			State = 3635; Match(GREATER_THAN_OP);
			State = 3636; Match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return GetRuleContext<Swallow_to_semiContext>(0);
		}
		public ITerminalNode TRUNCATE() { return GetToken(PlSqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Exit_statementContext exit_statement() {
			return GetRuleContext<Exit_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		public Forall_statementContext forall_statement() {
			return GetRuleContext<Forall_statementContext>(0);
		}
		public Null_statementContext null_statement() {
			return GetRuleContext<Null_statementContext>(0);
		}
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		public Sql_statementContext sql_statement() {
			return GetRuleContext<Sql_statementContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return GetRuleContext<Pipe_row_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 424, RULE_statement);
		try {
			State = 3658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3638; Match(CREATE);
				State = 3639; swallow_to_semi();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3640; Match(TRUNCATE);
				State = 3641; swallow_to_semi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3642; body();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3643; block();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3644; assignment_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3645; continue_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3646; exit_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3647; goto_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3648; if_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3649; loop_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3650; forall_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3651; null_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 3652; raise_statement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 3653; return_statement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 3654; case_statement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 3655; sql_statement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 3656; function_call();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 3657; pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Swallow_to_semiContext : ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_swallow_to_semi; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwallow_to_semi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Swallow_to_semiContext swallow_to_semi() {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(Context, State);
		EnterRule(_localctx, 426, RULE_swallow_to_semi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3660;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 3663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ACCOUNT) | (1L << ADD) | (1L << ADMIN) | (1L << ADMINISTER) | (1L << ADVANCED) | (1L << ADVISOR) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHENTICATED) | (1L << AUTHENTICATION) | (1L << AUTHID) | (1L << AUTOALLOCATE) | (1L << AUTO) | (1L << AUTOEXTEND) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BACKUP) | (1L << BASIC) | (1L << BASICFILE) | (1L << BATCH) | (1L << BECOME) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BIGFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BUILD) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CAPACITY) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (CLASS - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINER - 64)) | (1L << (CONTAINER_DATA - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CRITICAL - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATAFILE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DBA_RECYCLEBIN - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRABLE - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELEGATE - 128)) | (1L << (DELETE - 128)) | (1L << (DEPTH - 128)) | (1L << (DESC - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DIMENSION - 128)) | (1L << (DIRECTORY - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DISTINGUISHED - 128)) | (1L << (DISTRIBUTE - 128)) | (1L << (DML - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUPLICATE - 128)) | (1L << (EACH - 128)) | (1L << (EDITIONABLE - 128)) | (1L << (EDITION - 128)) | (1L << (EDITIONING - 128)) | (1L << (EDITIONS - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPT - 128)) | (1L << (ENCRYPTION - 128)) | (1L << (END - 128)) | (1L << (ENTERPRISE - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPT - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXEMPT - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPIRE - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTENT - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTERNALLY - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (FETCH - 192)) | (1L << (FILESYSTEM_LIKE_LOGGING - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FIRST_VALUE - 192)) | (1L << (FLASHBACK - 192)) | (1L << (FLASH_CACHE - 192)) | (1L << (FLOAT - 192)) | (1L << (FOLDER - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FOLLOWS - 192)) | (1L << (FORALL - 192)) | (1L << (FORCE - 192)) | (1L << (FOREIGN - 192)) | (1L << (FOR - 192)) | (1L << (FREELIST - 192)) | (1L << (FREELISTS - 192)) | (1L << (FROM - 192)) | (1L << (FULL - 192)) | (1L << (FUNCTION - 192)) | (1L << (GLOBAL - 192)) | (1L << (GLOBALLY - 192)) | (1L << (GOTO - 192)) | (1L << (GRANT - 192)) | (1L << (GROUP - 192)) | (1L << (GROUPING - 192)) | (1L << (GROUPS - 192)) | (1L << (GUARANTEE - 192)) | (1L << (HASH - 192)) | (1L << (HAVING - 192)) | (1L << (HIDE - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HIGH - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTIFIED - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (ID - 192)) | (1L << (IF - 192)) | (1L << (IGNORE - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (INCLUDE - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDENT - 192)) | (1L << (INDEXED - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXING - 192)) | (1L << (INDEXTYPE - 192)) | (1L << (INDICATOR - 192)) | (1L << (INDICES - 192)) | (1L << (INFINITE - 192)) | (1L << (INHERIT - 192)) | (1L << (IN - 192)) | (1L << (INITIAL - 192)) | (1L << (INITIALLY - 192)) | (1L << (INITRANS - 192)) | (1L << (INLINE - 192)) | (1L << (INMEMORY - 192)) | (1L << (INNER - 192)) | (1L << (INOUT - 192)) | (1L << (INSERT - 192)) | (1L << (INSTANTIABLE - 192)) | (1L << (INSTEAD - 192)) | (1L << (INTEGER - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INTERSECT - 256)) | (1L << (INTERVAL - 256)) | (1L << (INT - 256)) | (1L << (INTO - 256)) | (1L << (INVALIDATE - 256)) | (1L << (INVISIBLE - 256)) | (1L << (IS - 256)) | (1L << (ISOLATION - 256)) | (1L << (ITERATE - 256)) | (1L << (JAVA - 256)) | (1L << (JOB - 256)) | (1L << (JOIN - 256)) | (1L << (KEEP - 256)) | (1L << (KEY - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LAST - 256)) | (1L << (LAST_VALUE - 256)) | (1L << (LEADING - 256)) | (1L << (LEFT - 256)) | (1L << (LESS - 256)) | (1L << (LEVEL - 256)) | (1L << (LIBRARY - 256)) | (1L << (LIKE2 - 256)) | (1L << (LIKE4 - 256)) | (1L << (LIKEC - 256)) | (1L << (LIKE - 256)) | (1L << (LIMIT - 256)) | (1L << (LINK - 256)) | (1L << (LIST - 256)) | (1L << (LOB - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCKED - 256)) | (1L << (LOCKING - 256)) | (1L << (LOCK - 256)) | (1L << (LOGGING - 256)) | (1L << (LOG - 256)) | (1L << (LOGMINING - 256)) | (1L << (LOGOFF - 256)) | (1L << (LOGON - 256)) | (1L << (LONG - 256)) | (1L << (LOOP - 256)) | (1L << (LOW - 256)) | (1L << (MAIN - 256)) | (1L << (MANAGE - 256)) | (1L << (MANAGEMENT - 256)) | (1L << (MANUAL - 256)) | (1L << (MAP - 256)) | (1L << (MATCHED - 256)) | (1L << (MATERIALIZED - 256)) | (1L << (MAXSIZE - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MEASURE - 256)) | (1L << (MEASURES - 256)) | (1L << (MEDIUM - 256)) | (1L << (MEMBER - 256)) | (1L << (MEMCOMPRESS - 256)) | (1L << (MERGE - 256)) | (1L << (MINEXTENTS - 256)) | (1L << (MINIMUM - 256)) | (1L << (MINING - 256)) | (1L << (MINUS - 256)) | (1L << (MINUTE - 256)) | (1L << (MINVALUE - 256)) | (1L << (MLSLABEL - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (MODEL - 320)) | (1L << (MODE - 320)) | (1L << (MODIFY - 320)) | (1L << (MONTH - 320)) | (1L << (MOVEMENT - 320)) | (1L << (MULTISET - 320)) | (1L << (NAME - 320)) | (1L << (NAN - 320)) | (1L << (NATURAL - 320)) | (1L << (NATURALN - 320)) | (1L << (NAV - 320)) | (1L << (NCHAR_CS - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTED - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NOAUDIT - 320)) | (1L << (NOCACHE - 320)) | (1L << (NOCOMPRESS - 320)) | (1L << (NOCOPY - 320)) | (1L << (NOCYCLE - 320)) | (1L << (NOEDITIONABLE - 320)) | (1L << (NOENTITYESCAPING - 320)) | (1L << (NOGUARANTEE - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOMAXVALUE - 320)) | (1L << (NOMINVALUE - 320)) | (1L << (NONEDITIONABLE - 320)) | (1L << (NONE - 320)) | (1L << (NO - 320)) | (1L << (NOORDER - 320)) | (1L << (NOPARALLEL - 320)) | (1L << (NORELY - 320)) | (1L << (NOSCHEMACHECK - 320)) | (1L << (NOSORT - 320)) | (1L << (NOTIFICATION - 320)) | (1L << (NOT - 320)) | (1L << (NOVALIDATE - 320)) | (1L << (NOWAIT - 320)) | (1L << (NULL - 320)) | (1L << (NULLS - 320)) | (1L << (NUMBER - 320)) | (1L << (NUMERIC - 320)) | (1L << (NVARCHAR2 - 320)) | (1L << (OBJECT - 320)) | (1L << (OFFLINE - 320)) | (1L << (OFF - 320)) | (1L << (OF - 320)) | (1L << (OID - 320)) | (1L << (OLD - 320)) | (1L << (OLTP - 320)) | (1L << (ONLINE - 320)) | (1L << (ONLY - 320)) | (1L << (ON - 320)) | (1L << (OPEN - 320)) | (1L << (OPERATOR - 320)) | (1L << (OPTIMAL - 320)) | (1L << (OPTION - 320)) | (1L << (ORADATA - 320)) | (1L << (ORDER - 320)) | (1L << (ORDINALITY - 320)) | (1L << (OR - 320)) | (1L << (OSERROR - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (OUTER - 384)) | (1L << (OUTLINE - 384)) | (1L << (OUT - 384)) | (1L << (OVERFLOW - 384)) | (1L << (OVER - 384)) | (1L << (OVERRIDING - 384)) | (1L << (PACKAGE - 384)) | (1L << (PARALLEL_ENABLE - 384)) | (1L << (PARALLEL - 384)) | (1L << (PARAMETERS - 384)) | (1L << (PARENT - 384)) | (1L << (PARTIAL - 384)) | (1L << (PARTITION - 384)) | (1L << (PARTITIONS - 384)) | (1L << (PASSING - 384)) | (1L << (PASSWORD - 384)) | (1L << (PATH - 384)) | (1L << (PCTFREE - 384)) | (1L << (PCTINCREASE - 384)) | (1L << (PCTUSED - 384)) | (1L << (PERCENT_FOUND - 384)) | (1L << (PERCENT_ISOPEN - 384)) | (1L << (PERCENT_NOTFOUND - 384)) | (1L << (PERCENT_ROWCOUNT - 384)) | (1L << (PERCENT_ROWTYPE - 384)) | (1L << (PERCENT_TYPE - 384)) | (1L << (PIPELINED - 384)) | (1L << (PIPE - 384)) | (1L << (PIVOT - 384)) | (1L << (PLAN - 384)) | (1L << (PLS_INTEGER - 384)) | (1L << (PLUGGABLE - 384)) | (1L << (POLICY - 384)) | (1L << (POSITIVEN - 384)) | (1L << (POSITIVE - 384)) | (1L << (PRAGMA - 384)) | (1L << (PRECEDING - 384)) | (1L << (PRECISION - 384)) | (1L << (PRESENT - 384)) | (1L << (PRESERVE - 384)) | (1L << (PRIMARY - 384)) | (1L << (PRIORITY - 384)) | (1L << (PRIOR - 384)) | (1L << (PRIVILEGE - 384)) | (1L << (PRIVILEGES - 384)) | (1L << (PROCEDURE - 384)) | (1L << (PROCESS - 384)) | (1L << (PROFILE - 384)) | (1L << (PROGRAM - 384)) | (1L << (PUBLIC - 384)) | (1L << (PURGE - 384)) | (1L << (QUERY - 384)) | (1L << (QUOTA - 384)) | (1L << (RAISE - 384)) | (1L << (RANGE - 384)) | (1L << (RAW - 384)) | (1L << (READ - 384)) | (1L << (REAL - 384)) | (1L << (RECORD - 384)) | (1L << (RECYCLE - 384)) | (1L << (REDACTION - 384)) | (1L << (REFERENCE - 384)) | (1L << (REFERENCES - 384)) | (1L << (REFERENCING - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (REF - 448)) | (1L << (REFRESH - 448)) | (1L << (REJECT - 448)) | (1L << (RELIES_ON - 448)) | (1L << (RELY - 448)) | (1L << (REMOVE - 448)) | (1L << (RENAME - 448)) | (1L << (REPLACE - 448)) | (1L << (REQUIRED - 448)) | (1L << (RESOURCE - 448)) | (1L << (RESPECT - 448)) | (1L << (RESTRICTED - 448)) | (1L << (RESTRICT_REFERENCES - 448)) | (1L << (RESULT_CACHE - 448)) | (1L << (RESULT - 448)) | (1L << (RESUMABLE - 448)) | (1L << (RETENTION - 448)) | (1L << (RETURNING - 448)) | (1L << (RETURN - 448)) | (1L << (REUSE - 448)) | (1L << (REVERSE - 448)) | (1L << (REVOKE - 448)) | (1L << (REWRITE - 448)) | (1L << (RIGHT - 448)) | (1L << (ROLE - 448)) | (1L << (ROLES - 448)) | (1L << (ROLLBACK - 448)) | (1L << (ROLLUP - 448)) | (1L << (ROWID - 448)) | (1L << (ROW - 448)) | (1L << (ROWS - 448)) | (1L << (RULES - 448)) | (1L << (SALT - 448)) | (1L << (SAMPLE - 448)) | (1L << (SAVEPOINT - 448)) | (1L << (SAVE - 448)) | (1L << (SCHEDULER - 448)) | (1L << (SCHEMACHECK - 448)) | (1L << (SCHEMA - 448)) | (1L << (SCN - 448)) | (1L << (SEARCH - 448)) | (1L << (SECOND - 448)) | (1L << (SECUREFILE - 448)) | (1L << (SEED - 448)) | (1L << (SEGMENT - 448)) | (1L << (SELECT - 448)) | (1L << (SELF - 448)) | (1L << (SEQUENCE - 448)) | (1L << (SEQUENTIAL - 448)) | (1L << (SERIALIZABLE - 448)) | (1L << (SERIALLY_REUSABLE - 448)) | (1L << (SERVERERROR - 448)) | (1L << (SESSION - 448)) | (1L << (SESSIONTIMEZONE - 448)) | (1L << (SET - 448)) | (1L << (SETS - 448)) | (1L << (SETTINGS - 448)) | (1L << (SHARE - 448)) | (1L << (SHOW - 448)) | (1L << (SHUTDOWN - 448)) | (1L << (SIBLINGS - 448)) | (1L << (SIGNTYPE - 448)) | (1L << (SIMPLE_INTEGER - 448)) | (1L << (SINGLE - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (SIZE - 512)) | (1L << (SKIP_ - 512)) | (1L << (SMALLFILE - 512)) | (1L << (SMALLINT - 512)) | (1L << (SNAPSHOT - 512)) | (1L << (SOME - 512)) | (1L << (SORT - 512)) | (1L << (SOURCE - 512)) | (1L << (SPACE_KEYWORD - 512)) | (1L << (SPECIFICATION - 512)) | (1L << (SQLDATA - 512)) | (1L << (SQLERROR - 512)) | (1L << (SQL - 512)) | (1L << (STANDALONE - 512)) | (1L << (START - 512)) | (1L << (STARTUP - 512)) | (1L << (STATEMENT_ID - 512)) | (1L << (STATEMENT - 512)) | (1L << (STATIC - 512)) | (1L << (STATISTICS - 512)) | (1L << (STORAGE - 512)) | (1L << (STORE - 512)) | (1L << (STRING - 512)) | (1L << (SUBMULTISET - 512)) | (1L << (SUBPARTITION - 512)) | (1L << (SUBSTITUTABLE - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUCCESS - 512)) | (1L << (SUSPEND - 512)) | (1L << (SYNONYM - 512)) | (1L << (SYSBACKUP - 512)) | (1L << (SYSDATE - 512)) | (1L << (SYSDBA - 512)) | (1L << (SYSDG - 512)) | (1L << (SYSGUID - 512)) | (1L << (SYSKM - 512)) | (1L << (SYSOPER - 512)) | (1L << (TABLESPACE - 512)) | (1L << (TABLE - 512)) | (1L << (TEMPFILE - 512)) | (1L << (TEMPORARY - 512)) | (1L << (THAN - 512)) | (1L << (THEN - 512)) | (1L << (THE - 512)) | (1L << (THROUGH - 512)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP - 512)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 512)) | (1L << (TIMESTAMP_UNCONSTRAINED - 512)) | (1L << (TIME - 512)) | (1L << (TIMEZONE_ABBR - 512)) | (1L << (TIMEZONE_HOUR - 512)) | (1L << (TIMEZONE_MINUTE - 512)) | (1L << (TIMEZONE_REGION - 512)) | (1L << (TO - 512)) | (1L << (TRAILING - 512)) | (1L << (TRANSACTION - 512)) | (1L << (TRANSLATE - 512)) | (1L << (TRANSLATION - 512)) | (1L << (TREAT - 512)) | (1L << (TRIGGER - 512)) | (1L << (TRUE - 512)) | (1L << (TRUNCATE - 512)) | (1L << (TUNING - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (TYPE - 576)) | (1L << (UNBOUNDED - 576)) | (1L << (UNDER - 576)) | (1L << (UNDO - 576)) | (1L << (UNIFORM - 576)) | (1L << (UNION - 576)) | (1L << (UNIQUE - 576)) | (1L << (UNLIMITED - 576)) | (1L << (UNLOCK - 576)) | (1L << (UNPIVOT - 576)) | (1L << (UNTIL - 576)) | (1L << (UNUSABLE - 576)) | (1L << (UPDATED - 576)) | (1L << (UPDATE - 576)) | (1L << (UPSERT - 576)) | (1L << (UROWID - 576)) | (1L << (USABLE - 576)) | (1L << (USERS - 576)) | (1L << (USER - 576)) | (1L << (USE - 576)) | (1L << (USING - 576)) | (1L << (VALIDATE - 576)) | (1L << (VALUES - 576)) | (1L << (VALUE - 576)) | (1L << (VARCHAR2 - 576)) | (1L << (VARCHAR - 576)) | (1L << (VARIABLE - 576)) | (1L << (VARRAY - 576)) | (1L << (VARYING - 576)) | (1L << (VERSIONS - 576)) | (1L << (VERSION - 576)) | (1L << (VIEW - 576)) | (1L << (VISIBLE - 576)) | (1L << (WAIT - 576)) | (1L << (WARNING - 576)) | (1L << (WELLFORMED - 576)) | (1L << (WHENEVER - 576)) | (1L << (WHEN - 576)) | (1L << (WHERE - 576)) | (1L << (WHILE - 576)) | (1L << (WITHIN - 576)) | (1L << (WITH - 576)) | (1L << (WORK - 576)) | (1L << (WRITE - 576)) | (1L << (XMLAGG - 576)) | (1L << (XMLATTRIBUTES - 576)) | (1L << (XMLCAST - 576)) | (1L << (XMLCOLATTVAL - 576)) | (1L << (XMLELEMENT - 576)) | (1L << (XMLEXISTS - 576)) | (1L << (XMLFOREST - 576)) | (1L << (XMLNAMESPACES - 576)) | (1L << (XMLPARSE - 576)) | (1L << (XMLPI - 576)) | (1L << (XMLQUERY - 576)) | (1L << (XMLROOT - 576)) | (1L << (XMLSERIALIZE - 576)) | (1L << (XMLTABLE - 576)) | (1L << (XML - 576)) | (1L << (YEAR - 576)) | (1L << (YES - 576)) | (1L << (YMINTERVAL_UNCONSTRAINED - 576)) | (1L << (ZONE - 576)) | (1L << (PREDICTION - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (PREDICTION_BOUNDS - 640)) | (1L << (PREDICTION_COST - 640)) | (1L << (PREDICTION_DETAILS - 640)) | (1L << (PREDICTION_PROBABILITY - 640)) | (1L << (PREDICTION_SET - 640)) | (1L << (CUME_DIST - 640)) | (1L << (DENSE_RANK - 640)) | (1L << (LISTAGG - 640)) | (1L << (PERCENT_RANK - 640)) | (1L << (PERCENTILE_CONT - 640)) | (1L << (PERCENTILE_DISC - 640)) | (1L << (RANK - 640)) | (1L << (AVG - 640)) | (1L << (CORR - 640)) | (1L << (COVAR_ - 640)) | (1L << (DECODE - 640)) | (1L << (LAG - 640)) | (1L << (LEAD - 640)) | (1L << (MAX - 640)) | (1L << (MEDIAN - 640)) | (1L << (MIN - 640)) | (1L << (NTILE - 640)) | (1L << (NVL - 640)) | (1L << (RATIO_TO_REPORT - 640)) | (1L << (REGR_ - 640)) | (1L << (ROUND - 640)) | (1L << (ROW_NUMBER - 640)) | (1L << (SUBSTR - 640)) | (1L << (TO_CHAR - 640)) | (1L << (TRIM - 640)) | (1L << (SUM - 640)) | (1L << (STDDEV - 640)) | (1L << (VAR_ - 640)) | (1L << (VARIANCE - 640)) | (1L << (LEAST - 640)) | (1L << (GREATEST - 640)) | (1L << (TO_DATE - 640)) | (1L << (VARIABLE_SESSION - 640)) | (1L << (NATIONAL_CHAR_STRING_LIT - 640)) | (1L << (BIT_STRING_LIT - 640)) | (1L << (HEX_STRING_LIT - 640)) | (1L << (DOUBLE_PERIOD - 640)) | (1L << (PERIOD - 640)) | (1L << (UNSIGNED_INTEGER - 640)) | (1L << (APPROXIMATE_NUM_LIT - 640)) | (1L << (CHAR_STRING - 640)) | (1L << (DELIMITED_ID - 640)) | (1L << (PERCENT - 640)) | (1L << (AMPERSAND - 640)) | (1L << (LEFT_PAREN - 640)) | (1L << (RIGHT_PAREN - 640)) | (1L << (DOUBLE_ASTERISK - 640)) | (1L << (ASTERISK - 640)) | (1L << (PLUS_SIGN - 640)) | (1L << (MINUS_SIGN - 640)) | (1L << (COMMA - 640)) | (1L << (SOLIDUS - 640)) | (1L << (AT_SIGN - 640)) | (1L << (ASSIGN_OP - 640)) | (1L << (BINDVAR - 640)) | (1L << (NOT_EQUAL_OP - 640)) | (1L << (CARRET_OPERATOR_PART - 640)) | (1L << (TILDE_OPERATOR_PART - 640)) | (1L << (EXCLAMATION_OPERATOR_PART - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (GREATER_THAN_OP - 704)) | (1L << (LESS_THAN_OP - 704)) | (1L << (COLON - 704)) | (1L << (BAR - 704)) | (1L << (EQUALS_OP - 704)) | (1L << (LEFT_BRACKET - 704)) | (1L << (RIGHT_BRACKET - 704)) | (1L << (INTRODUCER - 704)) | (1L << (SPACES - 704)) | (1L << (SINGLE_LINE_COMMENT - 704)) | (1L << (MULTI_LINE_COMMENT - 704)) | (1L << (PROMPT - 704)) | (1L << (START_CMD - 704)) | (1L << (REGULAR_ID - 704)) | (1L << (ZV - 704)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public ITerminalNode ASSIGN_OP() { return GetToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 428, RULE_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3667;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 3665; general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				State = 3666; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3669; Match(ASSIGN_OP);
			State = 3670; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 430, RULE_continue_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3672; Match(CONTINUE);
			State = 3674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==REGULAR_ID) {
				{
				State = 3673; label_name();
				}
			}

			State = 3678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 3676; Match(WHEN);
				State = 3677; condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_statementContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exit_statementContext exit_statement() {
		Exit_statementContext _localctx = new Exit_statementContext(Context, State);
		EnterRule(_localctx, 432, RULE_exit_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3680; Match(EXIT);
			State = 3682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==REGULAR_ID) {
				{
				State = 3681; label_name();
				}
			}

			State = 3686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 3684; Match(WHEN);
				State = 3685; condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(Context, State);
		EnterRule(_localctx, 434, RULE_goto_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3688; Match(GOTO);
			State = 3689; label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode[] IF() { return GetTokens(PlSqlParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public Elsif_partContext[] elsif_part() {
			return GetRuleContexts<Elsif_partContext>();
		}
		public Elsif_partContext elsif_part(int i) {
			return GetRuleContext<Elsif_partContext>(i);
		}
		public Else_partContext else_part() {
			return GetRuleContext<Else_partContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 436, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3691; Match(IF);
			State = 3692; condition();
			State = 3693; Match(THEN);
			State = 3694; seq_of_statements();
			State = 3698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 3695; elsif_part();
				}
				}
				State = 3700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 3701; else_part();
				}
			}

			State = 3704; Match(END);
			State = 3705; Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elsif_partContext : ParserRuleContext {
		public ITerminalNode ELSIF() { return GetToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsif_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsif_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elsif_partContext elsif_part() {
		Elsif_partContext _localctx = new Elsif_partContext(Context, State);
		EnterRule(_localctx, 438, RULE_elsif_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3707; Match(ELSIF);
			State = 3708; condition();
			State = 3709; Match(THEN);
			State = 3710; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_partContext else_part() {
		Else_partContext _localctx = new Else_partContext(Context, State);
		EnterRule(_localctx, 440, RULE_else_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3712; Match(ELSE);
			State = 3713; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		public ITerminalNode[] LOOP() { return GetTokens(PlSqlParser.LOOP); }
		public ITerminalNode LOOP(int i) {
			return GetToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public Label_declarationContext label_declaration() {
			return GetRuleContext<Label_declarationContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return GetRuleContext<Cursor_loop_paramContext>(0);
		}
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 442, RULE_loop_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3716;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS_THAN_OP) {
				{
				State = 3715; label_declaration();
				}
			}

			State = 3722;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				{
				State = 3718; Match(WHILE);
				State = 3719; condition();
				}
				break;
			case FOR:
				{
				State = 3720; Match(FOR);
				State = 3721; cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			State = 3724; Match(LOOP);
			State = 3725; seq_of_statements();
			State = 3726; Match(END);
			State = 3727; Match(LOOP);
			State = 3729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==REGULAR_ID) {
				{
				State = 3728; label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_loop_paramContext : ParserRuleContext {
		public IToken range_separator;
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public ITerminalNode REVERSE() { return GetToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return GetRuleContext<Record_nameContext>(0);
		}
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_loop_param; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_loop_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_loop_paramContext cursor_loop_param() {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(Context, State);
		EnterRule(_localctx, 444, RULE_cursor_loop_param);
		int _la;
		try {
			State = 3756;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3731; index_name();
				State = 3732; Match(IN);
				State = 3734;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
				case 1:
					{
					State = 3733; Match(REVERSE);
					}
					break;
				}
				State = 3736; lower_bound();
				State = 3737; _localctx.range_separator = Match(DOUBLE_PERIOD);
				State = 3738; upper_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3740; record_name();
				State = 3741; Match(IN);
				State = 3754;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 3742; cursor_name();
					State = 3748;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LEFT_PAREN) {
						{
						State = 3743; Match(LEFT_PAREN);
						State = 3745;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
							{
							State = 3744; expressions();
							}
						}

						State = 3747; Match(RIGHT_PAREN);
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					State = 3750; Match(LEFT_PAREN);
					State = 3751; select_statement();
					State = 3752; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_statementContext : ParserRuleContext {
		public ITerminalNode FORALL() { return GetToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return GetRuleContext<Bounds_clauseContext>(0);
		}
		public Sql_statementContext sql_statement() {
			return GetRuleContext<Sql_statementContext>(0);
		}
		public ITerminalNode SAVE() { return GetToken(PlSqlParser.SAVE, 0); }
		public ITerminalNode EXCEPTIONS() { return GetToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forall_statementContext forall_statement() {
		Forall_statementContext _localctx = new Forall_statementContext(Context, State);
		EnterRule(_localctx, 446, RULE_forall_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3758; Match(FORALL);
			State = 3759; index_name();
			State = 3760; Match(IN);
			State = 3761; bounds_clause();
			State = 3762; sql_statement();
			State = 3765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SAVE) {
				{
				State = 3763; Match(SAVE);
				State = 3764; Match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bounds_clauseContext : ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public ITerminalNode INDICES() { return GetToken(PlSqlParser.INDICES, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return GetRuleContext<Collection_nameContext>(0);
		}
		public Between_boundContext between_bound() {
			return GetRuleContext<Between_boundContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBounds_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bounds_clauseContext bounds_clause() {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(Context, State);
		EnterRule(_localctx, 448, RULE_bounds_clause);
		int _la;
		try {
			State = 3780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3767; lower_bound();
				State = 3768; Match(DOUBLE_PERIOD);
				State = 3769; upper_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3771; Match(INDICES);
				State = 3772; Match(OF);
				State = 3773; collection_name();
				State = 3775;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BETWEEN) {
					{
					State = 3774; between_bound();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3777; Match(VALUES);
				State = 3778; Match(OF);
				State = 3779; index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_boundContext : ParserRuleContext {
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_boundContext between_bound() {
		Between_boundContext _localctx = new Between_boundContext(Context, State);
		EnterRule(_localctx, 450, RULE_between_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3782; Match(BETWEEN);
			State = 3783; lower_bound();
			State = 3784; Match(AND);
			State = 3785; upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_boundContext : ParserRuleContext {
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLower_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lower_boundContext lower_bound() {
		Lower_boundContext _localctx = new Lower_boundContext(Context, State);
		EnterRule(_localctx, 452, RULE_lower_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3787; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_boundContext : ParserRuleContext {
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpper_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Upper_boundContext upper_bound() {
		Upper_boundContext _localctx = new Upper_boundContext(Context, State);
		EnterRule(_localctx, 454, RULE_upper_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3789; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_statementContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_statementContext null_statement() {
		Null_statementContext _localctx = new Null_statementContext(Context, State);
		EnterRule(_localctx, 456, RULE_null_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3791; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ITerminalNode RAISE() { return GetToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return GetRuleContext<Exception_nameContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 458, RULE_raise_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3793; Match(RAISE);
			State = 3795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 3794; exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 460, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3797; Match(RETURN);
			State = 3799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 3798; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Routine_nameContext routine_name() {
			return GetRuleContext<Routine_nameContext>(0);
		}
		public ITerminalNode CALL() { return GetToken(PlSqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 462, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
			case 1:
				{
				State = 3801; Match(CALL);
				}
				break;
			}
			State = 3804; routine_name();
			State = 3806;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3805; function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pipe_row_statementContext : ParserRuleContext {
		public ITerminalNode PIPE() { return GetToken(PlSqlParser.PIPE, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipe_row_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe_row_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pipe_row_statementContext pipe_row_statement() {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(Context, State);
		EnterRule(_localctx, 464, RULE_pipe_row_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3808; Match(PIPE);
			State = 3809; Match(ROW);
			State = 3810; Match(LEFT_PAREN);
			State = 3811; expression();
			State = 3812; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Exception_handlerContext[] exception_handler() {
			return GetRuleContexts<Exception_handlerContext>();
		}
		public Exception_handlerContext exception_handler(int i) {
			return GetRuleContext<Exception_handlerContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 466, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3814; Match(BEGIN);
			State = 3815; seq_of_statements();
			State = 3822;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 3816; Match(EXCEPTION);
				State = 3818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3817; exception_handler();
					}
					}
					State = 3820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
			}

			State = 3824; Match(END);
			State = 3826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
			case 1:
				{
				State = 3825; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_handlerContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public Exception_nameContext[] exception_name() {
			return GetRuleContexts<Exception_nameContext>();
		}
		public Exception_nameContext exception_name(int i) {
			return GetRuleContext<Exception_nameContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(PlSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_handler; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_handler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_handlerContext exception_handler() {
		Exception_handlerContext _localctx = new Exception_handlerContext(Context, State);
		EnterRule(_localctx, 468, RULE_exception_handler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3828; Match(WHEN);
			State = 3829; exception_name();
			State = 3834;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 3830; Match(OR);
				State = 3831; exception_name();
				}
				}
				State = 3836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3837; Match(THEN);
			State = 3838; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_blockContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_blockContext trigger_block() {
		Trigger_blockContext _localctx = new Trigger_blockContext(Context, State);
		EnterRule(_localctx, 470, RULE_trigger_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 3841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 3840; Match(DECLARE);
					}
				}

				State = 3844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3843; declare_spec();
					}
					}
					State = 3846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
			}

			State = 3850; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 472, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 3852; Match(DECLARE);
				}
			}

			State = 3856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3855; declare_spec();
				}
				}
				State = 3858;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROCEDURE - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 3860; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_statementContext : ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return GetRuleContext<Execute_immediateContext>(0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return GetRuleContext<Data_manipulation_language_statementsContext>(0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return GetRuleContext<Cursor_manipulation_statementsContext>(0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return GetRuleContext<Transaction_control_statementsContext>(0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_statementContext sql_statement() {
		Sql_statementContext _localctx = new Sql_statementContext(Context, State);
		EnterRule(_localctx, 474, RULE_sql_statement);
		try {
			State = 3866;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3862; execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3863; data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3864; cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3865; transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_immediateContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return GetRuleContext<Dynamic_returning_clauseContext>(0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_immediate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_immediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_immediateContext execute_immediate() {
		Execute_immediateContext _localctx = new Execute_immediateContext(Context, State);
		EnterRule(_localctx, 476, RULE_execute_immediate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3868; Match(EXECUTE);
			State = 3869; Match(IMMEDIATE);
			State = 3870; expression();
			State = 3880;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BULK:
			case INTO:
				{
				State = 3871; into_clause();
				State = 3873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 3872; using_clause();
					}
				}

				}
				break;
			case USING:
				{
				State = 3875; using_clause();
				State = 3877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					State = 3876; dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURNING:
			case RETURN:
				{
				State = 3879; dynamic_returning_clause();
				}
				break;
			case Eof:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_returning_clauseContext : ParserRuleContext {
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_returning_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamic_returning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_returning_clauseContext dynamic_returning_clause() {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(Context, State);
		EnterRule(_localctx, 478, RULE_dynamic_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3882;
			_la = TokenStream.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3883; into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_manipulation_language_statementsContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return GetRuleContext<Lock_table_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Explain_statementContext explain_statement() {
			return GetRuleContext<Explain_statementContext>(0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_manipulation_language_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_manipulation_language_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(Context, State);
		EnterRule(_localctx, 480, RULE_data_manipulation_language_statements);
		try {
			State = 3892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MERGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3885; merge_statement();
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3886; lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3887; select_statement();
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3888; update_statement();
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3889; delete_statement();
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3890; insert_statement();
				}
				break;
			case EXPLAIN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3891; explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_manipulation_statementsContext : ParserRuleContext {
		public Close_statementContext close_statement() {
			return GetRuleContext<Close_statementContext>(0);
		}
		public Open_statementContext open_statement() {
			return GetRuleContext<Open_statementContext>(0);
		}
		public Fetch_statementContext fetch_statement() {
			return GetRuleContext<Fetch_statementContext>(0);
		}
		public Open_for_statementContext open_for_statement() {
			return GetRuleContext<Open_for_statementContext>(0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_manipulation_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_manipulation_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(Context, State);
		EnterRule(_localctx, 482, RULE_cursor_manipulation_statements);
		try {
			State = 3898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3894; close_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3895; open_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3896; fetch_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3897; open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Close_statementContext close_statement() {
		Close_statementContext _localctx = new Close_statementContext(Context, State);
		EnterRule(_localctx, 484, RULE_close_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3900; Match(CLOSE);
			State = 3901; cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_statementContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_statementContext open_statement() {
		Open_statementContext _localctx = new Open_statementContext(Context, State);
		EnterRule(_localctx, 486, RULE_open_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3903; Match(OPEN);
			State = 3904; cursor_name();
			State = 3910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3905; Match(LEFT_PAREN);
				State = 3907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 3906; expressions();
					}
				}

				State = 3909; Match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_statementContext : ParserRuleContext {
		public IToken it1;
		public ITerminalNode FETCH() { return GetToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode BULK() { return GetToken(PlSqlParser.BULK, 0); }
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_statementContext fetch_statement() {
		Fetch_statementContext _localctx = new Fetch_statementContext(Context, State);
		EnterRule(_localctx, 488, RULE_fetch_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3912; Match(FETCH);
			State = 3913; cursor_name();
			State = 3934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				{
				State = 3914; _localctx.it1 = Match(INTO);
				State = 3919;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3916;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3915; Match(COMMA);
							}
						}

						State = 3918; variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3921;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,476,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case BULK:
				{
				State = 3923; Match(BULK);
				State = 3924; Match(COLLECT);
				State = 3925; Match(INTO);
				State = 3930;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3927;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3926; Match(COMMA);
							}
						}

						State = 3929; variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3932;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,478,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_for_statementContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_for_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_for_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_for_statementContext open_for_statement() {
		Open_for_statementContext _localctx = new Open_for_statementContext(Context, State);
		EnterRule(_localctx, 490, RULE_open_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3936; Match(OPEN);
			State = 3937; variable_name();
			State = 3938; Match(FOR);
			State = 3941;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
			case 1:
				{
				State = 3939; select_statement();
				}
				break;
			case 2:
				{
				State = 3940; expression();
				}
				break;
			}
			State = 3944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3943; using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_control_statementsContext : ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return GetRuleContext<Set_transaction_commandContext>(0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return GetRuleContext<Set_constraint_commandContext>(0);
		}
		public Commit_statementContext commit_statement() {
			return GetRuleContext<Commit_statementContext>(0);
		}
		public Rollback_statementContext rollback_statement() {
			return GetRuleContext<Rollback_statementContext>(0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return GetRuleContext<Savepoint_statementContext>(0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_control_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_control_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_control_statementsContext transaction_control_statements() {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(Context, State);
		EnterRule(_localctx, 492, RULE_transaction_control_statements);
		try {
			State = 3951;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3946; set_transaction_command();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3947; set_constraint_command();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3948; commit_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3949; rollback_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3950; savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_transaction_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(PlSqlParser.TRANSACTION, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode ISOLATION() { return GetToken(PlSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(PlSqlParser.LEVEL, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return GetRuleContext<Rollback_segment_nameContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(PlSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode COMMITTED() { return GetToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_transaction_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_transaction_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_transaction_commandContext set_transaction_command() {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(Context, State);
		EnterRule(_localctx, 494, RULE_set_transaction_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3953; Match(SET);
			State = 3954; Match(TRANSACTION);
			State = 3968;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				{
				State = 3955; Match(READ);
				State = 3956;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				State = 3957; Match(ISOLATION);
				State = 3958; Match(LEVEL);
				State = 3962;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SERIALIZABLE:
					{
					State = 3959; Match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					State = 3960; Match(READ);
					State = 3961; Match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 3964; Match(USE);
				State = 3965; Match(ROLLBACK);
				State = 3966; Match(SEGMENT);
				State = 3967; rollback_segment_name();
				}
				break;
			}
			State = 3972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,485,Context) ) {
			case 1:
				{
				State = 3970; Match(NAME);
				State = 3971; @string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_constraint_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(PlSqlParser.CONSTRAINTS, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode DEFERRED() { return GetToken(PlSqlParser.DEFERRED, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Constraint_nameContext[] constraint_name() {
			return GetRuleContexts<Constraint_nameContext>();
		}
		public Constraint_nameContext constraint_name(int i) {
			return GetRuleContext<Constraint_nameContext>(i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_constraint_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_constraint_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_constraint_commandContext set_constraint_command() {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(Context, State);
		EnterRule(_localctx, 496, RULE_set_constraint_command);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3974; Match(SET);
			State = 3975;
			_la = TokenStream.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3985;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 3976; Match(ALL);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 3981;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3978;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 3977; Match(COMMA);
							}
						}

						State = 3980; constraint_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3983;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,487,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3987;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_statementContext : ParserRuleContext {
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode WORK() { return GetToken(PlSqlParser.WORK, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return GetRuleContext<Write_clauseContext>(0);
		}
		public ITerminalNode CORRUPT_XID() { return GetToken(PlSqlParser.CORRUPT_XID, 0); }
		public ITerminalNode CORRUPT_XID_ALL() { return GetToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_statementContext commit_statement() {
		Commit_statementContext _localctx = new Commit_statementContext(Context, State);
		EnterRule(_localctx, 498, RULE_commit_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3989; Match(COMMIT);
			State = 3991;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,489,Context) ) {
			case 1:
				{
				State = 3990; Match(WORK);
				}
				break;
			}
			State = 4006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
			case 1:
				{
				State = 3993; Match(COMMENT);
				State = 3994; expression();
				}
				break;
			case 2:
				{
				State = 3995; Match(FORCE);
				State = 4004;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,491,Context) ) {
				case 1:
					{
					State = 3996; Match(CORRUPT_XID);
					State = 3997; expression();
					}
					break;
				case 2:
					{
					State = 3998; Match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					State = 3999; expression();
					State = 4002;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
					case 1:
						{
						State = 4000; Match(COMMA);
						State = 4001; expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 4009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				{
				State = 4008; write_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_clauseContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(PlSqlParser.NOWAIT, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode BATCH() { return GetToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Write_clauseContext write_clause() {
		Write_clauseContext _localctx = new Write_clauseContext(Context, State);
		EnterRule(_localctx, 500, RULE_write_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4011; Match(WRITE);
			State = 4013;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
			case 1:
				{
				State = 4012;
				_la = TokenStream.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 4016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
			case 1:
				{
				State = 4015;
				_la = TokenStream.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_statementContext : ParserRuleContext {
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode WORK() { return GetToken(PlSqlParser.WORK, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode SAVEPOINT() { return GetToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_statementContext rollback_statement() {
		Rollback_statementContext _localctx = new Rollback_statementContext(Context, State);
		EnterRule(_localctx, 502, RULE_rollback_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4018; Match(ROLLBACK);
			State = 4020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 4019; Match(WORK);
				}
				break;
			}
			State = 4029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,498,Context) ) {
			case 1:
				{
				State = 4022; Match(TO);
				State = 4024;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,497,Context) ) {
				case 1:
					{
					State = 4023; Match(SAVEPOINT);
					}
					break;
				}
				State = 4026; savepoint_name();
				}
				break;
			case 2:
				{
				State = 4027; Match(FORCE);
				State = 4028; @string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_statementContext : ParserRuleContext {
		public ITerminalNode SAVEPOINT() { return GetToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_statementContext savepoint_statement() {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(Context, State);
		EnterRule(_localctx, 504, RULE_savepoint_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4031; Match(SAVEPOINT);
			State = 4032; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_statementContext : ParserRuleContext {
		public ITerminalNode EXPLAIN() { return GetToken(PlSqlParser.EXPLAIN, 0); }
		public ITerminalNode PLAN() { return GetToken(PlSqlParser.PLAN, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode STATEMENT_ID() { return GetToken(PlSqlParser.STATEMENT_ID, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplain_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explain_statementContext explain_statement() {
		Explain_statementContext _localctx = new Explain_statementContext(Context, State);
		EnterRule(_localctx, 506, RULE_explain_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4034; Match(EXPLAIN);
			State = 4035; Match(PLAN);
			State = 4040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 4036; Match(SET);
				State = 4037; Match(STATEMENT_ID);
				State = 4038; Match(EQUALS_OP);
				State = 4039; @string();
				}
			}

			State = 4044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 4042; Match(INTO);
				State = 4043; tableview_name();
				}
			}

			State = 4046; Match(FOR);
			State = 4052;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				State = 4047; select_statement();
				}
				break;
			case UPDATE:
				{
				State = 4048; update_statement();
				}
				break;
			case DELETE:
				{
				State = 4049; delete_statement();
				}
				break;
			case INSERT:
				{
				State = 4050; insert_statement();
				}
				break;
			case MERGE:
				{
				State = 4051; merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return GetRuleContext<Subquery_factoring_clauseContext>(0);
		}
		public For_update_clauseContext[] for_update_clause() {
			return GetRuleContexts<For_update_clauseContext>();
		}
		public For_update_clauseContext for_update_clause(int i) {
			return GetRuleContext<For_update_clauseContext>(i);
		}
		public Order_by_clauseContext[] order_by_clause() {
			return GetRuleContexts<Order_by_clauseContext>();
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return GetRuleContext<Order_by_clauseContext>(i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 508, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 4054; subquery_factoring_clause();
				}
			}

			State = 4057; subquery();
			State = 4062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				State = 4060;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 4058; for_update_clause();
					}
					break;
				case ORDER:
					{
					State = 4059; order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 4064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_factoring_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public Factoring_elementContext[] factoring_element() {
			return GetRuleContexts<Factoring_elementContext>();
		}
		public Factoring_elementContext factoring_element(int i) {
			return GetRuleContext<Factoring_elementContext>(i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_factoring_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_factoring_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_factoring_clauseContext subquery_factoring_clause() {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(Context, State);
		EnterRule(_localctx, 510, RULE_subquery_factoring_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4065; Match(WITH);
			State = 4070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4066; Match(COMMA);
					}
				}

				State = 4069; factoring_element();
				}
				}
				State = 4072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factoring_elementContext : ParserRuleContext {
		public Query_nameContext query_name() {
			return GetRuleContext<Query_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Search_clauseContext search_clause() {
			return GetRuleContext<Search_clauseContext>(0);
		}
		public Cycle_clauseContext cycle_clause() {
			return GetRuleContext<Cycle_clauseContext>(0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factoring_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactoring_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factoring_elementContext factoring_element() {
		Factoring_elementContext _localctx = new Factoring_elementContext(Context, State);
		EnterRule(_localctx, 512, RULE_factoring_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4074; query_name();
			State = 4076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 4075; paren_column_list();
				}
			}

			State = 4078; Match(AS);
			State = 4079; Match(LEFT_PAREN);
			State = 4080; subquery();
			State = 4082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 4081; order_by_clause();
				}
			}

			State = 4084; Match(RIGHT_PAREN);
			State = 4086;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEARCH) {
				{
				State = 4085; search_clause();
				}
			}

			State = 4089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,510,Context) ) {
			case 1:
				{
				State = 4088; cycle_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_clauseContext : ParserRuleContext {
		public ITerminalNode SEARCH() { return GetToken(PlSqlParser.SEARCH, 0); }
		public ITerminalNode[] FIRST() { return GetTokens(PlSqlParser.FIRST); }
		public ITerminalNode FIRST(int i) {
			return GetToken(PlSqlParser.FIRST, i);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode DEPTH() { return GetToken(PlSqlParser.DEPTH, 0); }
		public ITerminalNode BREADTH() { return GetToken(PlSqlParser.BREADTH, 0); }
		public ITerminalNode[] ASC() { return GetTokens(PlSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(PlSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(PlSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(PlSqlParser.DESC, i);
		}
		public ITerminalNode[] NULLS() { return GetTokens(PlSqlParser.NULLS); }
		public ITerminalNode NULLS(int i) {
			return GetToken(PlSqlParser.NULLS, i);
		}
		public ITerminalNode[] LAST() { return GetTokens(PlSqlParser.LAST); }
		public ITerminalNode LAST(int i) {
			return GetToken(PlSqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_clauseContext search_clause() {
		Search_clauseContext _localctx = new Search_clauseContext(Context, State);
		EnterRule(_localctx, 514, RULE_search_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4091; Match(SEARCH);
			State = 4092;
			_la = TokenStream.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4093; Match(FIRST);
			State = 4094; Match(BY);
			State = 4095; column_name();
			State = 4097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC) {
				{
				State = 4096; Match(ASC);
				}
			}

			State = 4100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESC) {
				{
				State = 4099; Match(DESC);
				}
			}

			State = 4104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
			case 1:
				{
				State = 4102; Match(NULLS);
				State = 4103; Match(FIRST);
				}
				break;
			}
			State = 4108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 4106; Match(NULLS);
				State = 4107; Match(LAST);
				}
			}

			State = 4128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4110; Match(COMMA);
				State = 4111; column_name();
				State = 4113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC) {
					{
					State = 4112; Match(ASC);
					}
				}

				State = 4116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DESC) {
					{
					State = 4115; Match(DESC);
					}
				}

				State = 4120;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
				case 1:
					{
					State = 4118; Match(NULLS);
					State = 4119; Match(FIRST);
					}
					break;
				}
				State = 4124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULLS) {
					{
					State = 4122; Match(NULLS);
					State = 4123; Match(LAST);
					}
				}

				}
				}
				State = 4130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4131; Match(SET);
			State = 4132; column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cycle_clauseContext : ParserRuleContext {
		public ITerminalNode CYCLE() { return GetToken(PlSqlParser.CYCLE, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycle_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCycle_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cycle_clauseContext cycle_clause() {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(Context, State);
		EnterRule(_localctx, 516, RULE_cycle_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4134; Match(CYCLE);
			State = 4135; column_list();
			State = 4136; Match(SET);
			State = 4137; column_name();
			State = 4138; Match(TO);
			State = 4139; expression();
			State = 4140; Match(DEFAULT);
			State = 4141; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_basic_elementsContext : ParserRuleContext {
		public Query_blockContext query_block() {
			return GetRuleContext<Query_blockContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_basic_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_basic_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_basic_elementsContext subquery_basic_elements() {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(Context, State);
		EnterRule(_localctx, 518, RULE_subquery_basic_elements);
		try {
			State = 4148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4143; query_block();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4144; Match(LEFT_PAREN);
				State = 4145; subquery();
				State = 4146; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_operation_partContext : ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return GetRuleContext<Subquery_basic_elementsContext>(0);
		}
		public ITerminalNode UNION() { return GetToken(PlSqlParser.UNION, 0); }
		public ITerminalNode INTERSECT() { return GetToken(PlSqlParser.INTERSECT, 0); }
		public ITerminalNode MINUS() { return GetToken(PlSqlParser.MINUS, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_operation_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_operation_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_operation_partContext subquery_operation_part() {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(Context, State);
		EnterRule(_localctx, 520, RULE_subquery_operation_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4156;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 4150; Match(UNION);
				State = 4152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 4151; Match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				State = 4154; Match(INTERSECT);
				}
				break;
			case MINUS:
				{
				State = 4155; Match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4158; subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_blockContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return GetRuleContext<Hierarchical_query_clauseContext>(0);
		}
		public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		public Model_clauseContext model_clause() {
			return GetRuleContext<Model_clauseContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Selected_elementContext[] selected_element() {
			return GetRuleContexts<Selected_elementContext>();
		}
		public Selected_elementContext selected_element(int i) {
			return GetRuleContext<Selected_elementContext>(i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_blockContext query_block() {
		Query_blockContext _localctx = new Query_blockContext(Context, State);
		EnterRule(_localctx, 522, RULE_query_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4160; Match(SELECT);
			State = 4162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
			case 1:
				{
				State = 4161;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 4173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 4164; Match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4169;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4166;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4165; Match(COMMA);
							}
						}

						State = 4168; selected_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4171;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,525,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				State = 4175; into_clause();
				}
			}

			State = 4178; from_clause();
			State = 4180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
			case 1:
				{
				State = 4179; where_clause();
				}
				break;
			}
			State = 4183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
			case 1:
				{
				State = 4182; hierarchical_query_clause();
				}
				break;
			}
			State = 4186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
			case 1:
				{
				State = 4185; group_by_clause();
				}
				break;
			}
			State = 4189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
			case 1:
				{
				State = 4188; model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_elementContext : ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return GetRuleContext<Select_list_elementsContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_elementContext selected_element() {
		Selected_elementContext _localctx = new Selected_elementContext(Context, State);
		EnterRule(_localctx, 524, RULE_selected_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4191; select_list_elements();
			State = 4193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				{
				State = 4192; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return GetRuleContext<Table_ref_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 526, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4195; Match(FROM);
			State = 4196; table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elementsContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elementsContext select_list_elements() {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(Context, State);
		EnterRule(_localctx, 528, RULE_select_list_elements);
		try {
			State = 4208;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4198; tableview_name();
				State = 4199; Match(PERIOD);
				State = 4200; Match(ASTERISK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4205;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
				case 1:
					{
					State = 4202; regular_id();
					State = 4203; Match(PERIOD);
					}
					break;
				}
				State = 4207; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_listContext : ParserRuleContext {
		public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_listContext table_ref_list() {
		Table_ref_listContext _localctx = new Table_ref_listContext(Context, State);
		EnterRule(_localctx, 530, RULE_table_ref_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4214;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4210; Match(COMMA);
						}
					}

					State = 4213; table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4216;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,536,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return GetRuleContext<Table_ref_auxContext>(0);
		}
		public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 532, RULE_table_ref);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4218; table_ref_aux();
			State = 4222;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,537,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4219; join_clause();
					}
					} 
				}
				State = 4224;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,537,Context);
			}
			State = 4227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
			case 1:
				{
				State = 4225; pivot_clause();
				}
				break;
			case 2:
				{
				State = 4226; unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_auxContext : ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return GetRuleContext<Table_ref_aux_internalContext>(0);
		}
		public Flashback_query_clauseContext[] flashback_query_clause() {
			return GetRuleContexts<Flashback_query_clauseContext>();
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return GetRuleContext<Flashback_query_clauseContext>(i);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_aux; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_auxContext table_ref_aux() {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(Context, State);
		EnterRule(_localctx, 534, RULE_table_ref_aux);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4229; table_ref_aux_internal();
			State = 4233;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,539,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4230; flashback_query_clause();
					}
					} 
				}
				State = 4235;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,539,Context);
			}
			State = 4237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
			case 1:
				{
				State = 4236; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_aux_internalContext : ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_aux_internal; } }
	 
		public Table_ref_aux_internalContext() { }
		public virtual void CopyFrom(Table_ref_aux_internalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Table_ref_aux_internal_threeContext : Table_ref_aux_internalContext {
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_three(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_ref_aux_internal_oneContext : Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_one(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_ref_aux_internal_twoContext : Table_ref_aux_internalContext {
		public Table_refContext table_ref() {
			return GetRuleContext<Table_refContext>(0);
		}
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_two(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_aux_internalContext table_ref_aux_internal() {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(Context, State);
		EnterRule(_localctx, 536, RULE_table_ref_aux_internal);
		int _la;
		try {
			State = 4262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,544,Context) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4239; dml_table_expression_clause();
				State = 4242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
				case 1:
					{
					State = 4240; pivot_clause();
					}
					break;
				case 2:
					{
					State = 4241; unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4244; Match(LEFT_PAREN);
				State = 4245; table_ref();
				State = 4249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					State = 4246; subquery_operation_part();
					}
					}
					State = 4251;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4252; Match(RIGHT_PAREN);
				State = 4255;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
				case 1:
					{
					State = 4253; pivot_clause();
					}
					break;
				case 2:
					{
					State = 4254; unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4257; Match(ONLY);
				State = 4258; Match(LEFT_PAREN);
				State = 4259; dml_table_expression_clause();
				State = 4260; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return GetRuleContext<Table_ref_auxContext>(0);
		}
		public Query_partition_clauseContext[] query_partition_clause() {
			return GetRuleContexts<Query_partition_clauseContext>();
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return GetRuleContext<Query_partition_clauseContext>(i);
		}
		public ITerminalNode INNER() { return GetToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return GetRuleContext<Outer_join_typeContext>(0);
		}
		public Join_on_partContext[] join_on_part() {
			return GetRuleContexts<Join_on_partContext>();
		}
		public Join_on_partContext join_on_part(int i) {
			return GetRuleContext<Join_on_partContext>(i);
		}
		public Join_using_partContext[] join_using_part() {
			return GetRuleContexts<Join_using_partContext>();
		}
		public Join_using_partContext join_using_part(int i) {
			return GetRuleContext<Join_using_partContext>(i);
		}
		public ITerminalNode CROSS() { return GetToken(PlSqlParser.CROSS, 0); }
		public ITerminalNode NATURAL() { return GetToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 538, RULE_join_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 4264; query_partition_clause();
				}
			}

			State = 4268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				State = 4267;
				_la = TokenStream.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4272;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				{
				State = 4270; Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				State = 4271; outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			State = 4274; Match(JOIN);
			State = 4275; table_ref_aux();
			State = 4277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,548,Context) ) {
			case 1:
				{
				State = 4276; query_partition_clause();
				}
				break;
			}
			State = 4283;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,550,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 4281;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ON:
						{
						State = 4279; join_on_part();
						}
						break;
					case USING:
						{
						State = 4280; join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 4285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,550,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_on_partContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_on_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_on_partContext join_on_part() {
		Join_on_partContext _localctx = new Join_on_partContext(Context, State);
		EnterRule(_localctx, 540, RULE_join_on_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4286; Match(ON);
			State = 4287; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_using_partContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_using_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_using_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_using_partContext join_using_part() {
		Join_using_partContext _localctx = new Join_using_partContext(Context, State);
		EnterRule(_localctx, 542, RULE_join_using_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4289; Match(USING);
			State = 4290; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_typeContext : ParserRuleContext {
		public ITerminalNode FULL() { return GetToken(PlSqlParser.FULL, 0); }
		public ITerminalNode LEFT() { return GetToken(PlSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(PlSqlParser.RIGHT, 0); }
		public ITerminalNode OUTER() { return GetToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_typeContext outer_join_type() {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(Context, State);
		EnterRule(_localctx, 544, RULE_outer_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4292;
			_la = TokenStream.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER) {
				{
				State = 4293; Match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_partition_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_partition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_partition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_partition_clauseContext query_partition_clause() {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(Context, State);
		EnterRule(_localctx, 546, RULE_query_partition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4296; Match(PARTITION);
			State = 4297; Match(BY);
			State = 4305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
			case 1:
				{
				{
				State = 4298; Match(LEFT_PAREN);
				State = 4301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,552,Context) ) {
				case 1:
					{
					State = 4299; subquery();
					}
					break;
				case 2:
					{
					State = 4300; expressions();
					}
					break;
				}
				State = 4303; Match(RIGHT_PAREN);
				}
				}
				break;
			case 2:
				{
				State = 4304; expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_query_clauseContext : ParserRuleContext {
		public ITerminalNode VERSIONS() { return GetToken(PlSqlParser.VERSIONS, 0); }
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SCN() { return GetToken(PlSqlParser.SCN, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_query_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_query_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_query_clauseContext flashback_query_clause() {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(Context, State);
		EnterRule(_localctx, 548, RULE_flashback_query_clause);
		int _la;
		try {
			State = 4315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERSIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4307; Match(VERSIONS);
				State = 4308; Match(BETWEEN);
				State = 4309;
				_la = TokenStream.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4310; expression();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4311; Match(AS);
				State = 4312; Match(OF);
				State = 4313;
				_la = TokenStream.LA(1);
				if ( !(_la==SCN || _la==SNAPSHOT || _la==TIMESTAMP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4314; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public ITerminalNode PIVOT() { return GetToken(PlSqlParser.PIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return GetRuleContext<Pivot_for_clauseContext>(0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return GetRuleContext<Pivot_in_clauseContext>(0);
		}
		public ITerminalNode XML() { return GetToken(PlSqlParser.XML, 0); }
		public Pivot_elementContext[] pivot_element() {
			return GetRuleContexts<Pivot_elementContext>();
		}
		public Pivot_elementContext pivot_element(int i) {
			return GetRuleContext<Pivot_elementContext>(i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(Context, State);
		EnterRule(_localctx, 550, RULE_pivot_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4317; Match(PIVOT);
			State = 4319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==XML) {
				{
				State = 4318; Match(XML);
				}
			}

			State = 4321; Match(LEFT_PAREN);
			State = 4326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4322; Match(COMMA);
					}
				}

				State = 4325; pivot_element();
				}
				}
				State = 4328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 4330; pivot_for_clause();
			State = 4331; pivot_in_clause();
			State = 4332; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_elementContext : ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return GetRuleContext<Aggregate_function_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_elementContext pivot_element() {
		Pivot_elementContext _localctx = new Pivot_elementContext(Context, State);
		EnterRule(_localctx, 552, RULE_pivot_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4334; aggregate_function_name();
			State = 4335; Match(LEFT_PAREN);
			State = 4336; expression();
			State = 4337; Match(RIGHT_PAREN);
			State = 4339;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,558,Context) ) {
			case 1:
				{
				State = 4338; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_for_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_for_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_for_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_for_clauseContext pivot_for_clause() {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(Context, State);
		EnterRule(_localctx, 554, RULE_pivot_for_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4341; Match(FOR);
			State = 4344;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4342; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4343; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clauseContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode[] ANY() { return GetTokens(PlSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(PlSqlParser.ANY, i);
		}
		public Pivot_in_clause_elementContext[] pivot_in_clause_element() {
			return GetRuleContexts<Pivot_in_clause_elementContext>();
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return GetRuleContext<Pivot_in_clause_elementContext>(i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clauseContext pivot_in_clause() {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(Context, State);
		EnterRule(_localctx, 556, RULE_pivot_in_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4346; Match(IN);
			State = 4347; Match(LEFT_PAREN);
			State = 4365;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,564,Context) ) {
			case 1:
				{
				State = 4348; subquery();
				}
				break;
			case 2:
				{
				State = 4353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4349; Match(COMMA);
						}
					}

					State = 4352; Match(ANY);
					}
					}
					State = 4355;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ANY || _la==COMMA );
				}
				break;
			case 3:
				{
				State = 4361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4358;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4357; Match(COMMA);
						}
					}

					State = 4360; pivot_in_clause_element();
					}
					}
					State = 4363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
				break;
			}
			State = 4367; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clause_elementContext : ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return GetRuleContext<Pivot_in_clause_elementsContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clause_elementContext pivot_in_clause_element() {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(Context, State);
		EnterRule(_localctx, 558, RULE_pivot_in_clause_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4369; pivot_in_clause_elements();
			State = 4371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,565,Context) ) {
			case 1:
				{
				State = 4370; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clause_elementsContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(Context, State);
		EnterRule(_localctx, 560, RULE_pivot_in_clause_elements);
		int _la;
		try {
			State = 4379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,567,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4373; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4374; Match(LEFT_PAREN);
				State = 4376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 4375; expressions();
					}
				}

				State = 4378; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ITerminalNode UNPIVOT() { return GetToken(PlSqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return GetRuleContext<Pivot_for_clauseContext>(0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return GetRuleContext<Unpivot_in_clauseContext>(0);
		}
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode INCLUDE() { return GetToken(PlSqlParser.INCLUDE, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(PlSqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(Context, State);
		EnterRule(_localctx, 562, RULE_unpivot_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4381; Match(UNPIVOT);
			State = 4384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				State = 4382;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4383; Match(NULLS);
				}
			}

			State = 4386; Match(LEFT_PAREN);
			State = 4389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4387; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4388; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4391; pivot_for_clause();
			State = 4392; unpivot_in_clause();
			State = 4393; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_in_clauseContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Unpivot_in_elementsContext[] unpivot_in_elements() {
			return GetRuleContexts<Unpivot_in_elementsContext>();
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return GetRuleContext<Unpivot_in_elementsContext>(i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_in_clauseContext unpivot_in_clause() {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(Context, State);
		EnterRule(_localctx, 564, RULE_unpivot_in_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4395; Match(IN);
			State = 4396; Match(LEFT_PAREN);
			State = 4401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4397; Match(COMMA);
					}
				}

				State = 4400; unpivot_in_elements();
				}
				}
				State = 4403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (COMMA - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 4405; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_in_elementsContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_in_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_in_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_in_elementsContext unpivot_in_elements() {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(Context, State);
		EnterRule(_localctx, 566, RULE_unpivot_in_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4409;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4407; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4408; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 4411; Match(AS);
				State = 4424;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					State = 4412; constant();
					}
					break;
				case LEFT_PAREN:
					{
					State = 4413; Match(LEFT_PAREN);
					State = 4418;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4415;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4414; Match(COMMA);
							}
						}

						State = 4417; constant();
						}
						}
						State = 4420;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (DATE - 118)) | (1L << (DBTIMEZONE - 118)) | (1L << (DEFAULT - 118)))) != 0) || _la==FALSE || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (INTERVAL - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)))) != 0) || _la==NULL || _la==SESSIONTIMEZONE || _la==TIMESTAMP || _la==TRUE || ((((_la - 678)) & ~0x3f) == 0 && ((1L << (_la - 678)) & ((1L << (NATIONAL_CHAR_STRING_LIT - 678)) | (1L << (UNSIGNED_INTEGER - 678)) | (1L << (APPROXIMATE_NUM_LIT - 678)) | (1L << (CHAR_STRING - 678)) | (1L << (COMMA - 678)))) != 0) );
					State = 4422; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchical_query_clauseContext : ParserRuleContext {
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode NOCYCLE() { return GetToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return GetRuleContext<Start_partContext>(0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchical_query_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchical_query_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchical_query_clauseContext hierarchical_query_clause() {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(Context, State);
		EnterRule(_localctx, 568, RULE_hierarchical_query_clause);
		try {
			State = 4445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONNECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4428; Match(CONNECT);
				State = 4429; Match(BY);
				State = 4431;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,577,Context) ) {
				case 1:
					{
					State = 4430; Match(NOCYCLE);
					}
					break;
				}
				State = 4433; condition();
				State = 4435;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
				case 1:
					{
					State = 4434; start_part();
					}
					break;
				}
				}
				break;
			case START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4437; start_part();
				State = 4438; Match(CONNECT);
				State = 4439; Match(BY);
				State = 4441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,579,Context) ) {
				case 1:
					{
					State = 4440; Match(NOCYCLE);
					}
					break;
				}
				State = 4443; condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_partContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(PlSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_partContext start_part() {
		Start_partContext _localctx = new Start_partContext(Context, State);
		EnterRule(_localctx, 570, RULE_start_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4447; Match(START);
			State = 4448; Match(WITH);
			State = 4449; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Group_by_elementsContext[] group_by_elements() {
			return GetRuleContexts<Group_by_elementsContext>();
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return GetRuleContext<Group_by_elementsContext>(i);
		}
		public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 572, RULE_group_by_clause);
		int _la;
		try {
			int _alt;
			State = 4477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4451; Match(GROUP);
				State = 4452; Match(BY);
				State = 4457;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4454;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4453; Match(COMMA);
							}
						}

						State = 4456; group_by_elements();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4459;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,582,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 4462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
				case 1:
					{
					State = 4461; having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4464; having_clause();
				State = 4475;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,586,Context) ) {
				case 1:
					{
					State = 4465; Match(GROUP);
					State = 4466; Match(BY);
					State = 4471;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 4468;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 4467; Match(COMMA);
								}
							}

							State = 4470; group_by_elements();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4473;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,585,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_elementsContext : ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return GetRuleContext<Grouping_sets_clauseContext>(0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return GetRuleContext<Rollup_cube_clauseContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_elementsContext group_by_elements() {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(Context, State);
		EnterRule(_localctx, 574, RULE_group_by_elements);
		try {
			State = 4482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,588,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4479; grouping_sets_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4480; rollup_cube_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4481; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_cube_clauseContext : ParserRuleContext {
		public ITerminalNode ROLLUP() { return GetToken(PlSqlParser.ROLLUP, 0); }
		public ITerminalNode CUBE() { return GetToken(PlSqlParser.CUBE, 0); }
		public Grouping_sets_elementsContext[] grouping_sets_elements() {
			return GetRuleContexts<Grouping_sets_elementsContext>();
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return GetRuleContext<Grouping_sets_elementsContext>(i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_cube_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_cube_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_cube_clauseContext rollup_cube_clause() {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(Context, State);
		EnterRule(_localctx, 576, RULE_rollup_cube_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4484;
			_la = TokenStream.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4485; Match(LEFT_PAREN);
			State = 4490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4486; Match(COMMA);
					}
				}

				State = 4489; grouping_sets_elements();
				}
				}
				State = 4492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 4494; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_clauseContext : ParserRuleContext {
		public ITerminalNode GROUPING() { return GetToken(PlSqlParser.GROUPING, 0); }
		public ITerminalNode SETS() { return GetToken(PlSqlParser.SETS, 0); }
		public Grouping_sets_elementsContext[] grouping_sets_elements() {
			return GetRuleContexts<Grouping_sets_elementsContext>();
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return GetRuleContext<Grouping_sets_elementsContext>(i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_clauseContext grouping_sets_clause() {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(Context, State);
		EnterRule(_localctx, 578, RULE_grouping_sets_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4496; Match(GROUPING);
			State = 4497; Match(SETS);
			State = 4498; Match(LEFT_PAREN);
			State = 4503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4499; Match(COMMA);
					}
				}

				State = 4502; grouping_sets_elements();
				}
				}
				State = 4505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 4507; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_elementsContext : ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return GetRuleContext<Rollup_cube_clauseContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_elementsContext grouping_sets_elements() {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(Context, State);
		EnterRule(_localctx, 580, RULE_grouping_sets_elements);
		int _la;
		try {
			State = 4516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,594,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4509; rollup_cube_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4510; Match(LEFT_PAREN);
				State = 4512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 4511; expressions();
					}
				}

				State = 4514; Match(RIGHT_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4515; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		public ITerminalNode HAVING() { return GetToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 582, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4518; Match(HAVING);
			State = 4519; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_clauseContext : ParserRuleContext {
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return GetRuleContext<Main_modelContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return GetRuleContext<Return_rows_clauseContext>(0);
		}
		public Reference_modelContext[] reference_model() {
			return GetRuleContexts<Reference_modelContext>();
		}
		public Reference_modelContext reference_model(int i) {
			return GetRuleContext<Reference_modelContext>(i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_clauseContext model_clause() {
		Model_clauseContext _localctx = new Model_clauseContext(Context, State);
		EnterRule(_localctx, 584, RULE_model_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4521; Match(MODEL);
			State = 4525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 4522; cell_reference_options();
				}
				}
				State = 4527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 4528; return_rows_clause();
				}
			}

			State = 4534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REFERENCE) {
				{
				{
				State = 4531; reference_model();
				}
				}
				State = 4536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4537; main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_reference_optionsContext : ParserRuleContext {
		public ITerminalNode NAV() { return GetToken(PlSqlParser.NAV, 0); }
		public ITerminalNode IGNORE() { return GetToken(PlSqlParser.IGNORE, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode SINGLE() { return GetToken(PlSqlParser.SINGLE, 0); }
		public ITerminalNode REFERENCE() { return GetToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_reference_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_reference_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_reference_optionsContext cell_reference_options() {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(Context, State);
		EnterRule(_localctx, 586, RULE_cell_reference_options);
		int _la;
		try {
			State = 4547;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE:
			case KEEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4539;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4540; Match(NAV);
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4541; Match(UNIQUE);
				State = 4545;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DIMENSION:
					{
					State = 4542; Match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					State = 4543; Match(SINGLE);
					State = 4544; Match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_rows_clauseContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public ITerminalNode UPDATED() { return GetToken(PlSqlParser.UPDATED, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_rows_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_rows_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_rows_clauseContext return_rows_clause() {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(Context, State);
		EnterRule(_localctx, 588, RULE_return_rows_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4549; Match(RETURN);
			State = 4550;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4551; Match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_modelContext : ParserRuleContext {
		public ITerminalNode REFERENCE() { return GetToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return GetRuleContext<Reference_model_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return GetRuleContext<Model_column_clausesContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_model; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_model(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_modelContext reference_model() {
		Reference_modelContext _localctx = new Reference_modelContext(Context, State);
		EnterRule(_localctx, 590, RULE_reference_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4553; Match(REFERENCE);
			State = 4554; reference_model_name();
			State = 4555; Match(ON);
			State = 4556; Match(LEFT_PAREN);
			State = 4557; subquery();
			State = 4558; Match(RIGHT_PAREN);
			State = 4559; model_column_clauses();
			State = 4563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 4560; cell_reference_options();
				}
				}
				State = 4565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_modelContext : ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return GetRuleContext<Model_column_clausesContext>(0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return GetRuleContext<Model_rules_clauseContext>(0);
		}
		public ITerminalNode MAIN() { return GetToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return GetRuleContext<Main_model_nameContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_model; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain_model(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Main_modelContext main_model() {
		Main_modelContext _localctx = new Main_modelContext(Context, State);
		EnterRule(_localctx, 592, RULE_main_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAIN) {
				{
				State = 4566; Match(MAIN);
				State = 4567; main_model_name();
				}
			}

			State = 4570; model_column_clauses();
			State = 4574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 4571; cell_reference_options();
				}
				}
				State = 4576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4577; model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_clausesContext : ParserRuleContext {
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Model_column_listContext[] model_column_list() {
			return GetRuleContexts<Model_column_listContext>();
		}
		public Model_column_listContext model_column_list(int i) {
			return GetRuleContext<Model_column_listContext>(i);
		}
		public ITerminalNode MEASURES() { return GetToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return GetRuleContext<Model_column_partition_partContext>(0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_clausesContext model_column_clauses() {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(Context, State);
		EnterRule(_localctx, 594, RULE_model_column_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4580;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 4579; model_column_partition_part();
				}
			}

			State = 4582; Match(DIMENSION);
			State = 4583; Match(BY);
			State = 4584; model_column_list();
			State = 4585; Match(MEASURES);
			State = 4586; model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_partition_partContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return GetRuleContext<Model_column_listContext>(0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_partition_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_partition_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_partition_partContext model_column_partition_part() {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(Context, State);
		EnterRule(_localctx, 596, RULE_model_column_partition_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4588; Match(PARTITION);
			State = 4589; Match(BY);
			State = 4590; model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_listContext : ParserRuleContext {
		public Model_columnContext[] model_column() {
			return GetRuleContexts<Model_columnContext>();
		}
		public Model_columnContext model_column(int i) {
			return GetRuleContext<Model_columnContext>(i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_listContext model_column_list() {
		Model_column_listContext _localctx = new Model_column_listContext(Context, State);
		EnterRule(_localctx, 598, RULE_model_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4592; Match(LEFT_PAREN);
			State = 4597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4593; Match(COMMA);
					}
				}

				State = 4596; model_column();
				}
				}
				State = 4599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELECT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 4601; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_columnContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Query_blockContext query_block() {
			return GetRuleContext<Query_blockContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_columnContext model_column() {
		Model_columnContext _localctx = new Model_columnContext(Context, State);
		EnterRule(_localctx, 600, RULE_model_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4605;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4603; expression();
				}
				break;
			case SELECT:
				{
				State = 4604; query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,607,Context) ) {
			case 1:
				{
				State = 4607; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_clauseContext : ParserRuleContext {
		public Model_rules_partContext model_rules_part() {
			return GetRuleContext<Model_rules_partContext>(0);
		}
		public Model_rules_elementContext[] model_rules_element() {
			return GetRuleContexts<Model_rules_elementContext>();
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return GetRuleContext<Model_rules_elementContext>(i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_clauseContext model_rules_clause() {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(Context, State);
		EnterRule(_localctx, 602, RULE_model_rules_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RULES) {
				{
				State = 4610; model_rules_part();
				}
			}

			State = 4613; Match(LEFT_PAREN);
			State = 4620;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPDATE - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				State = 4615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4614; Match(COMMA);
					}
				}

				State = 4617; model_rules_element();
				}
				}
				State = 4622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4623; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_partContext : ParserRuleContext {
		public ITerminalNode RULES() { return GetToken(PlSqlParser.RULES, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode UPSERT() { return GetToken(PlSqlParser.UPSERT, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return GetRuleContext<Model_iterate_clauseContext>(0);
		}
		public ITerminalNode AUTOMATIC() { return GetToken(PlSqlParser.AUTOMATIC, 0); }
		public ITerminalNode SEQUENTIAL() { return GetToken(PlSqlParser.SEQUENTIAL, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_partContext model_rules_part() {
		Model_rules_partContext _localctx = new Model_rules_partContext(Context, State);
		EnterRule(_localctx, 604, RULE_model_rules_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4625; Match(RULES);
			State = 4631;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				{
				State = 4626; Match(UPDATE);
				}
				break;
			case UPSERT:
				{
				State = 4627; Match(UPSERT);
				State = 4629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 4628; Match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			State = 4635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				State = 4633;
				_la = TokenStream.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4634; Match(ORDER);
				}
			}

			State = 4638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ITERATE) {
				{
				State = 4637; model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_elementContext : ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return GetRuleContext<Cell_assignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode UPSERT() { return GetToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_elementContext model_rules_element() {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(Context, State);
		EnterRule(_localctx, 606, RULE_model_rules_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,616,Context) ) {
			case 1:
				{
				State = 4640; Match(UPDATE);
				}
				break;
			case 2:
				{
				State = 4641; Match(UPSERT);
				State = 4643;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,615,Context) ) {
				case 1:
					{
					State = 4642; Match(ALL);
					}
					break;
				}
				}
				break;
			}
			State = 4647; cell_assignment();
			State = 4649;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 4648; order_by_clause();
				}
			}

			State = 4651; Match(EQUALS_OP);
			State = 4652; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_assignmentContext : ParserRuleContext {
		public Model_expressionContext model_expression() {
			return GetRuleContext<Model_expressionContext>(0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_assignmentContext cell_assignment() {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(Context, State);
		EnterRule(_localctx, 608, RULE_cell_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4654; model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_iterate_clauseContext : ParserRuleContext {
		public ITerminalNode ITERATE() { return GetToken(PlSqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Until_partContext until_part() {
			return GetRuleContext<Until_partContext>(0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_iterate_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_iterate_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_iterate_clauseContext model_iterate_clause() {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(Context, State);
		EnterRule(_localctx, 610, RULE_model_iterate_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4656; Match(ITERATE);
			State = 4657; Match(LEFT_PAREN);
			State = 4658; expression();
			State = 4659; Match(RIGHT_PAREN);
			State = 4661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 4660; until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Until_partContext : ParserRuleContext {
		public ITerminalNode UNTIL() { return GetToken(PlSqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Until_partContext until_part() {
		Until_partContext _localctx = new Until_partContext(Context, State);
		EnterRule(_localctx, 612, RULE_until_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4663; Match(UNTIL);
			State = 4664; Match(LEFT_PAREN);
			State = 4665; condition();
			State = 4666; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode SIBLINGS() { return GetToken(PlSqlParser.SIBLINGS, 0); }
		public Order_by_elementsContext[] order_by_elements() {
			return GetRuleContexts<Order_by_elementsContext>();
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return GetRuleContext<Order_by_elementsContext>(i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 614, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4668; Match(ORDER);
			State = 4670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIBLINGS) {
				{
				State = 4669; Match(SIBLINGS);
				}
			}

			State = 4672; Match(BY);
			State = 4677;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4674;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 4673; Match(COMMA);
						}
					}

					State = 4676; order_by_elements();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4679;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,621,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_elementsContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode ASC() { return GetToken(PlSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(PlSqlParser.DESC, 0); }
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_elementsContext order_by_elements() {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(Context, State);
		EnterRule(_localctx, 616, RULE_order_by_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4681; expression();
			State = 4683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 4682;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4687;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,623,Context) ) {
			case 1:
				{
				State = 4685; Match(NULLS);
				State = 4686;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return GetRuleContext<For_update_of_partContext>(0);
		}
		public For_update_optionsContext for_update_options() {
			return GetRuleContext<For_update_optionsContext>(0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_clauseContext for_update_clause() {
		For_update_clauseContext _localctx = new For_update_clauseContext(Context, State);
		EnterRule(_localctx, 618, RULE_for_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4689; Match(FOR);
			State = 4690; Match(UPDATE);
			State = 4692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF) {
				{
				State = 4691; for_update_of_part();
				}
			}

			State = 4695;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				State = 4694; for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_of_partContext : ParserRuleContext {
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_of_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_of_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_of_partContext for_update_of_part() {
		For_update_of_partContext _localctx = new For_update_of_partContext(Context, State);
		EnterRule(_localctx, 620, RULE_for_update_of_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4697; Match(OF);
			State = 4698; column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_optionsContext : ParserRuleContext {
		public ITerminalNode SKIP_() { return GetToken(PlSqlParser.SKIP_, 0); }
		public ITerminalNode LOCKED() { return GetToken(PlSqlParser.LOCKED, 0); }
		public ITerminalNode NOWAIT() { return GetToken(PlSqlParser.NOWAIT, 0); }
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_optionsContext for_update_options() {
		For_update_optionsContext _localctx = new For_update_optionsContext(Context, State);
		EnterRule(_localctx, 622, RULE_for_update_options);
		try {
			State = 4705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4700; Match(SKIP_);
				State = 4701; Match(LOCKED);
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4702; Match(NOWAIT);
				}
				break;
			case WAIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4703; Match(WAIT);
				State = 4704; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public Update_set_clauseContext update_set_clause() {
			return GetRuleContext<Update_set_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 624, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4707; Match(UPDATE);
			State = 4708; general_table_ref();
			State = 4709; update_set_clause();
			State = 4711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4710; where_clause();
				}
			}

			State = 4714;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING || _la==RETURN) {
				{
				State = 4713; static_returning_clause();
				}
			}

			State = 4717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 4716; error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_set_clauseContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_based_update_set_clauseContext[] column_based_update_set_clause() {
			return GetRuleContexts<Column_based_update_set_clauseContext>();
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return GetRuleContext<Column_based_update_set_clauseContext>(i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_set_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_set_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_set_clauseContext update_set_clause() {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(Context, State);
		EnterRule(_localctx, 626, RULE_update_set_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4719; Match(SET);
			State = 4735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,632,Context) ) {
			case 1:
				{
				State = 4724;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4721;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 4720; Match(COMMA);
							}
						}

						State = 4723; column_based_update_set_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4726;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,631,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 4728; Match(VALUE);
				State = 4729; Match(LEFT_PAREN);
				State = 4730; identifier();
				State = 4731; Match(RIGHT_PAREN);
				State = 4732; Match(EQUALS_OP);
				State = 4733; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_based_update_set_clauseContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_based_update_set_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_based_update_set_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_based_update_set_clauseContext column_based_update_set_clause() {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(Context, State);
		EnterRule(_localctx, 628, RULE_column_based_update_set_clause);
		try {
			State = 4745;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4737; column_name();
				State = 4738; Match(EQUALS_OP);
				State = 4739; expression();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4741; paren_column_list();
				State = 4742; Match(EQUALS_OP);
				State = 4743; subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 630, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4747; Match(DELETE);
			State = 4749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 4748; Match(FROM);
				}
			}

			State = 4751; general_table_ref();
			State = 4753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4752; where_clause();
				}
			}

			State = 4756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURNING || _la==RETURN) {
				{
				State = 4755; static_returning_clause();
				}
			}

			State = 4759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 4758; error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return GetRuleContext<Single_table_insertContext>(0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return GetRuleContext<Multi_table_insertContext>(0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 632, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4761; Match(INSERT);
			State = 4764;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				{
				State = 4762; single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				State = 4763; multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_table_insertContext : ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return GetRuleContext<Insert_into_clauseContext>(0);
		}
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_table_insert; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_table_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_table_insertContext single_table_insert() {
		Single_table_insertContext _localctx = new Single_table_insertContext(Context, State);
		EnterRule(_localctx, 634, RULE_single_table_insert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4766; insert_into_clause();
			State = 4772;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				{
				State = 4767; values_clause();
				State = 4769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					State = 4768; static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				State = 4771; select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 4774; error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_table_insertContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return GetRuleContext<Conditional_insert_clauseContext>(0);
		}
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_table_insert; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_table_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_table_insertContext multi_table_insert() {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(Context, State);
		EnterRule(_localctx, 636, RULE_multi_table_insert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4784;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,643,Context) ) {
			case 1:
				{
				State = 4777; Match(ALL);
				State = 4779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4778; multi_table_element();
					}
					}
					State = 4781;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				State = 4783; conditional_insert_clause();
				}
				break;
			}
			State = 4786; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_table_elementContext : ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return GetRuleContext<Insert_into_clauseContext>(0);
		}
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_table_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_table_elementContext multi_table_element() {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(Context, State);
		EnterRule(_localctx, 638, RULE_multi_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4788; insert_into_clause();
			State = 4790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VALUES) {
				{
				State = 4789; values_clause();
				}
			}

			State = 4793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 4792; error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_clauseContext : ParserRuleContext {
		public Conditional_insert_when_partContext[] conditional_insert_when_part() {
			return GetRuleContexts<Conditional_insert_when_partContext>();
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return GetRuleContext<Conditional_insert_when_partContext>(i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return GetRuleContext<Conditional_insert_else_partContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_clauseContext conditional_insert_clause() {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(Context, State);
		EnterRule(_localctx, 640, RULE_conditional_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				State = 4795;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4798; conditional_insert_when_part();
				}
				}
				State = 4801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4803; conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_when_partContext conditional_insert_when_part() {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(Context, State);
		EnterRule(_localctx, 642, RULE_conditional_insert_when_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4806; Match(WHEN);
			State = 4807; condition();
			State = 4808; Match(THEN);
			State = 4810;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4809; multi_table_element();
				}
				}
				State = 4812;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PlSqlParser.ELSE, 0); }
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_else_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_else_partContext conditional_insert_else_part() {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(Context, State);
		EnterRule(_localctx, 644, RULE_conditional_insert_else_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4814; Match(ELSE);
			State = 4816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4815; multi_table_element();
				}
				}
				State = 4818;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_into_clauseContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_into_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_into_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_into_clauseContext insert_into_clause() {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(Context, State);
		EnterRule(_localctx, 646, RULE_insert_into_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4820; Match(INTO);
			State = 4821; general_table_ref();
			State = 4823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				{
				State = 4822; paren_column_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 648, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4825; Match(VALUES);
			State = 4826; Match(LEFT_PAREN);
			State = 4828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 4827; expressions();
				}
			}

			State = 4830; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return GetRuleContext<Selected_tableviewContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(Context, State);
		EnterRule(_localctx, 650, RULE_merge_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4832; Match(MERGE);
			State = 4833; Match(INTO);
			State = 4834; tableview_name();
			State = 4836;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 4835; table_alias();
				}
			}

			State = 4838; Match(USING);
			State = 4839; selected_tableview();
			State = 4840; Match(ON);
			State = 4841; Match(LEFT_PAREN);
			State = 4842; condition();
			State = 4843; Match(RIGHT_PAREN);
			State = 4852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,656,Context) ) {
			case 1:
				{
				State = 4844; merge_update_clause();
				State = 4846;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 4845; merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 4848; merge_insert_clause();
				State = 4850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 4849; merge_update_clause();
					}
				}

				}
				break;
			}
			State = 4855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 4854; error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ITerminalNode MATCHED() { return GetToken(PlSqlParser.MATCHED, 0); }
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Merge_elementContext[] merge_element() {
			return GetRuleContexts<Merge_elementContext>();
		}
		public Merge_elementContext merge_element(int i) {
			return GetRuleContext<Merge_elementContext>(i);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return GetRuleContext<Merge_update_delete_partContext>(0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 652, RULE_merge_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4857; Match(WHEN);
			State = 4858; Match(MATCHED);
			State = 4859; Match(THEN);
			State = 4860; Match(UPDATE);
			State = 4861; Match(SET);
			State = 4862; merge_element();
			State = 4867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4863; Match(COMMA);
				State = 4864; merge_element();
				}
				}
				State = 4869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4870; where_clause();
				}
			}

			State = 4874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELETE) {
				{
				State = 4873; merge_update_delete_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_elementContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_elementContext merge_element() {
		Merge_elementContext _localctx = new Merge_elementContext(Context, State);
		EnterRule(_localctx, 654, RULE_merge_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4876; column_name();
			State = 4877; Match(EQUALS_OP);
			State = 4878; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_delete_partContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_delete_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_delete_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_delete_partContext merge_update_delete_part() {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(Context, State);
		EnterRule(_localctx, 656, RULE_merge_update_delete_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4880; Match(DELETE);
			State = 4881; where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode MATCHED() { return GetToken(PlSqlParser.MATCHED, 0); }
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 658, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4883; Match(WHEN);
			State = 4884; Match(NOT);
			State = 4885; Match(MATCHED);
			State = 4886; Match(THEN);
			State = 4887; Match(INSERT);
			State = 4889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 4888; paren_column_list();
				}
			}

			State = 4891; Match(VALUES);
			State = 4892; Match(LEFT_PAREN);
			State = 4894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 4893; expressions();
				}
			}

			State = 4896; Match(RIGHT_PAREN);
			State = 4898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4897; where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_tableviewContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_tableview; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_tableview(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_tableviewContext selected_tableview() {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(Context, State);
		EnterRule(_localctx, 660, RULE_selected_tableview);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4905;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4900; tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 4901; Match(LEFT_PAREN);
				State = 4902; select_statement();
				State = 4903; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4908;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 4907; table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_table_statementContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(PlSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Lock_table_elementContext[] lock_table_element() {
			return GetRuleContexts<Lock_table_elementContext>();
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return GetRuleContext<Lock_table_elementContext>(i);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return GetRuleContext<Lock_modeContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(PlSqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return GetRuleContext<Wait_nowait_partContext>(0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_table_statementContext lock_table_statement() {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(Context, State);
		EnterRule(_localctx, 662, RULE_lock_table_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4910; Match(LOCK);
			State = 4911; Match(TABLE);
			State = 4912; lock_table_element();
			State = 4917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4913; Match(COMMA);
				State = 4914; lock_table_element();
				}
				}
				State = 4919;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4920; Match(IN);
			State = 4921; lock_mode();
			State = 4922; Match(MODE);
			State = 4924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 4923; wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_nowait_partContext : ParserRuleContext {
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NOWAIT() { return GetToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_nowait_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWait_nowait_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wait_nowait_partContext wait_nowait_part() {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(Context, State);
		EnterRule(_localctx, 664, RULE_wait_nowait_part);
		try {
			State = 4929;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4926; Match(WAIT);
				State = 4927; expression();
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4928; Match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_table_elementContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return GetRuleContext<Partition_extension_clauseContext>(0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_table_elementContext lock_table_element() {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(Context, State);
		EnterRule(_localctx, 666, RULE_lock_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4931; tableview_name();
			State = 4933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				State = 4932; partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_modeContext : ParserRuleContext {
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode SHARE() { return GetToken(PlSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(PlSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_mode; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_mode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_modeContext lock_mode() {
		Lock_modeContext _localctx = new Lock_modeContext(Context, State);
		EnterRule(_localctx, 668, RULE_lock_mode);
		int _la;
		try {
			State = 4947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,671,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4935; Match(ROW);
				State = 4936; Match(SHARE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4937; Match(ROW);
				State = 4938; Match(EXCLUSIVE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4939; Match(SHARE);
				State = 4941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UPDATE) {
					{
					State = 4940; Match(UPDATE);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4943; Match(SHARE);
				State = 4944; Match(ROW);
				State = 4945; Match(EXCLUSIVE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4946; Match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_table_refContext : ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_table_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_table_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_table_refContext general_table_ref() {
		General_table_refContext _localctx = new General_table_refContext(Context, State);
		EnterRule(_localctx, 670, RULE_general_table_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,672,Context) ) {
			case 1:
				{
				State = 4949; dml_table_expression_clause();
				}
				break;
			case 2:
				{
				State = 4950; Match(ONLY);
				State = 4951; Match(LEFT_PAREN);
				State = 4952; dml_table_expression_clause();
				State = 4953; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 4958;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				{
				State = 4957; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_returning_clauseContext : ParserRuleContext {
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_returning_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_returning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_returning_clauseContext static_returning_clause() {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(Context, State);
		EnterRule(_localctx, 672, RULE_static_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4960;
			_la = TokenStream.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4961; expressions();
			State = 4962; into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_clauseContext : ParserRuleContext {
		public ITerminalNode LOG() { return GetToken(PlSqlParser.LOG, 0); }
		public ITerminalNode ERRORS() { return GetToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return GetRuleContext<Error_logging_into_partContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return GetRuleContext<Error_logging_reject_partContext>(0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_clauseContext error_logging_clause() {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(Context, State);
		EnterRule(_localctx, 674, RULE_error_logging_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4964; Match(LOG);
			State = 4965; Match(ERRORS);
			State = 4967;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,674,Context) ) {
			case 1:
				{
				State = 4966; error_logging_into_part();
				}
				break;
			}
			State = 4970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,675,Context) ) {
			case 1:
				{
				State = 4969; expression();
				}
				break;
			}
			State = 4973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REJECT) {
				{
				State = 4972; error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_into_partContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_into_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_into_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_into_partContext error_logging_into_part() {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(Context, State);
		EnterRule(_localctx, 676, RULE_error_logging_into_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4975; Match(INTO);
			State = 4976; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_reject_partContext : ParserRuleContext {
		public ITerminalNode REJECT() { return GetToken(PlSqlParser.REJECT, 0); }
		public ITerminalNode LIMIT() { return GetToken(PlSqlParser.LIMIT, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_reject_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_reject_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_reject_partContext error_logging_reject_part() {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(Context, State);
		EnterRule(_localctx, 678, RULE_error_logging_reject_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4978; Match(REJECT);
			State = 4979; Match(LIMIT);
			State = 4982;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,677,Context) ) {
			case 1:
				{
				State = 4980; Match(UNLIMITED);
				}
				break;
			case 2:
				{
				State = 4981; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_table_expression_clauseContext : ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return GetRuleContext<Table_collection_expressionContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return GetRuleContext<Subquery_restriction_clauseContext>(0);
		}
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Sample_clauseContext sample_clause() {
			return GetRuleContext<Sample_clauseContext>(0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_table_expression_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_table_expression_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_table_expression_clauseContext dml_table_expression_clause() {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(Context, State);
		EnterRule(_localctx, 680, RULE_dml_table_expression_clause);
		int _la;
		try {
			State = 4996;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
			case THE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4984; table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4985; Match(LEFT_PAREN);
				State = 4986; select_statement();
				State = 4988;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 4987; subquery_restriction_clause();
					}
				}

				State = 4990; Match(RIGHT_PAREN);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4992; tableview_name();
				State = 4994;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,679,Context) ) {
				case 1:
					{
					State = 4993; sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_collection_expressionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode THE() { return GetToken(PlSqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_collection_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_collection_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_collection_expressionContext table_collection_expression() {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(Context, State);
		EnterRule(_localctx, 682, RULE_table_collection_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4998;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,682,Context) ) {
			case 1:
				{
				State = 4999; Match(LEFT_PAREN);
				State = 5000; subquery();
				State = 5001; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 5003; Match(LEFT_PAREN);
				State = 5004; expression();
				State = 5005; Match(RIGHT_PAREN);
				State = 5009;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,681,Context) ) {
				case 1:
					{
					State = 5006; Match(LEFT_PAREN);
					State = 5007; Match(PLUS_SIGN);
					State = 5008; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_restriction_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode CHECK() { return GetToken(PlSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(PlSqlParser.OPTION, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_restriction_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_restriction_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_restriction_clauseContext subquery_restriction_clause() {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(Context, State);
		EnterRule(_localctx, 684, RULE_subquery_restriction_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5013; Match(WITH);
			State = 5022;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				{
				State = 5014; Match(READ);
				State = 5015; Match(ONLY);
				}
				break;
			case CHECK:
				{
				State = 5016; Match(CHECK);
				State = 5017; Match(OPTION);
				State = 5020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 5018; Match(CONSTRAINT);
					State = 5019; constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sample_clauseContext : ParserRuleContext {
		public ITerminalNode SAMPLE() { return GetToken(PlSqlParser.SAMPLE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BLOCK() { return GetToken(PlSqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return GetRuleContext<Seed_partContext>(0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sample_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSample_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sample_clauseContext sample_clause() {
		Sample_clauseContext _localctx = new Sample_clauseContext(Context, State);
		EnterRule(_localctx, 686, RULE_sample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5024; Match(SAMPLE);
			State = 5026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLOCK) {
				{
				State = 5025; Match(BLOCK);
				}
			}

			State = 5028; Match(LEFT_PAREN);
			State = 5029; expression();
			State = 5032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 5030; Match(COMMA);
				State = 5031; expression();
				}
			}

			State = 5034; Match(RIGHT_PAREN);
			State = 5036;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,687,Context) ) {
			case 1:
				{
				State = 5035; seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seed_partContext : ParserRuleContext {
		public ITerminalNode SEED() { return GetToken(PlSqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seed_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeed_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seed_partContext seed_part() {
		Seed_partContext _localctx = new Seed_partContext(Context, State);
		EnterRule(_localctx, 688, RULE_seed_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5038; Match(SEED);
			State = 5039; Match(LEFT_PAREN);
			State = 5040; expression();
			State = 5041; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 690, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5043; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 692, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5045; expression();
			State = 5050;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,688,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5046; Match(COMMA);
					State = 5047; expression();
					}
					} 
				}
				State = 5052;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,688,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return GetRuleContext<Cursor_expressionContext>(0);
		}
		public Logical_expressionContext logical_expression() {
			return GetRuleContext<Logical_expressionContext>(0);
		}
		public ITerminalNode VARIABLE_SESSION() { return GetToken(PlSqlParser.VARIABLE_SESSION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 694, RULE_expression);
		try {
			State = 5056;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,689,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5053; cursor_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5054; logical_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5055; Match(VARIABLE_SESSION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_expressionContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_expressionContext cursor_expression() {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(Context, State);
		EnterRule(_localctx, 696, RULE_cursor_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5058; Match(CURSOR);
			State = 5059; Match(LEFT_PAREN);
			State = 5060; subquery();
			State = 5061; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_expressionContext : ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return GetRuleContext<Multiset_expressionContext>(0);
		}
		public ITerminalNode[] IS() { return GetTokens(PlSqlParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(PlSqlParser.IS, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(PlSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(PlSqlParser.NULL, i);
		}
		public ITerminalNode[] NAN() { return GetTokens(PlSqlParser.NAN); }
		public ITerminalNode NAN(int i) {
			return GetToken(PlSqlParser.NAN, i);
		}
		public ITerminalNode[] PRESENT() { return GetTokens(PlSqlParser.PRESENT); }
		public ITerminalNode PRESENT(int i) {
			return GetToken(PlSqlParser.PRESENT, i);
		}
		public ITerminalNode[] INFINITE() { return GetTokens(PlSqlParser.INFINITE); }
		public ITerminalNode INFINITE(int i) {
			return GetToken(PlSqlParser.INFINITE, i);
		}
		public ITerminalNode[] A_LETTER() { return GetTokens(PlSqlParser.A_LETTER); }
		public ITerminalNode A_LETTER(int i) {
			return GetToken(PlSqlParser.A_LETTER, i);
		}
		public ITerminalNode[] SET() { return GetTokens(PlSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(PlSqlParser.SET, i);
		}
		public ITerminalNode[] EMPTY() { return GetTokens(PlSqlParser.EMPTY); }
		public ITerminalNode EMPTY(int i) {
			return GetToken(PlSqlParser.EMPTY, i);
		}
		public ITerminalNode[] OF() { return GetTokens(PlSqlParser.OF); }
		public ITerminalNode OF(int i) {
			return GetToken(PlSqlParser.OF, i);
		}
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode[] NOT() { return GetTokens(PlSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(PlSqlParser.NOT, i);
		}
		public ITerminalNode[] TYPE() { return GetTokens(PlSqlParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(PlSqlParser.TYPE, i);
		}
		public ITerminalNode[] ONLY() { return GetTokens(PlSqlParser.ONLY); }
		public ITerminalNode ONLY(int i) {
			return GetToken(PlSqlParser.ONLY, i);
		}
		public Logical_expressionContext[] logical_expression() {
			return GetRuleContexts<Logical_expressionContext>();
		}
		public Logical_expressionContext logical_expression(int i) {
			return GetRuleContext<Logical_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_expressionContext logical_expression() {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_expressionContext _localctx = new Logical_expressionContext(Context, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 698;
		EnterRecursionRule(_localctx, 698, RULE_logical_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5064; multiset_expression();
				State = 5098;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,695,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 5065; Match(IS);
						State = 5067;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 5066; Match(NOT);
							}
						}

						State = 5094;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NULL:
							{
							State = 5069; Match(NULL);
							}
							break;
						case NAN:
							{
							State = 5070; Match(NAN);
							}
							break;
						case PRESENT:
							{
							State = 5071; Match(PRESENT);
							}
							break;
						case INFINITE:
							{
							State = 5072; Match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							State = 5073; Match(A_LETTER);
							State = 5074; Match(SET);
							}
							break;
						case EMPTY:
							{
							State = 5075; Match(EMPTY);
							}
							break;
						case OF:
							{
							State = 5076; Match(OF);
							State = 5078;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==TYPE) {
								{
								State = 5077; Match(TYPE);
								}
							}

							State = 5080; Match(LEFT_PAREN);
							State = 5082;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,692,Context) ) {
							case 1:
								{
								State = 5081; Match(ONLY);
								}
								break;
							}
							State = 5084; type_spec();
							State = 5089;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 5085; Match(COMMA);
								State = 5086; type_spec();
								}
								}
								State = 5091;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 5092; Match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 5100;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,695,Context);
				}
				}
				break;
			case NOT:
				{
				State = 5101; Match(NOT);
				State = 5102; logical_expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5113;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,698,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5111;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,697,Context) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 5105;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5106; Match(AND);
						State = 5107; logical_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 5108;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5109; Match(OR);
						State = 5110; logical_expression(2);
						}
						break;
					}
					} 
				}
				State = 5115;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,698,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiset_expressionContext : ParserRuleContext {
		public IToken multiset_type;
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode SUBMULTISET() { return GetToken(PlSqlParser.SUBMULTISET, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiset_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiset_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiset_expressionContext multiset_expression() {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(Context, State);
		EnterRule(_localctx, 700, RULE_multiset_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5116; relational_expression(0);
			State = 5122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
			case 1:
				{
				State = 5117;
				_localctx.multiset_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
					_localctx.multiset_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF) {
					{
					State = 5118; Match(OF);
					}
				}

				State = 5121; concatenation(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Compound_expressionContext compound_expression() {
			return GetRuleContext<Compound_expressionContext>(0);
		}
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 702;
		EnterRecursionRule(_localctx, 702, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5125; compound_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,701,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 5127;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 5128; relational_operator();
					State = 5129; relational_expression(3);
					}
					} 
				}
				State = 5135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,701,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Compound_expressionContext : ParserRuleContext {
		public IToken like_type;
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return GetRuleContext<In_elementsContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return GetRuleContext<Between_elementsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode LIKE() { return GetToken(PlSqlParser.LIKE, 0); }
		public ITerminalNode LIKEC() { return GetToken(PlSqlParser.LIKEC, 0); }
		public ITerminalNode LIKE2() { return GetToken(PlSqlParser.LIKE2, 0); }
		public ITerminalNode LIKE4() { return GetToken(PlSqlParser.LIKE4, 0); }
		public ITerminalNode ESCAPE() { return GetToken(PlSqlParser.ESCAPE, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_expressionContext compound_expression() {
		Compound_expressionContext _localctx = new Compound_expressionContext(Context, State);
		EnterRule(_localctx, 704, RULE_compound_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5136; concatenation(0);
			State = 5152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
			case 1:
				{
				State = 5138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 5137; Match(NOT);
					}
				}

				State = 5150;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IN:
					{
					State = 5140; Match(IN);
					State = 5141; in_elements();
					}
					break;
				case BETWEEN:
					{
					State = 5142; Match(BETWEEN);
					State = 5143; between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					State = 5144;
					_localctx.like_type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (LIKE2 - 278)) | (1L << (LIKE4 - 278)) | (1L << (LIKEC - 278)) | (1L << (LIKE - 278)))) != 0)) ) {
						_localctx.like_type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5145; concatenation(0);
					State = 5148;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,703,Context) ) {
					case 1:
						{
						State = 5146; Match(ESCAPE);
						State = 5147; concatenation(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public ITerminalNode NOT_EQUAL_OP() { return GetToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 706, RULE_relational_operator);
		int _la;
		try {
			State = 5168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,708,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5154; Match(EQUALS_OP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5162;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT_EQUAL_OP:
					{
					State = 5155; Match(NOT_EQUAL_OP);
					}
					break;
				case LESS_THAN_OP:
					{
					State = 5156; Match(LESS_THAN_OP);
					State = 5157; Match(GREATER_THAN_OP);
					}
					break;
				case EXCLAMATION_OPERATOR_PART:
					{
					State = 5158; Match(EXCLAMATION_OPERATOR_PART);
					State = 5159; Match(EQUALS_OP);
					}
					break;
				case CARRET_OPERATOR_PART:
					{
					State = 5160; Match(CARRET_OPERATOR_PART);
					State = 5161; Match(EQUALS_OP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5164;
				_la = TokenStream.LA(1);
				if ( !(_la==GREATER_THAN_OP || _la==LESS_THAN_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS_OP) {
					{
					State = 5165; Match(EQUALS_OP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_elementsContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_elementsContext in_elements() {
		In_elementsContext _localctx = new In_elementsContext(Context, State);
		EnterRule(_localctx, 708, RULE_in_elements);
		int _la;
		try {
			State = 5188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,710,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5170; Match(LEFT_PAREN);
				State = 5171; subquery();
				State = 5172; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5174; Match(LEFT_PAREN);
				State = 5175; concatenation(0);
				State = 5180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5176; Match(COMMA);
					State = 5177; concatenation(0);
					}
					}
					State = 5182;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5183; Match(RIGHT_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5185; constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5186; bind_variable();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5187; general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_elementsContext : ParserRuleContext {
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_elementsContext between_elements() {
		Between_elementsContext _localctx = new Between_elementsContext(Context, State);
		EnterRule(_localctx, 710, RULE_between_elements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5190; concatenation(0);
			State = 5191; Match(AND);
			State = 5192; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenationContext : ParserRuleContext {
		public IToken op;
		public Model_expressionContext model_expression() {
			return GetRuleContext<Model_expressionContext>(0);
		}
		public ITerminalNode AT() { return GetToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return GetRuleContext<Interval_expressionContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(PlSqlParser.SOLIDUS, 0); }
		public ITerminalNode PLUS_SIGN() { return GetToken(PlSqlParser.PLUS_SIGN, 0); }
		public ITerminalNode MINUS_SIGN() { return GetToken(PlSqlParser.MINUS_SIGN, 0); }
		public ITerminalNode[] BAR() { return GetTokens(PlSqlParser.BAR); }
		public ITerminalNode BAR(int i) {
			return GetToken(PlSqlParser.BAR, i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenationContext concatenation() {
		return concatenation(0);
	}

	private ConcatenationContext concatenation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConcatenationContext _localctx = new ConcatenationContext(Context, _parentState);
		ConcatenationContext _prevctx = _localctx;
		int _startState = 712;
		EnterRecursionRule(_localctx, 712, RULE_concatenation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 5195; model_expression();
			State = 5204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,712,Context) ) {
			case 1:
				{
				State = 5196; Match(AT);
				State = 5201;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL:
					{
					State = 5197; Match(LOCAL);
					}
					break;
				case TIME:
					{
					State = 5198; Match(TIME);
					State = 5199; Match(ZONE);
					State = 5200; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 5203; interval_expression();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 5218;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,714,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 5216;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,713,Context) ) {
					case 1:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 5206;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 5207;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5208; concatenation(4);
						}
						break;
					case 2:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 5209;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 5210;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 5211; concatenation(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 5212;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 5213; Match(BAR);
						State = 5214; Match(BAR);
						State = 5215; concatenation(2);
						}
						break;
					}
					} 
				}
				State = 5220;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,714,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Interval_expressionContext : ParserRuleContext {
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interval_expressionContext interval_expression() {
		Interval_expressionContext _localctx = new Interval_expressionContext(Context, State);
		EnterRule(_localctx, 714, RULE_interval_expression);
		int _la;
		try {
			State = 5245;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5221; Match(DAY);
				State = 5226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 5222; Match(LEFT_PAREN);
					State = 5223; concatenation(0);
					State = 5224; Match(RIGHT_PAREN);
					}
				}

				State = 5228; Match(TO);
				State = 5229; Match(SECOND);
				State = 5234;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
				case 1:
					{
					State = 5230; Match(LEFT_PAREN);
					State = 5231; concatenation(0);
					State = 5232; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5236; Match(YEAR);
				State = 5241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 5237; Match(LEFT_PAREN);
					State = 5238; concatenation(0);
					State = 5239; Match(RIGHT_PAREN);
					}
				}

				State = 5243; Match(TO);
				State = 5244; Match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Model_expression_elementContext model_expression_element() {
			return GetRuleContext<Model_expression_elementContext>(0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_expressionContext model_expression() {
		Model_expressionContext _localctx = new Model_expressionContext(Context, State);
		EnterRule(_localctx, 716, RULE_model_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5247; unary_expression();
			State = 5252;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,719,Context) ) {
			case 1:
				{
				State = 5248; Match(LEFT_BRACKET);
				State = 5249; model_expression_element();
				State = 5250; Match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_expression_elementContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(PlSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(PlSqlParser.ANY, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Single_column_for_loopContext[] single_column_for_loop() {
			return GetRuleContexts<Single_column_for_loopContext>();
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return GetRuleContext<Single_column_for_loopContext>(i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return GetRuleContext<Multi_column_for_loopContext>(0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_expression_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_expression_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_expression_elementContext model_expression_element() {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(Context, State);
		EnterRule(_localctx, 718, RULE_model_expression_element);
		int _la;
		try {
			State = 5277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5256;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,720,Context) ) {
				case 1:
					{
					State = 5254; Match(ANY);
					}
					break;
				case 2:
					{
					State = 5255; expression();
					}
					break;
				}
				State = 5265;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5258; Match(COMMA);
					State = 5261;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,721,Context) ) {
					case 1:
						{
						State = 5259; Match(ANY);
						}
						break;
					case 2:
						{
						State = 5260; expression();
						}
						break;
					}
					}
					}
					State = 5267;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5268; single_column_for_loop();
				State = 5273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5269; Match(COMMA);
					State = 5270; single_column_for_loop();
					}
					}
					State = 5275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5276; multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_column_for_loopContext : ParserRuleContext {
		public ExpressionContext fromExpr;
		public ExpressionContext toExpr;
		public IToken action_type;
		public ExpressionContext action_expr;
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INCREMENT() { return GetToken(PlSqlParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(PlSqlParser.DECREMENT, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(PlSqlParser.LIKE, 0); }
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_column_for_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_column_for_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_column_for_loopContext single_column_for_loop() {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(Context, State);
		EnterRule(_localctx, 720, RULE_single_column_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5279; Match(FOR);
			State = 5280; column_name();
			State = 5298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
				{
				State = 5281; Match(IN);
				State = 5282; Match(LEFT_PAREN);
				State = 5284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 5283; expressions();
					}
				}

				State = 5286; Match(RIGHT_PAREN);
				}
				break;
			case FROM:
			case LIKE:
				{
				State = 5289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 5287; Match(LIKE);
					State = 5288; expression();
					}
				}

				State = 5291; Match(FROM);
				State = 5292; _localctx.fromExpr = expression();
				State = 5293; Match(TO);
				State = 5294; _localctx.toExpr = expression();
				State = 5295;
				_localctx.action_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DECREMENT || _la==INCREMENT) ) {
					_localctx.action_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5296; _localctx.action_expr = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_column_for_loopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_column_for_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_column_for_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_column_for_loopContext multi_column_for_loop() {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(Context, State);
		EnterRule(_localctx, 722, RULE_multi_column_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5300; Match(FOR);
			State = 5301; paren_column_list();
			State = 5302; Match(IN);
			State = 5303; Match(LEFT_PAREN);
			State = 5310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,729,Context) ) {
			case 1:
				{
				State = 5304; subquery();
				}
				break;
			case 2:
				{
				State = 5305; Match(LEFT_PAREN);
				State = 5307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 5306; expressions();
					}
				}

				State = 5309; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 5312; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode PRIOR() { return GetToken(PlSqlParser.PRIOR, 0); }
		public ITerminalNode CONNECT_BY_ROOT() { return GetToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public ITerminalNode NEW() { return GetToken(PlSqlParser.NEW, 0); }
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		public Quantified_expressionContext quantified_expression() {
			return GetRuleContext<Quantified_expressionContext>(0);
		}
		public Standard_functionContext standard_function() {
			return GetRuleContext<Standard_functionContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 724, RULE_unary_expression);
		int _la;
		try {
			State = 5330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,730,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5314;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5315; unary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5316; Match(PRIOR);
				State = 5317; unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5318; Match(CONNECT_BY_ROOT);
				State = 5319; unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5320; Match(NEW);
				State = 5321; unary_expression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5322; Match(DISTINCT);
				State = 5323; unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5324; Match(ALL);
				State = 5325; unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5326; case_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5327; quantified_expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5328; standard_function();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5329; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statementContext : ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return GetRuleContext<Searched_case_statementContext>(0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return GetRuleContext<Simple_case_statementContext>(0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_statementContext case_statement() {
		Case_statementContext _localctx = new Case_statementContext(Context, State);
		EnterRule(_localctx, 726, RULE_case_statement);
		try {
			State = 5334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,731,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5332; searched_case_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5333; simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_case_statementContext : ParserRuleContext {
		public IToken ck1;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode[] CASE() { return GetTokens(PlSqlParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(PlSqlParser.CASE, i);
		}
		public Label_nameContext[] label_name() {
			return GetRuleContexts<Label_nameContext>();
		}
		public Label_nameContext label_name(int i) {
			return GetRuleContext<Label_nameContext>(i);
		}
		public Simple_case_when_partContext[] simple_case_when_part() {
			return GetRuleContexts<Simple_case_when_partContext>();
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return GetRuleContext<Simple_case_when_partContext>(i);
		}
		public Case_else_partContext case_else_part() {
			return GetRuleContext<Case_else_partContext>(0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_case_statementContext simple_case_statement() {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(Context, State);
		EnterRule(_localctx, 728, RULE_simple_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5336; label_name();
				}
			}

			State = 5339; _localctx.ck1 = Match(CASE);
			State = 5340; expression();
			State = 5342;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5341; simple_case_when_part();
				}
				}
				State = 5344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 5347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 5346; case_else_part();
				}
			}

			State = 5349; Match(END);
			State = 5351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,735,Context) ) {
			case 1:
				{
				State = 5350; Match(CASE);
				}
				break;
			}
			State = 5354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,736,Context) ) {
			case 1:
				{
				State = 5353; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_case_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_case_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_case_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_case_when_partContext simple_case_when_part() {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(Context, State);
		EnterRule(_localctx, 730, RULE_simple_case_when_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5356; Match(WHEN);
			State = 5357; expression();
			State = 5358; Match(THEN);
			State = 5361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,737,Context) ) {
			case 1:
				{
				State = 5359; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 5360; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_case_statementContext : ParserRuleContext {
		public IToken ck1;
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode[] CASE() { return GetTokens(PlSqlParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(PlSqlParser.CASE, i);
		}
		public Label_nameContext[] label_name() {
			return GetRuleContexts<Label_nameContext>();
		}
		public Label_nameContext label_name(int i) {
			return GetRuleContext<Label_nameContext>(i);
		}
		public Searched_case_when_partContext[] searched_case_when_part() {
			return GetRuleContexts<Searched_case_when_partContext>();
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return GetRuleContext<Searched_case_when_partContext>(i);
		}
		public Case_else_partContext case_else_part() {
			return GetRuleContext<Case_else_partContext>(0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_case_statementContext searched_case_statement() {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(Context, State);
		EnterRule(_localctx, 732, RULE_searched_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5363; label_name();
				}
			}

			State = 5366; _localctx.ck1 = Match(CASE);
			State = 5368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5367; searched_case_when_part();
				}
				}
				State = 5370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 5373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 5372; case_else_part();
				}
			}

			State = 5375; Match(END);
			State = 5377;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
			case 1:
				{
				State = 5376; Match(CASE);
				}
				break;
			}
			State = 5380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,742,Context) ) {
			case 1:
				{
				State = 5379; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_case_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_case_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_case_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_case_when_partContext searched_case_when_part() {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(Context, State);
		EnterRule(_localctx, 734, RULE_searched_case_when_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5382; Match(WHEN);
			State = 5383; expression();
			State = 5384; Match(THEN);
			State = 5387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
			case 1:
				{
				State = 5385; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 5386; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_else_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_else_partContext case_else_part() {
		Case_else_partContext _localctx = new Case_else_partContext(Context, State);
		EnterRule(_localctx, 736, RULE_case_else_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5389; Match(ELSE);
			State = 5392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
			case 1:
				{
				State = 5390; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 5391; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public Outer_join_signContext outer_join_sign() {
			return GetRuleContext<Outer_join_signContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 738, RULE_atom);
		try {
			int _alt;
			State = 5413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,746,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5394; table_element();
				State = 5395; outer_join_sign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5397; bind_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5398; constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5399; general_element();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5400; Match(LEFT_PAREN);
				State = 5401; subquery();
				State = 5402; Match(RIGHT_PAREN);
				State = 5406;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,745,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 5403; subquery_operation_part();
						}
						} 
					}
					State = 5408;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,745,Context);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5409; Match(LEFT_PAREN);
				State = 5410; expressions();
				State = 5411; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quantified_expressionContext : ParserRuleContext {
		public ITerminalNode SOME() { return GetToken(PlSqlParser.SOME, 0); }
		public ITerminalNode EXISTS() { return GetToken(PlSqlParser.EXISTS, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode ANY() { return GetToken(PlSqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantified_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantified_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quantified_expressionContext quantified_expression() {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(Context, State);
		EnterRule(_localctx, 740, RULE_quantified_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5415;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,747,Context) ) {
			case 1:
				{
				State = 5416; Match(LEFT_PAREN);
				State = 5417; subquery();
				State = 5418; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 5420; Match(LEFT_PAREN);
				State = 5421; expression();
				State = 5422; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_functionContext : ParserRuleContext {
		public ITerminalNode SUBSTR() { return GetToken(PlSqlParser.SUBSTR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TO_CHAR() { return GetToken(PlSqlParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public Standard_functionContext standard_function() {
			return GetRuleContext<Standard_functionContext>(0);
		}
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ITerminalNode DECODE() { return GetToken(PlSqlParser.DECODE, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode CHR() { return GetToken(PlSqlParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(PlSqlParser.NCHAR_CS, 0); }
		public ITerminalNode NVL() { return GetToken(PlSqlParser.NVL, 0); }
		public ITerminalNode TRIM() { return GetToken(PlSqlParser.TRIM, 0); }
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode LEADING() { return GetToken(PlSqlParser.LEADING, 0); }
		public ITerminalNode TRAILING() { return GetToken(PlSqlParser.TRAILING, 0); }
		public ITerminalNode BOTH() { return GetToken(PlSqlParser.BOTH, 0); }
		public ITerminalNode TO_DATE() { return GetToken(PlSqlParser.TO_DATE, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_functionContext string_function() {
		String_functionContext _localctx = new String_functionContext(Context, State);
		EnterRule(_localctx, 742, RULE_string_function);
		int _la;
		try {
			State = 5496;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUBSTR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5426; Match(SUBSTR);
				State = 5427; Match(LEFT_PAREN);
				State = 5428; expression();
				State = 5429; Match(COMMA);
				State = 5430; expression();
				State = 5433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5431; Match(COMMA);
					State = 5432; expression();
					}
				}

				State = 5435; Match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5437; Match(TO_CHAR);
				State = 5438; Match(LEFT_PAREN);
				State = 5442;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,749,Context) ) {
				case 1:
					{
					State = 5439; table_element();
					}
					break;
				case 2:
					{
					State = 5440; standard_function();
					}
					break;
				case 3:
					{
					State = 5441; expression();
					}
					break;
				}
				State = 5446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,750,Context) ) {
				case 1:
					{
					State = 5444; Match(COMMA);
					State = 5445; @string();
					}
					break;
				}
				State = 5450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5448; Match(COMMA);
					State = 5449; @string();
					}
				}

				State = 5452; Match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5454; Match(DECODE);
				State = 5455; Match(LEFT_PAREN);
				State = 5456; expressions();
				State = 5457; Match(RIGHT_PAREN);
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5459; Match(CHR);
				State = 5460; Match(LEFT_PAREN);
				State = 5461; concatenation(0);
				State = 5462; Match(USING);
				State = 5463; Match(NCHAR_CS);
				State = 5464; Match(RIGHT_PAREN);
				}
				break;
			case NVL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5466; Match(NVL);
				State = 5467; Match(LEFT_PAREN);
				State = 5468; expression();
				State = 5469; Match(COMMA);
				State = 5470; expression();
				State = 5471; Match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5473; Match(TRIM);
				State = 5474; Match(LEFT_PAREN);
				State = 5482;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,754,Context) ) {
				case 1:
					{
					State = 5476;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						State = 5475;
						_la = TokenStream.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5479;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						State = 5478; @string();
						}
					}

					State = 5481; Match(FROM);
					}
					break;
				}
				State = 5484; concatenation(0);
				State = 5485; Match(RIGHT_PAREN);
				}
				break;
			case TO_DATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5487; Match(TO_DATE);
				State = 5488; Match(LEFT_PAREN);
				State = 5489; expression();
				State = 5492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5490; Match(COMMA);
					State = 5491; @string();
					}
				}

				State = 5494; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Standard_functionContext : ParserRuleContext {
		public String_functionContext string_function() {
			return GetRuleContext<String_functionContext>(0);
		}
		public Numeric_function_wrapperContext numeric_function_wrapper() {
			return GetRuleContext<Numeric_function_wrapperContext>(0);
		}
		public Other_functionContext other_function() {
			return GetRuleContext<Other_functionContext>(0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standard_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Standard_functionContext standard_function() {
		Standard_functionContext _localctx = new Standard_functionContext(Context, State);
		EnterRule(_localctx, 744, RULE_standard_function);
		try {
			State = 5501;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,757,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5498; string_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5499; numeric_function_wrapper();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5500; other_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_function_wrapperContext : ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return GetRuleContext<Numeric_functionContext>(0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return GetRuleContext<Single_column_for_loopContext>(0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return GetRuleContext<Multi_column_for_loopContext>(0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function_wrapper; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function_wrapper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_function_wrapperContext numeric_function_wrapper() {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(Context, State);
		EnterRule(_localctx, 746, RULE_numeric_function_wrapper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5503; numeric_function();
			State = 5506;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,758,Context) ) {
			case 1:
				{
				State = 5504; single_column_for_loop();
				}
				break;
			case 2:
				{
				State = 5505; multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_functionContext : ParserRuleContext {
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode ROUND() { return GetToken(PlSqlParser.ROUND, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(PlSqlParser.MAX, 0); }
		public ITerminalNode LEAST() { return GetToken(PlSqlParser.LEAST, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode GREATEST() { return GetToken(PlSqlParser.GREATEST, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_functionContext numeric_function() {
		Numeric_functionContext _localctx = new Numeric_functionContext(Context, State);
		EnterRule(_localctx, 748, RULE_numeric_function);
		int _la;
		try {
			State = 5566;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5508; Match(SUM);
				State = 5509; Match(LEFT_PAREN);
				State = 5511;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,759,Context) ) {
				case 1:
					{
					State = 5510;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5513; expression();
				State = 5514; Match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5516; Match(COUNT);
				State = 5517; Match(LEFT_PAREN);
				State = 5525;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASTERISK:
					{
					State = 5518; Match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 5523;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (UNIQUE - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)) | (1L << (USER - 582)) | (1L << (USE - 582)) | (1L << (VALIDATE - 582)) | (1L << (VALUE - 582)) | (1L << (VARCHAR2 - 582)) | (1L << (VARCHAR - 582)) | (1L << (VARIABLE - 582)) | (1L << (VARRAY - 582)) | (1L << (VARYING - 582)) | (1L << (VERSIONS - 582)) | (1L << (VERSION - 582)) | (1L << (WAIT - 582)) | (1L << (WARNING - 582)) | (1L << (WELLFORMED - 582)) | (1L << (WHENEVER - 582)) | (1L << (WHILE - 582)) | (1L << (WITHIN - 582)) | (1L << (WORK - 582)) | (1L << (WRITE - 582)) | (1L << (XMLAGG - 582)) | (1L << (XMLATTRIBUTES - 582)) | (1L << (XMLCAST - 582)) | (1L << (XMLCOLATTVAL - 582)) | (1L << (XMLELEMENT - 582)) | (1L << (XMLEXISTS - 582)) | (1L << (XMLFOREST - 582)) | (1L << (XMLNAMESPACES - 582)) | (1L << (XMLPARSE - 582)) | (1L << (XMLPI - 582)) | (1L << (XMLQUERY - 582)) | (1L << (XMLROOT - 582)) | (1L << (XMLSERIALIZE - 582)) | (1L << (XMLTABLE - 582)) | (1L << (XML - 582)) | (1L << (YEAR - 582)) | (1L << (YES - 582)) | (1L << (YMINTERVAL_UNCONSTRAINED - 582)) | (1L << (ZONE - 582)) | (1L << (PREDICTION - 582)) | (1L << (PREDICTION_BOUNDS - 582)) | (1L << (PREDICTION_COST - 582)) | (1L << (PREDICTION_DETAILS - 582)) | (1L << (PREDICTION_PROBABILITY - 582)) | (1L << (PREDICTION_SET - 582)) | (1L << (CUME_DIST - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)) | (1L << (RANK - 646)) | (1L << (AVG - 646)) | (1L << (CORR - 646)) | (1L << (COVAR_ - 646)) | (1L << (DECODE - 646)) | (1L << (LAG - 646)) | (1L << (LEAD - 646)) | (1L << (MAX - 646)) | (1L << (MEDIAN - 646)) | (1L << (MIN - 646)) | (1L << (NTILE - 646)) | (1L << (NVL - 646)) | (1L << (RATIO_TO_REPORT - 646)) | (1L << (REGR_ - 646)) | (1L << (ROUND - 646)) | (1L << (ROW_NUMBER - 646)) | (1L << (SUBSTR - 646)) | (1L << (TO_CHAR - 646)) | (1L << (TRIM - 646)) | (1L << (SUM - 646)) | (1L << (STDDEV - 646)) | (1L << (VAR_ - 646)) | (1L << (VARIANCE - 646)) | (1L << (LEAST - 646)) | (1L << (GREATEST - 646)) | (1L << (TO_DATE - 646)) | (1L << (NATIONAL_CHAR_STRING_LIT - 646)) | (1L << (UNSIGNED_INTEGER - 646)) | (1L << (APPROXIMATE_NUM_LIT - 646)) | (1L << (CHAR_STRING - 646)) | (1L << (DELIMITED_ID - 646)) | (1L << (LEFT_PAREN - 646)) | (1L << (PLUS_SIGN - 646)) | (1L << (MINUS_SIGN - 646)) | (1L << (BINDVAR - 646)) | (1L << (COLON - 646)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						State = 5520;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
						case 1:
							{
							State = 5519;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						State = 5522; concatenation(0);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5527; Match(RIGHT_PAREN);
				State = 5529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,763,Context) ) {
				case 1:
					{
					State = 5528; over_clause();
					}
					break;
				}
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5531; Match(ROUND);
				State = 5532; Match(LEFT_PAREN);
				State = 5533; expression();
				State = 5536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5534; Match(COMMA);
					State = 5535; Match(UNSIGNED_INTEGER);
					}
				}

				State = 5538; Match(RIGHT_PAREN);
				}
				break;
			case AVG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5540; Match(AVG);
				State = 5541; Match(LEFT_PAREN);
				State = 5543;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,765,Context) ) {
				case 1:
					{
					State = 5542;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5545; expression();
				State = 5546; Match(RIGHT_PAREN);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5548; Match(MAX);
				State = 5549; Match(LEFT_PAREN);
				State = 5551;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
				case 1:
					{
					State = 5550;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5553; expression();
				State = 5554; Match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5556; Match(LEAST);
				State = 5557; Match(LEFT_PAREN);
				State = 5558; expressions();
				State = 5559; Match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5561; Match(GREATEST);
				State = 5562; Match(LEFT_PAREN);
				State = 5563; expressions();
				State = 5564; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_functionContext : ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return GetRuleContext<Over_clause_keywordContext>(0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return GetRuleContext<Function_argument_analyticContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return GetRuleContext<Function_argument_modelingContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(PlSqlParser.CAST, 0); }
		public ITerminalNode XMLCAST() { return GetToken(PlSqlParser.XMLCAST, 0); }
		public ITerminalNode MULTISET() { return GetToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode COALESCE() { return GetToken(PlSqlParser.COALESCE, 0); }
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return GetRuleContext<Collect_order_by_partContext>(0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return GetRuleContext<Within_or_over_clause_keywordContext>(0);
		}
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public Within_or_over_partContext[] within_or_over_part() {
			return GetRuleContexts<Within_or_over_partContext>();
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return GetRuleContext<Within_or_over_partContext>(i);
		}
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode PERCENT_ISOPEN() { return GetToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public ITerminalNode PERCENT_FOUND() { return GetToken(PlSqlParser.PERCENT_FOUND, 0); }
		public ITerminalNode PERCENT_NOTFOUND() { return GetToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public ITerminalNode PERCENT_ROWCOUNT() { return GetToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public ITerminalNode DECOMPOSE() { return GetToken(PlSqlParser.DECOMPOSE, 0); }
		public ITerminalNode CANONICAL() { return GetToken(PlSqlParser.CANONICAL, 0); }
		public ITerminalNode COMPATIBILITY() { return GetToken(PlSqlParser.COMPATIBILITY, 0); }
		public ITerminalNode EXTRACT() { return GetToken(PlSqlParser.EXTRACT, 0); }
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(PlSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return GetRuleContext<Respect_or_ignore_nullsContext>(0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return GetRuleContext<Standard_prediction_function_keywordContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return GetRuleContext<Cost_matrix_clauseContext>(0);
		}
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode CHAR_CS() { return GetToken(PlSqlParser.CHAR_CS, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(PlSqlParser.NCHAR_CS, 0); }
		public ITerminalNode TREAT() { return GetToken(PlSqlParser.TREAT, 0); }
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode TRIM() { return GetToken(PlSqlParser.TRIM, 0); }
		public ITerminalNode LEADING() { return GetToken(PlSqlParser.LEADING, 0); }
		public ITerminalNode TRAILING() { return GetToken(PlSqlParser.TRAILING, 0); }
		public ITerminalNode BOTH() { return GetToken(PlSqlParser.BOTH, 0); }
		public ITerminalNode XMLAGG() { return GetToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public General_element_partContext general_element_part() {
			return GetRuleContext<General_element_partContext>(0);
		}
		public ITerminalNode XMLCOLATTVAL() { return GetToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public ITerminalNode XMLFOREST() { return GetToken(PlSqlParser.XMLFOREST, 0); }
		public Xml_multiuse_expression_elementContext[] xml_multiuse_expression_element() {
			return GetRuleContexts<Xml_multiuse_expression_elementContext>();
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return GetRuleContext<Xml_multiuse_expression_elementContext>(i);
		}
		public ITerminalNode XMLELEMENT() { return GetToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return GetRuleContext<Xml_attributes_clauseContext>(0);
		}
		public ITerminalNode ENTITYESCAPING() { return GetToken(PlSqlParser.ENTITYESCAPING, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode EVALNAME() { return GetToken(PlSqlParser.EVALNAME, 0); }
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public ITerminalNode XMLEXISTS() { return GetToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return GetRuleContext<Xml_passing_clauseContext>(0);
		}
		public ITerminalNode XMLPARSE() { return GetToken(PlSqlParser.XMLPARSE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(PlSqlParser.DOCUMENT, 0); }
		public ITerminalNode CONTENT() { return GetToken(PlSqlParser.CONTENT, 0); }
		public ITerminalNode WELLFORMED() { return GetToken(PlSqlParser.WELLFORMED, 0); }
		public ITerminalNode XMLPI() { return GetToken(PlSqlParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode XMLQUERY() { return GetToken(PlSqlParser.XMLQUERY, 0); }
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public ITerminalNode XMLROOT() { return GetToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return GetRuleContext<Xmlroot_param_version_partContext>(0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return GetRuleContext<Xmlroot_param_standalone_partContext>(0);
		}
		public ITerminalNode XMLSERIALIZE() { return GetToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return GetRuleContext<Xmlserialize_param_enconding_partContext>(0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return GetRuleContext<Xmlserialize_param_version_partContext>(0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return GetRuleContext<Xmlserialize_param_ident_partContext>(0);
		}
		public ITerminalNode DEFAULTS() { return GetToken(PlSqlParser.DEFAULTS, 0); }
		public ITerminalNode HIDE() { return GetToken(PlSqlParser.HIDE, 0); }
		public ITerminalNode SHOW() { return GetToken(PlSqlParser.SHOW, 0); }
		public ITerminalNode XMLTABLE() { return GetToken(PlSqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return GetRuleContext<Xml_namespaces_clauseContext>(0);
		}
		public ITerminalNode COLUMNS() { return GetToken(PlSqlParser.COLUMNS, 0); }
		public Xml_table_columnContext[] xml_table_column() {
			return GetRuleContexts<Xml_table_columnContext>();
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return GetRuleContext<Xml_table_columnContext>(i);
		}
		public Other_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_functionContext other_function() {
		Other_functionContext _localctx = new Other_functionContext(Context, State);
		EnterRule(_localctx, 750, RULE_other_function);
		int _la;
		try {
			int _alt;
			State = 5883;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,822,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5568; over_clause_keyword();
				State = 5569; function_argument_analytic();
				State = 5571;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
				case 1:
					{
					State = 5570; over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5573; regular_id();
				State = 5574; function_argument_modeling();
				State = 5576;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
				case 1:
					{
					State = 5575; using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5578; Match(COUNT);
				State = 5579; Match(LEFT_PAREN);
				State = 5585;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASTERISK:
					{
					State = 5580; Match(ASTERISK);
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 5582;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,770,Context) ) {
					case 1:
						{
						State = 5581;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					State = 5584; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5587; Match(RIGHT_PAREN);
				State = 5589;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
				case 1:
					{
					State = 5588; over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5591;
				_la = TokenStream.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5592; Match(LEFT_PAREN);
				State = 5599;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,773,Context) ) {
				case 1:
					{
					State = 5593; Match(MULTISET);
					State = 5594; Match(LEFT_PAREN);
					State = 5595; subquery();
					State = 5596; Match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					State = 5598; concatenation(0);
					}
					break;
				}
				State = 5601; Match(AS);
				State = 5602; type_spec();
				State = 5603; Match(RIGHT_PAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5605; Match(COALESCE);
				State = 5606; Match(LEFT_PAREN);
				State = 5607; table_element();
				State = 5613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5608; Match(COMMA);
					State = 5611;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						State = 5609; numeric();
						}
						break;
					case NATIONAL_CHAR_STRING_LIT:
					case CHAR_STRING:
						{
						State = 5610; @string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 5615; Match(RIGHT_PAREN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5617; Match(COLLECT);
				State = 5618; Match(LEFT_PAREN);
				State = 5620;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,776,Context) ) {
				case 1:
					{
					State = 5619;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5622; concatenation(0);
				State = 5624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 5623; collect_order_by_part();
					}
				}

				State = 5626; Match(RIGHT_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5628; within_or_over_clause_keyword();
				State = 5629; function_argument();
				State = 5631;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5630; within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5633;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,778,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5635; cursor_name();
				State = 5636;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 404)) & ~0x3f) == 0 && ((1L << (_la - 404)) & ((1L << (PERCENT_FOUND - 404)) | (1L << (PERCENT_ISOPEN - 404)) | (1L << (PERCENT_NOTFOUND - 404)) | (1L << (PERCENT_ROWCOUNT - 404)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5638; Match(DECOMPOSE);
				State = 5639; Match(LEFT_PAREN);
				State = 5640; concatenation(0);
				State = 5642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					State = 5641;
					_la = TokenStream.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5644; Match(RIGHT_PAREN);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5646; Match(EXTRACT);
				State = 5647; Match(LEFT_PAREN);
				State = 5648; regular_id();
				State = 5649; Match(FROM);
				State = 5650; concatenation(0);
				State = 5651; Match(RIGHT_PAREN);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5653;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5654; function_argument_analytic();
				State = 5656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					State = 5655; respect_or_ignore_nulls();
					}
				}

				State = 5658; over_clause();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5660; standard_prediction_function_keyword();
				State = 5661; Match(LEFT_PAREN);
				State = 5662; expressions();
				State = 5664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COST) {
					{
					State = 5663; cost_matrix_clause();
					}
				}

				State = 5667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5666; using_clause();
					}
				}

				State = 5669; Match(RIGHT_PAREN);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5671; Match(TRANSLATE);
				State = 5672; Match(LEFT_PAREN);
				State = 5673; expression();
				State = 5676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5674; Match(USING);
					State = 5675;
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 5682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5678; Match(COMMA);
					State = 5679; expression();
					}
					}
					State = 5684;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5685; Match(RIGHT_PAREN);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5687; Match(TREAT);
				State = 5688; Match(LEFT_PAREN);
				State = 5689; expression();
				State = 5690; Match(AS);
				State = 5692;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
				case 1:
					{
					State = 5691; Match(REF);
					}
					break;
				}
				State = 5694; type_spec();
				State = 5695; Match(RIGHT_PAREN);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5697; Match(TRIM);
				State = 5698; Match(LEFT_PAREN);
				State = 5706;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,788,Context) ) {
				case 1:
					{
					State = 5700;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						State = 5699;
						_la = TokenStream.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 5703;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						State = 5702; @string();
						}
					}

					State = 5705; Match(FROM);
					}
					break;
				}
				State = 5708; concatenation(0);
				State = 5709; Match(RIGHT_PAREN);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5711; Match(XMLAGG);
				State = 5712; Match(LEFT_PAREN);
				State = 5713; expression();
				State = 5715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 5714; order_by_clause();
					}
				}

				State = 5717; Match(RIGHT_PAREN);
				State = 5720;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,790,Context) ) {
				case 1:
					{
					State = 5718; Match(PERIOD);
					State = 5719; general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5722;
				_la = TokenStream.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5723; Match(LEFT_PAREN);
				State = 5728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5724; Match(COMMA);
						}
					}

					State = 5727; xml_multiuse_expression_element();
					}
					}
					State = 5730;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				State = 5732; Match(RIGHT_PAREN);
				State = 5735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,793,Context) ) {
				case 1:
					{
					State = 5733; Match(PERIOD);
					State = 5734; general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5737; Match(XMLELEMENT);
				State = 5738; Match(LEFT_PAREN);
				State = 5740;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,794,Context) ) {
				case 1:
					{
					State = 5739;
					_la = TokenStream.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,795,Context) ) {
				case 1:
					{
					State = 5742;
					_la = TokenStream.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5745; expression();
				State = 5748;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,796,Context) ) {
				case 1:
					{
					State = 5746; Match(COMMA);
					State = 5747; xml_attributes_clause();
					}
					break;
				}
				State = 5757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5750; Match(COMMA);
					State = 5751; expression();
					State = 5753;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						State = 5752; column_alias();
						}
					}

					}
					}
					State = 5759;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5760; Match(RIGHT_PAREN);
				State = 5763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,799,Context) ) {
				case 1:
					{
					State = 5761; Match(PERIOD);
					State = 5762; general_element_part();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5765; Match(XMLEXISTS);
				State = 5766; Match(LEFT_PAREN);
				State = 5767; expression();
				State = 5769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 5768; xml_passing_clause();
					}
				}

				State = 5771; Match(RIGHT_PAREN);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5773; Match(XMLPARSE);
				State = 5774; Match(LEFT_PAREN);
				State = 5775;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5776; concatenation(0);
				State = 5778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WELLFORMED) {
					{
					State = 5777; Match(WELLFORMED);
					}
				}

				State = 5780; Match(RIGHT_PAREN);
				State = 5783;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,802,Context) ) {
				case 1:
					{
					State = 5781; Match(PERIOD);
					State = 5782; general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5785; Match(XMLPI);
				State = 5786; Match(LEFT_PAREN);
				State = 5791;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 5787; Match(NAME);
					State = 5788; identifier();
					}
					break;
				case EVALNAME:
					{
					State = 5789; Match(EVALNAME);
					State = 5790; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5793; Match(COMMA);
					State = 5794; concatenation(0);
					}
				}

				State = 5797; Match(RIGHT_PAREN);
				State = 5800;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,805,Context) ) {
				case 1:
					{
					State = 5798; Match(PERIOD);
					State = 5799; general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5802; Match(XMLQUERY);
				State = 5803; Match(LEFT_PAREN);
				State = 5804; concatenation(0);
				State = 5806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 5805; xml_passing_clause();
					}
				}

				State = 5808; Match(RETURNING);
				State = 5809; Match(CONTENT);
				State = 5813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULL) {
					{
					State = 5810; Match(NULL);
					State = 5811; Match(ON);
					State = 5812; Match(EMPTY);
					}
				}

				State = 5815; Match(RIGHT_PAREN);
				State = 5818;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,808,Context) ) {
				case 1:
					{
					State = 5816; Match(PERIOD);
					State = 5817; general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5820; Match(XMLROOT);
				State = 5821; Match(LEFT_PAREN);
				State = 5822; concatenation(0);
				State = 5825;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
				case 1:
					{
					State = 5823; Match(COMMA);
					State = 5824; xmlroot_param_version_part();
					}
					break;
				}
				State = 5829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5827; Match(COMMA);
					State = 5828; xmlroot_param_standalone_part();
					}
				}

				State = 5831; Match(RIGHT_PAREN);
				State = 5834;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
				case 1:
					{
					State = 5832; Match(PERIOD);
					State = 5833; general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 5836; Match(XMLSERIALIZE);
				State = 5837; Match(LEFT_PAREN);
				State = 5838;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5839; concatenation(0);
				State = 5842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5840; Match(AS);
					State = 5841; type_spec();
					}
				}

				State = 5845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENCODING) {
					{
					State = 5844; xmlserialize_param_enconding_part();
					}
				}

				State = 5848;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION) {
					{
					State = 5847; xmlserialize_param_version_part();
					}
				}

				State = 5851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					State = 5850; xmlserialize_param_ident_part();
					}
				}

				State = 5855;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					State = 5853;
					_la = TokenStream.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5854; Match(DEFAULTS);
					}
				}

				State = 5857; Match(RIGHT_PAREN);
				State = 5860;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,817,Context) ) {
				case 1:
					{
					State = 5858; Match(PERIOD);
					State = 5859; general_element_part();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 5862; Match(XMLTABLE);
				State = 5863; Match(LEFT_PAREN);
				State = 5865;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,818,Context) ) {
				case 1:
					{
					State = 5864; xml_namespaces_clause();
					}
					break;
				}
				State = 5867; concatenation(0);
				State = 5869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 5868; xml_passing_clause();
					}
				}

				State = 5876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMNS) {
					{
					State = 5871; Match(COLUMNS);
					State = 5872; xml_table_column();
					{
					State = 5873; Match(COMMA);
					State = 5874; xml_table_column();
					}
					}
				}

				State = 5878; Match(RIGHT_PAREN);
				State = 5881;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,821,Context) ) {
				case 1:
					{
					State = 5879; Match(PERIOD);
					State = 5880; general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clause_keywordContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode CORR() { return GetToken(PlSqlParser.CORR, 0); }
		public ITerminalNode LAG() { return GetToken(PlSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(PlSqlParser.LEAD, 0); }
		public ITerminalNode MAX() { return GetToken(PlSqlParser.MAX, 0); }
		public ITerminalNode MEDIAN() { return GetToken(PlSqlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(PlSqlParser.MIN, 0); }
		public ITerminalNode NTILE() { return GetToken(PlSqlParser.NTILE, 0); }
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(PlSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public ITerminalNode VARIANCE() { return GetToken(PlSqlParser.VARIANCE, 0); }
		public ITerminalNode REGR_() { return GetToken(PlSqlParser.REGR_, 0); }
		public ITerminalNode STDDEV() { return GetToken(PlSqlParser.STDDEV, 0); }
		public ITerminalNode VAR_() { return GetToken(PlSqlParser.VAR_, 0); }
		public ITerminalNode COVAR_() { return GetToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clause_keywordContext over_clause_keyword() {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(Context, State);
		EnterRule(_localctx, 752, RULE_over_clause_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5885;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 652)) & ~0x3f) == 0 && ((1L << (_la - 652)) & ((1L << (AVG - 652)) | (1L << (CORR - 652)) | (1L << (COVAR_ - 652)) | (1L << (LAG - 652)) | (1L << (LEAD - 652)) | (1L << (MAX - 652)) | (1L << (MEDIAN - 652)) | (1L << (MIN - 652)) | (1L << (NTILE - 652)) | (1L << (RATIO_TO_REPORT - 652)) | (1L << (REGR_ - 652)) | (1L << (ROW_NUMBER - 652)) | (1L << (SUM - 652)) | (1L << (STDDEV - 652)) | (1L << (VAR_ - 652)) | (1L << (VARIANCE - 652)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_or_over_clause_keywordContext : ParserRuleContext {
		public ITerminalNode CUME_DIST() { return GetToken(PlSqlParser.CUME_DIST, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(PlSqlParser.DENSE_RANK, 0); }
		public ITerminalNode LISTAGG() { return GetToken(PlSqlParser.LISTAGG, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(PlSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode RANK() { return GetToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_or_over_clause_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithin_or_over_clause_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(Context, State);
		EnterRule(_localctx, 754, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5887;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 645)) & ~0x3f) == 0 && ((1L << (_la - 645)) & ((1L << (CUME_DIST - 645)) | (1L << (DENSE_RANK - 645)) | (1L << (LISTAGG - 645)) | (1L << (PERCENT_RANK - 645)) | (1L << (PERCENTILE_CONT - 645)) | (1L << (PERCENTILE_DISC - 645)) | (1L << (RANK - 645)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Standard_prediction_function_keywordContext : ParserRuleContext {
		public ITerminalNode PREDICTION() { return GetToken(PlSqlParser.PREDICTION, 0); }
		public ITerminalNode PREDICTION_BOUNDS() { return GetToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public ITerminalNode PREDICTION_COST() { return GetToken(PlSqlParser.PREDICTION_COST, 0); }
		public ITerminalNode PREDICTION_DETAILS() { return GetToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public ITerminalNode PREDICTION_PROBABILITY() { return GetToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public ITerminalNode PREDICTION_SET() { return GetToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standard_prediction_function_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_prediction_function_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(Context, State);
		EnterRule(_localctx, 756, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5889;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (PREDICTION - 639)) | (1L << (PREDICTION_BOUNDS - 639)) | (1L << (PREDICTION_COST - 639)) | (1L << (PREDICTION_DETAILS - 639)) | (1L << (PREDICTION_PROBABILITY - 639)) | (1L << (PREDICTION_SET - 639)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(PlSqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return GetRuleContext<Query_partition_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Windowing_clauseContext windowing_clause() {
			return GetRuleContext<Windowing_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 758, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5891; Match(OVER);
			State = 5892; Match(LEFT_PAREN);
			State = 5894;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 5893; query_partition_clause();
				}
			}

			State = 5900;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 5896; order_by_clause();
				State = 5898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					State = 5897; windowing_clause();
					}
				}

				}
			}

			State = 5902; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_clauseContext : ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return GetRuleContext<Windowing_typeContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public Windowing_elementsContext[] windowing_elements() {
			return GetRuleContexts<Windowing_elementsContext>();
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return GetRuleContext<Windowing_elementsContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_clauseContext windowing_clause() {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(Context, State);
		EnterRule(_localctx, 760, RULE_windowing_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5904; windowing_type();
			State = 5911;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BETWEEN:
				{
				State = 5905; Match(BETWEEN);
				State = 5906; windowing_elements();
				State = 5907; Match(AND);
				State = 5908; windowing_elements();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5910; windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_typeContext : ParserRuleContext {
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_typeContext windowing_type() {
		Windowing_typeContext _localctx = new Windowing_typeContext(Context, State);
		EnterRule(_localctx, 762, RULE_windowing_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5913;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_elementsContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(PlSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(PlSqlParser.PRECEDING, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode FOLLOWING() { return GetToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_elementsContext windowing_elements() {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(Context, State);
		EnterRule(_localctx, 764, RULE_windowing_elements);
		int _la;
		try {
			State = 5922;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,827,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5915; Match(UNBOUNDED);
				State = 5916; Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5917; Match(CURRENT);
				State = 5918; Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5919; concatenation(0);
				State = 5920;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Using_elementContext[] using_element() {
			return GetRuleContexts<Using_elementContext>();
		}
		public Using_elementContext using_element(int i) {
			return GetRuleContext<Using_elementContext>(i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 766, RULE_using_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5924; Match(USING);
			State = 5934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 5925; Match(ASTERISK);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case IN:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5930;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5927;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5926; Match(COMMA);
							}
						}

						State = 5929; using_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5932;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,829,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_elementContext : ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return GetRuleContext<Select_list_elementsContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_elementContext using_element() {
		Using_elementContext _localctx = new Using_elementContext(Context, State);
		EnterRule(_localctx, 768, RULE_using_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5941;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,832,Context) ) {
			case 1:
				{
				State = 5936; Match(IN);
				State = 5938;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,831,Context) ) {
				case 1:
					{
					State = 5937; Match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 5940; Match(OUT);
				}
				break;
			}
			State = 5943; select_list_elements();
			State = 5945;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,833,Context) ) {
			case 1:
				{
				State = 5944; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collect_order_by_partContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collect_order_by_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollect_order_by_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collect_order_by_partContext collect_order_by_part() {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(Context, State);
		EnterRule(_localctx, 770, RULE_collect_order_by_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5947; Match(ORDER);
			State = 5948; Match(BY);
			State = 5949; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_or_over_partContext : ParserRuleContext {
		public ITerminalNode WITHIN() { return GetToken(PlSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_or_over_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithin_or_over_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Within_or_over_partContext within_or_over_part() {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(Context, State);
		EnterRule(_localctx, 772, RULE_within_or_over_part);
		try {
			State = 5958;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5951; Match(WITHIN);
				State = 5952; Match(GROUP);
				State = 5953; Match(LEFT_PAREN);
				State = 5954; order_by_clause();
				State = 5955; Match(RIGHT_PAREN);
				}
				break;
			case OVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5957; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cost_matrix_clauseContext : ParserRuleContext {
		public ITerminalNode COST() { return GetToken(PlSqlParser.COST, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public Cost_class_nameContext[] cost_class_name() {
			return GetRuleContexts<Cost_class_nameContext>();
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return GetRuleContext<Cost_class_nameContext>(i);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost_matrix_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost_matrix_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cost_matrix_clauseContext cost_matrix_clause() {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(Context, State);
		EnterRule(_localctx, 774, RULE_cost_matrix_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5960; Match(COST);
			State = 5982;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODEL:
				{
				State = 5961; Match(MODEL);
				State = 5963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTO) {
					{
					State = 5962; Match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				State = 5965; Match(LEFT_PAREN);
				State = 5970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5967;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5966; Match(COMMA);
						}
					}

					State = 5969; cost_class_name();
					}
					}
					State = 5972;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				State = 5974; Match(RIGHT_PAREN);
				State = 5975; Match(VALUES);
				State = 5976; Match(LEFT_PAREN);
				State = 5978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					State = 5977; expressions();
					}
				}

				State = 5980; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_passing_clauseContext : ParserRuleContext {
		public ITerminalNode PASSING() { return GetToken(PlSqlParser.PASSING, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_passing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_passing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_passing_clauseContext xml_passing_clause() {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(Context, State);
		EnterRule(_localctx, 776, RULE_xml_passing_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5984; Match(PASSING);
			State = 5987;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 5985; Match(BY);
				State = 5986; Match(VALUE);
				}
			}

			State = 5989; expression();
			State = 5991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 5990; column_alias();
				}
			}

			{
			State = 5993; Match(COMMA);
			State = 5994; expression();
			State = 5996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
			case 1:
				{
				State = 5995; column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attributes_clauseContext : ParserRuleContext {
		public ITerminalNode XMLATTRIBUTES() { return GetToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public Xml_multiuse_expression_elementContext[] xml_multiuse_expression_element() {
			return GetRuleContexts<Xml_multiuse_expression_elementContext>();
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return GetRuleContext<Xml_multiuse_expression_elementContext>(i);
		}
		public ITerminalNode ENTITYESCAPING() { return GetToken(PlSqlParser.ENTITYESCAPING, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public ITerminalNode SCHEMACHECK() { return GetToken(PlSqlParser.SCHEMACHECK, 0); }
		public ITerminalNode NOSCHEMACHECK() { return GetToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attributes_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_attributes_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attributes_clauseContext xml_attributes_clause() {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(Context, State);
		EnterRule(_localctx, 778, RULE_xml_attributes_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5998; Match(XMLATTRIBUTES);
			State = 5999; Match(LEFT_PAREN);
			State = 6001;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
			case 1:
				{
				State = 6000;
				_la = TokenStream.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 6004;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
			case 1:
				{
				State = 6003;
				_la = TokenStream.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 6010;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6006; Match(COMMA);
					}
				}

				State = 6009; xml_multiuse_expression_element();
				}
				}
				State = 6012;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			State = 6014; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespaces_clauseContext : ParserRuleContext {
		public ITerminalNode XMLNAMESPACES() { return GetToken(PlSqlParser.XMLNAMESPACES, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return GetRuleContext<Xml_general_default_partContext>(0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespaces_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_namespaces_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespaces_clauseContext xml_namespaces_clause() {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(Context, State);
		EnterRule(_localctx, 780, RULE_xml_namespaces_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6016; Match(XMLNAMESPACES);
			State = 6017; Match(LEFT_PAREN);
			State = 6021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,847,Context) ) {
			case 1:
				{
				State = 6018; concatenation(0);
				State = 6019; column_alias();
				}
				break;
			}
			State = 6029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6023; Match(COMMA);
				State = 6024; concatenation(0);
				State = 6025; column_alias();
				}
				}
				State = 6031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 6032; xml_general_default_part();
				}
			}

			State = 6035; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_table_columnContext : ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return GetRuleContext<Xml_column_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode ORDINALITY() { return GetToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode PATH() { return GetToken(PlSqlParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return GetRuleContext<Xml_general_default_partContext>(0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_table_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_table_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_table_columnContext xml_table_column() {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(Context, State);
		EnterRule(_localctx, 782, RULE_xml_table_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6037; xml_column_name();
			State = 6048;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 6038; Match(FOR);
				State = 6039; Match(ORDINALITY);
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				State = 6040; type_spec();
				State = 6043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PATH) {
					{
					State = 6041; Match(PATH);
					State = 6042; concatenation(0);
					}
				}

				State = 6046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 6045; xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_general_default_partContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_general_default_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_general_default_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_general_default_partContext xml_general_default_part() {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(Context, State);
		EnterRule(_localctx, 784, RULE_xml_general_default_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6050; Match(DEFAULT);
			State = 6051; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_multiuse_expression_elementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode EVALNAME() { return GetToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_multiuse_expression_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_multiuse_expression_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_multiuse_expression_elementContext xml_multiuse_expression_element() {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(Context, State);
		EnterRule(_localctx, 786, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6053; expression();
			State = 6060;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6054; Match(AS);
				State = 6058;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,853,Context) ) {
				case 1:
					{
					State = 6055; id_expression();
					}
					break;
				case 2:
					{
					State = 6056; Match(EVALNAME);
					State = 6057; concatenation(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlroot_param_version_partContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(PlSqlParser.VERSION, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlroot_param_version_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlroot_param_version_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlroot_param_version_partContext xmlroot_param_version_part() {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(Context, State);
		EnterRule(_localctx, 788, RULE_xmlroot_param_version_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6062; Match(VERSION);
			State = 6066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,855,Context) ) {
			case 1:
				{
				State = 6063; Match(NO);
				State = 6064; Match(VALUE);
				}
				break;
			case 2:
				{
				State = 6065; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlroot_param_standalone_partContext : ParserRuleContext {
		public ITerminalNode STANDALONE() { return GetToken(PlSqlParser.STANDALONE, 0); }
		public ITerminalNode YES() { return GetToken(PlSqlParser.YES, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlroot_param_standalone_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlroot_param_standalone_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(Context, State);
		EnterRule(_localctx, 790, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6068; Match(STANDALONE);
			State = 6074;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YES:
				{
				State = 6069; Match(YES);
				}
				break;
			case NO:
				{
				State = 6070; Match(NO);
				State = 6072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 6071; Match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_enconding_partContext : ParserRuleContext {
		public ITerminalNode ENCODING() { return GetToken(PlSqlParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_enconding_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_enconding_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(Context, State);
		EnterRule(_localctx, 792, RULE_xmlserialize_param_enconding_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6076; Match(ENCODING);
			State = 6077; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_version_partContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(PlSqlParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_version_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_version_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(Context, State);
		EnterRule(_localctx, 794, RULE_xmlserialize_param_version_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6079; Match(VERSION);
			State = 6080; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_ident_partContext : ParserRuleContext {
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode INDENT() { return GetToken(PlSqlParser.INDENT, 0); }
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_ident_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_ident_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(Context, State);
		EnterRule(_localctx, 796, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			State = 6090;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6082; Match(NO);
				State = 6083; Match(INDENT);
				}
				break;
			case INDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6084; Match(INDENT);
				State = 6088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIZE) {
					{
					State = 6085; Match(SIZE);
					State = 6086; Match(EQUALS_OP);
					State = 6087; concatenation(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_plus_commandContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public ITerminalNode PROMPT() { return GetToken(PlSqlParser.PROMPT, 0); }
		public ITerminalNode SHOW() { return GetToken(PlSqlParser.SHOW, 0); }
		public ITerminalNode ERR() { return GetToken(PlSqlParser.ERR, 0); }
		public ITerminalNode ERRORS() { return GetToken(PlSqlParser.ERRORS, 0); }
		public ITerminalNode START_CMD() { return GetToken(PlSqlParser.START_CMD, 0); }
		public Whenever_commandContext whenever_command() {
			return GetRuleContext<Whenever_commandContext>(0);
		}
		public Set_commandContext set_command() {
			return GetRuleContext<Set_commandContext>(0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_plus_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_plus_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_plus_commandContext sql_plus_command() {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(Context, State);
		EnterRule(_localctx, 798, RULE_sql_plus_command);
		int _la;
		try {
			State = 6100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SOLIDUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6092; Match(SOLIDUS);
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6093; Match(EXIT);
				}
				break;
			case PROMPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6094; Match(PROMPT);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6095; Match(SHOW);
				State = 6096;
				_la = TokenStream.LA(1);
				if ( !(_la==ERR || _la==ERRORS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case START_CMD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6097; Match(START_CMD);
				}
				break;
			case WHENEVER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6098; whenever_command();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6099; set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Whenever_commandContext : ParserRuleContext {
		public ITerminalNode WHENEVER() { return GetToken(PlSqlParser.WHENEVER, 0); }
		public ITerminalNode SQLERROR() { return GetToken(PlSqlParser.SQLERROR, 0); }
		public ITerminalNode OSERROR() { return GetToken(PlSqlParser.OSERROR, 0); }
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public ITerminalNode CONTINUE() { return GetToken(PlSqlParser.CONTINUE, 0); }
		public ITerminalNode SUCCESS() { return GetToken(PlSqlParser.SUCCESS, 0); }
		public ITerminalNode FAILURE() { return GetToken(PlSqlParser.FAILURE, 0); }
		public ITerminalNode WARNING() { return GetToken(PlSqlParser.WARNING, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenever_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenever_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whenever_commandContext whenever_command() {
		Whenever_commandContext _localctx = new Whenever_commandContext(Context, State);
		EnterRule(_localctx, 800, RULE_whenever_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6102; Match(WHENEVER);
			State = 6103;
			_la = TokenStream.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXIT:
				{
				State = 6104; Match(EXIT);
				State = 6105;
				_la = TokenStream.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6106;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CONTINUE:
				{
				State = 6107; Match(CONTINUE);
				State = 6108;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Regular_idContext[] regular_id() {
			return GetRuleContexts<Regular_idContext>();
		}
		public Regular_idContext regular_id(int i) {
			return GetRuleContext<Regular_idContext>(i);
		}
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_commandContext set_command() {
		Set_commandContext _localctx = new Set_commandContext(Context, State);
		EnterRule(_localctx, 802, RULE_set_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6111; Match(SET);
			State = 6112; regular_id();
			State = 6118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,862,Context) ) {
			case 1:
				{
				State = 6113; Match(CHAR_STRING);
				}
				break;
			case 2:
				{
				State = 6114; Match(ON);
				}
				break;
			case 3:
				{
				State = 6115; Match(OFF);
				}
				break;
			case 4:
				{
				State = 6116; numeric();
				}
				break;
			case 5:
				{
				State = 6117; regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_extension_clauseContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_extension_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_extension_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_extension_clauseContext partition_extension_clause() {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(Context, State);
		EnterRule(_localctx, 804, RULE_partition_extension_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6120;
			_la = TokenStream.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 6121; Match(FOR);
				}
			}

			State = 6124; Match(LEFT_PAREN);
			State = 6126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				State = 6125; expressions();
				}
			}

			State = 6128; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 806, RULE_column_alias);
		int _la;
		try {
			State = 6138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,867,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 6130; Match(AS);
					}
				}

				State = 6135;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 6133; identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 6134; @string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6137; Match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 808, RULE_table_alias);
		try {
			State = 6142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6140; identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6141; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(PlSqlParser.WHERE, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 810, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6144; Match(WHERE);
			State = 6149;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
				{
				State = 6145; Match(CURRENT);
				State = 6146; Match(OF);
				State = 6147; cursor_name();
				}
				break;
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 6148; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_clauseContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public ITerminalNode BULK() { return GetToken(PlSqlParser.BULK, 0); }
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInto_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Into_clauseContext into_clause() {
		Into_clauseContext _localctx = new Into_clauseContext(Context, State);
		EnterRule(_localctx, 812, RULE_into_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BULK) {
				{
				State = 6151; Match(BULK);
				State = 6152; Match(COLLECT);
				}
			}

			State = 6155; Match(INTO);
			State = 6160;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6156; Match(COMMA);
						}
					}

					State = 6159; variable_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,872,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_column_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_column_nameContext xml_column_name() {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(Context, State);
		EnterRule(_localctx, 814, RULE_xml_column_name);
		try {
			State = 6166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6164; identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6165; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Routine_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutine_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Routine_nameContext routine_name() {
		Routine_nameContext _localctx = new Routine_nameContext(Context, State);
		EnterRule(_localctx, 816, RULE_routine_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6168; identifiers();
			State = 6171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN) {
				{
				State = 6169; Match(AT_SIGN);
				State = 6170; link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grantee_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Identified_byContext identified_by() {
			return GetRuleContext<Identified_byContext>(0);
		}
		public Grantee_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantee_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grantee_nameContext grantee_name() {
		Grantee_nameContext _localctx = new Grantee_nameContext(Context, State);
		EnterRule(_localctx, 818, RULE_grantee_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6173; id_expression();
			State = 6175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIED) {
				{
				State = 6174; identified_by();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Role_nameContext role_name() {
		Role_nameContext _localctx = new Role_nameContext(Context, State);
		EnterRule(_localctx, 820, RULE_role_name);
		try {
			State = 6179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6177; id_expression();
				}
				break;
			case CONNECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6178; Match(CONNECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraint_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constraint_nameContext constraint_name() {
		Constraint_nameContext _localctx = new Constraint_nameContext(Context, State);
		EnterRule(_localctx, 822, RULE_constraint_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6181; identifiers();
			State = 6184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN) {
				{
				State = 6182; Match(AT_SIGN);
				State = 6183; link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 824, RULE_variable_name);
		int _la;
		try {
			State = 6196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTRODUCER) {
					{
					State = 6186; Match(INTRODUCER);
					State = 6187; char_set_name();
					}
				}

				State = 6190; id_expression();
				State = 6193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERIOD) {
					{
					State = 6191; Match(PERIOD);
					State = 6192; id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6195; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 826, RULE_cursor_name);
		try {
			State = 6200;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6198; general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6199; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_nameContext record_name() {
		Record_nameContext _localctx = new Record_nameContext(Context, State);
		EnterRule(_localctx, 828, RULE_record_name);
		try {
			State = 6204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6202; identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6203; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Link_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Link_nameContext link_name() {
		Link_nameContext _localctx = new Link_nameContext(Context, State);
		EnterRule(_localctx, 830, RULE_link_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6206; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tableview_nameContext : ParserRuleContext {
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return GetRuleContext<Partition_extension_clauseContext>(0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableview_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableview_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tableview_nameContext tableview_name() {
		Tableview_nameContext _localctx = new Tableview_nameContext(Context, State);
		EnterRule(_localctx, 832, RULE_tableview_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6208; table_fullname();
			State = 6212;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,883,Context) ) {
			case 1:
				{
				State = 6209; Match(AT_SIGN);
				State = 6210; link_name();
				}
				break;
			case 2:
				{
				State = 6211; partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_item_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Lob_item_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_item_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_item_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_item_nameContext lob_item_name() {
		Lob_item_nameContext _localctx = new Lob_item_nameContext(Context, State);
		EnterRule(_localctx, 834, RULE_lob_item_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6214; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Dir_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_object_nameContext dir_object_name() {
		Dir_object_nameContext _localctx = new Dir_object_nameContext(Context, State);
		EnterRule(_localctx, 836, RULE_dir_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6216; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public User_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_object_nameContext user_object_name() {
		User_object_nameContext _localctx = new User_object_nameContext(Context, State);
		EnterRule(_localctx, 838, RULE_user_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6218; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Tablespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_nameContext tablespace_name() {
		Tablespace_nameContext _localctx = new Tablespace_nameContext(Context, State);
		EnterRule(_localctx, 840, RULE_tablespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6220; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 842, RULE_label_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6222; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_nameContext partition_name() {
		Partition_nameContext _localctx = new Partition_nameContext(Context, State);
		EnterRule(_localctx, 844, RULE_partition_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6224; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_object_nameContext schema_object_name() {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(Context, State);
		EnterRule(_localctx, 846, RULE_schema_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6226; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_segnameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Lob_segnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_segname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_segname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_segnameContext lob_segname() {
		Lob_segnameContext _localctx = new Lob_segnameContext(Context, State);
		EnterRule(_localctx, 848, RULE_lob_segname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6228; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 850, RULE_full_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6230; identifier();
			State = 6233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
			case 1:
				{
				State = 6231; Match(PERIOD);
				State = 6232; id_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implementation_type_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implementation_type_nameContext implementation_type_name() {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(Context, State);
		EnterRule(_localctx, 852, RULE_implementation_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6235; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_tableview_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Container_tableview_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_tableview_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_tableview_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_tableview_nameContext container_tableview_name() {
		Container_tableview_nameContext _localctx = new Container_tableview_nameContext(Context, State);
		EnterRule(_localctx, 854, RULE_container_tableview_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6237; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 856, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6239; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_nameContext procedure_name() {
		Procedure_nameContext _localctx = new Procedure_nameContext(Context, State);
		EnterRule(_localctx, 858, RULE_procedure_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6241; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(Context, State);
		EnterRule(_localctx, 860, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6243; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_nameContext collection_name() {
		Collection_nameContext _localctx = new Collection_nameContext(Context, State);
		EnterRule(_localctx, 862, RULE_collection_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6245; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 864, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6247; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_fullnameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Table_fullnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_fullname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_fullname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_fullnameContext table_fullname() {
		Table_fullnameContext _localctx = new Table_fullnameContext(Context, State);
		EnterRule(_localctx, 866, RULE_table_fullname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6249; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_object_nameContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public User_object_nameContext[] user_object_name() {
			return GetRuleContexts<User_object_nameContext>();
		}
		public User_object_nameContext user_object_name(int i) {
			return GetRuleContext<User_object_nameContext>(i);
		}
		public ITerminalNode DIRECTORY() { return GetToken(PlSqlParser.DIRECTORY, 0); }
		public Dir_object_nameContext dir_object_name() {
			return GetRuleContext<Dir_object_nameContext>(0);
		}
		public ITerminalNode EDITION() { return GetToken(PlSqlParser.EDITION, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode MINING() { return GetToken(PlSqlParser.MINING, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode SOURCE() { return GetToken(PlSqlParser.SOURCE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(PlSqlParser.RESOURCE, 0); }
		public ITerminalNode SQL() { return GetToken(PlSqlParser.SQL, 0); }
		public ITerminalNode TRANSLATION() { return GetToken(PlSqlParser.TRANSLATION, 0); }
		public ITerminalNode PROFILE() { return GetToken(PlSqlParser.PROFILE, 0); }
		public Grant_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_object_nameContext grant_object_name() {
		Grant_object_nameContext _localctx = new Grant_object_nameContext(Context, State);
		EnterRule(_localctx, 868, RULE_grant_object_name);
		int _la;
		try {
			State = 6275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,887,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6251; tableview_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6252; Match(USER);
				State = 6257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6254;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6253; Match(COMMA);
						}
					}

					State = 6256; user_object_name();
					}
					}
					State = 6259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (COMMA - 647)))) != 0) || _la==REGULAR_ID );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6261; Match(DIRECTORY);
				State = 6262; dir_object_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6263; Match(EDITION);
				State = 6264; schema_object_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6265; Match(MINING);
				State = 6266; Match(MODEL);
				State = 6267; schema_object_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6268; Match(JAVA);
				State = 6269;
				_la = TokenStream.LA(1);
				if ( !(_la==RESOURCE || _la==SOURCE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6270; schema_object_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6271; Match(SQL);
				State = 6272; Match(TRANSLATION);
				State = 6273; Match(PROFILE);
				State = 6274; schema_object_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 870, RULE_column_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6281;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6277; Match(COMMA);
						}
					}

					State = 6280; column_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,889,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paren_column_listContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paren_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen_column_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paren_column_listContext paren_column_list() {
		Paren_column_listContext _localctx = new Paren_column_listContext(Context, State);
		EnterRule(_localctx, 872, RULE_paren_column_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6285; Match(LEFT_PAREN);
			State = 6286; column_list();
			State = 6287; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keep_clauseContext : ParserRuleContext {
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keep_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeep_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Keep_clauseContext keep_clause() {
		Keep_clauseContext _localctx = new Keep_clauseContext(Context, State);
		EnterRule(_localctx, 874, RULE_keep_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6289; Match(KEEP);
			State = 6290; Match(LEFT_PAREN);
			State = 6291; Match(DENSE_RANK);
			State = 6292;
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6293; order_by_clause();
			State = 6294; Match(RIGHT_PAREN);
			State = 6296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,890,Context) ) {
			case 1:
				{
				State = 6295; over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentContext function_argument() {
		Function_argumentContext _localctx = new Function_argumentContext(Context, State);
		EnterRule(_localctx, 876, RULE_function_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6298; Match(LEFT_PAREN);
			State = 6305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				State = 6300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6299; Match(COMMA);
					}
				}

				State = 6302; argument();
				}
				}
				State = 6307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6308; Match(RIGHT_PAREN);
			State = 6310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,893,Context) ) {
			case 1:
				{
				State = 6309; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_analyticContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public Respect_or_ignore_nullsContext[] respect_or_ignore_nulls() {
			return GetRuleContexts<Respect_or_ignore_nullsContext>();
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return GetRuleContext<Respect_or_ignore_nullsContext>(i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_analytic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_analytic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_analyticContext function_argument_analytic() {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(Context, State);
		EnterRule(_localctx, 878, RULE_function_argument_analytic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6312; Match(LEFT_PAREN);
			State = 6322;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				State = 6314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6313; Match(COMMA);
					}
				}

				State = 6316; argument();
				State = 6318;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
				case 1:
					{
					State = 6317; respect_or_ignore_nulls();
					}
					break;
				}
				}
				}
				State = 6324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6325; Match(RIGHT_PAREN);
			State = 6327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,897,Context) ) {
			case 1:
				{
				State = 6326; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_modelingContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		public ITerminalNode[] NULL() { return GetTokens(PlSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(PlSqlParser.NULL, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_modeling; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_modeling(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_modelingContext function_argument_modeling() {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(Context, State);
		EnterRule(_localctx, 880, RULE_function_argument_modeling);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6329; Match(LEFT_PAREN);
			State = 6330; column_name();
			State = 6343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6331; Match(COMMA);
				State = 6334;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					State = 6332; numeric();
					}
					break;
				case NULL:
					{
					State = 6333; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6336; Match(COMMA);
					State = 6339;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						State = 6337; numeric();
						}
						break;
					case NULL:
						{
						State = 6338; Match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			State = 6345; Match(USING);
			State = 6362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,905,Context) ) {
			case 1:
				{
				State = 6346; tableview_name();
				State = 6347; Match(PERIOD);
				State = 6348; Match(ASTERISK);
				}
				break;
			case 2:
				{
				State = 6350; Match(ASTERISK);
				}
				break;
			case 3:
				{
				State = 6358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6352;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6351; Match(COMMA);
						}
					}

					State = 6354; expression();
					State = 6356;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
					case 1:
						{
						State = 6355; column_alias();
						}
						break;
					}
					}
					}
					State = 6360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NOT - 322)) | (1L << (NULL - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PRIOR - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUE - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (DECODE - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (NVL - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROUND - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TO_CHAR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)) | (1L << (LEAST - 647)) | (1L << (GREATEST - 647)) | (1L << (TO_DATE - 647)) | (1L << (VARIABLE_SESSION - 647)) | (1L << (NATIONAL_CHAR_STRING_LIT - 647)) | (1L << (UNSIGNED_INTEGER - 647)) | (1L << (APPROXIMATE_NUM_LIT - 647)) | (1L << (CHAR_STRING - 647)) | (1L << (DELIMITED_ID - 647)) | (1L << (LEFT_PAREN - 647)) | (1L << (PLUS_SIGN - 647)) | (1L << (MINUS_SIGN - 647)) | (1L << (COMMA - 647)) | (1L << (BINDVAR - 647)) | (1L << (COLON - 647)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
				break;
			}
			State = 6364; Match(RIGHT_PAREN);
			State = 6366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,906,Context) ) {
			case 1:
				{
				State = 6365; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Respect_or_ignore_nullsContext : ParserRuleContext {
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode RESPECT() { return GetToken(PlSqlParser.RESPECT, 0); }
		public ITerminalNode IGNORE() { return GetToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_respect_or_ignore_nulls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRespect_or_ignore_nulls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(Context, State);
		EnterRule(_localctx, 882, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6368;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6369; Match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 884, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,907,Context) ) {
			case 1:
				{
				State = 6371; identifier();
				State = 6372; Match(EQUALS_OP);
				State = 6373; Match(GREATER_THAN_OP);
				}
				break;
			}
			State = 6377; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specContext : ParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode PERCENT_ROWTYPE() { return GetToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public ITerminalNode PERCENT_TYPE() { return GetToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specContext type_spec() {
		Type_specContext _localctx = new Type_specContext(Context, State);
		EnterRule(_localctx, 886, RULE_type_spec);
		int _la;
		try {
			State = 6387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,910,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6379; datatype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6381;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,908,Context) ) {
				case 1:
					{
					State = 6380; Match(REF);
					}
					break;
				}
				State = 6383; type_name();
				State = 6385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					State = 6384;
					_la = TokenStream.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return GetRuleContext<Native_datatype_elementContext>(0);
		}
		public Precision_partContext precision_part() {
			return GetRuleContext<Precision_partContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ITerminalNode CHARACTER() { return GetToken(PlSqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 888, RULE_datatype);
		int _la;
		try {
			State = 6420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHARACTER:
			case CHAR:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INTEGER:
			case INT:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR2:
			case VARCHAR:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6389; native_datatype_element();
				State = 6391;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,911,Context) ) {
				case 1:
					{
					State = 6390; precision_part();
					}
					break;
				}
				State = 6402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,913,Context) ) {
				case 1:
					{
					State = 6393; Match(WITH);
					State = 6395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LOCAL) {
						{
						State = 6394; Match(LOCAL);
						}
					}

					State = 6397; Match(TIME);
					State = 6398; Match(ZONE);
					}
					break;
				case 2:
					{
					State = 6399; Match(CHARACTER);
					State = 6400; Match(SET);
					State = 6401; char_set_name();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6404; Match(INTERVAL);
				State = 6405;
				_la = TokenStream.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 6406; Match(LEFT_PAREN);
					State = 6407; expression();
					State = 6408; Match(RIGHT_PAREN);
					}
				}

				State = 6412; Match(TO);
				State = 6413;
				_la = TokenStream.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6418;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,915,Context) ) {
				case 1:
					{
					State = 6414; Match(LEFT_PAREN);
					State = 6415; expression();
					State = 6416; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_partContext : ParserRuleContext {
		public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		public ITerminalNode CHAR() { return GetToken(PlSqlParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_partContext precision_part() {
		Precision_partContext _localctx = new Precision_partContext(Context, State);
		EnterRule(_localctx, 890, RULE_precision_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6422; Match(LEFT_PAREN);
			State = 6423; numeric();
			State = 6426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6424; Match(COMMA);
				State = 6425; numeric();
				}
			}

			State = 6429;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				State = 6428;
				_la = TokenStream.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6431; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_datatype_elementContext : ParserRuleContext {
		public ITerminalNode BINARY_INTEGER() { return GetToken(PlSqlParser.BINARY_INTEGER, 0); }
		public ITerminalNode PLS_INTEGER() { return GetToken(PlSqlParser.PLS_INTEGER, 0); }
		public ITerminalNode NATURAL() { return GetToken(PlSqlParser.NATURAL, 0); }
		public ITerminalNode BINARY_FLOAT() { return GetToken(PlSqlParser.BINARY_FLOAT, 0); }
		public ITerminalNode BINARY_DOUBLE() { return GetToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public ITerminalNode NATURALN() { return GetToken(PlSqlParser.NATURALN, 0); }
		public ITerminalNode POSITIVE() { return GetToken(PlSqlParser.POSITIVE, 0); }
		public ITerminalNode POSITIVEN() { return GetToken(PlSqlParser.POSITIVEN, 0); }
		public ITerminalNode SIGNTYPE() { return GetToken(PlSqlParser.SIGNTYPE, 0); }
		public ITerminalNode SIMPLE_INTEGER() { return GetToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public ITerminalNode NVARCHAR2() { return GetToken(PlSqlParser.NVARCHAR2, 0); }
		public ITerminalNode DEC() { return GetToken(PlSqlParser.DEC, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlSqlParser.INTEGER, 0); }
		public ITerminalNode INT() { return GetToken(PlSqlParser.INT, 0); }
		public ITerminalNode NUMERIC() { return GetToken(PlSqlParser.NUMERIC, 0); }
		public ITerminalNode SMALLINT() { return GetToken(PlSqlParser.SMALLINT, 0); }
		public ITerminalNode NUMBER() { return GetToken(PlSqlParser.NUMBER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(PlSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(PlSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(PlSqlParser.PRECISION, 0); }
		public ITerminalNode FLOAT() { return GetToken(PlSqlParser.FLOAT, 0); }
		public ITerminalNode REAL() { return GetToken(PlSqlParser.REAL, 0); }
		public ITerminalNode NCHAR() { return GetToken(PlSqlParser.NCHAR, 0); }
		public ITerminalNode LONG() { return GetToken(PlSqlParser.LONG, 0); }
		public ITerminalNode RAW() { return GetToken(PlSqlParser.RAW, 0); }
		public ITerminalNode CHAR() { return GetToken(PlSqlParser.CHAR, 0); }
		public ITerminalNode CHARACTER() { return GetToken(PlSqlParser.CHARACTER, 0); }
		public ITerminalNode VARCHAR2() { return GetToken(PlSqlParser.VARCHAR2, 0); }
		public ITerminalNode VARCHAR() { return GetToken(PlSqlParser.VARCHAR, 0); }
		public ITerminalNode STRING() { return GetToken(PlSqlParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(PlSqlParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(PlSqlParser.DATE, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode UROWID() { return GetToken(PlSqlParser.UROWID, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode HOUR() { return GetToken(PlSqlParser.HOUR, 0); }
		public ITerminalNode MINUTE() { return GetToken(PlSqlParser.MINUTE, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public ITerminalNode TIMEZONE_REGION() { return GetToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public ITerminalNode TIMEZONE_ABBR() { return GetToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMP_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public ITerminalNode YMINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode DSINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode BFILE() { return GetToken(PlSqlParser.BFILE, 0); }
		public ITerminalNode BLOB() { return GetToken(PlSqlParser.BLOB, 0); }
		public ITerminalNode CLOB() { return GetToken(PlSqlParser.CLOB, 0); }
		public ITerminalNode NCLOB() { return GetToken(PlSqlParser.NCLOB, 0); }
		public ITerminalNode MLSLABEL() { return GetToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_datatype_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_datatype_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_datatype_elementContext native_datatype_element() {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(Context, State);
		EnterRule(_localctx, 892, RULE_native_datatype_element);
		try {
			State = 6493;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6433; Match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6434; Match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6435; Match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6436; Match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6437; Match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6438; Match(NATURALN);
				}
				break;
			case POSITIVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6439; Match(POSITIVE);
				}
				break;
			case POSITIVEN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6440; Match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6441; Match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6442; Match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6443; Match(NVARCHAR2);
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6444; Match(DEC);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6445; Match(INTEGER);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6446; Match(INT);
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6447; Match(NUMERIC);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6448; Match(SMALLINT);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6449; Match(NUMBER);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6450; Match(DECIMAL);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6451; Match(DOUBLE);
				State = 6453;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,919,Context) ) {
				case 1:
					{
					State = 6452; Match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6455; Match(FLOAT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6456; Match(REAL);
				}
				break;
			case NCHAR:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6457; Match(NCHAR);
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6458; Match(LONG);
				State = 6460;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 6459; Match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6462; Match(CHAR);
				}
				break;
			case CHARACTER:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6463; Match(CHARACTER);
				}
				break;
			case VARCHAR2:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6464; Match(VARCHAR2);
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6465; Match(VARCHAR);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6466; Match(STRING);
				}
				break;
			case RAW:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6467; Match(RAW);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6468; Match(BOOLEAN);
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6469; Match(DATE);
				}
				break;
			case ROWID:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6470; Match(ROWID);
				}
				break;
			case UROWID:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6471; Match(UROWID);
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6472; Match(YEAR);
				}
				break;
			case MONTH:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6473; Match(MONTH);
				}
				break;
			case DAY:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6474; Match(DAY);
				}
				break;
			case HOUR:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6475; Match(HOUR);
				}
				break;
			case MINUTE:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6476; Match(MINUTE);
				}
				break;
			case SECOND:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6477; Match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6478; Match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6479; Match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6480; Match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6481; Match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6482; Match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6483; Match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6484; Match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6485; Match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6486; Match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6487; Match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6488; Match(BFILE);
				}
				break;
			case BLOB:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6489; Match(BLOB);
				}
				break;
			case CLOB:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6490; Match(CLOB);
				}
				break;
			case NCLOB:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6491; Match(NCLOB);
				}
				break;
			case MLSLABEL:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6492; Match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_variableContext : ParserRuleContext {
		public ITerminalNode[] BINDVAR() { return GetTokens(PlSqlParser.BINDVAR); }
		public ITerminalNode BINDVAR(int i) {
			return GetToken(PlSqlParser.BINDVAR, i);
		}
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public General_element_partContext[] general_element_part() {
			return GetRuleContexts<General_element_partContext>();
		}
		public General_element_partContext general_element_part(int i) {
			return GetRuleContext<General_element_partContext>(i);
		}
		public ITerminalNode INDICATOR() { return GetToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bind_variableContext bind_variable() {
		Bind_variableContext _localctx = new Bind_variableContext(Context, State);
		EnterRule(_localctx, 894, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6498;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINDVAR:
				{
				State = 6495; Match(BINDVAR);
				}
				break;
			case COLON:
				{
				State = 6496; Match(COLON);
				State = 6497; Match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6508;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
			case 1:
				{
				State = 6501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDICATOR) {
					{
					State = 6500; Match(INDICATOR);
					}
				}

				State = 6506;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINDVAR:
					{
					State = 6503; Match(BINDVAR);
					}
					break;
				case COLON:
					{
					State = 6504; Match(COLON);
					State = 6505; Match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 6514;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,926,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6510; Match(PERIOD);
					State = 6511; general_element_part();
					}
					} 
				}
				State = 6516;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,926,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_elementContext : ParserRuleContext {
		public General_element_partContext[] general_element_part() {
			return GetRuleContexts<General_element_partContext>();
		}
		public General_element_partContext general_element_part(int i) {
			return GetRuleContext<General_element_partContext>(i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_elementContext general_element() {
		General_elementContext _localctx = new General_elementContext(Context, State);
		EnterRule(_localctx, 896, RULE_general_element);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6517; general_element_part();
			State = 6522;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,927,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6518; Match(PERIOD);
					State = 6519; general_element_part();
					}
					} 
				}
				State = 6524;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,927,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_element_partContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Function_argumentContext function_argument() {
			return GetRuleContext<Function_argumentContext>(0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_element_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_element_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_element_partContext general_element_part() {
		General_element_partContext _localctx = new General_element_partContext(Context, State);
		EnterRule(_localctx, 898, RULE_general_element_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 6525; Match(INTRODUCER);
				State = 6526; char_set_name();
				}
			}

			State = 6529; id_expressions();
			State = 6532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,929,Context) ) {
			case 1:
				{
				State = 6530; Match(AT_SIGN);
				State = 6531; link_name();
				}
				break;
			}
			State = 6535;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,930,Context) ) {
			case 1:
				{
				State = 6534; function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_elementContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_elementContext table_element() {
		Table_elementContext _localctx = new Table_elementContext(Context, State);
		EnterRule(_localctx, 900, RULE_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 6537; Match(INTRODUCER);
				State = 6538; char_set_name();
				}
			}

			State = 6541; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_privilegeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(PlSqlParser.PRIVILEGES, 0); }
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode FLASHBACK() { return GetToken(PlSqlParser.FLASHBACK, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public ITerminalNode INHERIT() { return GetToken(PlSqlParser.INHERIT, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode VIEW() { return GetToken(PlSqlParser.VIEW, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode REFRESH() { return GetToken(PlSqlParser.REFRESH, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode REWRITE() { return GetToken(PlSqlParser.REWRITE, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode REFERENCES() { return GetToken(PlSqlParser.REFERENCES, 0); }
		public ITerminalNode SELECT() { return GetToken(PlSqlParser.SELECT, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ITerminalNode SQL() { return GetToken(PlSqlParser.SQL, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public Object_privilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_privilege; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_privilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_privilegeContext object_privilege() {
		Object_privilegeContext _localctx = new Object_privilegeContext(Context, State);
		EnterRule(_localctx, 902, RULE_object_privilege);
		int _la;
		try {
			State = 6576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6543; Match(ALL);
				State = 6545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 6544; Match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6547; Match(ALTER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6548; Match(DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6549; Match(DELETE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6550; Match(EXECUTE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6551; Match(FLASHBACK);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6552; Match(FLASHBACK);
				State = 6553; Match(ARCHIVE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6554; Match(INDEX);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6555; Match(INHERIT);
				State = 6556; Match(PRIVILEGES);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6557; Match(INSERT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6558; Match(KEEP);
				State = 6559; Match(SEQUENCE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6560; Match(MERGE);
				State = 6561; Match(VIEW);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6562; Match(ON);
				State = 6563; Match(COMMIT);
				State = 6564; Match(REFRESH);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6565; Match(QUERY);
				State = 6566; Match(REWRITE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6567; Match(READ);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6568; Match(REFERENCES);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6569; Match(SELECT);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6570; Match(TRANSLATE);
				State = 6571; Match(SQL);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6572; Match(UNDER);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6573; Match(UPDATE);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6574; Match(USE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6575; Match(WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_privilegeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(PlSqlParser.PRIVILEGES, 0); }
		public ITerminalNode ADVISOR() { return GetToken(PlSqlParser.ADVISOR, 0); }
		public ITerminalNode ADMINISTER() { return GetToken(PlSqlParser.ADMINISTER, 0); }
		public ITerminalNode SQL() { return GetToken(PlSqlParser.SQL, 0); }
		public ITerminalNode TUNING() { return GetToken(PlSqlParser.TUNING, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode ANY() { return GetToken(PlSqlParser.ANY, 0); }
		public ITerminalNode PROFILE() { return GetToken(PlSqlParser.PROFILE, 0); }
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(PlSqlParser.MANAGEMENT, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode CLUSTER() { return GetToken(PlSqlParser.CLUSTER, 0); }
		public ITerminalNode CONTEXT() { return GetToken(PlSqlParser.CONTEXT, 0); }
		public ITerminalNode EXEMPT() { return GetToken(PlSqlParser.EXEMPT, 0); }
		public ITerminalNode REDACTION() { return GetToken(PlSqlParser.REDACTION, 0); }
		public ITerminalNode POLICY() { return GetToken(PlSqlParser.POLICY, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode LINK() { return GetToken(PlSqlParser.LINK, 0); }
		public ITerminalNode PUBLIC() { return GetToken(PlSqlParser.PUBLIC, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public ITerminalNode SESSION() { return GetToken(PlSqlParser.SESSION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public ITerminalNode ANALYZE() { return GetToken(PlSqlParser.ANALYZE, 0); }
		public ITerminalNode DICTIONARY() { return GetToken(PlSqlParser.DICTIONARY, 0); }
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(PlSqlParser.DIRECTORY, 0); }
		public ITerminalNode EDITION() { return GetToken(PlSqlParser.EDITION, 0); }
		public ITerminalNode FLASHBACK() { return GetToken(PlSqlParser.FLASHBACK, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public ITerminalNode INDEXTYPE() { return GetToken(PlSqlParser.INDEXTYPE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode JOB() { return GetToken(PlSqlParser.JOB, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode CLASS() { return GetToken(PlSqlParser.CLASS, 0); }
		public ITerminalNode PROGRAM() { return GetToken(PlSqlParser.PROGRAM, 0); }
		public ITerminalNode MANAGE() { return GetToken(PlSqlParser.MANAGE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(PlSqlParser.SCHEDULER, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public ITerminalNode LIBRARY() { return GetToken(PlSqlParser.LIBRARY, 0); }
		public ITerminalNode LOGMINING() { return GetToken(PlSqlParser.LOGMINING, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(PlSqlParser.MATERIALIZED, 0); }
		public ITerminalNode VIEW() { return GetToken(PlSqlParser.VIEW, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode REWRITE() { return GetToken(PlSqlParser.REWRITE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(PlSqlParser.GLOBAL, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode REFRESH() { return GetToken(PlSqlParser.REFRESH, 0); }
		public ITerminalNode MINING() { return GetToken(PlSqlParser.MINING, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode SELECT() { return GetToken(PlSqlParser.SELECT, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode CUBE() { return GetToken(PlSqlParser.CUBE, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode MEASURE() { return GetToken(PlSqlParser.MEASURE, 0); }
		public ITerminalNode FOLDER() { return GetToken(PlSqlParser.FOLDER, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode BUILD() { return GetToken(PlSqlParser.BUILD, 0); }
		public ITerminalNode PROCESS() { return GetToken(PlSqlParser.PROCESS, 0); }
		public ITerminalNode OPERATOR() { return GetToken(PlSqlParser.OPERATOR, 0); }
		public ITerminalNode OUTLINE() { return GetToken(PlSqlParser.OUTLINE, 0); }
		public ITerminalNode PLUGGABLE() { return GetToken(PlSqlParser.PLUGGABLE, 0); }
		public ITerminalNode CONTAINER() { return GetToken(PlSqlParser.CONTAINER, 0); }
		public ITerminalNode ROLE() { return GetToken(PlSqlParser.ROLE, 0); }
		public ITerminalNode GRANT() { return GetToken(PlSqlParser.GRANT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public ITerminalNode RESTRICTED() { return GetToken(PlSqlParser.RESTRICTED, 0); }
		public ITerminalNode RESOURCE() { return GetToken(PlSqlParser.RESOURCE, 0); }
		public ITerminalNode COST() { return GetToken(PlSqlParser.COST, 0); }
		public ITerminalNode TRANSLATION() { return GetToken(PlSqlParser.TRANSLATION, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(PlSqlParser.SYNONYM, 0); }
		public ITerminalNode BACKUP() { return GetToken(PlSqlParser.BACKUP, 0); }
		public ITerminalNode LOCK() { return GetToken(PlSqlParser.LOCK, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode AUDIT() { return GetToken(PlSqlParser.AUDIT, 0); }
		public ITerminalNode BECOME() { return GetToken(PlSqlParser.BECOME, 0); }
		public ITerminalNode CHANGE() { return GetToken(PlSqlParser.CHANGE, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(PlSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ACCESS() { return GetToken(PlSqlParser.ACCESS, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(PlSqlParser.TRANSACTION, 0); }
		public ITerminalNode PRIVILEGE() { return GetToken(PlSqlParser.PRIVILEGE, 0); }
		public ITerminalNode INHERIT() { return GetToken(PlSqlParser.INHERIT, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode DATE() { return GetToken(PlSqlParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode SYSGUID() { return GetToken(PlSqlParser.SYSGUID, 0); }
		public ITerminalNode PURGE() { return GetToken(PlSqlParser.PURGE, 0); }
		public ITerminalNode DBA_RECYCLEBIN() { return GetToken(PlSqlParser.DBA_RECYCLEBIN, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(PlSqlParser.RESUMABLE, 0); }
		public ITerminalNode SYSBACKUP() { return GetToken(PlSqlParser.SYSBACKUP, 0); }
		public ITerminalNode SYSDBA() { return GetToken(PlSqlParser.SYSDBA, 0); }
		public ITerminalNode SYSDG() { return GetToken(PlSqlParser.SYSDG, 0); }
		public ITerminalNode SYSKM() { return GetToken(PlSqlParser.SYSKM, 0); }
		public ITerminalNode SYSOPER() { return GetToken(PlSqlParser.SYSOPER, 0); }
		public System_privilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system_privilege; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystem_privilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public System_privilegeContext system_privilege() {
		System_privilegeContext _localctx = new System_privilegeContext(Context, State);
		EnterRule(_localctx, 904, RULE_system_privilege);
		int _la;
		try {
			State = 6904;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6578; Match(ALL);
				State = 6579; Match(PRIVILEGES);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6580; Match(ADVISOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6581; Match(ADMINISTER);
				State = 6583;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6582; Match(ANY);
					}
				}

				State = 6585; Match(SQL);
				State = 6586; Match(TUNING);
				State = 6587; Match(SET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6588;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6589; Match(ANY);
				State = 6590; Match(SQL);
				State = 6591; Match(PROFILE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6592; Match(ADMINISTER);
				State = 6593; Match(SQL);
				State = 6594; Match(MANAGEMENT);
				State = 6595; Match(OBJECT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6596; Match(CREATE);
				State = 6598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6597; Match(ANY);
					}
				}

				State = 6600; Match(CLUSTER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6601;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6602; Match(ANY);
				State = 6603; Match(CLUSTER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6604;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6605; Match(ANY);
				State = 6606; Match(CONTEXT);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6607; Match(EXEMPT);
				State = 6608; Match(REDACTION);
				State = 6609; Match(POLICY);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6610; Match(ALTER);
				State = 6611; Match(DATABASE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6612;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC) {
					{
					State = 6613; Match(PUBLIC);
					}
				}

				State = 6616; Match(DATABASE);
				State = 6617; Match(LINK);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6618; Match(DROP);
				State = 6619; Match(PUBLIC);
				State = 6620; Match(DATABASE);
				State = 6621; Match(LINK);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6622; Match(DEBUG);
				State = 6623; Match(CONNECT);
				State = 6624; Match(SESSION);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6625; Match(DEBUG);
				State = 6626; Match(ANY);
				State = 6627; Match(PROCEDURE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6628; Match(ANALYZE);
				State = 6629; Match(ANY);
				State = 6630; Match(DICTIONARY);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6631; Match(CREATE);
				State = 6633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6632; Match(ANY);
					}
				}

				State = 6635; Match(DIMENSION);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6636;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6637; Match(ANY);
				State = 6638; Match(DIMENSION);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6639;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6640; Match(ANY);
				State = 6641; Match(DIRECTORY);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6642;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6643; Match(ANY);
				State = 6644; Match(EDITION);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6645; Match(FLASHBACK);
				State = 6650;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ARCHIVE:
					{
					State = 6646; Match(ARCHIVE);
					State = 6647; Match(ADMINISTER);
					}
					break;
				case ANY:
					{
					State = 6648; Match(ANY);
					State = 6649; Match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6652;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6653; Match(ANY);
				State = 6654; Match(INDEX);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6655; Match(CREATE);
				State = 6657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6656; Match(ANY);
					}
				}

				State = 6659; Match(INDEXTYPE);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6660;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6661; Match(ANY);
				State = 6662; Match(INDEXTYPE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6663; Match(CREATE);
				State = 6665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY || _la==EXTERNAL) {
					{
					State = 6664;
					_la = TokenStream.LA(1);
					if ( !(_la==ANY || _la==EXTERNAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6667; Match(JOB);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6668; Match(EXECUTE);
				State = 6669; Match(ANY);
				State = 6670;
				_la = TokenStream.LA(1);
				if ( !(_la==CLASS || _la==PROGRAM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6671; Match(MANAGE);
				State = 6672; Match(SCHEDULER);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6673; Match(ADMINISTER);
				State = 6674; Match(KEY);
				State = 6675; Match(MANAGEMENT);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6676; Match(CREATE);
				State = 6678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6677; Match(ANY);
					}
				}

				State = 6680; Match(LIBRARY);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6681;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6682; Match(ANY);
				State = 6683; Match(LIBRARY);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6684; Match(LOGMINING);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6685; Match(CREATE);
				State = 6687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6686; Match(ANY);
					}
				}

				State = 6689; Match(MATERIALIZED);
				State = 6690; Match(VIEW);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6691;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6692; Match(ANY);
				State = 6693; Match(MATERIALIZED);
				State = 6694; Match(VIEW);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL) {
					{
					State = 6695; Match(GLOBAL);
					}
				}

				State = 6698; Match(QUERY);
				State = 6699; Match(REWRITE);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6700; Match(ON);
				State = 6701; Match(COMMIT);
				State = 6702; Match(REFRESH);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6703; Match(CREATE);
				State = 6705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6704; Match(ANY);
					}
				}

				State = 6707; Match(MINING);
				State = 6708; Match(MODEL);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6709;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==COMMENT || _la==DROP || _la==SELECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6710; Match(ANY);
				State = 6711; Match(MINING);
				State = 6712; Match(MODEL);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6713; Match(CREATE);
				State = 6715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6714; Match(ANY);
					}
				}

				State = 6717; Match(CUBE);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6718;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6719; Match(ANY);
				State = 6720; Match(CUBE);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6721; Match(CREATE);
				State = 6723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6722; Match(ANY);
					}
				}

				State = 6725; Match(MEASURE);
				State = 6726; Match(FOLDER);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6727;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETE || _la==DROP || _la==INSERT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6728; Match(ANY);
				State = 6729; Match(MEASURE);
				State = 6730; Match(FOLDER);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6731; Match(CREATE);
				State = 6733;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6732; Match(ANY);
					}
				}

				State = 6735; Match(CUBE);
				State = 6736; Match(DIMENSION);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6737;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DELETE || _la==DROP || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6738; Match(ANY);
				State = 6739; Match(CUBE);
				State = 6740; Match(DIMENSION);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 6741; Match(CREATE);
				State = 6743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6742; Match(ANY);
					}
				}

				State = 6745; Match(CUBE);
				State = 6746; Match(BUILD);
				State = 6747; Match(PROCESS);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 6748;
				_la = TokenStream.LA(1);
				if ( !(_la==DROP || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6749; Match(ANY);
				State = 6750; Match(CUBE);
				State = 6751; Match(BUILD);
				State = 6752; Match(PROCESS);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 6753; Match(CREATE);
				State = 6755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6754; Match(ANY);
					}
				}

				State = 6757; Match(OPERATOR);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 6758;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6759; Match(ANY);
				State = 6760; Match(OPERATOR);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 6761;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6762; Match(ANY);
				State = 6763; Match(OUTLINE);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 6764; Match(CREATE);
				State = 6765; Match(PLUGGABLE);
				State = 6766; Match(DATABASE);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 6767; Match(SET);
				State = 6768; Match(CONTAINER);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 6769; Match(CREATE);
				State = 6771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6770; Match(ANY);
					}
				}

				State = 6773; Match(PROCEDURE);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 6774;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6775; Match(ANY);
				State = 6776; Match(PROCEDURE);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 6777;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6778; Match(PROFILE);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 6779; Match(CREATE);
				State = 6780; Match(ROLE);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 6781;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==GRANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6782; Match(ANY);
				State = 6783; Match(ROLE);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 6784;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6785; Match(ROLLBACK);
				State = 6786; Match(SEGMENT);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 6787; Match(CREATE);
				State = 6789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6788; Match(ANY);
					}
				}

				State = 6791; Match(SEQUENCE);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 6792;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6793; Match(ANY);
				State = 6794; Match(SEQUENCE);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 6795;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==RESTRICTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6796; Match(SESSION);
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 6797; Match(ALTER);
				State = 6798; Match(RESOURCE);
				State = 6799; Match(COST);
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 6800; Match(CREATE);
				State = 6802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6801; Match(ANY);
					}
				}

				State = 6804; Match(SQL);
				State = 6805; Match(TRANSLATION);
				State = 6806; Match(PROFILE);
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 6807;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==USE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6808; Match(ANY);
				State = 6809; Match(SQL);
				State = 6810; Match(TRANSLATION);
				State = 6811; Match(PROFILE);
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 6812; Match(TRANSLATE);
				State = 6813; Match(ANY);
				State = 6814; Match(SQL);
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 6815; Match(CREATE);
				State = 6817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6816; Match(ANY);
					}
				}

				State = 6819; Match(SYNONYM);
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 6820; Match(DROP);
				State = 6821; Match(ANY);
				State = 6822; Match(SYNONYM);
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 6823;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6824; Match(PUBLIC);
				State = 6825; Match(SYNONYM);
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 6826; Match(CREATE);
				State = 6828;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6827; Match(ANY);
					}
				}

				State = 6830; Match(TABLE);
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 6831;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==BACKUP || _la==COMMENT || _la==DELETE || _la==DROP || _la==INSERT || _la==LOCK || _la==READ || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6832; Match(ANY);
				State = 6833; Match(TABLE);
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 6834;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP || _la==MANAGE || _la==UNLIMITED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6835; Match(TABLESPACE);
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 6836; Match(CREATE);
				State = 6838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6837; Match(ANY);
					}
				}

				State = 6840; Match(TRIGGER);
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 6841;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6842; Match(ANY);
				State = 6843; Match(TRIGGER);
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 6844; Match(ADMINISTER);
				State = 6845; Match(DATABASE);
				State = 6846; Match(TRIGGER);
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 6847; Match(CREATE);
				State = 6849;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6848; Match(ANY);
					}
				}

				State = 6851; Match(TYPE);
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 6852;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE || _la==UNDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6853; Match(ANY);
				State = 6854; Match(TYPE);
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 6855;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6856; Match(USER);
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 6857; Match(CREATE);
				State = 6859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6858; Match(ANY);
					}
				}

				State = 6861; Match(VIEW);
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 6862;
				_la = TokenStream.LA(1);
				if ( !(_la==DROP || _la==MERGE || _la==UNDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6863; Match(ANY);
				State = 6864; Match(VIEW);
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 6865;
				_la = TokenStream.LA(1);
				if ( !(_la==ANALYZE || _la==AUDIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6866; Match(ANY);
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 6867; Match(BECOME);
				State = 6868; Match(USER);
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 6869; Match(CHANGE);
				State = 6870; Match(NOTIFICATION);
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 6871; Match(EXEMPT);
				State = 6872; Match(ACCESS);
				State = 6873; Match(POLICY);
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 6874; Match(FORCE);
				State = 6876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 6875; Match(ANY);
					}
				}

				State = 6878; Match(TRANSACTION);
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 6879; Match(GRANT);
				State = 6880; Match(ANY);
				State = 6882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OBJECT) {
					{
					State = 6881; Match(OBJECT);
					}
				}

				State = 6884; Match(PRIVILEGE);
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 6885; Match(INHERIT);
				State = 6886; Match(ANY);
				State = 6887; Match(PRIVILEGES);
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 6888; Match(KEEP);
				State = 6889; Match(DATE);
				State = 6890; Match(TIME);
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 6891; Match(KEEP);
				State = 6892; Match(SYSGUID);
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 6893; Match(PURGE);
				State = 6894; Match(DBA_RECYCLEBIN);
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 6895; Match(RESUMABLE);
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 6896; Match(SELECT);
				State = 6897; Match(ANY);
				State = 6898;
				_la = TokenStream.LA(1);
				if ( !(_la==DICTIONARY || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 6899; Match(SYSBACKUP);
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 6900; Match(SYSDBA);
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 6901; Match(SYSDG);
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 6902; Match(SYSKM);
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 6903; Match(SYSOPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 906, RULE_literal);
		try {
			State = 6908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6906; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6907; function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public Bind_variableContext[] bind_variable() {
			return GetRuleContexts<Bind_variableContext>();
		}
		public Bind_variableContext bind_variable(int i) {
			return GetRuleContext<Bind_variableContext>(i);
		}
		public ITerminalNode AT() { return GetToken(PlSqlParser.AT, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode[] DAY() { return GetTokens(PlSqlParser.DAY); }
		public ITerminalNode DAY(int i) {
			return GetToken(PlSqlParser.DAY, i);
		}
		public ITerminalNode[] HOUR() { return GetTokens(PlSqlParser.HOUR); }
		public ITerminalNode HOUR(int i) {
			return GetToken(PlSqlParser.HOUR, i);
		}
		public ITerminalNode[] MINUTE() { return GetTokens(PlSqlParser.MINUTE); }
		public ITerminalNode MINUTE(int i) {
			return GetToken(PlSqlParser.MINUTE, i);
		}
		public ITerminalNode[] SECOND() { return GetTokens(PlSqlParser.SECOND); }
		public ITerminalNode SECOND(int i) {
			return GetToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return GetRuleContext<General_element_partContext>(0);
		}
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public ITerminalNode DATE() { return GetToken(PlSqlParser.DATE, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode TRUE() { return GetToken(PlSqlParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(PlSqlParser.FALSE, 0); }
		public ITerminalNode DBTIMEZONE() { return GetToken(PlSqlParser.DBTIMEZONE, 0); }
		public ITerminalNode SESSIONTIMEZONE() { return GetToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(PlSqlParser.MINVALUE, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 908, RULE_constant);
		int _la;
		try {
			State = 6972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6910; Match(TIMESTAMP);
				State = 6913;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 6911; @string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					State = 6912; bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6919;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
				case 1:
					{
					State = 6915; Match(AT);
					State = 6916; Match(TIME);
					State = 6917; Match(ZONE);
					State = 6918; @string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6921; Match(INTERVAL);
				State = 6925;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 6922; @string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					State = 6923; bind_variable();
					}
					break;
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 6924; general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6927;
				_la = TokenStream.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
				case 1:
					{
					State = 6928; Match(LEFT_PAREN);
					State = 6931;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						State = 6929; Match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						State = 6930; bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6938;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6933; Match(COMMA);
						State = 6936;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							State = 6934; Match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							State = 6935; bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					State = 6940; Match(RIGHT_PAREN);
					}
					break;
				}
				State = 6958;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
				case 1:
					{
					State = 6943; Match(TO);
					State = 6956;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DAY:
						{
						State = 6944; Match(DAY);
						}
						break;
					case HOUR:
						{
						State = 6945; Match(HOUR);
						}
						break;
					case MINUTE:
						{
						State = 6946; Match(MINUTE);
						}
						break;
					case SECOND:
						{
						State = 6947; Match(SECOND);
						State = 6954;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
						case 1:
							{
							State = 6948; Match(LEFT_PAREN);
							State = 6951;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								State = 6949; Match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								State = 6950; bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 6953; Match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6960; numeric();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6961; Match(DATE);
				State = 6962; @string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6963; @string();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6964; Match(NULL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6965; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6966; Match(FALSE);
				}
				break;
			case DBTIMEZONE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6967; Match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6968; Match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6969; Match(MINVALUE);
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6970; Match(MAXVALUE);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6971; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 910, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 6974; Match(INTRODUCER);
				State = 6975; char_set_name();
				}
			}

			State = 6978; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Synonym_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synonym_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynonym_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Synonym_nameContext synonym_name() {
		Synonym_nameContext _localctx = new Synonym_nameContext(Context, State);
		EnterRule(_localctx, 912, RULE_synonym_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6980; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_nameContext package_name() {
		Package_nameContext _localctx = new Package_nameContext(Context, State);
		EnterRule(_localctx, 914, RULE_package_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6982; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 916, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6984; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_model_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_model_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_model_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_model_nameContext reference_model_name() {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(Context, State);
		EnterRule(_localctx, 918, RULE_reference_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6986; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cost_class_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost_class_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost_class_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cost_class_nameContext cost_class_name() {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(Context, State);
		EnterRule(_localctx, 920, RULE_cost_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6988; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 922, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6990; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(Context, State);
		EnterRule(_localctx, 924, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6992; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_segment_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_segment_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_segment_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_segment_nameContext rollback_segment_name() {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(Context, State);
		EnterRule(_localctx, 926, RULE_rollback_segment_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6994; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_var_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_var_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_var_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_var_nameContext table_var_name() {
		Table_var_nameContext _localctx = new Table_var_nameContext(Context, State);
		EnterRule(_localctx, 928, RULE_table_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6996; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 930, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6998; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_model_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_model_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain_model_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Main_model_nameContext main_model_name() {
		Main_model_nameContext _localctx = new Main_model_nameContext(Context, State);
		EnterRule(_localctx, 932, RULE_main_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7000; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_nameContext query_name() {
		Query_nameContext _localctx = new Query_nameContext(Context, State);
		EnterRule(_localctx, 934, RULE_query_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7002; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 936, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7004; identifier();
			State = 7009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 7005; Match(PERIOD);
				State = 7006; id_expression();
				}
				}
				State = 7011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function_nameContext aggregate_function_name() {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(Context, State);
		EnterRule(_localctx, 938, RULE_aggregate_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7012; identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_nameContext exception_name() {
		Exception_nameContext _localctx = new Exception_nameContext(Context, State);
		EnterRule(_localctx, 940, RULE_exception_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7014; identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 942, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7016; identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_expressionContext : ParserRuleContext {
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public ITerminalNode DELIMITED_ID() { return GetToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_expressionContext id_expression() {
		Id_expressionContext _localctx = new Id_expressionContext(Context, State);
		EnterRule(_localctx, 944, RULE_id_expression);
		try {
			State = 7020;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7018; regular_id();
				}
				break;
			case DELIMITED_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7019; Match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_expressionsContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Id_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_expressionsContext id_expressions() {
		Id_expressionsContext _localctx = new Id_expressionsContext(Context, State);
		EnterRule(_localctx, 946, RULE_id_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7022; id_expression();
			State = 7027;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,977,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7023; Match(PERIOD);
					State = 7024; id_expression();
					}
					} 
				}
				State = 7029;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,977,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 948, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7030; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_nameContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_nameContext sequence_name() {
		Sequence_nameContext _localctx = new Sequence_nameContext(Context, State);
		EnterRule(_localctx, 950, RULE_sequence_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7032; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_set_nameContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_set_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar_set_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_set_nameContext char_set_name() {
		Char_set_nameContext _localctx = new Char_set_nameContext(Context, State);
		EnterRule(_localctx, 952, RULE_char_set_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7034; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_signContext : ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_sign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_signContext outer_join_sign() {
		Outer_join_signContext _localctx = new Outer_join_signContext(Context, State);
		EnterRule(_localctx, 954, RULE_outer_join_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7036; Match(LEFT_PAREN);
			State = 7037; Match(PLUS_SIGN);
			State = 7038; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regular_idContext : ParserRuleContext {
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public ITerminalNode A_LETTER() { return GetToken(PlSqlParser.A_LETTER, 0); }
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public ITerminalNode AGENT() { return GetToken(PlSqlParser.AGENT, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(PlSqlParser.AGGREGATE, 0); }
		public ITerminalNode ANALYZE() { return GetToken(PlSqlParser.ANALYZE, 0); }
		public ITerminalNode ARRAY() { return GetToken(PlSqlParser.ARRAY, 0); }
		public ITerminalNode ASSOCIATE() { return GetToken(PlSqlParser.ASSOCIATE, 0); }
		public ITerminalNode AT() { return GetToken(PlSqlParser.AT, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(PlSqlParser.ATTRIBUTE, 0); }
		public ITerminalNode AUDIT() { return GetToken(PlSqlParser.AUDIT, 0); }
		public ITerminalNode AUTHID() { return GetToken(PlSqlParser.AUTHID, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(PlSqlParser.AUTOMATIC, 0); }
		public ITerminalNode AUTONOMOUS_TRANSACTION() { return GetToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public ITerminalNode BATCH() { return GetToken(PlSqlParser.BATCH, 0); }
		public ITerminalNode BEFORE() { return GetToken(PlSqlParser.BEFORE, 0); }
		public ITerminalNode BFILE() { return GetToken(PlSqlParser.BFILE, 0); }
		public ITerminalNode BINARY_DOUBLE() { return GetToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public ITerminalNode BINARY_FLOAT() { return GetToken(PlSqlParser.BINARY_FLOAT, 0); }
		public ITerminalNode BINARY_INTEGER() { return GetToken(PlSqlParser.BINARY_INTEGER, 0); }
		public ITerminalNode BLOB() { return GetToken(PlSqlParser.BLOB, 0); }
		public ITerminalNode BLOCK() { return GetToken(PlSqlParser.BLOCK, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(PlSqlParser.BOOLEAN, 0); }
		public ITerminalNode BOTH() { return GetToken(PlSqlParser.BOTH, 0); }
		public ITerminalNode BUILD() { return GetToken(PlSqlParser.BUILD, 0); }
		public ITerminalNode BULK() { return GetToken(PlSqlParser.BULK, 0); }
		public ITerminalNode BYTE() { return GetToken(PlSqlParser.BYTE, 0); }
		public ITerminalNode C_LETTER() { return GetToken(PlSqlParser.C_LETTER, 0); }
		public ITerminalNode CALL() { return GetToken(PlSqlParser.CALL, 0); }
		public ITerminalNode CANONICAL() { return GetToken(PlSqlParser.CANONICAL, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode CAST() { return GetToken(PlSqlParser.CAST, 0); }
		public ITerminalNode CHAR() { return GetToken(PlSqlParser.CHAR, 0); }
		public ITerminalNode CHAR_CS() { return GetToken(PlSqlParser.CHAR_CS, 0); }
		public ITerminalNode CHARACTER() { return GetToken(PlSqlParser.CHARACTER, 0); }
		public ITerminalNode CHR() { return GetToken(PlSqlParser.CHR, 0); }
		public ITerminalNode CLOB() { return GetToken(PlSqlParser.CLOB, 0); }
		public ITerminalNode CLOSE() { return GetToken(PlSqlParser.CLOSE, 0); }
		public ITerminalNode CLUSTER() { return GetToken(PlSqlParser.CLUSTER, 0); }
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public ITerminalNode COLUMNS() { return GetToken(PlSqlParser.COLUMNS, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode COMMITTED() { return GetToken(PlSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY() { return GetToken(PlSqlParser.COMPATIBILITY, 0); }
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode COMPOUND() { return GetToken(PlSqlParser.COMPOUND, 0); }
		public ITerminalNode CONSTANT() { return GetToken(PlSqlParser.CONSTANT, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(PlSqlParser.CONSTRAINTS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(PlSqlParser.CONSTRUCTOR, 0); }
		public ITerminalNode CONTENT() { return GetToken(PlSqlParser.CONTENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(PlSqlParser.CONTEXT, 0); }
		public ITerminalNode CONTINUE() { return GetToken(PlSqlParser.CONTINUE, 0); }
		public ITerminalNode CONVERT() { return GetToken(PlSqlParser.CONVERT, 0); }
		public ITerminalNode CORRUPT_XID() { return GetToken(PlSqlParser.CORRUPT_XID, 0); }
		public ITerminalNode CORRUPT_XID_ALL() { return GetToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public ITerminalNode COST() { return GetToken(PlSqlParser.COST, 0); }
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public ITerminalNode CROSS() { return GetToken(PlSqlParser.CROSS, 0); }
		public ITerminalNode CUBE() { return GetToken(PlSqlParser.CUBE, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(PlSqlParser.CURRENT_USER, 0); }
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public ITerminalNode CUSTOMDATUM() { return GetToken(PlSqlParser.CUSTOMDATUM, 0); }
		public ITerminalNode CYCLE() { return GetToken(PlSqlParser.CYCLE, 0); }
		public ITerminalNode DATA() { return GetToken(PlSqlParser.DATA, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode DB_ROLE_CHANGE() { return GetToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public ITerminalNode DBTIMEZONE() { return GetToken(PlSqlParser.DBTIMEZONE, 0); }
		public ITerminalNode DDL() { return GetToken(PlSqlParser.DDL, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public ITerminalNode DEC() { return GetToken(PlSqlParser.DEC, 0); }
		public ITerminalNode DECIMAL() { return GetToken(PlSqlParser.DECIMAL, 0); }
		public ITerminalNode DECOMPOSE() { return GetToken(PlSqlParser.DECOMPOSE, 0); }
		public ITerminalNode DECREMENT() { return GetToken(PlSqlParser.DECREMENT, 0); }
		public ITerminalNode DEFAULTS() { return GetToken(PlSqlParser.DEFAULTS, 0); }
		public ITerminalNode DEFERRED() { return GetToken(PlSqlParser.DEFERRED, 0); }
		public ITerminalNode DEFINER() { return GetToken(PlSqlParser.DEFINER, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(PlSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode DISASSOCIATE() { return GetToken(PlSqlParser.DISASSOCIATE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(PlSqlParser.DOCUMENT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(PlSqlParser.DOUBLE, 0); }
		public ITerminalNode DSINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode EACH() { return GetToken(PlSqlParser.EACH, 0); }
		public ITerminalNode ELEMENT() { return GetToken(PlSqlParser.ELEMENT, 0); }
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode ENCODING() { return GetToken(PlSqlParser.ENCODING, 0); }
		public ITerminalNode ENTITYESCAPING() { return GetToken(PlSqlParser.ENTITYESCAPING, 0); }
		public ITerminalNode ERR() { return GetToken(PlSqlParser.ERR, 0); }
		public ITerminalNode ERRORS() { return GetToken(PlSqlParser.ERRORS, 0); }
		public ITerminalNode ESCAPE() { return GetToken(PlSqlParser.ESCAPE, 0); }
		public ITerminalNode EVALNAME() { return GetToken(PlSqlParser.EVALNAME, 0); }
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public ITerminalNode EXCEPTION_INIT() { return GetToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public ITerminalNode EXCEPTIONS() { return GetToken(PlSqlParser.EXCEPTIONS, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(PlSqlParser.EXCLUDE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public ITerminalNode EXPLAIN() { return GetToken(PlSqlParser.EXPLAIN, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode EXTRACT() { return GetToken(PlSqlParser.EXTRACT, 0); }
		public ITerminalNode FAILURE() { return GetToken(PlSqlParser.FAILURE, 0); }
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(PlSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FLOAT() { return GetToken(PlSqlParser.FLOAT, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(PlSqlParser.FOLLOWING, 0); }
		public ITerminalNode FOLLOWS() { return GetToken(PlSqlParser.FOLLOWS, 0); }
		public ITerminalNode FORALL() { return GetToken(PlSqlParser.FORALL, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode FULL() { return GetToken(PlSqlParser.FULL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public ITerminalNode GROUPING() { return GetToken(PlSqlParser.GROUPING, 0); }
		public ITerminalNode HASH() { return GetToken(PlSqlParser.HASH, 0); }
		public ITerminalNode HIDE() { return GetToken(PlSqlParser.HIDE, 0); }
		public ITerminalNode HOUR() { return GetToken(PlSqlParser.HOUR, 0); }
		public ITerminalNode ID() { return GetToken(PlSqlParser.ID, 0); }
		public ITerminalNode IGNORE() { return GetToken(PlSqlParser.IGNORE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode INCLUDE() { return GetToken(PlSqlParser.INCLUDE, 0); }
		public ITerminalNode INCLUDING() { return GetToken(PlSqlParser.INCLUDING, 0); }
		public ITerminalNode INCREMENT() { return GetToken(PlSqlParser.INCREMENT, 0); }
		public ITerminalNode INDENT() { return GetToken(PlSqlParser.INDENT, 0); }
		public ITerminalNode INDEXED() { return GetToken(PlSqlParser.INDEXED, 0); }
		public ITerminalNode INDICATOR() { return GetToken(PlSqlParser.INDICATOR, 0); }
		public ITerminalNode INDICES() { return GetToken(PlSqlParser.INDICES, 0); }
		public ITerminalNode INFINITE() { return GetToken(PlSqlParser.INFINITE, 0); }
		public ITerminalNode INLINE() { return GetToken(PlSqlParser.INLINE, 0); }
		public ITerminalNode INNER() { return GetToken(PlSqlParser.INNER, 0); }
		public ITerminalNode INOUT() { return GetToken(PlSqlParser.INOUT, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public ITerminalNode INSTEAD() { return GetToken(PlSqlParser.INSTEAD, 0); }
		public ITerminalNode INT() { return GetToken(PlSqlParser.INT, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlSqlParser.INTEGER, 0); }
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ITerminalNode INVALIDATE() { return GetToken(PlSqlParser.INVALIDATE, 0); }
		public ITerminalNode ISOLATION() { return GetToken(PlSqlParser.ISOLATION, 0); }
		public ITerminalNode ITERATE() { return GetToken(PlSqlParser.ITERATE, 0); }
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode JOIN() { return GetToken(PlSqlParser.JOIN, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(PlSqlParser.LANGUAGE, 0); }
		public ITerminalNode LAST() { return GetToken(PlSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(PlSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEADING() { return GetToken(PlSqlParser.LEADING, 0); }
		public ITerminalNode LEFT() { return GetToken(PlSqlParser.LEFT, 0); }
		public ITerminalNode LEVEL() { return GetToken(PlSqlParser.LEVEL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(PlSqlParser.LIBRARY, 0); }
		public ITerminalNode LIKE2() { return GetToken(PlSqlParser.LIKE2, 0); }
		public ITerminalNode LIKE4() { return GetToken(PlSqlParser.LIKE4, 0); }
		public ITerminalNode LIKEC() { return GetToken(PlSqlParser.LIKEC, 0); }
		public ITerminalNode LIMIT() { return GetToken(PlSqlParser.LIMIT, 0); }
		public ITerminalNode LINK() { return GetToken(PlSqlParser.LINK, 0); }
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode LOCKED() { return GetToken(PlSqlParser.LOCKED, 0); }
		public ITerminalNode LOG() { return GetToken(PlSqlParser.LOG, 0); }
		public ITerminalNode LOGOFF() { return GetToken(PlSqlParser.LOGOFF, 0); }
		public ITerminalNode LOGON() { return GetToken(PlSqlParser.LOGON, 0); }
		public ITerminalNode LONG() { return GetToken(PlSqlParser.LONG, 0); }
		public ITerminalNode LOOP() { return GetToken(PlSqlParser.LOOP, 0); }
		public ITerminalNode MAIN() { return GetToken(PlSqlParser.MAIN, 0); }
		public ITerminalNode MAP() { return GetToken(PlSqlParser.MAP, 0); }
		public ITerminalNode MATCHED() { return GetToken(PlSqlParser.MATCHED, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode MEASURES() { return GetToken(PlSqlParser.MEASURES, 0); }
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode MINIMUM() { return GetToken(PlSqlParser.MINIMUM, 0); }
		public ITerminalNode MINUTE() { return GetToken(PlSqlParser.MINUTE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(PlSqlParser.MINVALUE, 0); }
		public ITerminalNode MLSLABEL() { return GetToken(PlSqlParser.MLSLABEL, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode MODIFY() { return GetToken(PlSqlParser.MODIFY, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode MULTISET() { return GetToken(PlSqlParser.MULTISET, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode NAN() { return GetToken(PlSqlParser.NAN, 0); }
		public ITerminalNode NATURAL() { return GetToken(PlSqlParser.NATURAL, 0); }
		public ITerminalNode NATURALN() { return GetToken(PlSqlParser.NATURALN, 0); }
		public ITerminalNode NAV() { return GetToken(PlSqlParser.NAV, 0); }
		public ITerminalNode NCHAR() { return GetToken(PlSqlParser.NCHAR, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(PlSqlParser.NCHAR_CS, 0); }
		public ITerminalNode NCLOB() { return GetToken(PlSqlParser.NCLOB, 0); }
		public ITerminalNode NESTED() { return GetToken(PlSqlParser.NESTED, 0); }
		public ITerminalNode NEW() { return GetToken(PlSqlParser.NEW, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode NOAUDIT() { return GetToken(PlSqlParser.NOAUDIT, 0); }
		public ITerminalNode NOCOPY() { return GetToken(PlSqlParser.NOCOPY, 0); }
		public ITerminalNode NOCYCLE() { return GetToken(PlSqlParser.NOCYCLE, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public ITerminalNode NOSCHEMACHECK() { return GetToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode NUMBER() { return GetToken(PlSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC() { return GetToken(PlSqlParser.NUMERIC, 0); }
		public ITerminalNode NVARCHAR2() { return GetToken(PlSqlParser.NVARCHAR2, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public ITerminalNode OID() { return GetToken(PlSqlParser.OID, 0); }
		public ITerminalNode OLD() { return GetToken(PlSqlParser.OLD, 0); }
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode OPEN() { return GetToken(PlSqlParser.OPEN, 0); }
		public ITerminalNode OPERATOR() { return GetToken(PlSqlParser.OPERATOR, 0); }
		public ITerminalNode ORADATA() { return GetToken(PlSqlParser.ORADATA, 0); }
		public ITerminalNode ORDINALITY() { return GetToken(PlSqlParser.ORDINALITY, 0); }
		public ITerminalNode OSERROR() { return GetToken(PlSqlParser.OSERROR, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public ITerminalNode OUTER() { return GetToken(PlSqlParser.OUTER, 0); }
		public ITerminalNode OVER() { return GetToken(PlSqlParser.OVER, 0); }
		public ITerminalNode OVERRIDING() { return GetToken(PlSqlParser.OVERRIDING, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public ITerminalNode PARALLEL_ENABLE() { return GetToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(PlSqlParser.PARAMETERS, 0); }
		public ITerminalNode PARENT() { return GetToken(PlSqlParser.PARENT, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode PASSING() { return GetToken(PlSqlParser.PASSING, 0); }
		public ITerminalNode PATH() { return GetToken(PlSqlParser.PATH, 0); }
		public ITerminalNode PIPELINED() { return GetToken(PlSqlParser.PIPELINED, 0); }
		public ITerminalNode PLAN() { return GetToken(PlSqlParser.PLAN, 0); }
		public ITerminalNode PLS_INTEGER() { return GetToken(PlSqlParser.PLS_INTEGER, 0); }
		public ITerminalNode POSITIVE() { return GetToken(PlSqlParser.POSITIVE, 0); }
		public ITerminalNode POSITIVEN() { return GetToken(PlSqlParser.POSITIVEN, 0); }
		public ITerminalNode PRAGMA() { return GetToken(PlSqlParser.PRAGMA, 0); }
		public ITerminalNode PRECEDING() { return GetToken(PlSqlParser.PRECEDING, 0); }
		public ITerminalNode PRECISION() { return GetToken(PlSqlParser.PRECISION, 0); }
		public ITerminalNode PRESENT() { return GetToken(PlSqlParser.PRESENT, 0); }
		public ITerminalNode PROGRAM() { return GetToken(PlSqlParser.PROGRAM, 0); }
		public ITerminalNode RAISE() { return GetToken(PlSqlParser.RAISE, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ITerminalNode RAW() { return GetToken(PlSqlParser.RAW, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode REAL() { return GetToken(PlSqlParser.REAL, 0); }
		public ITerminalNode RECORD() { return GetToken(PlSqlParser.RECORD, 0); }
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode REFERENCE() { return GetToken(PlSqlParser.REFERENCE, 0); }
		public ITerminalNode REFERENCING() { return GetToken(PlSqlParser.REFERENCING, 0); }
		public ITerminalNode REJECT() { return GetToken(PlSqlParser.REJECT, 0); }
		public ITerminalNode RELIES_ON() { return GetToken(PlSqlParser.RELIES_ON, 0); }
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode RESPECT() { return GetToken(PlSqlParser.RESPECT, 0); }
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public ITerminalNode RESULT_CACHE() { return GetToken(PlSqlParser.RESULT_CACHE, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode REVERSE() { return GetToken(PlSqlParser.REVERSE, 0); }
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public ITerminalNode RIGHT() { return GetToken(PlSqlParser.RIGHT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode ROLLUP() { return GetToken(PlSqlParser.ROLLUP, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public ITerminalNode RULES() { return GetToken(PlSqlParser.RULES, 0); }
		public ITerminalNode SAMPLE() { return GetToken(PlSqlParser.SAMPLE, 0); }
		public ITerminalNode SAVE() { return GetToken(PlSqlParser.SAVE, 0); }
		public ITerminalNode SAVEPOINT() { return GetToken(PlSqlParser.SAVEPOINT, 0); }
		public ITerminalNode SCHEMA() { return GetToken(PlSqlParser.SCHEMA, 0); }
		public ITerminalNode SCHEMACHECK() { return GetToken(PlSqlParser.SCHEMACHECK, 0); }
		public ITerminalNode SCN() { return GetToken(PlSqlParser.SCN, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ITerminalNode SEED() { return GetToken(PlSqlParser.SEED, 0); }
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode SELF() { return GetToken(PlSqlParser.SELF, 0); }
		public ITerminalNode SEQUENTIAL() { return GetToken(PlSqlParser.SEQUENTIAL, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(PlSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SERIALLY_REUSABLE() { return GetToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public ITerminalNode SERVERERROR() { return GetToken(PlSqlParser.SERVERERROR, 0); }
		public ITerminalNode SESSIONTIMEZONE() { return GetToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode SETS() { return GetToken(PlSqlParser.SETS, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public ITerminalNode SHOW() { return GetToken(PlSqlParser.SHOW, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(PlSqlParser.SHUTDOWN, 0); }
		public ITerminalNode SIBLINGS() { return GetToken(PlSqlParser.SIBLINGS, 0); }
		public ITerminalNode SIGNTYPE() { return GetToken(PlSqlParser.SIGNTYPE, 0); }
		public ITerminalNode SIMPLE_INTEGER() { return GetToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public ITerminalNode SINGLE() { return GetToken(PlSqlParser.SINGLE, 0); }
		public ITerminalNode SKIP_() { return GetToken(PlSqlParser.SKIP_, 0); }
		public ITerminalNode SMALLINT() { return GetToken(PlSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(PlSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SOME() { return GetToken(PlSqlParser.SOME, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(PlSqlParser.SPECIFICATION, 0); }
		public ITerminalNode SQLDATA() { return GetToken(PlSqlParser.SQLDATA, 0); }
		public ITerminalNode SQLERROR() { return GetToken(PlSqlParser.SQLERROR, 0); }
		public ITerminalNode STANDALONE() { return GetToken(PlSqlParser.STANDALONE, 0); }
		public ITerminalNode STARTUP() { return GetToken(PlSqlParser.STARTUP, 0); }
		public ITerminalNode STATEMENT() { return GetToken(PlSqlParser.STATEMENT, 0); }
		public ITerminalNode STATEMENT_ID() { return GetToken(PlSqlParser.STATEMENT_ID, 0); }
		public ITerminalNode STATIC() { return GetToken(PlSqlParser.STATIC, 0); }
		public ITerminalNode STATISTICS() { return GetToken(PlSqlParser.STATISTICS, 0); }
		public ITerminalNode STRING() { return GetToken(PlSqlParser.STRING, 0); }
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode SUBSTR() { return GetToken(PlSqlParser.SUBSTR, 0); }
		public ITerminalNode SUBMULTISET() { return GetToken(PlSqlParser.SUBMULTISET, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode SUBSTITUTABLE() { return GetToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public ITerminalNode SUBTYPE() { return GetToken(PlSqlParser.SUBTYPE, 0); }
		public ITerminalNode SUCCESS() { return GetToken(PlSqlParser.SUCCESS, 0); }
		public ITerminalNode SUSPEND() { return GetToken(PlSqlParser.SUSPEND, 0); }
		public ITerminalNode SYSDATE() { return GetToken(PlSqlParser.SYSDATE, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public ITerminalNode TIMEZONE_ABBR() { return GetToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public ITerminalNode TIMEZONE_REGION() { return GetToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public ITerminalNode TRAILING() { return GetToken(PlSqlParser.TRAILING, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(PlSqlParser.TRANSACTION, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ITerminalNode TREAT() { return GetToken(PlSqlParser.TREAT, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode TRIM() { return GetToken(PlSqlParser.TRIM, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(PlSqlParser.TRUNCATE, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(PlSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public ITerminalNode UNTIL() { return GetToken(PlSqlParser.UNTIL, 0); }
		public ITerminalNode UPDATED() { return GetToken(PlSqlParser.UPDATED, 0); }
		public ITerminalNode UPSERT() { return GetToken(PlSqlParser.UPSERT, 0); }
		public ITerminalNode UROWID() { return GetToken(PlSqlParser.UROWID, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public ITerminalNode USERS() { return GetToken(PlSqlParser.USERS, 0); }
		public ITerminalNode VALIDATE() { return GetToken(PlSqlParser.VALIDATE, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public ITerminalNode VARCHAR() { return GetToken(PlSqlParser.VARCHAR, 0); }
		public ITerminalNode VARCHAR2() { return GetToken(PlSqlParser.VARCHAR2, 0); }
		public ITerminalNode VARIABLE() { return GetToken(PlSqlParser.VARIABLE, 0); }
		public ITerminalNode VARRAY() { return GetToken(PlSqlParser.VARRAY, 0); }
		public ITerminalNode VARYING() { return GetToken(PlSqlParser.VARYING, 0); }
		public ITerminalNode VERSION() { return GetToken(PlSqlParser.VERSION, 0); }
		public ITerminalNode VERSIONS() { return GetToken(PlSqlParser.VERSIONS, 0); }
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ITerminalNode WARNING() { return GetToken(PlSqlParser.WARNING, 0); }
		public ITerminalNode WELLFORMED() { return GetToken(PlSqlParser.WELLFORMED, 0); }
		public ITerminalNode WHENEVER() { return GetToken(PlSqlParser.WHENEVER, 0); }
		public ITerminalNode WHILE() { return GetToken(PlSqlParser.WHILE, 0); }
		public ITerminalNode WITHIN() { return GetToken(PlSqlParser.WITHIN, 0); }
		public ITerminalNode WORK() { return GetToken(PlSqlParser.WORK, 0); }
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public ITerminalNode XML() { return GetToken(PlSqlParser.XML, 0); }
		public ITerminalNode XMLAGG() { return GetToken(PlSqlParser.XMLAGG, 0); }
		public ITerminalNode XMLATTRIBUTES() { return GetToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public ITerminalNode XMLCAST() { return GetToken(PlSqlParser.XMLCAST, 0); }
		public ITerminalNode XMLCOLATTVAL() { return GetToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public ITerminalNode XMLELEMENT() { return GetToken(PlSqlParser.XMLELEMENT, 0); }
		public ITerminalNode XMLEXISTS() { return GetToken(PlSqlParser.XMLEXISTS, 0); }
		public ITerminalNode XMLFOREST() { return GetToken(PlSqlParser.XMLFOREST, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(PlSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode XMLPARSE() { return GetToken(PlSqlParser.XMLPARSE, 0); }
		public ITerminalNode XMLPI() { return GetToken(PlSqlParser.XMLPI, 0); }
		public ITerminalNode XMLQUERY() { return GetToken(PlSqlParser.XMLQUERY, 0); }
		public ITerminalNode XMLROOT() { return GetToken(PlSqlParser.XMLROOT, 0); }
		public ITerminalNode XMLSERIALIZE() { return GetToken(PlSqlParser.XMLSERIALIZE, 0); }
		public ITerminalNode XMLTABLE() { return GetToken(PlSqlParser.XMLTABLE, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode YES() { return GetToken(PlSqlParser.YES, 0); }
		public ITerminalNode YMINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ITerminalNode PREDICTION() { return GetToken(PlSqlParser.PREDICTION, 0); }
		public ITerminalNode PREDICTION_BOUNDS() { return GetToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public ITerminalNode PREDICTION_COST() { return GetToken(PlSqlParser.PREDICTION_COST, 0); }
		public ITerminalNode PREDICTION_DETAILS() { return GetToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public ITerminalNode PREDICTION_PROBABILITY() { return GetToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public ITerminalNode PREDICTION_SET() { return GetToken(PlSqlParser.PREDICTION_SET, 0); }
		public ITerminalNode CUME_DIST() { return GetToken(PlSqlParser.CUME_DIST, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(PlSqlParser.DENSE_RANK, 0); }
		public ITerminalNode LISTAGG() { return GetToken(PlSqlParser.LISTAGG, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(PlSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode RANK() { return GetToken(PlSqlParser.RANK, 0); }
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode CORR() { return GetToken(PlSqlParser.CORR, 0); }
		public ITerminalNode LAG() { return GetToken(PlSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(PlSqlParser.LEAD, 0); }
		public ITerminalNode MAX() { return GetToken(PlSqlParser.MAX, 0); }
		public ITerminalNode MEDIAN() { return GetToken(PlSqlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(PlSqlParser.MIN, 0); }
		public ITerminalNode NTILE() { return GetToken(PlSqlParser.NTILE, 0); }
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(PlSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public ITerminalNode VARIANCE() { return GetToken(PlSqlParser.VARIANCE, 0); }
		public ITerminalNode REGR_() { return GetToken(PlSqlParser.REGR_, 0); }
		public ITerminalNode STDDEV() { return GetToken(PlSqlParser.STDDEV, 0); }
		public ITerminalNode VAR_() { return GetToken(PlSqlParser.VAR_, 0); }
		public ITerminalNode COVAR_() { return GetToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regular_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegular_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regular_idContext regular_id() {
		Regular_idContext _localctx = new Regular_idContext(Context, State);
		EnterRule(_localctx, 956, RULE_regular_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7040;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELETE - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DIMENSION - 128)) | (1L << (DISABLE - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (EACH - 128)) | (1L << (ELEMENT - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)) | (1L << (INDICES - 194)) | (1L << (INFINITE - 194)) | (1L << (INLINE - 194)) | (1L << (INNER - 194)) | (1L << (INOUT - 194)) | (1L << (INSTANTIABLE - 194)) | (1L << (INSTEAD - 194)) | (1L << (INTEGER - 194)) | (1L << (INTERVAL - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)) | (1L << (MAIN - 258)) | (1L << (MAP - 258)) | (1L << (MATCHED - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MEASURES - 258)) | (1L << (MEMBER - 258)) | (1L << (MERGE - 258)) | (1L << (MINIMUM - 258)) | (1L << (MINUTE - 258)) | (1L << (MINVALUE - 258)) | (1L << (MLSLABEL - 258)) | (1L << (MODEL - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (MODIFY - 322)) | (1L << (MONTH - 322)) | (1L << (MULTISET - 322)) | (1L << (NAME - 322)) | (1L << (NAN - 322)) | (1L << (NATURAL - 322)) | (1L << (NATURALN - 322)) | (1L << (NAV - 322)) | (1L << (NCHAR_CS - 322)) | (1L << (NCHAR - 322)) | (1L << (NCLOB - 322)) | (1L << (NESTED - 322)) | (1L << (NEW - 322)) | (1L << (NOAUDIT - 322)) | (1L << (NOCOPY - 322)) | (1L << (NOCYCLE - 322)) | (1L << (NOENTITYESCAPING - 322)) | (1L << (NONE - 322)) | (1L << (NO - 322)) | (1L << (NOSCHEMACHECK - 322)) | (1L << (NULLS - 322)) | (1L << (NUMBER - 322)) | (1L << (NUMERIC - 322)) | (1L << (NVARCHAR2 - 322)) | (1L << (OBJECT - 322)) | (1L << (OFF - 322)) | (1L << (OID - 322)) | (1L << (OLD - 322)) | (1L << (ONLY - 322)) | (1L << (OPEN - 322)) | (1L << (OPERATOR - 322)) | (1L << (ORADATA - 322)) | (1L << (ORDINALITY - 322)) | (1L << (OSERROR - 322)) | (1L << (OUTER - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (OUT - 386)) | (1L << (OVER - 386)) | (1L << (OVERRIDING - 386)) | (1L << (PACKAGE - 386)) | (1L << (PARALLEL_ENABLE - 386)) | (1L << (PARAMETERS - 386)) | (1L << (PARENT - 386)) | (1L << (PARTITION - 386)) | (1L << (PASSING - 386)) | (1L << (PATH - 386)) | (1L << (PIPELINED - 386)) | (1L << (PLAN - 386)) | (1L << (PLS_INTEGER - 386)) | (1L << (POSITIVEN - 386)) | (1L << (POSITIVE - 386)) | (1L << (PRAGMA - 386)) | (1L << (PRECEDING - 386)) | (1L << (PRECISION - 386)) | (1L << (PRESENT - 386)) | (1L << (PROGRAM - 386)) | (1L << (RAISE - 386)) | (1L << (RANGE - 386)) | (1L << (RAW - 386)) | (1L << (READ - 386)) | (1L << (REAL - 386)) | (1L << (RECORD - 386)) | (1L << (REFERENCE - 386)) | (1L << (REFERENCING - 386)) | (1L << (REF - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (REJECT - 450)) | (1L << (RELIES_ON - 450)) | (1L << (RENAME - 450)) | (1L << (REPLACE - 450)) | (1L << (RESPECT - 450)) | (1L << (RESTRICT_REFERENCES - 450)) | (1L << (RESULT_CACHE - 450)) | (1L << (RESULT - 450)) | (1L << (RETURNING - 450)) | (1L << (RETURN - 450)) | (1L << (REUSE - 450)) | (1L << (REVERSE - 450)) | (1L << (REVOKE - 450)) | (1L << (RIGHT - 450)) | (1L << (ROLLBACK - 450)) | (1L << (ROLLUP - 450)) | (1L << (ROWID - 450)) | (1L << (ROW - 450)) | (1L << (ROWS - 450)) | (1L << (RULES - 450)) | (1L << (SAMPLE - 450)) | (1L << (SAVEPOINT - 450)) | (1L << (SAVE - 450)) | (1L << (SCHEMACHECK - 450)) | (1L << (SCHEMA - 450)) | (1L << (SCN - 450)) | (1L << (SECOND - 450)) | (1L << (SEED - 450)) | (1L << (SEGMENT - 450)) | (1L << (SELF - 450)) | (1L << (SEQUENTIAL - 450)) | (1L << (SERIALIZABLE - 450)) | (1L << (SERIALLY_REUSABLE - 450)) | (1L << (SERVERERROR - 450)) | (1L << (SESSIONTIMEZONE - 450)) | (1L << (SET - 450)) | (1L << (SETS - 450)) | (1L << (SETTINGS - 450)) | (1L << (SHOW - 450)) | (1L << (SHUTDOWN - 450)) | (1L << (SIBLINGS - 450)) | (1L << (SIGNTYPE - 450)) | (1L << (SIMPLE_INTEGER - 450)) | (1L << (SINGLE - 450)) | (1L << (SKIP_ - 450)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SMALLINT - 515)) | (1L << (SNAPSHOT - 515)) | (1L << (SOME - 515)) | (1L << (SPECIFICATION - 515)) | (1L << (SQLDATA - 515)) | (1L << (SQLERROR - 515)) | (1L << (STANDALONE - 515)) | (1L << (STARTUP - 515)) | (1L << (STATEMENT_ID - 515)) | (1L << (STATEMENT - 515)) | (1L << (STATIC - 515)) | (1L << (STATISTICS - 515)) | (1L << (STORE - 515)) | (1L << (STRING - 515)) | (1L << (SUBMULTISET - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBSTITUTABLE - 515)) | (1L << (SUBTYPE - 515)) | (1L << (SUCCESS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SYSDATE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP - 515)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 515)) | (1L << (TIMESTAMP_UNCONSTRAINED - 515)) | (1L << (TIME - 515)) | (1L << (TIMEZONE_ABBR - 515)) | (1L << (TIMEZONE_HOUR - 515)) | (1L << (TIMEZONE_MINUTE - 515)) | (1L << (TIMEZONE_REGION - 515)) | (1L << (TRAILING - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRANSLATE - 515)) | (1L << (TREAT - 515)) | (1L << (TRIGGER - 515)) | (1L << (TRUNCATE - 515)) | (1L << (TYPE - 515)) | (1L << (UNBOUNDED - 515)) | (1L << (UNDER - 515)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (UNLIMITED - 583)) | (1L << (UNTIL - 583)) | (1L << (UPDATED - 583)) | (1L << (UPSERT - 583)) | (1L << (UROWID - 583)) | (1L << (USERS - 583)) | (1L << (USER - 583)) | (1L << (USE - 583)) | (1L << (VALIDATE - 583)) | (1L << (VALUE - 583)) | (1L << (VARCHAR2 - 583)) | (1L << (VARCHAR - 583)) | (1L << (VARIABLE - 583)) | (1L << (VARRAY - 583)) | (1L << (VARYING - 583)) | (1L << (VERSIONS - 583)) | (1L << (VERSION - 583)) | (1L << (WAIT - 583)) | (1L << (WARNING - 583)) | (1L << (WELLFORMED - 583)) | (1L << (WHENEVER - 583)) | (1L << (WHILE - 583)) | (1L << (WITHIN - 583)) | (1L << (WORK - 583)) | (1L << (WRITE - 583)) | (1L << (XMLAGG - 583)) | (1L << (XMLATTRIBUTES - 583)) | (1L << (XMLCAST - 583)) | (1L << (XMLCOLATTVAL - 583)) | (1L << (XMLELEMENT - 583)) | (1L << (XMLEXISTS - 583)) | (1L << (XMLFOREST - 583)) | (1L << (XMLNAMESPACES - 583)) | (1L << (XMLPARSE - 583)) | (1L << (XMLPI - 583)) | (1L << (XMLQUERY - 583)) | (1L << (XMLROOT - 583)) | (1L << (XMLSERIALIZE - 583)) | (1L << (XMLTABLE - 583)) | (1L << (XML - 583)) | (1L << (YEAR - 583)) | (1L << (YES - 583)) | (1L << (YMINTERVAL_UNCONSTRAINED - 583)) | (1L << (ZONE - 583)) | (1L << (PREDICTION - 583)) | (1L << (PREDICTION_BOUNDS - 583)) | (1L << (PREDICTION_COST - 583)) | (1L << (PREDICTION_DETAILS - 583)) | (1L << (PREDICTION_PROBABILITY - 583)) | (1L << (PREDICTION_SET - 583)) | (1L << (CUME_DIST - 583)) | (1L << (DENSE_RANK - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (LISTAGG - 647)) | (1L << (PERCENT_RANK - 647)) | (1L << (PERCENTILE_CONT - 647)) | (1L << (PERCENTILE_DISC - 647)) | (1L << (RANK - 647)) | (1L << (AVG - 647)) | (1L << (CORR - 647)) | (1L << (COVAR_ - 647)) | (1L << (LAG - 647)) | (1L << (LEAD - 647)) | (1L << (MAX - 647)) | (1L << (MEDIAN - 647)) | (1L << (MIN - 647)) | (1L << (NTILE - 647)) | (1L << (RATIO_TO_REPORT - 647)) | (1L << (REGR_ - 647)) | (1L << (ROW_NUMBER - 647)) | (1L << (SUBSTR - 647)) | (1L << (TRIM - 647)) | (1L << (SUM - 647)) | (1L << (STDDEV - 647)) | (1L << (VAR_ - 647)) | (1L << (VARIANCE - 647)))) != 0) || _la==REGULAR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_function_nameContext : ParserRuleContext {
		public ITerminalNode CHR() { return GetToken(PlSqlParser.CHR, 0); }
		public ITerminalNode DECODE() { return GetToken(PlSqlParser.DECODE, 0); }
		public ITerminalNode SUBSTR() { return GetToken(PlSqlParser.SUBSTR, 0); }
		public ITerminalNode TO_CHAR() { return GetToken(PlSqlParser.TO_CHAR, 0); }
		public ITerminalNode TRIM() { return GetToken(PlSqlParser.TRIM, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_function_nameContext string_function_name() {
		String_function_nameContext _localctx = new String_function_nameContext(Context, State);
		EnterRule(_localctx, 958, RULE_string_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7042;
			_la = TokenStream.LA(1);
			if ( !(_la==CHR || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (DECODE - 655)) | (1L << (SUBSTR - 655)) | (1L << (TO_CHAR - 655)) | (1L << (TRIM - 655)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_function_nameContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public ITerminalNode NVL() { return GetToken(PlSqlParser.NVL, 0); }
		public ITerminalNode ROUND() { return GetToken(PlSqlParser.ROUND, 0); }
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_function_nameContext numeric_function_name() {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(Context, State);
		EnterRule(_localctx, 960, RULE_numeric_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7044;
			_la = TokenStream.LA(1);
			if ( !(_la==COUNT || ((((_la - 652)) & ~0x3f) == 0 && ((1L << (_la - 652)) & ((1L << (AVG - 652)) | (1L << (NVL - 652)) | (1L << (ROUND - 652)) | (1L << (SUM - 652)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Numeric_negativeContext numeric_negative() {
			return GetRuleContext<Numeric_negativeContext>(0);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 962, RULE_integer);
		try {
			State = 7048;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7046; numeric();
				}
				break;
			case MINUS_SIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7047; numeric_negative();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode APPROXIMATE_NUM_LIT() { return GetToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 964, RULE_numeric);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7050;
			_la = TokenStream.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_negativeContext : ParserRuleContext {
		public ITerminalNode MINUS_SIGN() { return GetToken(PlSqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_negative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_negative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_negativeContext numeric_negative() {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(Context, State);
		EnterRule(_localctx, 966, RULE_numeric_negative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7052; Match(MINUS_SIGN);
			State = 7053; numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public ITerminalNode NATIONAL_CHAR_STRING_LIT() { return GetToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 968, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7055;
			_la = TokenStream.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 349: return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		case 351: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 356: return concatenation_sempred((ConcatenationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool concatenation_sempred(ConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x2D1', '\x1B94', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x4', '\x1BD', '\t', '\x1BD', 
		'\x4', '\x1BE', '\t', '\x1BE', '\x4', '\x1BF', '\t', '\x1BF', '\x4', '\x1C0', 
		'\t', '\x1C0', '\x4', '\x1C1', '\t', '\x1C1', '\x4', '\x1C2', '\t', '\x1C2', 
		'\x4', '\x1C3', '\t', '\x1C3', '\x4', '\x1C4', '\t', '\x1C4', '\x4', '\x1C5', 
		'\t', '\x1C5', '\x4', '\x1C6', '\t', '\x1C6', '\x4', '\x1C7', '\t', '\x1C7', 
		'\x4', '\x1C8', '\t', '\x1C8', '\x4', '\x1C9', '\t', '\x1C9', '\x4', '\x1CA', 
		'\t', '\x1CA', '\x4', '\x1CB', '\t', '\x1CB', '\x4', '\x1CC', '\t', '\x1CC', 
		'\x4', '\x1CD', '\t', '\x1CD', '\x4', '\x1CE', '\t', '\x1CE', '\x4', '\x1CF', 
		'\t', '\x1CF', '\x4', '\x1D0', '\t', '\x1D0', '\x4', '\x1D1', '\t', '\x1D1', 
		'\x4', '\x1D2', '\t', '\x1D2', '\x4', '\x1D3', '\t', '\x1D3', '\x4', '\x1D4', 
		'\t', '\x1D4', '\x4', '\x1D5', '\t', '\x1D5', '\x4', '\x1D6', '\t', '\x1D6', 
		'\x4', '\x1D7', '\t', '\x1D7', '\x4', '\x1D8', '\t', '\x1D8', '\x4', '\x1D9', 
		'\t', '\x1D9', '\x4', '\x1DA', '\t', '\x1DA', '\x4', '\x1DB', '\t', '\x1DB', 
		'\x4', '\x1DC', '\t', '\x1DC', '\x4', '\x1DD', '\t', '\x1DD', '\x4', '\x1DE', 
		'\t', '\x1DE', '\x4', '\x1DF', '\t', '\x1DF', '\x4', '\x1E0', '\t', '\x1E0', 
		'\x4', '\x1E1', '\t', '\x1E1', '\x4', '\x1E2', '\t', '\x1E2', '\x4', '\x1E3', 
		'\t', '\x1E3', '\x4', '\x1E4', '\t', '\x1E4', '\x4', '\x1E5', '\t', '\x1E5', 
		'\x4', '\x1E6', '\t', '\x1E6', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x3CF', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x3D2', '\n', '\x2', 
		'\a', '\x2', '\x3D4', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x3D7', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x3ED', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x3F9', '\n', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x3FC', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x3FF', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x403', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x40A', '\n', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x410', '\n', 
		'\x6', '\x3', '\x6', '\x6', '\x6', '\x413', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', '\x414', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x419', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\x421', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x424', '\v', '\x6', '\x3', '\x6', '\x5', '\x6', '\x427', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x42B', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x42E', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x432', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x437', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x43D', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '\x446', '\n', '\b', '\x3', '\b', '\x5', '\b', 
		'\x449', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x44F', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x456', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x459', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x465', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x46A', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x474', '\n', '\r', '\x3', '\r', '\x5', '\r', 
		'\x477', '\n', '\r', '\x3', '\r', '\a', '\r', '\x47A', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\x47D', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x481', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x488', '\n', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x48E', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x492', '\n', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x496', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x499', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x49D', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x4A4', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x4AB', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\x4B0', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x4B3', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x4B7', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x4BB', '\n', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x4C7', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x4CF', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x4D2', '\v', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x4D6', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x4E0', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\x4E3', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x4E7', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x4EC', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\x4EF', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x4FC', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x508', '\n', '\x15', '\x3', '\x15', '\a', '\x15', '\x50B', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x50E', '\v', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x512', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x51C', '\n', '\x16', '\f', 
		'\x16', '\xE', '\x16', '\x51F', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x523', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x52B', 
		'\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x52E', '\v', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x531', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x535', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x538', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x53C', '\n', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x541', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', 
		'\x54B', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x54E', '\v', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x552', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x556', '\n', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x559', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x55E', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x565', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\a', '\x18', '\x56D', '\n', '\x18', '\f', '\x18', 
		'\xE', '\x18', '\x570', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x574', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x577', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x57B', '\n', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x57E', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x583', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x595', '\n', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x598', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x59B', '\v', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x59F', '\n', '\x1A', '\x5', 
		'\x1A', '\x5A1', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x5A8', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x5AF', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x5B2', 
		'\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x5B5', '\n', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x5B8', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x5C1', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x5C4', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x5CF', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x5D3', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x5D6', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x5DF', '\n', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x5E5', '\n', '!', 
		'\f', '!', '\xE', '!', '\x5E8', '\v', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x5', '!', '\x5EF', '\n', '!', '\x3', '!', 
		'\x5', '!', '\x5F2', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x5F9', '\n', '\"', '\x3', '#', 
		'\x3', '#', '\x5', '#', '\x5FD', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x602', '\n', '$', '\x3', '$', '\x6', '$', '\x605', 
		'\n', '$', '\r', '$', '\xE', '$', '\x606', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'%', '\x5', '%', '\x630', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\x64C', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x651', '\n', '\'', '\f', '\'', '\xE', '\'', '\x654', '\v', '\'', '\x3', 
		'\'', '\x3', '\'', '\x5', '\'', '\x658', '\n', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x65F', '\n', '(', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', '*', 
		'\x3', '*', '\x6', '*', '\x668', '\n', '*', '\r', '*', '\xE', '*', '\x669', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x5', ',', '\x672', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x676', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x682', '\n', '-', '\x3', '-', '\x5', '-', '\x685', '\n', '-', '\x3', 
		'-', '\x3', '-', '\x3', '.', '\x3', '.', '\x5', '.', '\x68B', '\n', '.', 
		'\x3', '.', '\x5', '.', '\x68E', '\n', '.', '\x3', '.', '\a', '.', '\x691', 
		'\n', '.', '\f', '.', '\xE', '.', '\x694', '\v', '.', '\x3', '.', '\x3', 
		'.', '\x5', '.', '\x698', '\n', '.', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x69C', '\n', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\a', '/', '\x6A4', '\n', '/', '\f', '/', '\xE', '/', 
		'\x6A7', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\a', '\x30', '\x6AE', '\n', '\x30', '\f', '\x30', '\xE', 
		'\x30', '\x6B1', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x6B6', '\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\a', 
		'\x32', '\x6BF', '\n', '\x32', '\f', '\x32', '\xE', '\x32', '\x6C2', '\v', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x6C6', '\n', '\x32', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x6CA', '\n', '\x33', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x6D2', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x6DA', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x6DF', '\n', '\x35', '\x3', '\x35', '\x5', '\x35', '\x6E2', 
		'\n', '\x35', '\x5', '\x35', '\x6E4', '\n', '\x35', '\x3', '\x36', '\x5', 
		'\x36', '\x6E7', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', 
		'\x6F0', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', 
		'\x37', '\x6F5', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x6FC', '\n', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x6FF', '\n', '\x38', '\x3', '\x39', '\x5', '\x39', 
		'\x702', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x706', 
		'\n', '\x39', '\x3', '\x39', '\x5', '\x39', '\x709', '\n', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\a', '\x39', '\x70F', 
		'\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x712', '\v', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x716', '\n', '\x39', '\x3', '\x39', 
		'\a', '\x39', '\x719', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x71C', 
		'\v', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', 
		'\x722', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x72C', '\n', '<', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x6', '>', '\x73A', '\n', '>', '\r', '>', '\xE', '>', '\x73B', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x5', '?', '\x742', '\n', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x74C', '\n', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\a', '\x42', '\x754', '\n', '\x42', '\f', '\x42', '\xE', 
		'\x42', '\x757', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x5', '\x42', '\x75D', '\n', '\x42', '\x3', '\x42', '\x5', 
		'\x42', '\x760', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x5', '\x42', '\x765', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', '\x43', '\x76D', 
		'\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x770', '\v', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x774', '\n', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x77B', '\n', '\x43', '\x3', '\x43', '\x5', '\x43', '\x77E', '\n', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x783', '\n', 
		'\x43', '\x3', '\x44', '\x5', '\x44', '\x786', '\n', '\x44', '\x3', '\x44', 
		'\x5', '\x44', '\x789', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\a', '\x44', '\x798', '\n', '\x44', '\f', '\x44', '\xE', '\x44', 
		'\x79B', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x79F', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x7A8', '\n', 
		'\x44', '\x3', '\x44', '\x5', '\x44', '\x7AB', '\n', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x7B0', '\n', '\x44', '\x3', 
		'\x45', '\x5', '\x45', '\x7B3', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x7BA', '\n', 
		'\x46', '\x3', '\x46', '\x5', '\x46', '\x7BD', '\n', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x5', 'H', '\x7C4', '\n', 
		'H', '\x3', 'H', '\x6', 'H', '\x7C7', '\n', 'H', '\r', 'H', '\xE', 'H', 
		'\x7C8', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x7CD', '\n', 'H', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x7D2', '\n', 'I', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x5', 'J', '\x7D7', '\n', 'J', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x7DF', 
		'\n', 'K', '\f', 'K', '\xE', 'K', '\x7E2', '\v', 'K', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x5', 'K', '\x7E7', '\n', 'K', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\a', 'L', '\x7EF', '\n', 
		'L', '\f', 'L', '\xE', 'L', '\x7F2', '\v', 'L', '\x3', 'L', '\x3', 'L', 
		'\x5', 'L', '\x7F6', '\n', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x5', 'L', '\x7FD', '\n', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x5', 'L', '\x803', '\n', 'L', '\x3', 'L', '\x3', 
		'L', '\x5', 'L', '\x807', '\n', 'L', '\x3', 'M', '\x5', 'M', '\x80A', 
		'\n', 'M', '\x3', 'M', '\x5', 'M', '\x80D', '\n', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\a', 
		'M', '\x81C', '\n', 'M', '\f', 'M', '\xE', 'M', '\x81F', '\v', 'M', '\x3', 
		'M', '\x3', 'M', '\x5', 'M', '\x823', '\n', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x82B', '\n', 
		'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\a', 'O', '\x837', 
		'\n', 'O', '\f', 'O', '\xE', 'O', '\x83A', '\v', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x840', '\n', 'P', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x6', 'S', 
		'\x84E', '\n', 'S', '\r', 'S', '\xE', 'S', '\x84F', '\x3', 'S', '\x3', 
		'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\a', 
		'T', '\x859', '\n', 'T', '\f', 'T', '\xE', 'T', '\x85C', '\v', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x870', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'W', '\x3', 'W', '\x5', 'W', '\x878', '\n', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x5', 
		'W', '\x881', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x885', 
		'\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x6', 'Y', 
		'\x89D', '\n', 'Y', '\r', 'Y', '\xE', 'Y', '\x89E', '\x3', 'Y', '\x3', 
		'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x6', 'Z', '\x8B1', '\n', 'Z', '\r', 'Z', 
		'\xE', 'Z', '\x8B2', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x8B8', 
		'\n', 'Z', '\x3', 'Z', '\x6', 'Z', '\x8BB', '\n', 'Z', '\r', 'Z', '\xE', 
		'Z', '\x8BC', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x8C2', 
		'\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x8C7', '\n', 
		'[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', '\x3', 
		']', '\x3', ']', '\x3', ']', '\x5', ']', '\x8D1', '\n', ']', '\x3', '^', 
		'\x3', '^', '\x3', '^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x5', '_', '\x8DA', '\n', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x5', '\x61', '\x8E3', '\n', 
		'\x61', '\x3', '\x61', '\x6', '\x61', '\x8E6', '\n', '\x61', '\r', '\x61', 
		'\xE', '\x61', '\x8E7', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', 
		'\x61', '\x8ED', '\n', '\x61', '\x3', '\x61', '\x6', '\x61', '\x8F0', 
		'\n', '\x61', '\r', '\x61', '\xE', '\x61', '\x8F1', '\a', '\x61', '\x8F4', 
		'\n', '\x61', '\f', '\x61', '\xE', '\x61', '\x8F7', '\v', '\x61', '\x5', 
		'\x61', '\x8F9', '\n', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x5', '\x62', '\x8FF', '\n', '\x62', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x5', '\x66', '\x90D', '\n', '\x66', '\x3', '\x66', '\x6', '\x66', 
		'\x910', '\n', '\x66', '\r', '\x66', '\xE', '\x66', '\x911', '\x5', '\x66', 
		'\x914', '\n', '\x66', '\x3', '\x66', '\x5', '\x66', '\x917', '\n', '\x66', 
		'\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x5', 'g', '\x91F', '\n', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x5', 'g', '\x92C', '\n', 'g', '\x5', 'g', '\x92E', 
		'\n', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\x932', '\n', 'g', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x5', 
		'g', '\x93A', '\n', 'g', '\x5', 'g', '\x93C', '\n', 'g', '\x5', 'g', '\x93E', 
		'\n', 'g', '\x5', 'g', '\x940', '\n', 'g', '\x3', 'h', '\x3', 'h', '\x5', 
		'h', '\x944', '\n', 'h', '\x3', 'h', '\x6', 'h', '\x947', '\n', 'h', '\r', 
		'h', '\xE', 'h', '\x948', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', 
		'\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\x953', '\n', 
		'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x5', 'k', '\x95E', '\n', 'k', 
		'\x5', 'k', '\x960', '\n', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\x96A', 
		'\n', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x5', 'n', '\x96F', '\n', 
		'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\x973', '\n', 'n', '\x3', 'n', 
		'\x3', 'n', '\x5', 'n', '\x977', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x6', 
		'n', '\x97B', '\n', 'n', '\r', 'n', '\xE', 'n', '\x97C', '\x3', 'o', '\x5', 
		'o', '\x980', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\x984', 
		'\n', 'o', '\x6', 'o', '\x986', '\n', 'o', '\r', 'o', '\xE', 'o', '\x987', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', 
		'\x98F', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x6', 'o', '\x994', 
		'\n', 'o', '\r', 'o', '\xE', 'o', '\x995', '\x3', 'o', '\x3', 'o', '\x3', 
		'o', '\x5', 'o', '\x99B', '\n', 'o', '\x3', 'p', '\x3', 'p', '\x5', 'p', 
		'\x99F', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 
		'p', '\x9A5', '\n', 'p', '\x5', 'p', '\x9A7', '\n', 'p', '\x6', 'p', '\x9A9', 
		'\n', 'p', '\r', 'p', '\xE', 'p', '\x9AA', '\x3', 'p', '\x3', 'p', '\x5', 
		'p', '\x9AF', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x9B3', 
		'\n', 'p', '\x3', 'p', '\x3', 'p', '\x6', 'p', '\x9B7', '\n', 'p', '\r', 
		'p', '\xE', 'p', '\x9B8', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', 
		'\x9BE', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x9C3', 
		'\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x9C8', '\n', 
		'p', '\x3', 'p', '\x5', 'p', '\x9CB', '\n', 'p', '\x3', 'p', '\x3', 'p', 
		'\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'r', '\x3', 'r', 
		'\x3', 'r', '\x5', 'r', '\x9D6', '\n', 'r', '\x3', 'r', '\x5', 'r', '\x9D9', 
		'\n', 'r', '\x3', 'r', '\x5', 'r', '\x9DC', '\n', 'r', '\x3', 'r', '\x3', 
		'r', '\x3', 'r', '\x5', 'r', '\x9E1', '\n', 'r', '\x3', 'r', '\x5', 'r', 
		'\x9E4', '\n', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\x9E9', 
		'\n', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\x9EE', '\n', 
		'r', '\x3', 's', '\x3', 's', '\x5', 's', '\x9F2', '\n', 's', '\x3', 't', 
		'\x3', 't', '\x5', 't', '\x9F6', '\n', 't', '\x3', 't', '\x3', 't', '\x5', 
		't', '\x9FA', '\n', 't', '\x3', 't', '\a', 't', '\x9FD', '\n', 't', '\f', 
		't', '\xE', 't', '\xA00', '\v', 't', '\x3', 't', '\x5', 't', '\xA03', 
		'\n', 't', '\x6', 't', '\xA05', '\n', 't', '\r', 't', '\xE', 't', '\xA06', 
		'\x3', 't', '\x3', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\xA13', '\n', 
		'u', '\x3', 'u', '\x6', 'u', '\xA16', '\n', 'u', '\r', 'u', '\xE', 'u', 
		'\xA17', '\x3', 'u', '\x5', 'u', '\xA1B', '\n', 'u', '\x3', 'u', '\x3', 
		'u', '\x5', 'u', '\xA1F', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', 
		'\xA23', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\xA28', 
		'\n', 'u', '\x6', 'u', '\xA2A', '\n', 'u', '\r', 'u', '\xE', 'u', '\xA2B', 
		'\x3', 'u', '\x3', 'u', '\a', 'u', '\xA30', '\n', 'u', '\f', 'u', '\xE', 
		'u', '\xA33', '\v', 'u', '\x3', 'v', '\x3', 'v', '\x5', 'v', '\xA37', 
		'\n', 'v', '\x3', 'v', '\x5', 'v', '\xA3A', '\n', 'v', '\x3', 'v', '\x3', 
		'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', '\x5', 'v', '\xA42', 
		'\n', 'v', '\x3', 'v', '\x5', 'v', '\xA45', '\n', 'v', '\x3', 'w', '\x3', 
		'w', '\x5', 'w', '\xA49', '\n', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', 
		'\x3', 'w', '\x5', 'w', '\xA4F', '\n', 'w', '\x6', 'w', '\xA51', '\n', 
		'w', '\r', 'w', '\xE', 'w', '\xA52', '\x3', 'w', '\x5', 'w', '\xA56', 
		'\n', 'w', '\x3', 'x', '\x5', 'x', '\xA59', '\n', 'x', '\x3', 'x', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x6', 
		'x', '\xA62', '\n', 'x', '\r', 'x', '\xE', 'x', '\xA63', '\x3', 'y', '\x3', 
		'y', '\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x3', '|', '\x3', 
		'|', '\x3', '|', '\x3', '}', '\x3', '}', '\x5', '}', '\xA71', '\n', '}', 
		'\x3', '~', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x3', '\x7F', '\x3', 
		'\x7F', '\x5', '\x7F', '\xA79', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\xA84', '\n', '\x7F', '\x3', 
		'\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x6', '\x7F', '\xA89', '\n', '\x7F', 
		'\r', '\x7F', '\xE', '\x7F', '\xA8A', '\x5', '\x7F', '\xA8D', '\n', '\x7F', 
		'\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', 
		'\xA93', '\n', '\x80', '\x3', '\x81', '\x5', '\x81', '\xA96', '\n', '\x81', 
		'\x3', '\x81', '\x5', '\x81', '\xA99', '\n', '\x81', '\x3', '\x81', '\x5', 
		'\x81', '\xA9C', '\n', '\x81', '\x3', '\x81', '\x5', '\x81', '\xA9F', 
		'\n', '\x81', '\x5', '\x81', '\xAA1', '\n', '\x81', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\xAA8', 
		'\n', '\x82', '\x5', '\x82', '\xAAA', '\n', '\x82', '\x3', '\x82', '\x3', 
		'\x82', '\x5', '\x82', '\xAAE', '\n', '\x82', '\x3', '\x83', '\x3', '\x83', 
		'\x3', '\x83', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\xABA', '\n', 
		'\x84', '\x5', '\x84', '\xABC', '\n', '\x84', '\x3', '\x85', '\x3', '\x85', 
		'\x5', '\x85', '\xAC0', '\n', '\x85', '\x3', '\x85', '\x3', '\x85', '\x5', 
		'\x85', '\xAC4', '\n', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\xACB', '\n', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x5', '\x86', '\xAD3', '\n', '\x86', '\x5', '\x86', '\xAD5', 
		'\n', '\x86', '\x3', '\x86', '\x5', '\x86', '\xAD8', '\n', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\xADD', '\n', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\xAE1', '\n', '\x86', '\x3', 
		'\x87', '\x3', '\x87', '\x5', '\x87', '\xAE5', '\n', '\x87', '\x3', '\x88', 
		'\x3', '\x88', '\x5', '\x88', '\xAE9', '\n', '\x88', '\x3', '\x88', '\x5', 
		'\x88', '\xAEC', '\n', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x3', '\x89', '\x5', '\x89', '\xAF2', '\n', '\x89', '\x3', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8A', '\x5', '\x8A', '\xAFB', '\n', '\x8A', '\x3', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x5', '\x8A', '\xB02', '\n', 
		'\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x5', 
		'\x8A', '\xB08', '\n', '\x8A', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\x3', '\x8B', '\x5', '\x8B', '\xB0E', '\n', '\x8B', '\x3', '\x8B', '\x5', 
		'\x8B', '\xB11', '\n', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xB14', 
		'\n', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', 
		'\xB19', '\n', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xB1C', '\n', '\x8B', 
		'\x3', '\x8B', '\x5', '\x8B', '\xB1F', '\n', '\x8B', '\a', '\x8B', '\xB21', 
		'\n', '\x8B', '\f', '\x8B', '\xE', '\x8B', '\xB24', '\v', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xB28', '\n', '\x8B', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xB32', '\n', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\a', '\x8D', '\xB3A', '\n', '\x8D', '\f', '\x8D', '\xE', '\x8D', 
		'\xB3D', '\v', '\x8D', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8F', '\x3', 
		'\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x5', '\x91', '\xB49', '\n', '\x91', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', 
		'\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xB53', '\n', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x5', '\x94', '\xB58', '\n', '\x94', 
		'\x3', '\x94', '\x3', '\x94', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', 
		'\xB5E', '\n', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x95', '\x3', '\x95', '\a', '\x95', '\xB6F', '\n', '\x95', '\f', '\x95', 
		'\xE', '\x95', '\xB72', '\v', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x98', '\x3', '\x98', '\x3', 
		'\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x5', 
		'\x98', '\xB80', '\n', '\x98', '\x5', '\x98', '\xB82', '\n', '\x98', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x5', '\x9B', '\xB8F', '\n', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\xB92', '\n', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\xB95', '\n', '\x9B', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', 
		'\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\xB9E', '\n', '\x9D', '\x3', 
		'\x9D', '\x5', '\x9D', '\xBA1', '\n', '\x9D', '\x3', '\x9D', '\x5', '\x9D', 
		'\xBA4', '\n', '\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xBAB', '\n', '\x9F', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x5', '\xA0', '\xBB1', '\n', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA1', '\x5', '\xA1', '\xBB6', 
		'\n', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x5', '\xA1', '\xBBA', '\n', 
		'\xA1', '\x3', '\xA1', '\x5', '\xA1', '\xBBD', '\n', '\xA1', '\x3', '\xA1', 
		'\x5', '\xA1', '\xBC0', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', 
		'\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xBC6', '\n', '\xA2', '\x3', '\xA2', 
		'\x6', '\xA2', '\xBC9', '\n', '\xA2', '\r', '\xA2', '\xE', '\xA2', '\xBCA', 
		'\x3', '\xA2', '\x5', '\xA2', '\xBCE', '\n', '\xA2', '\x3', '\xA2', '\x3', 
		'\xA2', '\x5', '\xA2', '\xBD2', '\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x5', '\xA2', '\xBD6', '\n', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xBD9', 
		'\n', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x5', '\xA3', '\xBE0', '\n', '\xA3', '\x3', '\xA3', '\x5', 
		'\xA3', '\xBE3', '\n', '\xA3', '\x5', '\xA3', '\xBE5', '\n', '\xA3', '\x3', 
		'\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x5', '\xA4', '\xBEA', '\n', '\xA4', 
		'\x3', '\xA5', '\x3', '\xA5', '\a', '\xA5', '\xBEE', '\n', '\xA5', '\f', 
		'\xA5', '\xE', '\xA5', '\xBF1', '\v', '\xA5', '\x3', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x5', '\xA6', '\xBF6', '\n', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xBFC', '\n', '\xA6', 
		'\x3', '\xA6', '\x6', '\xA6', '\xBFF', '\n', '\xA6', '\r', '\xA6', '\xE', 
		'\xA6', '\xC00', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', 
		'\xC06', '\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x5', '\xA6', '\xC0C', '\n', '\xA6', '\a', '\xA6', '\xC0E', '\n', 
		'\xA6', '\f', '\xA6', '\xE', '\xA6', '\xC11', '\v', '\xA6', '\x3', '\xA6', 
		'\x3', '\xA6', '\x5', '\xA6', '\xC15', '\n', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xC1B', '\n', '\xA6', 
		'\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xC20', '\n', 
		'\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xC23', '\n', '\xA6', '\x3', '\xA6', 
		'\x5', '\xA6', '\xC26', '\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xC2E', 
		'\n', '\xA6', '\x5', '\xA6', '\xC30', '\n', '\xA6', '\x5', '\xA6', '\xC32', 
		'\n', '\xA6', '\x3', '\xA6', '\x5', '\xA6', '\xC35', '\n', '\xA6', '\x3', 
		'\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\a', '\xA8', '\xC40', 
		'\n', '\xA8', '\f', '\xA8', '\xE', '\xA8', '\xC43', '\v', '\xA8', '\x3', 
		'\xA8', '\x3', '\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', 
		'\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x5', 
		'\xA9', '\xC59', '\n', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xA9', '\x3', '\xA9', '\x6', '\xA9', '\xC60', '\n', '\xA9', '\r', 
		'\xA9', '\xE', '\xA9', '\xC61', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC69', '\n', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC6D', '\n', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC72', '\n', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC77', '\n', '\xAA', 
		'\x3', '\xAA', '\x5', '\xAA', '\xC7A', '\n', '\xAA', '\x3', '\xAA', '\x5', 
		'\xAA', '\xC7D', '\n', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xC80', 
		'\n', '\xAA', '\x5', '\xAA', '\xC82', '\n', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x5', '\xAA', '\xC86', '\n', '\xAA', '\x3', '\xAA', '\x5', '\xAA', 
		'\xC89', '\n', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\xC8D', 
		'\n', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xCA0', '\n', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xCA9', '\n', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xCAE', '\n', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xCB3', 
		'\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x5', '\xAE', '\xCB9', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xCC0', '\n', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAE', '\x3', '\xAE', '\x5', '\xAE', '\xCC5', '\n', 
		'\xAE', '\x5', '\xAE', '\xCC7', '\n', '\xAE', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\xCD7', '\n', '\xB0', '\x3', 
		'\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', '\xCDC', '\n', '\xB1', 
		'\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x5', '\xB1', 
		'\xCE2', '\n', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB2', '\x3', '\xB2', '\x5', '\xB2', '\xCE9', '\n', '\xB2', '\x3', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', 
		'\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', 
		'\x3', '\xB6', '\x5', '\xB6', '\xCFC', '\n', '\xB6', '\x3', '\xB7', '\x3', 
		'\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', 
		'\xB7', '\x3', '\xB7', '\x5', '\xB7', '\xD06', '\n', '\xB7', '\x5', '\xB7', 
		'\xD08', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x5', '\xB8', '\xD0F', '\n', '\xB8', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\xD1A', '\n', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x6', 
		'\xBB', '\xD20', '\n', '\xBB', '\r', '\xBB', '\xE', '\xBB', '\xD21', '\x5', 
		'\xBB', '\xD24', '\n', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', 
		'\x5', '\xBE', '\xD33', '\n', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x5', 
		'\xC0', '\xD3C', '\n', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', 
		'\x5', '\xC0', '\xD41', '\n', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x5', 
		'\xC0', '\xD45', '\n', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\xD48', 
		'\n', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', 
		'\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', '\xD56', '\n', 
		'\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\a', 
		'\xC3', '\xD5C', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', '\xD5F', '\v', 
		'\xC3', '\x3', '\xC3', '\x5', '\xC3', '\xD62', '\n', '\xC3', '\x3', '\xC3', 
		'\x5', '\xC3', '\xD65', '\n', '\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC4', '\x3', '\xC5', '\x6', '\xC5', '\xD6B', '\n', '\xC5', '\r', '\xC5', 
		'\xE', '\xC5', '\xD6C', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x5', '\xC6', '\xD79', '\n', '\xC6', '\x3', '\xC7', 
		'\x3', '\xC7', '\x5', '\xC7', '\xD7D', '\n', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x5', '\xC7', '\xD82', '\n', '\xC7', '\x3', '\xC7', 
		'\x5', '\xC7', '\xD85', '\n', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\xD92', 
		'\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\xD96', '\n', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\xD9E', '\n', '\xC9', '\x3', '\xC9', 
		'\x6', '\xC9', '\xDA1', '\n', '\xC9', '\r', '\xC9', '\xE', '\xC9', '\xDA2', 
		'\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\xDA7', '\n', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\xDAB', '\n', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x5', '\xC9', '\xDAF', '\n', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\xDB5', '\n', '\xCA', 
		'\x3', '\xCA', '\x5', '\xCA', '\xDB8', '\n', '\xCA', '\x3', '\xCA', '\x5', 
		'\xCA', '\xDBB', '\n', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\xDD6', '\n', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x6', '\xCC', '\xDDA', '\n', '\xCC', '\r', '\xCC', 
		'\xE', '\xCC', '\xDDB', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\xDE0', 
		'\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x5', '\xCD', '\xDE7', '\n', '\xCD', '\x3', '\xCD', '\x6', 
		'\xCD', '\xDEA', '\n', '\xCD', '\r', '\xCD', '\xE', '\xCD', '\xDEB', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\xDF2', 
		'\n', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\xDF6', '\n', 
		'\xCE', '\x3', '\xCE', '\x5', '\xCE', '\xDF9', '\n', '\xCE', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\xDFF', '\n', 
		'\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', '\xE08', '\n', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', 
		'\x3', '\xD1', '\x5', '\xD1', '\xE10', '\n', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x5', '\xD1', '\xE14', '\n', '\xD1', '\x3', '\xD2', '\x3', '\xD2', 
		'\x5', '\xD2', '\xE18', '\n', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', 
		'\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x5', '\xD3', '\xE20', 
		'\n', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', 
		'\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x5', '\xD3', '\xE29', '\n', 
		'\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x6', 
		'\xD4', '\xE2F', '\n', '\xD4', '\r', '\xD4', '\xE', '\xD4', '\xE30', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x5', '\xD6', '\xE4D', '\n', '\xD6', '\x3', '\xD7', '\x6', '\xD7', 
		'\xE50', '\n', '\xD7', '\r', '\xD7', '\xE', '\xD7', '\xE51', '\x3', '\xD8', 
		'\x3', '\xD8', '\x5', '\xD8', '\xE56', '\n', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\xE5D', 
		'\n', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\xE61', '\n', 
		'\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xE65', '\n', '\xDA', 
		'\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\xE69', '\n', '\xDA', '\x3', 
		'\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDC', '\x3', '\xDC', '\x3', 
		'\xDC', '\x3', '\xDC', '\x3', '\xDC', '\a', '\xDC', '\xE73', '\n', '\xDC', 
		'\f', '\xDC', '\xE', '\xDC', '\xE76', '\v', '\xDC', '\x3', '\xDC', '\x5', 
		'\xDC', '\xE79', '\n', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDF', '\x5', '\xDF', 
		'\xE87', '\n', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', 
		'\xDF', '\x5', '\xDF', '\xE8D', '\n', '\xDF', '\x3', '\xDF', '\x3', '\xDF', 
		'\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\xE94', '\n', 
		'\xDF', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x5', '\xE0', '\xE99', 
		'\n', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x5', '\xE0', '\xEA4', '\n', '\xE0', '\x3', '\xE0', '\x5', '\xE0', '\xEA7', 
		'\n', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x5', '\xE0', '\xEAD', '\n', '\xE0', '\x5', '\xE0', '\xEAF', '\n', '\xE0', 
		'\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xEB8', '\n', '\xE1', '\x3', 
		'\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xEC2', '\n', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xEC7', '\n', 
		'\xE2', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xED6', 
		'\n', '\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\xEDA', '\n', 
		'\xE8', '\x3', '\xE9', '\x5', '\xE9', '\xEDD', '\n', '\xE9', '\x3', '\xE9', 
		'\x3', '\xE9', '\x5', '\xE9', '\xEE1', '\n', '\xE9', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x6', '\xEB', '\xEED', 
		'\n', '\xEB', '\r', '\xEB', '\xE', '\xEB', '\xEEE', '\x5', '\xEB', '\xEF1', 
		'\n', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', '\xEB', '\xEF5', '\n', 
		'\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\a', 
		'\xEC', '\xEFB', '\n', '\xEC', '\f', '\xEC', '\xE', '\xEC', '\xEFE', '\v', 
		'\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xED', '\x5', 
		'\xED', '\xF04', '\n', '\xED', '\x3', '\xED', '\x6', '\xED', '\xF07', 
		'\n', '\xED', '\r', '\xED', '\xE', '\xED', '\xF08', '\x5', '\xED', '\xF0B', 
		'\n', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xEE', '\x5', '\xEE', 
		'\xF10', '\n', '\xEE', '\x3', '\xEE', '\x6', '\xEE', '\xF13', '\n', '\xEE', 
		'\r', '\xEE', '\xE', '\xEE', '\xF14', '\x3', '\xEE', '\x3', '\xEE', '\x3', 
		'\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x5', '\xEF', '\xF1D', 
		'\n', '\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', 
		'\x3', '\xF0', '\x5', '\xF0', '\xF24', '\n', '\xF0', '\x3', '\xF0', '\x3', 
		'\xF0', '\x5', '\xF0', '\xF28', '\n', '\xF0', '\x3', '\xF0', '\x5', '\xF0', 
		'\xF2B', '\n', '\xF0', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', 
		'\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x3', 
		'\xF2', '\x3', '\xF2', '\x5', '\xF2', '\xF37', '\n', '\xF2', '\x3', '\xF3', 
		'\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', '\xF3D', '\n', 
		'\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x5', '\xF5', '\xF46', '\n', '\xF5', 
		'\x3', '\xF5', '\x5', '\xF5', '\xF49', '\n', '\xF5', '\x3', '\xF6', '\x3', 
		'\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5', '\xF6', '\xF4F', '\n', '\xF6', 
		'\x3', '\xF6', '\x6', '\xF6', '\xF52', '\n', '\xF6', '\r', '\xF6', '\xE', 
		'\xF6', '\xF53', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', 
		'\x5', '\xF6', '\xF5A', '\n', '\xF6', '\x3', '\xF6', '\x6', '\xF6', '\xF5D', 
		'\n', '\xF6', '\r', '\xF6', '\xE', '\xF6', '\xF5E', '\x5', '\xF6', '\xF61', 
		'\n', '\xF6', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', 
		'\x3', '\xF7', '\x5', '\xF7', '\xF68', '\n', '\xF7', '\x3', '\xF7', '\x5', 
		'\xF7', '\xF6B', '\n', '\xF7', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', 
		'\x3', '\xF8', '\x3', '\xF8', '\x5', '\xF8', '\xF72', '\n', '\xF8', '\x3', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x5', '\xF9', '\xF7D', 
		'\n', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', 
		'\x5', '\xF9', '\xF83', '\n', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x5', 
		'\xF9', '\xF87', '\n', '\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', 
		'\x3', '\xFA', '\x5', '\xFA', '\xF8D', '\n', '\xFA', '\x3', '\xFA', '\x6', 
		'\xFA', '\xF90', '\n', '\xFA', '\r', '\xFA', '\xE', '\xFA', '\xF91', '\x5', 
		'\xFA', '\xF94', '\n', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFB', 
		'\x3', '\xFB', '\x5', '\xFB', '\xF9A', '\n', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x5', '\xFB', '\xFA5', '\n', '\xFB', 
		'\x5', '\xFB', '\xFA7', '\n', '\xFB', '\x5', '\xFB', '\xFA9', '\n', '\xFB', 
		'\x3', '\xFB', '\x5', '\xFB', '\xFAC', '\n', '\xFB', '\x3', '\xFC', '\x3', 
		'\xFC', '\x5', '\xFC', '\xFB0', '\n', '\xFC', '\x3', '\xFC', '\x5', '\xFC', 
		'\xFB3', '\n', '\xFC', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\xFB7', 
		'\n', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\xFBB', '\n', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\xFC0', 
		'\n', '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x5', '\xFF', '\xFCB', '\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', 
		'\xFF', '\xFCF', '\n', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\xFD7', '\n', 
		'\xFF', '\x3', '\x100', '\x5', '\x100', '\xFDA', '\n', '\x100', '\x3', 
		'\x100', '\x3', '\x100', '\x3', '\x100', '\a', '\x100', '\xFDF', '\n', 
		'\x100', '\f', '\x100', '\xE', '\x100', '\xFE2', '\v', '\x100', '\x3', 
		'\x101', '\x3', '\x101', '\x5', '\x101', '\xFE6', '\n', '\x101', '\x3', 
		'\x101', '\x6', '\x101', '\xFE9', '\n', '\x101', '\r', '\x101', '\xE', 
		'\x101', '\xFEA', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', '\xFEF', 
		'\n', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x5', '\x102', '\xFF5', '\n', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x5', '\x102', '\xFF9', '\n', '\x102', '\x3', '\x102', '\x5', 
		'\x102', '\xFFC', '\n', '\x102', '\x3', '\x103', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x5', '\x103', 
		'\x1004', '\n', '\x103', '\x3', '\x103', '\x5', '\x103', '\x1007', '\n', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x5', '\x103', '\x100B', '\n', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x5', '\x103', '\x100F', '\n', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x5', '\x103', 
		'\x1014', '\n', '\x103', '\x3', '\x103', '\x5', '\x103', '\x1017', '\n', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x5', '\x103', '\x101B', '\n', 
		'\x103', '\x3', '\x103', '\x3', '\x103', '\x5', '\x103', '\x101F', '\n', 
		'\x103', '\a', '\x103', '\x1021', '\n', '\x103', '\f', '\x103', '\xE', 
		'\x103', '\x1024', '\v', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', 
		'\x103', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', 
		'\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', 
		'\x3', '\x105', '\x5', '\x105', '\x1037', '\n', '\x105', '\x3', '\x106', 
		'\x3', '\x106', '\x5', '\x106', '\x103B', '\n', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x5', '\x106', '\x103F', '\n', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x3', '\x107', '\x3', '\x107', '\x5', '\x107', '\x1045', 
		'\n', '\x107', '\x3', '\x107', '\x3', '\x107', '\x5', '\x107', '\x1049', 
		'\n', '\x107', '\x3', '\x107', '\x6', '\x107', '\x104C', '\n', '\x107', 
		'\r', '\x107', '\xE', '\x107', '\x104D', '\x5', '\x107', '\x1050', '\n', 
		'\x107', '\x3', '\x107', '\x5', '\x107', '\x1053', '\n', '\x107', '\x3', 
		'\x107', '\x3', '\x107', '\x5', '\x107', '\x1057', '\n', '\x107', '\x3', 
		'\x107', '\x5', '\x107', '\x105A', '\n', '\x107', '\x3', '\x107', '\x5', 
		'\x107', '\x105D', '\n', '\x107', '\x3', '\x107', '\x5', '\x107', '\x1060', 
		'\n', '\x107', '\x3', '\x108', '\x3', '\x108', '\x5', '\x108', '\x1064', 
		'\n', '\x108', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', 
		'\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x5', '\x10A', '\x1070', '\n', '\x10A', 
		'\x3', '\x10A', '\x5', '\x10A', '\x1073', '\n', '\x10A', '\x3', '\x10B', 
		'\x5', '\x10B', '\x1076', '\n', '\x10B', '\x3', '\x10B', '\x6', '\x10B', 
		'\x1079', '\n', '\x10B', '\r', '\x10B', '\xE', '\x10B', '\x107A', '\x3', 
		'\x10C', '\x3', '\x10C', '\a', '\x10C', '\x107F', '\n', '\x10C', '\f', 
		'\x10C', '\xE', '\x10C', '\x1082', '\v', '\x10C', '\x3', '\x10C', '\x3', 
		'\x10C', '\x5', '\x10C', '\x1086', '\n', '\x10C', '\x3', '\x10D', '\x3', 
		'\x10D', '\a', '\x10D', '\x108A', '\n', '\x10D', '\f', '\x10D', '\xE', 
		'\x10D', '\x108D', '\v', '\x10D', '\x3', '\x10D', '\x5', '\x10D', '\x1090', 
		'\n', '\x10D', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x5', 
		'\x10E', '\x1095', '\n', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', 
		'\x10E', '\a', '\x10E', '\x109A', '\n', '\x10E', '\f', '\x10E', '\xE', 
		'\x10E', '\x109D', '\v', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', 
		'\x10E', '\x5', '\x10E', '\x10A2', '\n', '\x10E', '\x3', '\x10E', '\x3', 
		'\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x5', '\x10E', 
		'\x10A9', '\n', '\x10E', '\x3', '\x10F', '\x5', '\x10F', '\x10AC', '\n', 
		'\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x10AF', '\n', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x10B3', '\n', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x10B8', '\n', 
		'\x10F', '\x3', '\x10F', '\x3', '\x10F', '\a', '\x10F', '\x10BC', '\n', 
		'\x10F', '\f', '\x10F', '\xE', '\x10F', '\x10BF', '\v', '\x10F', '\x3', 
		'\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x111', '\x3', '\x111', 
		'\x3', '\x111', '\x3', '\x112', '\x3', '\x112', '\x5', '\x112', '\x10C9', 
		'\n', '\x112', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x5', '\x113', '\x10D0', '\n', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x5', '\x113', '\x10D4', '\n', '\x113', '\x3', 
		'\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', 
		'\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x5', '\x114', '\x10DE', 
		'\n', '\x114', '\x3', '\x115', '\x3', '\x115', '\x5', '\x115', '\x10E2', 
		'\n', '\x115', '\x3', '\x115', '\x3', '\x115', '\x5', '\x115', '\x10E6', 
		'\n', '\x115', '\x3', '\x115', '\x6', '\x115', '\x10E9', '\n', '\x115', 
		'\r', '\x115', '\xE', '\x115', '\x10EA', '\x3', '\x115', '\x3', '\x115', 
		'\x3', '\x115', '\x3', '\x115', '\x3', '\x116', '\x3', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x10F6', '\n', 
		'\x116', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x5', '\x117', 
		'\x10FB', '\n', '\x117', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x3', '\x118', '\x5', '\x118', '\x1101', '\n', '\x118', '\x3', '\x118', 
		'\x6', '\x118', '\x1104', '\n', '\x118', '\r', '\x118', '\xE', '\x118', 
		'\x1105', '\x3', '\x118', '\x5', '\x118', '\x1109', '\n', '\x118', '\x3', 
		'\x118', '\x6', '\x118', '\x110C', '\n', '\x118', '\r', '\x118', '\xE', 
		'\x118', '\x110D', '\x5', '\x118', '\x1110', '\n', '\x118', '\x3', '\x118', 
		'\x3', '\x118', '\x3', '\x119', '\x3', '\x119', '\x5', '\x119', '\x1116', 
		'\n', '\x119', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x5', 
		'\x11A', '\x111B', '\n', '\x11A', '\x3', '\x11A', '\x5', '\x11A', '\x111E', 
		'\n', '\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x5', 
		'\x11B', '\x1123', '\n', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x5', '\x11B', '\x1128', '\n', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\x5', '\x11C', '\x1131', '\n', '\x11C', '\x3', '\x11C', 
		'\x6', '\x11C', '\x1134', '\n', '\x11C', '\r', '\x11C', '\xE', '\x11C', 
		'\x1135', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11D', '\x3', '\x11D', 
		'\x5', '\x11D', '\x113C', '\n', '\x11D', '\x3', '\x11D', '\x3', '\x11D', 
		'\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', '\x1142', '\n', '\x11D', 
		'\x3', '\x11D', '\x6', '\x11D', '\x1145', '\n', '\x11D', '\r', '\x11D', 
		'\xE', '\x11D', '\x1146', '\x3', '\x11D', '\x3', '\x11D', '\x5', '\x11D', 
		'\x114B', '\n', '\x11D', '\x5', '\x11D', '\x114D', '\n', '\x11D', '\x3', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x1152', '\n', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x5', '\x11E', '\x1156', '\n', 
		'\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x5', '\x11E', '\x115C', '\n', '\x11E', '\x3', '\x11E', '\x3', '\x11E', 
		'\x5', '\x11E', '\x1160', '\n', '\x11E', '\x3', '\x11F', '\x3', '\x11F', 
		'\x3', '\x11F', '\x3', '\x11F', '\x3', '\x120', '\x3', '\x120', '\x3', 
		'\x120', '\x5', '\x120', '\x1169', '\n', '\x120', '\x3', '\x120', '\x6', 
		'\x120', '\x116C', '\n', '\x120', '\r', '\x120', '\xE', '\x120', '\x116D', 
		'\x3', '\x120', '\x5', '\x120', '\x1171', '\n', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x120', '\x3', '\x120', '\x5', '\x120', '\x1177', 
		'\n', '\x120', '\x3', '\x120', '\x6', '\x120', '\x117A', '\n', '\x120', 
		'\r', '\x120', '\xE', '\x120', '\x117B', '\x5', '\x120', '\x117E', '\n', 
		'\x120', '\x5', '\x120', '\x1180', '\n', '\x120', '\x3', '\x121', '\x3', 
		'\x121', '\x3', '\x121', '\x5', '\x121', '\x1185', '\n', '\x121', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', '\x118A', '\n', 
		'\x122', '\x3', '\x122', '\x6', '\x122', '\x118D', '\n', '\x122', '\r', 
		'\x122', '\xE', '\x122', '\x118E', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x5', '\x123', 
		'\x1197', '\n', '\x123', '\x3', '\x123', '\x6', '\x123', '\x119A', '\n', 
		'\x123', '\r', '\x123', '\xE', '\x123', '\x119B', '\x3', '\x123', '\x3', 
		'\x123', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', '\x5', '\x124', 
		'\x11A3', '\n', '\x124', '\x3', '\x124', '\x3', '\x124', '\x5', '\x124', 
		'\x11A7', '\n', '\x124', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', 
		'\x3', '\x126', '\x3', '\x126', '\a', '\x126', '\x11AE', '\n', '\x126', 
		'\f', '\x126', '\xE', '\x126', '\x11B1', '\v', '\x126', '\x3', '\x126', 
		'\x5', '\x126', '\x11B4', '\n', '\x126', '\x3', '\x126', '\a', '\x126', 
		'\x11B7', '\n', '\x126', '\f', '\x126', '\xE', '\x126', '\x11BA', '\v', 
		'\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x5', 
		'\x127', '\x11C4', '\n', '\x127', '\x5', '\x127', '\x11C6', '\n', '\x127', 
		'\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', 
		'\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\a', '\x129', '\x11D4', 
		'\n', '\x129', '\f', '\x129', '\xE', '\x129', '\x11D7', '\v', '\x129', 
		'\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x11DB', '\n', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12A', '\a', '\x12A', '\x11DF', '\n', '\x12A', 
		'\f', '\x12A', '\xE', '\x12A', '\x11E2', '\v', '\x12A', '\x3', '\x12A', 
		'\x3', '\x12A', '\x3', '\x12B', '\x5', '\x12B', '\x11E7', '\n', '\x12B', 
		'\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', 
		'\x12B', '\x3', '\x12B', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', 
		'\x3', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x11F5', 
		'\n', '\x12D', '\x3', '\x12D', '\x6', '\x12D', '\x11F8', '\n', '\x12D', 
		'\r', '\x12D', '\xE', '\x12D', '\x11F9', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x1200', '\n', '\x12E', 
		'\x3', '\x12E', '\x5', '\x12E', '\x1203', '\n', '\x12E', '\x3', '\x12F', 
		'\x5', '\x12F', '\x1206', '\n', '\x12F', '\x3', '\x12F', '\x3', '\x12F', 
		'\x5', '\x12F', '\x120A', '\n', '\x12F', '\x3', '\x12F', '\a', '\x12F', 
		'\x120D', '\n', '\x12F', '\f', '\x12F', '\xE', '\x12F', '\x1210', '\v', 
		'\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x130', '\x3', '\x130', 
		'\x3', '\x130', '\x3', '\x130', '\x5', '\x130', '\x1218', '\n', '\x130', 
		'\x5', '\x130', '\x121A', '\n', '\x130', '\x3', '\x130', '\x3', '\x130', 
		'\x5', '\x130', '\x121E', '\n', '\x130', '\x3', '\x130', '\x5', '\x130', 
		'\x1221', '\n', '\x130', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', 
		'\x5', '\x131', '\x1226', '\n', '\x131', '\x5', '\x131', '\x1228', '\n', 
		'\x131', '\x3', '\x131', '\x3', '\x131', '\x5', '\x131', '\x122C', '\n', 
		'\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x132', 
		'\x3', '\x132', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', 
		'\x133', '\x3', '\x133', '\x5', '\x133', '\x1238', '\n', '\x133', '\x3', 
		'\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', 
		'\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1241', '\n', '\x135', 
		'\x3', '\x135', '\x3', '\x135', '\x5', '\x135', '\x1245', '\n', '\x135', 
		'\x3', '\x135', '\x6', '\x135', '\x1248', '\n', '\x135', '\r', '\x135', 
		'\xE', '\x135', '\x1249', '\x3', '\x136', '\x3', '\x136', '\x5', '\x136', 
		'\x124E', '\n', '\x136', '\x3', '\x136', '\x3', '\x136', '\x5', '\x136', 
		'\x1252', '\n', '\x136', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', 
		'\x5', '\x137', '\x1257', '\n', '\x137', '\x3', '\x137', '\x5', '\x137', 
		'\x125A', '\n', '\x137', '\x3', '\x138', '\x3', '\x138', '\x3', '\x138', 
		'\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', '\x139', '\x3', 
		'\x139', '\x5', '\x139', '\x1264', '\n', '\x139', '\x3', '\x13A', '\x3', 
		'\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x5', '\x13A', '\x126A', '\n', 
		'\x13A', '\x3', '\x13A', '\x5', '\x13A', '\x126D', '\n', '\x13A', '\x3', 
		'\x13A', '\x5', '\x13A', '\x1270', '\n', '\x13A', '\x3', '\x13B', '\x3', 
		'\x13B', '\x5', '\x13B', '\x1274', '\n', '\x13B', '\x3', '\x13B', '\x6', 
		'\x13B', '\x1277', '\n', '\x13B', '\r', '\x13B', '\xE', '\x13B', '\x1278', 
		'\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x3', 
		'\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x5', '\x13B', '\x1282', '\n', 
		'\x13B', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', 
		'\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', '\x5', 
		'\x13C', '\x128C', '\n', '\x13C', '\x3', '\x13D', '\x3', '\x13D', '\x5', 
		'\x13D', '\x1290', '\n', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x5', 
		'\x13D', '\x1294', '\n', '\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1297', 
		'\n', '\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x129A', '\n', '\x13D', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x5', '\x13E', '\x129F', 
		'\n', '\x13E', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x5', 
		'\x13F', '\x12A4', '\n', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x12A7', 
		'\n', '\x13F', '\x3', '\x13F', '\x5', '\x13F', '\x12AA', '\n', '\x13F', 
		'\x3', '\x140', '\x3', '\x140', '\x6', '\x140', '\x12AE', '\n', '\x140', 
		'\r', '\x140', '\xE', '\x140', '\x12AF', '\x3', '\x140', '\x5', '\x140', 
		'\x12B3', '\n', '\x140', '\x3', '\x140', '\x3', '\x140', '\x3', '\x141', 
		'\x3', '\x141', '\x5', '\x141', '\x12B9', '\n', '\x141', '\x3', '\x141', 
		'\x5', '\x141', '\x12BC', '\n', '\x141', '\x3', '\x142', '\x5', '\x142', 
		'\x12BF', '\n', '\x142', '\x3', '\x142', '\x6', '\x142', '\x12C2', '\n', 
		'\x142', '\r', '\x142', '\xE', '\x142', '\x12C3', '\x3', '\x142', '\x5', 
		'\x142', '\x12C7', '\n', '\x142', '\x3', '\x143', '\x3', '\x143', '\x3', 
		'\x143', '\x3', '\x143', '\x6', '\x143', '\x12CD', '\n', '\x143', '\r', 
		'\x143', '\xE', '\x143', '\x12CE', '\x3', '\x144', '\x3', '\x144', '\x6', 
		'\x144', '\x12D3', '\n', '\x144', '\r', '\x144', '\xE', '\x144', '\x12D4', 
		'\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x5', '\x145', '\x12DA', 
		'\n', '\x145', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x5', 
		'\x146', '\x12DF', '\n', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', 
		'\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x5', '\x147', 
		'\x12E7', '\n', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', 
		'\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', 
		'\x147', '\x5', '\x147', '\x12F1', '\n', '\x147', '\x3', '\x147', '\x3', 
		'\x147', '\x5', '\x147', '\x12F5', '\n', '\x147', '\x5', '\x147', '\x12F7', 
		'\n', '\x147', '\x3', '\x147', '\x5', '\x147', '\x12FA', '\n', '\x147', 
		'\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\x3', 
		'\x148', '\x3', '\x148', '\x3', '\x148', '\x3', '\x148', '\a', '\x148', 
		'\x1304', '\n', '\x148', '\f', '\x148', '\xE', '\x148', '\x1307', '\v', 
		'\x148', '\x3', '\x148', '\x5', '\x148', '\x130A', '\n', '\x148', '\x3', 
		'\x148', '\x5', '\x148', '\x130D', '\n', '\x148', '\x3', '\x149', '\x3', 
		'\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x14A', '\x3', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x5', '\x14B', '\x131C', '\n', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x5', '\x14B', 
		'\x1321', '\n', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x5', '\x14B', 
		'\x1325', '\n', '\x14B', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', 
		'\x3', '\x14C', '\x3', '\x14C', '\x5', '\x14C', '\x132C', '\n', '\x14C', 
		'\x3', '\x14C', '\x5', '\x14C', '\x132F', '\n', '\x14C', '\x3', '\x14D', 
		'\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\a', 
		'\x14D', '\x1336', '\n', '\x14D', '\f', '\x14D', '\xE', '\x14D', '\x1339', 
		'\v', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', 
		'\x14D', '\x5', '\x14D', '\x133F', '\n', '\x14D', '\x3', '\x14E', '\x3', 
		'\x14E', '\x3', '\x14E', '\x5', '\x14E', '\x1344', '\n', '\x14E', '\x3', 
		'\x14F', '\x3', '\x14F', '\x5', '\x14F', '\x1348', '\n', '\x14F', '\x3', 
		'\x150', '\x3', '\x150', '\x3', '\x150', '\x3', '\x150', '\x3', '\x150', 
		'\x3', '\x150', '\x5', '\x150', '\x1350', '\n', '\x150', '\x3', '\x150', 
		'\x3', '\x150', '\x3', '\x150', '\x3', '\x150', '\x5', '\x150', '\x1356', 
		'\n', '\x150', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x3', 
		'\x151', '\x3', '\x151', '\x3', '\x151', '\x5', '\x151', '\x135E', '\n', 
		'\x151', '\x3', '\x151', '\x5', '\x151', '\x1361', '\n', '\x151', '\x3', 
		'\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x153', 
		'\x3', '\x153', '\x3', '\x153', '\x5', '\x153', '\x136A', '\n', '\x153', 
		'\x3', '\x153', '\x5', '\x153', '\x136D', '\n', '\x153', '\x3', '\x153', 
		'\x5', '\x153', '\x1370', '\n', '\x153', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x5', '\x155', '\x1379', '\n', '\x155', '\x3', '\x156', '\x3', 
		'\x156', '\x3', '\x156', '\x3', '\x156', '\x5', '\x156', '\x137F', '\n', 
		'\x156', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x3', '\x156', 
		'\x5', '\x156', '\x1385', '\n', '\x156', '\x5', '\x156', '\x1387', '\n', 
		'\x156', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', 
		'\x157', '\x3', '\x157', '\x3', '\x157', '\x5', '\x157', '\x1394', '\n', 
		'\x157', '\x5', '\x157', '\x1396', '\n', '\x157', '\x3', '\x158', '\x3', 
		'\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x5', '\x158', '\x139F', '\n', '\x158', '\x5', '\x158', 
		'\x13A1', '\n', '\x158', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', 
		'\x13A5', '\n', '\x159', '\x3', '\x159', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x13AB', '\n', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x5', '\x159', '\x13AF', '\n', '\x159', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15B', '\x3', '\x15B', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\a', '\x15C', '\x13BB', '\n', '\x15C', '\f', '\x15C', '\xE', '\x15C', 
		'\x13BE', '\v', '\x15C', '\x3', '\x15D', '\x3', '\x15D', '\x3', '\x15D', 
		'\x5', '\x15D', '\x13C3', '\n', '\x15D', '\x3', '\x15E', '\x3', '\x15E', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x5', '\x15F', '\x13CE', '\n', 
		'\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x5', '\x15F', '\x13D9', '\n', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x5', '\x15F', '\x13DD', '\n', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x15F', '\a', '\x15F', '\x13E2', '\n', '\x15F', '\f', 
		'\x15F', '\xE', '\x15F', '\x13E5', '\v', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x5', '\x15F', '\x13E9', '\n', '\x15F', '\a', '\x15F', '\x13EB', 
		'\n', '\x15F', '\f', '\x15F', '\xE', '\x15F', '\x13EE', '\v', '\x15F', 
		'\x3', '\x15F', '\x3', '\x15F', '\x5', '\x15F', '\x13F2', '\n', '\x15F', 
		'\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x15F', '\a', '\x15F', '\x13FA', '\n', '\x15F', '\f', 
		'\x15F', '\xE', '\x15F', '\x13FD', '\v', '\x15F', '\x3', '\x160', '\x3', 
		'\x160', '\x3', '\x160', '\x5', '\x160', '\x1402', '\n', '\x160', '\x3', 
		'\x160', '\x5', '\x160', '\x1405', '\n', '\x160', '\x3', '\x161', '\x3', 
		'\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', 
		'\x3', '\x161', '\a', '\x161', '\x140E', '\n', '\x161', '\f', '\x161', 
		'\xE', '\x161', '\x1411', '\v', '\x161', '\x3', '\x162', '\x3', '\x162', 
		'\x5', '\x162', '\x1415', '\n', '\x162', '\x3', '\x162', '\x3', '\x162', 
		'\x3', '\x162', '\x3', '\x162', '\x3', '\x162', '\x3', '\x162', '\x3', 
		'\x162', '\x3', '\x162', '\x5', '\x162', '\x141F', '\n', '\x162', '\x5', 
		'\x162', '\x1421', '\n', '\x162', '\x5', '\x162', '\x1423', '\n', '\x162', 
		'\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', 
		'\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x5', '\x163', 
		'\x142D', '\n', '\x163', '\x3', '\x163', '\x3', '\x163', '\x5', '\x163', 
		'\x1431', '\n', '\x163', '\x5', '\x163', '\x1433', '\n', '\x163', '\x3', 
		'\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', 
		'\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\a', '\x164', '\x143D', 
		'\n', '\x164', '\f', '\x164', '\xE', '\x164', '\x1440', '\v', '\x164', 
		'\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', 
		'\x164', '\x5', '\x164', '\x1447', '\n', '\x164', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x166', '\x3', '\x166', 
		'\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', 
		'\x166', '\x5', '\x166', '\x1454', '\n', '\x166', '\x3', '\x166', '\x5', 
		'\x166', '\x1457', '\n', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', 
		'\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', 
		'\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\a', '\x166', '\x1463', 
		'\n', '\x166', '\f', '\x166', '\xE', '\x166', '\x1466', '\v', '\x166', 
		'\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', 
		'\x167', '\x5', '\x167', '\x146D', '\n', '\x167', '\x3', '\x167', '\x3', 
		'\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x5', '\x167', '\x1475', '\n', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x5', '\x167', '\x147C', 
		'\n', '\x167', '\x3', '\x167', '\x3', '\x167', '\x5', '\x167', '\x1480', 
		'\n', '\x167', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x5', '\x168', '\x1487', '\n', '\x168', '\x3', 
		'\x169', '\x3', '\x169', '\x5', '\x169', '\x148B', '\n', '\x169', '\x3', 
		'\x169', '\x3', '\x169', '\x3', '\x169', '\x5', '\x169', '\x1490', '\n', 
		'\x169', '\a', '\x169', '\x1492', '\n', '\x169', '\f', '\x169', '\xE', 
		'\x169', '\x1495', '\v', '\x169', '\x3', '\x169', '\x3', '\x169', '\x3', 
		'\x169', '\a', '\x169', '\x149A', '\n', '\x169', '\f', '\x169', '\xE', 
		'\x169', '\x149D', '\v', '\x169', '\x3', '\x169', '\x5', '\x169', '\x14A0', 
		'\n', '\x169', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', 
		'\x16A', '\x3', '\x16A', '\x5', '\x16A', '\x14A7', '\n', '\x16A', '\x3', 
		'\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x5', '\x16A', '\x14AC', '\n', 
		'\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', 
		'\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x5', '\x16A', '\x14B5', 
		'\n', '\x16A', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x5', '\x16B', 
		'\x14BE', '\n', '\x16B', '\x3', '\x16B', '\x5', '\x16B', '\x14C1', '\n', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16C', '\x3', '\x16C', 
		'\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', 
		'\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', 
		'\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16C', '\x3', 
		'\x16C', '\x5', '\x16C', '\x14D5', '\n', '\x16C', '\x3', '\x16D', '\x3', 
		'\x16D', '\x5', '\x16D', '\x14D9', '\n', '\x16D', '\x3', '\x16E', '\x5', 
		'\x16E', '\x14DC', '\n', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\x3', 
		'\x16E', '\x6', '\x16E', '\x14E1', '\n', '\x16E', '\r', '\x16E', '\xE', 
		'\x16E', '\x14E2', '\x3', '\x16E', '\x5', '\x16E', '\x14E6', '\n', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x5', '\x16E', '\x14EA', '\n', '\x16E', 
		'\x3', '\x16E', '\x5', '\x16E', '\x14ED', '\n', '\x16E', '\x3', '\x16F', 
		'\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x5', 
		'\x16F', '\x14F4', '\n', '\x16F', '\x3', '\x170', '\x5', '\x170', '\x14F7', 
		'\n', '\x170', '\x3', '\x170', '\x3', '\x170', '\x6', '\x170', '\x14FB', 
		'\n', '\x170', '\r', '\x170', '\xE', '\x170', '\x14FC', '\x3', '\x170', 
		'\x5', '\x170', '\x1500', '\n', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x5', '\x170', '\x1504', '\n', '\x170', '\x3', '\x170', '\x5', '\x170', 
		'\x1507', '\n', '\x170', '\x3', '\x171', '\x3', '\x171', '\x3', '\x171', 
		'\x3', '\x171', '\x3', '\x171', '\x5', '\x171', '\x150E', '\n', '\x171', 
		'\x3', '\x172', '\x3', '\x172', '\x3', '\x172', '\x5', '\x172', '\x1513', 
		'\n', '\x172', '\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\x3', 
		'\x173', '\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\x3', '\x173', 
		'\x3', '\x173', '\x3', '\x173', '\a', '\x173', '\x151F', '\n', '\x173', 
		'\f', '\x173', '\xE', '\x173', '\x1522', '\v', '\x173', '\x3', '\x173', 
		'\x3', '\x173', '\x3', '\x173', '\x3', '\x173', '\x5', '\x173', '\x1528', 
		'\n', '\x173', '\x3', '\x174', '\x3', '\x174', '\x3', '\x174', '\x3', 
		'\x174', '\x3', '\x174', '\x3', '\x174', '\x3', '\x174', '\x3', '\x174', 
		'\x3', '\x174', '\x5', '\x174', '\x1533', '\n', '\x174', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x5', '\x175', '\x153C', '\n', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x5', '\x175', '\x1545', '\n', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x5', '\x175', '\x1549', '\n', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x5', '\x175', '\x154D', '\n', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x5', '\x175', '\x1567', '\n', '\x175', '\x3', 
		'\x175', '\x5', '\x175', '\x156A', '\n', '\x175', '\x3', '\x175', '\x5', 
		'\x175', '\x156D', '\n', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x5', '\x175', '\x1577', '\n', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x5', '\x175', '\x157B', '\n', '\x175', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x5', '\x176', '\x1580', '\n', '\x176', 
		'\x3', '\x177', '\x3', '\x177', '\x3', '\x177', '\x5', '\x177', '\x1585', 
		'\n', '\x177', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x5', 
		'\x178', '\x158A', '\n', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', 
		'\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', 
		'\x5', '\x178', '\x1593', '\n', '\x178', '\x3', '\x178', '\x5', '\x178', 
		'\x1596', '\n', '\x178', '\x5', '\x178', '\x1598', '\n', '\x178', '\x3', 
		'\x178', '\x3', '\x178', '\x5', '\x178', '\x159C', '\n', '\x178', '\x3', 
		'\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', 
		'\x5', '\x178', '\x15A3', '\n', '\x178', '\x3', '\x178', '\x3', '\x178', 
		'\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x5', '\x178', '\x15AA', 
		'\n', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', 
		'\x178', '\x3', '\x178', '\x3', '\x178', '\x5', '\x178', '\x15B2', '\n', 
		'\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', 
		'\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', 
		'\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', '\x3', '\x178', 
		'\x5', '\x178', '\x15C1', '\n', '\x178', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x5', '\x179', '\x15C6', '\n', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x15CB', '\n', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', 
		'\x179', '\x15D1', '\n', '\x179', '\x3', '\x179', '\x5', '\x179', '\x15D4', 
		'\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x15D8', 
		'\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x15E2', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', 
		'\x15EE', '\n', '\x179', '\x5', '\x179', '\x15F0', '\n', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x15F7', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x15FB', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x6', '\x179', '\x1602', 
		'\n', '\x179', '\r', '\x179', '\xE', '\x179', '\x1603', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x5', '\x179', '\x160D', '\n', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x161B', '\n', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x1623', '\n', '\x179', 
		'\x3', '\x179', '\x5', '\x179', '\x1626', '\n', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x5', '\x179', '\x162F', '\n', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\a', '\x179', '\x1633', '\n', '\x179', '\f', 
		'\x179', '\xE', '\x179', '\x1636', '\v', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x5', '\x179', '\x163F', '\n', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x5', '\x179', '\x1647', '\n', '\x179', '\x3', '\x179', '\x5', 
		'\x179', '\x164A', '\n', '\x179', '\x3', '\x179', '\x5', '\x179', '\x164D', 
		'\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', 
		'\x1656', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x165B', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x5', '\x179', '\x1660', '\n', '\x179', '\x3', '\x179', 
		'\x6', '\x179', '\x1663', '\n', '\x179', '\r', '\x179', '\xE', '\x179', 
		'\x1664', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', 
		'\x166A', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x166F', '\n', '\x179', '\x3', '\x179', '\x5', '\x179', 
		'\x1672', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x1677', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x5', '\x179', '\x167C', '\n', '\x179', '\a', '\x179', 
		'\x167E', '\n', '\x179', '\f', '\x179', '\xE', '\x179', '\x1681', '\v', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', 
		'\x1686', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x5', '\x179', '\x168C', '\n', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x5', '\x179', '\x1695', '\n', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x169A', '\n', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16A2', '\n', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16A6', '\n', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16AB', 
		'\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x5', '\x179', '\x16B1', '\n', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', 
		'\x16B8', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x5', '\x179', '\x16BD', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16C4', 
		'\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16C8', 
		'\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', 
		'\x179', '\x16CD', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', 
		'\x16D5', '\n', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16D8', '\n', 
		'\x179', '\x3', '\x179', '\x5', '\x179', '\x16DB', '\n', '\x179', '\x3', 
		'\x179', '\x5', '\x179', '\x16DE', '\n', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x5', '\x179', '\x16E2', '\n', '\x179', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x5', '\x179', '\x16E7', '\n', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16EC', '\n', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16F0', '\n', 
		'\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x5', '\x179', '\x16F7', '\n', '\x179', '\x3', '\x179', 
		'\x3', '\x179', '\x3', '\x179', '\x5', '\x179', '\x16FC', '\n', '\x179', 
		'\x5', '\x179', '\x16FE', '\n', '\x179', '\x3', '\x17A', '\x3', '\x17A', 
		'\x3', '\x17B', '\x3', '\x17B', '\x3', '\x17C', '\x3', '\x17C', '\x3', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', '\x17D', '\x1709', '\n', 
		'\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', '\x17D', '\x170D', '\n', 
		'\x17D', '\x5', '\x17D', '\x170F', '\n', '\x17D', '\x3', '\x17D', '\x3', 
		'\x17D', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', 
		'\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x5', '\x17E', '\x171A', 
		'\n', '\x17E', '\x3', '\x17F', '\x3', '\x17F', '\x3', '\x180', '\x3', 
		'\x180', '\x3', '\x180', '\x3', '\x180', '\x3', '\x180', '\x3', '\x180', 
		'\x3', '\x180', '\x5', '\x180', '\x1725', '\n', '\x180', '\x3', '\x181', 
		'\x3', '\x181', '\x3', '\x181', '\x5', '\x181', '\x172A', '\n', '\x181', 
		'\x3', '\x181', '\x6', '\x181', '\x172D', '\n', '\x181', '\r', '\x181', 
		'\xE', '\x181', '\x172E', '\x5', '\x181', '\x1731', '\n', '\x181', '\x3', 
		'\x182', '\x3', '\x182', '\x5', '\x182', '\x1735', '\n', '\x182', '\x3', 
		'\x182', '\x5', '\x182', '\x1738', '\n', '\x182', '\x3', '\x182', '\x3', 
		'\x182', '\x5', '\x182', '\x173C', '\n', '\x182', '\x3', '\x183', '\x3', 
		'\x183', '\x3', '\x183', '\x3', '\x183', '\x3', '\x184', '\x3', '\x184', 
		'\x3', '\x184', '\x3', '\x184', '\x3', '\x184', '\x3', '\x184', '\x3', 
		'\x184', '\x5', '\x184', '\x1749', '\n', '\x184', '\x3', '\x185', '\x3', 
		'\x185', '\x3', '\x185', '\x5', '\x185', '\x174E', '\n', '\x185', '\x3', 
		'\x185', '\x3', '\x185', '\x5', '\x185', '\x1752', '\n', '\x185', '\x3', 
		'\x185', '\x6', '\x185', '\x1755', '\n', '\x185', '\r', '\x185', '\xE', 
		'\x185', '\x1756', '\x3', '\x185', '\x3', '\x185', '\x3', '\x185', '\x3', 
		'\x185', '\x5', '\x185', '\x175D', '\n', '\x185', '\x3', '\x185', '\x3', 
		'\x185', '\x5', '\x185', '\x1761', '\n', '\x185', '\x3', '\x186', '\x3', 
		'\x186', '\x3', '\x186', '\x5', '\x186', '\x1766', '\n', '\x186', '\x3', 
		'\x186', '\x3', '\x186', '\x5', '\x186', '\x176A', '\n', '\x186', '\x3', 
		'\x186', '\x3', '\x186', '\x3', '\x186', '\x5', '\x186', '\x176F', '\n', 
		'\x186', '\x3', '\x187', '\x3', '\x187', '\x3', '\x187', '\x5', '\x187', 
		'\x1774', '\n', '\x187', '\x3', '\x187', '\x5', '\x187', '\x1777', '\n', 
		'\x187', '\x3', '\x187', '\x5', '\x187', '\x177A', '\n', '\x187', '\x3', 
		'\x187', '\x6', '\x187', '\x177D', '\n', '\x187', '\r', '\x187', '\xE', 
		'\x187', '\x177E', '\x3', '\x187', '\x3', '\x187', '\x3', '\x188', '\x3', 
		'\x188', '\x3', '\x188', '\x3', '\x188', '\x3', '\x188', '\x5', '\x188', 
		'\x1788', '\n', '\x188', '\x3', '\x188', '\x3', '\x188', '\x3', '\x188', 
		'\x3', '\x188', '\a', '\x188', '\x178E', '\n', '\x188', '\f', '\x188', 
		'\xE', '\x188', '\x1791', '\v', '\x188', '\x3', '\x188', '\x5', '\x188', 
		'\x1794', '\n', '\x188', '\x3', '\x188', '\x3', '\x188', '\x3', '\x189', 
		'\x3', '\x189', '\x3', '\x189', '\x3', '\x189', '\x3', '\x189', '\x3', 
		'\x189', '\x5', '\x189', '\x179E', '\n', '\x189', '\x3', '\x189', '\x5', 
		'\x189', '\x17A1', '\n', '\x189', '\x5', '\x189', '\x17A3', '\n', '\x189', 
		'\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18B', '\x3', 
		'\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x5', '\x18B', 
		'\x17AD', '\n', '\x18B', '\x5', '\x18B', '\x17AF', '\n', '\x18B', '\x3', 
		'\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x5', '\x18C', 
		'\x17B5', '\n', '\x18C', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', 
		'\x3', '\x18D', '\x5', '\x18D', '\x17BB', '\n', '\x18D', '\x5', '\x18D', 
		'\x17BD', '\n', '\x18D', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18E', 
		'\x3', '\x18F', '\x3', '\x18F', '\x3', '\x18F', '\x3', '\x190', '\x3', 
		'\x190', '\x3', '\x190', '\x3', '\x190', '\x3', '\x190', '\x3', '\x190', 
		'\x5', '\x190', '\x17CB', '\n', '\x190', '\x5', '\x190', '\x17CD', '\n', 
		'\x190', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', 
		'\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x5', 
		'\x191', '\x17D7', '\n', '\x191', '\x3', '\x192', '\x3', '\x192', '\x3', 
		'\x192', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x3', '\x192', 
		'\x5', '\x192', '\x17E0', '\n', '\x192', '\x3', '\x193', '\x3', '\x193', 
		'\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', '\x193', '\x3', 
		'\x193', '\x5', '\x193', '\x17E9', '\n', '\x193', '\x3', '\x194', '\x3', 
		'\x194', '\x5', '\x194', '\x17ED', '\n', '\x194', '\x3', '\x194', '\x3', 
		'\x194', '\x5', '\x194', '\x17F1', '\n', '\x194', '\x3', '\x194', '\x3', 
		'\x194', '\x3', '\x195', '\x5', '\x195', '\x17F6', '\n', '\x195', '\x3', 
		'\x195', '\x3', '\x195', '\x5', '\x195', '\x17FA', '\n', '\x195', '\x3', 
		'\x195', '\x5', '\x195', '\x17FD', '\n', '\x195', '\x3', '\x196', '\x3', 
		'\x196', '\x5', '\x196', '\x1801', '\n', '\x196', '\x3', '\x197', '\x3', 
		'\x197', '\x3', '\x197', '\x3', '\x197', '\x3', '\x197', '\x5', '\x197', 
		'\x1808', '\n', '\x197', '\x3', '\x198', '\x3', '\x198', '\x5', '\x198', 
		'\x180C', '\n', '\x198', '\x3', '\x198', '\x3', '\x198', '\x5', '\x198', 
		'\x1810', '\n', '\x198', '\x3', '\x198', '\x6', '\x198', '\x1813', '\n', 
		'\x198', '\r', '\x198', '\xE', '\x198', '\x1814', '\x3', '\x199', '\x3', 
		'\x199', '\x5', '\x199', '\x1819', '\n', '\x199', '\x3', '\x19A', '\x3', 
		'\x19A', '\x3', '\x19A', '\x5', '\x19A', '\x181E', '\n', '\x19A', '\x3', 
		'\x19B', '\x3', '\x19B', '\x5', '\x19B', '\x1822', '\n', '\x19B', '\x3', 
		'\x19C', '\x3', '\x19C', '\x5', '\x19C', '\x1826', '\n', '\x19C', '\x3', 
		'\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x5', '\x19D', '\x182B', '\n', 
		'\x19D', '\x3', '\x19E', '\x3', '\x19E', '\x5', '\x19E', '\x182F', '\n', 
		'\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x5', '\x19E', 
		'\x1834', '\n', '\x19E', '\x3', '\x19E', '\x5', '\x19E', '\x1837', '\n', 
		'\x19E', '\x3', '\x19F', '\x3', '\x19F', '\x5', '\x19F', '\x183B', '\n', 
		'\x19F', '\x3', '\x1A0', '\x3', '\x1A0', '\x5', '\x1A0', '\x183F', '\n', 
		'\x1A0', '\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A2', '\x3', '\x1A2', 
		'\x3', '\x1A2', '\x3', '\x1A2', '\x5', '\x1A2', '\x1847', '\n', '\x1A2', 
		'\x3', '\x1A3', '\x3', '\x1A3', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', 
		'\x1A5', '\x3', '\x1A5', '\x3', '\x1A6', '\x3', '\x1A6', '\x3', '\x1A7', 
		'\x3', '\x1A7', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AB', '\x3', '\x1AB', 
		'\x3', '\x1AB', '\x5', '\x1AB', '\x185C', '\n', '\x1AB', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AE', '\x3', 
		'\x1AE', '\x3', '\x1AF', '\x3', '\x1AF', '\x3', '\x1B0', '\x3', '\x1B0', 
		'\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', 
		'\x1B3', '\x3', '\x1B3', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', 
		'\x5', '\x1B4', '\x1871', '\n', '\x1B4', '\x3', '\x1B4', '\x6', '\x1B4', 
		'\x1874', '\n', '\x1B4', '\r', '\x1B4', '\xE', '\x1B4', '\x1875', '\x3', 
		'\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', 
		'\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', 
		'\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', '\x1B4', 
		'\x5', '\x1B4', '\x1886', '\n', '\x1B4', '\x3', '\x1B5', '\x5', '\x1B5', 
		'\x1889', '\n', '\x1B5', '\x3', '\x1B5', '\x6', '\x1B5', '\x188C', '\n', 
		'\x1B5', '\r', '\x1B5', '\xE', '\x1B5', '\x188D', '\x3', '\x1B6', '\x3', 
		'\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B7', '\x3', '\x1B7', 
		'\x3', '\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', 
		'\x1B7', '\x5', '\x1B7', '\x189B', '\n', '\x1B7', '\x3', '\x1B8', '\x3', 
		'\x1B8', '\x5', '\x1B8', '\x189F', '\n', '\x1B8', '\x3', '\x1B8', '\a', 
		'\x1B8', '\x18A2', '\n', '\x1B8', '\f', '\x1B8', '\xE', '\x1B8', '\x18A5', 
		'\v', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x5', '\x1B8', '\x18A9', 
		'\n', '\x1B8', '\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x18AD', 
		'\n', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x5', '\x1B9', '\x18B1', 
		'\n', '\x1B9', '\a', '\x1B9', '\x18B3', '\n', '\x1B9', '\f', '\x1B9', 
		'\xE', '\x1B9', '\x18B6', '\v', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x5', '\x1B9', '\x18BA', '\n', '\x1B9', '\x3', '\x1BA', '\x3', '\x1BA', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x5', '\x1BA', '\x18C1', 
		'\n', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x5', 
		'\x1BA', '\x18C6', '\n', '\x1BA', '\x5', '\x1BA', '\x18C8', '\n', '\x1BA', 
		'\x5', '\x1BA', '\x18CA', '\n', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', 
		'\x1BA', '\x5', '\x1BA', '\x18D3', '\n', '\x1BA', '\x3', '\x1BA', '\x3', 
		'\x1BA', '\x5', '\x1BA', '\x18D7', '\n', '\x1BA', '\x6', '\x1BA', '\x18D9', 
		'\n', '\x1BA', '\r', '\x1BA', '\xE', '\x1BA', '\x18DA', '\x5', '\x1BA', 
		'\x18DD', '\n', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x5', '\x1BA', 
		'\x18E1', '\n', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', '\x1BB', 
		'\x3', '\x1BC', '\x3', '\x1BC', '\x3', '\x1BC', '\x3', '\x1BC', '\x5', 
		'\x1BC', '\x18EA', '\n', '\x1BC', '\x3', '\x1BC', '\x3', '\x1BC', '\x3', 
		'\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x18F0', '\n', '\x1BD', '\x3', 
		'\x1BD', '\x3', '\x1BD', '\x5', '\x1BD', '\x18F4', '\n', '\x1BD', '\x5', 
		'\x1BD', '\x18F6', '\n', '\x1BD', '\x3', '\x1BE', '\x3', '\x1BE', '\x5', 
		'\x1BE', '\x18FA', '\n', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x5', 
		'\x1BE', '\x18FE', '\n', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', 
		'\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x1905', '\n', 
		'\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', 
		'\x3', '\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x190D', '\n', '\x1BE', 
		'\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x3', 
		'\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x1915', '\n', '\x1BE', '\x5', 
		'\x1BE', '\x1917', '\n', '\x1BE', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', 
		'\x1BF', '\x3', '\x1BF', '\x5', '\x1BF', '\x191D', '\n', '\x1BF', '\x3', 
		'\x1BF', '\x5', '\x1BF', '\x1920', '\n', '\x1BF', '\x3', '\x1BF', '\x3', 
		'\x1BF', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x5', '\x1C0', '\x1938', '\n', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x5', '\x1C0', '\x193F', '\n', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x5', '\x1C0', '\x1960', 
		'\n', '\x1C0', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', 
		'\x1C1', '\x1965', '\n', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', '\x1968', 
		'\n', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', '\x5', 
		'\x1C1', '\x196D', '\n', '\x1C1', '\x5', '\x1C1', '\x196F', '\n', '\x1C1', 
		'\x3', '\x1C1', '\x3', '\x1C1', '\a', '\x1C1', '\x1973', '\n', '\x1C1', 
		'\f', '\x1C1', '\xE', '\x1C1', '\x1976', '\v', '\x1C1', '\x3', '\x1C2', 
		'\x3', '\x1C2', '\x3', '\x1C2', '\a', '\x1C2', '\x197B', '\n', '\x1C2', 
		'\f', '\x1C2', '\xE', '\x1C2', '\x197E', '\v', '\x1C2', '\x3', '\x1C3', 
		'\x3', '\x1C3', '\x5', '\x1C3', '\x1982', '\n', '\x1C3', '\x3', '\x1C3', 
		'\x3', '\x1C3', '\x3', '\x1C3', '\x5', '\x1C3', '\x1987', '\n', '\x1C3', 
		'\x3', '\x1C3', '\x5', '\x1C3', '\x198A', '\n', '\x1C3', '\x3', '\x1C4', 
		'\x3', '\x1C4', '\x5', '\x1C4', '\x198E', '\n', '\x1C4', '\x3', '\x1C4', 
		'\x3', '\x1C4', '\x3', '\x1C5', '\x3', '\x1C5', '\x5', '\x1C5', '\x1994', 
		'\n', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', 
		'\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', 
		'\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', 
		'\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', 
		'\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', 
		'\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', 
		'\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x5', '\x1C5', '\x19B3', 
		'\n', '\x1C5', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x19BA', '\n', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', 
		'\x19C9', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x19D9', '\n', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', 
		'\x19EC', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x19FD', 
		'\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1A04', '\n', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x5', '\x1C6', '\x1A0C', '\n', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x5', '\x1C6', '\x1A19', '\n', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1A22', '\n', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1A2B', '\n', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1A34', '\n', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', 
		'\x1C6', '\x1A3E', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', 
		'\x1A46', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x5', '\x1C6', '\x1A50', '\n', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1A5A', '\n', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x5', '\x1C6', '\x1A66', '\n', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', 
		'\x1C6', '\x1A76', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x5', '\x1C6', '\x1A88', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x5', '\x1C6', '\x1A95', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1AA4', '\n', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x5', '\x1C6', '\x1AAF', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1AB9', '\n', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', 
		'\x1C6', '\x1AC4', '\n', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x5', '\x1C6', '\x1ACE', '\n', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x5', '\x1C6', '\x1ADF', '\n', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1AE5', '\n', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x5', '\x1C6', '\x1AFB', '\n', 
		'\x1C6', '\x3', '\x1C7', '\x3', '\x1C7', '\x5', '\x1C7', '\x1AFF', '\n', 
		'\x1C7', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', 
		'\x1B04', '\n', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x5', '\x1C8', '\x1B0A', '\n', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x1B10', 
		'\n', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', 
		'\x1C8', '\x5', '\x1C8', '\x1B16', '\n', '\x1C8', '\x3', '\x1C8', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x1B1B', '\n', '\x1C8', '\x5', 
		'\x1C8', '\x1B1D', '\n', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', '\x1B20', 
		'\n', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x5', '\x1C8', '\x1B2A', '\n', '\x1C8', '\x3', '\x1C8', '\x5', '\x1C8', 
		'\x1B2D', '\n', '\x1C8', '\x5', '\x1C8', '\x1B2F', '\n', '\x1C8', '\x5', 
		'\x1C8', '\x1B31', '\n', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', 
		'\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', 
		'\x1C8', '\x5', '\x1C8', '\x1B3F', '\n', '\x1C8', '\x3', '\x1C9', '\x3', 
		'\x1C9', '\x5', '\x1C9', '\x1B43', '\n', '\x1C9', '\x3', '\x1C9', '\x3', 
		'\x1C9', '\x3', '\x1CA', '\x3', '\x1CA', '\x3', '\x1CB', '\x3', '\x1CB', 
		'\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', 
		'\x1CE', '\x3', '\x1CE', '\x3', '\x1CF', '\x3', '\x1CF', '\x3', '\x1D0', 
		'\x3', '\x1D0', '\x3', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D2', '\x3', 
		'\x1D2', '\x3', '\x1D3', '\x3', '\x1D3', '\x3', '\x1D4', '\x3', '\x1D4', 
		'\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', 
		'\x1D6', '\a', '\x1D6', '\x1B62', '\n', '\x1D6', '\f', '\x1D6', '\xE', 
		'\x1D6', '\x1B65', '\v', '\x1D6', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', 
		'\x1D8', '\x3', '\x1D8', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x5', '\x1DA', '\x1B6F', '\n', '\x1DA', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\a', '\x1DB', '\x1B74', '\n', '\x1DB', 
		'\f', '\x1DB', '\xE', '\x1DB', '\x1B77', '\v', '\x1DB', '\x3', '\x1DC', 
		'\x3', '\x1DC', '\x3', '\x1DD', '\x3', '\x1DD', '\x3', '\x1DE', '\x3', 
		'\x1DE', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', 
		'\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E1', '\x3', '\x1E1', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x3', '\x1E3', '\x3', '\x1E3', '\x5', '\x1E3', 
		'\x1B8B', '\n', '\x1E3', '\x3', '\x1E4', '\x3', '\x1E4', '\x3', '\x1E5', 
		'\x3', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', 
		'\x1E6', '\x2', '\x5', '\x2BC', '\x2C0', '\x2CA', '\x1E7', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', 
		'\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', 
		'\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', 
		'\xDA', '\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', 
		'\xEC', '\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', 
		'\xFE', '\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', 
		'\x10E', '\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', 
		'\x11E', '\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', 
		'\x12E', '\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', 
		'\x13E', '\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', 
		'\x14E', '\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', 
		'\x15E', '\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', 
		'\x16E', '\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', 
		'\x17E', '\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', 
		'\x18E', '\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', 
		'\x19E', '\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', 
		'\x1AE', '\x1B0', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', 
		'\x1BE', '\x1C0', '\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', 
		'\x1CE', '\x1D0', '\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', 
		'\x1DE', '\x1E0', '\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', 
		'\x1EE', '\x1F0', '\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', 
		'\x1FE', '\x200', '\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', 
		'\x20E', '\x210', '\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', 
		'\x21E', '\x220', '\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', 
		'\x22E', '\x230', '\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', 
		'\x23E', '\x240', '\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', 
		'\x24E', '\x250', '\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', 
		'\x25E', '\x260', '\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', 
		'\x26E', '\x270', '\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', 
		'\x27E', '\x280', '\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', 
		'\x28E', '\x290', '\x292', '\x294', '\x296', '\x298', '\x29A', '\x29C', 
		'\x29E', '\x2A0', '\x2A2', '\x2A4', '\x2A6', '\x2A8', '\x2AA', '\x2AC', 
		'\x2AE', '\x2B0', '\x2B2', '\x2B4', '\x2B6', '\x2B8', '\x2BA', '\x2BC', 
		'\x2BE', '\x2C0', '\x2C2', '\x2C4', '\x2C6', '\x2C8', '\x2CA', '\x2CC', 
		'\x2CE', '\x2D0', '\x2D2', '\x2D4', '\x2D6', '\x2D8', '\x2DA', '\x2DC', 
		'\x2DE', '\x2E0', '\x2E2', '\x2E4', '\x2E6', '\x2E8', '\x2EA', '\x2EC', 
		'\x2EE', '\x2F0', '\x2F2', '\x2F4', '\x2F6', '\x2F8', '\x2FA', '\x2FC', 
		'\x2FE', '\x300', '\x302', '\x304', '\x306', '\x308', '\x30A', '\x30C', 
		'\x30E', '\x310', '\x312', '\x314', '\x316', '\x318', '\x31A', '\x31C', 
		'\x31E', '\x320', '\x322', '\x324', '\x326', '\x328', '\x32A', '\x32C', 
		'\x32E', '\x330', '\x332', '\x334', '\x336', '\x338', '\x33A', '\x33C', 
		'\x33E', '\x340', '\x342', '\x344', '\x346', '\x348', '\x34A', '\x34C', 
		'\x34E', '\x350', '\x352', '\x354', '\x356', '\x358', '\x35A', '\x35C', 
		'\x35E', '\x360', '\x362', '\x364', '\x366', '\x368', '\x36A', '\x36C', 
		'\x36E', '\x370', '\x372', '\x374', '\x376', '\x378', '\x37A', '\x37C', 
		'\x37E', '\x380', '\x382', '\x384', '\x386', '\x388', '\x38A', '\x38C', 
		'\x38E', '\x390', '\x392', '\x394', '\x396', '\x398', '\x39A', '\x39C', 
		'\x39E', '\x3A0', '\x3A2', '\x3A4', '\x3A6', '\x3A8', '\x3AA', '\x3AC', 
		'\x3AE', '\x3B0', '\x3B2', '\x3B4', '\x3B6', '\x3B8', '\x3BA', '\x3BC', 
		'\x3BE', '\x3C0', '\x3C2', '\x3C4', '\x3C6', '\x3C8', '\x3CA', '\x2', 
		'\x8D', '\x4', '\x2', '\x15', '\x15', '\x108', '\x108', '\x4', '\x2', 
		'\f', '\f', '\x19C', '\x19C', '\x5', '\x2', '\xDE', '\xDE', '\x11E', '\x11E', 
		'\x1B8', '\x1B8', '\x4', '\x2', 'N', 'N', '\x17E', '\x17E', '\x5', '\x2', 
		'\x33', '\x33', '\x188', '\x188', '\x20B', '\x20B', '\x4', '\x2', '\x91', 
		'\x91', '\xA5', '\xA5', '\x4', '\x2', '\n', '\n', '(', '(', '\x5', '\x2', 
		'\x8A', '\x8A', '\xFE', '\xFE', '\x24F', '\x24F', '\x5', '\x2', '\x151', 
		'\x151', '\x174', '\x174', '\x18C', '\x18C', '\x4', '\x2', '\xCE', '\xCE', 
		'\x257', '\x257', '\x4', '\x2', '\x33', '\x33', '\x20B', '\x20B', '\x4', 
		'\x2', '\x5', '\x5', '\x99', '\x99', '\x5', '\x2', '\x5', '\x5', '\x99', 
		'\x99', '\x144', '\x144', '\x5', '\x2', 's', 's', '\x17D', '\x17D', '\x20C', 
		'\x20C', '\x4', '\x2', '\x130', '\x130', '\x17E', '\x17E', '\x4', '\x2', 
		'\x138', '\x138', '\x214', '\x214', '\x5', '\x2', '\xC4', '\xC4', '\xFF', 
		'\xFF', '\x187', '\x187', '\x4', '\x2', '\xBE', '\xBE', '\xD7', '\xD7', 
		'\x4', '\x2', '\x84', '\x84', '\x22A', '\x22A', '\x4', '\x2', '\x123', 
		'\x123', '\x24A', '\x24A', '\x4', '\x2', '\x5', '\x5', '\x1C7', '\x1C7', 
		'\x4', '\x2', '\x6', '\x6', '\x89', '\x89', '\x4', '\x2', '\xE', '\xE', 
		'p', 'p', '\x4', '\x2', '\x107', '\x107', '\x262', '\x262', '\x4', '\x2', 
		'\xE5', '\xE6', '\x173', '\x173', '\x4', '\x2', '\x87', '\x87', '\xE9', 
		'\xE9', '\x4', '\x2', '\x163', '\x163', '\x1C6', '\x1C6', '\x4', '\x2', 
		'\x168', '\x168', '\x257', '\x257', '\x4', '\x2', '\x171', '\x171', '\x178', 
		'\x178', '\x4', '\x2', '%', '%', '\x1EC', '\x1EC', '\x4', '\x2', '?', 
		'?', '\x1B5', '\x1B5', '\x4', '\x2', '\xE2', '\xE2', '\x12B', '\x12B', 
		'\a', '\x2', 'm', 'm', '\xE2', '\xE2', '\x12B', '\x12B', '\x137', '\x137', 
		'\x15F', '\x15F', '\x4', '\x2', '\b', '\b', '$', '$', '\x4', '\x2', '\x13', 
		'\x13', '\x1B5', '\x1B5', '\x4', '\x2', '\x24D', '\x24D', '\x252', '\x252', 
		'\x4', '\x2', '\x165', '\x165', '\x208', '\x208', '\x4', '\x2', '\xD4', 
		'\xD4', '\x18D', '\x18D', '\x4', '\x2', ',', ',', '\x204', '\x204', '\x4', 
		'\x2', '\x170', '\x170', '\x176', '\x176', '\x5', '\x2', '\xC3', '\xC3', 
		'\x124', '\x124', '\x15B', '\x15B', '\x4', '\x2', '\x1F', '\x1F', '\x12F', 
		'\x12F', '\x4', '\x2', '\x2AF', '\x2AF', '\x2D0', '\x2D0', '\x4', '\x2', 
		'\xDD', '\xDD', '\x15A', '\x15A', '\x4', '\x2', '\x8A', '\x8A', '\x1A9', 
		'\x1A9', '\x4', '\x2', '\x249', '\x249', '\x2AD', '\x2AD', '\x5', '\x2', 
		'\x84', '\x84', '\x10E', '\x10E', '\x1BD', '\x1BD', '\x5', '\x2', '\x84', 
		'\x84', '\x10E', '\x10E', '\x15F', '\x15F', '\x4', '\x2', 'q', 'q', '\x88', 
		'\x88', '\x6', '\x2', '\xF6', '\xF6', '\xFD', '\xFD', '\x156', '\x156', 
		'\x184', '\x184', '\x4', '\x2', '\x84', '\x84', '\x2BC', '\x2BC', '\x3', 
		'\x3', '\x2C5', '\x2C5', '\x3', '\x2', '\x2C5', '\x2C5', '\x3', '\x2', 
		'\x1D3', '\x1D4', '\x4', '\x2', '\x177', '\x177', '\x26D', '\x26D', '\x3', 
		'\x2', '^', '_', '\x4', '\x2', '\x169', '\x169', '\x263', '\x263', '\x4', 
		'\x2', '&', '&', '\xE9', '\xE9', '\x4', '\x2', '\x36', '\x36', '\x8B', 
		'\x8B', '\x5', '\x2', '\xE', '\xE', '\x93', '\x93', '\x248', '\x248', 
		'\x4', '\x2', 'n', 'n', '\x14A', '\x14A', '\x5', '\x2', '\xD4', '\xD4', 
		'\x114', '\x114', '\x1D9', '\x1D9', '\x4', '\x2', '\x1E9', '\x1E9', '\x230', 
		'\x230', '\x5', '\x2', '\x1E9', '\x1E9', '\x206', '\x206', '\x230', '\x230', 
		'\x4', '\x2', '\xB4', '\xB4', '\xEA', '\xEA', '\x4', '\x2', 'o', 'o', 
		'\x1DD', '\x1DD', '\x4', '\x2', '\xE8', '\xE8', '\x10E', '\x10E', '\x4', 
		'\x2', '\xE', '\xE', '\x24E', '\x24E', '\x4', '\x2', '!', '!', '\x1F2', 
		'\x1F2', '\x4', '\x2', '\x16', '\x16', '\x8C', '\x8C', '\x4', '\x2', '\xC5', 
		'\xC5', '\x111', '\x111', '\x4', '\x2', '\xE', '\xE', '\xC5', '\xC5', 
		'\x4', '\x2', '\x228', '\x228', '\x22D', '\x22D', '\x4', '\x2', '\x138', 
		'\x138', '\x219', '\x219', '\x3', '\x2', '\x118', '\x11B', '\x3', '\x2', 
		'\x2C2', '\x2C3', '\x4', '\x2', '\x2B6', '\x2B6', '\x2BA', '\x2BA', '\x3', 
		'\x2', '\x2B7', '\x2B8', '\x4', '\x2', '\x83', '\x83', '\xEC', '\xEC', 
		'\x6', '\x2', '\xE', '\xE', '\x12', '\x12', '\xB8', '\xB8', '\x207', '\x207', 
		'\x5', '\x2', '\x35', '\x35', '\x113', '\x113', '\x239', '\x239', '\x4', 
		'\x2', '\xE', '\xE', '\x93', '\x93', '\x4', '\x2', '\x42', '\x42', '\x270', 
		'\x270', '\x4', '\x2', '\x93', '\x93', '\x248', '\x248', '\x3', '\x2', 
		'\x196', '\x199', '\x4', '\x2', '>', '>', 'V', 'V', '\x4', '\x2', '\xC6', 
		'\xC6', '\x112', '\x112', '\x4', '\x2', 'G', 'G', '\x14D', '\x14D', '\x4', 
		'\x2', '\x271', '\x271', '\x274', '\x274', '\x4', '\x2', '\xAB', '\xAB', 
		'\x159', '\x159', '\x4', '\x2', '\xAF', '\xAF', '\x148', '\x148', '\x4', 
		'\x2', '\x63', '\x63', '\x97', '\x97', '\x4', '\x2', '\xE0', '\xE0', '\x1FC', 
		'\x1FC', '\a', '\x2', '\x28E', '\x290', '\x292', '\x297', '\x299', '\x29A', 
		'\x29C', '\x29C', '\x2A0', '\x2A3', '\x3', '\x2', '\x287', '\x28D', '\x3', 
		'\x2', '\x281', '\x286', '\x4', '\x2', '\x1B8', '\x1B8', '\x1E0', '\x1E0', 
		'\x4', '\x2', '\xCB', '\xCB', '\x1A6', '\x1A6', '\x4', '\x2', '\x164', 
		'\x164', '\x1E7', '\x1E7', '\x3', '\x2', '\xAC', '\xAD', '\x4', '\x2', 
		'\x181', '\x181', '\x20D', '\x20D', '\x5', '\x2', '\xC0', '\xC0', '\x21D', 
		'\x21D', '\x264', '\x264', '\x4', '\x2', 'T', 'T', '\x1DC', '\x1DC', '\x5', 
		'\x2', 'T', 'T', '\x15F', '\x15F', '\x1DC', '\x1DC', '\x4', '\x2', '\x18E', 
		'\x18E', '\x21A', '\x21A', '\x4', '\x2', '\x1CB', '\x1CB', '\x209', '\x209', 
		'\x4', '\x2', '\xE8', '\xE8', '\x1CC', '\x1CC', '\x3', '\x2', '\x19A', 
		'\x19B', '\x4', '\x2', 'y', 'y', '\x27D', '\x27D', '\x4', '\x2', '\x145', 
		'\x145', '\x1EB', '\x1EB', '\x4', '\x2', ';', ';', '\x46', '\x46', '\x5', 
		'\x2', '\xF', '\xF', 'k', 'k', '\x99', '\x99', '\x4', '\x2', '\xF', '\xF', 
		'\x99', '\x99', '\x4', '\x2', 'k', 'k', '\x99', '\x99', '\x4', '\x2', 
		'\xF', '\xF', 'k', 'k', '\x5', '\x2', '\xF', '\xF', '\x99', '\x99', '\xB6', 
		'\xB6', '\x4', '\x2', '\x12', '\x12', '\xBD', '\xBD', '\x4', '\x2', 'J', 
		'J', '\x1B2', '\x1B2', '\x6', '\x2', '\xF', '\xF', 'S', 'S', '\x99', '\x99', 
		'\x1EF', '\x1EF', '\x6', '\x2', '\xF', '\xF', '\x99', '\x99', '\x1EF', 
		'\x1EF', '\x24F', '\x24F', '\x5', '\x2', '\x8A', '\x8A', '\x99', '\x99', 
		'\xFE', '\xFE', '\b', '\x2', '\xF', '\xF', '\x8A', '\x8A', '\x99', '\x99', 
		'\xFE', '\xFE', '\x1EF', '\x1EF', '\x24F', '\x24F', '\x4', '\x2', '\x99', 
		'\x99', '\x24F', '\x24F', '\x5', '\x2', '\xF', '\xF', '\x99', '\x99', 
		'\xD9', '\xD9', '\x5', '\x2', '\xF', '\xF', '\x99', '\x99', '\x1EF', '\x1EF', 
		'\x5', '\x2', '\xF', '\xF', 'k', 'k', '\x1CD', '\x1CD', '\x5', '\x2', 
		'\xF', '\xF', '\x99', '\x99', '\x255', '\x255', '\f', '\x2', '\xF', '\xF', 
		'#', '#', 'S', 'S', '\x8A', '\x8A', '\x99', '\x99', '\xFE', '\xFE', '\x123', 
		'\x123', '\x1BA', '\x1BA', '\x1EF', '\x1EF', '\x24F', '\x24F', '\a', '\x2', 
		'\xF', '\xF', 'k', 'k', '\x99', '\x99', '\x12D', '\x12D', '\x249', '\x249', 
		'\x6', '\x2', '\xF', '\xF', '\x99', '\x99', '\xB6', '\xB6', '\x244', '\x244', 
		'\x5', '\x2', '\x99', '\x99', '\x13A', '\x13A', '\x244', '\x244', '\x4', 
		'\x2', '\x10', '\x10', '\x1A', '\x1A', '\x4', '\x2', '\x8E', '\x8E', '\x23A', 
		'\x23A', '\b', '\x2', 'y', 'y', '\xE3', '\xE3', '\x13F', '\x13F', '\x145', 
		'\x145', '\x1EB', '\x1EB', '\x27D', '\x27D', '\x98', '\x2', '\x5', '\x5', 
		'\n', '\r', '\x10', '\x10', '\x14', '\x14', '\x17', '\x1A', '\x1D', '\x1D', 
		'\x1F', '\x1F', '!', '\"', '&', '&', '(', '(', '+', '+', '-', '\x31', 
		'\x33', '\x35', '\x38', '\x39', ';', ';', '=', '>', '@', '@', '\x42', 
		'\x42', '\x45', 'G', 'I', 'I', 'K', 'N', 'P', 'P', 'R', 'X', ']', '`', 
		'\x63', 'j', 'n', 'o', 'q', 'v', 'y', 'y', '{', '\x80', '\x82', '\x83', 
		'\x85', '\x85', '\x87', '\x88', '\x8A', '\x8A', '\x8D', '\x8D', '\x8F', 
		'\x8F', '\x91', '\x92', '\x97', '\x98', '\x9A', '\x9A', '\x9C', '\x9C', 
		'\xA1', '\xA1', '\xA4', '\xA6', '\xAB', '\xAF', '\xB1', '\xB4', '\xB6', 
		'\xB6', '\xB9', '\xB9', '\xBB', '\xBB', '\xBD', '\xBD', '\xBF', '\xC0', 
		'\xC4', '\xC6', '\xC9', '\xC9', '\xCB', '\xCE', '\xD4', '\xD5', '\xDB', 
		'\xDB', '\xDE', '\xDE', '\xE0', '\xE0', '\xE3', '\xE3', '\xE6', '\xE6', 
		'\xE8', '\xEE', '\xF2', '\xF4', '\xFA', '\xFA', '\xFC', '\xFD', '\xFF', 
		'\x101', '\x103', '\x104', '\x106', '\x106', '\x109', '\x10B', '\x10D', 
		'\x114', '\x116', '\x11A', '\x11C', '\x11D', '\x120', '\x121', '\x125', 
		'\x125', '\x127', '\x12A', '\x12C', '\x12C', '\x130', '\x131', '\x134', 
		'\x134', '\x136', '\x136', '\x138', '\x138', '\x13A', '\x13A', '\x13C', 
		'\x13C', '\x13F', '\x142', '\x144', '\x145', '\x147', '\x151', '\x153', 
		'\x153', '\x156', '\x157', '\x159', '\x159', '\x15F', '\x160', '\x164', 
		'\x164', '\x16B', '\x16F', '\x171', '\x171', '\x173', '\x174', '\x177', 
		'\x177', '\x179', '\x17A', '\x17D', '\x17D', '\x17F', '\x17F', '\x181', 
		'\x182', '\x184', '\x184', '\x186', '\x189', '\x18B', '\x18C', '\x18E', 
		'\x18E', '\x190', '\x190', '\x192', '\x192', '\x19C', '\x19C', '\x19F', 
		'\x1A0', '\x1A3', '\x1A8', '\x1B2', '\x1B2', '\x1B7', '\x1BC', '\x1BF', 
		'\x1BF', '\x1C1', '\x1C2', '\x1C4', '\x1C5', '\x1C8', '\x1C9', '\x1CC', 
		'\x1CC', '\x1CE', '\x1D0', '\x1D3', '\x1D7', '\x1D9', '\x1D9', '\x1DC', 
		'\x1E1', '\x1E3', '\x1E5', '\x1E7', '\x1E9', '\x1EB', '\x1EB', '\x1ED', 
		'\x1EE', '\x1F0', '\x1F0', '\x1F2', '\x1F5', '\x1F7', '\x1FA', '\x1FC', 
		'\x201', '\x203', '\x203', '\x205', '\x207', '\x20B', '\x20D', '\x20F', 
		'\x20F', '\x211', '\x215', '\x217', '\x21E', '\x221', '\x221', '\x22A', 
		'\x22A', '\x22F', '\x237', '\x239', '\x23B', '\x23D', '\x23E', '\x240', 
		'\x240', '\x242', '\x244', '\x249', '\x249', '\x24C', '\x24C', '\x24E', 
		'\x24E', '\x250', '\x251', '\x253', '\x255', '\x257', '\x257', '\x259', 
		'\x260', '\x263', '\x266', '\x269', '\x26A', '\x26C', '\x290', '\x292', 
		'\x297', '\x299', '\x29A', '\x29C', '\x29D', '\x29F', '\x2A3', '\x2D0', 
		'\x2D0', '\x5', '\x2', 'I', 'I', '\x291', '\x291', '\x29D', '\x29F', '\a', 
		'\x2', 'j', 'j', '\x28E', '\x28E', '\x298', '\x298', '\x29B', '\x29B', 
		'\x2A0', '\x2A0', '\x3', '\x2', '\x2AD', '\x2AE', '\x4', '\x2', '\x2A8', 
		'\x2A8', '\x2AF', '\x2AF', '\x2', '\x1F6A', '\x2', '\x3D5', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x6', '\x3EE', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x3F3', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x406', '\x3', '\x2', '\x2', '\x2', '\f', '\x43A', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x10', '\x44C', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x450', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x45C', '\x3', '\x2', '\x2', '\x2', '\x16', '\x461', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x484', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\x4A0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x4C6', '\x3', '\x2', '\x2', '\x2', ' ', '\x4C8', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x4D9', '\x3', '\x2', '\x2', '\x2', '$', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x4FD', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x502', '\x3', '\x2', '\x2', '\x2', '*', '\x515', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x544', '\x3', '\x2', '\x2', '\x2', '.', '\x561', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x586', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x58B', '\x3', '\x2', '\x2', '\x2', '\x34', '\x5A4', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x38', '\x5C5', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x5CE', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x5D7', '\x3', '\x2', '\x2', '\x2', '>', '\x5DB', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x42', '\x5F8', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x5FA', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x5FE', '\x3', '\x2', '\x2', '\x2', 'H', '\x62F', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x64B', '\x3', '\x2', '\x2', '\x2', 'L', '\x64D', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x65B', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x660', '\x3', '\x2', '\x2', '\x2', 'R', '\x665', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x66B', '\x3', '\x2', '\x2', '\x2', 'V', '\x66E', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x679', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x688', '\x3', '\x2', '\x2', '\x2', '\\', '\x699', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x6AA', '\x3', '\x2', '\x2', '\x2', '`', '\x6B2', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x6B7', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x6C7', '\x3', '\x2', '\x2', '\x2', '\x66', '\x6CB', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\x6E3', '\x3', '\x2', '\x2', '\x2', 'j', '\x6E6', 
		'\x3', '\x2', '\x2', '\x2', 'l', '\x6EC', '\x3', '\x2', '\x2', '\x2', 
		'n', '\x6F8', '\x3', '\x2', '\x2', '\x2', 'p', '\x701', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\x71D', '\x3', '\x2', '\x2', '\x2', 't', '\x723', 
		'\x3', '\x2', '\x2', '\x2', 'v', '\x726', '\x3', '\x2', '\x2', '\x2', 
		'x', '\x72D', '\x3', '\x2', '\x2', '\x2', 'z', '\x735', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x741', '\x3', '\x2', '\x2', '\x2', '~', '\x743', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x747', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x74D', '\x3', '\x2', '\x2', '\x2', '\x84', '\x766', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\x785', '\x3', '\x2', '\x2', '\x2', '\x88', '\x7B2', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x7BC', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x7BE', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x7C3', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x7D1', '\x3', '\x2', '\x2', '\x2', '\x92', '\x7D3', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x7D8', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x7E8', '\x3', '\x2', '\x2', '\x2', '\x98', '\x809', '\x3', '\x2', 
		'\x2', '\x2', '\x9A', '\x82C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x830', 
		'\x3', '\x2', '\x2', '\x2', '\x9E', '\x83F', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x841', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x844', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\x849', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x853', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\x86F', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\x871', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x875', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\x888', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x890', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\x8C1', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\x8C3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x8C8', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x8CC', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x8D2', 
		'\x3', '\x2', '\x2', '\x2', '\xBC', '\x8D6', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\x8DE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x8F8', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\x8FA', '\x3', '\x2', '\x2', '\x2', '\xC4', '\x900', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\x903', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\x906', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x909', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\x93F', '\x3', '\x2', '\x2', '\x2', '\xCE', '\x941', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\x94C', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\x954', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x95F', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\x961', '\x3', '\x2', '\x2', '\x2', '\xD8', '\x966', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\x96E', '\x3', '\x2', '\x2', '\x2', 
		'\xDC', '\x985', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x99C', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\x9CE', '\x3', '\x2', '\x2', '\x2', '\xE2', '\x9D2', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\x9F1', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\x9F3', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xA0A', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xA36', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xA50', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xA61', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xA65', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xA67', '\x3', '\x2', 
		'\x2', '\x2', '\xF4', '\xA69', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xA6B', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xA6E', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xA72', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xA8C', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xA92', '\x3', '\x2', '\x2', '\x2', '\x100', '\xAA0', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\xAAD', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\xAAF', '\x3', '\x2', '\x2', '\x2', '\x106', '\xAB2', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\xAC3', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\xAE0', '\x3', '\x2', '\x2', '\x2', '\x10C', '\xAE4', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\xAEB', '\x3', '\x2', '\x2', '\x2', '\x110', '\xAF1', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\xAF3', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\xB27', '\x3', '\x2', '\x2', '\x2', '\x116', '\xB29', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\xB3B', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\xB3E', '\x3', '\x2', '\x2', '\x2', '\x11C', '\xB40', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\xB42', '\x3', '\x2', '\x2', '\x2', '\x120', '\xB48', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\xB4A', '\x3', '\x2', '\x2', '\x2', 
		'\x124', '\xB4C', '\x3', '\x2', '\x2', '\x2', '\x126', '\xB50', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\xB5B', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\xB73', '\x3', '\x2', '\x2', '\x2', '\x12C', '\xB76', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\xB78', '\x3', '\x2', '\x2', '\x2', '\x130', '\xB83', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\xB88', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\xB8B', '\x3', '\x2', '\x2', '\x2', '\x136', '\xB96', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\xB9A', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\xBA5', '\x3', '\x2', '\x2', '\x2', '\x13C', '\xBA8', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\xBAE', '\x3', '\x2', '\x2', '\x2', '\x140', '\xBB5', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\xBC1', '\x3', '\x2', '\x2', '\x2', 
		'\x144', '\xBDA', '\x3', '\x2', '\x2', '\x2', '\x146', '\xBE6', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\xBF2', '\x3', '\x2', '\x2', '\x2', '\x14C', '\xC36', '\x3', '\x2', '\x2', 
		'\x2', '\x14E', '\xC39', '\x3', '\x2', '\x2', '\x2', '\x150', '\xC46', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\xC65', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\xC8A', '\x3', '\x2', '\x2', '\x2', '\x156', '\xC8E', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\xC93', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\xCC6', '\x3', '\x2', '\x2', '\x2', '\x15C', '\xCC8', '\x3', '\x2', '\x2', 
		'\x2', '\x15E', '\xCCF', '\x3', '\x2', '\x2', '\x2', '\x160', '\xCD8', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\xCE3', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\xCEA', '\x3', '\x2', '\x2', '\x2', '\x166', '\xCEE', '\x3', 
		'\x2', '\x2', '\x2', '\x168', '\xCF2', '\x3', '\x2', '\x2', '\x2', '\x16A', 
		'\xCF6', '\x3', '\x2', '\x2', '\x2', '\x16C', '\xCFD', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\xD09', '\x3', '\x2', '\x2', '\x2', '\x170', '\xD10', 
		'\x3', '\x2', '\x2', '\x2', '\x172', '\xD13', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\xD19', '\x3', '\x2', '\x2', '\x2', '\x176', '\xD28', '\x3', 
		'\x2', '\x2', '\x2', '\x178', '\xD2B', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\xD2F', '\x3', '\x2', '\x2', '\x2', '\x17C', '\xD34', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\xD38', '\x3', '\x2', '\x2', '\x2', '\x180', '\xD49', 
		'\x3', '\x2', '\x2', '\x2', '\x182', '\xD4F', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\xD59', '\x3', '\x2', '\x2', '\x2', '\x186', '\xD66', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\xD78', '\x3', '\x2', '\x2', '\x2', '\x18C', '\xD7A', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\xD88', '\x3', '\x2', '\x2', '\x2', '\x190', '\xD99', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\xDB2', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\xDBC', '\x3', '\x2', '\x2', '\x2', '\x196', '\xDC0', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\xDE3', '\x3', '\x2', '\x2', '\x2', '\x19A', 
		'\xDEF', '\x3', '\x2', '\x2', '\x2', '\x19C', '\xDFA', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\xE00', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\xE0B', 
		'\x3', '\x2', '\x2', '\x2', '\x1A2', '\xE17', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\xE1F', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\xE2E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\xE32', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		'\xE4C', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\xE4F', '\x3', '\x2', '\x2', 
		'\x2', '\x1AE', '\xE55', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\xE5A', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\xE62', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4', '\xE6A', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\xE6D', '\x3', 
		'\x2', '\x2', '\x2', '\x1B8', '\xE7D', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\xE82', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\xE86', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\xEAE', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\xEB0', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\xEC6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\xEC8', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\xECD', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\xECF', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\xED1', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\xED3', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\xED7', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\xEDC', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\xEE2', '\x3', '\x2', '\x2', '\x2', 
		'\x1D4', '\xEE8', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\xEF6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\xF0A', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\xF0F', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\xF1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1DE', '\xF1E', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\xF2C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2', '\xF36', '\x3', '\x2', '\x2', '\x2', 
		'\x1E4', '\xF3C', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\xF3E', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\xF41', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\xF4A', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\xF62', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\xF71', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\xF73', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\xF88', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\xF97', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\xFAD', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\xFB4', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\xFC1', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\xFC4', '\x3', '\x2', '\x2', 
		'\x2', '\x1FE', '\xFD9', '\x3', '\x2', '\x2', '\x2', '\x200', '\xFE3', 
		'\x3', '\x2', '\x2', '\x2', '\x202', '\xFEC', '\x3', '\x2', '\x2', '\x2', 
		'\x204', '\xFFD', '\x3', '\x2', '\x2', '\x2', '\x206', '\x1028', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x1036', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x103E', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x1042', '\x3', '\x2', 
		'\x2', '\x2', '\x20E', '\x1061', '\x3', '\x2', '\x2', '\x2', '\x210', 
		'\x1065', '\x3', '\x2', '\x2', '\x2', '\x212', '\x1072', '\x3', '\x2', 
		'\x2', '\x2', '\x214', '\x1078', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\x107C', '\x3', '\x2', '\x2', '\x2', '\x218', '\x1087', '\x3', '\x2', 
		'\x2', '\x2', '\x21A', '\x10A8', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x10AB', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x10C0', '\x3', '\x2', 
		'\x2', '\x2', '\x220', '\x10C3', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x10C6', '\x3', '\x2', '\x2', '\x2', '\x224', '\x10CA', '\x3', '\x2', 
		'\x2', '\x2', '\x226', '\x10DD', '\x3', '\x2', '\x2', '\x2', '\x228', 
		'\x10DF', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x10F0', '\x3', '\x2', 
		'\x2', '\x2', '\x22C', '\x10F7', '\x3', '\x2', '\x2', '\x2', '\x22E', 
		'\x10FC', '\x3', '\x2', '\x2', '\x2', '\x230', '\x1113', '\x3', '\x2', 
		'\x2', '\x2', '\x232', '\x111D', '\x3', '\x2', '\x2', '\x2', '\x234', 
		'\x111F', '\x3', '\x2', '\x2', '\x2', '\x236', '\x112D', '\x3', '\x2', 
		'\x2', '\x2', '\x238', '\x113B', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'\x115F', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x1161', '\x3', '\x2', 
		'\x2', '\x2', '\x23E', '\x117F', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x1184', '\x3', '\x2', '\x2', '\x2', '\x242', '\x1186', '\x3', '\x2', 
		'\x2', '\x2', '\x244', '\x1192', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\x11A6', '\x3', '\x2', '\x2', '\x2', '\x248', '\x11A8', '\x3', '\x2', 
		'\x2', '\x2', '\x24A', '\x11AB', '\x3', '\x2', '\x2', '\x2', '\x24C', 
		'\x11C5', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x11C7', '\x3', '\x2', 
		'\x2', '\x2', '\x250', '\x11CB', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x11DA', '\x3', '\x2', '\x2', '\x2', '\x254', '\x11E6', '\x3', '\x2', 
		'\x2', '\x2', '\x256', '\x11EE', '\x3', '\x2', '\x2', '\x2', '\x258', 
		'\x11F2', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x11FF', '\x3', '\x2', 
		'\x2', '\x2', '\x25C', '\x1205', '\x3', '\x2', '\x2', '\x2', '\x25E', 
		'\x1213', '\x3', '\x2', '\x2', '\x2', '\x260', '\x1227', '\x3', '\x2', 
		'\x2', '\x2', '\x262', '\x1230', '\x3', '\x2', '\x2', '\x2', '\x264', 
		'\x1232', '\x3', '\x2', '\x2', '\x2', '\x266', '\x1239', '\x3', '\x2', 
		'\x2', '\x2', '\x268', '\x123E', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x124B', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x1253', '\x3', '\x2', 
		'\x2', '\x2', '\x26E', '\x125B', '\x3', '\x2', '\x2', '\x2', '\x270', 
		'\x1263', '\x3', '\x2', '\x2', '\x2', '\x272', '\x1265', '\x3', '\x2', 
		'\x2', '\x2', '\x274', '\x1271', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\x128B', '\x3', '\x2', '\x2', '\x2', '\x278', '\x128D', '\x3', '\x2', 
		'\x2', '\x2', '\x27A', '\x129B', '\x3', '\x2', '\x2', '\x2', '\x27C', 
		'\x12A0', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x12B2', '\x3', '\x2', 
		'\x2', '\x2', '\x280', '\x12B6', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x12BE', '\x3', '\x2', '\x2', '\x2', '\x284', '\x12C8', '\x3', '\x2', 
		'\x2', '\x2', '\x286', '\x12D0', '\x3', '\x2', '\x2', '\x2', '\x288', 
		'\x12D6', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x12DB', '\x3', '\x2', 
		'\x2', '\x2', '\x28C', '\x12E2', '\x3', '\x2', '\x2', '\x2', '\x28E', 
		'\x12FB', '\x3', '\x2', '\x2', '\x2', '\x290', '\x130E', '\x3', '\x2', 
		'\x2', '\x2', '\x292', '\x1312', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x1315', '\x3', '\x2', '\x2', '\x2', '\x296', '\x132B', '\x3', '\x2', 
		'\x2', '\x2', '\x298', '\x1330', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x1343', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x1345', '\x3', '\x2', 
		'\x2', '\x2', '\x29E', '\x1355', '\x3', '\x2', '\x2', '\x2', '\x2A0', 
		'\x135D', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x1362', '\x3', '\x2', 
		'\x2', '\x2', '\x2A4', '\x1366', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x1371', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x1374', '\x3', '\x2', 
		'\x2', '\x2', '\x2AA', '\x1386', '\x3', '\x2', '\x2', '\x2', '\x2AC', 
		'\x1388', '\x3', '\x2', '\x2', '\x2', '\x2AE', '\x1397', '\x3', '\x2', 
		'\x2', '\x2', '\x2B0', '\x13A2', '\x3', '\x2', '\x2', '\x2', '\x2B2', 
		'\x13B0', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x13B5', '\x3', '\x2', 
		'\x2', '\x2', '\x2B6', '\x13B7', '\x3', '\x2', '\x2', '\x2', '\x2B8', 
		'\x13C2', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x13C4', '\x3', '\x2', 
		'\x2', '\x2', '\x2BC', '\x13F1', '\x3', '\x2', '\x2', '\x2', '\x2BE', 
		'\x13FE', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x1406', '\x3', '\x2', 
		'\x2', '\x2', '\x2C2', '\x1412', '\x3', '\x2', '\x2', '\x2', '\x2C4', 
		'\x1432', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x1446', '\x3', '\x2', 
		'\x2', '\x2', '\x2C8', '\x1448', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x144C', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\x147F', '\x3', '\x2', 
		'\x2', '\x2', '\x2CE', '\x1481', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x149F', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\x14A1', '\x3', '\x2', 
		'\x2', '\x2', '\x2D4', '\x14B6', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x14D4', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x14D8', '\x3', '\x2', 
		'\x2', '\x2', '\x2DA', '\x14DB', '\x3', '\x2', '\x2', '\x2', '\x2DC', 
		'\x14EE', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x14F6', '\x3', '\x2', 
		'\x2', '\x2', '\x2E0', '\x1508', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x150F', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x1527', '\x3', '\x2', 
		'\x2', '\x2', '\x2E6', '\x1529', '\x3', '\x2', '\x2', '\x2', '\x2E8', 
		'\x157A', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x157F', '\x3', '\x2', 
		'\x2', '\x2', '\x2EC', '\x1581', '\x3', '\x2', '\x2', '\x2', '\x2EE', 
		'\x15C0', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x16FD', '\x3', '\x2', 
		'\x2', '\x2', '\x2F2', '\x16FF', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x1701', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x1703', '\x3', '\x2', 
		'\x2', '\x2', '\x2F8', '\x1705', '\x3', '\x2', '\x2', '\x2', '\x2FA', 
		'\x1712', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x171B', '\x3', '\x2', 
		'\x2', '\x2', '\x2FE', '\x1724', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x1726', '\x3', '\x2', '\x2', '\x2', '\x302', '\x1737', '\x3', '\x2', 
		'\x2', '\x2', '\x304', '\x173D', '\x3', '\x2', '\x2', '\x2', '\x306', 
		'\x1748', '\x3', '\x2', '\x2', '\x2', '\x308', '\x174A', '\x3', '\x2', 
		'\x2', '\x2', '\x30A', '\x1762', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'\x1770', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x1782', '\x3', '\x2', 
		'\x2', '\x2', '\x310', '\x1797', '\x3', '\x2', '\x2', '\x2', '\x312', 
		'\x17A4', '\x3', '\x2', '\x2', '\x2', '\x314', '\x17A7', '\x3', '\x2', 
		'\x2', '\x2', '\x316', '\x17B0', '\x3', '\x2', '\x2', '\x2', '\x318', 
		'\x17B6', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x17BE', '\x3', '\x2', 
		'\x2', '\x2', '\x31C', '\x17C1', '\x3', '\x2', '\x2', '\x2', '\x31E', 
		'\x17CC', '\x3', '\x2', '\x2', '\x2', '\x320', '\x17D6', '\x3', '\x2', 
		'\x2', '\x2', '\x322', '\x17D8', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x17E1', '\x3', '\x2', '\x2', '\x2', '\x326', '\x17EA', '\x3', '\x2', 
		'\x2', '\x2', '\x328', '\x17FC', '\x3', '\x2', '\x2', '\x2', '\x32A', 
		'\x1800', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x1802', '\x3', '\x2', 
		'\x2', '\x2', '\x32E', '\x180B', '\x3', '\x2', '\x2', '\x2', '\x330', 
		'\x1818', '\x3', '\x2', '\x2', '\x2', '\x332', '\x181A', '\x3', '\x2', 
		'\x2', '\x2', '\x334', '\x181F', '\x3', '\x2', '\x2', '\x2', '\x336', 
		'\x1825', '\x3', '\x2', '\x2', '\x2', '\x338', '\x1827', '\x3', '\x2', 
		'\x2', '\x2', '\x33A', '\x1836', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x183A', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x183E', '\x3', '\x2', 
		'\x2', '\x2', '\x340', '\x1840', '\x3', '\x2', '\x2', '\x2', '\x342', 
		'\x1842', '\x3', '\x2', '\x2', '\x2', '\x344', '\x1848', '\x3', '\x2', 
		'\x2', '\x2', '\x346', '\x184A', '\x3', '\x2', '\x2', '\x2', '\x348', 
		'\x184C', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x184E', '\x3', '\x2', 
		'\x2', '\x2', '\x34C', '\x1850', '\x3', '\x2', '\x2', '\x2', '\x34E', 
		'\x1852', '\x3', '\x2', '\x2', '\x2', '\x350', '\x1854', '\x3', '\x2', 
		'\x2', '\x2', '\x352', '\x1856', '\x3', '\x2', '\x2', '\x2', '\x354', 
		'\x1858', '\x3', '\x2', '\x2', '\x2', '\x356', '\x185D', '\x3', '\x2', 
		'\x2', '\x2', '\x358', '\x185F', '\x3', '\x2', '\x2', '\x2', '\x35A', 
		'\x1861', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x1863', '\x3', '\x2', 
		'\x2', '\x2', '\x35E', '\x1865', '\x3', '\x2', '\x2', '\x2', '\x360', 
		'\x1867', '\x3', '\x2', '\x2', '\x2', '\x362', '\x1869', '\x3', '\x2', 
		'\x2', '\x2', '\x364', '\x186B', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x1885', '\x3', '\x2', '\x2', '\x2', '\x368', '\x188B', '\x3', '\x2', 
		'\x2', '\x2', '\x36A', '\x188F', '\x3', '\x2', '\x2', '\x2', '\x36C', 
		'\x1893', '\x3', '\x2', '\x2', '\x2', '\x36E', '\x189C', '\x3', '\x2', 
		'\x2', '\x2', '\x370', '\x18AA', '\x3', '\x2', '\x2', '\x2', '\x372', 
		'\x18BB', '\x3', '\x2', '\x2', '\x2', '\x374', '\x18E2', '\x3', '\x2', 
		'\x2', '\x2', '\x376', '\x18E9', '\x3', '\x2', '\x2', '\x2', '\x378', 
		'\x18F5', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x1916', '\x3', '\x2', 
		'\x2', '\x2', '\x37C', '\x1918', '\x3', '\x2', '\x2', '\x2', '\x37E', 
		'\x195F', '\x3', '\x2', '\x2', '\x2', '\x380', '\x1964', '\x3', '\x2', 
		'\x2', '\x2', '\x382', '\x1977', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\x1981', '\x3', '\x2', '\x2', '\x2', '\x386', '\x198D', '\x3', '\x2', 
		'\x2', '\x2', '\x388', '\x19B2', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\x1AFA', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x1AFE', '\x3', '\x2', 
		'\x2', '\x2', '\x38E', '\x1B3E', '\x3', '\x2', '\x2', '\x2', '\x390', 
		'\x1B42', '\x3', '\x2', '\x2', '\x2', '\x392', '\x1B46', '\x3', '\x2', 
		'\x2', '\x2', '\x394', '\x1B48', '\x3', '\x2', '\x2', '\x2', '\x396', 
		'\x1B4A', '\x3', '\x2', '\x2', '\x2', '\x398', '\x1B4C', '\x3', '\x2', 
		'\x2', '\x2', '\x39A', '\x1B4E', '\x3', '\x2', '\x2', '\x2', '\x39C', 
		'\x1B50', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x1B52', '\x3', '\x2', 
		'\x2', '\x2', '\x3A0', '\x1B54', '\x3', '\x2', '\x2', '\x2', '\x3A2', 
		'\x1B56', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x1B58', '\x3', '\x2', 
		'\x2', '\x2', '\x3A6', '\x1B5A', '\x3', '\x2', '\x2', '\x2', '\x3A8', 
		'\x1B5C', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x1B5E', '\x3', '\x2', 
		'\x2', '\x2', '\x3AC', '\x1B66', '\x3', '\x2', '\x2', '\x2', '\x3AE', 
		'\x1B68', '\x3', '\x2', '\x2', '\x2', '\x3B0', '\x1B6A', '\x3', '\x2', 
		'\x2', '\x2', '\x3B2', '\x1B6E', '\x3', '\x2', '\x2', '\x2', '\x3B4', 
		'\x1B70', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x1B78', '\x3', '\x2', 
		'\x2', '\x2', '\x3B8', '\x1B7A', '\x3', '\x2', '\x2', '\x2', '\x3BA', 
		'\x1B7C', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x1B7E', '\x3', '\x2', 
		'\x2', '\x2', '\x3BE', '\x1B82', '\x3', '\x2', '\x2', '\x2', '\x3C0', 
		'\x1B84', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x1B86', '\x3', '\x2', 
		'\x2', '\x2', '\x3C4', '\x1B8A', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x1B8C', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x1B8E', '\x3', '\x2', 
		'\x2', '\x2', '\x3CA', '\x1B91', '\x3', '\x2', '\x2', '\x2', '\x3CC', 
		'\x3CF', '\x5', '\x4', '\x3', '\x2', '\x3CD', '\x3CF', '\x5', '\x320', 
		'\x191', '\x2', '\x3CE', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CE', 
		'\x3CD', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3D1', '\x3', '\x2', '\x2', 
		'\x2', '\x3D0', '\x3D2', '\a', '\x2C5', '\x2', '\x2', '\x3D1', '\x3D0', 
		'\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', 
		'\x3D2', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3CE', '\x3', 
		'\x2', '\x2', '\x2', '\x3D4', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D5', 
		'\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D6', '\x3', '\x2', '\x2', 
		'\x2', '\x3D6', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3D5', 
		'\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D9', '\a', '\x2', '\x2', '\x3', 
		'\x3D9', '\x3', '\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3ED', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x3DB', '\x3ED', '\x5', '\b', '\x5', '\x2', '\x3DC', '\x3ED', 
		'\x5', '\x18', '\r', '\x2', '\x3DD', '\x3ED', '\x5', '(', '\x15', '\x2', 
		'\x3DE', '\x3ED', '\x5', '\xA4', 'S', '\x2', '\x3DF', '\x3ED', '\x5', 
		'\x32', '\x1A', '\x2', '\x3E0', '\x3ED', '\x5', 'X', '-', '\x2', '\x3E1', 
		'\x3ED', '\x5', '\x15E', '\xB0', '\x2', '\x3E2', '\x3ED', '\x5', '\xAE', 
		'X', '\x2', '\x3E3', '\x3ED', '\x5', '\xB2', 'Z', '\x2', '\x3E4', '\x3ED', 
		'\x5', '\n', '\x6', '\x2', '\x3E5', '\x3ED', '\x5', '.', '\x18', '\x2', 
		'\x3E6', '\x3ED', '\x5', '\x1A', '\xE', '\x2', '\x3E7', '\x3ED', '\x5', 
		'\x1C', '\xF', '\x2', '\x3E8', '\x3ED', '\x5', '\xAC', 'W', '\x2', '\x3E9', 
		'\x3ED', '\x5', '\x14A', '\xA6', '\x2', '\x3EA', '\x3ED', '\x5', '\xDE', 
		'p', '\x2', '\x3EB', '\x3ED', '\x5', '\xD8', 'm', '\x2', '\x3EC', '\x3DA', 
		'\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3DB', '\x3', '\x2', '\x2', '\x2', 
		'\x3EC', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3DD', '\x3', 
		'\x2', '\x2', '\x2', '\x3EC', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3E0', '\x3', '\x2', '\x2', 
		'\x2', '\x3EC', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3E2', 
		'\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x3EC', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3E5', '\x3', 
		'\x2', '\x2', '\x2', '\x3EC', '\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3EC', 
		'\x3E7', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3E8', '\x3', '\x2', '\x2', 
		'\x2', '\x3EC', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3EA', 
		'\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3EB', '\x3', '\x2', '\x2', '\x2', 
		'\x3ED', '\x5', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3EF', '\a', '\x99', 
		'\x2', '\x2', '\x3EF', '\x3F0', '\a', '\xD5', '\x2', '\x2', '\x3F0', '\x3F1', 
		'\x5', '\x35A', '\x1AE', '\x2', '\x3F1', '\x3F2', '\a', '\x2C5', '\x2', 
		'\x2', '\x3F2', '\a', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4', '\a', 
		'\xF', '\x2', '\x2', '\x3F4', '\x3F5', '\a', '\xD5', '\x2', '\x2', '\x3F5', 
		'\x3F6', '\x5', '\x35A', '\x1AE', '\x2', '\x3F6', '\x3F8', '\a', 'W', 
		'\x2', '\x2', '\x3F7', '\x3F9', '\a', '~', '\x2', '\x2', '\x3F8', '\x3F7', 
		'\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x3F9', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x3FC', '\x5', 
		'\x178', '\xBD', '\x2', '\x3FB', '\x3FA', '\x3', '\x2', '\x2', '\x2', 
		'\x3FC', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FB', '\x3', 
		'\x2', '\x2', '\x2', '\x3FD', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\x3FE', 
		'\x402', '\x3', '\x2', '\x2', '\x2', '\x3FF', '\x3FD', '\x3', '\x2', '\x2', 
		'\x2', '\x400', '\x401', '\a', '\x1D5', '\x2', '\x2', '\x401', '\x403', 
		'\a', '\x1FA', '\x2', '\x2', '\x402', '\x400', '\x3', '\x2', '\x2', '\x2', 
		'\x402', '\x403', '\x3', '\x2', '\x2', '\x2', '\x403', '\x404', '\x3', 
		'\x2', '\x2', '\x2', '\x404', '\x405', '\a', '\x2C5', '\x2', '\x2', '\x405', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x406', '\x409', '\a', 'k', '\x2', 
		'\x2', '\x407', '\x408', '\a', '\x180', '\x2', '\x2', '\x408', '\x40A', 
		'\a', '\x1C9', '\x2', '\x2', '\x409', '\x407', '\x3', '\x2', '\x2', '\x2', 
		'\x409', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40B', '\x3', 
		'\x2', '\x2', '\x2', '\x40B', '\x40C', '\a', '\xD5', '\x2', '\x2', '\x40C', 
		'\x418', '\x5', '\x35A', '\x1AE', '\x2', '\x40D', '\x412', '\a', '\x2B3', 
		'\x2', '\x2', '\x40E', '\x410', '\a', '\x2B9', '\x2', '\x2', '\x40F', 
		'\x40E', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x410', '\x3', '\x2', '\x2', 
		'\x2', '\x410', '\x411', '\x3', '\x2', '\x2', '\x2', '\x411', '\x413', 
		'\x5', '\x184', '\xC3', '\x2', '\x412', '\x40F', '\x3', '\x2', '\x2', 
		'\x2', '\x413', '\x414', '\x3', '\x2', '\x2', '\x2', '\x414', '\x412', 
		'\x3', '\x2', '\x2', '\x2', '\x414', '\x415', '\x3', '\x2', '\x2', '\x2', 
		'\x415', '\x416', '\x3', '\x2', '\x2', '\x2', '\x416', '\x417', '\a', 
		'\x2B4', '\x2', '\x2', '\x417', '\x419', '\x3', '\x2', '\x2', '\x2', '\x418', 
		'\x40D', '\x3', '\x2', '\x2', '\x2', '\x418', '\x419', '\x3', '\x2', '\x2', 
		'\x2', '\x419', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', 
		'\a', '\x1D4', '\x2', '\x2', '\x41B', '\x422', '\x5', '\x378', '\x1BD', 
		'\x2', '\x41C', '\x421', '\x5', '\x176', '\xBC', '\x2', '\x41D', '\x421', 
		'\x5', '\f', '\a', '\x2', '\x41E', '\x421', '\x5', '\x10', '\t', '\x2', 
		'\x41F', '\x421', '\a', '\x8D', '\x2', '\x2', '\x420', '\x41C', '\x3', 
		'\x2', '\x2', '\x2', '\x420', '\x41D', '\x3', '\x2', '\x2', '\x2', '\x420', 
		'\x41E', '\x3', '\x2', '\x2', '\x2', '\x420', '\x41F', '\x3', '\x2', '\x2', 
		'\x2', '\x421', '\x424', '\x3', '\x2', '\x2', '\x2', '\x422', '\x420', 
		'\x3', '\x2', '\x2', '\x2', '\x422', '\x423', '\x3', '\x2', '\x2', '\x2', 
		'\x423', '\x436', '\x3', '\x2', '\x2', '\x2', '\x424', '\x422', '\x3', 
		'\x2', '\x2', '\x2', '\x425', '\x427', '\a', '\x19C', '\x2', '\x2', '\x426', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x426', '\x427', '\x3', '\x2', '\x2', 
		'\x2', '\x427', '\x428', '\x3', '\x2', '\x2', '\x2', '\x428', '\x431', 
		'\t', '\x2', '\x2', '\x2', '\x429', '\x42B', '\a', '\x81', '\x2', '\x2', 
		'\x42A', '\x429', '\x3', '\x2', '\x2', '\x2', '\x42A', '\x42B', '\x3', 
		'\x2', '\x2', '\x2', '\x42B', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x42C', 
		'\x42E', '\x5', '\x188', '\xC5', '\x2', '\x42D', '\x42C', '\x3', '\x2', 
		'\x2', '\x2', '\x42D', '\x42E', '\x3', '\x2', '\x2', '\x2', '\x42E', '\x42F', 
		'\x3', '\x2', '\x2', '\x2', '\x42F', '\x432', '\x5', '\x1D4', '\xEB', 
		'\x2', '\x430', '\x432', '\x5', '\x17A', '\xBE', '\x2', '\x431', '\x42A', 
		'\x3', '\x2', '\x2', '\x2', '\x431', '\x430', '\x3', '\x2', '\x2', '\x2', 
		'\x432', '\x437', '\x3', '\x2', '\x2', '\x2', '\x433', '\x434', '\t', 
		'\x3', '\x2', '\x2', '\x434', '\x435', '\a', '\x256', '\x2', '\x2', '\x435', 
		'\x437', '\x5', '\x356', '\x1AC', '\x2', '\x436', '\x426', '\x3', '\x2', 
		'\x2', '\x2', '\x436', '\x433', '\x3', '\x2', '\x2', '\x2', '\x437', '\x438', 
		'\x3', '\x2', '\x2', '\x2', '\x438', '\x439', '\a', '\x2C5', '\x2', '\x2', 
		'\x439', '\v', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43C', '\a', '\x189', 
		'\x2', '\x2', '\x43B', '\x43D', '\x5', '\xE', '\b', '\x2', '\x43C', '\x43B', 
		'\x3', '\x2', '\x2', '\x2', '\x43C', '\x43D', '\x3', '\x2', '\x2', '\x2', 
		'\x43D', '\r', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43F', '\a', '\x2B3', 
		'\x2', '\x2', '\x43F', '\x440', '\a', '\x18E', '\x2', '\x2', '\x440', 
		'\x441', '\x5', '\x2B8', '\x15D', '\x2', '\x441', '\x445', '\a', ':', 
		'\x2', '\x2', '\x442', '\x446', '\a', '\x12', '\x2', '\x2', '\x443', '\x444', 
		'\t', '\x4', '\x2', '\x2', '\x444', '\x446', '\x5', '\x36A', '\x1B6', 
		'\x2', '\x445', '\x442', '\x3', '\x2', '\x2', '\x2', '\x445', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x446', '\x448', '\x3', '\x2', '\x2', '\x2', 
		'\x447', '\x449', '\x5', '\x14', '\v', '\x2', '\x448', '\x447', '\x3', 
		'\x2', '\x2', '\x2', '\x448', '\x449', '\x3', '\x2', '\x2', '\x2', '\x449', 
		'\x44A', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x44B', '\a', '\x2B4', 
		'\x2', '\x2', '\x44B', '\xF', '\x3', '\x2', '\x2', '\x2', '\x44C', '\x44E', 
		'\a', '\x1CF', '\x2', '\x2', '\x44D', '\x44F', '\x5', '\x12', '\n', '\x2', 
		'\x44E', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x44E', '\x44F', '\x3', 
		'\x2', '\x2', '\x2', '\x44F', '\x11', '\x3', '\x2', '\x2', '\x2', '\x450', 
		'\x451', '\a', '\x1C5', '\x2', '\x2', '\x451', '\x452', '\a', '\x2B3', 
		'\x2', '\x2', '\x452', '\x457', '\x5', '\x342', '\x1A2', '\x2', '\x453', 
		'\x454', '\a', '\x2B9', '\x2', '\x2', '\x454', '\x456', '\x5', '\x342', 
		'\x1A2', '\x2', '\x455', '\x453', '\x3', '\x2', '\x2', '\x2', '\x456', 
		'\x459', '\x3', '\x2', '\x2', '\x2', '\x457', '\x455', '\x3', '\x2', '\x2', 
		'\x2', '\x457', '\x458', '\x3', '\x2', '\x2', '\x2', '\x458', '\x45A', 
		'\x3', '\x2', '\x2', '\x2', '\x459', '\x457', '\x3', '\x2', '\x2', '\x2', 
		'\x45A', '\x45B', '\a', '\x2B4', '\x2', '\x2', '\x45B', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x45C', '\x45D', '\t', '\x5', '\x2', '\x2', '\x45D', 
		'\x45E', '\x5', '\x2B8', '\x15D', '\x2', '\x45E', '\x45F', '\a', ':', 
		'\x2', '\x2', '\x45F', '\x460', '\x5', '\x36A', '\x1B6', '\x2', '\x460', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x461', '\x462', '\a', '\x99', '\x2', 
		'\x2', '\x462', '\x464', '\a', '\x188', '\x2', '\x2', '\x463', '\x465', 
		'\a', '\x33', '\x2', '\x2', '\x464', '\x463', '\x3', '\x2', '\x2', '\x2', 
		'\x464', '\x465', '\x3', '\x2', '\x2', '\x2', '\x465', '\x469', '\x3', 
		'\x2', '\x2', '\x2', '\x466', '\x467', '\x5', '\x350', '\x1A9', '\x2', 
		'\x467', '\x468', '\a', '\x2AC', '\x2', '\x2', '\x468', '\x46A', '\x3', 
		'\x2', '\x2', '\x2', '\x469', '\x466', '\x3', '\x2', '\x2', '\x2', '\x469', 
		'\x46A', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x46B', '\x3', '\x2', '\x2', 
		'\x2', '\x46B', '\x46C', '\x5', '\x394', '\x1CB', '\x2', '\x46C', '\x46D', 
		'\a', '\x2C5', '\x2', '\x2', '\x46D', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x46F', '\a', '\xF', '\x2', '\x2', '\x46F', '\x470', '\a', '\x188', 
		'\x2', '\x2', '\x470', '\x471', '\x5', '\x394', '\x1CB', '\x2', '\x471', 
		'\x473', '\a', 'W', '\x2', '\x2', '\x472', '\x474', '\a', '~', '\x2', 
		'\x2', '\x473', '\x472', '\x3', '\x2', '\x2', '\x2', '\x473', '\x474', 
		'\x3', '\x2', '\x2', '\x2', '\x474', '\x476', '\x3', '\x2', '\x2', '\x2', 
		'\x475', '\x477', '\t', '\x6', '\x2', '\x2', '\x476', '\x475', '\x3', 
		'\x2', '\x2', '\x2', '\x476', '\x477', '\x3', '\x2', '\x2', '\x2', '\x477', 
		'\x47B', '\x3', '\x2', '\x2', '\x2', '\x478', '\x47A', '\x5', '\x178', 
		'\xBD', '\x2', '\x479', '\x478', '\x3', '\x2', '\x2', '\x2', '\x47A', 
		'\x47D', '\x3', '\x2', '\x2', '\x2', '\x47B', '\x479', '\x3', '\x2', '\x2', 
		'\x2', '\x47B', '\x47C', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x480', 
		'\x3', '\x2', '\x2', '\x2', '\x47D', '\x47B', '\x3', '\x2', '\x2', '\x2', 
		'\x47E', '\x47F', '\a', '\x1D5', '\x2', '\x2', '\x47F', '\x481', '\a', 
		'\x1FA', '\x2', '\x2', '\x480', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x480', 
		'\x481', '\x3', '\x2', '\x2', '\x2', '\x481', '\x482', '\x3', '\x2', '\x2', 
		'\x2', '\x482', '\x483', '\a', '\x2C5', '\x2', '\x2', '\x483', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x484', '\x487', '\a', 'k', '\x2', '\x2', 
		'\x485', '\x486', '\a', '\x180', '\x2', '\x2', '\x486', '\x488', '\a', 
		'\x1C9', '\x2', '\x2', '\x487', '\x485', '\x3', '\x2', '\x2', '\x2', '\x487', 
		'\x488', '\x3', '\x2', '\x2', '\x2', '\x488', '\x489', '\x3', '\x2', '\x2', 
		'\x2', '\x489', '\x48D', '\a', '\x188', '\x2', '\x2', '\x48A', '\x48B', 
		'\x5', '\x350', '\x1A9', '\x2', '\x48B', '\x48C', '\a', '\x2AC', '\x2', 
		'\x2', '\x48C', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48A', 
		'\x3', '\x2', '\x2', '\x2', '\x48D', '\x48E', '\x3', '\x2', '\x2', '\x2', 
		'\x48E', '\x48F', '\x3', '\x2', '\x2', '\x2', '\x48F', '\x491', '\x5', 
		'\x394', '\x1CB', '\x2', '\x490', '\x492', '\x5', '\x176', '\xBC', '\x2', 
		'\x491', '\x490', '\x3', '\x2', '\x2', '\x2', '\x491', '\x492', '\x3', 
		'\x2', '\x2', '\x2', '\x492', '\x493', '\x3', '\x2', '\x2', '\x2', '\x493', 
		'\x497', '\t', '\x2', '\x2', '\x2', '\x494', '\x496', '\x5', '\x1E', '\x10', 
		'\x2', '\x495', '\x494', '\x3', '\x2', '\x2', '\x2', '\x496', '\x499', 
		'\x3', '\x2', '\x2', '\x2', '\x497', '\x495', '\x3', '\x2', '\x2', '\x2', 
		'\x497', '\x498', '\x3', '\x2', '\x2', '\x2', '\x498', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x499', '\x497', '\x3', '\x2', '\x2', '\x2', '\x49A', 
		'\x49C', '\a', '\xA9', '\x2', '\x2', '\x49B', '\x49D', '\x5', '\x394', 
		'\x1CB', '\x2', '\x49C', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x49D', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x49E', '\x3', '\x2', '\x2', 
		'\x2', '\x49E', '\x49F', '\a', '\x2C5', '\x2', '\x2', '\x49F', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x4A0', '\x4A3', '\a', 'k', '\x2', '\x2', 
		'\x4A1', '\x4A2', '\a', '\x180', '\x2', '\x2', '\x4A2', '\x4A4', '\a', 
		'\x1C9', '\x2', '\x2', '\x4A3', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4A3', 
		'\x4A4', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4A5', '\x3', '\x2', '\x2', 
		'\x2', '\x4A5', '\x4A6', '\a', '\x188', '\x2', '\x2', '\x4A6', '\x4AA', 
		'\a', '\x33', '\x2', '\x2', '\x4A7', '\x4A8', '\x5', '\x350', '\x1A9', 
		'\x2', '\x4A8', '\x4A9', '\a', '\x2AC', '\x2', '\x2', '\x4A9', '\x4AB', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4A7', '\x3', '\x2', '\x2', '\x2', 
		'\x4AA', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AC', '\x3', 
		'\x2', '\x2', '\x2', '\x4AC', '\x4AD', '\x5', '\x394', '\x1CB', '\x2', 
		'\x4AD', '\x4B1', '\t', '\x2', '\x2', '\x2', '\x4AE', '\x4B0', '\x5', 
		'$', '\x13', '\x2', '\x4AF', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4B0', 
		'\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4B1', '\x4AF', '\x3', '\x2', '\x2', 
		'\x2', '\x4B1', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B6', 
		'\x3', '\x2', '\x2', '\x2', '\x4B3', '\x4B1', '\x3', '\x2', '\x2', '\x2', 
		'\x4B4', '\x4B5', '\a', ')', '\x2', '\x2', '\x4B5', '\x4B7', '\x5', '\x1A6', 
		'\xD4', '\x2', '\x4B6', '\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B6', 
		'\x4B7', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\x4B8', '\x3', '\x2', '\x2', 
		'\x2', '\x4B8', '\x4BA', '\a', '\xA9', '\x2', '\x2', '\x4B9', '\x4BB', 
		'\x5', '\x394', '\x1CB', '\x2', '\x4BA', '\x4B9', '\x3', '\x2', '\x2', 
		'\x2', '\x4BA', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BB', '\x4BC', 
		'\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BD', '\a', '\x2C5', '\x2', '\x2', 
		'\x4BD', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x4BE', '\x4C7', '\x5', 
		'\x18C', '\xC7', '\x2', '\x4BF', '\x4C7', '\x5', '\x18E', '\xC8', '\x2', 
		'\x4C0', '\x4C7', '\x5', '\x190', '\xC9', '\x2', '\x4C1', '\x4C7', '\x5', 
		'\x194', '\xCB', '\x2', '\x4C2', '\x4C7', '\x5', '\x196', '\xCC', '\x2', 
		'\x4C3', '\x4C7', '\x5', '\x19E', '\xD0', '\x2', '\x4C4', '\x4C7', '\x5', 
		' ', '\x11', '\x2', '\x4C5', '\x4C7', '\x5', '\"', '\x12', '\x2', '\x4C6', 
		'\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4C6', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4C1', 
		'\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4C2', '\x3', '\x2', '\x2', '\x2', 
		'\x4C6', '\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4C6', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x4C6', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4C7', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4C9', '\a', '\x1AF', '\x2', 
		'\x2', '\x4C9', '\x4D5', '\x5', '\x390', '\x1C9', '\x2', '\x4CA', '\x4CB', 
		'\a', '\x2B3', '\x2', '\x2', '\x4CB', '\x4D0', '\x5', '\x184', '\xC3', 
		'\x2', '\x4CC', '\x4CD', '\a', '\x2B9', '\x2', '\x2', '\x4CD', '\x4CF', 
		'\x5', '\x184', '\xC3', '\x2', '\x4CE', '\x4CC', '\x3', '\x2', '\x2', 
		'\x2', '\x4CF', '\x4D2', '\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4CE', 
		'\x3', '\x2', '\x2', '\x2', '\x4D0', '\x4D1', '\x3', '\x2', '\x2', '\x2', 
		'\x4D1', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D2', '\x4D0', '\x3', 
		'\x2', '\x2', '\x2', '\x4D3', '\x4D4', '\a', '\x2B4', '\x2', '\x2', '\x4D4', 
		'\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4CA', '\x3', '\x2', '\x2', 
		'\x2', '\x4D5', '\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4D7', 
		'\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D8', '\a', '\x2C5', '\x2', '\x2', 
		'\x4D8', '!', '\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4DA', '\a', '\xD5', 
		'\x2', '\x2', '\x4DA', '\x4E6', '\x5', '\x390', '\x1C9', '\x2', '\x4DB', 
		'\x4DC', '\a', '\x2B3', '\x2', '\x2', '\x4DC', '\x4E1', '\x5', '\x184', 
		'\xC3', '\x2', '\x4DD', '\x4DE', '\a', '\x2B9', '\x2', '\x2', '\x4DE', 
		'\x4E0', '\x5', '\x184', '\xC3', '\x2', '\x4DF', '\x4DD', '\x3', '\x2', 
		'\x2', '\x2', '\x4E0', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4DF', 
		'\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E2', '\x3', '\x2', '\x2', '\x2', 
		'\x4E2', '\x4E4', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E1', '\x3', 
		'\x2', '\x2', '\x2', '\x4E4', '\x4E5', '\a', '\x2B4', '\x2', '\x2', '\x4E5', 
		'\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4DB', '\x3', '\x2', '\x2', 
		'\x2', '\x4E6', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', 
		'\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4E9', '\a', '\x1D4', '\x2', '\x2', 
		'\x4E9', '\x4EB', '\x5', '\x378', '\x1BD', '\x2', '\x4EA', '\x4EC', '\a', 
		'\x8D', '\x2', '\x2', '\x4EB', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4EB', 
		'\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4EC', '\x4EE', '\x3', '\x2', '\x2', 
		'\x2', '\x4ED', '\x4EF', '\a', '\x1CF', '\x2', '\x2', '\x4EE', '\x4ED', 
		'\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\x3', '\x2', '\x2', '\x2', 
		'\x4EF', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4F1', '\a', 
		'\x2C5', '\x2', '\x2', '\x4F1', '#', '\x3', '\x2', '\x2', '\x2', '\x4F2', 
		'\x4FC', '\x5', '\x18C', '\xC7', '\x2', '\x4F3', '\x4FC', '\x5', '\x18E', 
		'\xC8', '\x2', '\x4F4', '\x4FC', '\x5', '\x190', '\xC9', '\x2', '\x4F5', 
		'\x4FC', '\x5', '\x194', '\xCB', '\x2', '\x4F6', '\x4FC', '\x5', '\x19E', 
		'\xD0', '\x2', '\x4F7', '\x4FC', '\x5', ',', '\x17', '\x2', '\x4F8', '\x4FC', 
		'\x5', '*', '\x16', '\x2', '\x4F9', '\x4FC', '\x5', ' ', '\x11', '\x2', 
		'\x4FA', '\x4FC', '\x5', '\"', '\x12', '\x2', '\x4FB', '\x4F2', '\x3', 
		'\x2', '\x2', '\x2', '\x4FB', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4FB', 
		'\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4F5', '\x3', '\x2', '\x2', 
		'\x2', '\x4FB', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4F8', '\x3', '\x2', '\x2', '\x2', 
		'\x4FB', '\x4F9', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FA', '\x3', 
		'\x2', '\x2', '\x2', '\x4FC', '%', '\x3', '\x2', '\x2', '\x2', '\x4FD', 
		'\x4FE', '\a', '\x99', '\x2', '\x2', '\x4FE', '\x4FF', '\a', '\x1AF', 
		'\x2', '\x2', '\x4FF', '\x500', '\x5', '\x35C', '\x1AF', '\x2', '\x500', 
		'\x501', '\a', '\x2C5', '\x2', '\x2', '\x501', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x502', '\x503', '\a', '\xF', '\x2', '\x2', '\x503', '\x504', 
		'\a', '\x1AF', '\x2', '\x2', '\x504', '\x505', '\x5', '\x35C', '\x1AF', 
		'\x2', '\x505', '\x507', '\a', 'W', '\x2', '\x2', '\x506', '\x508', '\a', 
		'~', '\x2', '\x2', '\x507', '\x506', '\x3', '\x2', '\x2', '\x2', '\x507', 
		'\x508', '\x3', '\x2', '\x2', '\x2', '\x508', '\x50C', '\x3', '\x2', '\x2', 
		'\x2', '\x509', '\x50B', '\x5', '\x178', '\xBD', '\x2', '\x50A', '\x509', 
		'\x3', '\x2', '\x2', '\x2', '\x50B', '\x50E', '\x3', '\x2', '\x2', '\x2', 
		'\x50C', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50D', '\x3', 
		'\x2', '\x2', '\x2', '\x50D', '\x511', '\x3', '\x2', '\x2', '\x2', '\x50E', 
		'\x50C', '\x3', '\x2', '\x2', '\x2', '\x50F', '\x510', '\a', '\x1D5', 
		'\x2', '\x2', '\x510', '\x512', '\a', '\x1FA', '\x2', '\x2', '\x511', 
		'\x50F', '\x3', '\x2', '\x2', '\x2', '\x511', '\x512', '\x3', '\x2', '\x2', 
		'\x2', '\x512', '\x513', '\x3', '\x2', '\x2', '\x2', '\x513', '\x514', 
		'\a', '\x2C5', '\x2', '\x2', '\x514', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x515', '\x516', '\a', '\xD5', '\x2', '\x2', '\x516', '\x522', '\x5', 
		'\x390', '\x1C9', '\x2', '\x517', '\x518', '\a', '\x2B3', '\x2', '\x2', 
		'\x518', '\x51D', '\x5', '\x184', '\xC3', '\x2', '\x519', '\x51A', '\a', 
		'\x2B9', '\x2', '\x2', '\x51A', '\x51C', '\x5', '\x184', '\xC3', '\x2', 
		'\x51B', '\x519', '\x3', '\x2', '\x2', '\x2', '\x51C', '\x51F', '\x3', 
		'\x2', '\x2', '\x2', '\x51D', '\x51B', '\x3', '\x2', '\x2', '\x2', '\x51D', 
		'\x51E', '\x3', '\x2', '\x2', '\x2', '\x51E', '\x520', '\x3', '\x2', '\x2', 
		'\x2', '\x51F', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x520', '\x521', 
		'\a', '\x2B4', '\x2', '\x2', '\x521', '\x523', '\x3', '\x2', '\x2', '\x2', 
		'\x522', '\x517', '\x3', '\x2', '\x2', '\x2', '\x522', '\x523', '\x3', 
		'\x2', '\x2', '\x2', '\x523', '\x524', '\x3', '\x2', '\x2', '\x2', '\x524', 
		'\x525', '\a', '\x1D4', '\x2', '\x2', '\x525', '\x52C', '\x5', '\x378', 
		'\x1BD', '\x2', '\x526', '\x52B', '\x5', '\x176', '\xBC', '\x2', '\x527', 
		'\x52B', '\x5', '\f', '\a', '\x2', '\x528', '\x52B', '\x5', '\x10', '\t', 
		'\x2', '\x529', '\x52B', '\a', '\x8D', '\x2', '\x2', '\x52A', '\x526', 
		'\x3', '\x2', '\x2', '\x2', '\x52A', '\x527', '\x3', '\x2', '\x2', '\x2', 
		'\x52A', '\x528', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x529', '\x3', 
		'\x2', '\x2', '\x2', '\x52B', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x52C', 
		'\x52A', '\x3', '\x2', '\x2', '\x2', '\x52C', '\x52D', '\x3', '\x2', '\x2', 
		'\x2', '\x52D', '\x540', '\x3', '\x2', '\x2', '\x2', '\x52E', '\x52C', 
		'\x3', '\x2', '\x2', '\x2', '\x52F', '\x531', '\a', '\x19C', '\x2', '\x2', 
		'\x530', '\x52F', '\x3', '\x2', '\x2', '\x2', '\x530', '\x531', '\x3', 
		'\x2', '\x2', '\x2', '\x531', '\x532', '\x3', '\x2', '\x2', '\x2', '\x532', 
		'\x53B', '\t', '\x2', '\x2', '\x2', '\x533', '\x535', '\a', '\x81', '\x2', 
		'\x2', '\x534', '\x533', '\x3', '\x2', '\x2', '\x2', '\x534', '\x535', 
		'\x3', '\x2', '\x2', '\x2', '\x535', '\x537', '\x3', '\x2', '\x2', '\x2', 
		'\x536', '\x538', '\x5', '\x188', '\xC5', '\x2', '\x537', '\x536', '\x3', 
		'\x2', '\x2', '\x2', '\x537', '\x538', '\x3', '\x2', '\x2', '\x2', '\x538', 
		'\x539', '\x3', '\x2', '\x2', '\x2', '\x539', '\x53C', '\x5', '\x1D4', 
		'\xEB', '\x2', '\x53A', '\x53C', '\x5', '\x17A', '\xBE', '\x2', '\x53B', 
		'\x534', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x53A', '\x3', '\x2', '\x2', 
		'\x2', '\x53C', '\x541', '\x3', '\x2', '\x2', '\x2', '\x53D', '\x53E', 
		'\t', '\x3', '\x2', '\x2', '\x53E', '\x53F', '\a', '\x256', '\x2', '\x2', 
		'\x53F', '\x541', '\x5', '\x356', '\x1AC', '\x2', '\x540', '\x530', '\x3', 
		'\x2', '\x2', '\x2', '\x540', '\x53D', '\x3', '\x2', '\x2', '\x2', '\x541', 
		'\x542', '\x3', '\x2', '\x2', '\x2', '\x542', '\x543', '\a', '\x2C5', 
		'\x2', '\x2', '\x543', '+', '\x3', '\x2', '\x2', '\x2', '\x544', '\x545', 
		'\a', '\x1AF', '\x2', '\x2', '\x545', '\x551', '\x5', '\x390', '\x1C9', 
		'\x2', '\x546', '\x547', '\a', '\x2B3', '\x2', '\x2', '\x547', '\x54C', 
		'\x5', '\x184', '\xC3', '\x2', '\x548', '\x549', '\a', '\x2B9', '\x2', 
		'\x2', '\x549', '\x54B', '\x5', '\x184', '\xC3', '\x2', '\x54A', '\x548', 
		'\x3', '\x2', '\x2', '\x2', '\x54B', '\x54E', '\x3', '\x2', '\x2', '\x2', 
		'\x54C', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54C', '\x54D', '\x3', 
		'\x2', '\x2', '\x2', '\x54D', '\x54F', '\x3', '\x2', '\x2', '\x2', '\x54E', 
		'\x54C', '\x3', '\x2', '\x2', '\x2', '\x54F', '\x550', '\a', '\x2B4', 
		'\x2', '\x2', '\x550', '\x552', '\x3', '\x2', '\x2', '\x2', '\x551', '\x546', 
		'\x3', '\x2', '\x2', '\x2', '\x551', '\x552', '\x3', '\x2', '\x2', '\x2', 
		'\x552', '\x553', '\x3', '\x2', '\x2', '\x2', '\x553', '\x55D', '\t', 
		'\x2', '\x2', '\x2', '\x554', '\x556', '\a', '\x81', '\x2', '\x2', '\x555', 
		'\x554', '\x3', '\x2', '\x2', '\x2', '\x555', '\x556', '\x3', '\x2', '\x2', 
		'\x2', '\x556', '\x558', '\x3', '\x2', '\x2', '\x2', '\x557', '\x559', 
		'\x5', '\x188', '\xC5', '\x2', '\x558', '\x557', '\x3', '\x2', '\x2', 
		'\x2', '\x558', '\x559', '\x3', '\x2', '\x2', '\x2', '\x559', '\x55A', 
		'\x3', '\x2', '\x2', '\x2', '\x55A', '\x55E', '\x5', '\x1D4', '\xEB', 
		'\x2', '\x55B', '\x55E', '\x5', '\x17A', '\xBE', '\x2', '\x55C', '\x55E', 
		'\a', '\xBD', '\x2', '\x2', '\x55D', '\x555', '\x3', '\x2', '\x2', '\x2', 
		'\x55D', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x55C', '\x3', 
		'\x2', '\x2', '\x2', '\x55E', '\x55F', '\x3', '\x2', '\x2', '\x2', '\x55F', 
		'\x560', '\a', '\x2C5', '\x2', '\x2', '\x560', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x561', '\x564', '\a', 'k', '\x2', '\x2', '\x562', '\x563', '\a', 
		'\x180', '\x2', '\x2', '\x563', '\x565', '\a', '\x1C9', '\x2', '\x2', 
		'\x564', '\x562', '\x3', '\x2', '\x2', '\x2', '\x564', '\x565', '\x3', 
		'\x2', '\x2', '\x2', '\x565', '\x566', '\x3', '\x2', '\x2', '\x2', '\x566', 
		'\x567', '\a', '\x1AF', '\x2', '\x2', '\x567', '\x573', '\x5', '\x35C', 
		'\x1AF', '\x2', '\x568', '\x569', '\a', '\x2B3', '\x2', '\x2', '\x569', 
		'\x56E', '\x5', '\x184', '\xC3', '\x2', '\x56A', '\x56B', '\a', '\x2B9', 
		'\x2', '\x2', '\x56B', '\x56D', '\x5', '\x184', '\xC3', '\x2', '\x56C', 
		'\x56A', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x570', '\x3', '\x2', '\x2', 
		'\x2', '\x56E', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x56F', 
		'\x3', '\x2', '\x2', '\x2', '\x56F', '\x571', '\x3', '\x2', '\x2', '\x2', 
		'\x570', '\x56E', '\x3', '\x2', '\x2', '\x2', '\x571', '\x572', '\a', 
		'\x2B4', '\x2', '\x2', '\x572', '\x574', '\x3', '\x2', '\x2', '\x2', '\x573', 
		'\x568', '\x3', '\x2', '\x2', '\x2', '\x573', '\x574', '\x3', '\x2', '\x2', 
		'\x2', '\x574', '\x576', '\x3', '\x2', '\x2', '\x2', '\x575', '\x577', 
		'\x5', '\x176', '\xBC', '\x2', '\x576', '\x575', '\x3', '\x2', '\x2', 
		'\x2', '\x576', '\x577', '\x3', '\x2', '\x2', '\x2', '\x577', '\x578', 
		'\x3', '\x2', '\x2', '\x2', '\x578', '\x582', '\t', '\x2', '\x2', '\x2', 
		'\x579', '\x57B', '\a', '\x81', '\x2', '\x2', '\x57A', '\x579', '\x3', 
		'\x2', '\x2', '\x2', '\x57A', '\x57B', '\x3', '\x2', '\x2', '\x2', '\x57B', 
		'\x57D', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57E', '\x5', '\x188', 
		'\xC5', '\x2', '\x57D', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57D', 
		'\x57E', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F', '\x3', '\x2', '\x2', 
		'\x2', '\x57F', '\x583', '\x5', '\x1D4', '\xEB', '\x2', '\x580', '\x583', 
		'\x5', '\x17A', '\xBE', '\x2', '\x581', '\x583', '\a', '\xBD', '\x2', 
		'\x2', '\x582', '\x57A', '\x3', '\x2', '\x2', '\x2', '\x582', '\x580', 
		'\x3', '\x2', '\x2', '\x2', '\x582', '\x581', '\x3', '\x2', '\x2', '\x2', 
		'\x583', '\x584', '\x3', '\x2', '\x2', '\x2', '\x584', '\x585', '\a', 
		'\x2C5', '\x2', '\x2', '\x585', '/', '\x3', '\x2', '\x2', '\x2', '\x586', 
		'\x587', '\a', '\x99', '\x2', '\x2', '\x587', '\x588', '\a', '\x23E', 
		'\x2', '\x2', '\x588', '\x589', '\x5', '\x35E', '\x1B0', '\x2', '\x589', 
		'\x58A', '\a', '\x2C5', '\x2', '\x2', '\x58A', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x58B', '\x58C', '\a', '\xF', '\x2', '\x2', '\x58C', '\x58D', 
		'\a', '\x23E', '\x2', '\x2', '\x58D', '\x5A0', '\x5', '\x35E', '\x1B0', 
		'\x2', '\x58E', '\x5A1', '\t', '\a', '\x2', '\x2', '\x58F', '\x590', '\a', 
		'\x1C8', '\x2', '\x2', '\x590', '\x591', '\a', '\x238', '\x2', '\x2', 
		'\x591', '\x5A1', '\x5', '\x35E', '\x1B0', '\x2', '\x592', '\x594', '\a', 
		'W', '\x2', '\x2', '\x593', '\x595', '\a', '~', '\x2', '\x2', '\x594', 
		'\x593', '\x3', '\x2', '\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', 
		'\x2', '\x595', '\x599', '\x3', '\x2', '\x2', '\x2', '\x596', '\x598', 
		'\x5', '\x178', '\xBD', '\x2', '\x597', '\x596', '\x3', '\x2', '\x2', 
		'\x2', '\x598', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x599', '\x597', 
		'\x3', '\x2', '\x2', '\x2', '\x599', '\x59A', '\x3', '\x2', '\x2', '\x2', 
		'\x59A', '\x59E', '\x3', '\x2', '\x2', '\x2', '\x59B', '\x599', '\x3', 
		'\x2', '\x2', '\x2', '\x59C', '\x59D', '\a', '\x1D5', '\x2', '\x2', '\x59D', 
		'\x59F', '\a', '\x1FA', '\x2', '\x2', '\x59E', '\x59C', '\x3', '\x2', 
		'\x2', '\x2', '\x59E', '\x59F', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A1', 
		'\x3', '\x2', '\x2', '\x2', '\x5A0', '\x58E', '\x3', '\x2', '\x2', '\x2', 
		'\x5A0', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x5A0', '\x592', '\x3', 
		'\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A2', 
		'\x5A3', '\a', '\x2C5', '\x2', '\x2', '\x5A3', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x5A4', '\x5A7', '\a', 'k', '\x2', '\x2', '\x5A5', '\x5A6', '\a', 
		'\x180', '\x2', '\x2', '\x5A6', '\x5A8', '\a', '\x1C9', '\x2', '\x2', 
		'\x5A7', '\x5A5', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A8', '\x3', 
		'\x2', '\x2', '\x2', '\x5A8', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5A9', 
		'\x5AA', '\a', '\x23E', '\x2', '\x2', '\x5AA', '\x5AE', '\x5', '\x35E', 
		'\x1B0', '\x2', '\x5AB', '\x5AF', '\x5', ':', '\x1E', '\x2', '\x5AC', 
		'\x5AF', '\x5', '>', ' ', '\x2', '\x5AD', '\x5AF', '\x5', '@', '!', '\x2', 
		'\x5AE', '\x5AB', '\x3', '\x2', '\x2', '\x2', '\x5AE', '\x5AC', '\x3', 
		'\x2', '\x2', '\x2', '\x5AE', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x5AF', 
		'\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5B0', '\x5B2', '\x5', '\x36', 
		'\x1C', '\x2', '\x5B1', '\x5B0', '\x3', '\x2', '\x2', '\x2', '\x5B1', 
		'\x5B2', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5B4', '\x3', '\x2', '\x2', 
		'\x2', '\x5B3', '\x5B5', '\t', '\a', '\x2', '\x2', '\x5B4', '\x5B3', '\x3', 
		'\x2', '\x2', '\x2', '\x5B4', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5B5', 
		'\x5B7', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B8', '\x5', '\x38', 
		'\x1D', '\x2', '\x5B7', '\x5B6', '\x3', '\x2', '\x2', '\x2', '\x5B7', 
		'\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5B9', '\x3', '\x2', '\x2', 
		'\x2', '\x5B9', '\x5BA', '\x5', '\x42', '\"', '\x2', '\x5BA', '\x5BB', 
		'\a', '\x2C5', '\x2', '\x2', '\x5BB', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x5BC', '\x5BD', '\a', '\xCC', '\x2', '\x2', '\x5BD', '\x5C2', '\x5', 
		'\x35E', '\x1B0', '\x2', '\x5BE', '\x5BF', '\a', '\x2B9', '\x2', '\x2', 
		'\x5BF', '\x5C1', '\x5', '\x35E', '\x1B0', '\x2', '\x5C0', '\x5BE', '\x3', 
		'\x2', '\x2', '\x2', '\x5C1', '\x5C4', '\x3', '\x2', '\x2', '\x2', '\x5C2', 
		'\x5C0', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C3', '\x3', '\x2', '\x2', 
		'\x2', '\x5C3', '\x37', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C2', 
		'\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\a', '\x267', '\x2', '\x2', 
		'\x5C6', '\x5C7', '\a', '\x2B3', '\x2', '\x2', '\x5C7', '\x5C8', '\x5', 
		'\x2B4', '\x15B', '\x2', '\x5C8', '\x5C9', '\a', '\x2B4', '\x2', '\x2', 
		'\x5C9', '\x39', '\x3', '\x2', '\x2', '\x2', '\x5CA', '\x5CF', '\a', '(', 
		'\x2', '\x2', '\x5CB', '\x5CF', '\a', '\n', '\x2', '\x2', '\x5CC', '\x5CD', 
		'\a', '\x100', '\x2', '\x2', '\x5CD', '\x5CF', '\a', '\x172', '\x2', '\x2', 
		'\x5CE', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CB', '\x3', 
		'\x2', '\x2', '\x2', '\x5CE', '\x5CC', '\x3', '\x2', '\x2', '\x2', '\x5CF', 
		'\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5D0', '\x5D2', '\x5', 'L', '\'', 
		'\x2', '\x5D1', '\x5D3', '\x5', 'R', '*', '\x2', '\x5D2', '\x5D1', '\x3', 
		'\x2', '\x2', '\x2', '\x5D2', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5D3', 
		'\x5D5', '\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D6', '\x5', '<', '\x1F', 
		'\x2', '\x5D5', '\x5D4', '\x3', '\x2', '\x2', '\x2', '\x5D5', '\x5D6', 
		'\x3', '\x2', '\x2', '\x2', '\x5D6', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x5D7', '\x5D8', '\a', '\xD0', '\x2', '\x2', '\x5D8', '\x5D9', '\a', 
		'\x9C', '\x2', '\x2', '\x5D9', '\x5DA', '\a', '\x1DF', '\x2', '\x2', '\x5DA', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5DC', '\a', '\xD0', '\x2', 
		'\x2', '\x5DC', '\x5DE', '\x5', 'L', '\'', '\x2', '\x5DD', '\x5DF', '\x5', 
		'R', '*', '\x2', '\x5DE', '\x5DD', '\x3', '\x2', '\x2', '\x2', '\x5DE', 
		'\x5DF', '\x3', '\x2', '\x2', '\x2', '\x5DF', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x5E0', '\x5E1', '\t', '\b', '\x2', '\x2', '\x5E1', '\x5E6', '\x5', 
		'J', '&', '\x2', '\x5E2', '\x5E3', '\a', '\x180', '\x2', '\x2', '\x5E3', 
		'\x5E5', '\x5', 'J', '&', '\x2', '\x5E4', '\x5E2', '\x3', '\x2', '\x2', 
		'\x2', '\x5E5', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5E4', 
		'\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5E7', '\x3', '\x2', '\x2', '\x2', 
		'\x5E7', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5E6', '\x3', 
		'\x2', '\x2', '\x2', '\x5E9', '\x5F1', '\a', '\x178', '\x2', '\x2', '\x5EA', 
		'\x5F2', '\a', 'u', '\x2', '\x2', '\x5EB', '\x5EC', '\x5', '\x3A4', '\x1D3', 
		'\x2', '\x5EC', '\x5ED', '\a', '\x2AC', '\x2', '\x2', '\x5ED', '\x5EF', 
		'\x3', '\x2', '\x2', '\x2', '\x5EE', '\x5EB', '\x3', '\x2', '\x2', '\x2', 
		'\x5EE', '\x5EF', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F0', '\x3', 
		'\x2', '\x2', '\x2', '\x5F0', '\x5F2', '\a', '\x1E8', '\x2', '\x2', '\x5F1', 
		'\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5F1', '\x5EE', '\x3', '\x2', '\x2', 
		'\x2', '\x5F2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x5F3', '\x5F4', 
		'\a', 'X', '\x2', '\x2', '\x5F4', '\x5F9', '\a', '\x23E', '\x2', '\x2', 
		'\x5F5', '\x5F6', '\a', '=', '\x2', '\x2', '\x5F6', '\x5F9', '\x5', '\x390', 
		'\x1C9', '\x2', '\x5F7', '\x5F9', '\x5', '\x1D8', '\xED', '\x2', '\x5F8', 
		'\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5F5', '\x3', '\x2', '\x2', 
		'\x2', '\x5F8', '\x5F7', '\x3', '\x2', '\x2', '\x2', '\x5F9', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x5FA', '\x5FC', '\x5', '\x332', '\x19A', 
		'\x2', '\x5FB', '\x5FD', '\x5', '\x36E', '\x1B8', '\x2', '\x5FC', '\x5FB', 
		'\x3', '\x2', '\x2', '\x2', '\x5FC', '\x5FD', '\x3', '\x2', '\x2', '\x2', 
		'\x5FD', '\x45', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x5FF', '\a', 'X', 
		'\x2', '\x2', '\x5FF', '\x601', '\a', '\x23E', '\x2', '\x2', '\x600', 
		'\x602', '\x5', '\x188', '\xC5', '\x2', '\x601', '\x600', '\x3', '\x2', 
		'\x2', '\x2', '\x601', '\x602', '\x3', '\x2', '\x2', '\x2', '\x602', '\x604', 
		'\x3', '\x2', '\x2', '\x2', '\x603', '\x605', '\x5', 'H', '%', '\x2', 
		'\x604', '\x603', '\x3', '\x2', '\x2', '\x2', '\x605', '\x606', '\x3', 
		'\x2', '\x2', '\x2', '\x606', '\x604', '\x3', '\x2', '\x2', '\x2', '\x606', 
		'\x607', '\x3', '\x2', '\x2', '\x2', '\x607', '\x608', '\x3', '\x2', '\x2', 
		'\x2', '\x608', '\x609', '\a', '\xA9', '\x2', '\x2', '\x609', '\x60A', 
		'\x5', '\x35E', '\x1B0', '\x2', '\x60A', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x60B', '\x60C', '\a', '(', '\x2', '\x2', '\x60C', '\x60D', '\a', '\x213', 
		'\x2', '\x2', '\x60D', '\x60E', '\a', '\x108', '\x2', '\x2', '\x60E', 
		'\x60F', '\x5', '\x1D8', '\xED', '\x2', '\x60F', '\x610', '\a', '(', '\x2', 
		'\x2', '\x610', '\x611', '\a', '\x213', '\x2', '\x2', '\x611', '\x612', 
		'\a', '\x2C5', '\x2', '\x2', '\x612', '\x630', '\x3', '\x2', '\x2', '\x2', 
		'\x613', '\x614', '\a', '(', '\x2', '\x2', '\x614', '\x615', '\a', '\x9C', 
		'\x2', '\x2', '\x615', '\x616', '\a', '\x1DF', '\x2', '\x2', '\x616', 
		'\x617', '\a', '\x108', '\x2', '\x2', '\x617', '\x618', '\x5', '\x1D8', 
		'\xED', '\x2', '\x618', '\x619', '\a', '(', '\x2', '\x2', '\x619', '\x61A', 
		'\a', '\x9C', '\x2', '\x2', '\x61A', '\x61B', '\a', '\x1DF', '\x2', '\x2', 
		'\x61B', '\x61C', '\a', '\x2C5', '\x2', '\x2', '\x61C', '\x630', '\x3', 
		'\x2', '\x2', '\x2', '\x61D', '\x61E', '\a', '\n', '\x2', '\x2', '\x61E', 
		'\x61F', '\a', '\x213', '\x2', '\x2', '\x61F', '\x620', '\a', '\x108', 
		'\x2', '\x2', '\x620', '\x621', '\x5', '\x1D8', '\xED', '\x2', '\x621', 
		'\x622', '\a', '\n', '\x2', '\x2', '\x622', '\x623', '\a', '\x213', '\x2', 
		'\x2', '\x623', '\x624', '\a', '\x2C5', '\x2', '\x2', '\x624', '\x630', 
		'\x3', '\x2', '\x2', '\x2', '\x625', '\x626', '\a', '\n', '\x2', '\x2', 
		'\x626', '\x627', '\a', '\x9C', '\x2', '\x2', '\x627', '\x628', '\a', 
		'\x1DF', '\x2', '\x2', '\x628', '\x629', '\a', '\x108', '\x2', '\x2', 
		'\x629', '\x62A', '\x5', '\x1D8', '\xED', '\x2', '\x62A', '\x62B', '\a', 
		'\n', '\x2', '\x2', '\x62B', '\x62C', '\a', '\x9C', '\x2', '\x2', '\x62C', 
		'\x62D', '\a', '\x1DF', '\x2', '\x2', '\x62D', '\x62E', '\a', '\x2C5', 
		'\x2', '\x2', '\x62E', '\x630', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x60B', 
		'\x3', '\x2', '\x2', '\x2', '\x62F', '\x613', '\x3', '\x2', '\x2', '\x2', 
		'\x62F', '\x61D', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x625', '\x3', 
		'\x2', '\x2', '\x2', '\x630', 'I', '\x3', '\x2', '\x2', '\x2', '\x631', 
		'\x64C', '\a', '\xF', '\x2', '\x2', '\x632', '\x64C', '\a', '\x10', '\x2', 
		'\x2', '\x633', '\x634', '\a', '\x17', '\x2', '\x2', '\x634', '\x64C', 
		'\a', '\x215', '\x2', '\x2', '\x635', '\x64C', '\a', '\x1A', '\x2', '\x2', 
		'\x636', '\x64C', '\a', 'S', '\x2', '\x2', '\x637', '\x64C', '\a', 'k', 
		'\x2', '\x2', '\x638', '\x639', '\a', '\x92', '\x2', '\x2', '\x639', '\x64C', 
		'\a', '\x215', '\x2', '\x2', '\x63A', '\x64C', '\a', '\x99', '\x2', '\x2', 
		'\x63B', '\x64C', '\a', '\xD9', '\x2', '\x2', '\x63C', '\x64C', '\a', 
		'\x153', '\x2', '\x2', '\x63D', '\x64C', '\a', '\x1C8', '\x2', '\x2', 
		'\x63E', '\x64C', '\a', '\x1D7', '\x2', '\x2', '\x63F', '\x64C', '\a', 
		'\x240', '\x2', '\x2', '\x640', '\x64C', '\a', '}', '\x2', '\x2', '\x641', 
		'\x64C', '\a', '\x211', '\x2', '\x2', '\x642', '\x64C', '\a', '\x1FD', 
		'\x2', '\x2', '\x643', '\x64C', '\a', '{', '\x2', '\x2', '\x644', '\x64C', 
		'\a', '\x128', '\x2', '\x2', '\x645', '\x64C', '\a', '\x127', '\x2', '\x2', 
		'\x646', '\x64C', '\a', '\x1F5', '\x2', '\x2', '\x647', '\x64C', '\a', 
		'\x21E', '\x2', '\x2', '\x648', '\x64C', '\a', 'u', '\x2', '\x2', '\x649', 
		'\x64C', '\a', '\x1E8', '\x2', '\x2', '\x64A', '\x64C', '\a', '\xCC', 
		'\x2', '\x2', '\x64B', '\x631', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x632', 
		'\x3', '\x2', '\x2', '\x2', '\x64B', '\x633', '\x3', '\x2', '\x2', '\x2', 
		'\x64B', '\x635', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x636', '\x3', 
		'\x2', '\x2', '\x2', '\x64B', '\x637', '\x3', '\x2', '\x2', '\x2', '\x64B', 
		'\x638', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x63A', '\x3', '\x2', '\x2', 
		'\x2', '\x64B', '\x63B', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x63C', 
		'\x3', '\x2', '\x2', '\x2', '\x64B', '\x63D', '\x3', '\x2', '\x2', '\x2', 
		'\x64B', '\x63E', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x63F', '\x3', 
		'\x2', '\x2', '\x2', '\x64B', '\x640', '\x3', '\x2', '\x2', '\x2', '\x64B', 
		'\x641', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x642', '\x3', '\x2', '\x2', 
		'\x2', '\x64B', '\x643', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x644', 
		'\x3', '\x2', '\x2', '\x2', '\x64B', '\x645', '\x3', '\x2', '\x2', '\x2', 
		'\x64B', '\x646', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x647', '\x3', 
		'\x2', '\x2', '\x2', '\x64B', '\x648', '\x3', '\x2', '\x2', '\x2', '\x64B', 
		'\x649', '\x3', '\x2', '\x2', '\x2', '\x64B', '\x64A', '\x3', '\x2', '\x2', 
		'\x2', '\x64C', 'K', '\x3', '\x2', '\x2', '\x2', '\x64D', '\x652', '\x5', 
		'N', '(', '\x2', '\x64E', '\x64F', '\a', '\x180', '\x2', '\x2', '\x64F', 
		'\x651', '\x5', 'N', '(', '\x2', '\x650', '\x64E', '\x3', '\x2', '\x2', 
		'\x2', '\x651', '\x654', '\x3', '\x2', '\x2', '\x2', '\x652', '\x650', 
		'\x3', '\x2', '\x2', '\x2', '\x652', '\x653', '\x3', '\x2', '\x2', '\x2', 
		'\x653', '\x655', '\x3', '\x2', '\x2', '\x2', '\x654', '\x652', '\x3', 
		'\x2', '\x2', '\x2', '\x655', '\x657', '\a', '\x178', '\x2', '\x2', '\x656', 
		'\x658', '\x5', 'P', ')', '\x2', '\x657', '\x656', '\x3', '\x2', '\x2', 
		'\x2', '\x657', '\x658', '\x3', '\x2', '\x2', '\x2', '\x658', '\x659', 
		'\x3', '\x2', '\x2', '\x2', '\x659', '\x65A', '\x5', '\x342', '\x1A2', 
		'\x2', '\x65A', 'M', '\x3', '\x2', '\x2', '\x2', '\x65B', '\x65E', '\t', 
		'\t', '\x2', '\x2', '\x65C', '\x65D', '\a', '\x172', '\x2', '\x2', '\x65D', 
		'\x65F', '\x5', '\x368', '\x1B5', '\x2', '\x65E', '\x65C', '\x3', '\x2', 
		'\x2', '\x2', '\x65E', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x65F', 'O', 
		'\x3', '\x2', '\x2', '\x2', '\x660', '\x661', '\a', '\x150', '\x2', '\x2', 
		'\x661', '\x662', '\a', '\x228', '\x2', '\x2', '\x662', '\x663', '\x5', 
		'\x342', '\x1A2', '\x2', '\x663', '\x664', '\a', '\x172', '\x2', '\x2', 
		'\x664', 'Q', '\x3', '\x2', '\x2', '\x2', '\x665', '\x667', '\a', '\x1C1', 
		'\x2', '\x2', '\x666', '\x668', '\x5', 'T', '+', '\x2', '\x667', '\x666', 
		'\x3', '\x2', '\x2', '\x2', '\x668', '\x669', '\x3', '\x2', '\x2', '\x2', 
		'\x669', '\x667', '\x3', '\x2', '\x2', '\x2', '\x669', '\x66A', '\x3', 
		'\x2', '\x2', '\x2', '\x66A', 'S', '\x3', '\x2', '\x2', '\x2', '\x66B', 
		'\x66C', '\t', '\n', '\x2', '\x2', '\x66C', '\x66D', '\x5', '\x328', '\x195', 
		'\x2', '\x66D', 'U', '\x3', '\x2', '\x2', '\x2', '\x66E', '\x66F', '\a', 
		'\x99', '\x2', '\x2', '\x66F', '\x671', '\a', '\x242', '\x2', '\x2', '\x670', 
		'\x672', '\a', '\x33', '\x2', '\x2', '\x671', '\x670', '\x3', '\x2', '\x2', 
		'\x2', '\x671', '\x672', '\x3', '\x2', '\x2', '\x2', '\x672', '\x673', 
		'\x3', '\x2', '\x2', '\x2', '\x673', '\x675', '\x5', '\x3B6', '\x1DC', 
		'\x2', '\x674', '\x676', '\t', '\v', '\x2', '\x2', '\x675', '\x674', '\x3', 
		'\x2', '\x2', '\x2', '\x675', '\x676', '\x3', '\x2', '\x2', '\x2', '\x676', 
		'\x677', '\x3', '\x2', '\x2', '\x2', '\x677', '\x678', '\a', '\x2C5', 
		'\x2', '\x2', '\x678', 'W', '\x3', '\x2', '\x2', '\x2', '\x679', '\x67A', 
		'\a', '\xF', '\x2', '\x2', '\x67A', '\x67B', '\a', '\x242', '\x2', '\x2', 
		'\x67B', '\x681', '\x5', '\x3B6', '\x1DC', '\x2', '\x67C', '\x682', '\x5', 
		'Z', '.', '\x2', '\x67D', '\x682', '\x5', '\\', '/', '\x2', '\x67E', '\x682', 
		'\x5', '^', '\x30', '\x2', '\x67F', '\x682', '\x5', '\x66', '\x34', '\x2', 
		'\x680', '\x682', '\x5', '\x88', '\x45', '\x2', '\x681', '\x67C', '\x3', 
		'\x2', '\x2', '\x2', '\x681', '\x67D', '\x3', '\x2', '\x2', '\x2', '\x681', 
		'\x67E', '\x3', '\x2', '\x2', '\x2', '\x681', '\x67F', '\x3', '\x2', '\x2', 
		'\x2', '\x681', '\x680', '\x3', '\x2', '\x2', '\x2', '\x682', '\x684', 
		'\x3', '\x2', '\x2', '\x2', '\x683', '\x685', '\x5', 'h', '\x35', '\x2', 
		'\x684', '\x683', '\x3', '\x2', '\x2', '\x2', '\x684', '\x685', '\x3', 
		'\x2', '\x2', '\x2', '\x685', '\x686', '\x3', '\x2', '\x2', '\x2', '\x686', 
		'\x687', '\a', '\x2C5', '\x2', '\x2', '\x687', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x688', '\x68A', '\a', 'W', '\x2', '\x2', '\x689', '\x68B', '\a', 
		'~', '\x2', '\x2', '\x68A', '\x689', '\x3', '\x2', '\x2', '\x2', '\x68A', 
		'\x68B', '\x3', '\x2', '\x2', '\x2', '\x68B', '\x68D', '\x3', '\x2', '\x2', 
		'\x2', '\x68C', '\x68E', '\t', '\f', '\x2', '\x2', '\x68D', '\x68C', '\x3', 
		'\x2', '\x2', '\x2', '\x68D', '\x68E', '\x3', '\x2', '\x2', '\x2', '\x68E', 
		'\x692', '\x3', '\x2', '\x2', '\x2', '\x68F', '\x691', '\x5', '\x178', 
		'\xBD', '\x2', '\x690', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x691', 
		'\x694', '\x3', '\x2', '\x2', '\x2', '\x692', '\x690', '\x3', '\x2', '\x2', 
		'\x2', '\x692', '\x693', '\x3', '\x2', '\x2', '\x2', '\x693', '\x697', 
		'\x3', '\x2', '\x2', '\x2', '\x694', '\x692', '\x3', '\x2', '\x2', '\x2', 
		'\x695', '\x696', '\a', '\x1D5', '\x2', '\x2', '\x696', '\x698', '\a', 
		'\x1FA', '\x2', '\x2', '\x697', '\x695', '\x3', '\x2', '\x2', '\x2', '\x697', 
		'\x698', '\x3', '\x2', '\x2', '\x2', '\x698', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x699', '\x69B', '\a', '\x1C9', '\x2', '\x2', '\x69A', '\x69C', 
		'\x5', '\x176', '\xBC', '\x2', '\x69B', '\x69A', '\x3', '\x2', '\x2', 
		'\x2', '\x69B', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69C', '\x69D', 
		'\x3', '\x2', '\x2', '\x2', '\x69D', '\x69E', '\a', '\x15', '\x2', '\x2', 
		'\x69E', '\x69F', '\a', '\x16F', '\x2', '\x2', '\x69F', '\x6A0', '\a', 
		'\x2B3', '\x2', '\x2', '\x6A0', '\x6A5', '\x5', '\x8A', '\x46', '\x2', 
		'\x6A1', '\x6A2', '\a', '\x2B9', '\x2', '\x2', '\x6A2', '\x6A4', '\x5', 
		'\x8A', '\x46', '\x2', '\x6A3', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A4', 
		'\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A3', '\x3', '\x2', '\x2', 
		'\x2', '\x6A5', '\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6A8', 
		'\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A5', '\x3', '\x2', '\x2', '\x2', 
		'\x6A8', '\x6A9', '\a', '\x2B4', '\x2', '\x2', '\x6A9', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x6AA', '\x6AF', '\x5', '`', '\x31', '\x2', '\x6AB', '\x6AC', 
		'\a', '\x2B9', '\x2', '\x2', '\x6AC', '\x6AE', '\x5', '`', '\x31', '\x2', 
		'\x6AD', '\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6B1', '\x3', 
		'\x2', '\x2', '\x2', '\x6AF', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6AF', 
		'\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6B0', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x6B1', '\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6B2', '\x6B5', 
		'\t', '\r', '\x2', '\x2', '\x6B3', '\x6B6', '\x5', '\x9A', 'N', '\x2', 
		'\x6B4', '\x6B6', '\x5', '\x92', 'J', '\x2', '\x6B5', '\x6B3', '\x3', 
		'\x2', '\x2', '\x2', '\x6B5', '\x6B4', '\x3', '\x2', '\x2', '\x2', '\x6B6', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6B8', '\t', '\xE', '\x2', 
		'\x2', '\x6B8', '\x6C5', '\a', '\x19', '\x2', '\x2', '\x6B9', '\x6C6', 
		'\x5', '\x64', '\x33', '\x2', '\x6BA', '\x6BB', '\a', '\x2B3', '\x2', 
		'\x2', '\x6BB', '\x6C0', '\x5', '\x64', '\x33', '\x2', '\x6BC', '\x6BD', 
		'\a', '\x2B9', '\x2', '\x2', '\x6BD', '\x6BF', '\x5', '\x64', '\x33', 
		'\x2', '\x6BE', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6C2', 
		'\x3', '\x2', '\x2', '\x2', '\x6C0', '\x6BE', '\x3', '\x2', '\x2', '\x2', 
		'\x6C0', '\x6C1', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C3', '\x3', 
		'\x2', '\x2', '\x2', '\x6C2', '\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C3', 
		'\x6C4', '\a', '\x2B4', '\x2', '\x2', '\x6C4', '\x6C6', '\x3', '\x2', 
		'\x2', '\x2', '\x6C5', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6BA', 
		'\x3', '\x2', '\x2', '\x2', '\x6C6', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x6C7', '\x6C9', '\x5', '\x39C', '\x1CF', '\x2', '\x6C8', '\x6CA', '\x5', 
		'\x378', '\x1BD', '\x2', '\x6C9', '\x6C8', '\x3', '\x2', '\x2', '\x2', 
		'\x6C9', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x6CB', '\x6D1', '\a', '\x144', '\x2', '\x2', '\x6CC', 
		'\x6CD', '\a', '\x11C', '\x2', '\x2', '\x6CD', '\x6D2', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x6CE', '\x6CF', '\a', '\xA1', '\x2', '\x2', '\x6CF', 
		'\x6D0', '\a', '\x242', '\x2', '\x2', '\x6D0', '\x6D2', '\x5', '\x378', 
		'\x1BD', '\x2', '\x6D1', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x6D1', 
		'\x6CE', '\x3', '\x2', '\x2', '\x2', '\x6D2', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x6D3', '\x6E4', '\a', '\x106', '\x2', '\x2', '\x6D4', '\x6DE', 
		'\a', '@', '\x2', '\x2', '\x6D5', '\x6D6', '\a', '\x66', '\x2', '\x2', 
		'\x6D6', '\x6D7', '\a', '\x238', '\x2', '\x2', '\x6D7', '\x6DF', '\a', 
		'\x21B', '\x2', '\x2', '\x6D8', '\x6DA', '\a', '\x167', '\x2', '\x2', 
		'\x6D9', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6D9', '\x6DA', '\x3', 
		'\x2', '\x2', '\x2', '\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', 
		'\x6DC', '\a', '\xEB', '\x2', '\x2', '\x6DC', '\x6DD', '\a', '\x228', 
		'\x2', '\x2', '\x6DD', '\x6DF', '\a', 'v', '\x2', '\x2', '\x6DE', '\x6D5', 
		'\x3', '\x2', '\x2', '\x2', '\x6DE', '\x6D9', '\x3', '\x2', '\x2', '\x2', 
		'\x6DE', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E1', '\x3', 
		'\x2', '\x2', '\x2', '\x6E0', '\x6E2', '\x5', 'j', '\x36', '\x2', '\x6E1', 
		'\x6E0', '\x3', '\x2', '\x2', '\x2', '\x6E1', '\x6E2', '\x3', '\x2', '\x2', 
		'\x2', '\x6E2', '\x6E4', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6D3', 
		'\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6D4', '\x3', '\x2', '\x2', '\x2', 
		'\x6E4', 'i', '\x3', '\x2', '\x2', '\x2', '\x6E5', '\x6E7', '\a', '\xCE', 
		'\x2', '\x2', '\x6E6', '\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6E7', 
		'\x3', '\x2', '\x2', '\x2', '\x6E7', '\x6E8', '\x3', '\x2', '\x2', '\x2', 
		'\x6E8', '\x6E9', '\a', '\xB3', '\x2', '\x2', '\x6E9', '\x6EA', '\a', 
		'\x105', '\x2', '\x2', '\x6EA', '\x6EB', '\x5', '\x342', '\x1A2', '\x2', 
		'\x6EB', 'k', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6EF', '\a', 'k', 
		'\x2', '\x2', '\x6ED', '\x6EE', '\a', '\x180', '\x2', '\x2', '\x6EE', 
		'\x6F0', '\a', '\x1C9', '\x2', '\x2', '\x6EF', '\x6ED', '\x3', '\x2', 
		'\x2', '\x2', '\x6EF', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6F1', 
		'\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F4', '\a', '\x242', '\x2', '\x2', 
		'\x6F2', '\x6F5', '\x5', 'n', '\x38', '\x2', '\x6F3', '\x6F5', '\x5', 
		'z', '>', '\x2', '\x6F4', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F4', 
		'\x6F3', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F6', '\x3', '\x2', '\x2', 
		'\x2', '\x6F6', '\x6F7', '\a', '\x2C5', '\x2', '\x2', '\x6F7', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x6F8', '\x6FB', '\x5', '\x3B6', '\x1DC', '\x2', 
		'\x6F9', '\x6FA', '\a', '\x173', '\x2', '\x2', '\x6FA', '\x6FC', '\a', 
		'\x2AF', '\x2', '\x2', '\x6FB', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x6FB', 
		'\x6FC', '\x3', '\x2', '\x2', '\x2', '\x6FC', '\x6FE', '\x3', '\x2', '\x2', 
		'\x2', '\x6FD', '\x6FF', '\x5', 'p', '\x39', '\x2', '\x6FE', '\x6FD', 
		'\x3', '\x2', '\x2', '\x2', '\x6FE', '\x6FF', '\x3', '\x2', '\x2', '\x2', 
		'\x6FF', 'o', '\x3', '\x2', '\x2', '\x2', '\x700', '\x702', '\x5', '\x176', 
		'\xBC', '\x2', '\x701', '\x700', '\x3', '\x2', '\x2', '\x2', '\x701', 
		'\x702', '\x3', '\x2', '\x2', '\x2', '\x702', '\x705', '\x3', '\x2', '\x2', 
		'\x2', '\x703', '\x706', '\x5', 'r', ':', '\x2', '\x704', '\x706', '\x5', 
		't', ';', '\x2', '\x705', '\x703', '\x3', '\x2', '\x2', '\x2', '\x705', 
		'\x704', '\x3', '\x2', '\x2', '\x2', '\x706', '\x708', '\x3', '\x2', '\x2', 
		'\x2', '\x707', '\x709', '\x5', 'x', '=', '\x2', '\x708', '\x707', '\x3', 
		'\x2', '\x2', '\x2', '\x708', '\x709', '\x3', '\x2', '\x2', '\x2', '\x709', 
		'\x715', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x70B', '\a', '\x2B3', 
		'\x2', '\x2', '\x70B', '\x710', '\x5', '\x8A', '\x46', '\x2', '\x70C', 
		'\x70D', '\a', '\x2B9', '\x2', '\x2', '\x70D', '\x70F', '\x5', '\x8A', 
		'\x46', '\x2', '\x70E', '\x70C', '\x3', '\x2', '\x2', '\x2', '\x70F', 
		'\x712', '\x3', '\x2', '\x2', '\x2', '\x710', '\x70E', '\x3', '\x2', '\x2', 
		'\x2', '\x710', '\x711', '\x3', '\x2', '\x2', '\x2', '\x711', '\x713', 
		'\x3', '\x2', '\x2', '\x2', '\x712', '\x710', '\x3', '\x2', '\x2', '\x2', 
		'\x713', '\x714', '\a', '\x2B4', '\x2', '\x2', '\x714', '\x716', '\x3', 
		'\x2', '\x2', '\x2', '\x715', '\x70A', '\x3', '\x2', '\x2', '\x2', '\x715', 
		'\x716', '\x3', '\x2', '\x2', '\x2', '\x716', '\x71A', '\x3', '\x2', '\x2', 
		'\x2', '\x717', '\x719', '\x5', '\x88', '\x45', '\x2', '\x718', '\x717', 
		'\x3', '\x2', '\x2', '\x2', '\x719', '\x71C', '\x3', '\x2', '\x2', '\x2', 
		'\x71A', '\x718', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x71B', '\x3', 
		'\x2', '\x2', '\x2', '\x71B', 'q', '\x3', '\x2', '\x2', '\x2', '\x71C', 
		'\x71A', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x721', '\t', '\x2', '\x2', 
		'\x2', '\x71E', '\x722', '\a', '\x16F', '\x2', '\x2', '\x71F', '\x722', 
		'\x5', '\x1A4', '\xD3', '\x2', '\x720', '\x722', '\x5', 'v', '<', '\x2', 
		'\x721', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x721', '\x71F', '\x3', 
		'\x2', '\x2', '\x2', '\x721', '\x720', '\x3', '\x2', '\x2', '\x2', '\x722', 
		's', '\x3', '\x2', '\x2', '\x2', '\x723', '\x724', '\a', '\x244', '\x2', 
		'\x2', '\x724', '\x725', '\x5', '\x378', '\x1BD', '\x2', '\x725', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\x726', '\x727', '\a', '\x228', '\x2', '\x2', 
		'\x727', '\x728', '\a', '\x172', '\x2', '\x2', '\x728', '\x72B', '\x5', 
		'\x378', '\x1BD', '\x2', '\x729', '\x72A', '\a', '\x167', '\x2', '\x2', 
		'\x72A', '\x72C', '\a', '\x16A', '\x2', '\x2', '\x72B', '\x729', '\x3', 
		'\x2', '\x2', '\x2', '\x72B', '\x72C', '\x3', '\x2', '\x2', '\x2', '\x72C', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x72D', '\x72E', '\a', '\xBD', '\x2', 
		'\x2', '\x72E', '\x72F', '\a', '\x148', '\x2', '\x2', '\x72F', '\x730', 
		'\x5', '\x2B8', '\x15D', '\x2', '\x730', '\x731', '\a', '\x110', '\x2', 
		'\x2', '\x731', '\x732', '\a', '\x10B', '\x2', '\x2', '\x732', '\x733', 
		'\a', '\x256', '\x2', '\x2', '\x733', '\x734', '\t', '\xF', '\x2', '\x2', 
		'\x734', 'y', '\x3', '\x2', '\x2', '\x2', '\x735', '\x736', '\a', '\x33', 
		'\x2', '\x2', '\x736', '\x737', '\x5', '\x3B6', '\x1DC', '\x2', '\x737', 
		'\x739', '\t', '\x2', '\x2', '\x2', '\x738', '\x73A', '\x5', '|', '?', 
		'\x2', '\x739', '\x738', '\x3', '\x2', '\x2', '\x2', '\x73A', '\x73B', 
		'\x3', '\x2', '\x2', '\x2', '\x73B', '\x739', '\x3', '\x2', '\x2', '\x2', 
		'\x73B', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x73C', '\x73D', '\x3', 
		'\x2', '\x2', '\x2', '\x73D', '\x73E', '\a', '\xA9', '\x2', '\x2', '\x73E', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x742', '\x5', '~', '@', '\x2', 
		'\x740', '\x742', '\x5', '\x80', '\x41', '\x2', '\x741', '\x73F', '\x3', 
		'\x2', '\x2', '\x2', '\x741', '\x740', '\x3', '\x2', '\x2', '\x2', '\x742', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x743', '\x744', '\t', '\x10', '\x2', 
		'\x2', '\x744', '\x745', '\a', '\x138', '\x2', '\x2', '\x745', '\x746', 
		'\x5', '\x84', '\x43', '\x2', '\x746', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x747', '\x74B', '\t', '\x11', '\x2', '\x2', '\x748', '\x74C', '\x5', 
		'\x82', '\x42', '\x2', '\x749', '\x74C', '\x5', '\x84', '\x43', '\x2', 
		'\x74A', '\x74C', '\x5', '\x86', '\x44', '\x2', '\x74B', '\x748', '\x3', 
		'\x2', '\x2', '\x2', '\x74B', '\x749', '\x3', '\x2', '\x2', '\x2', '\x74B', 
		'\x74A', '\x3', '\x2', '\x2', '\x2', '\x74C', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x74D', '\x74E', '\a', '\x1AF', '\x2', '\x2', '\x74E', '\x74F', 
		'\x5', '\x35C', '\x1AF', '\x2', '\x74F', '\x750', '\a', '\x2B3', '\x2', 
		'\x2', '\x750', '\x755', '\x5', '\xA0', 'Q', '\x2', '\x751', '\x752', 
		'\a', '\x2B9', '\x2', '\x2', '\x752', '\x754', '\x5', '\xA0', 'Q', '\x2', 
		'\x753', '\x751', '\x3', '\x2', '\x2', '\x2', '\x754', '\x757', '\x3', 
		'\x2', '\x2', '\x2', '\x755', '\x753', '\x3', '\x2', '\x2', '\x2', '\x755', 
		'\x756', '\x3', '\x2', '\x2', '\x2', '\x756', '\x758', '\x3', '\x2', '\x2', 
		'\x2', '\x757', '\x755', '\x3', '\x2', '\x2', '\x2', '\x758', '\x759', 
		'\a', '\x2B4', '\x2', '\x2', '\x759', '\x764', '\t', '\x2', '\x2', '\x2', 
		'\x75A', '\x765', '\x5', '\x17A', '\xBE', '\x2', '\x75B', '\x75D', '\a', 
		'\x81', '\x2', '\x2', '\x75C', '\x75B', '\x3', '\x2', '\x2', '\x2', '\x75C', 
		'\x75D', '\x3', '\x2', '\x2', '\x2', '\x75D', '\x75F', '\x3', '\x2', '\x2', 
		'\x2', '\x75E', '\x760', '\x5', '\x188', '\xC5', '\x2', '\x75F', '\x75E', 
		'\x3', '\x2', '\x2', '\x2', '\x75F', '\x760', '\x3', '\x2', '\x2', '\x2', 
		'\x760', '\x761', '\x3', '\x2', '\x2', '\x2', '\x761', '\x762', '\x5', 
		'\x1D4', '\xEB', '\x2', '\x762', '\x763', '\a', '\x2C5', '\x2', '\x2', 
		'\x763', '\x765', '\x3', '\x2', '\x2', '\x2', '\x764', '\x75A', '\x3', 
		'\x2', '\x2', '\x2', '\x764', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x765', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x766', '\x767', '\a', '\xD5', '\x2', 
		'\x2', '\x767', '\x773', '\x5', '\x35A', '\x1AE', '\x2', '\x768', '\x769', 
		'\a', '\x2B3', '\x2', '\x2', '\x769', '\x76E', '\x5', '\xA0', 'Q', '\x2', 
		'\x76A', '\x76B', '\a', '\x2B9', '\x2', '\x2', '\x76B', '\x76D', '\x5', 
		'\xA0', 'Q', '\x2', '\x76C', '\x76A', '\x3', '\x2', '\x2', '\x2', '\x76D', 
		'\x770', '\x3', '\x2', '\x2', '\x2', '\x76E', '\x76C', '\x3', '\x2', '\x2', 
		'\x2', '\x76E', '\x76F', '\x3', '\x2', '\x2', '\x2', '\x76F', '\x771', 
		'\x3', '\x2', '\x2', '\x2', '\x770', '\x76E', '\x3', '\x2', '\x2', '\x2', 
		'\x771', '\x772', '\a', '\x2B4', '\x2', '\x2', '\x772', '\x774', '\x3', 
		'\x2', '\x2', '\x2', '\x773', '\x768', '\x3', '\x2', '\x2', '\x2', '\x773', 
		'\x774', '\x3', '\x2', '\x2', '\x2', '\x774', '\x775', '\x3', '\x2', '\x2', 
		'\x2', '\x775', '\x776', '\a', '\x1D4', '\x2', '\x2', '\x776', '\x777', 
		'\x5', '\x378', '\x1BD', '\x2', '\x777', '\x782', '\t', '\x2', '\x2', 
		'\x2', '\x778', '\x783', '\x5', '\x17A', '\xBE', '\x2', '\x779', '\x77B', 
		'\a', '\x81', '\x2', '\x2', '\x77A', '\x779', '\x3', '\x2', '\x2', '\x2', 
		'\x77A', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x77B', '\x77D', '\x3', 
		'\x2', '\x2', '\x2', '\x77C', '\x77E', '\x5', '\x188', '\xC5', '\x2', 
		'\x77D', '\x77C', '\x3', '\x2', '\x2', '\x2', '\x77D', '\x77E', '\x3', 
		'\x2', '\x2', '\x2', '\x77E', '\x77F', '\x3', '\x2', '\x2', '\x2', '\x77F', 
		'\x780', '\x5', '\x1D4', '\xEB', '\x2', '\x780', '\x781', '\a', '\x2C5', 
		'\x2', '\x2', '\x781', '\x783', '\x3', '\x2', '\x2', '\x2', '\x782', '\x778', 
		'\x3', '\x2', '\x2', '\x2', '\x782', '\x77A', '\x3', '\x2', '\x2', '\x2', 
		'\x783', '\x85', '\x3', '\x2', '\x2', '\x2', '\x784', '\x786', '\a', '\xC4', 
		'\x2', '\x2', '\x785', '\x784', '\x3', '\x2', '\x2', '\x2', '\x785', '\x786', 
		'\x3', '\x2', '\x2', '\x2', '\x786', '\x788', '\x3', '\x2', '\x2', '\x2', 
		'\x787', '\x789', '\a', '\xFF', '\x2', '\x2', '\x788', '\x787', '\x3', 
		'\x2', '\x2', '\x2', '\x788', '\x789', '\x3', '\x2', '\x2', '\x2', '\x789', 
		'\x78A', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x78B', '\a', '`', '\x2', 
		'\x2', '\x78B', '\x78C', '\a', '\xD5', '\x2', '\x2', '\x78C', '\x79E', 
		'\x5', '\x378', '\x1BD', '\x2', '\x78D', '\x78E', '\a', '\x2B3', '\x2', 
		'\x2', '\x78E', '\x78F', '\a', '\x1F0', '\x2', '\x2', '\x78F', '\x790', 
		'\a', '\xF6', '\x2', '\x2', '\x790', '\x791', '\a', '\x184', '\x2', '\x2', 
		'\x791', '\x792', '\x5', '\x378', '\x1BD', '\x2', '\x792', '\x793', '\a', 
		'\x2B9', '\x2', '\x2', '\x793', '\x794', '\x3', '\x2', '\x2', '\x2', '\x794', 
		'\x799', '\x5', '\xA0', 'Q', '\x2', '\x795', '\x796', '\a', '\x2B9', '\x2', 
		'\x2', '\x796', '\x798', '\x5', '\xA0', 'Q', '\x2', '\x797', '\x795', 
		'\x3', '\x2', '\x2', '\x2', '\x798', '\x79B', '\x3', '\x2', '\x2', '\x2', 
		'\x799', '\x797', '\x3', '\x2', '\x2', '\x2', '\x799', '\x79A', '\x3', 
		'\x2', '\x2', '\x2', '\x79A', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x79B', 
		'\x799', '\x3', '\x2', '\x2', '\x2', '\x79C', '\x79D', '\a', '\x2B4', 
		'\x2', '\x2', '\x79D', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x79E', '\x78D', 
		'\x3', '\x2', '\x2', '\x2', '\x79E', '\x79F', '\x3', '\x2', '\x2', '\x2', 
		'\x79F', '\x7A0', '\x3', '\x2', '\x2', '\x2', '\x7A0', '\x7A1', '\a', 
		'\x1D4', '\x2', '\x2', '\x7A1', '\x7A2', '\a', '\x1F0', '\x2', '\x2', 
		'\x7A2', '\x7A3', '\a', '\x15', '\x2', '\x2', '\x7A3', '\x7A4', '\a', 
		'\x1D0', '\x2', '\x2', '\x7A4', '\x7AF', '\t', '\x2', '\x2', '\x2', '\x7A5', 
		'\x7B0', '\x5', '\x17A', '\xBE', '\x2', '\x7A6', '\x7A8', '\a', '\x81', 
		'\x2', '\x2', '\x7A7', '\x7A6', '\x3', '\x2', '\x2', '\x2', '\x7A7', '\x7A8', 
		'\x3', '\x2', '\x2', '\x2', '\x7A8', '\x7AA', '\x3', '\x2', '\x2', '\x2', 
		'\x7A9', '\x7AB', '\x5', '\x188', '\xC5', '\x2', '\x7AA', '\x7A9', '\x3', 
		'\x2', '\x2', '\x2', '\x7AA', '\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7AB', 
		'\x7AC', '\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7AD', '\x5', '\x1D4', 
		'\xEB', '\x2', '\x7AD', '\x7AE', '\a', '\x2C5', '\x2', '\x2', '\x7AE', 
		'\x7B0', '\x3', '\x2', '\x2', '\x2', '\x7AF', '\x7A5', '\x3', '\x2', '\x2', 
		'\x2', '\x7AF', '\x7A7', '\x3', '\x2', '\x2', '\x2', '\x7B0', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7B3', '\a', '\x167', '\x2', '\x2', 
		'\x7B2', '\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7B2', '\x7B3', '\x3', 
		'\x2', '\x2', '\x2', '\x7B3', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7B4', 
		'\x7B5', '\t', '\x12', '\x2', '\x2', '\x7B5', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x7B6', '\x7B7', '\x5', '\x390', '\x1C9', '\x2', '\x7B7', '\x7B9', 
		'\x5', '\x378', '\x1BD', '\x2', '\x7B8', '\x7BA', '\x5', '\x8C', 'G', 
		'\x2', '\x7B9', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7BA', 
		'\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7BD', '\x3', '\x2', '\x2', '\x2', 
		'\x7BB', '\x7BD', '\x5', '\x8E', 'H', '\x2', '\x7BC', '\x7B6', '\x3', 
		'\x2', '\x2', '\x2', '\x7BC', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x7BD', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x7BE', '\x7BF', '\a', '\xBD', '\x2', 
		'\x2', '\x7BF', '\x7C0', '\a', '\x148', '\x2', '\x2', '\x7C0', '\x7C1', 
		'\x5', '\x2B8', '\x15D', '\x2', '\x7C1', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x7C2', '\x7C4', '\x5', '\x88', '\x45', '\x2', '\x7C3', '\x7C2', 
		'\x3', '\x2', '\x2', '\x2', '\x7C3', '\x7C4', '\x3', '\x2', '\x2', '\x2', 
		'\x7C4', '\x7C6', '\x3', '\x2', '\x2', '\x2', '\x7C5', '\x7C7', '\x5', 
		'\x90', 'I', '\x2', '\x7C6', '\x7C5', '\x3', '\x2', '\x2', '\x2', '\x7C7', 
		'\x7C8', '\x3', '\x2', '\x2', '\x2', '\x7C8', '\x7C6', '\x3', '\x2', '\x2', 
		'\x2', '\x7C8', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CC', 
		'\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7CB', '\a', '\x2B9', '\x2', '\x2', 
		'\x7CB', '\x7CD', '\x5', '\x9C', 'O', '\x2', '\x7CC', '\x7CA', '\x3', 
		'\x2', '\x2', '\x2', '\x7CC', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CD', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x7CE', '\x7D2', '\x5', '\x92', 'J', 
		'\x2', '\x7CF', '\x7D2', '\x5', '\x98', 'M', '\x2', '\x7D0', '\x7D2', 
		'\x5', '\x9A', 'N', '\x2', '\x7D1', '\x7CE', '\x3', '\x2', '\x2', '\x2', 
		'\x7D1', '\x7CF', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7D0', '\x3', 
		'\x2', '\x2', '\x2', '\x7D2', '\x91', '\x3', '\x2', '\x2', '\x2', '\x7D3', 
		'\x7D6', '\t', '\x11', '\x2', '\x2', '\x7D4', '\x7D7', '\x5', '\x94', 
		'K', '\x2', '\x7D5', '\x7D7', '\x5', '\x96', 'L', '\x2', '\x7D6', '\x7D4', 
		'\x3', '\x2', '\x2', '\x2', '\x7D6', '\x7D5', '\x3', '\x2', '\x2', '\x2', 
		'\x7D7', '\x93', '\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7D9', '\a', '\x1AF', 
		'\x2', '\x2', '\x7D9', '\x7DA', '\x5', '\x35C', '\x1AF', '\x2', '\x7DA', 
		'\x7DB', '\a', '\x2B3', '\x2', '\x2', '\x7DB', '\x7E0', '\x5', '\xA0', 
		'Q', '\x2', '\x7DC', '\x7DD', '\a', '\x2B9', '\x2', '\x2', '\x7DD', '\x7DF', 
		'\x5', '\xA0', 'Q', '\x2', '\x7DE', '\x7DC', '\x3', '\x2', '\x2', '\x2', 
		'\x7DF', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7E0', '\x7DE', '\x3', 
		'\x2', '\x2', '\x2', '\x7E0', '\x7E1', '\x3', '\x2', '\x2', '\x2', '\x7E1', 
		'\x7E3', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E0', '\x3', '\x2', '\x2', 
		'\x2', '\x7E3', '\x7E6', '\a', '\x2B4', '\x2', '\x2', '\x7E4', '\x7E5', 
		'\t', '\x2', '\x2', '\x2', '\x7E5', '\x7E7', '\x5', '\x17A', '\xBE', '\x2', 
		'\x7E6', '\x7E4', '\x3', '\x2', '\x2', '\x2', '\x7E6', '\x7E7', '\x3', 
		'\x2', '\x2', '\x2', '\x7E7', '\x95', '\x3', '\x2', '\x2', '\x2', '\x7E8', 
		'\x7E9', '\a', '\xD5', '\x2', '\x2', '\x7E9', '\x7F5', '\x5', '\x35A', 
		'\x1AE', '\x2', '\x7EA', '\x7EB', '\a', '\x2B3', '\x2', '\x2', '\x7EB', 
		'\x7F0', '\x5', '\xA0', 'Q', '\x2', '\x7EC', '\x7ED', '\a', '\x2B9', '\x2', 
		'\x2', '\x7ED', '\x7EF', '\x5', '\xA0', 'Q', '\x2', '\x7EE', '\x7EC', 
		'\x3', '\x2', '\x2', '\x2', '\x7EF', '\x7F2', '\x3', '\x2', '\x2', '\x2', 
		'\x7F0', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F1', '\x3', 
		'\x2', '\x2', '\x2', '\x7F1', '\x7F3', '\x3', '\x2', '\x2', '\x2', '\x7F2', 
		'\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F4', '\a', '\x2B4', 
		'\x2', '\x2', '\x7F4', '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7EA', 
		'\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F6', '\x3', '\x2', '\x2', '\x2', 
		'\x7F6', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7FC', '\a', 
		'\x1D4', '\x2', '\x2', '\x7F8', '\x7FD', '\x5', '\x378', '\x1BD', '\x2', 
		'\x7F9', '\x7FA', '\a', '\x1F0', '\x2', '\x2', '\x7FA', '\x7FB', '\a', 
		'\x15', '\x2', '\x2', '\x7FB', '\x7FD', '\a', '\x1D0', '\x2', '\x2', '\x7FC', 
		'\x7F8', '\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7F9', '\x3', '\x2', '\x2', 
		'\x2', '\x7FD', '\x806', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7FF', 
		'\t', '\x2', '\x2', '\x2', '\x7FF', '\x807', '\x5', '\x17A', '\xBE', '\x2', 
		'\x800', '\x802', '\a', '\xBD', '\x2', '\x2', '\x801', '\x803', '\a', 
		'\x25C', '\x2', '\x2', '\x802', '\x801', '\x3', '\x2', '\x2', '\x2', '\x802', 
		'\x803', '\x3', '\x2', '\x2', '\x2', '\x803', '\x804', '\x3', '\x2', '\x2', 
		'\x2', '\x804', '\x805', '\a', '\x148', '\x2', '\x2', '\x805', '\x807', 
		'\x5', '\x2B8', '\x15D', '\x2', '\x806', '\x7FE', '\x3', '\x2', '\x2', 
		'\x2', '\x806', '\x800', '\x3', '\x2', '\x2', '\x2', '\x806', '\x807', 
		'\x3', '\x2', '\x2', '\x2', '\x807', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x808', '\x80A', '\a', '\xC4', '\x2', '\x2', '\x809', '\x808', '\x3', 
		'\x2', '\x2', '\x2', '\x809', '\x80A', '\x3', '\x2', '\x2', '\x2', '\x80A', 
		'\x80C', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x80D', '\a', '\xFF', '\x2', 
		'\x2', '\x80C', '\x80B', '\x3', '\x2', '\x2', '\x2', '\x80C', '\x80D', 
		'\x3', '\x2', '\x2', '\x2', '\x80D', '\x80E', '\x3', '\x2', '\x2', '\x2', 
		'\x80E', '\x80F', '\a', '`', '\x2', '\x2', '\x80F', '\x810', '\a', '\xD5', 
		'\x2', '\x2', '\x810', '\x822', '\x5', '\x378', '\x1BD', '\x2', '\x811', 
		'\x812', '\a', '\x2B3', '\x2', '\x2', '\x812', '\x813', '\a', '\x1F0', 
		'\x2', '\x2', '\x813', '\x814', '\a', '\xF6', '\x2', '\x2', '\x814', '\x815', 
		'\a', '\x184', '\x2', '\x2', '\x815', '\x816', '\x5', '\x378', '\x1BD', 
		'\x2', '\x816', '\x817', '\a', '\x2B9', '\x2', '\x2', '\x817', '\x818', 
		'\x3', '\x2', '\x2', '\x2', '\x818', '\x81D', '\x5', '\xA0', 'Q', '\x2', 
		'\x819', '\x81A', '\a', '\x2B9', '\x2', '\x2', '\x81A', '\x81C', '\x5', 
		'\xA0', 'Q', '\x2', '\x81B', '\x819', '\x3', '\x2', '\x2', '\x2', '\x81C', 
		'\x81F', '\x3', '\x2', '\x2', '\x2', '\x81D', '\x81B', '\x3', '\x2', '\x2', 
		'\x2', '\x81D', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x81E', '\x820', 
		'\x3', '\x2', '\x2', '\x2', '\x81F', '\x81D', '\x3', '\x2', '\x2', '\x2', 
		'\x820', '\x821', '\a', '\x2B4', '\x2', '\x2', '\x821', '\x823', '\x3', 
		'\x2', '\x2', '\x2', '\x822', '\x811', '\x3', '\x2', '\x2', '\x2', '\x822', 
		'\x823', '\x3', '\x2', '\x2', '\x2', '\x823', '\x824', '\x3', '\x2', '\x2', 
		'\x2', '\x824', '\x825', '\a', '\x1D4', '\x2', '\x2', '\x825', '\x826', 
		'\a', '\x1F0', '\x2', '\x2', '\x826', '\x827', '\a', '\x15', '\x2', '\x2', 
		'\x827', '\x82A', '\a', '\x1D0', '\x2', '\x2', '\x828', '\x829', '\t', 
		'\x2', '\x2', '\x2', '\x829', '\x82B', '\x5', '\x17A', '\xBE', '\x2', 
		'\x82A', '\x828', '\x3', '\x2', '\x2', '\x2', '\x82A', '\x82B', '\x3', 
		'\x2', '\x2', '\x2', '\x82B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x82C', 
		'\x82D', '\t', '\x10', '\x2', '\x2', '\x82D', '\x82E', '\a', '\x138', 
		'\x2', '\x2', '\x82E', '\x82F', '\x5', '\x96', 'L', '\x2', '\x82F', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x830', '\x831', '\a', '\x1A5', '\x2', '\x2', 
		'\x831', '\x832', '\a', '\x1CE', '\x2', '\x2', '\x832', '\x833', '\a', 
		'\x2B3', '\x2', '\x2', '\x833', '\x838', '\x5', '\x9E', 'P', '\x2', '\x834', 
		'\x835', '\a', '\x2B9', '\x2', '\x2', '\x835', '\x837', '\x5', '\x9E', 
		'P', '\x2', '\x836', '\x834', '\x3', '\x2', '\x2', '\x2', '\x837', '\x83A', 
		'\x3', '\x2', '\x2', '\x2', '\x838', '\x836', '\x3', '\x2', '\x2', '\x2', 
		'\x838', '\x839', '\x3', '\x2', '\x2', '\x2', '\x839', '\x83B', '\x3', 
		'\x2', '\x2', '\x2', '\x83A', '\x838', '\x3', '\x2', '\x2', '\x2', '\x83B', 
		'\x83C', '\a', '\x2B4', '\x2', '\x2', '\x83C', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x83D', '\x840', '\x5', '\x390', '\x1C9', '\x2', '\x83E', '\x840', 
		'\a', '\x84', '\x2', '\x2', '\x83F', '\x83D', '\x3', '\x2', '\x2', '\x2', 
		'\x83F', '\x83E', '\x3', '\x2', '\x2', '\x2', '\x840', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '\x841', '\x842', '\x5', '\x396', '\x1CC', '\x2', 
		'\x842', '\x843', '\x5', '\x378', '\x1BD', '\x2', '\x843', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x844', '\x845', '\a', '\x99', '\x2', '\x2', '\x845', 
		'\x846', '\a', '\x1F1', '\x2', '\x2', '\x846', '\x847', '\x5', '\x3B8', 
		'\x1DD', '\x2', '\x847', '\x848', '\a', '\x2C5', '\x2', '\x2', '\x848', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x849', '\x84A', '\a', '\xF', '\x2', 
		'\x2', '\x84A', '\x84B', '\a', '\x1F1', '\x2', '\x2', '\x84B', '\x84D', 
		'\x5', '\x3B8', '\x1DD', '\x2', '\x84C', '\x84E', '\x5', '\xA8', 'U', 
		'\x2', '\x84D', '\x84C', '\x3', '\x2', '\x2', '\x2', '\x84E', '\x84F', 
		'\x3', '\x2', '\x2', '\x2', '\x84F', '\x84D', '\x3', '\x2', '\x2', '\x2', 
		'\x84F', '\x850', '\x3', '\x2', '\x2', '\x2', '\x850', '\x851', '\x3', 
		'\x2', '\x2', '\x2', '\x851', '\x852', '\a', '\x2C5', '\x2', '\x2', '\x852', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\x853', '\x854', '\a', 'k', '\x2', 
		'\x2', '\x854', '\x855', '\a', '\x1F1', '\x2', '\x2', '\x855', '\x85A', 
		'\x5', '\x3B8', '\x1DD', '\x2', '\x856', '\x859', '\x5', '\xAA', 'V', 
		'\x2', '\x857', '\x859', '\x5', '\xA8', 'U', '\x2', '\x858', '\x856', 
		'\x3', '\x2', '\x2', '\x2', '\x858', '\x857', '\x3', '\x2', '\x2', '\x2', 
		'\x859', '\x85C', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x858', '\x3', 
		'\x2', '\x2', '\x2', '\x85A', '\x85B', '\x3', '\x2', '\x2', '\x2', '\x85B', 
		'\x85D', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x85A', '\x3', '\x2', '\x2', 
		'\x2', '\x85D', '\x85E', '\a', '\x2C5', '\x2', '\x2', '\x85E', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x85F', '\x860', '\a', '\xEC', '\x2', '\x2', 
		'\x860', '\x861', '\a', ':', '\x2', '\x2', '\x861', '\x870', '\a', '\x2AD', 
		'\x2', '\x2', '\x862', '\x863', '\a', '\x134', '\x2', '\x2', '\x863', 
		'\x870', '\a', '\x2AD', '\x2', '\x2', '\x864', '\x870', '\a', '\x15C', 
		'\x2', '\x2', '\x865', '\x866', '\a', '\x140', '\x2', '\x2', '\x866', 
		'\x870', '\a', '\x2AD', '\x2', '\x2', '\x867', '\x870', '\a', '\x15D', 
		'\x2', '\x2', '\x868', '\x870', '\a', 't', '\x2', '\x2', '\x869', '\x870', 
		'\a', '\x157', '\x2', '\x2', '\x86A', '\x86B', '\a', '<', '\x2', '\x2', 
		'\x86B', '\x870', '\a', '\x2AD', '\x2', '\x2', '\x86C', '\x870', '\a', 
		'\x154', '\x2', '\x2', '\x86D', '\x870', '\a', '\x17E', '\x2', '\x2', 
		'\x86E', '\x870', '\a', '\x161', '\x2', '\x2', '\x86F', '\x85F', '\x3', 
		'\x2', '\x2', '\x2', '\x86F', '\x862', '\x3', '\x2', '\x2', '\x2', '\x86F', 
		'\x864', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x865', '\x3', '\x2', '\x2', 
		'\x2', '\x86F', '\x867', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x868', 
		'\x3', '\x2', '\x2', '\x2', '\x86F', '\x869', '\x3', '\x2', '\x2', '\x2', 
		'\x86F', '\x86A', '\x3', '\x2', '\x2', '\x2', '\x86F', '\x86C', '\x3', 
		'\x2', '\x2', '\x2', '\x86F', '\x86D', '\x3', '\x2', '\x2', '\x2', '\x86F', 
		'\x86E', '\x3', '\x2', '\x2', '\x2', '\x870', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x871', '\x872', '\a', '\x210', '\x2', '\x2', '\x872', '\x873', 
		'\a', '\x26B', '\x2', '\x2', '\x873', '\x874', '\a', '\x2AD', '\x2', '\x2', 
		'\x874', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x875', '\x877', '\a', 'k', 
		'\x2', '\x2', '\x876', '\x878', '\a', '\x248', '\x2', '\x2', '\x877', 
		'\x876', '\x3', '\x2', '\x2', '\x2', '\x877', '\x878', '\x3', '\x2', '\x2', 
		'\x2', '\x878', '\x879', '\x3', '\x2', '\x2', '\x2', '\x879', '\x87A', 
		'\a', '\xEF', '\x2', '\x2', '\x87A', '\x87B', '\x5', '\x362', '\x1B2', 
		'\x2', '\x87B', '\x87C', '\a', '\x178', '\x2', '\x2', '\x87C', '\x87D', 
		'\x5', '\x342', '\x1A2', '\x2', '\x87D', '\x880', '\x5', '\x36A', '\x1B6', 
		'\x2', '\x87E', '\x87F', '\a', '\x227', '\x2', '\x2', '\x87F', '\x881', 
		'\a', '\x2D0', '\x2', '\x2', '\x880', '\x87E', '\x3', '\x2', '\x2', '\x2', 
		'\x880', '\x881', '\x3', '\x2', '\x2', '\x2', '\x881', '\x884', '\x3', 
		'\x2', '\x2', '\x2', '\x882', '\x883', '\a', 'Z', '\x2', '\x2', '\x883', 
		'\x885', '\a', '\x215', '\x2', '\x2', '\x884', '\x882', '\x3', '\x2', 
		'\x2', '\x2', '\x884', '\x885', '\x3', '\x2', '\x2', '\x2', '\x885', '\x886', 
		'\x3', '\x2', '\x2', '\x2', '\x886', '\x887', '\a', '\x2C5', '\x2', '\x2', 
		'\x887', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x888', '\x889', '\a', '\xF', 
		'\x2', '\x2', '\x889', '\x88A', '\a', '\xEF', '\x2', '\x2', '\x88A', '\x88B', 
		'\x5', '\x362', '\x1B2', '\x2', '\x88B', '\x88C', '\a', '\x1C8', '\x2', 
		'\x2', '\x88C', '\x88D', '\a', '\x238', '\x2', '\x2', '\x88D', '\x88E', 
		'\x5', '\x362', '\x1B2', '\x2', '\x88E', '\x88F', '\a', '\x2C5', '\x2', 
		'\x2', '\x88F', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x890', '\x891', 
		'\a', 'k', '\x2', '\x2', '\x891', '\x892', '\a', '\x254', '\x2', '\x2', 
		'\x892', '\x89C', '\x5', '\x348', '\x1A5', '\x2', '\x893', '\x89D', '\x5', 
		'\xB6', '\\', '\x2', '\x894', '\x89D', '\x5', '\xB8', ']', '\x2', '\x895', 
		'\x89D', '\x5', '\xBA', '^', '\x2', '\x896', '\x89D', '\x5', '\xBC', '_', 
		'\x2', '\x897', '\x89D', '\x5', '\xBE', '`', '\x2', '\x898', '\x89D', 
		'\x5', '\xC4', '\x63', '\x2', '\x899', '\x89D', '\x5', '\xC6', '\x64', 
		'\x2', '\x89A', '\x89D', '\x5', '\xC8', '\x65', '\x2', '\x89B', '\x89D', 
		'\x5', '\xE0', 'q', '\x2', '\x89C', '\x893', '\x3', '\x2', '\x2', '\x2', 
		'\x89C', '\x894', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x895', '\x3', 
		'\x2', '\x2', '\x2', '\x89C', '\x896', '\x3', '\x2', '\x2', '\x2', '\x89C', 
		'\x897', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x898', '\x3', '\x2', '\x2', 
		'\x2', '\x89C', '\x899', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x89A', 
		'\x3', '\x2', '\x2', '\x2', '\x89C', '\x89B', '\x3', '\x2', '\x2', '\x2', 
		'\x89D', '\x89E', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x89C', '\x3', 
		'\x2', '\x2', '\x2', '\x89E', '\x89F', '\x3', '\x2', '\x2', '\x2', '\x89F', 
		'\x8A0', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A1', '\a', '\x2C5', 
		'\x2', '\x2', '\x8A1', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A3', 
		'\a', '\xF', '\x2', '\x2', '\x8A3', '\x8A4', '\a', '\x254', '\x2', '\x2', 
		'\x8A4', '\x8B0', '\x5', '\x348', '\x1A5', '\x2', '\x8A5', '\x8B1', '\x5', 
		'\xB4', '[', '\x2', '\x8A6', '\x8B1', '\x5', '\xB8', ']', '\x2', '\x8A7', 
		'\x8B1', '\x5', '\xBA', '^', '\x2', '\x8A8', '\x8B1', '\x5', '\xBC', '_', 
		'\x2', '\x8A9', '\x8B1', '\x5', '\xBE', '`', '\x2', '\x8AA', '\x8B1', 
		'\x5', '\xC2', '\x62', '\x2', '\x8AB', '\x8B1', '\x5', '\xC4', '\x63', 
		'\x2', '\x8AC', '\x8B1', '\x5', '\xC6', '\x64', '\x2', '\x8AD', '\x8B1', 
		'\x5', '\xCA', '\x66', '\x2', '\x8AE', '\x8B1', '\x5', '\xE0', 'q', '\x2', 
		'\x8AF', '\x8B1', '\x5', '\xD4', 'k', '\x2', '\x8B0', '\x8A5', '\x3', 
		'\x2', '\x2', '\x2', '\x8B0', '\x8A6', '\x3', '\x2', '\x2', '\x2', '\x8B0', 
		'\x8A7', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8A8', '\x3', '\x2', '\x2', 
		'\x2', '\x8B0', '\x8A9', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8AA', 
		'\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8AB', '\x3', '\x2', '\x2', '\x2', 
		'\x8B0', '\x8AC', '\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8AD', '\x3', 
		'\x2', '\x2', '\x2', '\x8B0', '\x8AE', '\x3', '\x2', '\x2', '\x2', '\x8B0', 
		'\x8AF', '\x3', '\x2', '\x2', '\x2', '\x8B1', '\x8B2', '\x3', '\x2', '\x2', 
		'\x2', '\x8B2', '\x8B0', '\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B3', 
		'\x3', '\x2', '\x2', '\x2', '\x8B3', '\x8B4', '\x3', '\x2', '\x2', '\x2', 
		'\x8B4', '\x8B5', '\a', '\x2C5', '\x2', '\x2', '\x8B5', '\x8C2', '\x3', 
		'\x2', '\x2', '\x2', '\x8B6', '\x8B8', '\a', '\x2B9', '\x2', '\x2', '\x8B7', 
		'\x8B6', '\x3', '\x2', '\x2', '\x2', '\x8B7', '\x8B8', '\x3', '\x2', '\x2', 
		'\x2', '\x8B8', '\x8B9', '\x3', '\x2', '\x2', '\x2', '\x8B9', '\x8BB', 
		'\x5', '\x348', '\x1A5', '\x2', '\x8BA', '\x8B7', '\x3', '\x2', '\x2', 
		'\x2', '\x8BB', '\x8BC', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8BA', 
		'\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8BD', '\x3', '\x2', '\x2', '\x2', 
		'\x8BD', '\x8BE', '\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8BF', '\x5', 
		'\xCC', 'g', '\x2', '\x8BF', '\x8C0', '\a', '\x2C5', '\x2', '\x2', '\x8C0', 
		'\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8C1', '\x8A2', '\x3', '\x2', '\x2', 
		'\x2', '\x8C1', '\x8BA', '\x3', '\x2', '\x2', '\x2', '\x8C2', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x8C3', '\x8C6', '\x5', '\xB6', '\\', '\x2', 
		'\x8C4', '\x8C5', '\a', '\x1C9', '\x2', '\x2', '\x8C5', '\x8C7', '\x5', 
		'\x3B2', '\x1DA', '\x2', '\x8C6', '\x8C4', '\x3', '\x2', '\x2', '\x2', 
		'\x8C6', '\x8C7', '\x3', '\x2', '\x2', '\x2', '\x8C7', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\x8C8', '\x8C9', '\a', '\xE4', '\x2', '\x2', '\x8C9', 
		'\x8CA', '\a', ':', '\x2', '\x2', '\x8CA', '\x8CB', '\x5', '\x3B2', '\x1DA', 
		'\x2', '\x8CB', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x8CC', '\x8CD', 
		'\a', '\xE4', '\x2', '\x2', '\x8CD', '\x8D0', '\t', '\x13', '\x2', '\x2', 
		'\x8CE', '\x8CF', '\a', '\x15', '\x2', '\x2', '\x8CF', '\x8D1', '\x5', 
		'\x3CA', '\x1E6', '\x2', '\x8D0', '\x8CE', '\x3', '\x2', '\x2', '\x2', 
		'\x8D0', '\x8D1', '\x3', '\x2', '\x2', '\x2', '\x8D1', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x8D2', '\x8D3', '\t', '\x14', '\x2', '\x2', '\x8D3', 
		'\x8D4', '\a', '\x227', '\x2', '\x2', '\x8D4', '\x8D5', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x8D5', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x8D6', 
		'\x8D9', '\a', '\x1B6', '\x2', '\x2', '\x8D7', '\x8DA', '\x5', '\x154', 
		'\xAB', '\x2', '\x8D8', '\x8DA', '\a', '\x249', '\x2', '\x2', '\x8D9', 
		'\x8D7', '\x3', '\x2', '\x2', '\x2', '\x8D9', '\x8D8', '\x3', '\x2', '\x2', 
		'\x2', '\x8DA', '\x8DB', '\x3', '\x2', '\x2', '\x2', '\x8DB', '\x8DC', 
		'\a', '\x178', '\x2', '\x2', '\x8DC', '\x8DD', '\x5', '\x3B2', '\x1DA', 
		'\x2', '\x8DD', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8DF', 
		'\a', '\x1B1', '\x2', '\x2', '\x8DF', '\x8E0', '\x5', '\x3B2', '\x1DA', 
		'\x2', '\x8E0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8E3', 
		'\a', '\x2B9', '\x2', '\x2', '\x8E2', '\x8E1', '\x3', '\x2', '\x2', '\x2', 
		'\x8E2', '\x8E3', '\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E4', '\x3', 
		'\x2', '\x2', '\x2', '\x8E4', '\x8E6', '\x5', '\x336', '\x19C', '\x2', 
		'\x8E5', '\x8E2', '\x3', '\x2', '\x2', '\x2', '\x8E6', '\x8E7', '\x3', 
		'\x2', '\x2', '\x2', '\x8E7', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8E7', 
		'\x8E8', '\x3', '\x2', '\x2', '\x2', '\x8E8', '\x8F9', '\x3', '\x2', '\x2', 
		'\x2', '\x8E9', '\x8F5', '\a', '\xE', '\x2', '\x2', '\x8EA', '\x8EF', 
		'\a', '\xB0', '\x2', '\x2', '\x8EB', '\x8ED', '\a', '\x2B9', '\x2', '\x2', 
		'\x8EC', '\x8EB', '\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8ED', '\x3', 
		'\x2', '\x2', '\x2', '\x8ED', '\x8EE', '\x3', '\x2', '\x2', '\x2', '\x8EE', 
		'\x8F0', '\x5', '\x336', '\x19C', '\x2', '\x8EF', '\x8EC', '\x3', '\x2', 
		'\x2', '\x2', '\x8F0', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8EF', 
		'\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F2', '\x3', '\x2', '\x2', '\x2', 
		'\x8F2', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x8F3', '\x8EA', '\x3', 
		'\x2', '\x2', '\x2', '\x8F4', '\x8F7', '\x3', '\x2', '\x2', '\x2', '\x8F5', 
		'\x8F3', '\x3', '\x2', '\x2', '\x2', '\x8F5', '\x8F6', '\x3', '\x2', '\x2', 
		'\x2', '\x8F6', '\x8F9', '\x3', '\x2', '\x2', '\x2', '\x8F7', '\x8F5', 
		'\x3', '\x2', '\x2', '\x2', '\x8F8', '\x8E5', '\x3', '\x2', '\x2', '\x2', 
		'\x8F8', '\x8E9', '\x3', '\x2', '\x2', '\x2', '\x8F9', '\xC1', '\x3', 
		'\x2', '\x2', '\x2', '\x8FA', '\x8FB', '\a', '\x84', '\x2', '\x2', '\x8FB', 
		'\x8FE', '\a', '\x1DA', '\x2', '\x2', '\x8FC', '\x8FF', '\a', '\x15F', 
		'\x2', '\x2', '\x8FD', '\x8FF', '\x5', '\xC0', '\x61', '\x2', '\x8FE', 
		'\x8FC', '\x3', '\x2', '\x2', '\x2', '\x8FE', '\x8FD', '\x3', '\x2', '\x2', 
		'\x2', '\x8FF', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x900', '\x901', 
		'\a', '\x191', '\x2', '\x2', '\x901', '\x902', '\a', '\xBA', '\x2', '\x2', 
		'\x902', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x903', '\x904', '\a', '\x4', 
		'\x2', '\x2', '\x904', '\x905', '\t', '\x15', '\x2', '\x2', '\x905', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\x906', '\x907', '\a', '\xA5', '\x2', '\x2', 
		'\x907', '\x908', '\a', '\xA0', '\x2', '\x2', '\x908', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\x909', '\x913', '\x5', '\xC8', '\x65', '\x2', '\x90A', 
		'\x90F', '\a', '\xD0', '\x2', '\x2', '\x90B', '\x90D', '\a', '\x2B9', 
		'\x2', '\x2', '\x90C', '\x90B', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x90D', 
		'\x3', '\x2', '\x2', '\x2', '\x90D', '\x90E', '\x3', '\x2', '\x2', '\x2', 
		'\x90E', '\x910', '\x5', '\x3BE', '\x1E0', '\x2', '\x90F', '\x90C', '\x3', 
		'\x2', '\x2', '\x2', '\x910', '\x911', '\x3', '\x2', '\x2', '\x2', '\x911', 
		'\x90F', '\x3', '\x2', '\x2', '\x2', '\x911', '\x912', '\x3', '\x2', '\x2', 
		'\x2', '\x912', '\x914', '\x3', '\x2', '\x2', '\x2', '\x913', '\x90A', 
		'\x3', '\x2', '\x2', '\x2', '\x913', '\x914', '\x3', '\x2', '\x2', '\x2', 
		'\x914', '\x916', '\x3', '\x2', '\x2', '\x2', '\x915', '\x917', '\a', 
		'\xCE', '\x2', '\x2', '\x916', '\x915', '\x3', '\x2', '\x2', '\x2', '\x916', 
		'\x917', '\x3', '\x2', '\x2', '\x2', '\x917', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\x918', '\x919', '\a', '\x1D7', '\x2', '\x2', '\x919', '\x91A', 
		'\a', '\\', '\x2', '\x2', '\x91A', '\x91E', '\a', '\x22E', '\x2', '\x2', 
		'\x91B', '\x91C', '\a', '\xAA', '\x2', '\x2', '\x91C', '\x91F', '\a', 
		'\x253', '\x2', '\x2', '\x91D', '\x91F', '\x5', '\x348', '\x1A5', '\x2', 
		'\x91E', '\x91B', '\x3', '\x2', '\x2', '\x2', '\x91E', '\x91D', '\x3', 
		'\x2', '\x2', '\x2', '\x91F', '\x940', '\x3', '\x2', '\x2', '\x2', '\x920', 
		'\x921', '\a', '\xD9', '\x2', '\x2', '\x921', '\x922', '\a', '\\', '\x2', 
		'\x2', '\x922', '\x93D', '\a', '\x22E', '\x2', '\x2', '\x923', '\x924', 
		'\a', '\xAA', '\x2', '\x2', '\x924', '\x93E', '\a', '\x253', '\x2', '\x2', 
		'\x925', '\x92D', '\x5', '\x348', '\x1A5', '\x2', '\x926', '\x92B', '\a', 
		'\x26B', '\x2', '\x2', '\x927', '\x928', '\a', '\x160', '\x2', '\x2', 
		'\x928', '\x92C', '\a', '\x1DB', '\x2', '\x2', '\x929', '\x92A', '\a', 
		'\x1DA', '\x2', '\x2', '\x92A', '\x92C', '\x5', '\xC0', '\x61', '\x2', 
		'\x92B', '\x927', '\x3', '\x2', '\x2', '\x2', '\x92B', '\x929', '\x3', 
		'\x2', '\x2', '\x2', '\x92C', '\x92E', '\x3', '\x2', '\x2', '\x2', '\x92D', 
		'\x926', '\x3', '\x2', '\x2', '\x2', '\x92D', '\x92E', '\x3', '\x2', '\x2', 
		'\x2', '\x92E', '\x931', '\x3', '\x2', '\x2', '\x2', '\x92F', '\x930', 
		'\a', '\x1C', '\x2', '\x2', '\x930', '\x932', '\a', '\x1CA', '\x2', '\x2', 
		'\x931', '\x92F', '\x3', '\x2', '\x2', '\x2', '\x931', '\x932', '\x3', 
		'\x2', '\x2', '\x2', '\x932', '\x93B', '\x3', '\x2', '\x2', '\x2', '\x933', 
		'\x934', '\a', '\x1B', '\x2', '\x2', '\x934', '\x939', '\a', '\x256', 
		'\x2', '\x2', '\x935', '\x93A', '\a', '\x191', '\x2', '\x2', '\x936', 
		'\x93A', '\a', '\x43', '\x2', '\x2', '\x937', '\x938', '\a', '\x94', '\x2', 
		'\x2', '\x938', '\x93A', '\a', '\x148', '\x2', '\x2', '\x939', '\x935', 
		'\x3', '\x2', '\x2', '\x2', '\x939', '\x936', '\x3', '\x2', '\x2', '\x2', 
		'\x939', '\x937', '\x3', '\x2', '\x2', '\x2', '\x93A', '\x93C', '\x3', 
		'\x2', '\x2', '\x2', '\x93B', '\x933', '\x3', '\x2', '\x2', '\x2', '\x93B', 
		'\x93C', '\x3', '\x2', '\x2', '\x2', '\x93C', '\x93E', '\x3', '\x2', '\x2', 
		'\x2', '\x93D', '\x923', '\x3', '\x2', '\x2', '\x2', '\x93D', '\x925', 
		'\x3', '\x2', '\x2', '\x2', '\x93E', '\x940', '\x3', '\x2', '\x2', '\x2', 
		'\x93F', '\x918', '\x3', '\x2', '\x2', '\x2', '\x93F', '\x920', '\x3', 
		'\x2', '\x2', '\x2', '\x940', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x941', 
		'\x946', '\a', '\x2B3', '\x2', '\x2', '\x942', '\x944', '\a', '\x2B9', 
		'\x2', '\x2', '\x943', '\x942', '\x3', '\x2', '\x2', '\x2', '\x943', '\x944', 
		'\x3', '\x2', '\x2', '\x2', '\x944', '\x945', '\x3', '\x2', '\x2', '\x2', 
		'\x945', '\x947', '\x5', '\x3B2', '\x1DA', '\x2', '\x946', '\x943', '\x3', 
		'\x2', '\x2', '\x2', '\x947', '\x948', '\x3', '\x2', '\x2', '\x2', '\x948', 
		'\x946', '\x3', '\x2', '\x2', '\x2', '\x948', '\x949', '\x3', '\x2', '\x2', 
		'\x2', '\x949', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x94A', '\x94B', 
		'\a', '\x2B4', '\x2', '\x2', '\x94B', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\x94C', '\x94D', '\a', '\x1F8', '\x2', '\x2', '\x94D', '\x94E', '\a', 
		'\x62', '\x2', '\x2', '\x94E', '\x952', '\a', '\x2C7', '\x2', '\x2', '\x94F', 
		'\x953', '\a', '\xE', '\x2', '\x2', '\x950', '\x953', '\a', '\x84', '\x2', 
		'\x2', '\x951', '\x953', '\x5', '\xCE', 'h', '\x2', '\x952', '\x94F', 
		'\x3', '\x2', '\x2', '\x2', '\x952', '\x950', '\x3', '\x2', '\x2', '\x2', 
		'\x952', '\x951', '\x3', '\x2', '\x2', '\x2', '\x953', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\x954', '\x955', '\t', '\x16', '\x2', '\x2', '\x955', 
		'\x956', '\a', '\x62', '\x2', '\x2', '\x956', '\x957', '\a', '\x2C7', 
		'\x2', '\x2', '\x957', '\x958', '\x5', '\xCE', 'h', '\x2', '\x958', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\x959', '\x960', '\x5', '\xD0', 'i', '\x2', 
		'\x95A', '\x95D', '\x5', '\xD2', 'j', '\x2', '\x95B', '\x95C', '\a', '\xD0', 
		'\x2', '\x2', '\x95C', '\x95E', '\x5', '\x358', '\x1AD', '\x2', '\x95D', 
		'\x95B', '\x3', '\x2', '\x2', '\x2', '\x95D', '\x95E', '\x3', '\x2', '\x2', 
		'\x2', '\x95E', '\x960', '\x3', '\x2', '\x2', '\x2', '\x95F', '\x959', 
		'\x3', '\x2', '\x2', '\x2', '\x95F', '\x95A', '\x3', '\x2', '\x2', '\x2', 
		'\x960', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x961', '\x962', '\a', '\x99', 
		'\x2', '\x2', '\x962', '\x963', '\a', '\xEF', '\x2', '\x2', '\x963', '\x964', 
		'\x5', '\x362', '\x1B2', '\x2', '\x964', '\x965', '\a', '\x2C5', '\x2', 
		'\x2', '\x965', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x966', '\x969', 
		'\a', '\x1D7', '\x2', '\x2', '\x967', '\x96A', '\x5', '\xDA', 'n', '\x2', 
		'\x968', '\x96A', '\x5', '\xDC', 'o', '\x2', '\x969', '\x967', '\x3', 
		'\x2', '\x2', '\x2', '\x969', '\x968', '\x3', '\x2', '\x2', '\x2', '\x96A', 
		'\x96B', '\x3', '\x2', '\x2', '\x2', '\x96B', '\x96C', '\a', '\x2C5', 
		'\x2', '\x2', '\x96C', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x96D', '\x96F', 
		'\a', '\x2B9', '\x2', '\x2', '\x96E', '\x96D', '\x3', '\x2', '\x2', '\x2', 
		'\x96E', '\x96F', '\x3', '\x2', '\x2', '\x2', '\x96F', '\x972', '\x3', 
		'\x2', '\x2', '\x2', '\x970', '\x973', '\x5', '\x336', '\x19C', '\x2', 
		'\x971', '\x973', '\x5', '\x38A', '\x1C6', '\x2', '\x972', '\x970', '\x3', 
		'\x2', '\x2', '\x2', '\x972', '\x971', '\x3', '\x2', '\x2', '\x2', '\x973', 
		'\x974', '\x3', '\x2', '\x2', '\x2', '\x974', '\x97A', '\a', '\xD3', '\x2', 
		'\x2', '\x975', '\x977', '\a', '\x2B9', '\x2', '\x2', '\x976', '\x975', 
		'\x3', '\x2', '\x2', '\x2', '\x976', '\x977', '\x3', '\x2', '\x2', '\x2', 
		'\x977', '\x978', '\x3', '\x2', '\x2', '\x2', '\x978', '\x97B', '\x5', 
		'\x334', '\x19B', '\x2', '\x979', '\x97B', '\a', '\x1B3', '\x2', '\x2', 
		'\x97A', '\x976', '\x3', '\x2', '\x2', '\x2', '\x97A', '\x979', '\x3', 
		'\x2', '\x2', '\x2', '\x97B', '\x97C', '\x3', '\x2', '\x2', '\x2', '\x97C', 
		'\x97A', '\x3', '\x2', '\x2', '\x2', '\x97C', '\x97D', '\x3', '\x2', '\x2', 
		'\x2', '\x97D', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x980', 
		'\a', '\x2B9', '\x2', '\x2', '\x97F', '\x97E', '\x3', '\x2', '\x2', '\x2', 
		'\x97F', '\x980', '\x3', '\x2', '\x2', '\x2', '\x980', '\x983', '\x3', 
		'\x2', '\x2', '\x2', '\x981', '\x984', '\x5', '\x336', '\x19C', '\x2', 
		'\x982', '\x984', '\x5', '\x388', '\x1C5', '\x2', '\x983', '\x981', '\x3', 
		'\x2', '\x2', '\x2', '\x983', '\x982', '\x3', '\x2', '\x2', '\x2', '\x984', 
		'\x986', '\x3', '\x2', '\x2', '\x2', '\x985', '\x97F', '\x3', '\x2', '\x2', 
		'\x2', '\x986', '\x987', '\x3', '\x2', '\x2', '\x2', '\x987', '\x985', 
		'\x3', '\x2', '\x2', '\x2', '\x987', '\x988', '\x3', '\x2', '\x2', '\x2', 
		'\x988', '\x989', '\x3', '\x2', '\x2', '\x2', '\x989', '\x98A', '\a', 
		'\x178', '\x2', '\x2', '\x98A', '\x98B', '\x5', '\x366', '\x1B4', '\x2', 
		'\x98B', '\x98C', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x993', '\a', 
		'\xD3', '\x2', '\x2', '\x98D', '\x98F', '\a', '\x2B9', '\x2', '\x2', '\x98E', 
		'\x98D', '\x3', '\x2', '\x2', '\x2', '\x98E', '\x98F', '\x3', '\x2', '\x2', 
		'\x2', '\x98F', '\x990', '\x3', '\x2', '\x2', '\x2', '\x990', '\x994', 
		'\x5', '\x334', '\x19B', '\x2', '\x991', '\x994', '\a', '\x1B3', '\x2', 
		'\x2', '\x992', '\x994', '\x5', '\x336', '\x19C', '\x2', '\x993', '\x98E', 
		'\x3', '\x2', '\x2', '\x2', '\x993', '\x991', '\x3', '\x2', '\x2', '\x2', 
		'\x993', '\x992', '\x3', '\x2', '\x2', '\x2', '\x994', '\x995', '\x3', 
		'\x2', '\x2', '\x2', '\x995', '\x993', '\x3', '\x2', '\x2', '\x2', '\x995', 
		'\x996', '\x3', '\x2', '\x2', '\x2', '\x996', '\x99A', '\x3', '\x2', '\x2', 
		'\x2', '\x997', '\x998', '\a', '@', '\x2', '\x2', '\x998', '\x99B', '\a', 
		'_', '\x2', '\x2', '\x999', '\x99B', '\a', '\xCE', '\x2', '\x2', '\x99A', 
		'\x997', '\x3', '\x2', '\x2', '\x2', '\x99A', '\x999', '\x3', '\x2', '\x2', 
		'\x2', '\x99A', '\x99B', '\x3', '\x2', '\x2', '\x2', '\x99B', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x99C', '\x9A8', '\a', '\xD9', '\x2', '\x2', 
		'\x99D', '\x99F', '\a', '\x2B9', '\x2', '\x2', '\x99E', '\x99D', '\x3', 
		'\x2', '\x2', '\x2', '\x99E', '\x99F', '\x3', '\x2', '\x2', '\x2', '\x99F', 
		'\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A0', '\x9A7', '\x5', '\x336', 
		'\x19C', '\x2', '\x9A1', '\x9A7', '\x5', '\x38A', '\x1C6', '\x2', '\x9A2', 
		'\x9A4', '\x5', '\x388', '\x1C5', '\x2', '\x9A3', '\x9A5', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x9A4', '\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A4', 
		'\x9A5', '\x3', '\x2', '\x2', '\x2', '\x9A5', '\x9A7', '\x3', '\x2', '\x2', 
		'\x2', '\x9A6', '\x9A0', '\x3', '\x2', '\x2', '\x2', '\x9A6', '\x9A1', 
		'\x3', '\x2', '\x2', '\x2', '\x9A6', '\x9A2', '\x3', '\x2', '\x2', '\x2', 
		'\x9A7', '\x9A9', '\x3', '\x2', '\x2', '\x2', '\x9A8', '\x99E', '\x3', 
		'\x2', '\x2', '\x2', '\x9A9', '\x9AA', '\x3', '\x2', '\x2', '\x2', '\x9AA', 
		'\x9A8', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x9AB', '\x3', '\x2', '\x2', 
		'\x2', '\x9AB', '\x9AE', '\x3', '\x2', '\x2', '\x2', '\x9AC', '\x9AD', 
		'\a', '\x178', '\x2', '\x2', '\x9AD', '\x9AF', '\x5', '\x366', '\x1B4', 
		'\x2', '\x9AE', '\x9AC', '\x3', '\x2', '\x2', '\x2', '\x9AE', '\x9AF', 
		'\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9B0', '\x3', '\x2', '\x2', '\x2', 
		'\x9B0', '\x9B6', '\a', '\x238', '\x2', '\x2', '\x9B1', '\x9B3', '\a', 
		'\x2B9', '\x2', '\x2', '\x9B2', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x9B2', 
		'\x9B3', '\x3', '\x2', '\x2', '\x2', '\x9B3', '\x9B4', '\x3', '\x2', '\x2', 
		'\x2', '\x9B4', '\x9B7', '\x5', '\x334', '\x19B', '\x2', '\x9B5', '\x9B7', 
		'\a', '\x1B3', '\x2', '\x2', '\x9B6', '\x9B2', '\x3', '\x2', '\x2', '\x2', 
		'\x9B6', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9B7', '\x9B8', '\x3', 
		'\x2', '\x2', '\x2', '\x9B8', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B8', 
		'\x9B9', '\x3', '\x2', '\x2', '\x2', '\x9B9', '\x9BD', '\x3', '\x2', '\x2', 
		'\x2', '\x9BA', '\x9BB', '\a', '\x26B', '\x2', '\x2', '\x9BB', '\x9BC', 
		'\t', '\x17', '\x2', '\x2', '\x9BC', '\x9BE', '\a', '\x17C', '\x2', '\x2', 
		'\x9BD', '\x9BA', '\x3', '\x2', '\x2', '\x2', '\x9BD', '\x9BE', '\x3', 
		'\x2', '\x2', '\x2', '\x9BE', '\x9C2', '\x3', '\x2', '\x2', '\x2', '\x9BF', 
		'\x9C0', '\a', '\x26B', '\x2', '\x2', '\x9C0', '\x9C1', '\a', '\xE1', 
		'\x2', '\x2', '\x9C1', '\x9C3', '\a', '\x17C', '\x2', '\x2', '\x9C2', 
		'\x9BF', '\x3', '\x2', '\x2', '\x2', '\x9C2', '\x9C3', '\x3', '\x2', '\x2', 
		'\x2', '\x9C3', '\x9C7', '\x3', '\x2', '\x2', '\x2', '\x9C4', '\x9C5', 
		'\a', '\x26B', '\x2', '\x2', '\x9C5', '\x9C6', '\a', '\xD9', '\x2', '\x2', 
		'\x9C6', '\x9C8', '\a', '\x17C', '\x2', '\x2', '\x9C7', '\x9C4', '\x3', 
		'\x2', '\x2', '\x2', '\x9C7', '\x9C8', '\x3', '\x2', '\x2', '\x2', '\x9C8', 
		'\x9CA', '\x3', '\x2', '\x2', '\x2', '\x9C9', '\x9CB', '\x5', '\xE0', 
		'q', '\x2', '\x9CA', '\x9C9', '\x3', '\x2', '\x2', '\x2', '\x9CA', '\x9CB', 
		'\x3', '\x2', '\x2', '\x2', '\x9CB', '\x9CC', '\x3', '\x2', '\x2', '\x2', 
		'\x9CC', '\x9CD', '\a', '\x2C5', '\x2', '\x2', '\x9CD', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\x9CE', '\x9CF', '\a', '\x61', '\x2', '\x2', '\x9CF', 
		'\x9D0', '\a', '\x2C7', '\x2', '\x2', '\x9D0', '\x9D1', '\t', '\x18', 
		'\x2', '\x2', '\x9D1', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x9D2', '\x9D5', 
		'\a', 'k', '\x2', '\x2', '\x9D3', '\x9D4', '\a', '\x180', '\x2', '\x2', 
		'\x9D4', '\x9D6', '\a', '\x1C9', '\x2', '\x2', '\x9D5', '\x9D3', '\x3', 
		'\x2', '\x2', '\x2', '\x9D5', '\x9D6', '\x3', '\x2', '\x2', '\x2', '\x9D6', 
		'\x9DB', '\x3', '\x2', '\x2', '\x2', '\x9D7', '\x9D9', '\a', '\x160', 
		'\x2', '\x2', '\x9D8', '\x9D7', '\x3', '\x2', '\x2', '\x2', '\x9D8', '\x9D9', 
		'\x3', '\x2', '\x2', '\x2', '\x9D9', '\x9DA', '\x3', '\x2', '\x2', '\x2', 
		'\x9DA', '\x9DC', '\a', '\xCE', '\x2', '\x2', '\x9DB', '\x9D8', '\x3', 
		'\x2', '\x2', '\x2', '\x9DB', '\x9DC', '\x3', '\x2', '\x2', '\x2', '\x9DC', 
		'\x9E3', '\x3', '\x2', '\x2', '\x2', '\x9DD', '\x9E4', '\a', '\x9F', '\x2', 
		'\x2', '\x9DE', '\x9E0', '\a', '\x9D', '\x2', '\x2', '\x9DF', '\x9E1', 
		'\a', '\x9F', '\x2', '\x2', '\x9E0', '\x9DF', '\x3', '\x2', '\x2', '\x2', 
		'\x9E0', '\x9E1', '\x3', '\x2', '\x2', '\x2', '\x9E1', '\x9E4', '\x3', 
		'\x2', '\x2', '\x2', '\x9E2', '\x9E4', '\a', '\x158', '\x2', '\x2', '\x9E3', 
		'\x9DD', '\x3', '\x2', '\x2', '\x2', '\x9E3', '\x9DE', '\x3', '\x2', '\x2', 
		'\x2', '\x9E3', '\x9E2', '\x3', '\x2', '\x2', '\x2', '\x9E3', '\x9E4', 
		'\x3', '\x2', '\x2', '\x2', '\x9E4', '\x9E5', '\x3', '\x2', '\x2', '\x2', 
		'\x9E5', '\x9E6', '\a', '\x261', '\x2', '\x2', '\x9E6', '\x9E8', '\x5', 
		'\x342', '\x1A2', '\x2', '\x9E7', '\x9E9', '\x5', '\xE4', 's', '\x2', 
		'\x9E8', '\x9E7', '\x3', '\x2', '\x2', '\x2', '\x9E8', '\x9E9', '\x3', 
		'\x2', '\x2', '\x2', '\x9E9', '\x9EA', '\x3', '\x2', '\x2', '\x2', '\x9EA', 
		'\x9EB', '\a', '\x15', '\x2', '\x2', '\x9EB', '\x9ED', '\x5', '\x148', 
		'\xA5', '\x2', '\x9EC', '\x9EE', '\x5', '\x2AE', '\x158', '\x2', '\x9ED', 
		'\x9EC', '\x3', '\x2', '\x2', '\x2', '\x9ED', '\x9EE', '\x3', '\x2', '\x2', 
		'\x2', '\x9EE', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x9EF', '\x9F2', 
		'\x5', '\xE6', 't', '\x2', '\x9F0', '\x9F2', '\x5', '\xE8', 'u', '\x2', 
		'\x9F1', '\x9EF', '\x3', '\x2', '\x2', '\x2', '\x9F1', '\x9F0', '\x3', 
		'\x2', '\x2', '\x2', '\x9F2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\x9F3', 
		'\xA04', '\a', '\x2B3', '\x2', '\x2', '\x9F4', '\x9F6', '\a', '\x2B9', 
		'\x2', '\x2', '\x9F5', '\x9F4', '\x3', '\x2', '\x2', '\x2', '\x9F5', '\x9F6', 
		'\x3', '\x2', '\x2', '\x2', '\x9F6', '\xA02', '\x3', '\x2', '\x2', '\x2', 
		'\x9F7', '\x9F9', '\x5', '\x32A', '\x196', '\x2', '\x9F8', '\x9FA', '\t', 
		'\x19', '\x2', '\x2', '\x9F9', '\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9F9', 
		'\x9FA', '\x3', '\x2', '\x2', '\x2', '\x9FA', '\x9FE', '\x3', '\x2', '\x2', 
		'\x2', '\x9FB', '\x9FD', '\x5', '\xEA', 'v', '\x2', '\x9FC', '\x9FB', 
		'\x3', '\x2', '\x2', '\x2', '\x9FD', '\xA00', '\x3', '\x2', '\x2', '\x2', 
		'\x9FE', '\x9FC', '\x3', '\x2', '\x2', '\x2', '\x9FE', '\x9FF', '\x3', 
		'\x2', '\x2', '\x2', '\x9FF', '\xA03', '\x3', '\x2', '\x2', '\x2', '\xA00', 
		'\x9FE', '\x3', '\x2', '\x2', '\x2', '\xA01', '\xA03', '\x5', '\xEC', 
		'w', '\x2', '\xA02', '\x9F7', '\x3', '\x2', '\x2', '\x2', '\xA02', '\xA01', 
		'\x3', '\x2', '\x2', '\x2', '\xA03', '\xA05', '\x3', '\x2', '\x2', '\x2', 
		'\xA04', '\x9F5', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA06', '\x3', 
		'\x2', '\x2', '\x2', '\xA06', '\xA04', '\x3', '\x2', '\x2', '\x2', '\xA06', 
		'\xA07', '\x3', '\x2', '\x2', '\x2', '\xA07', '\xA08', '\x3', '\x2', '\x2', 
		'\x2', '\xA08', '\xA09', '\a', '\x2B4', '\x2', '\x2', '\xA09', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xA0A', '\xA0B', '\a', '\x172', '\x2', '\x2', 
		'\xA0B', '\xA1E', '\x5', '\x3B6', '\x1DC', '\x2', '\xA0C', '\xA0D', '\a', 
		'\x26B', '\x2', '\x2', '\xA0D', '\xA0E', '\a', '\x16F', '\x2', '\x2', 
		'\xA0E', '\xA1A', '\t', '\x1A', '\x2', '\x2', '\xA0F', '\xA1B', '\a', 
		'\x84', '\x2', '\x2', '\xA10', '\xA15', '\a', '\x2B3', '\x2', '\x2', '\xA11', 
		'\xA13', '\a', '\x2B9', '\x2', '\x2', '\xA12', '\xA11', '\x3', '\x2', 
		'\x2', '\x2', '\xA12', '\xA13', '\x3', '\x2', '\x2', '\x2', '\xA13', '\xA14', 
		'\x3', '\x2', '\x2', '\x2', '\xA14', '\xA16', '\a', '\x2D0', '\x2', '\x2', 
		'\xA15', '\xA12', '\x3', '\x2', '\x2', '\x2', '\xA16', '\xA17', '\x3', 
		'\x2', '\x2', '\x2', '\xA17', '\xA15', '\x3', '\x2', '\x2', '\x2', '\xA17', 
		'\xA18', '\x3', '\x2', '\x2', '\x2', '\xA18', '\xA19', '\x3', '\x2', '\x2', 
		'\x2', '\xA19', '\xA1B', '\a', '\x2B4', '\x2', '\x2', '\xA1A', '\xA0F', 
		'\x3', '\x2', '\x2', '\x2', '\xA1A', '\xA10', '\x3', '\x2', '\x2', '\x2', 
		'\xA1B', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\xA1C', '\xA1D', '\a', 
		'\x244', '\x2', '\x2', '\xA1D', '\xA1F', '\x5', '\x342', '\x1A2', '\x2', 
		'\xA1E', '\xA0C', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA1C', '\x3', 
		'\x2', '\x2', '\x2', '\xA1F', '\xA31', '\x3', '\x2', '\x2', '\x2', '\xA20', 
		'\xA29', '\a', '\x2B3', '\x2', '\x2', '\xA21', '\xA23', '\a', '\x2B9', 
		'\x2', '\x2', '\xA22', '\xA21', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA23', 
		'\x3', '\x2', '\x2', '\x2', '\xA23', '\xA27', '\x3', '\x2', '\x2', '\x2', 
		'\xA24', '\xA28', '\x5', '\xEC', 'w', '\x2', '\xA25', '\xA26', '\a', '\x2D0', 
		'\x2', '\x2', '\xA26', '\xA28', '\x5', '\xEA', 'v', '\x2', '\xA27', '\xA24', 
		'\x3', '\x2', '\x2', '\x2', '\xA27', '\xA25', '\x3', '\x2', '\x2', '\x2', 
		'\xA28', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA22', '\x3', 
		'\x2', '\x2', '\x2', '\xA2A', '\xA2B', '\x3', '\x2', '\x2', '\x2', '\xA2B', 
		'\xA29', '\x3', '\x2', '\x2', '\x2', '\xA2B', '\xA2C', '\x3', '\x2', '\x2', 
		'\x2', '\xA2C', '\xA2D', '\x3', '\x2', '\x2', '\x2', '\xA2D', '\xA2E', 
		'\a', '\x2B4', '\x2', '\x2', '\xA2E', '\xA30', '\x3', '\x2', '\x2', '\x2', 
		'\xA2F', '\xA20', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA33', '\x3', 
		'\x2', '\x2', '\x2', '\xA31', '\xA2F', '\x3', '\x2', '\x2', '\x2', '\xA31', 
		'\xA32', '\x3', '\x2', '\x2', '\x2', '\xA32', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xA33', '\xA31', '\x3', '\x2', '\x2', '\x2', '\xA34', '\xA35', 
		'\a', '^', '\x2', '\x2', '\xA35', '\xA37', '\x5', '\x338', '\x19D', '\x2', 
		'\xA36', '\xA34', '\x3', '\x2', '\x2', '\x2', '\xA36', '\xA37', '\x3', 
		'\x2', '\x2', '\x2', '\xA37', '\xA41', '\x3', '\x2', '\x2', '\x2', '\xA38', 
		'\xA3A', '\a', '\x167', '\x2', '\x2', '\xA39', '\xA38', '\x3', '\x2', 
		'\x2', '\x2', '\xA39', '\xA3A', '\x3', '\x2', '\x2', '\x2', '\xA3A', '\xA3B', 
		'\x3', '\x2', '\x2', '\x2', '\xA3B', '\xA42', '\a', '\x16A', '\x2', '\x2', 
		'\xA3C', '\xA42', '\a', '\x248', '\x2', '\x2', '\xA3D', '\xA3E', '\a', 
		'\x1AA', '\x2', '\x2', '\xA3E', '\xA42', '\a', '\x10F', '\x2', '\x2', 
		'\xA3F', '\xA42', '\x5', '\x16C', '\xB7', '\x2', '\xA40', '\xA42', '\x5', 
		'\x162', '\xB2', '\x2', '\xA41', '\xA39', '\x3', '\x2', '\x2', '\x2', 
		'\xA41', '\xA3C', '\x3', '\x2', '\x2', '\x2', '\xA41', '\xA3D', '\x3', 
		'\x2', '\x2', '\x2', '\xA41', '\xA3F', '\x3', '\x2', '\x2', '\x2', '\xA41', 
		'\xA40', '\x3', '\x2', '\x2', '\x2', '\xA42', '\xA44', '\x3', '\x2', '\x2', 
		'\x2', '\xA43', '\xA45', '\x5', '\xEE', 'x', '\x2', '\xA44', '\xA43', 
		'\x3', '\x2', '\x2', '\x2', '\xA44', '\xA45', '\x3', '\x2', '\x2', '\x2', 
		'\xA45', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xA46', '\xA47', '\a', '^', 
		'\x2', '\x2', '\xA47', '\xA49', '\x5', '\x338', '\x19D', '\x2', '\xA48', 
		'\xA46', '\x3', '\x2', '\x2', '\x2', '\xA48', '\xA49', '\x3', '\x2', '\x2', 
		'\x2', '\xA49', '\xA4E', '\x3', '\x2', '\x2', '\x2', '\xA4A', '\xA4F', 
		'\x5', '\x172', '\xBA', '\x2', '\xA4B', '\xA4F', '\x5', '\x16A', '\xB6', 
		'\x2', '\xA4C', '\xA4F', '\x5', '\x170', '\xB9', '\x2', '\xA4D', '\xA4F', 
		'\x5', '\x162', '\xB2', '\x2', '\xA4E', '\xA4A', '\x3', '\x2', '\x2', 
		'\x2', '\xA4E', '\xA4B', '\x3', '\x2', '\x2', '\x2', '\xA4E', '\xA4C', 
		'\x3', '\x2', '\x2', '\x2', '\xA4E', '\xA4D', '\x3', '\x2', '\x2', '\x2', 
		'\xA4F', '\xA51', '\x3', '\x2', '\x2', '\x2', '\xA50', '\xA48', '\x3', 
		'\x2', '\x2', '\x2', '\xA51', '\xA52', '\x3', '\x2', '\x2', '\x2', '\xA52', 
		'\xA50', '\x3', '\x2', '\x2', '\x2', '\xA52', '\xA53', '\x3', '\x2', '\x2', 
		'\x2', '\xA53', '\xA55', '\x3', '\x2', '\x2', '\x2', '\xA54', '\xA56', 
		'\x5', '\xEE', 'x', '\x2', '\xA55', '\xA54', '\x3', '\x2', '\x2', '\x2', 
		'\xA55', '\xA56', '\x3', '\x2', '\x2', '\x2', '\xA56', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\xA57', '\xA59', '\a', '\x167', '\x2', '\x2', '\xA58', 
		'\xA57', '\x3', '\x2', '\x2', '\x2', '\xA58', '\xA59', '\x3', '\x2', '\x2', 
		'\x2', '\xA59', '\xA5A', '\x3', '\x2', '\x2', '\x2', '\xA5A', '\xA62', 
		'\a', '\x86', '\x2', '\x2', '\xA5B', '\xA5C', '\a', '\xF8', '\x2', '\x2', 
		'\xA5C', '\xA62', '\t', '\x1B', '\x2', '\x2', '\xA5D', '\xA62', '\t', 
		'\x1C', '\x2', '\x2', '\xA5E', '\xA62', '\t', '\a', '\x2', '\x2', '\xA5F', 
		'\xA62', '\t', '\x1D', '\x2', '\x2', '\xA60', '\xA62', '\x5', '\x124', 
		'\x93', '\x2', '\xA61', '\xA58', '\x3', '\x2', '\x2', '\x2', '\xA61', 
		'\xA5B', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA5D', '\x3', '\x2', '\x2', 
		'\x2', '\xA61', '\xA5E', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA5F', 
		'\x3', '\x2', '\x2', '\x2', '\xA61', '\xA60', '\x3', '\x2', '\x2', '\x2', 
		'\xA62', '\xA63', '\x3', '\x2', '\x2', '\x2', '\xA63', '\xA61', '\x3', 
		'\x2', '\x2', '\x2', '\xA63', '\xA64', '\x3', '\x2', '\x2', '\x2', '\xA64', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xA65', '\xA66', '\a', '\xA4', '\x2', 
		'\x2', '\xA66', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xA67', '\xA68', 
		'\a', '\xA4', '\x2', '\x2', '\xA68', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xA69', '\xA6A', '\a', '\xA4', '\x2', '\x2', '\xA6A', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xA6B', '\xA6C', '\a', '\x18E', '\x2', '\x2', '\xA6C', 
		'\xA6D', '\x5', '\x34E', '\x1A8', '\x2', '\xA6D', '\xF7', '\x3', '\x2', 
		'\x2', '\x2', '\xA6E', '\xA70', '\a', '\x18E', '\x2', '\x2', '\xA6F', 
		'\xA71', '\x5', '\x34E', '\x1A8', '\x2', '\xA70', '\xA6F', '\x3', '\x2', 
		'\x2', '\x2', '\xA70', '\xA71', '\x3', '\x2', '\x2', '\x2', '\xA71', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xA72', '\xA73', '\a', '\xF0', '\x2', '\x2', 
		'\xA73', '\xA74', '\t', '\x1E', '\x2', '\x2', '\xA74', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xA75', '\xA89', '\x5', '\x14C', '\xA7', '\x2', 
		'\xA76', '\xA78', '\a', '\x185', '\x2', '\x2', '\xA77', '\xA79', '\x5', 
		'\x14C', '\xA7', '\x2', '\xA78', '\xA77', '\x3', '\x2', '\x2', '\x2', 
		'\xA78', '\xA79', '\x3', '\x2', '\x2', '\x2', '\xA79', '\xA89', '\x3', 
		'\x2', '\x2', '\x2', '\xA7A', '\xA89', '\x5', '\x10A', '\x86', '\x2', 
		'\xA7B', '\xA89', '\x5', '\x10C', '\x87', '\x2', '\xA7C', '\xA89', '\x5', 
		'\xFE', '\x80', '\x2', '\xA7D', '\xA89', '\x5', '\x112', '\x8A', '\x2', 
		'\xA7E', '\xA7F', '\a', '\x25D', '\x2', '\x2', '\xA7F', '\xA80', '\x5', 
		'\x11C', '\x8F', '\x2', '\xA80', '\xA81', '\a', '\x217', '\x2', '\x2', 
		'\xA81', '\xA83', '\a', '\x15', '\x2', '\x2', '\xA82', '\xA84', '\t', 
		'\x1F', '\x2', '\x2', '\xA83', '\xA82', '\x3', '\x2', '\x2', '\x2', '\xA83', 
		'\xA84', '\x3', '\x2', '\x2', '\x2', '\xA84', '\xA85', '\x3', '\x2', '\x2', 
		'\x2', '\xA85', '\xA86', '\a', '\x11F', '\x2', '\x2', '\xA86', '\xA87', 
		'\x5', '\x352', '\x1AA', '\x2', '\xA87', '\xA89', '\x3', '\x2', '\x2', 
		'\x2', '\xA88', '\xA75', '\x3', '\x2', '\x2', '\x2', '\xA88', '\xA76', 
		'\x3', '\x2', '\x2', '\x2', '\xA88', '\xA7A', '\x3', '\x2', '\x2', '\x2', 
		'\xA88', '\xA7B', '\x3', '\x2', '\x2', '\x2', '\xA88', '\xA7C', '\x3', 
		'\x2', '\x2', '\x2', '\xA88', '\xA7D', '\x3', '\x2', '\x2', '\x2', '\xA88', 
		'\xA7E', '\x3', '\x2', '\x2', '\x2', '\xA89', '\xA8A', '\x3', '\x2', '\x2', 
		'\x2', '\xA8A', '\xA88', '\x3', '\x2', '\x2', '\x2', '\xA8A', '\xA8B', 
		'\x3', '\x2', '\x2', '\x2', '\xA8B', '\xA8D', '\x3', '\x2', '\x2', '\x2', 
		'\xA8C', '\xA88', '\x3', '\x2', '\x2', '\x2', '\xA8C', '\xA8D', '\x3', 
		'\x2', '\x2', '\x2', '\xA8D', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xA8E', 
		'\xA8F', '\a', '\xFB', '\x2', '\x2', '\xA8F', '\xA93', '\x5', '\x100', 
		'\x81', '\x2', '\xA90', '\xA91', '\a', '\x160', '\x2', '\x2', '\xA91', 
		'\xA93', '\a', '\xFB', '\x2', '\x2', '\xA92', '\xA8E', '\x3', '\x2', '\x2', 
		'\x2', '\xA92', '\xA90', '\x3', '\x2', '\x2', '\x2', '\xA93', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\xA94', '\xA96', '\x5', '\x102', '\x82', 
		'\x2', '\xA95', '\xA94', '\x3', '\x2', '\x2', '\x2', '\xA95', '\xA96', 
		'\x3', '\x2', '\x2', '\x2', '\xA96', '\xAA1', '\x3', '\x2', '\x2', '\x2', 
		'\xA97', '\xA99', '\x5', '\x104', '\x83', '\x2', '\xA98', '\xA97', '\x3', 
		'\x2', '\x2', '\x2', '\xA98', '\xA99', '\x3', '\x2', '\x2', '\x2', '\xA99', 
		'\xAA1', '\x3', '\x2', '\x2', '\x2', '\xA9A', '\xA9C', '\x5', '\x106', 
		'\x84', '\x2', '\xA9B', '\xA9A', '\x3', '\x2', '\x2', '\x2', '\xA9B', 
		'\xA9C', '\x3', '\x2', '\x2', '\x2', '\xA9C', '\xAA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA9D', '\xA9F', '\x5', '\x108', '\x85', '\x2', '\xA9E', '\xA9D', 
		'\x3', '\x2', '\x2', '\x2', '\xA9E', '\xA9F', '\x3', '\x2', '\x2', '\x2', 
		'\xA9F', '\xAA1', '\x3', '\x2', '\x2', '\x2', '\xAA0', '\xA95', '\x3', 
		'\x2', '\x2', '\x2', '\xAA0', '\xA98', '\x3', '\x2', '\x2', '\x2', '\xAA0', 
		'\xA9B', '\x3', '\x2', '\x2', '\x2', '\xAA0', '\xA9E', '\x3', '\x2', '\x2', 
		'\x2', '\xAA1', '\x101', '\x3', '\x2', '\x2', '\x2', '\xAA2', '\xAA3', 
		'\a', '\x139', '\x2', '\x2', '\xAA3', '\xAA9', '\a', '\xD0', '\x2', '\x2', 
		'\xAA4', '\xAAA', '\a', '\x96', '\x2', '\x2', '\xAA5', '\xAA7', '\t', 
		' ', '\x2', '\x2', '\xAA6', '\xAA8', '\t', '!', '\x2', '\x2', '\xAA7', 
		'\xAA6', '\x3', '\x2', '\x2', '\x2', '\xAA7', '\xAA8', '\x3', '\x2', '\x2', 
		'\x2', '\xAA8', '\xAAA', '\x3', '\x2', '\x2', '\x2', '\xAA9', '\xAA4', 
		'\x3', '\x2', '\x2', '\x2', '\xAA9', '\xAA5', '\x3', '\x2', '\x2', '\x2', 
		'\xAAA', '\xAAE', '\x3', '\x2', '\x2', '\x2', '\xAAB', '\xAAC', '\a', 
		'\x160', '\x2', '\x2', '\xAAC', '\xAAE', '\a', '\x139', '\x2', '\x2', 
		'\xAAD', '\xAA2', '\x3', '\x2', '\x2', '\x2', '\xAAD', '\xAAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAAE', '\x103', '\x3', '\x2', '\x2', '\x2', '\xAAF', 
		'\xAB0', '\a', '\x1AB', '\x2', '\x2', '\xAB0', '\xAB1', '\t', '\"', '\x2', 
		'\x2', '\xAB1', '\x105', '\x3', '\x2', '\x2', '\x2', '\xAB2', '\xABB', 
		'\a', '\x95', '\x2', '\x2', '\xAB3', '\xABC', '\a', '\x1F', '\x2', '\x2', 
		'\xAB4', '\xAB9', '\a', ':', '\x2', '\x2', '\xAB5', '\xAB6', '\a', '\x1DE', 
		'\x2', '\x2', '\xAB6', '\xABA', '\a', '\x1B8', '\x2', '\x2', '\xAB7', 
		'\xABA', '\a', '\x18E', '\x2', '\x2', '\xAB8', '\xABA', '\a', '\x21A', 
		'\x2', '\x2', '\xAB9', '\xAB5', '\x3', '\x2', '\x2', '\x2', '\xAB9', '\xAB7', 
		'\x3', '\x2', '\x2', '\x2', '\xAB9', '\xAB8', '\x3', '\x2', '\x2', '\x2', 
		'\xABA', '\xABC', '\x3', '\x2', '\x2', '\x2', '\xABB', '\xAB3', '\x3', 
		'\x2', '\x2', '\x2', '\xABB', '\xAB4', '\x3', '\x2', '\x2', '\x2', '\xABB', 
		'\xABC', '\x3', '\x2', '\x2', '\x2', '\xABC', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\xABD', '\xABF', '\a', '\x9B', '\x2', '\x2', '\xABE', '\xAC0', 
		'\a', '\xE', '\x2', '\x2', '\xABF', '\xABE', '\x3', '\x2', '\x2', '\x2', 
		'\xABF', '\xAC0', '\x3', '\x2', '\x2', '\x2', '\xAC0', '\xAC4', '\x3', 
		'\x2', '\x2', '\x2', '\xAC1', '\xAC2', '\a', '\x160', '\x2', '\x2', '\xAC2', 
		'\xAC4', '\a', '\x9B', '\x2', '\x2', '\xAC3', '\xABD', '\x3', '\x2', '\x2', 
		'\x2', '\xAC3', '\xAC1', '\x3', '\x2', '\x2', '\x2', '\xAC4', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\xAC5', '\xAE1', '\a', 'Y', '\x2', '\x2', 
		'\xAC6', '\xAC7', '\a', '\x1DF', '\x2', '\x2', '\xAC7', '\xAC8', '\a', 
		'\x217', '\x2', '\x2', '\xAC8', '\xACA', '\a', 'Y', '\x2', '\x2', '\xAC9', 
		'\xACB', '\t', '#', '\x2', '\x2', '\xACA', '\xAC9', '\x3', '\x2', '\x2', 
		'\x2', '\xACA', '\xACB', '\x3', '\x2', '\x2', '\x2', '\xACB', '\xAE1', 
		'\x3', '\x2', '\x2', '\x2', '\xACC', '\xACD', '\a', 'Q', '\x2', '\x2', 
		'\xACD', '\xACE', '\a', '\x217', '\x2', '\x2', '\xACE', '\xAD4', '\a', 
		'Y', '\x2', '\x2', '\xACF', '\xAD0', '\a', '\xD0', '\x2', '\x2', '\xAD0', 
		'\xAD2', '\t', '$', '\x2', '\x2', '\xAD1', '\xAD3', '\t', '!', '\x2', 
		'\x2', '\xAD2', '\xAD1', '\x3', '\x2', '\x2', '\x2', '\xAD2', '\xAD3', 
		'\x3', '\x2', '\x2', '\x2', '\xAD3', '\xAD5', '\x3', '\x2', '\x2', '\x2', 
		'\xAD4', '\xACF', '\x3', '\x2', '\x2', '\x2', '\xAD4', '\xAD5', '\x3', 
		'\x2', '\x2', '\x2', '\xAD5', '\xADC', '\x3', '\x2', '\x2', '\x2', '\xAD6', 
		'\xAD8', '\a', '\x160', '\x2', '\x2', '\xAD7', '\xAD6', '\x3', '\x2', 
		'\x2', '\x2', '\xAD7', '\xAD8', '\x3', '\x2', '\x2', '\x2', '\xAD8', '\xAD9', 
		'\x3', '\x2', '\x2', '\x2', '\xAD9', '\xADA', '\a', '\x1DF', '\x2', '\x2', 
		'\xADA', '\xADB', '\a', '\x116', '\x2', '\x2', '\xADB', '\xADD', '\a', 
		'\x122', '\x2', '\x2', '\xADC', '\xAD7', '\x3', '\x2', '\x2', '\x2', '\xADC', 
		'\xADD', '\x3', '\x2', '\x2', '\x2', '\xADD', '\xAE1', '\x3', '\x2', '\x2', 
		'\x2', '\xADE', '\xADF', '\a', '\x160', '\x2', '\x2', '\xADF', '\xAE1', 
		'\a', 'Y', '\x2', '\x2', '\xAE0', '\xAC5', '\x3', '\x2', '\x2', '\x2', 
		'\xAE0', '\xAC6', '\x3', '\x2', '\x2', '\x2', '\xAE0', '\xACC', '\x3', 
		'\x2', '\x2', '\x2', '\xAE0', '\xADE', '\x3', '\x2', '\x2', '\x2', '\xAE1', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\xAE2', '\xAE5', '\x5', '\x10E', 
		'\x88', '\x2', '\xAE3', '\xAE5', '\x5', '\x110', '\x89', '\x2', '\xAE4', 
		'\xAE2', '\x3', '\x2', '\x2', '\x2', '\xAE4', '\xAE3', '\x3', '\x2', '\x2', 
		'\x2', '\xAE5', '\x10D', '\x3', '\x2', '\x2', '\x2', '\xAE6', '\xAE8', 
		'\a', 'Y', '\x2', '\x2', '\xAE7', '\xAE9', '\x5', '\x3C4', '\x1E3', '\x2', 
		'\xAE8', '\xAE7', '\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAE9', '\x3', 
		'\x2', '\x2', '\x2', '\xAE9', '\xAEC', '\x3', '\x2', '\x2', '\x2', '\xAEA', 
		'\xAEC', '\a', '\x155', '\x2', '\x2', '\xAEB', '\xAE6', '\x3', '\x2', 
		'\x2', '\x2', '\xAEB', '\xAEA', '\x3', '\x2', '\x2', '\x2', '\xAEC', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\xAED', '\xAEE', '\a', 'Y', '\x2', '\x2', 
		'\xAEE', '\xAEF', '\a', '\b', '\x2', '\x2', '\xAEF', '\xAF2', '\a', '\x12B', 
		'\x2', '\x2', '\xAF0', '\xAF2', '\a', '\x155', '\x2', '\x2', '\xAF1', 
		'\xAED', '\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAF0', '\x3', '\x2', '\x2', 
		'\x2', '\xAF2', '\x111', '\x3', '\x2', '\x2', '\x2', '\xAF3', '\xAF4', 
		'\a', '\x11F', '\x2', '\x2', '\xAF4', '\xAF5', '\a', '\x2B3', '\x2', '\x2', 
		'\xAF5', '\xAF6', '\x5', '\x344', '\x1A3', '\x2', '\xAF6', '\xAF7', '\a', 
		'\x2B4', '\x2', '\x2', '\xAF7', '\xAF8', '\a', '\x217', '\x2', '\x2', 
		'\xAF8', '\xAFA', '\a', '\x15', '\x2', '\x2', '\xAF9', '\xAFB', '\t', 
		'\x1F', '\x2', '\x2', '\xAFA', '\xAF9', '\x3', '\x2', '\x2', '\x2', '\xAFA', 
		'\xAFB', '\x3', '\x2', '\x2', '\x2', '\xAFB', '\xB07', '\x3', '\x2', '\x2', 
		'\x2', '\xAFC', '\xB01', '\x5', '\x352', '\x1AA', '\x2', '\xAFD', '\xAFE', 
		'\a', '\x2B3', '\x2', '\x2', '\xAFE', '\xAFF', '\x5', '\x14C', '\xA7', 
		'\x2', '\xAFF', '\xB00', '\a', '\x2B4', '\x2', '\x2', '\xB00', '\xB02', 
		'\x3', '\x2', '\x2', '\x2', '\xB01', '\xAFD', '\x3', '\x2', '\x2', '\x2', 
		'\xB01', '\xB02', '\x3', '\x2', '\x2', '\x2', '\xB02', '\xB08', '\x3', 
		'\x2', '\x2', '\x2', '\xB03', '\xB04', '\a', '\x2B3', '\x2', '\x2', '\xB04', 
		'\xB05', '\x5', '\x14C', '\xA7', '\x2', '\xB05', '\xB06', '\a', '\x2B4', 
		'\x2', '\x2', '\xB06', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB07', '\xAFC', 
		'\x3', '\x2', '\x2', '\x2', '\xB07', '\xB03', '\x3', '\x2', '\x2', '\x2', 
		'\xB07', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB08', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\xB09', '\xB28', '\x5', '\x14E', '\xA8', '\x2', 
		'\xB0A', '\xB0B', '\a', '\x2B3', '\x2', '\x2', '\xB0B', '\xB0D', '\x5', 
		'\xF8', '}', '\x2', '\xB0C', '\xB0E', '\x5', '\x14C', '\xA7', '\x2', '\xB0D', 
		'\xB0C', '\x3', '\x2', '\x2', '\x2', '\xB0D', '\xB0E', '\x3', '\x2', '\x2', 
		'\x2', '\xB0E', '\xB10', '\x3', '\x2', '\x2', '\x2', '\xB0F', '\xB11', 
		'\x5', '\x110', '\x89', '\x2', '\xB10', '\xB0F', '\x3', '\x2', '\x2', 
		'\x2', '\xB10', '\xB11', '\x3', '\x2', '\x2', '\x2', '\xB11', '\xB13', 
		'\x3', '\x2', '\x2', '\x2', '\xB12', '\xB14', '\x5', '\x116', '\x8C', 
		'\x2', '\xB13', '\xB12', '\x3', '\x2', '\x2', '\x2', '\xB13', '\xB14', 
		'\x3', '\x2', '\x2', '\x2', '\xB14', '\xB22', '\x3', '\x2', '\x2', '\x2', 
		'\xB15', '\xB16', '\a', '\x2B9', '\x2', '\x2', '\xB16', '\xB18', '\x5', 
		'\xF8', '}', '\x2', '\xB17', '\xB19', '\x5', '\x14C', '\xA7', '\x2', '\xB18', 
		'\xB17', '\x3', '\x2', '\x2', '\x2', '\xB18', '\xB19', '\x3', '\x2', '\x2', 
		'\x2', '\xB19', '\xB1B', '\x3', '\x2', '\x2', '\x2', '\xB1A', '\xB1C', 
		'\x5', '\x110', '\x89', '\x2', '\xB1B', '\xB1A', '\x3', '\x2', '\x2', 
		'\x2', '\xB1B', '\xB1C', '\x3', '\x2', '\x2', '\x2', '\xB1C', '\xB1E', 
		'\x3', '\x2', '\x2', '\x2', '\xB1D', '\xB1F', '\x5', '\x116', '\x8C', 
		'\x2', '\xB1E', '\xB1D', '\x3', '\x2', '\x2', '\x2', '\xB1E', '\xB1F', 
		'\x3', '\x2', '\x2', '\x2', '\xB1F', '\xB21', '\x3', '\x2', '\x2', '\x2', 
		'\xB20', '\xB15', '\x3', '\x2', '\x2', '\x2', '\xB21', '\xB24', '\x3', 
		'\x2', '\x2', '\x2', '\xB22', '\xB20', '\x3', '\x2', '\x2', '\x2', '\xB22', 
		'\xB23', '\x3', '\x2', '\x2', '\x2', '\xB23', '\xB25', '\x3', '\x2', '\x2', 
		'\x2', '\xB24', '\xB22', '\x3', '\x2', '\x2', '\x2', '\xB25', '\xB26', 
		'\a', '\x2B4', '\x2', '\x2', '\xB26', '\xB28', '\x3', '\x2', '\x2', '\x2', 
		'\xB27', '\xB09', '\x3', '\x2', '\x2', '\x2', '\xB27', '\xB0A', '\x3', 
		'\x2', '\x2', '\x2', '\xB28', '\x115', '\x3', '\x2', '\x2', '\x2', '\xB29', 
		'\xB2A', '\t', '%', '\x2', '\x2', '\xB2A', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\xB2B', '\xB3A', '\x5', '\xF4', '{', '\x2', '\xB2C', '\xB3A', 
		'\x5', '\x12C', '\x97', '\x2', '\xB2D', '\xB3A', '\a', '\x176', '\x2', 
		'\x2', '\xB2E', '\xB31', '\a', '\x227', '\x2', '\x2', '\xB2F', '\xB32', 
		'\x5', '\x34A', '\x1A6', '\x2', '\xB30', '\xB32', '\a', '\x84', '\x2', 
		'\x2', '\xB31', '\xB2F', '\x3', '\x2', '\x2', '\x2', '\xB31', '\xB30', 
		'\x3', '\x2', '\x2', '\x2', '\xB32', '\xB3A', '\x3', '\x2', '\x2', '\x2', 
		'\xB33', '\xB3A', '\x5', '\x110', '\x89', '\x2', '\xB34', '\xB3A', '\t', 
		'&', '\x2', '\x2', '\xB35', '\xB3A', '\a', '\x1D6', '\x2', '\x2', '\xB36', 
		'\xB3A', '\t', '\x19', '\x2', '\x2', '\xB37', '\xB3A', '\x5', '\x11E', 
		'\x90', '\x2', '\xB38', '\xB3A', '\x5', '\x120', '\x91', '\x2', '\xB39', 
		'\xB2B', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB2C', '\x3', '\x2', '\x2', 
		'\x2', '\xB39', '\xB2D', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB2E', 
		'\x3', '\x2', '\x2', '\x2', '\xB39', '\xB33', '\x3', '\x2', '\x2', '\x2', 
		'\xB39', '\xB34', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB35', '\x3', 
		'\x2', '\x2', '\x2', '\xB39', '\xB36', '\x3', '\x2', '\x2', '\x2', '\xB39', 
		'\xB37', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB38', '\x3', '\x2', '\x2', 
		'\x2', '\xB3A', '\xB3D', '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB39', 
		'\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB3C', '\x3', '\x2', '\x2', '\x2', 
		'\xB3C', '\x119', '\x3', '\x2', '\x2', '\x2', '\xB3D', '\xB3B', '\x3', 
		'\x2', '\x2', '\x2', '\xB3E', '\xB3F', '\a', '\x2AD', '\x2', '\x2', '\xB3F', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\xB40', '\xB41', '\a', '\xA4', '\x2', 
		'\x2', '\xB41', '\x11D', '\x3', '\x2', '\x2', '\x2', '\xB42', '\xB43', 
		'\a', '\xF0', '\x2', '\x2', '\xB43', '\xB44', '\t', '\'', '\x2', '\x2', 
		'\xB44', '\x11F', '\x3', '\x2', '\x2', '\x2', '\xB45', '\xB49', '\a', 
		'\x162', '\x2', '\x2', '\xB46', '\xB47', '\a', '\x18A', '\x2', '\x2', 
		'\xB47', '\xB49', '\x5', '\x3C4', '\x1E3', '\x2', '\xB48', '\xB45', '\x3', 
		'\x2', '\x2', '\x2', '\xB48', '\xB46', '\x3', '\x2', '\x2', '\x2', '\xB49', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\xB4A', '\xB4B', '\a', '\xA4', '\x2', 
		'\x2', '\xB4B', '\x123', '\x3', '\x2', '\x2', '\x2', '\xB4C', '\xB4D', 
		'\a', '\xB3', '\x2', '\x2', '\xB4D', '\xB4E', '\a', '\x105', '\x2', '\x2', 
		'\xB4E', '\xB4F', '\x5', '\x364', '\x1B3', '\x2', '\xB4F', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\xB50', '\xB52', '\a', 'k', '\x2', '\x2', '\xB51', 
		'\xB53', '\t', '(', '\x2', '\x2', '\xB52', '\xB51', '\x3', '\x2', '\x2', 
		'\x2', '\xB52', '\xB53', '\x3', '\x2', '\x2', '\x2', '\xB53', '\xB57', 
		'\x3', '\x2', '\x2', '\x2', '\xB54', '\xB58', '\x5', '\x128', '\x95', 
		'\x2', '\xB55', '\xB58', '\x5', '\x134', '\x9B', '\x2', '\xB56', '\xB58', 
		'\x5', '\x138', '\x9D', '\x2', '\xB57', '\xB54', '\x3', '\x2', '\x2', 
		'\x2', '\xB57', '\xB55', '\x3', '\x2', '\x2', '\x2', '\xB57', '\xB56', 
		'\x3', '\x2', '\x2', '\x2', '\xB58', '\xB59', '\x3', '\x2', '\x2', '\x2', 
		'\xB59', '\xB5A', '\a', '\x2C5', '\x2', '\x2', '\xB5A', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\xB5B', '\xB5D', '\x5', '\x14C', '\xA7', '\x2', 
		'\xB5C', '\xB5E', '\x5', '\x13C', '\x9F', '\x2', '\xB5D', '\xB5C', '\x3', 
		'\x2', '\x2', '\x2', '\xB5D', '\xB5E', '\x3', '\x2', '\x2', '\x2', '\xB5E', 
		'\xB70', '\x3', '\x2', '\x2', '\x2', '\xB5F', '\xB60', '\a', '\x13C', 
		'\x2', '\x2', '\xB60', '\xB61', '\a', '\xBC', '\x2', '\x2', '\xB61', '\xB6F', 
		'\x5', '\x154', '\xAB', '\x2', '\xB62', '\xB63', '\a', '\x32', '\x2', 
		'\x2', '\xB63', '\xB6F', '\x5', '\x154', '\xAB', '\x2', '\xB64', '\xB6F', 
		'\x5', '\x12C', '\x97', '\x2', '\xB65', '\xB66', '\a', '\xCE', '\x2', 
		'\x2', '\xB66', '\xB6F', '\a', '\x124', '\x2', '\x2', '\xB67', '\xB6F', 
		'\t', ')', '\x2', '\x2', '\xB68', '\xB69', '\a', '\xA8', '\x2', '\x2', 
		'\xB69', '\xB6F', '\x5', '\x12A', '\x96', '\x2', '\xB6A', '\xB6F', '\a', 
		'\x84', '\x2', '\x2', '\xB6B', '\xB6F', '\x5', '\x12E', '\x98', '\x2', 
		'\xB6C', '\xB6F', '\x5', '\x130', '\x99', '\x2', '\xB6D', '\xB6F', '\x5', 
		'\x132', '\x9A', '\x2', '\xB6E', '\xB5F', '\x3', '\x2', '\x2', '\x2', 
		'\xB6E', '\xB62', '\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB64', '\x3', 
		'\x2', '\x2', '\x2', '\xB6E', '\xB65', '\x3', '\x2', '\x2', '\x2', '\xB6E', 
		'\xB67', '\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB68', '\x3', '\x2', '\x2', 
		'\x2', '\xB6E', '\xB6A', '\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB6B', 
		'\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB6C', '\x3', '\x2', '\x2', '\x2', 
		'\xB6E', '\xB6D', '\x3', '\x2', '\x2', '\x2', '\xB6F', '\xB72', '\x3', 
		'\x2', '\x2', '\x2', '\xB70', '\xB6E', '\x3', '\x2', '\x2', '\x2', '\xB70', 
		'\xB71', '\x3', '\x2', '\x2', '\x2', '\xB71', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\xB72', '\xB70', '\x3', '\x2', '\x2', '\x2', '\xB73', '\xB74', 
		'\a', '\x256', '\x2', '\x2', '\xB74', '\xB75', '\a', '\x2AF', '\x2', '\x2', 
		'\xB75', '\x12B', '\x3', '\x2', '\x2', '\x2', '\xB76', '\xB77', '\t', 
		'*', '\x2', '\x2', '\xB77', '\x12D', '\x3', '\x2', '\x2', '\x2', '\xB78', 
		'\xB79', '\a', '\xBC', '\x2', '\x2', '\xB79', '\xB7A', '\a', '\x12E', 
		'\x2', '\x2', '\xB7A', '\xB81', '\a', '\x120', '\x2', '\x2', '\xB7B', 
		'\xB82', '\a', '\x1E', '\x2', '\x2', '\xB7C', '\xB7F', '\a', '\x246', 
		'\x2', '\x2', '\xB7D', '\xB7E', '\a', '\x202', '\x2', '\x2', '\xB7E', 
		'\xB80', '\x5', '\x154', '\xAB', '\x2', '\xB7F', '\xB7D', '\x3', '\x2', 
		'\x2', '\x2', '\xB7F', '\xB80', '\x3', '\x2', '\x2', '\x2', '\xB80', '\xB82', 
		'\x3', '\x2', '\x2', '\x2', '\xB81', '\xB7B', '\x3', '\x2', '\x2', '\x2', 
		'\xB81', '\xB7C', '\x3', '\x2', '\x2', '\x2', '\xB81', '\xB82', '\x3', 
		'\x2', '\x2', '\x2', '\xB82', '\x12F', '\x3', '\x2', '\x2', '\x2', '\xB83', 
		'\xB84', '\a', '\x1EE', '\x2', '\x2', '\xB84', '\xB85', '\a', '\x20A', 
		'\x2', '\x2', '\xB85', '\xB86', '\a', '\x12E', '\x2', '\x2', '\xB86', 
		'\xB87', '\t', '+', '\x2', '\x2', '\xB87', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\xB88', '\xB89', '\a', '\xC7', '\x2', '\x2', '\xB89', '\xB8A', 
		'\t', '\x1E', '\x2', '\x2', '\xB8A', '\x133', '\x3', '\x2', '\x2', '\x2', 
		'\xB8B', '\xB8C', '\a', '\x22A', '\x2', '\x2', '\xB8C', '\xB8E', '\x5', 
		'\x14C', '\xA7', '\x2', '\xB8D', '\xB8F', '\x5', '\x13E', '\xA0', '\x2', 
		'\xB8E', '\xB8D', '\x3', '\x2', '\x2', '\x2', '\xB8E', '\xB8F', '\x3', 
		'\x2', '\x2', '\x2', '\xB8F', '\xB91', '\x3', '\x2', '\x2', '\x2', '\xB90', 
		'\xB92', '\x5', '\x136', '\x9C', '\x2', '\xB91', '\xB90', '\x3', '\x2', 
		'\x2', '\x2', '\xB91', '\xB92', '\x3', '\x2', '\x2', '\x2', '\xB92', '\xB94', 
		'\x3', '\x2', '\x2', '\x2', '\xB93', '\xB95', '\x5', '\x12E', '\x98', 
		'\x2', '\xB94', '\xB93', '\x3', '\x2', '\x2', '\x2', '\xB94', '\xB95', 
		'\x3', '\x2', '\x2', '\x2', '\xB95', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\xB96', '\xB97', '\a', '\x227', '\x2', '\x2', '\xB97', '\xB98', '\a', 
		'\xDA', '\x2', '\x2', '\xB98', '\xB99', '\t', ',', '\x2', '\x2', '\xB99', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\xB9A', '\xB9B', '\a', '\x245', 
		'\x2', '\x2', '\xB9B', '\xB9D', '\x5', '\x14C', '\xA7', '\x2', '\xB9C', 
		'\xB9E', '\x5', '\x13C', '\x9F', '\x2', '\xB9D', '\xB9C', '\x3', '\x2', 
		'\x2', '\x2', '\xB9D', '\xB9E', '\x3', '\x2', '\x2', '\x2', '\xB9E', '\xBA0', 
		'\x3', '\x2', '\x2', '\x2', '\xB9F', '\xBA1', '\x5', '\x12E', '\x98', 
		'\x2', '\xBA0', '\xB9F', '\x3', '\x2', '\x2', '\x2', '\xBA0', '\xBA1', 
		'\x3', '\x2', '\x2', '\x2', '\xBA1', '\xBA3', '\x3', '\x2', '\x2', '\x2', 
		'\xBA2', '\xBA4', '\x5', '\x13A', '\x9E', '\x2', '\xBA3', '\xBA2', '\x3', 
		'\x2', '\x2', '\x2', '\xBA3', '\xBA4', '\x3', '\x2', '\x2', '\x2', '\xBA4', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\xBA5', '\xBA6', '\a', '\x1D2', 
		'\x2', '\x2', '\xBA6', '\xBA7', '\t', '-', '\x2', '\x2', '\xBA7', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\xBA8', '\xBAA', '\a', 'w', '\x2', '\x2', 
		'\xBA9', '\xBAB', '\a', '\x2B9', '\x2', '\x2', '\xBAA', '\xBA9', '\x3', 
		'\x2', '\x2', '\x2', '\xBAA', '\xBAB', '\x3', '\x2', '\x2', '\x2', '\xBAB', 
		'\xBAC', '\x3', '\x2', '\x2', '\x2', '\xBAC', '\xBAD', '\x5', '\x140', 
		'\xA1', '\x2', '\xBAD', '\x13D', '\x3', '\x2', '\x2', '\x2', '\xBAE', 
		'\xBB0', '\a', '\x229', '\x2', '\x2', '\xBAF', '\xBB1', '\a', '\x2B9', 
		'\x2', '\x2', '\xBB0', '\xBAF', '\x3', '\x2', '\x2', '\x2', '\xBB0', '\xBB1', 
		'\x3', '\x2', '\x2', '\x2', '\xBB1', '\xBB2', '\x3', '\x2', '\x2', '\x2', 
		'\xBB2', '\xBB3', '\x5', '\x140', '\xA1', '\x2', '\xBB3', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\xBB4', '\xBB6', '\a', '\x2AF', '\x2', '\x2', '\xBB5', 
		'\xBB4', '\x3', '\x2', '\x2', '\x2', '\xBB5', '\xBB6', '\x3', '\x2', '\x2', 
		'\x2', '\xBB6', '\xBB9', '\x3', '\x2', '\x2', '\x2', '\xBB7', '\xBB8', 
		'\a', '\x202', '\x2', '\x2', '\xBB8', '\xBBA', '\x5', '\x154', '\xAB', 
		'\x2', '\xBB9', '\xBB7', '\x3', '\x2', '\x2', '\x2', '\xBB9', '\xBBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBBA', '\xBBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBBB', '\xBBD', '\a', '\x1D5', '\x2', '\x2', '\xBBC', '\xBBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBBC', '\xBBD', '\x3', '\x2', '\x2', '\x2', '\xBBD', 
		'\xBBF', '\x3', '\x2', '\x2', '\x2', '\xBBE', '\xBC0', '\x5', '\x144', 
		'\xA3', '\x2', '\xBBF', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBBF', 
		'\xBC0', '\x3', '\x2', '\x2', '\x2', '\xBC0', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\xBC1', '\xBCD', '\a', 'w', '\x2', '\x2', '\xBC2', '\xBCE', '\a', 
		'\x2AF', '\x2', '\x2', '\xBC3', '\xBC8', '\a', '\x2B3', '\x2', '\x2', 
		'\xBC4', '\xBC6', '\a', '\x2B9', '\x2', '\x2', '\xBC5', '\xBC4', '\x3', 
		'\x2', '\x2', '\x2', '\xBC5', '\xBC6', '\x3', '\x2', '\x2', '\x2', '\xBC6', 
		'\xBC7', '\x3', '\x2', '\x2', '\x2', '\xBC7', '\xBC9', '\a', '\x2AF', 
		'\x2', '\x2', '\xBC8', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBC9', '\xBCA', 
		'\x3', '\x2', '\x2', '\x2', '\xBCA', '\xBC8', '\x3', '\x2', '\x2', '\x2', 
		'\xBCA', '\xBCB', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCC', '\x3', 
		'\x2', '\x2', '\x2', '\xBCC', '\xBCE', '\a', '\x2B4', '\x2', '\x2', '\xBCD', 
		'\xBC2', '\x3', '\x2', '\x2', '\x2', '\xBCD', '\xBC3', '\x3', '\x2', '\x2', 
		'\x2', '\xBCD', '\xBCE', '\x3', '\x2', '\x2', '\x2', '\xBCE', '\xBD1', 
		'\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBD0', '\a', '\x202', '\x2', '\x2', 
		'\xBD0', '\xBD2', '\x5', '\x154', '\xAB', '\x2', '\xBD1', '\xBCF', '\x3', 
		'\x2', '\x2', '\x2', '\xBD1', '\xBD2', '\x3', '\x2', '\x2', '\x2', '\xBD2', 
		'\xBD5', '\x3', '\x2', '\x2', '\x2', '\xBD3', '\xBD4', '\a', '\x32', '\x2', 
		'\x2', '\xBD4', '\xBD6', '\x5', '\x154', '\xAB', '\x2', '\xBD5', '\xBD3', 
		'\x3', '\x2', '\x2', '\x2', '\xBD5', '\xBD6', '\x3', '\x2', '\x2', '\x2', 
		'\xBD6', '\xBD8', '\x3', '\x2', '\x2', '\x2', '\xBD7', '\xBD9', '\a', 
		'\x1D5', '\x2', '\x2', '\xBD8', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBD8', 
		'\xBD9', '\x3', '\x2', '\x2', '\x2', '\xBD9', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\xBDA', '\xBE4', '\a', ' ', '\x2', '\x2', '\xBDB', '\xBE5', '\a', 
		'\x171', '\x2', '\x2', '\xBDC', '\xBDF', '\a', '\x178', '\x2', '\x2', 
		'\xBDD', '\xBDE', '\a', '\x152', '\x2', '\x2', '\xBDE', '\xBE0', '\x5', 
		'\x154', '\xAB', '\x2', '\xBDF', '\xBDD', '\x3', '\x2', '\x2', '\x2', 
		'\xBDF', '\xBE0', '\x3', '\x2', '\x2', '\x2', '\xBE0', '\xBE2', '\x3', 
		'\x2', '\x2', '\x2', '\xBE1', '\xBE3', '\x5', '\x146', '\xA4', '\x2', 
		'\xBE2', '\xBE1', '\x3', '\x2', '\x2', '\x2', '\xBE2', '\xBE3', '\x3', 
		'\x2', '\x2', '\x2', '\xBE3', '\xBE5', '\x3', '\x2', '\x2', '\x2', '\xBE4', 
		'\xBDB', '\x3', '\x2', '\x2', '\x2', '\xBE4', '\xBDC', '\x3', '\x2', '\x2', 
		'\x2', '\xBE5', '\x145', '\x3', '\x2', '\x2', '\x2', '\xBE6', '\xBE9', 
		'\a', '\x133', '\x2', '\x2', '\xBE7', '\xBEA', '\a', '\x249', '\x2', '\x2', 
		'\xBE8', '\xBEA', '\x5', '\x154', '\xAB', '\x2', '\xBE9', '\xBE7', '\x3', 
		'\x2', '\x2', '\x2', '\xBE9', '\xBE8', '\x3', '\x2', '\x2', '\x2', '\xBEA', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBEF', '\x5', '\x208', 
		'\x105', '\x2', '\xBEC', '\xBEE', '\x5', '\x20A', '\x106', '\x2', '\xBED', 
		'\xBEC', '\x3', '\x2', '\x2', '\x2', '\xBEE', '\xBF1', '\x3', '\x2', '\x2', 
		'\x2', '\xBEF', '\xBED', '\x3', '\x2', '\x2', '\x2', '\xBEF', '\xBF0', 
		'\x3', '\x2', '\x2', '\x2', '\xBF0', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\xBF1', '\xBEF', '\x3', '\x2', '\x2', '\x2', '\xBF2', '\xBF5', '\a', 
		'k', '\x2', '\x2', '\xBF3', '\xBF4', '\a', '\xD6', '\x2', '\x2', '\xBF4', 
		'\xBF6', '\a', '\x22A', '\x2', '\x2', '\xBF5', '\xBF3', '\x3', '\x2', 
		'\x2', '\x2', '\xBF5', '\xBF6', '\x3', '\x2', '\x2', '\x2', '\xBF6', '\xBF7', 
		'\x3', '\x2', '\x2', '\x2', '\xBF7', '\xBF8', '\a', '\x228', '\x2', '\x2', 
		'\xBF8', '\xC14', '\x5', '\x342', '\x1A2', '\x2', '\xBF9', '\xBFE', '\a', 
		'\x2B3', '\x2', '\x2', '\xBFA', '\xBFC', '\a', '\x2B9', '\x2', '\x2', 
		'\xBFB', '\xBFA', '\x3', '\x2', '\x2', '\x2', '\xBFB', '\xBFC', '\x3', 
		'\x2', '\x2', '\x2', '\xBFC', '\xBFD', '\x3', '\x2', '\x2', '\x2', '\xBFD', 
		'\xBFF', '\x5', '\x152', '\xAA', '\x2', '\xBFE', '\xBFB', '\x3', '\x2', 
		'\x2', '\x2', '\xBFF', '\xC00', '\x3', '\x2', '\x2', '\x2', '\xC00', '\xBFE', 
		'\x3', '\x2', '\x2', '\x2', '\xC00', '\xC01', '\x3', '\x2', '\x2', '\x2', 
		'\xC01', '\xC0F', '\x3', '\x2', '\x2', '\x2', '\xC02', '\xC05', '\a', 
		'\x2B9', '\x2', '\x2', '\xC03', '\xC04', '\a', '^', '\x2', '\x2', '\xC04', 
		'\xC06', '\x5', '\x338', '\x19D', '\x2', '\xC05', '\xC03', '\x3', '\x2', 
		'\x2', '\x2', '\xC05', '\xC06', '\x3', '\x2', '\x2', '\x2', '\xC06', '\xC0B', 
		'\x3', '\x2', '\x2', '\x2', '\xC07', '\xC0C', '\x5', '\x172', '\xBA', 
		'\x2', '\xC08', '\xC0C', '\x5', '\x16A', '\xB6', '\x2', '\xC09', '\xC0C', 
		'\x5', '\x170', '\xB9', '\x2', '\xC0A', '\xC0C', '\x5', '\x162', '\xB2', 
		'\x2', '\xC0B', '\xC07', '\x3', '\x2', '\x2', '\x2', '\xC0B', '\xC08', 
		'\x3', '\x2', '\x2', '\x2', '\xC0B', '\xC09', '\x3', '\x2', '\x2', '\x2', 
		'\xC0B', '\xC0A', '\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC0E', '\x3', 
		'\x2', '\x2', '\x2', '\xC0D', '\xC02', '\x3', '\x2', '\x2', '\x2', '\xC0E', 
		'\xC11', '\x3', '\x2', '\x2', '\x2', '\xC0F', '\xC0D', '\x3', '\x2', '\x2', 
		'\x2', '\xC0F', '\xC10', '\x3', '\x2', '\x2', '\x2', '\xC10', '\xC12', 
		'\x3', '\x2', '\x2', '\x2', '\xC11', '\xC0F', '\x3', '\x2', '\x2', '\x2', 
		'\xC12', '\xC13', '\a', '\x2B4', '\x2', '\x2', '\xC13', '\xC15', '\x3', 
		'\x2', '\x2', '\x2', '\xC14', '\xBF9', '\x3', '\x2', '\x2', '\x2', '\xC14', 
		'\xC15', '\x3', '\x2', '\x2', '\x2', '\xC15', '\xC1A', '\x3', '\x2', '\x2', 
		'\x2', '\xC16', '\xC17', '\a', '\x178', '\x2', '\x2', '\xC17', '\xC18', 
		'\a', 'T', '\x2', '\x2', '\xC18', '\xC19', '\t', '.', '\x2', '\x2', '\xC19', 
		'\xC1B', '\a', '\x1E0', '\x2', '\x2', '\xC1A', '\xC16', '\x3', '\x2', 
		'\x2', '\x2', '\xC1A', '\xC1B', '\x3', '\x2', '\x2', '\x2', '\xC1B', '\xC1F', 
		'\x3', '\x2', '\x2', '\x2', '\xC1C', '\xC1D', '\a', '\x1EE', '\x2', '\x2', 
		'\xC1D', '\xC1E', '\a', 'l', '\x2', '\x2', '\xC1E', '\xC20', '\t', '\x1B', 
		'\x2', '\x2', '\xC1F', '\xC1C', '\x3', '\x2', '\x2', '\x2', '\xC1F', '\xC20', 
		'\x3', '\x2', '\x2', '\x2', '\xC20', '\xC22', '\x3', '\x2', '\x2', '\x2', 
		'\xC21', '\xC23', '\x5', '\x14C', '\xA7', '\x2', '\xC22', '\xC21', '\x3', 
		'\x2', '\x2', '\x2', '\xC22', '\xC23', '\x3', '\x2', '\x2', '\x2', '\xC23', 
		'\xC25', '\x3', '\x2', '\x2', '\x2', '\xC24', '\xC26', '\t', '*', '\x2', 
		'\x2', '\xC25', '\xC24', '\x3', '\x2', '\x2', '\x2', '\xC25', '\xC26', 
		'\x3', '\x2', '\x2', '\x2', '\xC26', '\xC34', '\x3', '\x2', '\x2', '\x2', 
		'\xC27', '\xC31', '\a', 'Y', '\x2', '\x2', '\xC28', '\xC32', '\a', '$', 
		'\x2', '\x2', '\xC29', '\xC2F', '\a', '\xD0', '\x2', '\x2', '\xC2A', '\xC30', 
		'\a', '\x175', '\x2', '\x2', '\xC2B', '\xC2D', '\t', '$', '\x2', '\x2', 
		'\xC2C', '\xC2E', '\t', '!', '\x2', '\x2', '\xC2D', '\xC2C', '\x3', '\x2', 
		'\x2', '\x2', '\xC2D', '\xC2E', '\x3', '\x2', '\x2', '\x2', '\xC2E', '\xC30', 
		'\x3', '\x2', '\x2', '\x2', '\xC2F', '\xC2A', '\x3', '\x2', '\x2', '\x2', 
		'\xC2F', '\xC2B', '\x3', '\x2', '\x2', '\x2', '\xC30', '\xC32', '\x3', 
		'\x2', '\x2', '\x2', '\xC31', '\xC28', '\x3', '\x2', '\x2', '\x2', '\xC31', 
		'\xC29', '\x3', '\x2', '\x2', '\x2', '\xC31', '\xC32', '\x3', '\x2', '\x2', 
		'\x2', '\xC32', '\xC35', '\x3', '\x2', '\x2', '\x2', '\xC33', '\xC35', 
		'\a', '\x155', '\x2', '\x2', '\xC34', '\xC27', '\x3', '\x2', '\x2', '\x2', 
		'\xC34', '\xC33', '\x3', '\x2', '\x2', '\x2', '\xC34', '\xC35', '\x3', 
		'\x2', '\x2', '\x2', '\xC35', '\x14B', '\x3', '\x2', '\x2', '\x2', '\xC36', 
		'\xC37', '\a', '\x227', '\x2', '\x2', '\xC37', '\xC38', '\x5', '\x34A', 
		'\x1A6', '\x2', '\xC38', '\x14D', '\x3', '\x2', '\x2', '\x2', '\xC39', 
		'\xC3A', '\a', '\x217', '\x2', '\x2', '\xC3A', '\xC3B', '\a', '\xF6', 
		'\x2', '\x2', '\xC3B', '\xC3C', '\a', '\x2B3', '\x2', '\x2', '\xC3C', 
		'\xC41', '\x5', '\x34A', '\x1A6', '\x2', '\xC3D', '\xC3E', '\a', '\x2B9', 
		'\x2', '\x2', '\xC3E', '\xC40', '\x5', '\x34A', '\x1A6', '\x2', '\xC3F', 
		'\xC3D', '\x3', '\x2', '\x2', '\x2', '\xC40', '\xC43', '\x3', '\x2', '\x2', 
		'\x2', '\xC41', '\xC3F', '\x3', '\x2', '\x2', '\x2', '\xC41', '\xC42', 
		'\x3', '\x2', '\x2', '\x2', '\xC42', '\xC44', '\x3', '\x2', '\x2', '\x2', 
		'\xC43', '\xC41', '\x3', '\x2', '\x2', '\x2', '\xC44', '\xC45', '\a', 
		'\x2B4', '\x2', '\x2', '\xC45', '\x14F', '\x3', '\x2', '\x2', '\x2', '\xC46', 
		'\xC47', '\a', '\x216', '\x2', '\x2', '\xC47', '\xC5F', '\a', '\x2B3', 
		'\x2', '\x2', '\xC48', '\xC49', '\a', '\xF7', '\x2', '\x2', '\xC49', '\xC60', 
		'\x5', '\x154', '\xAB', '\x2', '\xC4A', '\xC4B', '\a', '\x152', '\x2', 
		'\x2', '\xC4B', '\xC60', '\x5', '\x154', '\xAB', '\x2', '\xC4C', '\xC4D', 
		'\a', '\x13B', '\x2', '\x2', '\xC4D', '\xC60', '\t', '/', '\x2', '\x2', 
		'\xC4E', '\xC4F', '\a', '\x194', '\x2', '\x2', '\xC4F', '\xC60', '\a', 
		'\x2AD', '\x2', '\x2', '\xC50', '\xC51', '\a', '\xD2', '\x2', '\x2', '\xC51', 
		'\xC60', '\a', '\x2AD', '\x2', '\x2', '\xC52', '\xC53', '\a', '\xD1', 
		'\x2', '\x2', '\xC53', '\xC54', '\a', '\xDC', '\x2', '\x2', '\xC54', '\xC60', 
		'\a', '\x2AD', '\x2', '\x2', '\xC55', '\xC58', '\a', '\x17B', '\x2', '\x2', 
		'\xC56', '\xC59', '\x5', '\x154', '\xAB', '\x2', '\xC57', '\xC59', '\a', 
		'\x16A', '\x2', '\x2', '\xC58', '\xC56', '\x3', '\x2', '\x2', '\x2', '\xC58', 
		'\xC57', '\x3', '\x2', '\x2', '\x2', '\xC59', '\xC60', '\x3', '\x2', '\x2', 
		'\x2', '\xC5A', '\xC5B', '\a', '\x37', '\x2', '\x2', '\xC5B', '\xC60', 
		'\t', '\x30', '\x2', '\x2', '\xC5C', '\xC5D', '\a', '\xC8', '\x2', '\x2', 
		'\xC5D', '\xC60', '\t', '\x31', '\x2', '\x2', '\xC5E', '\xC60', '\a', 
		'\xA7', '\x2', '\x2', '\xC5F', '\xC48', '\x3', '\x2', '\x2', '\x2', '\xC5F', 
		'\xC4A', '\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC4C', '\x3', '\x2', '\x2', 
		'\x2', '\xC5F', '\xC4E', '\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC50', 
		'\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC52', '\x3', '\x2', '\x2', '\x2', 
		'\xC5F', '\xC55', '\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC5A', '\x3', 
		'\x2', '\x2', '\x2', '\xC5F', '\xC5C', '\x3', '\x2', '\x2', '\x2', '\xC5F', 
		'\xC5E', '\x3', '\x2', '\x2', '\x2', '\xC60', '\xC61', '\x3', '\x2', '\x2', 
		'\x2', '\xC61', '\xC5F', '\x3', '\x2', '\x2', '\x2', '\xC61', '\xC62', 
		'\x3', '\x2', '\x2', '\x2', '\xC62', '\xC63', '\x3', '\x2', '\x2', '\x2', 
		'\xC63', '\xC64', '\a', '\x2B4', '\x2', '\x2', '\xC64', '\x151', '\x3', 
		'\x2', '\x2', '\x2', '\xC65', '\xC66', '\x5', '\x3B0', '\x1D9', '\x2', 
		'\xC66', '\xC68', '\x5', '\x37A', '\x1BE', '\x2', '\xC67', '\xC69', '\a', 
		'\x208', '\x2', '\x2', '\xC68', '\xC67', '\x3', '\x2', '\x2', '\x2', '\xC68', 
		'\xC69', '\x3', '\x2', '\x2', '\x2', '\xC69', '\xC6C', '\x3', '\x2', '\x2', 
		'\x2', '\xC6A', '\xC6B', '\a', '\x84', '\x2', '\x2', '\xC6B', '\xC6D', 
		'\x5', '\x2B8', '\x15D', '\x2', '\xC6C', '\xC6A', '\x3', '\x2', '\x2', 
		'\x2', '\xC6C', '\xC6D', '\x3', '\x2', '\x2', '\x2', '\xC6D', '\xC81', 
		'\x3', '\x2', '\x2', '\x2', '\xC6E', '\xC71', '\a', '\xA7', '\x2', '\x2', 
		'\xC6F', '\xC70', '\a', '\x256', '\x2', '\x2', '\xC70', '\xC72', '\a', 
		'\x2AF', '\x2', '\x2', '\xC71', '\xC6F', '\x3', '\x2', '\x2', '\x2', '\xC71', 
		'\xC72', '\x3', '\x2', '\x2', '\x2', '\xC72', '\xC76', '\x3', '\x2', '\x2', 
		'\x2', '\xC73', '\xC74', '\a', '\xE4', '\x2', '\x2', '\xC74', '\xC75', 
		'\a', ':', '\x2', '\x2', '\xC75', '\xC77', '\a', '\x2D0', '\x2', '\x2', 
		'\xC76', '\xC73', '\x3', '\x2', '\x2', '\x2', '\xC76', '\xC77', '\x3', 
		'\x2', '\x2', '\x2', '\xC77', '\xC79', '\x3', '\x2', '\x2', '\x2', '\xC78', 
		'\xC7A', '\a', '\x2AF', '\x2', '\x2', '\xC79', '\xC78', '\x3', '\x2', 
		'\x2', '\x2', '\xC79', '\xC7A', '\x3', '\x2', '\x2', '\x2', '\xC7A', '\xC7F', 
		'\x3', '\x2', '\x2', '\x2', '\xC7B', '\xC7D', '\a', '\x160', '\x2', '\x2', 
		'\xC7C', '\xC7B', '\x3', '\x2', '\x2', '\x2', '\xC7C', '\xC7D', '\x3', 
		'\x2', '\x2', '\x2', '\xC7D', '\xC7E', '\x3', '\x2', '\x2', '\x2', '\xC7E', 
		'\xC80', '\a', '\x1E2', '\x2', '\x2', '\xC7F', '\xC7C', '\x3', '\x2', 
		'\x2', '\x2', '\xC7F', '\xC80', '\x3', '\x2', '\x2', '\x2', '\xC80', '\xC82', 
		'\x3', '\x2', '\x2', '\x2', '\xC81', '\xC6E', '\x3', '\x2', '\x2', '\x2', 
		'\xC81', '\xC82', '\x3', '\x2', '\x2', '\x2', '\xC82', '\xC85', '\x3', 
		'\x2', '\x2', '\x2', '\xC83', '\xC84', '\a', '\x167', '\x2', '\x2', '\xC84', 
		'\xC86', '\a', '\x16A', '\x2', '\x2', '\xC85', '\xC83', '\x3', '\x2', 
		'\x2', '\x2', '\xC85', '\xC86', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC88', 
		'\x3', '\x2', '\x2', '\x2', '\xC87', '\xC89', '\t', '\a', '\x2', '\x2', 
		'\xC88', '\xC87', '\x3', '\x2', '\x2', '\x2', '\xC88', '\xC89', '\x3', 
		'\x2', '\x2', '\x2', '\xC89', '\x153', '\x3', '\x2', '\x2', '\x2', '\xC8A', 
		'\xC8C', '\a', '\x2AD', '\x2', '\x2', '\xC8B', '\xC8D', '\a', '\x2D0', 
		'\x2', '\x2', '\xC8C', '\xC8B', '\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC8D', 
		'\x3', '\x2', '\x2', '\x2', '\xC8D', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\xC8E', '\xC8F', '\a', '\x99', '\x2', '\x2', '\xC8F', '\xC90', '\a', 
		'\x228', '\x2', '\x2', '\xC90', '\xC91', '\x5', '\x342', '\x1A2', '\x2', 
		'\xC91', '\xC92', '\a', '\x2C5', '\x2', '\x2', '\xC92', '\x157', '\x3', 
		'\x2', '\x2', '\x2', '\xC93', '\xC94', '\a', 'S', '\x2', '\x2', '\xC94', 
		'\xC95', '\a', '\x178', '\x2', '\x2', '\xC95', '\xC96', '\a', 'Q', '\x2', 
		'\x2', '\xC96', '\xC97', '\x5', '\x342', '\x1A2', '\x2', '\xC97', '\xC98', 
		'\a', '\x2AC', '\x2', '\x2', '\xC98', '\xC99', '\x5', '\x3B0', '\x1D9', 
		'\x2', '\xC99', '\xC9A', '\a', '\x108', '\x2', '\x2', '\xC9A', '\xC9B', 
		'\x5', '\x3CA', '\x1E6', '\x2', '\xC9B', '\x159', '\x3', '\x2', '\x2', 
		'\x2', '\xC9C', '\xC9F', '\a', 'k', '\x2', '\x2', '\xC9D', '\xC9E', '\a', 
		'\x180', '\x2', '\x2', '\xC9E', '\xCA0', '\a', '\x1C9', '\x2', '\x2', 
		'\xC9F', '\xC9D', '\x3', '\x2', '\x2', '\x2', '\xC9F', '\xCA0', '\x3', 
		'\x2', '\x2', '\x2', '\xCA0', '\xCA1', '\x3', '\x2', '\x2', '\x2', '\xCA1', 
		'\xCA2', '\a', '\x1B3', '\x2', '\x2', '\xCA2', '\xCA3', '\a', '\x21F', 
		'\x2', '\x2', '\xCA3', '\xCA4', '\x5', '\x392', '\x1CA', '\x2', '\xCA4', 
		'\xCA8', '\a', '\xD0', '\x2', '\x2', '\xCA5', '\xCA6', '\x5', '\x3A4', 
		'\x1D3', '\x2', '\xCA6', '\xCA7', '\a', '\x2AC', '\x2', '\x2', '\xCA7', 
		'\xCA9', '\x3', '\x2', '\x2', '\x2', '\xCA8', '\xCA5', '\x3', '\x2', '\x2', 
		'\x2', '\xCA8', '\xCA9', '\x3', '\x2', '\x2', '\x2', '\xCA9', '\xCAA', 
		'\x3', '\x2', '\x2', '\x2', '\xCAA', '\xCAD', '\x5', '\x350', '\x1A9', 
		'\x2', '\xCAB', '\xCAC', '\a', '\x2BB', '\x2', '\x2', '\xCAC', '\xCAE', 
		'\x5', '\x340', '\x1A1', '\x2', '\xCAD', '\xCAB', '\x3', '\x2', '\x2', 
		'\x2', '\xCAD', '\xCAE', '\x3', '\x2', '\x2', '\x2', '\xCAE', '\xCC7', 
		'\x3', '\x2', '\x2', '\x2', '\xCAF', '\xCB2', '\a', 'k', '\x2', '\x2', 
		'\xCB0', '\xCB1', '\a', '\x180', '\x2', '\x2', '\xCB1', '\xCB3', '\a', 
		'\x1C9', '\x2', '\x2', '\xCB2', '\xCB0', '\x3', '\x2', '\x2', '\x2', '\xCB2', 
		'\xCB3', '\x3', '\x2', '\x2', '\x2', '\xCB3', '\xCB4', '\x3', '\x2', '\x2', 
		'\x2', '\xCB4', '\xCB8', '\a', '\x21F', '\x2', '\x2', '\xCB5', '\xCB6', 
		'\x5', '\x3A4', '\x1D3', '\x2', '\xCB6', '\xCB7', '\a', '\x2AC', '\x2', 
		'\x2', '\xCB7', '\xCB9', '\x3', '\x2', '\x2', '\x2', '\xCB8', '\xCB5', 
		'\x3', '\x2', '\x2', '\x2', '\xCB8', '\xCB9', '\x3', '\x2', '\x2', '\x2', 
		'\xCB9', '\xCBA', '\x3', '\x2', '\x2', '\x2', '\xCBA', '\xCBB', '\x5', 
		'\x392', '\x1CA', '\x2', '\xCBB', '\xCBF', '\a', '\xD0', '\x2', '\x2', 
		'\xCBC', '\xCBD', '\x5', '\x3A4', '\x1D3', '\x2', '\xCBD', '\xCBE', '\a', 
		'\x2AC', '\x2', '\x2', '\xCBE', '\xCC0', '\x3', '\x2', '\x2', '\x2', '\xCBF', 
		'\xCBC', '\x3', '\x2', '\x2', '\x2', '\xCBF', '\xCC0', '\x3', '\x2', '\x2', 
		'\x2', '\xCC0', '\xCC1', '\x3', '\x2', '\x2', '\x2', '\xCC1', '\xCC4', 
		'\x5', '\x350', '\x1A9', '\x2', '\xCC2', '\xCC3', '\a', '\x2BB', '\x2', 
		'\x2', '\xCC3', '\xCC5', '\x5', '\x340', '\x1A1', '\x2', '\xCC4', '\xCC2', 
		'\x3', '\x2', '\x2', '\x2', '\xCC4', '\xCC5', '\x3', '\x2', '\x2', '\x2', 
		'\xCC5', '\xCC7', '\x3', '\x2', '\x2', '\x2', '\xCC6', '\xC9C', '\x3', 
		'\x2', '\x2', '\x2', '\xCC6', '\xCAF', '\x3', '\x2', '\x2', '\x2', '\xCC7', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\xCC8', '\xCC9', '\a', 'S', '\x2', 
		'\x2', '\xCC9', '\xCCA', '\a', '\x178', '\x2', '\x2', '\xCCA', '\xCCB', 
		'\a', '\x228', '\x2', '\x2', '\xCCB', '\xCCC', '\x5', '\x342', '\x1A2', 
		'\x2', '\xCCC', '\xCCD', '\a', '\x108', '\x2', '\x2', '\xCCD', '\xCCE', 
		'\x5', '\x3CA', '\x1E6', '\x2', '\xCCE', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\xCCF', '\xCD0', '\a', '\xF', '\x2', '\x2', '\xCD0', '\xCD1', 
		'\a', '\x228', '\x2', '\x2', '\xCD1', '\xCD6', '\x5', '\x342', '\x1A2', 
		'\x2', '\xCD2', '\xCD7', '\x5', '\x160', '\xB1', '\x2', '\xCD3', '\xCD7', 
		'\x5', '\x164', '\xB3', '\x2', '\xCD4', '\xCD7', '\x5', '\x166', '\xB4', 
		'\x2', '\xCD5', '\xCD7', '\x5', '\x168', '\xB5', '\x2', '\xCD6', '\xCD2', 
		'\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCD3', '\x3', '\x2', '\x2', '\x2', 
		'\xCD6', '\xCD4', '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCD5', '\x3', 
		'\x2', '\x2', '\x2', '\xCD7', '\x15F', '\x3', '\x2', '\x2', '\x2', '\xCD8', 
		'\xCDB', '\a', '\x5', '\x2', '\x2', '\xCD9', '\xCDA', '\a', '^', '\x2', 
		'\x2', '\xCDA', '\xCDC', '\x5', '\x338', '\x19D', '\x2', '\xCDB', '\xCD9', 
		'\x3', '\x2', '\x2', '\x2', '\xCDB', '\xCDC', '\x3', '\x2', '\x2', '\x2', 
		'\xCDC', '\xCE1', '\x3', '\x2', '\x2', '\x2', '\xCDD', '\xCE2', '\x5', 
		'\x172', '\xBA', '\x2', '\xCDE', '\xCE2', '\x5', '\x16A', '\xB6', '\x2', 
		'\xCDF', '\xCE2', '\x5', '\x170', '\xB9', '\x2', '\xCE0', '\xCE2', '\x5', 
		'\x162', '\xB2', '\x2', '\xCE1', '\xCDD', '\x3', '\x2', '\x2', '\x2', 
		'\xCE1', '\xCDE', '\x3', '\x2', '\x2', '\x2', '\xCE1', '\xCDF', '\x3', 
		'\x2', '\x2', '\x2', '\xCE1', '\xCE0', '\x3', '\x2', '\x2', '\x2', '\xCE2', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\xCE3', '\xCE4', '\a', 'H', '\x2', 
		'\x2', '\xCE4', '\xCE5', '\a', '\x2B3', '\x2', '\x2', '\xCE5', '\xCE6', 
		'\x5', '\x2B4', '\x15B', '\x2', '\xCE6', '\xCE8', '\a', '\x2B4', '\x2', 
		'\x2', '\xCE7', '\xCE9', '\a', '\x91', '\x2', '\x2', '\xCE8', '\xCE7', 
		'\x3', '\x2', '\x2', '\x2', '\xCE8', '\xCE9', '\x3', '\x2', '\x2', '\x2', 
		'\xCE9', '\x163', '\x3', '\x2', '\x2', '\x2', '\xCEA', '\xCEB', '\a', 
		'\x99', '\x2', '\x2', '\xCEB', '\xCEC', '\a', '^', '\x2', '\x2', '\xCEC', 
		'\xCED', '\x5', '\x338', '\x19D', '\x2', '\xCED', '\x165', '\x3', '\x2', 
		'\x2', '\x2', '\xCEE', '\xCEF', '\a', '\xA5', '\x2', '\x2', '\xCEF', '\xCF0', 
		'\a', '^', '\x2', '\x2', '\xCF0', '\xCF1', '\x5', '\x338', '\x19D', '\x2', 
		'\xCF1', '\x167', '\x3', '\x2', '\x2', '\x2', '\xCF2', '\xCF3', '\a', 
		'\x91', '\x2', '\x2', '\xCF3', '\xCF4', '\a', '^', '\x2', '\x2', '\xCF4', 
		'\xCF5', '\x5', '\x338', '\x19D', '\x2', '\xCF5', '\x169', '\x3', '\x2', 
		'\x2', '\x2', '\xCF6', '\xCF7', '\a', '\xCF', '\x2', '\x2', '\xCF7', '\xCF8', 
		'\a', '\x10F', '\x2', '\x2', '\xCF8', '\xCF9', '\x5', '\x36A', '\x1B6', 
		'\x2', '\xCF9', '\xCFB', '\x5', '\x16C', '\xB7', '\x2', '\xCFA', '\xCFC', 
		'\x5', '\x16E', '\xB8', '\x2', '\xCFB', '\xCFA', '\x3', '\x2', '\x2', 
		'\x2', '\xCFB', '\xCFC', '\x3', '\x2', '\x2', '\x2', '\xCFC', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\xCFD', '\xCFE', '\a', '\x1C0', '\x2', '\x2', 
		'\xCFE', '\xCFF', '\x5', '\x342', '\x1A2', '\x2', '\xCFF', '\xD07', '\x5', 
		'\x36A', '\x1B6', '\x2', '\xD00', '\xD01', '\a', '\x178', '\x2', '\x2', 
		'\xD01', '\xD05', '\a', '\x8A', '\x2', '\x2', '\xD02', '\xD06', '\a', 
		'@', '\x2', '\x2', '\xD03', '\xD04', '\a', '\x1F8', '\x2', '\x2', '\xD04', 
		'\xD06', '\a', '\x16A', '\x2', '\x2', '\xD05', '\xD02', '\x3', '\x2', 
		'\x2', '\x2', '\xD05', '\xD03', '\x3', '\x2', '\x2', '\x2', '\xD06', '\xD08', 
		'\x3', '\x2', '\x2', '\x2', '\xD07', '\xD00', '\x3', '\x2', '\x2', '\x2', 
		'\xD07', '\xD08', '\x3', '\x2', '\x2', '\x2', '\xD08', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\xD09', '\xD0A', '\a', '\x178', '\x2', '\x2', '\xD0A', 
		'\xD0E', '\a', '\x8A', '\x2', '\x2', '\xD0B', '\xD0F', '\a', '@', '\x2', 
		'\x2', '\xD0C', '\xD0D', '\a', '\x1F8', '\x2', '\x2', '\xD0D', '\xD0F', 
		'\a', '\x16A', '\x2', '\x2', '\xD0E', '\xD0B', '\x3', '\x2', '\x2', '\x2', 
		'\xD0E', '\xD0C', '\x3', '\x2', '\x2', '\x2', '\xD0F', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\xD10', '\xD11', '\a', '\x248', '\x2', '\x2', '\xD11', 
		'\xD12', '\x5', '\x36A', '\x1B6', '\x2', '\xD12', '\x171', '\x3', '\x2', 
		'\x2', '\x2', '\xD13', '\xD14', '\a', '\x1AA', '\x2', '\x2', '\xD14', 
		'\xD15', '\a', '\x10F', '\x2', '\x2', '\xD15', '\xD16', '\x5', '\x36A', 
		'\x1B6', '\x2', '\xD16', '\x173', '\x3', '\x2', '\x2', '\x2', '\xD17', 
		'\xD18', '\a', '\x81', '\x2', '\x2', '\xD18', '\xD1A', '\x5', '\x188', 
		'\xC5', '\x2', '\xD19', '\xD17', '\x3', '\x2', '\x2', '\x2', '\xD19', 
		'\xD1A', '\x3', '\x2', '\x2', '\x2', '\xD1A', '\xD1B', '\x3', '\x2', '\x2', 
		'\x2', '\xD1B', '\xD1C', '\a', ')', '\x2', '\x2', '\xD1C', '\xD23', '\x5', 
		'\x1A6', '\xD4', '\x2', '\xD1D', '\xD1F', '\a', '\xB1', '\x2', '\x2', 
		'\xD1E', '\xD20', '\x5', '\x1D6', '\xEC', '\x2', '\xD1F', '\xD1E', '\x3', 
		'\x2', '\x2', '\x2', '\xD20', '\xD21', '\x3', '\x2', '\x2', '\x2', '\xD21', 
		'\xD1F', '\x3', '\x2', '\x2', '\x2', '\xD21', '\xD22', '\x3', '\x2', '\x2', 
		'\x2', '\xD22', '\xD24', '\x3', '\x2', '\x2', '\x2', '\xD23', '\xD1D', 
		'\x3', '\x2', '\x2', '\x2', '\xD23', '\xD24', '\x3', '\x2', '\x2', '\x2', 
		'\xD24', '\xD25', '\x3', '\x2', '\x2', '\x2', '\xD25', '\xD26', '\a', 
		'\xA9', '\x2', '\x2', '\xD26', '\xD27', '\a', '\x2C5', '\x2', '\x2', '\xD27', 
		'\x175', '\x3', '\x2', '\x2', '\x2', '\xD28', '\xD29', '\a', '\x1D', '\x2', 
		'\x2', '\xD29', '\xD2A', '\t', '\x32', '\x2', '\x2', '\xD2A', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD2C', '\x5', '\x390', '\x1C9', 
		'\x2', '\xD2C', '\xD2D', '\a', '\x2C7', '\x2', '\x2', '\xD2D', '\xD2E', 
		'\x5', '\x2B8', '\x15D', '\x2', '\xD2E', '\x179', '\x3', '\x2', '\x2', 
		'\x2', '\xD2F', '\xD32', '\a', '\x110', '\x2', '\x2', '\xD30', '\xD33', 
		'\x5', '\x17C', '\xBF', '\x2', '\xD31', '\xD33', '\x5', '\x17E', '\xC0', 
		'\x2', '\xD32', '\xD30', '\x3', '\x2', '\x2', '\x2', '\xD32', '\xD31', 
		'\x3', '\x2', '\x2', '\x2', '\xD33', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\xD34', '\xD35', '\a', '\x10B', '\x2', '\x2', '\xD35', '\xD36', '\a', 
		'\x148', '\x2', '\x2', '\xD36', '\xD37', '\a', '\x2AF', '\x2', '\x2', 
		'\xD37', '\x17D', '\x3', '\x2', '\x2', '\x2', '\xD38', '\xD3B', '\a', 
		'K', '\x2', '\x2', '\xD39', '\xD3A', '\a', '\x148', '\x2', '\x2', '\xD3A', 
		'\xD3C', '\a', '\x2AF', '\x2', '\x2', '\xD3B', '\xD39', '\x3', '\x2', 
		'\x2', '\x2', '\xD3B', '\xD3C', '\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD3D', 
		'\x3', '\x2', '\x2', '\x2', '\xD3D', '\xD3E', '\a', '\x117', '\x2', '\x2', 
		'\xD3E', '\xD40', '\x5', '\x390', '\x1C9', '\x2', '\xD3F', '\xD41', '\x5', 
		'\x180', '\xC1', '\x2', '\xD40', '\xD3F', '\x3', '\x2', '\x2', '\x2', 
		'\xD40', '\xD41', '\x3', '\x2', '\x2', '\x2', '\xD41', '\xD44', '\x3', 
		'\x2', '\x2', '\x2', '\xD42', '\xD43', '\a', '\x26B', '\x2', '\x2', '\xD43', 
		'\xD45', '\a', '\x64', '\x2', '\x2', '\xD44', '\xD42', '\x3', '\x2', '\x2', 
		'\x2', '\xD44', '\xD45', '\x3', '\x2', '\x2', '\x2', '\xD45', '\xD47', 
		'\x3', '\x2', '\x2', '\x2', '\xD46', '\xD48', '\x5', '\x182', '\xC2', 
		'\x2', '\xD47', '\xD46', '\x3', '\x2', '\x2', '\x2', '\xD47', '\xD48', 
		'\x3', '\x2', '\x2', '\x2', '\xD48', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\xD49', '\xD4A', '\a', '\v', '\x2', '\x2', '\xD4A', '\xD4B', '\a', '\xF6', 
		'\x2', '\x2', '\xD4B', '\xD4C', '\a', '\x2B3', '\x2', '\x2', '\xD4C', 
		'\xD4D', '\x5', '\x2B6', '\x15C', '\x2', '\xD4D', '\xD4E', '\a', '\x2B4', 
		'\x2', '\x2', '\xD4E', '\x181', '\x3', '\x2', '\x2', '\x2', '\xD4F', '\xD50', 
		'\a', '\x18B', '\x2', '\x2', '\xD50', '\xD55', '\a', '\x2B3', '\x2', '\x2', 
		'\xD51', '\xD56', '\x5', '\x2B6', '\x15C', '\x2', '\xD52', '\xD53', '\a', 
		'\x2AC', '\x2', '\x2', '\xD53', '\xD54', '\a', '\x2AC', '\x2', '\x2', 
		'\xD54', '\xD56', '\a', '\x2AC', '\x2', '\x2', '\xD55', '\xD51', '\x3', 
		'\x2', '\x2', '\x2', '\xD55', '\xD52', '\x3', '\x2', '\x2', '\x2', '\xD56', 
		'\xD57', '\x3', '\x2', '\x2', '\x2', '\xD57', '\xD58', '\a', '\x2B4', 
		'\x2', '\x2', '\xD58', '\x183', '\x3', '\x2', '\x2', '\x2', '\xD59', '\xD5D', 
		'\x5', '\x396', '\x1CC', '\x2', '\xD5A', '\xD5C', '\t', '\x33', '\x2', 
		'\x2', '\xD5B', '\xD5A', '\x3', '\x2', '\x2', '\x2', '\xD5C', '\xD5F', 
		'\x3', '\x2', '\x2', '\x2', '\xD5D', '\xD5B', '\x3', '\x2', '\x2', '\x2', 
		'\xD5D', '\xD5E', '\x3', '\x2', '\x2', '\x2', '\xD5E', '\xD61', '\x3', 
		'\x2', '\x2', '\x2', '\xD5F', '\xD5D', '\x3', '\x2', '\x2', '\x2', '\xD60', 
		'\xD62', '\x5', '\x378', '\x1BD', '\x2', '\xD61', '\xD60', '\x3', '\x2', 
		'\x2', '\x2', '\xD61', '\xD62', '\x3', '\x2', '\x2', '\x2', '\xD62', '\xD64', 
		'\x3', '\x2', '\x2', '\x2', '\xD63', '\xD65', '\x5', '\x186', '\xC4', 
		'\x2', '\xD64', '\xD63', '\x3', '\x2', '\x2', '\x2', '\xD64', '\xD65', 
		'\x3', '\x2', '\x2', '\x2', '\xD65', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\xD66', '\xD67', '\t', '\x34', '\x2', '\x2', '\xD67', '\xD68', '\x5', 
		'\x2B8', '\x15D', '\x2', '\xD68', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\xD69', '\xD6B', '\x5', '\x18A', '\xC6', '\x2', '\xD6A', '\xD69', '\x3', 
		'\x2', '\x2', '\x2', '\xD6B', '\xD6C', '\x3', '\x2', '\x2', '\x2', '\xD6C', 
		'\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD6C', '\xD6D', '\x3', '\x2', '\x2', 
		'\x2', '\xD6D', '\x189', '\x3', '\x2', '\x2', '\x2', '\xD6E', '\xD79', 
		'\x5', '\x18C', '\xC7', '\x2', '\xD6F', '\xD79', '\x5', '\x18E', '\xC8', 
		'\x2', '\xD70', '\xD79', '\x5', '\x190', '\xC9', '\x2', '\xD71', '\xD79', 
		'\x5', '\x194', '\xCB', '\x2', '\xD72', '\xD79', '\x5', '\x196', '\xCC', 
		'\x2', '\xD73', '\xD79', '\x5', '\x19E', '\xD0', '\x2', '\xD74', '\xD79', 
		'\x5', ' ', '\x11', '\x2', '\xD75', '\xD79', '\x5', '\"', '\x12', '\x2', 
		'\xD76', '\xD79', '\x5', ',', '\x17', '\x2', '\xD77', '\xD79', '\x5', 
		'*', '\x16', '\x2', '\xD78', '\xD6E', '\x3', '\x2', '\x2', '\x2', '\xD78', 
		'\xD6F', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD70', '\x3', '\x2', '\x2', 
		'\x2', '\xD78', '\xD71', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD72', 
		'\x3', '\x2', '\x2', '\x2', '\xD78', '\xD73', '\x3', '\x2', '\x2', '\x2', 
		'\xD78', '\xD74', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD75', '\x3', 
		'\x2', '\x2', '\x2', '\xD78', '\xD76', '\x3', '\x2', '\x2', '\x2', '\xD78', 
		'\xD77', '\x3', '\x2', '\x2', '\x2', '\xD79', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\xD7A', '\xD7C', '\x5', '\x390', '\x1C9', '\x2', '\xD7B', '\xD7D', 
		'\a', ']', '\x2', '\x2', '\xD7C', '\xD7B', '\x3', '\x2', '\x2', '\x2', 
		'\xD7C', '\xD7D', '\x3', '\x2', '\x2', '\x2', '\xD7D', '\xD7E', '\x3', 
		'\x2', '\x2', '\x2', '\xD7E', '\xD81', '\x5', '\x378', '\x1BD', '\x2', 
		'\xD7F', '\xD80', '\a', '\x167', '\x2', '\x2', '\xD80', '\xD82', '\a', 
		'\x16A', '\x2', '\x2', '\xD81', '\xD7F', '\x3', '\x2', '\x2', '\x2', '\xD81', 
		'\xD82', '\x3', '\x2', '\x2', '\x2', '\xD82', '\xD84', '\x3', '\x2', '\x2', 
		'\x2', '\xD83', '\xD85', '\x5', '\x186', '\xC4', '\x2', '\xD84', '\xD83', 
		'\x3', '\x2', '\x2', '\x2', '\xD84', '\xD85', '\x3', '\x2', '\x2', '\x2', 
		'\xD85', '\xD86', '\x3', '\x2', '\x2', '\x2', '\xD86', '\xD87', '\a', 
		'\x2C5', '\x2', '\x2', '\xD87', '\x18D', '\x3', '\x2', '\x2', '\x2', '\xD88', 
		'\xD89', '\a', '\x21C', '\x2', '\x2', '\xD89', '\xD8A', '\x5', '\x390', 
		'\x1C9', '\x2', '\xD8A', '\xD8B', '\a', '\x108', '\x2', '\x2', '\xD8B', 
		'\xD91', '\x5', '\x378', '\x1BD', '\x2', '\xD8C', '\xD8D', '\a', '\x1B8', 
		'\x2', '\x2', '\xD8D', '\xD8E', '\x5', '\x2B8', '\x15D', '\x2', '\xD8E', 
		'\xD8F', '\a', '\x2AB', '\x2', '\x2', '\xD8F', '\xD90', '\x5', '\x2B8', 
		'\x15D', '\x2', '\xD90', '\xD92', '\x3', '\x2', '\x2', '\x2', '\xD91', 
		'\xD8C', '\x3', '\x2', '\x2', '\x2', '\xD91', '\xD92', '\x3', '\x2', '\x2', 
		'\x2', '\xD92', '\xD95', '\x3', '\x2', '\x2', '\x2', '\xD93', '\xD94', 
		'\a', '\x167', '\x2', '\x2', '\xD94', '\xD96', '\a', '\x16A', '\x2', '\x2', 
		'\xD95', '\xD93', '\x3', '\x2', '\x2', '\x2', '\xD95', '\xD96', '\x3', 
		'\x2', '\x2', '\x2', '\xD96', '\xD97', '\x3', '\x2', '\x2', '\x2', '\xD97', 
		'\xD98', '\a', '\x2C5', '\x2', '\x2', '\xD98', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', '\xD99', '\xD9A', '\a', 'r', '\x2', '\x2', '\xD9A', '\xDA6', 
		'\x5', '\x390', '\x1C9', '\x2', '\xD9B', '\xDA0', '\a', '\x2B3', '\x2', 
		'\x2', '\xD9C', '\xD9E', '\a', '\x2B9', '\x2', '\x2', '\xD9D', '\xD9C', 
		'\x3', '\x2', '\x2', '\x2', '\xD9D', '\xD9E', '\x3', '\x2', '\x2', '\x2', 
		'\xD9E', '\xD9F', '\x3', '\x2', '\x2', '\x2', '\xD9F', '\xDA1', '\x5', 
		'\x192', '\xCA', '\x2', '\xDA0', '\xD9D', '\x3', '\x2', '\x2', '\x2', 
		'\xDA1', '\xDA2', '\x3', '\x2', '\x2', '\x2', '\xDA2', '\xDA0', '\x3', 
		'\x2', '\x2', '\x2', '\xDA2', '\xDA3', '\x3', '\x2', '\x2', '\x2', '\xDA3', 
		'\xDA4', '\x3', '\x2', '\x2', '\x2', '\xDA4', '\xDA5', '\a', '\x2B4', 
		'\x2', '\x2', '\xDA5', '\xDA7', '\x3', '\x2', '\x2', '\x2', '\xDA6', '\xD9B', 
		'\x3', '\x2', '\x2', '\x2', '\xDA6', '\xDA7', '\x3', '\x2', '\x2', '\x2', 
		'\xDA7', '\xDAA', '\x3', '\x2', '\x2', '\x2', '\xDA8', '\xDA9', '\a', 
		'\x1D4', '\x2', '\x2', '\xDA9', '\xDAB', '\x5', '\x378', '\x1BD', '\x2', 
		'\xDAA', '\xDA8', '\x3', '\x2', '\x2', '\x2', '\xDAA', '\xDAB', '\x3', 
		'\x2', '\x2', '\x2', '\xDAB', '\xDAE', '\x3', '\x2', '\x2', '\x2', '\xDAC', 
		'\xDAD', '\a', '\x108', '\x2', '\x2', '\xDAD', '\xDAF', '\x5', '\x1FE', 
		'\x100', '\x2', '\xDAE', '\xDAC', '\x3', '\x2', '\x2', '\x2', '\xDAE', 
		'\xDAF', '\x3', '\x2', '\x2', '\x2', '\xDAF', '\xDB0', '\x3', '\x2', '\x2', 
		'\x2', '\xDB0', '\xDB1', '\a', '\x2C5', '\x2', '\x2', '\xDB1', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\xDB2', '\xDB7', '\x5', '\x396', '\x1CC', 
		'\x2', '\xDB3', '\xDB5', '\a', '\xF6', '\x2', '\x2', '\xDB4', '\xDB3', 
		'\x3', '\x2', '\x2', '\x2', '\xDB4', '\xDB5', '\x3', '\x2', '\x2', '\x2', 
		'\xDB5', '\xDB6', '\x3', '\x2', '\x2', '\x2', '\xDB6', '\xDB8', '\x5', 
		'\x378', '\x1BD', '\x2', '\xDB7', '\xDB4', '\x3', '\x2', '\x2', '\x2', 
		'\xDB7', '\xDB8', '\x3', '\x2', '\x2', '\x2', '\xDB8', '\xDBA', '\x3', 
		'\x2', '\x2', '\x2', '\xDB9', '\xDBB', '\x5', '\x186', '\xC4', '\x2', 
		'\xDBA', '\xDB9', '\x3', '\x2', '\x2', '\x2', '\xDBA', '\xDBB', '\x3', 
		'\x2', '\x2', '\x2', '\xDBB', '\x193', '\x3', '\x2', '\x2', '\x2', '\xDBC', 
		'\xDBD', '\x5', '\x390', '\x1C9', '\x2', '\xDBD', '\xDBE', '\a', '\xB1', 
		'\x2', '\x2', '\xDBE', '\xDBF', '\a', '\x2C5', '\x2', '\x2', '\xDBF', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\xDC0', '\xDDF', '\a', '\x1A5', 
		'\x2', '\x2', '\xDC1', '\xDE0', '\a', '\x1F4', '\x2', '\x2', '\xDC2', 
		'\xDE0', '\a', '\"', '\x2', '\x2', '\xDC3', '\xDC4', '\a', '\xB2', '\x2', 
		'\x2', '\xDC4', '\xDC5', '\a', '\x2B3', '\x2', '\x2', '\xDC5', '\xDC6', 
		'\x5', '\x3AE', '\x1D8', '\x2', '\xDC6', '\xDC7', '\a', '\x2B9', '\x2', 
		'\x2', '\xDC7', '\xDC8', '\x5', '\x3C8', '\x1E5', '\x2', '\xDC8', '\xDC9', 
		'\a', '\x2B4', '\x2', '\x2', '\xDC9', '\xDE0', '\x3', '\x2', '\x2', '\x2', 
		'\xDCA', '\xDCB', '\a', '\xFA', '\x2', '\x2', '\xDCB', '\xDCC', '\a', 
		'\x2B3', '\x2', '\x2', '\xDCC', '\xDCD', '\x5', '\x390', '\x1C9', '\x2', 
		'\xDCD', '\xDCE', '\a', '\x2B9', '\x2', '\x2', '\xDCE', '\xDCF', '\x5', 
		'\x2B8', '\x15D', '\x2', '\xDCF', '\xDD0', '\a', '\x2B4', '\x2', '\x2', 
		'\xDD0', '\xDE0', '\x3', '\x2', '\x2', '\x2', '\xDD1', '\xDD2', '\a', 
		'\x1CE', '\x2', '\x2', '\xDD2', '\xDD5', '\a', '\x2B3', '\x2', '\x2', 
		'\xDD3', '\xDD6', '\x5', '\x390', '\x1C9', '\x2', '\xDD4', '\xDD6', '\a', 
		'\x84', '\x2', '\x2', '\xDD5', '\xDD3', '\x3', '\x2', '\x2', '\x2', '\xDD5', 
		'\xDD4', '\x3', '\x2', '\x2', '\x2', '\xDD6', '\xDD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDD7', '\xDD8', '\a', '\x2B9', '\x2', '\x2', '\xDD8', '\xDDA', 
		'\x5', '\x390', '\x1C9', '\x2', '\xDD9', '\xDD7', '\x3', '\x2', '\x2', 
		'\x2', '\xDDA', '\xDDB', '\x3', '\x2', '\x2', '\x2', '\xDDB', '\xDD9', 
		'\x3', '\x2', '\x2', '\x2', '\xDDB', '\xDDC', '\x3', '\x2', '\x2', '\x2', 
		'\xDDC', '\xDDD', '\x3', '\x2', '\x2', '\x2', '\xDDD', '\xDDE', '\a', 
		'\x2B4', '\x2', '\x2', '\xDDE', '\xDE0', '\x3', '\x2', '\x2', '\x2', '\xDDF', 
		'\xDC1', '\x3', '\x2', '\x2', '\x2', '\xDDF', '\xDC2', '\x3', '\x2', '\x2', 
		'\x2', '\xDDF', '\xDC3', '\x3', '\x2', '\x2', '\x2', '\xDDF', '\xDCA', 
		'\x3', '\x2', '\x2', '\x2', '\xDDF', '\xDD1', '\x3', '\x2', '\x2', '\x2', 
		'\xDE0', '\xDE1', '\x3', '\x2', '\x2', '\x2', '\xDE1', '\xDE2', '\a', 
		'\x2C5', '\x2', '\x2', '\xDE2', '\x197', '\x3', '\x2', '\x2', '\x2', '\xDE3', 
		'\xDE4', '\a', '\x1BC', '\x2', '\x2', '\xDE4', '\xDE9', '\a', '\x2B3', 
		'\x2', '\x2', '\xDE5', '\xDE7', '\a', '\x2B9', '\x2', '\x2', '\xDE6', 
		'\xDE5', '\x3', '\x2', '\x2', '\x2', '\xDE6', '\xDE7', '\x3', '\x2', '\x2', 
		'\x2', '\xDE7', '\xDE8', '\x3', '\x2', '\x2', '\x2', '\xDE8', '\xDEA', 
		'\x5', '\x19A', '\xCE', '\x2', '\xDE9', '\xDE6', '\x3', '\x2', '\x2', 
		'\x2', '\xDEA', '\xDEB', '\x3', '\x2', '\x2', '\x2', '\xDEB', '\xDE9', 
		'\x3', '\x2', '\x2', '\x2', '\xDEB', '\xDEC', '\x3', '\x2', '\x2', '\x2', 
		'\xDEC', '\xDED', '\x3', '\x2', '\x2', '\x2', '\xDED', '\xDEE', '\a', 
		'\x2B4', '\x2', '\x2', '\xDEE', '\x199', '\x3', '\x2', '\x2', '\x2', '\xDEF', 
		'\xDF1', '\x5', '\x3B0', '\x1D9', '\x2', '\xDF0', '\xDF2', '\x5', '\x378', 
		'\x1BD', '\x2', '\xDF1', '\xDF0', '\x3', '\x2', '\x2', '\x2', '\xDF1', 
		'\xDF2', '\x3', '\x2', '\x2', '\x2', '\xDF2', '\xDF5', '\x3', '\x2', '\x2', 
		'\x2', '\xDF3', '\xDF4', '\a', '\x167', '\x2', '\x2', '\xDF4', '\xDF6', 
		'\a', '\x16A', '\x2', '\x2', '\xDF5', '\xDF3', '\x3', '\x2', '\x2', '\x2', 
		'\xDF5', '\xDF6', '\x3', '\x2', '\x2', '\x2', '\xDF6', '\xDF8', '\x3', 
		'\x2', '\x2', '\x2', '\xDF7', '\xDF9', '\x5', '\x186', '\xC4', '\x2', 
		'\xDF8', '\xDF7', '\x3', '\x2', '\x2', '\x2', '\xDF8', '\xDF9', '\x3', 
		'\x2', '\x2', '\x2', '\xDF9', '\x19B', '\x3', '\x2', '\x2', '\x2', '\xDFA', 
		'\xDFB', '\a', '\x1C2', '\x2', '\x2', '\xDFB', '\xDFE', '\a', 'r', '\x2', 
		'\x2', '\xDFC', '\xDFD', '\a', '\x1D4', '\x2', '\x2', '\xDFD', '\xDFF', 
		'\x5', '\x378', '\x1BD', '\x2', '\xDFE', '\xDFC', '\x3', '\x2', '\x2', 
		'\x2', '\xDFE', '\xDFF', '\x3', '\x2', '\x2', '\x2', '\xDFF', '\x19D', 
		'\x3', '\x2', '\x2', '\x2', '\xE00', '\xE01', '\a', '\x242', '\x2', '\x2', 
		'\xE01', '\xE02', '\x5', '\x390', '\x1C9', '\x2', '\xE02', '\xE07', '\a', 
		'\x108', '\x2', '\x2', '\xE03', '\xE08', '\x5', '\x1A0', '\xD1', '\x2', 
		'\xE04', '\xE08', '\x5', '\x1A4', '\xD3', '\x2', '\xE05', '\xE08', '\x5', 
		'\x198', '\xCD', '\x2', '\xE06', '\xE08', '\x5', '\x19C', '\xCF', '\x2', 
		'\xE07', '\xE03', '\x3', '\x2', '\x2', '\x2', '\xE07', '\xE04', '\x3', 
		'\x2', '\x2', '\x2', '\xE07', '\xE05', '\x3', '\x2', '\x2', '\x2', '\xE07', 
		'\xE06', '\x3', '\x2', '\x2', '\x2', '\xE08', '\xE09', '\x3', '\x2', '\x2', 
		'\x2', '\xE09', '\xE0A', '\a', '\x2C5', '\x2', '\x2', '\xE0A', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\xE0B', '\xE0C', '\a', '\x228', '\x2', '\x2', 
		'\xE0C', '\xE0D', '\a', '\x172', '\x2', '\x2', '\xE0D', '\xE0F', '\x5', 
		'\x378', '\x1BD', '\x2', '\xE0E', '\xE10', '\x5', '\x1A2', '\xD2', '\x2', 
		'\xE0F', '\xE0E', '\x3', '\x2', '\x2', '\x2', '\xE0F', '\xE10', '\x3', 
		'\x2', '\x2', '\x2', '\xE10', '\xE13', '\x3', '\x2', '\x2', '\x2', '\xE11', 
		'\xE12', '\a', '\x167', '\x2', '\x2', '\xE12', '\xE14', '\a', '\x16A', 
		'\x2', '\x2', '\xE13', '\xE11', '\x3', '\x2', '\x2', '\x2', '\xE13', '\xE14', 
		'\x3', '\x2', '\x2', '\x2', '\xE14', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\xE15', '\xE18', '\a', '\xEE', '\x2', '\x2', '\xE16', '\xE18', '\a', 
		'\xEF', '\x2', '\x2', '\xE17', '\xE15', '\x3', '\x2', '\x2', '\x2', '\xE17', 
		'\xE16', '\x3', '\x2', '\x2', '\x2', '\xE18', '\xE19', '\x3', '\x2', '\x2', 
		'\x2', '\xE19', '\xE1A', '\a', ':', '\x2', '\x2', '\xE1A', '\xE1B', '\x5', 
		'\x378', '\x1BD', '\x2', '\xE1B', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\xE1C', '\xE20', '\a', '\x25D', '\x2', '\x2', '\xE1D', '\xE1E', '\a', 
		'\x25E', '\x2', '\x2', '\xE1E', '\xE20', '\a', '\x14', '\x2', '\x2', '\xE1F', 
		'\xE1C', '\x3', '\x2', '\x2', '\x2', '\xE1F', '\xE1D', '\x3', '\x2', '\x2', 
		'\x2', '\xE20', '\xE21', '\x3', '\x2', '\x2', '\x2', '\xE21', '\xE22', 
		'\a', '\x2B3', '\x2', '\x2', '\xE22', '\xE23', '\x5', '\x2B8', '\x15D', 
		'\x2', '\xE23', '\xE24', '\a', '\x2B4', '\x2', '\x2', '\xE24', '\xE25', 
		'\a', '\x172', '\x2', '\x2', '\xE25', '\xE28', '\x5', '\x378', '\x1BD', 
		'\x2', '\xE26', '\xE27', '\a', '\x167', '\x2', '\x2', '\xE27', '\xE29', 
		'\a', '\x16A', '\x2', '\x2', '\xE28', '\xE26', '\x3', '\x2', '\x2', '\x2', 
		'\xE28', '\xE29', '\x3', '\x2', '\x2', '\x2', '\xE29', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\xE2A', '\xE2B', '\x5', '\x1AA', '\xD6', '\x2', 
		'\xE2B', '\xE2C', '\t', '\x35', '\x2', '\x2', '\xE2C', '\xE2F', '\x3', 
		'\x2', '\x2', '\x2', '\xE2D', '\xE2F', '\x5', '\x1A8', '\xD5', '\x2', 
		'\xE2E', '\xE2A', '\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE2D', '\x3', 
		'\x2', '\x2', '\x2', '\xE2F', '\xE30', '\x3', '\x2', '\x2', '\x2', '\xE30', 
		'\xE2E', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE31', '\x3', '\x2', '\x2', 
		'\x2', '\xE31', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\xE32', '\xE33', 
		'\a', '\x2C3', '\x2', '\x2', '\xE33', '\xE34', '\a', '\x2C3', '\x2', '\x2', 
		'\xE34', '\xE35', '\x5', '\x34C', '\x1A7', '\x2', '\xE35', '\xE36', '\a', 
		'\x2C2', '\x2', '\x2', '\xE36', '\xE37', '\a', '\x2C2', '\x2', '\x2', 
		'\xE37', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\xE38', '\xE39', '\a', 
		'k', '\x2', '\x2', '\xE39', '\xE4D', '\x5', '\x1AC', '\xD7', '\x2', '\xE3A', 
		'\xE3B', '\a', '\x240', '\x2', '\x2', '\xE3B', '\xE4D', '\x5', '\x1AC', 
		'\xD7', '\x2', '\xE3C', '\xE4D', '\x5', '\x1D4', '\xEB', '\x2', '\xE3D', 
		'\xE4D', '\x5', '\x1DA', '\xEE', '\x2', '\xE3E', '\xE4D', '\x5', '\x1AE', 
		'\xD8', '\x2', '\xE3F', '\xE4D', '\x5', '\x1B0', '\xD9', '\x2', '\xE40', 
		'\xE4D', '\x5', '\x1B2', '\xDA', '\x2', '\xE41', '\xE4D', '\x5', '\x1B4', 
		'\xDB', '\x2', '\xE42', '\xE4D', '\x5', '\x1B6', '\xDC', '\x2', '\xE43', 
		'\xE4D', '\x5', '\x1BC', '\xDF', '\x2', '\xE44', '\xE4D', '\x5', '\x1C0', 
		'\xE1', '\x2', '\xE45', '\xE4D', '\x5', '\x1CA', '\xE6', '\x2', '\xE46', 
		'\xE4D', '\x5', '\x1CC', '\xE7', '\x2', '\xE47', '\xE4D', '\x5', '\x1CE', 
		'\xE8', '\x2', '\xE48', '\xE4D', '\x5', '\x2D8', '\x16D', '\x2', '\xE49', 
		'\xE4D', '\x5', '\x1DC', '\xEF', '\x2', '\xE4A', '\xE4D', '\x5', '\x1D0', 
		'\xE9', '\x2', '\xE4B', '\xE4D', '\x5', '\x1D2', '\xEA', '\x2', '\xE4C', 
		'\xE38', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE3A', '\x3', '\x2', '\x2', 
		'\x2', '\xE4C', '\xE3C', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE3D', 
		'\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE3E', '\x3', '\x2', '\x2', '\x2', 
		'\xE4C', '\xE3F', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE40', '\x3', 
		'\x2', '\x2', '\x2', '\xE4C', '\xE41', '\x3', '\x2', '\x2', '\x2', '\xE4C', 
		'\xE42', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE43', '\x3', '\x2', '\x2', 
		'\x2', '\xE4C', '\xE44', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE45', 
		'\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE46', '\x3', '\x2', '\x2', '\x2', 
		'\xE4C', '\xE47', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE48', '\x3', 
		'\x2', '\x2', '\x2', '\xE4C', '\xE49', '\x3', '\x2', '\x2', '\x2', '\xE4C', 
		'\xE4A', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE4B', '\x3', '\x2', '\x2', 
		'\x2', '\xE4D', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\xE4E', '\xE50', 
		'\n', '\x36', '\x2', '\x2', '\xE4F', '\xE4E', '\x3', '\x2', '\x2', '\x2', 
		'\xE50', '\xE51', '\x3', '\x2', '\x2', '\x2', '\xE51', '\xE4F', '\x3', 
		'\x2', '\x2', '\x2', '\xE51', '\xE52', '\x3', '\x2', '\x2', '\x2', '\xE52', 
		'\x1AD', '\x3', '\x2', '\x2', '\x2', '\xE53', '\xE56', '\x5', '\x382', 
		'\x1C2', '\x2', '\xE54', '\xE56', '\x5', '\x380', '\x1C1', '\x2', '\xE55', 
		'\xE53', '\x3', '\x2', '\x2', '\x2', '\xE55', '\xE54', '\x3', '\x2', '\x2', 
		'\x2', '\xE56', '\xE57', '\x3', '\x2', '\x2', '\x2', '\xE57', '\xE58', 
		'\a', '\x2BC', '\x2', '\x2', '\xE58', '\xE59', '\x5', '\x2B8', '\x15D', 
		'\x2', '\xE59', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\xE5A', '\xE5C', 
		'\a', '\x65', '\x2', '\x2', '\xE5B', '\xE5D', '\x5', '\x34C', '\x1A7', 
		'\x2', '\xE5C', '\xE5B', '\x3', '\x2', '\x2', '\x2', '\xE5C', '\xE5D', 
		'\x3', '\x2', '\x2', '\x2', '\xE5D', '\xE60', '\x3', '\x2', '\x2', '\x2', 
		'\xE5E', '\xE5F', '\a', '\x267', '\x2', '\x2', '\xE5F', '\xE61', '\x5', 
		'\x2B4', '\x15B', '\x2', '\xE60', '\xE5E', '\x3', '\x2', '\x2', '\x2', 
		'\xE60', '\xE61', '\x3', '\x2', '\x2', '\x2', '\xE61', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\xE62', '\xE64', '\a', '\xB9', '\x2', '\x2', '\xE63', 
		'\xE65', '\x5', '\x34C', '\x1A7', '\x2', '\xE64', '\xE63', '\x3', '\x2', 
		'\x2', '\x2', '\xE64', '\xE65', '\x3', '\x2', '\x2', '\x2', '\xE65', '\xE68', 
		'\x3', '\x2', '\x2', '\x2', '\xE66', '\xE67', '\a', '\x267', '\x2', '\x2', 
		'\xE67', '\xE69', '\x5', '\x2B4', '\x15B', '\x2', '\xE68', '\xE66', '\x3', 
		'\x2', '\x2', '\x2', '\xE68', '\xE69', '\x3', '\x2', '\x2', '\x2', '\xE69', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\xE6A', '\xE6B', '\a', '\xD8', '\x2', 
		'\x2', '\xE6B', '\xE6C', '\x5', '\x34C', '\x1A7', '\x2', '\xE6C', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\xE6D', '\xE6E', '\a', '\xE7', '\x2', '\x2', 
		'\xE6E', '\xE6F', '\x5', '\x2B4', '\x15B', '\x2', '\xE6F', '\xE70', '\a', 
		'\x22C', '\x2', '\x2', '\xE70', '\xE74', '\x5', '\x1A6', '\xD4', '\x2', 
		'\xE71', '\xE73', '\x5', '\x1B8', '\xDD', '\x2', '\xE72', '\xE71', '\x3', 
		'\x2', '\x2', '\x2', '\xE73', '\xE76', '\x3', '\x2', '\x2', '\x2', '\xE74', 
		'\xE72', '\x3', '\x2', '\x2', '\x2', '\xE74', '\xE75', '\x3', '\x2', '\x2', 
		'\x2', '\xE75', '\xE78', '\x3', '\x2', '\x2', '\x2', '\xE76', '\xE74', 
		'\x3', '\x2', '\x2', '\x2', '\xE77', '\xE79', '\x5', '\x1BA', '\xDE', 
		'\x2', '\xE78', '\xE77', '\x3', '\x2', '\x2', '\x2', '\xE78', '\xE79', 
		'\x3', '\x2', '\x2', '\x2', '\xE79', '\xE7A', '\x3', '\x2', '\x2', '\x2', 
		'\xE7A', '\xE7B', '\a', '\xA9', '\x2', '\x2', '\xE7B', '\xE7C', '\a', 
		'\xE7', '\x2', '\x2', '\xE7C', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\xE7D', 
		'\xE7E', '\a', '\xA3', '\x2', '\x2', '\xE7E', '\xE7F', '\x5', '\x2B4', 
		'\x15B', '\x2', '\xE7F', '\xE80', '\a', '\x22C', '\x2', '\x2', '\xE80', 
		'\xE81', '\x5', '\x1A6', '\xD4', '\x2', '\xE81', '\x1B9', '\x3', '\x2', 
		'\x2', '\x2', '\xE82', '\xE83', '\a', '\xA2', '\x2', '\x2', '\xE83', '\xE84', 
		'\x5', '\x1A6', '\xD4', '\x2', '\xE84', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\xE85', '\xE87', '\x5', '\x1A8', '\xD5', '\x2', '\xE86', '\xE85', 
		'\x3', '\x2', '\x2', '\x2', '\xE86', '\xE87', '\x3', '\x2', '\x2', '\x2', 
		'\xE87', '\xE8C', '\x3', '\x2', '\x2', '\x2', '\xE88', '\xE89', '\a', 
		'\x269', '\x2', '\x2', '\xE89', '\xE8D', '\x5', '\x2B4', '\x15B', '\x2', 
		'\xE8A', '\xE8B', '\a', '\xD0', '\x2', '\x2', '\xE8B', '\xE8D', '\x5', 
		'\x1BE', '\xE0', '\x2', '\xE8C', '\xE88', '\x3', '\x2', '\x2', '\x2', 
		'\xE8C', '\xE8A', '\x3', '\x2', '\x2', '\x2', '\xE8C', '\xE8D', '\x3', 
		'\x2', '\x2', '\x2', '\xE8D', '\xE8E', '\x3', '\x2', '\x2', '\x2', '\xE8E', 
		'\xE8F', '\a', '\x12A', '\x2', '\x2', '\xE8F', '\xE90', '\x5', '\x1A6', 
		'\xD4', '\x2', '\xE90', '\xE91', '\a', '\xA9', '\x2', '\x2', '\xE91', 
		'\xE93', '\a', '\x12A', '\x2', '\x2', '\xE92', '\xE94', '\x5', '\x34C', 
		'\x1A7', '\x2', '\xE93', '\xE92', '\x3', '\x2', '\x2', '\x2', '\xE93', 
		'\xE94', '\x3', '\x2', '\x2', '\x2', '\xE94', '\x1BD', '\x3', '\x2', '\x2', 
		'\x2', '\xE95', '\xE96', '\x5', '\x362', '\x1B2', '\x2', '\xE96', '\xE98', 
		'\a', '\xF6', '\x2', '\x2', '\xE97', '\xE99', '\a', '\x1D6', '\x2', '\x2', 
		'\xE98', '\xE97', '\x3', '\x2', '\x2', '\x2', '\xE98', '\xE99', '\x3', 
		'\x2', '\x2', '\x2', '\xE99', '\xE9A', '\x3', '\x2', '\x2', '\x2', '\xE9A', 
		'\xE9B', '\x5', '\x1C6', '\xE4', '\x2', '\xE9B', '\xE9C', '\a', '\x2AB', 
		'\x2', '\x2', '\xE9C', '\xE9D', '\x5', '\x1C8', '\xE5', '\x2', '\xE9D', 
		'\xEAF', '\x3', '\x2', '\x2', '\x2', '\xE9E', '\xE9F', '\x5', '\x33E', 
		'\x1A0', '\x2', '\xE9F', '\xEAC', '\a', '\xF6', '\x2', '\x2', '\xEA0', 
		'\xEA6', '\x5', '\x33C', '\x19F', '\x2', '\xEA1', '\xEA3', '\a', '\x2B3', 
		'\x2', '\x2', '\xEA2', '\xEA4', '\x5', '\x2B6', '\x15C', '\x2', '\xEA3', 
		'\xEA2', '\x3', '\x2', '\x2', '\x2', '\xEA3', '\xEA4', '\x3', '\x2', '\x2', 
		'\x2', '\xEA4', '\xEA5', '\x3', '\x2', '\x2', '\x2', '\xEA5', '\xEA7', 
		'\a', '\x2B4', '\x2', '\x2', '\xEA6', '\xEA1', '\x3', '\x2', '\x2', '\x2', 
		'\xEA6', '\xEA7', '\x3', '\x2', '\x2', '\x2', '\xEA7', '\xEAD', '\x3', 
		'\x2', '\x2', '\x2', '\xEA8', '\xEA9', '\a', '\x2B3', '\x2', '\x2', '\xEA9', 
		'\xEAA', '\x5', '\x1FE', '\x100', '\x2', '\xEAA', '\xEAB', '\a', '\x2B4', 
		'\x2', '\x2', '\xEAB', '\xEAD', '\x3', '\x2', '\x2', '\x2', '\xEAC', '\xEA0', 
		'\x3', '\x2', '\x2', '\x2', '\xEAC', '\xEA8', '\x3', '\x2', '\x2', '\x2', 
		'\xEAD', '\xEAF', '\x3', '\x2', '\x2', '\x2', '\xEAE', '\xE95', '\x3', 
		'\x2', '\x2', '\x2', '\xEAE', '\xE9E', '\x3', '\x2', '\x2', '\x2', '\xEAF', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\xEB0', '\xEB1', '\a', '\xCD', '\x2', 
		'\x2', '\xEB1', '\xEB2', '\x5', '\x362', '\x1B2', '\x2', '\xEB2', '\xEB3', 
		'\a', '\xF6', '\x2', '\x2', '\xEB3', '\xEB4', '\x5', '\x1C2', '\xE2', 
		'\x2', '\xEB4', '\xEB7', '\x5', '\x1DC', '\xEF', '\x2', '\xEB5', '\xEB6', 
		'\a', '\x1E5', '\x2', '\x2', '\xEB6', '\xEB8', '\a', '\xB3', '\x2', '\x2', 
		'\xEB7', '\xEB5', '\x3', '\x2', '\x2', '\x2', '\xEB7', '\xEB8', '\x3', 
		'\x2', '\x2', '\x2', '\xEB8', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\xEB9', 
		'\xEBA', '\x5', '\x1C6', '\xE4', '\x2', '\xEBA', '\xEBB', '\a', '\x2AB', 
		'\x2', '\x2', '\xEBB', '\xEBC', '\x5', '\x1C8', '\xE5', '\x2', '\xEBC', 
		'\xEC7', '\x3', '\x2', '\x2', '\x2', '\xEBD', '\xEBE', '\a', '\xF3', '\x2', 
		'\x2', '\xEBE', '\xEBF', '\a', '\x172', '\x2', '\x2', '\xEBF', '\xEC1', 
		'\x5', '\x360', '\x1B1', '\x2', '\xEC0', '\xEC2', '\x5', '\x1C4', '\xE3', 
		'\x2', '\xEC1', '\xEC0', '\x3', '\x2', '\x2', '\x2', '\xEC1', '\xEC2', 
		'\x3', '\x2', '\x2', '\x2', '\xEC2', '\xEC7', '\x3', '\x2', '\x2', '\x2', 
		'\xEC3', '\xEC4', '\a', '\x258', '\x2', '\x2', '\xEC4', '\xEC5', '\a', 
		'\x172', '\x2', '\x2', '\xEC5', '\xEC7', '\x5', '\x362', '\x1B2', '\x2', 
		'\xEC6', '\xEB9', '\x3', '\x2', '\x2', '\x2', '\xEC6', '\xEBD', '\x3', 
		'\x2', '\x2', '\x2', '\xEC6', '\xEC3', '\x3', '\x2', '\x2', '\x2', '\xEC7', 
		'\x1C3', '\x3', '\x2', '\x2', '\x2', '\xEC8', '\xEC9', '\a', '*', '\x2', 
		'\x2', '\xEC9', '\xECA', '\x5', '\x1C6', '\xE4', '\x2', '\xECA', '\xECB', 
		'\a', '\x11', '\x2', '\x2', '\xECB', '\xECC', '\x5', '\x1C8', '\xE5', 
		'\x2', '\xECC', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\xECD', '\xECE', 
		'\x5', '\x2CA', '\x166', '\x2', '\xECE', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\xECF', '\xED0', '\x5', '\x2CA', '\x166', '\x2', '\xED0', '\x1C9', 
		'\x3', '\x2', '\x2', '\x2', '\xED1', '\xED2', '\a', '\x16A', '\x2', '\x2', 
		'\xED2', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\xED3', '\xED5', '\a', 
		'\x1B7', '\x2', '\x2', '\xED4', '\xED6', '\x5', '\x3AE', '\x1D8', '\x2', 
		'\xED5', '\xED4', '\x3', '\x2', '\x2', '\x2', '\xED5', '\xED6', '\x3', 
		'\x2', '\x2', '\x2', '\xED6', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\xED7', 
		'\xED9', '\a', '\x1D4', '\x2', '\x2', '\xED8', '\xEDA', '\x5', '\x2B8', 
		'\x15D', '\x2', '\xED9', '\xED8', '\x3', '\x2', '\x2', '\x2', '\xED9', 
		'\xEDA', '\x3', '\x2', '\x2', '\x2', '\xEDA', '\x1CF', '\x3', '\x2', '\x2', 
		'\x2', '\xEDB', '\xEDD', '\a', '=', '\x2', '\x2', '\xEDC', '\xEDB', '\x3', 
		'\x2', '\x2', '\x2', '\xEDC', '\xEDD', '\x3', '\x2', '\x2', '\x2', '\xEDD', 
		'\xEDE', '\x3', '\x2', '\x2', '\x2', '\xEDE', '\xEE0', '\x5', '\x332', 
		'\x19A', '\x2', '\xEDF', '\xEE1', '\x5', '\x36E', '\x1B8', '\x2', '\xEE0', 
		'\xEDF', '\x3', '\x2', '\x2', '\x2', '\xEE0', '\xEE1', '\x3', '\x2', '\x2', 
		'\x2', '\xEE1', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\xEE2', '\xEE3', 
		'\a', '\x19D', '\x2', '\x2', '\xEE3', '\xEE4', '\a', '\x1DF', '\x2', '\x2', 
		'\xEE4', '\xEE5', '\a', '\x2B3', '\x2', '\x2', '\xEE5', '\xEE6', '\x5', 
		'\x2B8', '\x15D', '\x2', '\xEE6', '\xEE7', '\a', '\x2B4', '\x2', '\x2', 
		'\xEE7', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEE9', '\a', 
		')', '\x2', '\x2', '\xEE9', '\xEF0', '\x5', '\x1A6', '\xD4', '\x2', '\xEEA', 
		'\xEEC', '\a', '\xB1', '\x2', '\x2', '\xEEB', '\xEED', '\x5', '\x1D6', 
		'\xEC', '\x2', '\xEEC', '\xEEB', '\x3', '\x2', '\x2', '\x2', '\xEED', 
		'\xEEE', '\x3', '\x2', '\x2', '\x2', '\xEEE', '\xEEC', '\x3', '\x2', '\x2', 
		'\x2', '\xEEE', '\xEEF', '\x3', '\x2', '\x2', '\x2', '\xEEF', '\xEF1', 
		'\x3', '\x2', '\x2', '\x2', '\xEF0', '\xEEA', '\x3', '\x2', '\x2', '\x2', 
		'\xEF0', '\xEF1', '\x3', '\x2', '\x2', '\x2', '\xEF1', '\xEF2', '\x3', 
		'\x2', '\x2', '\x2', '\xEF2', '\xEF4', '\a', '\xA9', '\x2', '\x2', '\xEF3', 
		'\xEF5', '\x5', '\x34C', '\x1A7', '\x2', '\xEF4', '\xEF3', '\x3', '\x2', 
		'\x2', '\x2', '\xEF4', '\xEF5', '\x3', '\x2', '\x2', '\x2', '\xEF5', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\xEF6', '\xEF7', '\a', '\x267', '\x2', '\x2', 
		'\xEF7', '\xEFC', '\x5', '\x3AE', '\x1D8', '\x2', '\xEF8', '\xEF9', '\a', 
		'\x180', '\x2', '\x2', '\xEF9', '\xEFB', '\x5', '\x3AE', '\x1D8', '\x2', 
		'\xEFA', '\xEF8', '\x3', '\x2', '\x2', '\x2', '\xEFB', '\xEFE', '\x3', 
		'\x2', '\x2', '\x2', '\xEFC', '\xEFA', '\x3', '\x2', '\x2', '\x2', '\xEFC', 
		'\xEFD', '\x3', '\x2', '\x2', '\x2', '\xEFD', '\xEFF', '\x3', '\x2', '\x2', 
		'\x2', '\xEFE', '\xEFC', '\x3', '\x2', '\x2', '\x2', '\xEFF', '\xF00', 
		'\a', '\x22C', '\x2', '\x2', '\xF00', '\xF01', '\x5', '\x1A6', '\xD4', 
		'\x2', '\xF01', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\xF02', '\xF04', 
		'\a', '\x81', '\x2', '\x2', '\xF03', '\xF02', '\x3', '\x2', '\x2', '\x2', 
		'\xF03', '\xF04', '\x3', '\x2', '\x2', '\x2', '\xF04', '\xF06', '\x3', 
		'\x2', '\x2', '\x2', '\xF05', '\xF07', '\x5', '\x18A', '\xC6', '\x2', 
		'\xF06', '\xF05', '\x3', '\x2', '\x2', '\x2', '\xF07', '\xF08', '\x3', 
		'\x2', '\x2', '\x2', '\xF08', '\xF06', '\x3', '\x2', '\x2', '\x2', '\xF08', 
		'\xF09', '\x3', '\x2', '\x2', '\x2', '\xF09', '\xF0B', '\x3', '\x2', '\x2', 
		'\x2', '\xF0A', '\xF03', '\x3', '\x2', '\x2', '\x2', '\xF0A', '\xF0B', 
		'\x3', '\x2', '\x2', '\x2', '\xF0B', '\xF0C', '\x3', '\x2', '\x2', '\x2', 
		'\xF0C', '\xF0D', '\x5', '\x1D4', '\xEB', '\x2', '\xF0D', '\x1D9', '\x3', 
		'\x2', '\x2', '\x2', '\xF0E', '\xF10', '\a', '\x81', '\x2', '\x2', '\xF0F', 
		'\xF0E', '\x3', '\x2', '\x2', '\x2', '\xF0F', '\xF10', '\x3', '\x2', '\x2', 
		'\x2', '\xF10', '\xF12', '\x3', '\x2', '\x2', '\x2', '\xF11', '\xF13', 
		'\x5', '\x18A', '\xC6', '\x2', '\xF12', '\xF11', '\x3', '\x2', '\x2', 
		'\x2', '\xF13', '\xF14', '\x3', '\x2', '\x2', '\x2', '\xF14', '\xF12', 
		'\x3', '\x2', '\x2', '\x2', '\xF14', '\xF15', '\x3', '\x2', '\x2', '\x2', 
		'\xF15', '\xF16', '\x3', '\x2', '\x2', '\x2', '\xF16', '\xF17', '\x5', 
		'\x1D4', '\xEB', '\x2', '\xF17', '\x1DB', '\x3', '\x2', '\x2', '\x2', 
		'\xF18', '\xF1D', '\x5', '\x1DE', '\xF0', '\x2', '\xF19', '\xF1D', '\x5', 
		'\x1E2', '\xF2', '\x2', '\xF1A', '\xF1D', '\x5', '\x1E4', '\xF3', '\x2', 
		'\xF1B', '\xF1D', '\x5', '\x1EE', '\xF8', '\x2', '\xF1C', '\xF18', '\x3', 
		'\x2', '\x2', '\x2', '\xF1C', '\xF19', '\x3', '\x2', '\x2', '\x2', '\xF1C', 
		'\xF1A', '\x3', '\x2', '\x2', '\x2', '\xF1C', '\xF1B', '\x3', '\x2', '\x2', 
		'\x2', '\xF1D', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\xF1E', '\xF1F', 
		'\a', '\xB6', '\x2', '\x2', '\xF1F', '\xF20', '\a', '\xE9', '\x2', '\x2', 
		'\xF20', '\xF2A', '\x5', '\x2B8', '\x15D', '\x2', '\xF21', '\xF23', '\x5', 
		'\x32E', '\x198', '\x2', '\xF22', '\xF24', '\x5', '\x300', '\x181', '\x2', 
		'\xF23', '\xF22', '\x3', '\x2', '\x2', '\x2', '\xF23', '\xF24', '\x3', 
		'\x2', '\x2', '\x2', '\xF24', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF25', 
		'\xF27', '\x5', '\x300', '\x181', '\x2', '\xF26', '\xF28', '\x5', '\x1E0', 
		'\xF1', '\x2', '\xF27', '\xF26', '\x3', '\x2', '\x2', '\x2', '\xF27', 
		'\xF28', '\x3', '\x2', '\x2', '\x2', '\xF28', '\xF2B', '\x3', '\x2', '\x2', 
		'\x2', '\xF29', '\xF2B', '\x5', '\x1E0', '\xF1', '\x2', '\xF2A', '\xF21', 
		'\x3', '\x2', '\x2', '\x2', '\xF2A', '\xF25', '\x3', '\x2', '\x2', '\x2', 
		'\xF2A', '\xF29', '\x3', '\x2', '\x2', '\x2', '\xF2A', '\xF2B', '\x3', 
		'\x2', '\x2', '\x2', '\xF2B', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\xF2C', 
		'\xF2D', '\t', '\x37', '\x2', '\x2', '\xF2D', '\xF2E', '\x5', '\x32E', 
		'\x198', '\x2', '\xF2E', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\xF2F', 
		'\xF37', '\x5', '\x28C', '\x147', '\x2', '\xF30', '\xF37', '\x5', '\x298', 
		'\x14D', '\x2', '\xF31', '\xF37', '\x5', '\x1FE', '\x100', '\x2', '\xF32', 
		'\xF37', '\x5', '\x272', '\x13A', '\x2', '\xF33', '\xF37', '\x5', '\x278', 
		'\x13D', '\x2', '\xF34', '\xF37', '\x5', '\x27A', '\x13E', '\x2', '\xF35', 
		'\xF37', '\x5', '\x1FC', '\xFF', '\x2', '\xF36', '\xF2F', '\x3', '\x2', 
		'\x2', '\x2', '\xF36', '\xF30', '\x3', '\x2', '\x2', '\x2', '\xF36', '\xF31', 
		'\x3', '\x2', '\x2', '\x2', '\xF36', '\xF32', '\x3', '\x2', '\x2', '\x2', 
		'\xF36', '\xF33', '\x3', '\x2', '\x2', '\x2', '\xF36', '\xF34', '\x3', 
		'\x2', '\x2', '\x2', '\xF36', '\xF35', '\x3', '\x2', '\x2', '\x2', '\xF37', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\xF38', '\xF3D', '\x5', '\x1E6', 
		'\xF4', '\x2', '\xF39', '\xF3D', '\x5', '\x1E8', '\xF5', '\x2', '\xF3A', 
		'\xF3D', '\x5', '\x1EA', '\xF6', '\x2', '\xF3B', '\xF3D', '\x5', '\x1EC', 
		'\xF7', '\x2', '\xF3C', '\xF38', '\x3', '\x2', '\x2', '\x2', '\xF3C', 
		'\xF39', '\x3', '\x2', '\x2', '\x2', '\xF3C', '\xF3A', '\x3', '\x2', '\x2', 
		'\x2', '\xF3C', '\xF3B', '\x3', '\x2', '\x2', '\x2', '\xF3D', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\xF3E', '\xF3F', '\a', 'M', '\x2', '\x2', 
		'\xF3F', '\xF40', '\x5', '\x33C', '\x19F', '\x2', '\xF40', '\x1E7', '\x3', 
		'\x2', '\x2', '\x2', '\xF41', '\xF42', '\a', '\x179', '\x2', '\x2', '\xF42', 
		'\xF48', '\x5', '\x33C', '\x19F', '\x2', '\xF43', '\xF45', '\a', '\x2B3', 
		'\x2', '\x2', '\xF44', '\xF46', '\x5', '\x2B6', '\x15C', '\x2', '\xF45', 
		'\xF44', '\x3', '\x2', '\x2', '\x2', '\xF45', '\xF46', '\x3', '\x2', '\x2', 
		'\x2', '\xF46', '\xF47', '\x3', '\x2', '\x2', '\x2', '\xF47', '\xF49', 
		'\a', '\x2B4', '\x2', '\x2', '\xF48', '\xF43', '\x3', '\x2', '\x2', '\x2', 
		'\xF48', '\xF49', '\x3', '\x2', '\x2', '\x2', '\xF49', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\xF4A', '\xF4B', '\a', '\xC2', '\x2', '\x2', '\xF4B', 
		'\xF60', '\x5', '\x33C', '\x19F', '\x2', '\xF4C', '\xF51', '\a', '\x105', 
		'\x2', '\x2', '\xF4D', '\xF4F', '\a', '\x2B9', '\x2', '\x2', '\xF4E', 
		'\xF4D', '\x3', '\x2', '\x2', '\x2', '\xF4E', '\xF4F', '\x3', '\x2', '\x2', 
		'\x2', '\xF4F', '\xF50', '\x3', '\x2', '\x2', '\x2', '\xF50', '\xF52', 
		'\x5', '\x33A', '\x19E', '\x2', '\xF51', '\xF4E', '\x3', '\x2', '\x2', 
		'\x2', '\xF52', '\xF53', '\x3', '\x2', '\x2', '\x2', '\xF53', '\xF51', 
		'\x3', '\x2', '\x2', '\x2', '\xF53', '\xF54', '\x3', '\x2', '\x2', '\x2', 
		'\xF54', '\xF61', '\x3', '\x2', '\x2', '\x2', '\xF55', '\xF56', '\a', 
		'\x39', '\x2', '\x2', '\xF56', '\xF57', '\a', 'P', '\x2', '\x2', '\xF57', 
		'\xF5C', '\a', '\x105', '\x2', '\x2', '\xF58', '\xF5A', '\a', '\x2B9', 
		'\x2', '\x2', '\xF59', '\xF58', '\x3', '\x2', '\x2', '\x2', '\xF59', '\xF5A', 
		'\x3', '\x2', '\x2', '\x2', '\xF5A', '\xF5B', '\x3', '\x2', '\x2', '\x2', 
		'\xF5B', '\xF5D', '\x5', '\x33A', '\x19E', '\x2', '\xF5C', '\xF59', '\x3', 
		'\x2', '\x2', '\x2', '\xF5D', '\xF5E', '\x3', '\x2', '\x2', '\x2', '\xF5E', 
		'\xF5C', '\x3', '\x2', '\x2', '\x2', '\xF5E', '\xF5F', '\x3', '\x2', '\x2', 
		'\x2', '\xF5F', '\xF61', '\x3', '\x2', '\x2', '\x2', '\xF60', '\xF4C', 
		'\x3', '\x2', '\x2', '\x2', '\xF60', '\xF55', '\x3', '\x2', '\x2', '\x2', 
		'\xF61', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\xF62', '\xF63', '\a', 
		'\x179', '\x2', '\x2', '\xF63', '\xF64', '\x5', '\x33A', '\x19E', '\x2', 
		'\xF64', '\xF67', '\a', '\xD0', '\x2', '\x2', '\xF65', '\xF68', '\x5', 
		'\x1FE', '\x100', '\x2', '\xF66', '\xF68', '\x5', '\x2B8', '\x15D', '\x2', 
		'\xF67', '\xF65', '\x3', '\x2', '\x2', '\x2', '\xF67', '\xF66', '\x3', 
		'\x2', '\x2', '\x2', '\xF68', '\xF6A', '\x3', '\x2', '\x2', '\x2', '\xF69', 
		'\xF6B', '\x5', '\x300', '\x181', '\x2', '\xF6A', '\xF69', '\x3', '\x2', 
		'\x2', '\x2', '\xF6A', '\xF6B', '\x3', '\x2', '\x2', '\x2', '\xF6B', '\x1ED', 
		'\x3', '\x2', '\x2', '\x2', '\xF6C', '\xF72', '\x5', '\x1F0', '\xF9', 
		'\x2', '\xF6D', '\xF72', '\x5', '\x1F2', '\xFA', '\x2', '\xF6E', '\xF72', 
		'\x5', '\x1F4', '\xFB', '\x2', '\xF6F', '\xF72', '\x5', '\x1F8', '\xFD', 
		'\x2', '\xF70', '\xF72', '\x5', '\x1FA', '\xFE', '\x2', '\xF71', '\xF6C', 
		'\x3', '\x2', '\x2', '\x2', '\xF71', '\xF6D', '\x3', '\x2', '\x2', '\x2', 
		'\xF71', '\xF6E', '\x3', '\x2', '\x2', '\x2', '\xF71', '\xF6F', '\x3', 
		'\x2', '\x2', '\x2', '\xF71', '\xF70', '\x3', '\x2', '\x2', '\x2', '\xF72', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\xF73', '\xF74', '\a', '\x1F8', 
		'\x2', '\x2', '\xF74', '\xF82', '\a', '\x23A', '\x2', '\x2', '\xF75', 
		'\xF76', '\a', '\x1BA', '\x2', '\x2', '\xF76', '\xF83', '\t', '\x38', 
		'\x2', '\x2', '\xF77', '\xF78', '\a', '\x109', '\x2', '\x2', '\xF78', 
		'\xF7C', '\a', '\x116', '\x2', '\x2', '\xF79', '\xF7D', '\a', '\x1F3', 
		'\x2', '\x2', '\xF7A', '\xF7B', '\a', '\x1BA', '\x2', '\x2', '\xF7B', 
		'\xF7D', '\a', 'U', '\x2', '\x2', '\xF7C', '\xF79', '\x3', '\x2', '\x2', 
		'\x2', '\xF7C', '\xF7A', '\x3', '\x2', '\x2', '\x2', '\xF7D', '\xF83', 
		'\x3', '\x2', '\x2', '\x2', '\xF7E', '\xF7F', '\a', '\x255', '\x2', '\x2', 
		'\xF7F', '\xF80', '\a', '\x1DC', '\x2', '\x2', '\xF80', '\xF81', '\a', 
		'\x1EE', '\x2', '\x2', '\xF81', '\xF83', '\x5', '\x3A0', '\x1D1', '\x2', 
		'\xF82', '\xF75', '\x3', '\x2', '\x2', '\x2', '\xF82', '\xF77', '\x3', 
		'\x2', '\x2', '\x2', '\xF82', '\xF7E', '\x3', '\x2', '\x2', '\x2', '\xF82', 
		'\xF83', '\x3', '\x2', '\x2', '\x2', '\xF83', '\xF86', '\x3', '\x2', '\x2', 
		'\x2', '\xF84', '\xF85', '\a', '\x148', '\x2', '\x2', '\xF85', '\xF87', 
		'\x5', '\x3CA', '\x1E6', '\x2', '\xF86', '\xF84', '\x3', '\x2', '\x2', 
		'\x2', '\xF86', '\xF87', '\x3', '\x2', '\x2', '\x2', '\xF87', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\xF88', '\xF89', '\a', '\x1F8', '\x2', '\x2', 
		'\xF89', '\xF93', '\t', '\x39', '\x2', '\x2', '\xF8A', '\xF94', '\a', 
		'\xE', '\x2', '\x2', '\xF8B', '\xF8D', '\a', '\x2B9', '\x2', '\x2', '\xF8C', 
		'\xF8B', '\x3', '\x2', '\x2', '\x2', '\xF8C', '\xF8D', '\x3', '\x2', '\x2', 
		'\x2', '\xF8D', '\xF8E', '\x3', '\x2', '\x2', '\x2', '\xF8E', '\xF90', 
		'\x5', '\x338', '\x19D', '\x2', '\xF8F', '\xF8C', '\x3', '\x2', '\x2', 
		'\x2', '\xF90', '\xF91', '\x3', '\x2', '\x2', '\x2', '\xF91', '\xF8F', 
		'\x3', '\x2', '\x2', '\x2', '\xF91', '\xF92', '\x3', '\x2', '\x2', '\x2', 
		'\xF92', '\xF94', '\x3', '\x2', '\x2', '\x2', '\xF93', '\xF8A', '\x3', 
		'\x2', '\x2', '\x2', '\xF93', '\xF8F', '\x3', '\x2', '\x2', '\x2', '\xF94', 
		'\xF95', '\x3', '\x2', '\x2', '\x2', '\xF95', '\xF96', '\t', '\x1B', '\x2', 
		'\x2', '\xF96', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\xF97', '\xF99', 
		'\a', 'T', '\x2', '\x2', '\xF98', '\xF9A', '\a', '\x26C', '\x2', '\x2', 
		'\xF99', '\xF98', '\x3', '\x2', '\x2', '\x2', '\xF99', '\xF9A', '\x3', 
		'\x2', '\x2', '\x2', '\xF9A', '\xFA8', '\x3', '\x2', '\x2', '\x2', '\xF9B', 
		'\xF9C', '\a', 'S', '\x2', '\x2', '\xF9C', '\xFA9', '\x5', '\x2B8', '\x15D', 
		'\x2', '\xF9D', '\xFA6', '\a', '\xCE', '\x2', '\x2', '\xF9E', '\xF9F', 
		'\a', 'h', '\x2', '\x2', '\xF9F', '\xFA7', '\x5', '\x2B8', '\x15D', '\x2', 
		'\xFA0', '\xFA7', '\a', 'g', '\x2', '\x2', '\xFA1', '\xFA4', '\x5', '\x2B8', 
		'\x15D', '\x2', '\xFA2', '\xFA3', '\a', '\x2B9', '\x2', '\x2', '\xFA3', 
		'\xFA5', '\x5', '\x2B8', '\x15D', '\x2', '\xFA4', '\xFA2', '\x3', '\x2', 
		'\x2', '\x2', '\xFA4', '\xFA5', '\x3', '\x2', '\x2', '\x2', '\xFA5', '\xFA7', 
		'\x3', '\x2', '\x2', '\x2', '\xFA6', '\xF9E', '\x3', '\x2', '\x2', '\x2', 
		'\xFA6', '\xFA0', '\x3', '\x2', '\x2', '\x2', '\xFA6', '\xFA1', '\x3', 
		'\x2', '\x2', '\x2', '\xFA7', '\xFA9', '\x3', '\x2', '\x2', '\x2', '\xFA8', 
		'\xF9B', '\x3', '\x2', '\x2', '\x2', '\xFA8', '\xF9D', '\x3', '\x2', '\x2', 
		'\x2', '\xFA8', '\xFA9', '\x3', '\x2', '\x2', '\x2', '\xFA9', '\xFAB', 
		'\x3', '\x2', '\x2', '\x2', '\xFAA', '\xFAC', '\x5', '\x1F6', '\xFC', 
		'\x2', '\xFAB', '\xFAA', '\x3', '\x2', '\x2', '\x2', '\xFAB', '\xFAC', 
		'\x3', '\x2', '\x2', '\x2', '\xFAC', '\x1F5', '\x3', '\x2', '\x2', '\x2', 
		'\xFAD', '\xFAF', '\a', '\x26D', '\x2', '\x2', '\xFAE', '\xFB0', '\t', 
		':', '\x2', '\x2', '\xFAF', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xFAF', 
		'\xFB0', '\x3', '\x2', '\x2', '\x2', '\xFB0', '\xFB2', '\x3', '\x2', '\x2', 
		'\x2', '\xFB1', '\xFB3', '\t', ';', '\x2', '\x2', '\xFB2', '\xFB1', '\x3', 
		'\x2', '\x2', '\x2', '\xFB2', '\xFB3', '\x3', '\x2', '\x2', '\x2', '\xFB3', 
		'\x1F7', '\x3', '\x2', '\x2', '\x2', '\xFB4', '\xFB6', '\a', '\x1DC', 
		'\x2', '\x2', '\xFB5', '\xFB7', '\a', '\x26C', '\x2', '\x2', '\xFB6', 
		'\xFB5', '\x3', '\x2', '\x2', '\x2', '\xFB6', '\xFB7', '\x3', '\x2', '\x2', 
		'\x2', '\xFB7', '\xFBF', '\x3', '\x2', '\x2', '\x2', '\xFB8', '\xFBA', 
		'\a', '\x238', '\x2', '\x2', '\xFB9', '\xFBB', '\a', '\x1E4', '\x2', '\x2', 
		'\xFBA', '\xFB9', '\x3', '\x2', '\x2', '\x2', '\xFBA', '\xFBB', '\x3', 
		'\x2', '\x2', '\x2', '\xFBB', '\xFBC', '\x3', '\x2', '\x2', '\x2', '\xFBC', 
		'\xFC0', '\x5', '\x39E', '\x1D0', '\x2', '\xFBD', '\xFBE', '\a', '\xCE', 
		'\x2', '\x2', '\xFBE', '\xFC0', '\x5', '\x3CA', '\x1E6', '\x2', '\xFBF', 
		'\xFB8', '\x3', '\x2', '\x2', '\x2', '\xFBF', '\xFBD', '\x3', '\x2', '\x2', 
		'\x2', '\xFBF', '\xFC0', '\x3', '\x2', '\x2', '\x2', '\xFC0', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\xFC1', '\xFC2', '\a', '\x1E4', '\x2', '\x2', 
		'\xFC2', '\xFC3', '\x5', '\x39E', '\x1D0', '\x2', '\xFC3', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\xFC4', '\xFC5', '\a', '\xBB', '\x2', '\x2', '\xFC5', 
		'\xFCA', '\a', '\x19F', '\x2', '\x2', '\xFC6', '\xFC7', '\a', '\x1F8', 
		'\x2', '\x2', '\xFC7', '\xFC8', '\a', '\x212', '\x2', '\x2', '\xFC8', 
		'\xFC9', '\a', '\x2C7', '\x2', '\x2', '\xFC9', '\xFCB', '\x5', '\x3CA', 
		'\x1E6', '\x2', '\xFCA', '\xFC6', '\x3', '\x2', '\x2', '\x2', '\xFCA', 
		'\xFCB', '\x3', '\x2', '\x2', '\x2', '\xFCB', '\xFCE', '\x3', '\x2', '\x2', 
		'\x2', '\xFCC', '\xFCD', '\a', '\x105', '\x2', '\x2', '\xFCD', '\xFCF', 
		'\x5', '\x342', '\x1A2', '\x2', '\xFCE', '\xFCC', '\x3', '\x2', '\x2', 
		'\x2', '\xFCE', '\xFCF', '\x3', '\x2', '\x2', '\x2', '\xFCF', '\xFD0', 
		'\x3', '\x2', '\x2', '\x2', '\xFD0', '\xFD6', '\a', '\xD0', '\x2', '\x2', 
		'\xFD1', '\xFD7', '\x5', '\x1FE', '\x100', '\x2', '\xFD2', '\xFD7', '\x5', 
		'\x272', '\x13A', '\x2', '\xFD3', '\xFD7', '\x5', '\x278', '\x13D', '\x2', 
		'\xFD4', '\xFD7', '\x5', '\x27A', '\x13E', '\x2', '\xFD5', '\xFD7', '\x5', 
		'\x28C', '\x147', '\x2', '\xFD6', '\xFD1', '\x3', '\x2', '\x2', '\x2', 
		'\xFD6', '\xFD2', '\x3', '\x2', '\x2', '\x2', '\xFD6', '\xFD3', '\x3', 
		'\x2', '\x2', '\x2', '\xFD6', '\xFD4', '\x3', '\x2', '\x2', '\x2', '\xFD6', 
		'\xFD5', '\x3', '\x2', '\x2', '\x2', '\xFD7', '\x1FD', '\x3', '\x2', '\x2', 
		'\x2', '\xFD8', '\xFDA', '\x5', '\x200', '\x101', '\x2', '\xFD9', '\xFD8', 
		'\x3', '\x2', '\x2', '\x2', '\xFD9', '\xFDA', '\x3', '\x2', '\x2', '\x2', 
		'\xFDA', '\xFDB', '\x3', '\x2', '\x2', '\x2', '\xFDB', '\xFE0', '\x5', 
		'\x148', '\xA5', '\x2', '\xFDC', '\xFDF', '\x5', '\x26C', '\x137', '\x2', 
		'\xFDD', '\xFDF', '\x5', '\x268', '\x135', '\x2', '\xFDE', '\xFDC', '\x3', 
		'\x2', '\x2', '\x2', '\xFDE', '\xFDD', '\x3', '\x2', '\x2', '\x2', '\xFDF', 
		'\xFE2', '\x3', '\x2', '\x2', '\x2', '\xFE0', '\xFDE', '\x3', '\x2', '\x2', 
		'\x2', '\xFE0', '\xFE1', '\x3', '\x2', '\x2', '\x2', '\xFE1', '\x1FF', 
		'\x3', '\x2', '\x2', '\x2', '\xFE2', '\xFE0', '\x3', '\x2', '\x2', '\x2', 
		'\xFE3', '\xFE8', '\a', '\x26B', '\x2', '\x2', '\xFE4', '\xFE6', '\a', 
		'\x2B9', '\x2', '\x2', '\xFE5', '\xFE4', '\x3', '\x2', '\x2', '\x2', '\xFE5', 
		'\xFE6', '\x3', '\x2', '\x2', '\x2', '\xFE6', '\xFE7', '\x3', '\x2', '\x2', 
		'\x2', '\xFE7', '\xFE9', '\x5', '\x202', '\x102', '\x2', '\xFE8', '\xFE5', 
		'\x3', '\x2', '\x2', '\x2', '\xFE9', '\xFEA', '\x3', '\x2', '\x2', '\x2', 
		'\xFEA', '\xFE8', '\x3', '\x2', '\x2', '\x2', '\xFEA', '\xFEB', '\x3', 
		'\x2', '\x2', '\x2', '\xFEB', '\x201', '\x3', '\x2', '\x2', '\x2', '\xFEC', 
		'\xFEE', '\x5', '\x3A8', '\x1D5', '\x2', '\xFED', '\xFEF', '\x5', '\x36A', 
		'\x1B6', '\x2', '\xFEE', '\xFED', '\x3', '\x2', '\x2', '\x2', '\xFEE', 
		'\xFEF', '\x3', '\x2', '\x2', '\x2', '\xFEF', '\xFF0', '\x3', '\x2', '\x2', 
		'\x2', '\xFF0', '\xFF1', '\a', '\x15', '\x2', '\x2', '\xFF1', '\xFF2', 
		'\a', '\x2B3', '\x2', '\x2', '\xFF2', '\xFF4', '\x5', '\x148', '\xA5', 
		'\x2', '\xFF3', '\xFF5', '\x5', '\x268', '\x135', '\x2', '\xFF4', '\xFF3', 
		'\x3', '\x2', '\x2', '\x2', '\xFF4', '\xFF5', '\x3', '\x2', '\x2', '\x2', 
		'\xFF5', '\xFF6', '\x3', '\x2', '\x2', '\x2', '\xFF6', '\xFF8', '\a', 
		'\x2B4', '\x2', '\x2', '\xFF7', '\xFF9', '\x5', '\x204', '\x103', '\x2', 
		'\xFF8', '\xFF7', '\x3', '\x2', '\x2', '\x2', '\xFF8', '\xFF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFF9', '\xFFB', '\x3', '\x2', '\x2', '\x2', '\xFFA', 
		'\xFFC', '\x5', '\x206', '\x104', '\x2', '\xFFB', '\xFFA', '\x3', '\x2', 
		'\x2', '\x2', '\xFFB', '\xFFC', '\x3', '\x2', '\x2', '\x2', '\xFFC', '\x203', 
		'\x3', '\x2', '\x2', '\x2', '\xFFD', '\xFFE', '\a', '\x1EA', '\x2', '\x2', 
		'\xFFE', '\xFFF', '\t', '<', '\x2', '\x2', '\xFFF', '\x1000', '\a', '\xC5', 
		'\x2', '\x2', '\x1000', '\x1001', '\a', ':', '\x2', '\x2', '\x1001', '\x1003', 
		'\x5', '\x3B0', '\x1D9', '\x2', '\x1002', '\x1004', '\a', '\x16', '\x2', 
		'\x2', '\x1003', '\x1002', '\x3', '\x2', '\x2', '\x2', '\x1003', '\x1004', 
		'\x3', '\x2', '\x2', '\x2', '\x1004', '\x1006', '\x3', '\x2', '\x2', '\x2', 
		'\x1005', '\x1007', '\a', '\x8C', '\x2', '\x2', '\x1006', '\x1005', '\x3', 
		'\x2', '\x2', '\x2', '\x1006', '\x1007', '\x3', '\x2', '\x2', '\x2', '\x1007', 
		'\x100A', '\x3', '\x2', '\x2', '\x2', '\x1008', '\x1009', '\a', '\x16B', 
		'\x2', '\x2', '\x1009', '\x100B', '\a', '\xC5', '\x2', '\x2', '\x100A', 
		'\x1008', '\x3', '\x2', '\x2', '\x2', '\x100A', '\x100B', '\x3', '\x2', 
		'\x2', '\x2', '\x100B', '\x100E', '\x3', '\x2', '\x2', '\x2', '\x100C', 
		'\x100D', '\a', '\x16B', '\x2', '\x2', '\x100D', '\x100F', '\a', '\x111', 
		'\x2', '\x2', '\x100E', '\x100C', '\x3', '\x2', '\x2', '\x2', '\x100E', 
		'\x100F', '\x3', '\x2', '\x2', '\x2', '\x100F', '\x1022', '\x3', '\x2', 
		'\x2', '\x2', '\x1010', '\x1011', '\a', '\x2B9', '\x2', '\x2', '\x1011', 
		'\x1013', '\x5', '\x3B0', '\x1D9', '\x2', '\x1012', '\x1014', '\a', '\x16', 
		'\x2', '\x2', '\x1013', '\x1012', '\x3', '\x2', '\x2', '\x2', '\x1013', 
		'\x1014', '\x3', '\x2', '\x2', '\x2', '\x1014', '\x1016', '\x3', '\x2', 
		'\x2', '\x2', '\x1015', '\x1017', '\a', '\x8C', '\x2', '\x2', '\x1016', 
		'\x1015', '\x3', '\x2', '\x2', '\x2', '\x1016', '\x1017', '\x3', '\x2', 
		'\x2', '\x2', '\x1017', '\x101A', '\x3', '\x2', '\x2', '\x2', '\x1018', 
		'\x1019', '\a', '\x16B', '\x2', '\x2', '\x1019', '\x101B', '\a', '\xC5', 
		'\x2', '\x2', '\x101A', '\x1018', '\x3', '\x2', '\x2', '\x2', '\x101A', 
		'\x101B', '\x3', '\x2', '\x2', '\x2', '\x101B', '\x101E', '\x3', '\x2', 
		'\x2', '\x2', '\x101C', '\x101D', '\a', '\x16B', '\x2', '\x2', '\x101D', 
		'\x101F', '\a', '\x111', '\x2', '\x2', '\x101E', '\x101C', '\x3', '\x2', 
		'\x2', '\x2', '\x101E', '\x101F', '\x3', '\x2', '\x2', '\x2', '\x101F', 
		'\x1021', '\x3', '\x2', '\x2', '\x2', '\x1020', '\x1010', '\x3', '\x2', 
		'\x2', '\x2', '\x1021', '\x1024', '\x3', '\x2', '\x2', '\x2', '\x1022', 
		'\x1020', '\x3', '\x2', '\x2', '\x2', '\x1022', '\x1023', '\x3', '\x2', 
		'\x2', '\x2', '\x1023', '\x1025', '\x3', '\x2', '\x2', '\x2', '\x1024', 
		'\x1022', '\x3', '\x2', '\x2', '\x2', '\x1025', '\x1026', '\a', '\x1F8', 
		'\x2', '\x2', '\x1026', '\x1027', '\x5', '\x3B0', '\x1D9', '\x2', '\x1027', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x1028', '\x1029', '\a', 't', '\x2', 
		'\x2', '\x1029', '\x102A', '\x5', '\x368', '\x1B5', '\x2', '\x102A', '\x102B', 
		'\a', '\x1F8', '\x2', '\x2', '\x102B', '\x102C', '\x5', '\x3B0', '\x1D9', 
		'\x2', '\x102C', '\x102D', '\a', '\x238', '\x2', '\x2', '\x102D', '\x102E', 
		'\x5', '\x2B8', '\x15D', '\x2', '\x102E', '\x102F', '\a', '\x84', '\x2', 
		'\x2', '\x102F', '\x1030', '\x5', '\x2B8', '\x15D', '\x2', '\x1030', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x1031', '\x1037', '\x5', '\x20C', '\x107', 
		'\x2', '\x1032', '\x1033', '\a', '\x2B3', '\x2', '\x2', '\x1033', '\x1034', 
		'\x5', '\x148', '\xA5', '\x2', '\x1034', '\x1035', '\a', '\x2B4', '\x2', 
		'\x2', '\x1035', '\x1037', '\x3', '\x2', '\x2', '\x2', '\x1036', '\x1031', 
		'\x3', '\x2', '\x2', '\x2', '\x1036', '\x1032', '\x3', '\x2', '\x2', '\x2', 
		'\x1037', '\x209', '\x3', '\x2', '\x2', '\x2', '\x1038', '\x103A', '\a', 
		'\x247', '\x2', '\x2', '\x1039', '\x103B', '\a', '\xE', '\x2', '\x2', 
		'\x103A', '\x1039', '\x3', '\x2', '\x2', '\x2', '\x103A', '\x103B', '\x3', 
		'\x2', '\x2', '\x2', '\x103B', '\x103F', '\x3', '\x2', '\x2', '\x2', '\x103C', 
		'\x103F', '\a', '\x102', '\x2', '\x2', '\x103D', '\x103F', '\a', '\x13E', 
		'\x2', '\x2', '\x103E', '\x1038', '\x3', '\x2', '\x2', '\x2', '\x103E', 
		'\x103C', '\x3', '\x2', '\x2', '\x2', '\x103E', '\x103D', '\x3', '\x2', 
		'\x2', '\x2', '\x103F', '\x1040', '\x3', '\x2', '\x2', '\x2', '\x1040', 
		'\x1041', '\x5', '\x208', '\x105', '\x2', '\x1041', '\x20B', '\x3', '\x2', 
		'\x2', '\x2', '\x1042', '\x1044', '\a', '\x1EF', '\x2', '\x2', '\x1043', 
		'\x1045', '\t', '=', '\x2', '\x2', '\x1044', '\x1043', '\x3', '\x2', '\x2', 
		'\x2', '\x1044', '\x1045', '\x3', '\x2', '\x2', '\x2', '\x1045', '\x104F', 
		'\x3', '\x2', '\x2', '\x2', '\x1046', '\x1050', '\a', '\x2B6', '\x2', 
		'\x2', '\x1047', '\x1049', '\a', '\x2B9', '\x2', '\x2', '\x1048', '\x1047', 
		'\x3', '\x2', '\x2', '\x2', '\x1048', '\x1049', '\x3', '\x2', '\x2', '\x2', 
		'\x1049', '\x104A', '\x3', '\x2', '\x2', '\x2', '\x104A', '\x104C', '\x5', 
		'\x20E', '\x108', '\x2', '\x104B', '\x1048', '\x3', '\x2', '\x2', '\x2', 
		'\x104C', '\x104D', '\x3', '\x2', '\x2', '\x2', '\x104D', '\x104B', '\x3', 
		'\x2', '\x2', '\x2', '\x104D', '\x104E', '\x3', '\x2', '\x2', '\x2', '\x104E', 
		'\x1050', '\x3', '\x2', '\x2', '\x2', '\x104F', '\x1046', '\x3', '\x2', 
		'\x2', '\x2', '\x104F', '\x104B', '\x3', '\x2', '\x2', '\x2', '\x1050', 
		'\x1052', '\x3', '\x2', '\x2', '\x2', '\x1051', '\x1053', '\x5', '\x32E', 
		'\x198', '\x2', '\x1052', '\x1051', '\x3', '\x2', '\x2', '\x2', '\x1052', 
		'\x1053', '\x3', '\x2', '\x2', '\x2', '\x1053', '\x1054', '\x3', '\x2', 
		'\x2', '\x2', '\x1054', '\x1056', '\x5', '\x210', '\x109', '\x2', '\x1055', 
		'\x1057', '\x5', '\x32C', '\x197', '\x2', '\x1056', '\x1055', '\x3', '\x2', 
		'\x2', '\x2', '\x1056', '\x1057', '\x3', '\x2', '\x2', '\x2', '\x1057', 
		'\x1059', '\x3', '\x2', '\x2', '\x2', '\x1058', '\x105A', '\x5', '\x23A', 
		'\x11E', '\x2', '\x1059', '\x1058', '\x3', '\x2', '\x2', '\x2', '\x1059', 
		'\x105A', '\x3', '\x2', '\x2', '\x2', '\x105A', '\x105C', '\x3', '\x2', 
		'\x2', '\x2', '\x105B', '\x105D', '\x5', '\x23E', '\x120', '\x2', '\x105C', 
		'\x105B', '\x3', '\x2', '\x2', '\x2', '\x105C', '\x105D', '\x3', '\x2', 
		'\x2', '\x2', '\x105D', '\x105F', '\x3', '\x2', '\x2', '\x2', '\x105E', 
		'\x1060', '\x5', '\x24A', '\x126', '\x2', '\x105F', '\x105E', '\x3', '\x2', 
		'\x2', '\x2', '\x105F', '\x1060', '\x3', '\x2', '\x2', '\x2', '\x1060', 
		'\x20D', '\x3', '\x2', '\x2', '\x2', '\x1061', '\x1063', '\x5', '\x212', 
		'\x10A', '\x2', '\x1062', '\x1064', '\x5', '\x328', '\x195', '\x2', '\x1063', 
		'\x1062', '\x3', '\x2', '\x2', '\x2', '\x1063', '\x1064', '\x3', '\x2', 
		'\x2', '\x2', '\x1064', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x1065', 
		'\x1066', '\a', '\xD3', '\x2', '\x2', '\x1066', '\x1067', '\x5', '\x214', 
		'\x10B', '\x2', '\x1067', '\x211', '\x3', '\x2', '\x2', '\x2', '\x1068', 
		'\x1069', '\x5', '\x342', '\x1A2', '\x2', '\x1069', '\x106A', '\a', '\x2AC', 
		'\x2', '\x2', '\x106A', '\x106B', '\a', '\x2B6', '\x2', '\x2', '\x106B', 
		'\x1073', '\x3', '\x2', '\x2', '\x2', '\x106C', '\x106D', '\x5', '\x3BE', 
		'\x1E0', '\x2', '\x106D', '\x106E', '\a', '\x2AC', '\x2', '\x2', '\x106E', 
		'\x1070', '\x3', '\x2', '\x2', '\x2', '\x106F', '\x106C', '\x3', '\x2', 
		'\x2', '\x2', '\x106F', '\x1070', '\x3', '\x2', '\x2', '\x2', '\x1070', 
		'\x1071', '\x3', '\x2', '\x2', '\x2', '\x1071', '\x1073', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x1072', '\x1068', '\x3', '\x2', '\x2', '\x2', '\x1072', 
		'\x106F', '\x3', '\x2', '\x2', '\x2', '\x1073', '\x213', '\x3', '\x2', 
		'\x2', '\x2', '\x1074', '\x1076', '\a', '\x2B9', '\x2', '\x2', '\x1075', 
		'\x1074', '\x3', '\x2', '\x2', '\x2', '\x1075', '\x1076', '\x3', '\x2', 
		'\x2', '\x2', '\x1076', '\x1077', '\x3', '\x2', '\x2', '\x2', '\x1077', 
		'\x1079', '\x5', '\x216', '\x10C', '\x2', '\x1078', '\x1075', '\x3', '\x2', 
		'\x2', '\x2', '\x1079', '\x107A', '\x3', '\x2', '\x2', '\x2', '\x107A', 
		'\x1078', '\x3', '\x2', '\x2', '\x2', '\x107A', '\x107B', '\x3', '\x2', 
		'\x2', '\x2', '\x107B', '\x215', '\x3', '\x2', '\x2', '\x2', '\x107C', 
		'\x1080', '\x5', '\x218', '\x10D', '\x2', '\x107D', '\x107F', '\x5', '\x21C', 
		'\x10F', '\x2', '\x107E', '\x107D', '\x3', '\x2', '\x2', '\x2', '\x107F', 
		'\x1082', '\x3', '\x2', '\x2', '\x2', '\x1080', '\x107E', '\x3', '\x2', 
		'\x2', '\x2', '\x1080', '\x1081', '\x3', '\x2', '\x2', '\x2', '\x1081', 
		'\x1085', '\x3', '\x2', '\x2', '\x2', '\x1082', '\x1080', '\x3', '\x2', 
		'\x2', '\x2', '\x1083', '\x1086', '\x5', '\x228', '\x115', '\x2', '\x1084', 
		'\x1086', '\x5', '\x234', '\x11B', '\x2', '\x1085', '\x1083', '\x3', '\x2', 
		'\x2', '\x2', '\x1085', '\x1084', '\x3', '\x2', '\x2', '\x2', '\x1085', 
		'\x1086', '\x3', '\x2', '\x2', '\x2', '\x1086', '\x217', '\x3', '\x2', 
		'\x2', '\x2', '\x1087', '\x108B', '\x5', '\x21A', '\x10E', '\x2', '\x1088', 
		'\x108A', '\x5', '\x226', '\x114', '\x2', '\x1089', '\x1088', '\x3', '\x2', 
		'\x2', '\x2', '\x108A', '\x108D', '\x3', '\x2', '\x2', '\x2', '\x108B', 
		'\x1089', '\x3', '\x2', '\x2', '\x2', '\x108B', '\x108C', '\x3', '\x2', 
		'\x2', '\x2', '\x108C', '\x108F', '\x3', '\x2', '\x2', '\x2', '\x108D', 
		'\x108B', '\x3', '\x2', '\x2', '\x2', '\x108E', '\x1090', '\x5', '\x32A', 
		'\x196', '\x2', '\x108F', '\x108E', '\x3', '\x2', '\x2', '\x2', '\x108F', 
		'\x1090', '\x3', '\x2', '\x2', '\x2', '\x1090', '\x219', '\x3', '\x2', 
		'\x2', '\x2', '\x1091', '\x1094', '\x5', '\x2AA', '\x156', '\x2', '\x1092', 
		'\x1095', '\x5', '\x228', '\x115', '\x2', '\x1093', '\x1095', '\x5', '\x234', 
		'\x11B', '\x2', '\x1094', '\x1092', '\x3', '\x2', '\x2', '\x2', '\x1094', 
		'\x1093', '\x3', '\x2', '\x2', '\x2', '\x1094', '\x1095', '\x3', '\x2', 
		'\x2', '\x2', '\x1095', '\x10A9', '\x3', '\x2', '\x2', '\x2', '\x1096', 
		'\x1097', '\a', '\x2B3', '\x2', '\x2', '\x1097', '\x109B', '\x5', '\x216', 
		'\x10C', '\x2', '\x1098', '\x109A', '\x5', '\x20A', '\x106', '\x2', '\x1099', 
		'\x1098', '\x3', '\x2', '\x2', '\x2', '\x109A', '\x109D', '\x3', '\x2', 
		'\x2', '\x2', '\x109B', '\x1099', '\x3', '\x2', '\x2', '\x2', '\x109B', 
		'\x109C', '\x3', '\x2', '\x2', '\x2', '\x109C', '\x109E', '\x3', '\x2', 
		'\x2', '\x2', '\x109D', '\x109B', '\x3', '\x2', '\x2', '\x2', '\x109E', 
		'\x10A1', '\a', '\x2B4', '\x2', '\x2', '\x109F', '\x10A2', '\x5', '\x228', 
		'\x115', '\x2', '\x10A0', '\x10A2', '\x5', '\x234', '\x11B', '\x2', '\x10A1', 
		'\x109F', '\x3', '\x2', '\x2', '\x2', '\x10A1', '\x10A0', '\x3', '\x2', 
		'\x2', '\x2', '\x10A1', '\x10A2', '\x3', '\x2', '\x2', '\x2', '\x10A2', 
		'\x10A9', '\x3', '\x2', '\x2', '\x2', '\x10A3', '\x10A4', '\a', '\x177', 
		'\x2', '\x2', '\x10A4', '\x10A5', '\a', '\x2B3', '\x2', '\x2', '\x10A5', 
		'\x10A6', '\x5', '\x2AA', '\x156', '\x2', '\x10A6', '\x10A7', '\a', '\x2B4', 
		'\x2', '\x2', '\x10A7', '\x10A9', '\x3', '\x2', '\x2', '\x2', '\x10A8', 
		'\x1091', '\x3', '\x2', '\x2', '\x2', '\x10A8', '\x1096', '\x3', '\x2', 
		'\x2', '\x2', '\x10A8', '\x10A3', '\x3', '\x2', '\x2', '\x2', '\x10A9', 
		'\x21B', '\x3', '\x2', '\x2', '\x2', '\x10AA', '\x10AC', '\x5', '\x224', 
		'\x113', '\x2', '\x10AB', '\x10AA', '\x3', '\x2', '\x2', '\x2', '\x10AB', 
		'\x10AC', '\x3', '\x2', '\x2', '\x2', '\x10AC', '\x10AE', '\x3', '\x2', 
		'\x2', '\x2', '\x10AD', '\x10AF', '\t', '>', '\x2', '\x2', '\x10AE', '\x10AD', 
		'\x3', '\x2', '\x2', '\x2', '\x10AE', '\x10AF', '\x3', '\x2', '\x2', '\x2', 
		'\x10AF', '\x10B2', '\x3', '\x2', '\x2', '\x2', '\x10B0', '\x10B3', '\a', 
		'\xFC', '\x2', '\x2', '\x10B1', '\x10B3', '\x5', '\x222', '\x112', '\x2', 
		'\x10B2', '\x10B0', '\x3', '\x2', '\x2', '\x2', '\x10B2', '\x10B1', '\x3', 
		'\x2', '\x2', '\x2', '\x10B2', '\x10B3', '\x3', '\x2', '\x2', '\x2', '\x10B3', 
		'\x10B4', '\x3', '\x2', '\x2', '\x2', '\x10B4', '\x10B5', '\a', '\x10D', 
		'\x2', '\x2', '\x10B5', '\x10B7', '\x5', '\x218', '\x10D', '\x2', '\x10B6', 
		'\x10B8', '\x5', '\x224', '\x113', '\x2', '\x10B7', '\x10B6', '\x3', '\x2', 
		'\x2', '\x2', '\x10B7', '\x10B8', '\x3', '\x2', '\x2', '\x2', '\x10B8', 
		'\x10BD', '\x3', '\x2', '\x2', '\x2', '\x10B9', '\x10BC', '\x5', '\x21E', 
		'\x110', '\x2', '\x10BA', '\x10BC', '\x5', '\x220', '\x111', '\x2', '\x10BB', 
		'\x10B9', '\x3', '\x2', '\x2', '\x2', '\x10BB', '\x10BA', '\x3', '\x2', 
		'\x2', '\x2', '\x10BC', '\x10BF', '\x3', '\x2', '\x2', '\x2', '\x10BD', 
		'\x10BB', '\x3', '\x2', '\x2', '\x2', '\x10BD', '\x10BE', '\x3', '\x2', 
		'\x2', '\x2', '\x10BE', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x10BF', 
		'\x10BD', '\x3', '\x2', '\x2', '\x2', '\x10C0', '\x10C1', '\a', '\x178', 
		'\x2', '\x2', '\x10C1', '\x10C2', '\x5', '\x2B4', '\x15B', '\x2', '\x10C2', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x10C3', '\x10C4', '\a', '\x256', 
		'\x2', '\x2', '\x10C4', '\x10C5', '\x5', '\x36A', '\x1B6', '\x2', '\x10C5', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x10C6', '\x10C8', '\t', '?', '\x2', 
		'\x2', '\x10C7', '\x10C9', '\a', '\x182', '\x2', '\x2', '\x10C8', '\x10C7', 
		'\x3', '\x2', '\x2', '\x2', '\x10C8', '\x10C9', '\x3', '\x2', '\x2', '\x2', 
		'\x10C9', '\x223', '\x3', '\x2', '\x2', '\x2', '\x10CA', '\x10CB', '\a', 
		'\x18E', '\x2', '\x2', '\x10CB', '\x10D3', '\a', ':', '\x2', '\x2', '\x10CC', 
		'\x10CF', '\a', '\x2B3', '\x2', '\x2', '\x10CD', '\x10D0', '\x5', '\x148', 
		'\xA5', '\x2', '\x10CE', '\x10D0', '\x5', '\x2B6', '\x15C', '\x2', '\x10CF', 
		'\x10CD', '\x3', '\x2', '\x2', '\x2', '\x10CF', '\x10CE', '\x3', '\x2', 
		'\x2', '\x2', '\x10CF', '\x10D0', '\x3', '\x2', '\x2', '\x2', '\x10D0', 
		'\x10D1', '\x3', '\x2', '\x2', '\x2', '\x10D1', '\x10D4', '\a', '\x2B4', 
		'\x2', '\x2', '\x10D2', '\x10D4', '\x5', '\x2B6', '\x15C', '\x2', '\x10D3', 
		'\x10CC', '\x3', '\x2', '\x2', '\x2', '\x10D3', '\x10D2', '\x3', '\x2', 
		'\x2', '\x2', '\x10D4', '\x225', '\x3', '\x2', '\x2', '\x2', '\x10D5', 
		'\x10D6', '\a', '\x25F', '\x2', '\x2', '\x10D6', '\x10D7', '\a', '*', 
		'\x2', '\x2', '\x10D7', '\x10D8', '\t', '@', '\x2', '\x2', '\x10D8', '\x10DE', 
		'\x5', '\x2B8', '\x15D', '\x2', '\x10D9', '\x10DA', '\a', '\x15', '\x2', 
		'\x2', '\x10DA', '\x10DB', '\a', '\x172', '\x2', '\x2', '\x10DB', '\x10DC', 
		'\t', '\x41', '\x2', '\x2', '\x10DC', '\x10DE', '\x5', '\x2B8', '\x15D', 
		'\x2', '\x10DD', '\x10D5', '\x3', '\x2', '\x2', '\x2', '\x10DD', '\x10D9', 
		'\x3', '\x2', '\x2', '\x2', '\x10DE', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'\x10DF', '\x10E1', '\a', '\x19E', '\x2', '\x2', '\x10E0', '\x10E2', '\a', 
		'\x27C', '\x2', '\x2', '\x10E1', '\x10E0', '\x3', '\x2', '\x2', '\x2', 
		'\x10E1', '\x10E2', '\x3', '\x2', '\x2', '\x2', '\x10E2', '\x10E3', '\x3', 
		'\x2', '\x2', '\x2', '\x10E3', '\x10E8', '\a', '\x2B3', '\x2', '\x2', 
		'\x10E4', '\x10E6', '\a', '\x2B9', '\x2', '\x2', '\x10E5', '\x10E4', '\x3', 
		'\x2', '\x2', '\x2', '\x10E5', '\x10E6', '\x3', '\x2', '\x2', '\x2', '\x10E6', 
		'\x10E7', '\x3', '\x2', '\x2', '\x2', '\x10E7', '\x10E9', '\x5', '\x22A', 
		'\x116', '\x2', '\x10E8', '\x10E5', '\x3', '\x2', '\x2', '\x2', '\x10E9', 
		'\x10EA', '\x3', '\x2', '\x2', '\x2', '\x10EA', '\x10E8', '\x3', '\x2', 
		'\x2', '\x2', '\x10EA', '\x10EB', '\x3', '\x2', '\x2', '\x2', '\x10EB', 
		'\x10EC', '\x3', '\x2', '\x2', '\x2', '\x10EC', '\x10ED', '\x5', '\x22C', 
		'\x117', '\x2', '\x10ED', '\x10EE', '\x5', '\x22E', '\x118', '\x2', '\x10EE', 
		'\x10EF', '\a', '\x2B4', '\x2', '\x2', '\x10EF', '\x229', '\x3', '\x2', 
		'\x2', '\x2', '\x10F0', '\x10F1', '\x5', '\x3AC', '\x1D7', '\x2', '\x10F1', 
		'\x10F2', '\a', '\x2B3', '\x2', '\x2', '\x10F2', '\x10F3', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x10F3', '\x10F5', '\a', '\x2B4', '\x2', '\x2', '\x10F4', 
		'\x10F6', '\x5', '\x328', '\x195', '\x2', '\x10F5', '\x10F4', '\x3', '\x2', 
		'\x2', '\x2', '\x10F5', '\x10F6', '\x3', '\x2', '\x2', '\x2', '\x10F6', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x10F7', '\x10FA', '\a', '\xD0', 
		'\x2', '\x2', '\x10F8', '\x10FB', '\x5', '\x3B0', '\x1D9', '\x2', '\x10F9', 
		'\x10FB', '\x5', '\x36A', '\x1B6', '\x2', '\x10FA', '\x10F8', '\x3', '\x2', 
		'\x2', '\x2', '\x10FA', '\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10FB', 
		'\x22D', '\x3', '\x2', '\x2', '\x2', '\x10FC', '\x10FD', '\a', '\xF6', 
		'\x2', '\x2', '\x10FD', '\x110F', '\a', '\x2B3', '\x2', '\x2', '\x10FE', 
		'\x1110', '\x5', '\x148', '\xA5', '\x2', '\x10FF', '\x1101', '\a', '\x2B9', 
		'\x2', '\x2', '\x1100', '\x10FF', '\x3', '\x2', '\x2', '\x2', '\x1100', 
		'\x1101', '\x3', '\x2', '\x2', '\x2', '\x1101', '\x1102', '\x3', '\x2', 
		'\x2', '\x2', '\x1102', '\x1104', '\a', '\x12', '\x2', '\x2', '\x1103', 
		'\x1100', '\x3', '\x2', '\x2', '\x2', '\x1104', '\x1105', '\x3', '\x2', 
		'\x2', '\x2', '\x1105', '\x1103', '\x3', '\x2', '\x2', '\x2', '\x1105', 
		'\x1106', '\x3', '\x2', '\x2', '\x2', '\x1106', '\x1110', '\x3', '\x2', 
		'\x2', '\x2', '\x1107', '\x1109', '\a', '\x2B9', '\x2', '\x2', '\x1108', 
		'\x1107', '\x3', '\x2', '\x2', '\x2', '\x1108', '\x1109', '\x3', '\x2', 
		'\x2', '\x2', '\x1109', '\x110A', '\x3', '\x2', '\x2', '\x2', '\x110A', 
		'\x110C', '\x5', '\x230', '\x119', '\x2', '\x110B', '\x1108', '\x3', '\x2', 
		'\x2', '\x2', '\x110C', '\x110D', '\x3', '\x2', '\x2', '\x2', '\x110D', 
		'\x110B', '\x3', '\x2', '\x2', '\x2', '\x110D', '\x110E', '\x3', '\x2', 
		'\x2', '\x2', '\x110E', '\x1110', '\x3', '\x2', '\x2', '\x2', '\x110F', 
		'\x10FE', '\x3', '\x2', '\x2', '\x2', '\x110F', '\x1103', '\x3', '\x2', 
		'\x2', '\x2', '\x110F', '\x110B', '\x3', '\x2', '\x2', '\x2', '\x1110', 
		'\x1111', '\x3', '\x2', '\x2', '\x2', '\x1111', '\x1112', '\a', '\x2B4', 
		'\x2', '\x2', '\x1112', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x1113', 
		'\x1115', '\x5', '\x232', '\x11A', '\x2', '\x1114', '\x1116', '\x5', '\x328', 
		'\x195', '\x2', '\x1115', '\x1114', '\x3', '\x2', '\x2', '\x2', '\x1115', 
		'\x1116', '\x3', '\x2', '\x2', '\x2', '\x1116', '\x231', '\x3', '\x2', 
		'\x2', '\x2', '\x1117', '\x111E', '\x5', '\x2B8', '\x15D', '\x2', '\x1118', 
		'\x111A', '\a', '\x2B3', '\x2', '\x2', '\x1119', '\x111B', '\x5', '\x2B6', 
		'\x15C', '\x2', '\x111A', '\x1119', '\x3', '\x2', '\x2', '\x2', '\x111A', 
		'\x111B', '\x3', '\x2', '\x2', '\x2', '\x111B', '\x111C', '\x3', '\x2', 
		'\x2', '\x2', '\x111C', '\x111E', '\a', '\x2B4', '\x2', '\x2', '\x111D', 
		'\x1117', '\x3', '\x2', '\x2', '\x2', '\x111D', '\x1118', '\x3', '\x2', 
		'\x2', '\x2', '\x111E', '\x233', '\x3', '\x2', '\x2', '\x2', '\x111F', 
		'\x1122', '\a', '\x24B', '\x2', '\x2', '\x1120', '\x1121', '\t', '\x42', 
		'\x2', '\x2', '\x1121', '\x1123', '\a', '\x16B', '\x2', '\x2', '\x1122', 
		'\x1120', '\x3', '\x2', '\x2', '\x2', '\x1122', '\x1123', '\x3', '\x2', 
		'\x2', '\x2', '\x1123', '\x1124', '\x3', '\x2', '\x2', '\x2', '\x1124', 
		'\x1127', '\a', '\x2B3', '\x2', '\x2', '\x1125', '\x1128', '\x5', '\x3B0', 
		'\x1D9', '\x2', '\x1126', '\x1128', '\x5', '\x36A', '\x1B6', '\x2', '\x1127', 
		'\x1125', '\x3', '\x2', '\x2', '\x2', '\x1127', '\x1126', '\x3', '\x2', 
		'\x2', '\x2', '\x1128', '\x1129', '\x3', '\x2', '\x2', '\x2', '\x1129', 
		'\x112A', '\x5', '\x22C', '\x117', '\x2', '\x112A', '\x112B', '\x5', '\x236', 
		'\x11C', '\x2', '\x112B', '\x112C', '\a', '\x2B4', '\x2', '\x2', '\x112C', 
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x112D', '\x112E', '\a', '\xF6', 
		'\x2', '\x2', '\x112E', '\x1133', '\a', '\x2B3', '\x2', '\x2', '\x112F', 
		'\x1131', '\a', '\x2B9', '\x2', '\x2', '\x1130', '\x112F', '\x3', '\x2', 
		'\x2', '\x2', '\x1130', '\x1131', '\x3', '\x2', '\x2', '\x2', '\x1131', 
		'\x1132', '\x3', '\x2', '\x2', '\x2', '\x1132', '\x1134', '\x5', '\x238', 
		'\x11D', '\x2', '\x1133', '\x1130', '\x3', '\x2', '\x2', '\x2', '\x1134', 
		'\x1135', '\x3', '\x2', '\x2', '\x2', '\x1135', '\x1133', '\x3', '\x2', 
		'\x2', '\x2', '\x1135', '\x1136', '\x3', '\x2', '\x2', '\x2', '\x1136', 
		'\x1137', '\x3', '\x2', '\x2', '\x2', '\x1137', '\x1138', '\a', '\x2B4', 
		'\x2', '\x2', '\x1138', '\x237', '\x3', '\x2', '\x2', '\x2', '\x1139', 
		'\x113C', '\x5', '\x3B0', '\x1D9', '\x2', '\x113A', '\x113C', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x113B', '\x1139', '\x3', '\x2', '\x2', '\x2', '\x113B', 
		'\x113A', '\x3', '\x2', '\x2', '\x2', '\x113C', '\x114C', '\x3', '\x2', 
		'\x2', '\x2', '\x113D', '\x114A', '\a', '\x15', '\x2', '\x2', '\x113E', 
		'\x114B', '\x5', '\x38E', '\x1C8', '\x2', '\x113F', '\x1144', '\a', '\x2B3', 
		'\x2', '\x2', '\x1140', '\x1142', '\a', '\x2B9', '\x2', '\x2', '\x1141', 
		'\x1140', '\x3', '\x2', '\x2', '\x2', '\x1141', '\x1142', '\x3', '\x2', 
		'\x2', '\x2', '\x1142', '\x1143', '\x3', '\x2', '\x2', '\x2', '\x1143', 
		'\x1145', '\x5', '\x38E', '\x1C8', '\x2', '\x1144', '\x1141', '\x3', '\x2', 
		'\x2', '\x2', '\x1145', '\x1146', '\x3', '\x2', '\x2', '\x2', '\x1146', 
		'\x1144', '\x3', '\x2', '\x2', '\x2', '\x1146', '\x1147', '\x3', '\x2', 
		'\x2', '\x2', '\x1147', '\x1148', '\x3', '\x2', '\x2', '\x2', '\x1148', 
		'\x1149', '\a', '\x2B4', '\x2', '\x2', '\x1149', '\x114B', '\x3', '\x2', 
		'\x2', '\x2', '\x114A', '\x113E', '\x3', '\x2', '\x2', '\x2', '\x114A', 
		'\x113F', '\x3', '\x2', '\x2', '\x2', '\x114B', '\x114D', '\x3', '\x2', 
		'\x2', '\x2', '\x114C', '\x113D', '\x3', '\x2', '\x2', '\x2', '\x114C', 
		'\x114D', '\x3', '\x2', '\x2', '\x2', '\x114D', '\x239', '\x3', '\x2', 
		'\x2', '\x2', '\x114E', '\x114F', '\a', '\\', '\x2', '\x2', '\x114F', 
		'\x1151', '\a', ':', '\x2', '\x2', '\x1150', '\x1152', '\a', '\x157', 
		'\x2', '\x2', '\x1151', '\x1150', '\x3', '\x2', '\x2', '\x2', '\x1151', 
		'\x1152', '\x3', '\x2', '\x2', '\x2', '\x1152', '\x1153', '\x3', '\x2', 
		'\x2', '\x2', '\x1153', '\x1155', '\x5', '\x2B4', '\x15B', '\x2', '\x1154', 
		'\x1156', '\x5', '\x23C', '\x11F', '\x2', '\x1155', '\x1154', '\x3', '\x2', 
		'\x2', '\x2', '\x1155', '\x1156', '\x3', '\x2', '\x2', '\x2', '\x1156', 
		'\x1160', '\x3', '\x2', '\x2', '\x2', '\x1157', '\x1158', '\x5', '\x23C', 
		'\x11F', '\x2', '\x1158', '\x1159', '\a', '\\', '\x2', '\x2', '\x1159', 
		'\x115B', '\a', ':', '\x2', '\x2', '\x115A', '\x115C', '\a', '\x157', 
		'\x2', '\x2', '\x115B', '\x115A', '\x3', '\x2', '\x2', '\x2', '\x115B', 
		'\x115C', '\x3', '\x2', '\x2', '\x2', '\x115C', '\x115D', '\x3', '\x2', 
		'\x2', '\x2', '\x115D', '\x115E', '\x5', '\x2B4', '\x15B', '\x2', '\x115E', 
		'\x1160', '\x3', '\x2', '\x2', '\x2', '\x115F', '\x114E', '\x3', '\x2', 
		'\x2', '\x2', '\x115F', '\x1157', '\x3', '\x2', '\x2', '\x2', '\x1160', 
		'\x23B', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x1162', '\a', '\x210', 
		'\x2', '\x2', '\x1162', '\x1163', '\a', '\x26B', '\x2', '\x2', '\x1163', 
		'\x1164', '\x5', '\x2B4', '\x15B', '\x2', '\x1164', '\x23D', '\x3', '\x2', 
		'\x2', '\x2', '\x1165', '\x1166', '\a', '\xDA', '\x2', '\x2', '\x1166', 
		'\x116B', '\a', ':', '\x2', '\x2', '\x1167', '\x1169', '\a', '\x2B9', 
		'\x2', '\x2', '\x1168', '\x1167', '\x3', '\x2', '\x2', '\x2', '\x1168', 
		'\x1169', '\x3', '\x2', '\x2', '\x2', '\x1169', '\x116A', '\x3', '\x2', 
		'\x2', '\x2', '\x116A', '\x116C', '\x5', '\x240', '\x121', '\x2', '\x116B', 
		'\x1168', '\x3', '\x2', '\x2', '\x2', '\x116C', '\x116D', '\x3', '\x2', 
		'\x2', '\x2', '\x116D', '\x116B', '\x3', '\x2', '\x2', '\x2', '\x116D', 
		'\x116E', '\x3', '\x2', '\x2', '\x2', '\x116E', '\x1170', '\x3', '\x2', 
		'\x2', '\x2', '\x116F', '\x1171', '\x5', '\x248', '\x125', '\x2', '\x1170', 
		'\x116F', '\x3', '\x2', '\x2', '\x2', '\x1170', '\x1171', '\x3', '\x2', 
		'\x2', '\x2', '\x1171', '\x1180', '\x3', '\x2', '\x2', '\x2', '\x1172', 
		'\x117D', '\x5', '\x248', '\x125', '\x2', '\x1173', '\x1174', '\a', '\xDA', 
		'\x2', '\x2', '\x1174', '\x1179', '\a', ':', '\x2', '\x2', '\x1175', '\x1177', 
		'\a', '\x2B9', '\x2', '\x2', '\x1176', '\x1175', '\x3', '\x2', '\x2', 
		'\x2', '\x1176', '\x1177', '\x3', '\x2', '\x2', '\x2', '\x1177', '\x1178', 
		'\x3', '\x2', '\x2', '\x2', '\x1178', '\x117A', '\x5', '\x240', '\x121', 
		'\x2', '\x1179', '\x1176', '\x3', '\x2', '\x2', '\x2', '\x117A', '\x117B', 
		'\x3', '\x2', '\x2', '\x2', '\x117B', '\x1179', '\x3', '\x2', '\x2', '\x2', 
		'\x117B', '\x117C', '\x3', '\x2', '\x2', '\x2', '\x117C', '\x117E', '\x3', 
		'\x2', '\x2', '\x2', '\x117D', '\x1173', '\x3', '\x2', '\x2', '\x2', '\x117D', 
		'\x117E', '\x3', '\x2', '\x2', '\x2', '\x117E', '\x1180', '\x3', '\x2', 
		'\x2', '\x2', '\x117F', '\x1165', '\x3', '\x2', '\x2', '\x2', '\x117F', 
		'\x1172', '\x3', '\x2', '\x2', '\x2', '\x1180', '\x23F', '\x3', '\x2', 
		'\x2', '\x2', '\x1181', '\x1185', '\x5', '\x244', '\x123', '\x2', '\x1182', 
		'\x1185', '\x5', '\x242', '\x122', '\x2', '\x1183', '\x1185', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x1184', '\x1181', '\x3', '\x2', '\x2', '\x2', '\x1184', 
		'\x1182', '\x3', '\x2', '\x2', '\x2', '\x1184', '\x1183', '\x3', '\x2', 
		'\x2', '\x2', '\x1185', '\x241', '\x3', '\x2', '\x2', '\x2', '\x1186', 
		'\x1187', '\t', '\x43', '\x2', '\x2', '\x1187', '\x118C', '\a', '\x2B3', 
		'\x2', '\x2', '\x1188', '\x118A', '\a', '\x2B9', '\x2', '\x2', '\x1189', 
		'\x1188', '\x3', '\x2', '\x2', '\x2', '\x1189', '\x118A', '\x3', '\x2', 
		'\x2', '\x2', '\x118A', '\x118B', '\x3', '\x2', '\x2', '\x2', '\x118B', 
		'\x118D', '\x5', '\x246', '\x124', '\x2', '\x118C', '\x1189', '\x3', '\x2', 
		'\x2', '\x2', '\x118D', '\x118E', '\x3', '\x2', '\x2', '\x2', '\x118E', 
		'\x118C', '\x3', '\x2', '\x2', '\x2', '\x118E', '\x118F', '\x3', '\x2', 
		'\x2', '\x2', '\x118F', '\x1190', '\x3', '\x2', '\x2', '\x2', '\x1190', 
		'\x1191', '\a', '\x2B4', '\x2', '\x2', '\x1191', '\x243', '\x3', '\x2', 
		'\x2', '\x2', '\x1192', '\x1193', '\a', '\xDB', '\x2', '\x2', '\x1193', 
		'\x1194', '\a', '\x1F9', '\x2', '\x2', '\x1194', '\x1199', '\a', '\x2B3', 
		'\x2', '\x2', '\x1195', '\x1197', '\a', '\x2B9', '\x2', '\x2', '\x1196', 
		'\x1195', '\x3', '\x2', '\x2', '\x2', '\x1196', '\x1197', '\x3', '\x2', 
		'\x2', '\x2', '\x1197', '\x1198', '\x3', '\x2', '\x2', '\x2', '\x1198', 
		'\x119A', '\x5', '\x246', '\x124', '\x2', '\x1199', '\x1196', '\x3', '\x2', 
		'\x2', '\x2', '\x119A', '\x119B', '\x3', '\x2', '\x2', '\x2', '\x119B', 
		'\x1199', '\x3', '\x2', '\x2', '\x2', '\x119B', '\x119C', '\x3', '\x2', 
		'\x2', '\x2', '\x119C', '\x119D', '\x3', '\x2', '\x2', '\x2', '\x119D', 
		'\x119E', '\a', '\x2B4', '\x2', '\x2', '\x119E', '\x245', '\x3', '\x2', 
		'\x2', '\x2', '\x119F', '\x11A7', '\x5', '\x242', '\x122', '\x2', '\x11A0', 
		'\x11A2', '\a', '\x2B3', '\x2', '\x2', '\x11A1', '\x11A3', '\x5', '\x2B6', 
		'\x15C', '\x2', '\x11A2', '\x11A1', '\x3', '\x2', '\x2', '\x2', '\x11A2', 
		'\x11A3', '\x3', '\x2', '\x2', '\x2', '\x11A3', '\x11A4', '\x3', '\x2', 
		'\x2', '\x2', '\x11A4', '\x11A7', '\a', '\x2B4', '\x2', '\x2', '\x11A5', 
		'\x11A7', '\x5', '\x2B8', '\x15D', '\x2', '\x11A6', '\x119F', '\x3', '\x2', 
		'\x2', '\x2', '\x11A6', '\x11A0', '\x3', '\x2', '\x2', '\x2', '\x11A6', 
		'\x11A5', '\x3', '\x2', '\x2', '\x2', '\x11A7', '\x247', '\x3', '\x2', 
		'\x2', '\x2', '\x11A8', '\x11A9', '\a', '\xDF', '\x2', '\x2', '\x11A9', 
		'\x11AA', '\x5', '\x2B4', '\x15B', '\x2', '\x11AA', '\x249', '\x3', '\x2', 
		'\x2', '\x2', '\x11AB', '\x11AF', '\a', '\x142', '\x2', '\x2', '\x11AC', 
		'\x11AE', '\x5', '\x24C', '\x127', '\x2', '\x11AD', '\x11AC', '\x3', '\x2', 
		'\x2', '\x2', '\x11AE', '\x11B1', '\x3', '\x2', '\x2', '\x2', '\x11AF', 
		'\x11AD', '\x3', '\x2', '\x2', '\x2', '\x11AF', '\x11B0', '\x3', '\x2', 
		'\x2', '\x2', '\x11B0', '\x11B3', '\x3', '\x2', '\x2', '\x2', '\x11B1', 
		'\x11AF', '\x3', '\x2', '\x2', '\x2', '\x11B2', '\x11B4', '\x5', '\x24E', 
		'\x128', '\x2', '\x11B3', '\x11B2', '\x3', '\x2', '\x2', '\x2', '\x11B3', 
		'\x11B4', '\x3', '\x2', '\x2', '\x2', '\x11B4', '\x11B8', '\x3', '\x2', 
		'\x2', '\x2', '\x11B5', '\x11B7', '\x5', '\x250', '\x129', '\x2', '\x11B6', 
		'\x11B5', '\x3', '\x2', '\x2', '\x2', '\x11B7', '\x11BA', '\x3', '\x2', 
		'\x2', '\x2', '\x11B8', '\x11B6', '\x3', '\x2', '\x2', '\x2', '\x11B8', 
		'\x11B9', '\x3', '\x2', '\x2', '\x2', '\x11B9', '\x11BB', '\x3', '\x2', 
		'\x2', '\x2', '\x11BA', '\x11B8', '\x3', '\x2', '\x2', '\x2', '\x11BB', 
		'\x11BC', '\x5', '\x252', '\x12A', '\x2', '\x11BC', '\x24B', '\x3', '\x2', 
		'\x2', '\x2', '\x11BD', '\x11BE', '\t', '\x44', '\x2', '\x2', '\x11BE', 
		'\x11C6', '\a', '\x14C', '\x2', '\x2', '\x11BF', '\x11C3', '\a', '\x248', 
		'\x2', '\x2', '\x11C0', '\x11C4', '\a', '\x8F', '\x2', '\x2', '\x11C1', 
		'\x11C2', '\a', '\x201', '\x2', '\x2', '\x11C2', '\x11C4', '\a', '\x1BF', 
		'\x2', '\x2', '\x11C3', '\x11C0', '\x3', '\x2', '\x2', '\x2', '\x11C3', 
		'\x11C1', '\x3', '\x2', '\x2', '\x2', '\x11C4', '\x11C6', '\x3', '\x2', 
		'\x2', '\x2', '\x11C5', '\x11BD', '\x3', '\x2', '\x2', '\x2', '\x11C5', 
		'\x11BF', '\x3', '\x2', '\x2', '\x2', '\x11C6', '\x24D', '\x3', '\x2', 
		'\x2', '\x2', '\x11C7', '\x11C8', '\a', '\x1D4', '\x2', '\x2', '\x11C8', 
		'\x11C9', '\t', '\x45', '\x2', '\x2', '\x11C9', '\x11CA', '\a', '\x1E0', 
		'\x2', '\x2', '\x11CA', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x11CB', 
		'\x11CC', '\a', '\x1BF', '\x2', '\x2', '\x11CC', '\x11CD', '\x5', '\x398', 
		'\x1CD', '\x2', '\x11CD', '\x11CE', '\a', '\x178', '\x2', '\x2', '\x11CE', 
		'\x11CF', '\a', '\x2B3', '\x2', '\x2', '\x11CF', '\x11D0', '\x5', '\x148', 
		'\xA5', '\x2', '\x11D0', '\x11D1', '\a', '\x2B4', '\x2', '\x2', '\x11D1', 
		'\x11D5', '\x5', '\x254', '\x12B', '\x2', '\x11D2', '\x11D4', '\x5', '\x24C', 
		'\x127', '\x2', '\x11D3', '\x11D2', '\x3', '\x2', '\x2', '\x2', '\x11D4', 
		'\x11D7', '\x3', '\x2', '\x2', '\x2', '\x11D5', '\x11D3', '\x3', '\x2', 
		'\x2', '\x2', '\x11D5', '\x11D6', '\x3', '\x2', '\x2', '\x2', '\x11D6', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x11D7', '\x11D5', '\x3', '\x2', 
		'\x2', '\x2', '\x11D8', '\x11D9', '\a', '\x12C', '\x2', '\x2', '\x11D9', 
		'\x11DB', '\x5', '\x3A6', '\x1D4', '\x2', '\x11DA', '\x11D8', '\x3', '\x2', 
		'\x2', '\x2', '\x11DA', '\x11DB', '\x3', '\x2', '\x2', '\x2', '\x11DB', 
		'\x11DC', '\x3', '\x2', '\x2', '\x2', '\x11DC', '\x11E0', '\x5', '\x254', 
		'\x12B', '\x2', '\x11DD', '\x11DF', '\x5', '\x24C', '\x127', '\x2', '\x11DE', 
		'\x11DD', '\x3', '\x2', '\x2', '\x2', '\x11DF', '\x11E2', '\x3', '\x2', 
		'\x2', '\x2', '\x11E0', '\x11DE', '\x3', '\x2', '\x2', '\x2', '\x11E0', 
		'\x11E1', '\x3', '\x2', '\x2', '\x2', '\x11E1', '\x11E3', '\x3', '\x2', 
		'\x2', '\x2', '\x11E2', '\x11E0', '\x3', '\x2', '\x2', '\x2', '\x11E3', 
		'\x11E4', '\x5', '\x25C', '\x12F', '\x2', '\x11E4', '\x253', '\x3', '\x2', 
		'\x2', '\x2', '\x11E5', '\x11E7', '\x5', '\x256', '\x12C', '\x2', '\x11E6', 
		'\x11E5', '\x3', '\x2', '\x2', '\x2', '\x11E6', '\x11E7', '\x3', '\x2', 
		'\x2', '\x2', '\x11E7', '\x11E8', '\x3', '\x2', '\x2', '\x2', '\x11E8', 
		'\x11E9', '\a', '\x8F', '\x2', '\x2', '\x11E9', '\x11EA', '\a', ':', '\x2', 
		'\x2', '\x11EA', '\x11EB', '\x5', '\x258', '\x12D', '\x2', '\x11EB', '\x11EC', 
		'\a', '\x136', '\x2', '\x2', '\x11EC', '\x11ED', '\x5', '\x258', '\x12D', 
		'\x2', '\x11ED', '\x255', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11EF', 
		'\a', '\x18E', '\x2', '\x2', '\x11EF', '\x11F0', '\a', ':', '\x2', '\x2', 
		'\x11F0', '\x11F1', '\x5', '\x258', '\x12D', '\x2', '\x11F1', '\x257', 
		'\x3', '\x2', '\x2', '\x2', '\x11F2', '\x11F7', '\a', '\x2B3', '\x2', 
		'\x2', '\x11F3', '\x11F5', '\a', '\x2B9', '\x2', '\x2', '\x11F4', '\x11F3', 
		'\x3', '\x2', '\x2', '\x2', '\x11F4', '\x11F5', '\x3', '\x2', '\x2', '\x2', 
		'\x11F5', '\x11F6', '\x3', '\x2', '\x2', '\x2', '\x11F6', '\x11F8', '\x5', 
		'\x25A', '\x12E', '\x2', '\x11F7', '\x11F4', '\x3', '\x2', '\x2', '\x2', 
		'\x11F8', '\x11F9', '\x3', '\x2', '\x2', '\x2', '\x11F9', '\x11F7', '\x3', 
		'\x2', '\x2', '\x2', '\x11F9', '\x11FA', '\x3', '\x2', '\x2', '\x2', '\x11FA', 
		'\x11FB', '\x3', '\x2', '\x2', '\x2', '\x11FB', '\x11FC', '\a', '\x2B4', 
		'\x2', '\x2', '\x11FC', '\x259', '\x3', '\x2', '\x2', '\x2', '\x11FD', 
		'\x1200', '\x5', '\x2B8', '\x15D', '\x2', '\x11FE', '\x1200', '\x5', '\x20C', 
		'\x107', '\x2', '\x11FF', '\x11FD', '\x3', '\x2', '\x2', '\x2', '\x11FF', 
		'\x11FE', '\x3', '\x2', '\x2', '\x2', '\x1200', '\x1202', '\x3', '\x2', 
		'\x2', '\x2', '\x1201', '\x1203', '\x5', '\x328', '\x195', '\x2', '\x1202', 
		'\x1201', '\x3', '\x2', '\x2', '\x2', '\x1202', '\x1203', '\x3', '\x2', 
		'\x2', '\x2', '\x1203', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x1204', 
		'\x1206', '\x5', '\x25E', '\x130', '\x2', '\x1205', '\x1204', '\x3', '\x2', 
		'\x2', '\x2', '\x1205', '\x1206', '\x3', '\x2', '\x2', '\x2', '\x1206', 
		'\x1207', '\x3', '\x2', '\x2', '\x2', '\x1207', '\x120E', '\a', '\x2B3', 
		'\x2', '\x2', '\x1208', '\x120A', '\a', '\x2B9', '\x2', '\x2', '\x1209', 
		'\x1208', '\x3', '\x2', '\x2', '\x2', '\x1209', '\x120A', '\x3', '\x2', 
		'\x2', '\x2', '\x120A', '\x120B', '\x3', '\x2', '\x2', '\x2', '\x120B', 
		'\x120D', '\x5', '\x260', '\x131', '\x2', '\x120C', '\x1209', '\x3', '\x2', 
		'\x2', '\x2', '\x120D', '\x1210', '\x3', '\x2', '\x2', '\x2', '\x120E', 
		'\x120C', '\x3', '\x2', '\x2', '\x2', '\x120E', '\x120F', '\x3', '\x2', 
		'\x2', '\x2', '\x120F', '\x1211', '\x3', '\x2', '\x2', '\x2', '\x1210', 
		'\x120E', '\x3', '\x2', '\x2', '\x2', '\x1211', '\x1212', '\a', '\x2B4', 
		'\x2', '\x2', '\x1212', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x1213', 
		'\x1219', '\a', '\x1E1', '\x2', '\x2', '\x1214', '\x121A', '\a', '\x24F', 
		'\x2', '\x2', '\x1215', '\x1217', '\a', '\x250', '\x2', '\x2', '\x1216', 
		'\x1218', '\a', '\xE', '\x2', '\x2', '\x1217', '\x1216', '\x3', '\x2', 
		'\x2', '\x2', '\x1217', '\x1218', '\x3', '\x2', '\x2', '\x2', '\x1218', 
		'\x121A', '\x3', '\x2', '\x2', '\x2', '\x1219', '\x1214', '\x3', '\x2', 
		'\x2', '\x2', '\x1219', '\x1215', '\x3', '\x2', '\x2', '\x2', '\x1219', 
		'\x121A', '\x3', '\x2', '\x2', '\x2', '\x121A', '\x121D', '\x3', '\x2', 
		'\x2', '\x2', '\x121B', '\x121C', '\t', '\x46', '\x2', '\x2', '\x121C', 
		'\x121E', '\a', '\x17E', '\x2', '\x2', '\x121D', '\x121B', '\x3', '\x2', 
		'\x2', '\x2', '\x121D', '\x121E', '\x3', '\x2', '\x2', '\x2', '\x121E', 
		'\x1220', '\x3', '\x2', '\x2', '\x2', '\x121F', '\x1221', '\x5', '\x264', 
		'\x133', '\x2', '\x1220', '\x121F', '\x3', '\x2', '\x2', '\x2', '\x1220', 
		'\x1221', '\x3', '\x2', '\x2', '\x2', '\x1221', '\x25F', '\x3', '\x2', 
		'\x2', '\x2', '\x1222', '\x1228', '\a', '\x24F', '\x2', '\x2', '\x1223', 
		'\x1225', '\a', '\x250', '\x2', '\x2', '\x1224', '\x1226', '\a', '\xE', 
		'\x2', '\x2', '\x1225', '\x1224', '\x3', '\x2', '\x2', '\x2', '\x1225', 
		'\x1226', '\x3', '\x2', '\x2', '\x2', '\x1226', '\x1228', '\x3', '\x2', 
		'\x2', '\x2', '\x1227', '\x1222', '\x3', '\x2', '\x2', '\x2', '\x1227', 
		'\x1223', '\x3', '\x2', '\x2', '\x2', '\x1227', '\x1228', '\x3', '\x2', 
		'\x2', '\x2', '\x1228', '\x1229', '\x3', '\x2', '\x2', '\x2', '\x1229', 
		'\x122B', '\x5', '\x262', '\x132', '\x2', '\x122A', '\x122C', '\x5', '\x268', 
		'\x135', '\x2', '\x122B', '\x122A', '\x3', '\x2', '\x2', '\x2', '\x122B', 
		'\x122C', '\x3', '\x2', '\x2', '\x2', '\x122C', '\x122D', '\x3', '\x2', 
		'\x2', '\x2', '\x122D', '\x122E', '\a', '\x2C7', '\x2', '\x2', '\x122E', 
		'\x122F', '\x5', '\x2B8', '\x15D', '\x2', '\x122F', '\x261', '\x3', '\x2', 
		'\x2', '\x2', '\x1230', '\x1231', '\x5', '\x2CE', '\x168', '\x2', '\x1231', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x1232', '\x1233', '\a', '\x10A', 
		'\x2', '\x2', '\x1233', '\x1234', '\a', '\x2B3', '\x2', '\x2', '\x1234', 
		'\x1235', '\x5', '\x2B8', '\x15D', '\x2', '\x1235', '\x1237', '\a', '\x2B4', 
		'\x2', '\x2', '\x1236', '\x1238', '\x5', '\x266', '\x134', '\x2', '\x1237', 
		'\x1236', '\x3', '\x2', '\x2', '\x2', '\x1237', '\x1238', '\x3', '\x2', 
		'\x2', '\x2', '\x1238', '\x265', '\x3', '\x2', '\x2', '\x2', '\x1239', 
		'\x123A', '\a', '\x24C', '\x2', '\x2', '\x123A', '\x123B', '\a', '\x2B3', 
		'\x2', '\x2', '\x123B', '\x123C', '\x5', '\x2B4', '\x15B', '\x2', '\x123C', 
		'\x123D', '\a', '\x2B4', '\x2', '\x2', '\x123D', '\x267', '\x3', '\x2', 
		'\x2', '\x2', '\x123E', '\x1240', '\a', '\x17E', '\x2', '\x2', '\x123F', 
		'\x1241', '\a', '\x1FE', '\x2', '\x2', '\x1240', '\x123F', '\x3', '\x2', 
		'\x2', '\x2', '\x1240', '\x1241', '\x3', '\x2', '\x2', '\x2', '\x1241', 
		'\x1242', '\x3', '\x2', '\x2', '\x2', '\x1242', '\x1247', '\a', ':', '\x2', 
		'\x2', '\x1243', '\x1245', '\a', '\x2B9', '\x2', '\x2', '\x1244', '\x1243', 
		'\x3', '\x2', '\x2', '\x2', '\x1244', '\x1245', '\x3', '\x2', '\x2', '\x2', 
		'\x1245', '\x1246', '\x3', '\x2', '\x2', '\x2', '\x1246', '\x1248', '\x5', 
		'\x26A', '\x136', '\x2', '\x1247', '\x1244', '\x3', '\x2', '\x2', '\x2', 
		'\x1248', '\x1249', '\x3', '\x2', '\x2', '\x2', '\x1249', '\x1247', '\x3', 
		'\x2', '\x2', '\x2', '\x1249', '\x124A', '\x3', '\x2', '\x2', '\x2', '\x124A', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x124B', '\x124D', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x124C', '\x124E', '\t', 'G', '\x2', '\x2', '\x124D', 
		'\x124C', '\x3', '\x2', '\x2', '\x2', '\x124D', '\x124E', '\x3', '\x2', 
		'\x2', '\x2', '\x124E', '\x1251', '\x3', '\x2', '\x2', '\x2', '\x124F', 
		'\x1250', '\a', '\x16B', '\x2', '\x2', '\x1250', '\x1252', '\t', 'H', 
		'\x2', '\x2', '\x1251', '\x124F', '\x3', '\x2', '\x2', '\x2', '\x1251', 
		'\x1252', '\x3', '\x2', '\x2', '\x2', '\x1252', '\x26B', '\x3', '\x2', 
		'\x2', '\x2', '\x1253', '\x1254', '\a', '\xD0', '\x2', '\x2', '\x1254', 
		'\x1256', '\a', '\x24F', '\x2', '\x2', '\x1255', '\x1257', '\x5', '\x26E', 
		'\x138', '\x2', '\x1256', '\x1255', '\x3', '\x2', '\x2', '\x2', '\x1256', 
		'\x1257', '\x3', '\x2', '\x2', '\x2', '\x1257', '\x1259', '\x3', '\x2', 
		'\x2', '\x2', '\x1258', '\x125A', '\x5', '\x270', '\x139', '\x2', '\x1259', 
		'\x1258', '\x3', '\x2', '\x2', '\x2', '\x1259', '\x125A', '\x3', '\x2', 
		'\x2', '\x2', '\x125A', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x125B', 
		'\x125C', '\a', '\x172', '\x2', '\x2', '\x125C', '\x125D', '\x5', '\x368', 
		'\x1B5', '\x2', '\x125D', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x125E', 
		'\x125F', '\a', '\x203', '\x2', '\x2', '\x125F', '\x1264', '\a', '\x121', 
		'\x2', '\x2', '\x1260', '\x1264', '\a', '\x169', '\x2', '\x2', '\x1261', 
		'\x1262', '\a', '\x263', '\x2', '\x2', '\x1262', '\x1264', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x1263', '\x125E', '\x3', '\x2', '\x2', '\x2', '\x1263', 
		'\x1260', '\x3', '\x2', '\x2', '\x2', '\x1263', '\x1261', '\x3', '\x2', 
		'\x2', '\x2', '\x1264', '\x271', '\x3', '\x2', '\x2', '\x2', '\x1265', 
		'\x1266', '\a', '\x24F', '\x2', '\x2', '\x1266', '\x1267', '\x5', '\x2A0', 
		'\x151', '\x2', '\x1267', '\x1269', '\x5', '\x274', '\x13B', '\x2', '\x1268', 
		'\x126A', '\x5', '\x32C', '\x197', '\x2', '\x1269', '\x1268', '\x3', '\x2', 
		'\x2', '\x2', '\x1269', '\x126A', '\x3', '\x2', '\x2', '\x2', '\x126A', 
		'\x126C', '\x3', '\x2', '\x2', '\x2', '\x126B', '\x126D', '\x5', '\x2A2', 
		'\x152', '\x2', '\x126C', '\x126B', '\x3', '\x2', '\x2', '\x2', '\x126C', 
		'\x126D', '\x3', '\x2', '\x2', '\x2', '\x126D', '\x126F', '\x3', '\x2', 
		'\x2', '\x2', '\x126E', '\x1270', '\x5', '\x2A4', '\x153', '\x2', '\x126F', 
		'\x126E', '\x3', '\x2', '\x2', '\x2', '\x126F', '\x1270', '\x3', '\x2', 
		'\x2', '\x2', '\x1270', '\x273', '\x3', '\x2', '\x2', '\x2', '\x1271', 
		'\x1281', '\a', '\x1F8', '\x2', '\x2', '\x1272', '\x1274', '\a', '\x2B9', 
		'\x2', '\x2', '\x1273', '\x1272', '\x3', '\x2', '\x2', '\x2', '\x1273', 
		'\x1274', '\x3', '\x2', '\x2', '\x2', '\x1274', '\x1275', '\x3', '\x2', 
		'\x2', '\x2', '\x1275', '\x1277', '\x5', '\x276', '\x13C', '\x2', '\x1276', 
		'\x1273', '\x3', '\x2', '\x2', '\x2', '\x1277', '\x1278', '\x3', '\x2', 
		'\x2', '\x2', '\x1278', '\x1276', '\x3', '\x2', '\x2', '\x2', '\x1278', 
		'\x1279', '\x3', '\x2', '\x2', '\x2', '\x1279', '\x1282', '\x3', '\x2', 
		'\x2', '\x2', '\x127A', '\x127B', '\a', '\x259', '\x2', '\x2', '\x127B', 
		'\x127C', '\a', '\x2B3', '\x2', '\x2', '\x127C', '\x127D', '\x5', '\x390', 
		'\x1C9', '\x2', '\x127D', '\x127E', '\a', '\x2B4', '\x2', '\x2', '\x127E', 
		'\x127F', '\a', '\x2C7', '\x2', '\x2', '\x127F', '\x1280', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x1280', '\x1282', '\x3', '\x2', '\x2', '\x2', '\x1281', 
		'\x1276', '\x3', '\x2', '\x2', '\x2', '\x1281', '\x127A', '\x3', '\x2', 
		'\x2', '\x2', '\x1282', '\x275', '\x3', '\x2', '\x2', '\x2', '\x1283', 
		'\x1284', '\x5', '\x3B0', '\x1D9', '\x2', '\x1284', '\x1285', '\a', '\x2C7', 
		'\x2', '\x2', '\x1285', '\x1286', '\x5', '\x2B8', '\x15D', '\x2', '\x1286', 
		'\x128C', '\x3', '\x2', '\x2', '\x2', '\x1287', '\x1288', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x1288', '\x1289', '\a', '\x2C7', '\x2', '\x2', '\x1289', 
		'\x128A', '\x5', '\x148', '\xA5', '\x2', '\x128A', '\x128C', '\x3', '\x2', 
		'\x2', '\x2', '\x128B', '\x1283', '\x3', '\x2', '\x2', '\x2', '\x128B', 
		'\x1287', '\x3', '\x2', '\x2', '\x2', '\x128C', '\x277', '\x3', '\x2', 
		'\x2', '\x2', '\x128D', '\x128F', '\a', '\x8A', '\x2', '\x2', '\x128E', 
		'\x1290', '\a', '\xD3', '\x2', '\x2', '\x128F', '\x128E', '\x3', '\x2', 
		'\x2', '\x2', '\x128F', '\x1290', '\x3', '\x2', '\x2', '\x2', '\x1290', 
		'\x1291', '\x3', '\x2', '\x2', '\x2', '\x1291', '\x1293', '\x5', '\x2A0', 
		'\x151', '\x2', '\x1292', '\x1294', '\x5', '\x32C', '\x197', '\x2', '\x1293', 
		'\x1292', '\x3', '\x2', '\x2', '\x2', '\x1293', '\x1294', '\x3', '\x2', 
		'\x2', '\x2', '\x1294', '\x1296', '\x3', '\x2', '\x2', '\x2', '\x1295', 
		'\x1297', '\x5', '\x2A2', '\x152', '\x2', '\x1296', '\x1295', '\x3', '\x2', 
		'\x2', '\x2', '\x1296', '\x1297', '\x3', '\x2', '\x2', '\x2', '\x1297', 
		'\x1299', '\x3', '\x2', '\x2', '\x2', '\x1298', '\x129A', '\x5', '\x2A4', 
		'\x153', '\x2', '\x1299', '\x1298', '\x3', '\x2', '\x2', '\x2', '\x1299', 
		'\x129A', '\x3', '\x2', '\x2', '\x2', '\x129A', '\x279', '\x3', '\x2', 
		'\x2', '\x2', '\x129B', '\x129E', '\a', '\xFE', '\x2', '\x2', '\x129C', 
		'\x129F', '\x5', '\x27C', '\x13F', '\x2', '\x129D', '\x129F', '\x5', '\x27E', 
		'\x140', '\x2', '\x129E', '\x129C', '\x3', '\x2', '\x2', '\x2', '\x129E', 
		'\x129D', '\x3', '\x2', '\x2', '\x2', '\x129F', '\x27B', '\x3', '\x2', 
		'\x2', '\x2', '\x12A0', '\x12A6', '\x5', '\x288', '\x145', '\x2', '\x12A1', 
		'\x12A3', '\x5', '\x28A', '\x146', '\x2', '\x12A2', '\x12A4', '\x5', '\x2A2', 
		'\x152', '\x2', '\x12A3', '\x12A2', '\x3', '\x2', '\x2', '\x2', '\x12A3', 
		'\x12A4', '\x3', '\x2', '\x2', '\x2', '\x12A4', '\x12A7', '\x3', '\x2', 
		'\x2', '\x2', '\x12A5', '\x12A7', '\x5', '\x1FE', '\x100', '\x2', '\x12A6', 
		'\x12A1', '\x3', '\x2', '\x2', '\x2', '\x12A6', '\x12A5', '\x3', '\x2', 
		'\x2', '\x2', '\x12A7', '\x12A9', '\x3', '\x2', '\x2', '\x2', '\x12A8', 
		'\x12AA', '\x5', '\x2A4', '\x153', '\x2', '\x12A9', '\x12A8', '\x3', '\x2', 
		'\x2', '\x2', '\x12A9', '\x12AA', '\x3', '\x2', '\x2', '\x2', '\x12AA', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x12AB', '\x12AD', '\a', '\xE', 
		'\x2', '\x2', '\x12AC', '\x12AE', '\x5', '\x280', '\x141', '\x2', '\x12AD', 
		'\x12AC', '\x3', '\x2', '\x2', '\x2', '\x12AE', '\x12AF', '\x3', '\x2', 
		'\x2', '\x2', '\x12AF', '\x12AD', '\x3', '\x2', '\x2', '\x2', '\x12AF', 
		'\x12B0', '\x3', '\x2', '\x2', '\x2', '\x12B0', '\x12B3', '\x3', '\x2', 
		'\x2', '\x2', '\x12B1', '\x12B3', '\x5', '\x282', '\x142', '\x2', '\x12B2', 
		'\x12AB', '\x3', '\x2', '\x2', '\x2', '\x12B2', '\x12B1', '\x3', '\x2', 
		'\x2', '\x2', '\x12B3', '\x12B4', '\x3', '\x2', '\x2', '\x2', '\x12B4', 
		'\x12B5', '\x5', '\x1FE', '\x100', '\x2', '\x12B5', '\x27F', '\x3', '\x2', 
		'\x2', '\x2', '\x12B6', '\x12B8', '\x5', '\x288', '\x145', '\x2', '\x12B7', 
		'\x12B9', '\x5', '\x28A', '\x146', '\x2', '\x12B8', '\x12B7', '\x3', '\x2', 
		'\x2', '\x2', '\x12B8', '\x12B9', '\x3', '\x2', '\x2', '\x2', '\x12B9', 
		'\x12BB', '\x3', '\x2', '\x2', '\x2', '\x12BA', '\x12BC', '\x5', '\x2A4', 
		'\x153', '\x2', '\x12BB', '\x12BA', '\x3', '\x2', '\x2', '\x2', '\x12BB', 
		'\x12BC', '\x3', '\x2', '\x2', '\x2', '\x12BC', '\x281', '\x3', '\x2', 
		'\x2', '\x2', '\x12BD', '\x12BF', '\t', 'I', '\x2', '\x2', '\x12BE', '\x12BD', 
		'\x3', '\x2', '\x2', '\x2', '\x12BE', '\x12BF', '\x3', '\x2', '\x2', '\x2', 
		'\x12BF', '\x12C1', '\x3', '\x2', '\x2', '\x2', '\x12C0', '\x12C2', '\x5', 
		'\x284', '\x143', '\x2', '\x12C1', '\x12C0', '\x3', '\x2', '\x2', '\x2', 
		'\x12C2', '\x12C3', '\x3', '\x2', '\x2', '\x2', '\x12C3', '\x12C1', '\x3', 
		'\x2', '\x2', '\x2', '\x12C3', '\x12C4', '\x3', '\x2', '\x2', '\x2', '\x12C4', 
		'\x12C6', '\x3', '\x2', '\x2', '\x2', '\x12C5', '\x12C7', '\x5', '\x286', 
		'\x144', '\x2', '\x12C6', '\x12C5', '\x3', '\x2', '\x2', '\x2', '\x12C6', 
		'\x12C7', '\x3', '\x2', '\x2', '\x2', '\x12C7', '\x283', '\x3', '\x2', 
		'\x2', '\x2', '\x12C8', '\x12C9', '\a', '\x267', '\x2', '\x2', '\x12C9', 
		'\x12CA', '\x5', '\x2B4', '\x15B', '\x2', '\x12CA', '\x12CC', '\a', '\x22C', 
		'\x2', '\x2', '\x12CB', '\x12CD', '\x5', '\x280', '\x141', '\x2', '\x12CC', 
		'\x12CB', '\x3', '\x2', '\x2', '\x2', '\x12CD', '\x12CE', '\x3', '\x2', 
		'\x2', '\x2', '\x12CE', '\x12CC', '\x3', '\x2', '\x2', '\x2', '\x12CE', 
		'\x12CF', '\x3', '\x2', '\x2', '\x2', '\x12CF', '\x285', '\x3', '\x2', 
		'\x2', '\x2', '\x12D0', '\x12D2', '\a', '\xA2', '\x2', '\x2', '\x12D1', 
		'\x12D3', '\x5', '\x280', '\x141', '\x2', '\x12D2', '\x12D1', '\x3', '\x2', 
		'\x2', '\x2', '\x12D3', '\x12D4', '\x3', '\x2', '\x2', '\x2', '\x12D4', 
		'\x12D2', '\x3', '\x2', '\x2', '\x2', '\x12D4', '\x12D5', '\x3', '\x2', 
		'\x2', '\x2', '\x12D5', '\x287', '\x3', '\x2', '\x2', '\x2', '\x12D6', 
		'\x12D7', '\a', '\x105', '\x2', '\x2', '\x12D7', '\x12D9', '\x5', '\x2A0', 
		'\x151', '\x2', '\x12D8', '\x12DA', '\x5', '\x36A', '\x1B6', '\x2', '\x12D9', 
		'\x12D8', '\x3', '\x2', '\x2', '\x2', '\x12D9', '\x12DA', '\x3', '\x2', 
		'\x2', '\x2', '\x12DA', '\x289', '\x3', '\x2', '\x2', '\x2', '\x12DB', 
		'\x12DC', '\a', '\x258', '\x2', '\x2', '\x12DC', '\x12DE', '\a', '\x2B3', 
		'\x2', '\x2', '\x12DD', '\x12DF', '\x5', '\x2B6', '\x15C', '\x2', '\x12DE', 
		'\x12DD', '\x3', '\x2', '\x2', '\x2', '\x12DE', '\x12DF', '\x3', '\x2', 
		'\x2', '\x2', '\x12DF', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12E0', 
		'\x12E1', '\a', '\x2B4', '\x2', '\x2', '\x12E1', '\x28B', '\x3', '\x2', 
		'\x2', '\x2', '\x12E2', '\x12E3', '\a', '\x13A', '\x2', '\x2', '\x12E3', 
		'\x12E4', '\a', '\x105', '\x2', '\x2', '\x12E4', '\x12E6', '\x5', '\x342', 
		'\x1A2', '\x2', '\x12E5', '\x12E7', '\x5', '\x32A', '\x196', '\x2', '\x12E6', 
		'\x12E5', '\x3', '\x2', '\x2', '\x2', '\x12E6', '\x12E7', '\x3', '\x2', 
		'\x2', '\x2', '\x12E7', '\x12E8', '\x3', '\x2', '\x2', '\x2', '\x12E8', 
		'\x12E9', '\a', '\x256', '\x2', '\x2', '\x12E9', '\x12EA', '\x5', '\x296', 
		'\x14C', '\x2', '\x12EA', '\x12EB', '\a', '\x178', '\x2', '\x2', '\x12EB', 
		'\x12EC', '\a', '\x2B3', '\x2', '\x2', '\x12EC', '\x12ED', '\x5', '\x2B4', 
		'\x15B', '\x2', '\x12ED', '\x12F6', '\a', '\x2B4', '\x2', '\x2', '\x12EE', 
		'\x12F0', '\x5', '\x28E', '\x148', '\x2', '\x12EF', '\x12F1', '\x5', '\x294', 
		'\x14B', '\x2', '\x12F0', '\x12EF', '\x3', '\x2', '\x2', '\x2', '\x12F0', 
		'\x12F1', '\x3', '\x2', '\x2', '\x2', '\x12F1', '\x12F7', '\x3', '\x2', 
		'\x2', '\x2', '\x12F2', '\x12F4', '\x5', '\x294', '\x14B', '\x2', '\x12F3', 
		'\x12F5', '\x5', '\x28E', '\x148', '\x2', '\x12F4', '\x12F3', '\x3', '\x2', 
		'\x2', '\x2', '\x12F4', '\x12F5', '\x3', '\x2', '\x2', '\x2', '\x12F5', 
		'\x12F7', '\x3', '\x2', '\x2', '\x2', '\x12F6', '\x12EE', '\x3', '\x2', 
		'\x2', '\x2', '\x12F6', '\x12F2', '\x3', '\x2', '\x2', '\x2', '\x12F6', 
		'\x12F7', '\x3', '\x2', '\x2', '\x2', '\x12F7', '\x12F9', '\x3', '\x2', 
		'\x2', '\x2', '\x12F8', '\x12FA', '\x5', '\x2A4', '\x153', '\x2', '\x12F9', 
		'\x12F8', '\x3', '\x2', '\x2', '\x2', '\x12F9', '\x12FA', '\x3', '\x2', 
		'\x2', '\x2', '\x12FA', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x12FB', 
		'\x12FC', '\a', '\x267', '\x2', '\x2', '\x12FC', '\x12FD', '\a', '\x131', 
		'\x2', '\x2', '\x12FD', '\x12FE', '\a', '\x22C', '\x2', '\x2', '\x12FE', 
		'\x12FF', '\a', '\x24F', '\x2', '\x2', '\x12FF', '\x1300', '\a', '\x1F8', 
		'\x2', '\x2', '\x1300', '\x1305', '\x5', '\x290', '\x149', '\x2', '\x1301', 
		'\x1302', '\a', '\x2B9', '\x2', '\x2', '\x1302', '\x1304', '\x5', '\x290', 
		'\x149', '\x2', '\x1303', '\x1301', '\x3', '\x2', '\x2', '\x2', '\x1304', 
		'\x1307', '\x3', '\x2', '\x2', '\x2', '\x1305', '\x1303', '\x3', '\x2', 
		'\x2', '\x2', '\x1305', '\x1306', '\x3', '\x2', '\x2', '\x2', '\x1306', 
		'\x1309', '\x3', '\x2', '\x2', '\x2', '\x1307', '\x1305', '\x3', '\x2', 
		'\x2', '\x2', '\x1308', '\x130A', '\x5', '\x32C', '\x197', '\x2', '\x1309', 
		'\x1308', '\x3', '\x2', '\x2', '\x2', '\x1309', '\x130A', '\x3', '\x2', 
		'\x2', '\x2', '\x130A', '\x130C', '\x3', '\x2', '\x2', '\x2', '\x130B', 
		'\x130D', '\x5', '\x292', '\x14A', '\x2', '\x130C', '\x130B', '\x3', '\x2', 
		'\x2', '\x2', '\x130C', '\x130D', '\x3', '\x2', '\x2', '\x2', '\x130D', 
		'\x28F', '\x3', '\x2', '\x2', '\x2', '\x130E', '\x130F', '\x5', '\x3B0', 
		'\x1D9', '\x2', '\x130F', '\x1310', '\a', '\x2C7', '\x2', '\x2', '\x1310', 
		'\x1311', '\x5', '\x2B8', '\x15D', '\x2', '\x1311', '\x291', '\x3', '\x2', 
		'\x2', '\x2', '\x1312', '\x1313', '\a', '\x8A', '\x2', '\x2', '\x1313', 
		'\x1314', '\x5', '\x32C', '\x197', '\x2', '\x1314', '\x293', '\x3', '\x2', 
		'\x2', '\x2', '\x1315', '\x1316', '\a', '\x267', '\x2', '\x2', '\x1316', 
		'\x1317', '\a', '\x167', '\x2', '\x2', '\x1317', '\x1318', '\a', '\x131', 
		'\x2', '\x2', '\x1318', '\x1319', '\a', '\x22C', '\x2', '\x2', '\x1319', 
		'\x131B', '\a', '\xFE', '\x2', '\x2', '\x131A', '\x131C', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x131B', '\x131A', '\x3', '\x2', '\x2', '\x2', '\x131B', 
		'\x131C', '\x3', '\x2', '\x2', '\x2', '\x131C', '\x131D', '\x3', '\x2', 
		'\x2', '\x2', '\x131D', '\x131E', '\a', '\x258', '\x2', '\x2', '\x131E', 
		'\x1320', '\a', '\x2B3', '\x2', '\x2', '\x131F', '\x1321', '\x5', '\x2B6', 
		'\x15C', '\x2', '\x1320', '\x131F', '\x3', '\x2', '\x2', '\x2', '\x1320', 
		'\x1321', '\x3', '\x2', '\x2', '\x2', '\x1321', '\x1322', '\x3', '\x2', 
		'\x2', '\x2', '\x1322', '\x1324', '\a', '\x2B4', '\x2', '\x2', '\x1323', 
		'\x1325', '\x5', '\x32C', '\x197', '\x2', '\x1324', '\x1323', '\x3', '\x2', 
		'\x2', '\x2', '\x1324', '\x1325', '\x3', '\x2', '\x2', '\x2', '\x1325', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x132C', '\x5', '\x342', 
		'\x1A2', '\x2', '\x1327', '\x1328', '\a', '\x2B3', '\x2', '\x2', '\x1328', 
		'\x1329', '\x5', '\x1FE', '\x100', '\x2', '\x1329', '\x132A', '\a', '\x2B4', 
		'\x2', '\x2', '\x132A', '\x132C', '\x3', '\x2', '\x2', '\x2', '\x132B', 
		'\x1326', '\x3', '\x2', '\x2', '\x2', '\x132B', '\x1327', '\x3', '\x2', 
		'\x2', '\x2', '\x132C', '\x132E', '\x3', '\x2', '\x2', '\x2', '\x132D', 
		'\x132F', '\x5', '\x32A', '\x196', '\x2', '\x132E', '\x132D', '\x3', '\x2', 
		'\x2', '\x2', '\x132E', '\x132F', '\x3', '\x2', '\x2', '\x2', '\x132F', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x1330', '\x1331', '\a', '\x123', 
		'\x2', '\x2', '\x1331', '\x1332', '\a', '\x228', '\x2', '\x2', '\x1332', 
		'\x1337', '\x5', '\x29C', '\x14F', '\x2', '\x1333', '\x1334', '\a', '\x2B9', 
		'\x2', '\x2', '\x1334', '\x1336', '\x5', '\x29C', '\x14F', '\x2', '\x1335', 
		'\x1333', '\x3', '\x2', '\x2', '\x2', '\x1336', '\x1339', '\x3', '\x2', 
		'\x2', '\x2', '\x1337', '\x1335', '\x3', '\x2', '\x2', '\x2', '\x1337', 
		'\x1338', '\x3', '\x2', '\x2', '\x2', '\x1338', '\x133A', '\x3', '\x2', 
		'\x2', '\x2', '\x1339', '\x1337', '\x3', '\x2', '\x2', '\x2', '\x133A', 
		'\x133B', '\a', '\xF6', '\x2', '\x2', '\x133B', '\x133C', '\x5', '\x29E', 
		'\x150', '\x2', '\x133C', '\x133E', '\a', '\x143', '\x2', '\x2', '\x133D', 
		'\x133F', '\x5', '\x29A', '\x14E', '\x2', '\x133E', '\x133D', '\x3', '\x2', 
		'\x2', '\x2', '\x133E', '\x133F', '\x3', '\x2', '\x2', '\x2', '\x133F', 
		'\x299', '\x3', '\x2', '\x2', '\x2', '\x1340', '\x1341', '\a', '\x263', 
		'\x2', '\x2', '\x1341', '\x1344', '\x5', '\x2B8', '\x15D', '\x2', '\x1342', 
		'\x1344', '\a', '\x169', '\x2', '\x2', '\x1343', '\x1340', '\x3', '\x2', 
		'\x2', '\x2', '\x1343', '\x1342', '\x3', '\x2', '\x2', '\x2', '\x1344', 
		'\x29B', '\x3', '\x2', '\x2', '\x2', '\x1345', '\x1347', '\x5', '\x342', 
		'\x1A2', '\x2', '\x1346', '\x1348', '\x5', '\x326', '\x194', '\x2', '\x1347', 
		'\x1346', '\x3', '\x2', '\x2', '\x2', '\x1347', '\x1348', '\x3', '\x2', 
		'\x2', '\x2', '\x1348', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x1349', 
		'\x134A', '\a', '\x1DF', '\x2', '\x2', '\x134A', '\x1356', '\a', '\x1FB', 
		'\x2', '\x2', '\x134B', '\x134C', '\a', '\x1DF', '\x2', '\x2', '\x134C', 
		'\x1356', '\a', '\xB5', '\x2', '\x2', '\x134D', '\x134F', '\a', '\x1FB', 
		'\x2', '\x2', '\x134E', '\x1350', '\a', '\x24F', '\x2', '\x2', '\x134F', 
		'\x134E', '\x3', '\x2', '\x2', '\x2', '\x134F', '\x1350', '\x3', '\x2', 
		'\x2', '\x2', '\x1350', '\x1356', '\x3', '\x2', '\x2', '\x2', '\x1351', 
		'\x1352', '\a', '\x1FB', '\x2', '\x2', '\x1352', '\x1353', '\a', '\x1DF', 
		'\x2', '\x2', '\x1353', '\x1356', '\a', '\xB5', '\x2', '\x2', '\x1354', 
		'\x1356', '\a', '\xB5', '\x2', '\x2', '\x1355', '\x1349', '\x3', '\x2', 
		'\x2', '\x2', '\x1355', '\x134B', '\x3', '\x2', '\x2', '\x2', '\x1355', 
		'\x134D', '\x3', '\x2', '\x2', '\x2', '\x1355', '\x1351', '\x3', '\x2', 
		'\x2', '\x2', '\x1355', '\x1354', '\x3', '\x2', '\x2', '\x2', '\x1356', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x1357', '\x135E', '\x5', '\x2AA', 
		'\x156', '\x2', '\x1358', '\x1359', '\a', '\x177', '\x2', '\x2', '\x1359', 
		'\x135A', '\a', '\x2B3', '\x2', '\x2', '\x135A', '\x135B', '\x5', '\x2AA', 
		'\x156', '\x2', '\x135B', '\x135C', '\a', '\x2B4', '\x2', '\x2', '\x135C', 
		'\x135E', '\x3', '\x2', '\x2', '\x2', '\x135D', '\x1357', '\x3', '\x2', 
		'\x2', '\x2', '\x135D', '\x1358', '\x3', '\x2', '\x2', '\x2', '\x135E', 
		'\x1360', '\x3', '\x2', '\x2', '\x2', '\x135F', '\x1361', '\x5', '\x32A', 
		'\x196', '\x2', '\x1360', '\x135F', '\x3', '\x2', '\x2', '\x2', '\x1360', 
		'\x1361', '\x3', '\x2', '\x2', '\x2', '\x1361', '\x2A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1362', '\x1363', '\t', '\x37', '\x2', '\x2', '\x1363', 
		'\x1364', '\x5', '\x2B6', '\x15C', '\x2', '\x1364', '\x1365', '\x5', '\x32E', 
		'\x198', '\x2', '\x1365', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x1366', 
		'\x1367', '\a', '\x125', '\x2', '\x2', '\x1367', '\x1369', '\a', '\xAD', 
		'\x2', '\x2', '\x1368', '\x136A', '\x5', '\x2A6', '\x154', '\x2', '\x1369', 
		'\x1368', '\x3', '\x2', '\x2', '\x2', '\x1369', '\x136A', '\x3', '\x2', 
		'\x2', '\x2', '\x136A', '\x136C', '\x3', '\x2', '\x2', '\x2', '\x136B', 
		'\x136D', '\x5', '\x2B8', '\x15D', '\x2', '\x136C', '\x136B', '\x3', '\x2', 
		'\x2', '\x2', '\x136C', '\x136D', '\x3', '\x2', '\x2', '\x2', '\x136D', 
		'\x136F', '\x3', '\x2', '\x2', '\x2', '\x136E', '\x1370', '\x5', '\x2A8', 
		'\x155', '\x2', '\x136F', '\x136E', '\x3', '\x2', '\x2', '\x2', '\x136F', 
		'\x1370', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x2A5', '\x3', '\x2', 
		'\x2', '\x2', '\x1371', '\x1372', '\a', '\x105', '\x2', '\x2', '\x1372', 
		'\x1373', '\x5', '\x342', '\x1A2', '\x2', '\x1373', '\x2A7', '\x3', '\x2', 
		'\x2', '\x2', '\x1374', '\x1375', '\a', '\x1C4', '\x2', '\x2', '\x1375', 
		'\x1378', '\a', '\x11C', '\x2', '\x2', '\x1376', '\x1379', '\a', '\x249', 
		'\x2', '\x2', '\x1377', '\x1379', '\x5', '\x2B8', '\x15D', '\x2', '\x1378', 
		'\x1376', '\x3', '\x2', '\x2', '\x2', '\x1378', '\x1377', '\x3', '\x2', 
		'\x2', '\x2', '\x1379', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x137A', 
		'\x1387', '\x5', '\x2AC', '\x157', '\x2', '\x137B', '\x137C', '\a', '\x2B3', 
		'\x2', '\x2', '\x137C', '\x137E', '\x5', '\x1FE', '\x100', '\x2', '\x137D', 
		'\x137F', '\x5', '\x2AE', '\x158', '\x2', '\x137E', '\x137D', '\x3', '\x2', 
		'\x2', '\x2', '\x137E', '\x137F', '\x3', '\x2', '\x2', '\x2', '\x137F', 
		'\x1380', '\x3', '\x2', '\x2', '\x2', '\x1380', '\x1381', '\a', '\x2B4', 
		'\x2', '\x2', '\x1381', '\x1387', '\x3', '\x2', '\x2', '\x2', '\x1382', 
		'\x1384', '\x5', '\x342', '\x1A2', '\x2', '\x1383', '\x1385', '\x5', '\x2B0', 
		'\x159', '\x2', '\x1384', '\x1383', '\x3', '\x2', '\x2', '\x2', '\x1384', 
		'\x1385', '\x3', '\x2', '\x2', '\x2', '\x1385', '\x1387', '\x3', '\x2', 
		'\x2', '\x2', '\x1386', '\x137A', '\x3', '\x2', '\x2', '\x2', '\x1386', 
		'\x137B', '\x3', '\x2', '\x2', '\x2', '\x1386', '\x1382', '\x3', '\x2', 
		'\x2', '\x2', '\x1387', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x1388', 
		'\x1395', '\t', 'J', '\x2', '\x2', '\x1389', '\x138A', '\a', '\x2B3', 
		'\x2', '\x2', '\x138A', '\x138B', '\x5', '\x148', '\xA5', '\x2', '\x138B', 
		'\x138C', '\a', '\x2B4', '\x2', '\x2', '\x138C', '\x1396', '\x3', '\x2', 
		'\x2', '\x2', '\x138D', '\x138E', '\a', '\x2B3', '\x2', '\x2', '\x138E', 
		'\x138F', '\x5', '\x2B8', '\x15D', '\x2', '\x138F', '\x1393', '\a', '\x2B4', 
		'\x2', '\x2', '\x1390', '\x1391', '\a', '\x2B3', '\x2', '\x2', '\x1391', 
		'\x1392', '\a', '\x2B7', '\x2', '\x2', '\x1392', '\x1394', '\a', '\x2B4', 
		'\x2', '\x2', '\x1393', '\x1390', '\x3', '\x2', '\x2', '\x2', '\x1393', 
		'\x1394', '\x3', '\x2', '\x2', '\x2', '\x1394', '\x1396', '\x3', '\x2', 
		'\x2', '\x2', '\x1395', '\x1389', '\x3', '\x2', '\x2', '\x2', '\x1395', 
		'\x138D', '\x3', '\x2', '\x2', '\x2', '\x1396', '\x2AD', '\x3', '\x2', 
		'\x2', '\x2', '\x1397', '\x13A0', '\a', '\x26B', '\x2', '\x2', '\x1398', 
		'\x1399', '\a', '\x1BA', '\x2', '\x2', '\x1399', '\x13A1', '\a', '\x177', 
		'\x2', '\x2', '\x139A', '\x139B', '\a', 'H', '\x2', '\x2', '\x139B', '\x139E', 
		'\a', '\x17C', '\x2', '\x2', '\x139C', '\x139D', '\a', '^', '\x2', '\x2', 
		'\x139D', '\x139F', '\x5', '\x338', '\x19D', '\x2', '\x139E', '\x139C', 
		'\x3', '\x2', '\x2', '\x2', '\x139E', '\x139F', '\x3', '\x2', '\x2', '\x2', 
		'\x139F', '\x13A1', '\x3', '\x2', '\x2', '\x2', '\x13A0', '\x1398', '\x3', 
		'\x2', '\x2', '\x2', '\x13A0', '\x139A', '\x3', '\x2', '\x2', '\x2', '\x13A1', 
		'\x2AF', '\x3', '\x2', '\x2', '\x2', '\x13A2', '\x13A4', '\a', '\x1E3', 
		'\x2', '\x2', '\x13A3', '\x13A5', '\a', '\x31', '\x2', '\x2', '\x13A4', 
		'\x13A3', '\x3', '\x2', '\x2', '\x2', '\x13A4', '\x13A5', '\x3', '\x2', 
		'\x2', '\x2', '\x13A5', '\x13A6', '\x3', '\x2', '\x2', '\x2', '\x13A6', 
		'\x13A7', '\a', '\x2B3', '\x2', '\x2', '\x13A7', '\x13AA', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x13A8', '\x13A9', '\a', '\x2B9', '\x2', '\x2', '\x13A9', 
		'\x13AB', '\x5', '\x2B8', '\x15D', '\x2', '\x13AA', '\x13A8', '\x3', '\x2', 
		'\x2', '\x2', '\x13AA', '\x13AB', '\x3', '\x2', '\x2', '\x2', '\x13AB', 
		'\x13AC', '\x3', '\x2', '\x2', '\x2', '\x13AC', '\x13AE', '\a', '\x2B4', 
		'\x2', '\x2', '\x13AD', '\x13AF', '\x5', '\x2B2', '\x15A', '\x2', '\x13AE', 
		'\x13AD', '\x3', '\x2', '\x2', '\x2', '\x13AE', '\x13AF', '\x3', '\x2', 
		'\x2', '\x2', '\x13AF', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x13B0', 
		'\x13B1', '\a', '\x1ED', '\x2', '\x2', '\x13B1', '\x13B2', '\a', '\x2B3', 
		'\x2', '\x2', '\x13B2', '\x13B3', '\x5', '\x2B8', '\x15D', '\x2', '\x13B3', 
		'\x13B4', '\a', '\x2B4', '\x2', '\x2', '\x13B4', '\x2B3', '\x3', '\x2', 
		'\x2', '\x2', '\x13B5', '\x13B6', '\x5', '\x2B8', '\x15D', '\x2', '\x13B6', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\x13B7', '\x13BC', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x13B8', '\x13B9', '\a', '\x2B9', '\x2', '\x2', '\x13B9', 
		'\x13BB', '\x5', '\x2B8', '\x15D', '\x2', '\x13BA', '\x13B8', '\x3', '\x2', 
		'\x2', '\x2', '\x13BB', '\x13BE', '\x3', '\x2', '\x2', '\x2', '\x13BC', 
		'\x13BA', '\x3', '\x2', '\x2', '\x2', '\x13BC', '\x13BD', '\x3', '\x2', 
		'\x2', '\x2', '\x13BD', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x13BE', 
		'\x13BC', '\x3', '\x2', '\x2', '\x2', '\x13BF', '\x13C3', '\x5', '\x2BA', 
		'\x15E', '\x2', '\x13C0', '\x13C3', '\x5', '\x2BC', '\x15F', '\x2', '\x13C1', 
		'\x13C3', '\a', '\x2A7', '\x2', '\x2', '\x13C2', '\x13BF', '\x3', '\x2', 
		'\x2', '\x2', '\x13C2', '\x13C0', '\x3', '\x2', '\x2', '\x2', '\x13C2', 
		'\x13C1', '\x3', '\x2', '\x2', '\x2', '\x13C3', '\x2B9', '\x3', '\x2', 
		'\x2', '\x2', '\x13C4', '\x13C5', '\a', 'r', '\x2', '\x2', '\x13C5', '\x13C6', 
		'\a', '\x2B3', '\x2', '\x2', '\x13C6', '\x13C7', '\x5', '\x148', '\xA5', 
		'\x2', '\x13C7', '\x13C8', '\a', '\x2B4', '\x2', '\x2', '\x13C8', '\x2BB', 
		'\x3', '\x2', '\x2', '\x2', '\x13C9', '\x13CA', '\b', '\x15F', '\x1', 
		'\x2', '\x13CA', '\x13EC', '\x5', '\x2BE', '\x160', '\x2', '\x13CB', '\x13CD', 
		'\a', '\x108', '\x2', '\x2', '\x13CC', '\x13CE', '\a', '\x167', '\x2', 
		'\x2', '\x13CD', '\x13CC', '\x3', '\x2', '\x2', '\x2', '\x13CD', '\x13CE', 
		'\x3', '\x2', '\x2', '\x2', '\x13CE', '\x13E8', '\x3', '\x2', '\x2', '\x2', 
		'\x13CF', '\x13E9', '\a', '\x16A', '\x2', '\x2', '\x13D0', '\x13E9', '\a', 
		'\x149', '\x2', '\x2', '\x13D1', '\x13E9', '\a', '\x1A8', '\x2', '\x2', 
		'\x13D2', '\x13E9', '\a', '\xF4', '\x2', '\x2', '\x13D3', '\x13D4', '\a', 
		'\r', '\x2', '\x2', '\x13D4', '\x13E9', '\a', '\x1F8', '\x2', '\x2', '\x13D5', 
		'\x13E9', '\a', '\xA4', '\x2', '\x2', '\x13D6', '\x13D8', '\a', '\x172', 
		'\x2', '\x2', '\x13D7', '\x13D9', '\a', '\x242', '\x2', '\x2', '\x13D8', 
		'\x13D7', '\x3', '\x2', '\x2', '\x2', '\x13D8', '\x13D9', '\x3', '\x2', 
		'\x2', '\x2', '\x13D9', '\x13DA', '\x3', '\x2', '\x2', '\x2', '\x13DA', 
		'\x13DC', '\a', '\x2B3', '\x2', '\x2', '\x13DB', '\x13DD', '\a', '\x177', 
		'\x2', '\x2', '\x13DC', '\x13DB', '\x3', '\x2', '\x2', '\x2', '\x13DC', 
		'\x13DD', '\x3', '\x2', '\x2', '\x2', '\x13DD', '\x13DE', '\x3', '\x2', 
		'\x2', '\x2', '\x13DE', '\x13E3', '\x5', '\x378', '\x1BD', '\x2', '\x13DF', 
		'\x13E0', '\a', '\x2B9', '\x2', '\x2', '\x13E0', '\x13E2', '\x5', '\x378', 
		'\x1BD', '\x2', '\x13E1', '\x13DF', '\x3', '\x2', '\x2', '\x2', '\x13E2', 
		'\x13E5', '\x3', '\x2', '\x2', '\x2', '\x13E3', '\x13E1', '\x3', '\x2', 
		'\x2', '\x2', '\x13E3', '\x13E4', '\x3', '\x2', '\x2', '\x2', '\x13E4', 
		'\x13E6', '\x3', '\x2', '\x2', '\x2', '\x13E5', '\x13E3', '\x3', '\x2', 
		'\x2', '\x2', '\x13E6', '\x13E7', '\a', '\x2B4', '\x2', '\x2', '\x13E7', 
		'\x13E9', '\x3', '\x2', '\x2', '\x2', '\x13E8', '\x13CF', '\x3', '\x2', 
		'\x2', '\x2', '\x13E8', '\x13D0', '\x3', '\x2', '\x2', '\x2', '\x13E8', 
		'\x13D1', '\x3', '\x2', '\x2', '\x2', '\x13E8', '\x13D2', '\x3', '\x2', 
		'\x2', '\x2', '\x13E8', '\x13D3', '\x3', '\x2', '\x2', '\x2', '\x13E8', 
		'\x13D5', '\x3', '\x2', '\x2', '\x2', '\x13E8', '\x13D6', '\x3', '\x2', 
		'\x2', '\x2', '\x13E9', '\x13EB', '\x3', '\x2', '\x2', '\x2', '\x13EA', 
		'\x13CB', '\x3', '\x2', '\x2', '\x2', '\x13EB', '\x13EE', '\x3', '\x2', 
		'\x2', '\x2', '\x13EC', '\x13EA', '\x3', '\x2', '\x2', '\x2', '\x13EC', 
		'\x13ED', '\x3', '\x2', '\x2', '\x2', '\x13ED', '\x13F2', '\x3', '\x2', 
		'\x2', '\x2', '\x13EE', '\x13EC', '\x3', '\x2', '\x2', '\x2', '\x13EF', 
		'\x13F0', '\a', '\x167', '\x2', '\x2', '\x13F0', '\x13F2', '\x5', '\x2BC', 
		'\x15F', '\x5', '\x13F1', '\x13C9', '\x3', '\x2', '\x2', '\x2', '\x13F1', 
		'\x13EF', '\x3', '\x2', '\x2', '\x2', '\x13F2', '\x13FB', '\x3', '\x2', 
		'\x2', '\x2', '\x13F3', '\x13F4', '\f', '\x4', '\x2', '\x2', '\x13F4', 
		'\x13F5', '\a', '\x11', '\x2', '\x2', '\x13F5', '\x13FA', '\x5', '\x2BC', 
		'\x15F', '\x5', '\x13F6', '\x13F7', '\f', '\x3', '\x2', '\x2', '\x13F7', 
		'\x13F8', '\a', '\x180', '\x2', '\x2', '\x13F8', '\x13FA', '\x5', '\x2BC', 
		'\x15F', '\x4', '\x13F9', '\x13F3', '\x3', '\x2', '\x2', '\x2', '\x13F9', 
		'\x13F6', '\x3', '\x2', '\x2', '\x2', '\x13FA', '\x13FD', '\x3', '\x2', 
		'\x2', '\x2', '\x13FB', '\x13F9', '\x3', '\x2', '\x2', '\x2', '\x13FB', 
		'\x13FC', '\x3', '\x2', '\x2', '\x2', '\x13FC', '\x2BD', '\x3', '\x2', 
		'\x2', '\x2', '\x13FD', '\x13FB', '\x3', '\x2', '\x2', '\x2', '\x13FE', 
		'\x1404', '\x5', '\x2C0', '\x161', '\x2', '\x13FF', '\x1401', '\t', 'K', 
		'\x2', '\x2', '\x1400', '\x1402', '\a', '\x172', '\x2', '\x2', '\x1401', 
		'\x1400', '\x3', '\x2', '\x2', '\x2', '\x1401', '\x1402', '\x3', '\x2', 
		'\x2', '\x2', '\x1402', '\x1403', '\x3', '\x2', '\x2', '\x2', '\x1403', 
		'\x1405', '\x5', '\x2CA', '\x166', '\x2', '\x1404', '\x13FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1404', '\x1405', '\x3', '\x2', '\x2', '\x2', '\x1405', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x1406', '\x1407', '\b', '\x161', 
		'\x1', '\x2', '\x1407', '\x1408', '\x5', '\x2C2', '\x162', '\x2', '\x1408', 
		'\x140F', '\x3', '\x2', '\x2', '\x2', '\x1409', '\x140A', '\f', '\x4', 
		'\x2', '\x2', '\x140A', '\x140B', '\x5', '\x2C4', '\x163', '\x2', '\x140B', 
		'\x140C', '\x5', '\x2C0', '\x161', '\x5', '\x140C', '\x140E', '\x3', '\x2', 
		'\x2', '\x2', '\x140D', '\x1409', '\x3', '\x2', '\x2', '\x2', '\x140E', 
		'\x1411', '\x3', '\x2', '\x2', '\x2', '\x140F', '\x140D', '\x3', '\x2', 
		'\x2', '\x2', '\x140F', '\x1410', '\x3', '\x2', '\x2', '\x2', '\x1410', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x1411', '\x140F', '\x3', '\x2', 
		'\x2', '\x2', '\x1412', '\x1422', '\x5', '\x2CA', '\x166', '\x2', '\x1413', 
		'\x1415', '\a', '\x167', '\x2', '\x2', '\x1414', '\x1413', '\x3', '\x2', 
		'\x2', '\x2', '\x1414', '\x1415', '\x3', '\x2', '\x2', '\x2', '\x1415', 
		'\x1420', '\x3', '\x2', '\x2', '\x2', '\x1416', '\x1417', '\a', '\xF6', 
		'\x2', '\x2', '\x1417', '\x1421', '\x5', '\x2C6', '\x164', '\x2', '\x1418', 
		'\x1419', '\a', '*', '\x2', '\x2', '\x1419', '\x1421', '\x5', '\x2C8', 
		'\x165', '\x2', '\x141A', '\x141B', '\t', 'L', '\x2', '\x2', '\x141B', 
		'\x141E', '\x5', '\x2CA', '\x166', '\x2', '\x141C', '\x141D', '\a', '\xAE', 
		'\x2', '\x2', '\x141D', '\x141F', '\x5', '\x2CA', '\x166', '\x2', '\x141E', 
		'\x141C', '\x3', '\x2', '\x2', '\x2', '\x141E', '\x141F', '\x3', '\x2', 
		'\x2', '\x2', '\x141F', '\x1421', '\x3', '\x2', '\x2', '\x2', '\x1420', 
		'\x1416', '\x3', '\x2', '\x2', '\x2', '\x1420', '\x1418', '\x3', '\x2', 
		'\x2', '\x2', '\x1420', '\x141A', '\x3', '\x2', '\x2', '\x2', '\x1421', 
		'\x1423', '\x3', '\x2', '\x2', '\x2', '\x1422', '\x1414', '\x3', '\x2', 
		'\x2', '\x2', '\x1422', '\x1423', '\x3', '\x2', '\x2', '\x2', '\x1423', 
		'\x2C3', '\x3', '\x2', '\x2', '\x2', '\x1424', '\x1433', '\a', '\x2C7', 
		'\x2', '\x2', '\x1425', '\x142D', '\a', '\x2BE', '\x2', '\x2', '\x1426', 
		'\x1427', '\a', '\x2C3', '\x2', '\x2', '\x1427', '\x142D', '\a', '\x2C2', 
		'\x2', '\x2', '\x1428', '\x1429', '\a', '\x2C1', '\x2', '\x2', '\x1429', 
		'\x142D', '\a', '\x2C7', '\x2', '\x2', '\x142A', '\x142B', '\a', '\x2BF', 
		'\x2', '\x2', '\x142B', '\x142D', '\a', '\x2C7', '\x2', '\x2', '\x142C', 
		'\x1425', '\x3', '\x2', '\x2', '\x2', '\x142C', '\x1426', '\x3', '\x2', 
		'\x2', '\x2', '\x142C', '\x1428', '\x3', '\x2', '\x2', '\x2', '\x142C', 
		'\x142A', '\x3', '\x2', '\x2', '\x2', '\x142D', '\x1433', '\x3', '\x2', 
		'\x2', '\x2', '\x142E', '\x1430', '\t', 'M', '\x2', '\x2', '\x142F', '\x1431', 
		'\a', '\x2C7', '\x2', '\x2', '\x1430', '\x142F', '\x3', '\x2', '\x2', 
		'\x2', '\x1430', '\x1431', '\x3', '\x2', '\x2', '\x2', '\x1431', '\x1433', 
		'\x3', '\x2', '\x2', '\x2', '\x1432', '\x1424', '\x3', '\x2', '\x2', '\x2', 
		'\x1432', '\x142C', '\x3', '\x2', '\x2', '\x2', '\x1432', '\x142E', '\x3', 
		'\x2', '\x2', '\x2', '\x1433', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x1434', 
		'\x1435', '\a', '\x2B3', '\x2', '\x2', '\x1435', '\x1436', '\x5', '\x148', 
		'\xA5', '\x2', '\x1436', '\x1437', '\a', '\x2B4', '\x2', '\x2', '\x1437', 
		'\x1447', '\x3', '\x2', '\x2', '\x2', '\x1438', '\x1439', '\a', '\x2B3', 
		'\x2', '\x2', '\x1439', '\x143E', '\x5', '\x2CA', '\x166', '\x2', '\x143A', 
		'\x143B', '\a', '\x2B9', '\x2', '\x2', '\x143B', '\x143D', '\x5', '\x2CA', 
		'\x166', '\x2', '\x143C', '\x143A', '\x3', '\x2', '\x2', '\x2', '\x143D', 
		'\x1440', '\x3', '\x2', '\x2', '\x2', '\x143E', '\x143C', '\x3', '\x2', 
		'\x2', '\x2', '\x143E', '\x143F', '\x3', '\x2', '\x2', '\x2', '\x143F', 
		'\x1441', '\x3', '\x2', '\x2', '\x2', '\x1440', '\x143E', '\x3', '\x2', 
		'\x2', '\x2', '\x1441', '\x1442', '\a', '\x2B4', '\x2', '\x2', '\x1442', 
		'\x1447', '\x3', '\x2', '\x2', '\x2', '\x1443', '\x1447', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x1444', '\x1447', '\x5', '\x380', '\x1C1', '\x2', '\x1445', 
		'\x1447', '\x5', '\x382', '\x1C2', '\x2', '\x1446', '\x1434', '\x3', '\x2', 
		'\x2', '\x2', '\x1446', '\x1438', '\x3', '\x2', '\x2', '\x2', '\x1446', 
		'\x1443', '\x3', '\x2', '\x2', '\x2', '\x1446', '\x1444', '\x3', '\x2', 
		'\x2', '\x2', '\x1446', '\x1445', '\x3', '\x2', '\x2', '\x2', '\x1447', 
		'\x2C7', '\x3', '\x2', '\x2', '\x2', '\x1448', '\x1449', '\x5', '\x2CA', 
		'\x166', '\x2', '\x1449', '\x144A', '\a', '\x11', '\x2', '\x2', '\x144A', 
		'\x144B', '\x5', '\x2CA', '\x166', '\x2', '\x144B', '\x2C9', '\x3', '\x2', 
		'\x2', '\x2', '\x144C', '\x144D', '\b', '\x166', '\x1', '\x2', '\x144D', 
		'\x1456', '\x5', '\x2CE', '\x168', '\x2', '\x144E', '\x1453', '\a', '\x18', 
		'\x2', '\x2', '\x144F', '\x1454', '\a', '\x120', '\x2', '\x2', '\x1450', 
		'\x1451', '\a', '\x233', '\x2', '\x2', '\x1451', '\x1452', '\a', '\x280', 
		'\x2', '\x2', '\x1452', '\x1454', '\x5', '\x2CA', '\x166', '\x2', '\x1453', 
		'\x144F', '\x3', '\x2', '\x2', '\x2', '\x1453', '\x1450', '\x3', '\x2', 
		'\x2', '\x2', '\x1454', '\x1457', '\x3', '\x2', '\x2', '\x2', '\x1455', 
		'\x1457', '\x5', '\x2CC', '\x167', '\x2', '\x1456', '\x144E', '\x3', '\x2', 
		'\x2', '\x2', '\x1456', '\x1455', '\x3', '\x2', '\x2', '\x2', '\x1456', 
		'\x1457', '\x3', '\x2', '\x2', '\x2', '\x1457', '\x1464', '\x3', '\x2', 
		'\x2', '\x2', '\x1458', '\x1459', '\f', '\x5', '\x2', '\x2', '\x1459', 
		'\x145A', '\t', 'N', '\x2', '\x2', '\x145A', '\x1463', '\x5', '\x2CA', 
		'\x166', '\x6', '\x145B', '\x145C', '\f', '\x4', '\x2', '\x2', '\x145C', 
		'\x145D', '\t', 'O', '\x2', '\x2', '\x145D', '\x1463', '\x5', '\x2CA', 
		'\x166', '\x5', '\x145E', '\x145F', '\f', '\x3', '\x2', '\x2', '\x145F', 
		'\x1460', '\a', '\x2C6', '\x2', '\x2', '\x1460', '\x1461', '\a', '\x2C6', 
		'\x2', '\x2', '\x1461', '\x1463', '\x5', '\x2CA', '\x166', '\x4', '\x1462', 
		'\x1458', '\x3', '\x2', '\x2', '\x2', '\x1462', '\x145B', '\x3', '\x2', 
		'\x2', '\x2', '\x1462', '\x145E', '\x3', '\x2', '\x2', '\x2', '\x1463', 
		'\x1466', '\x3', '\x2', '\x2', '\x2', '\x1464', '\x1462', '\x3', '\x2', 
		'\x2', '\x2', '\x1464', '\x1465', '\x3', '\x2', '\x2', '\x2', '\x1465', 
		'\x2CB', '\x3', '\x2', '\x2', '\x2', '\x1466', '\x1464', '\x3', '\x2', 
		'\x2', '\x2', '\x1467', '\x146C', '\a', 'y', '\x2', '\x2', '\x1468', '\x1469', 
		'\a', '\x2B3', '\x2', '\x2', '\x1469', '\x146A', '\x5', '\x2CA', '\x166', 
		'\x2', '\x146A', '\x146B', '\a', '\x2B4', '\x2', '\x2', '\x146B', '\x146D', 
		'\x3', '\x2', '\x2', '\x2', '\x146C', '\x1468', '\x3', '\x2', '\x2', '\x2', 
		'\x146C', '\x146D', '\x3', '\x2', '\x2', '\x2', '\x146D', '\x146E', '\x3', 
		'\x2', '\x2', '\x2', '\x146E', '\x146F', '\a', '\x238', '\x2', '\x2', 
		'\x146F', '\x1474', '\a', '\x1EB', '\x2', '\x2', '\x1470', '\x1471', '\a', 
		'\x2B3', '\x2', '\x2', '\x1471', '\x1472', '\x5', '\x2CA', '\x166', '\x2', 
		'\x1472', '\x1473', '\a', '\x2B4', '\x2', '\x2', '\x1473', '\x1475', '\x3', 
		'\x2', '\x2', '\x2', '\x1474', '\x1470', '\x3', '\x2', '\x2', '\x2', '\x1474', 
		'\x1475', '\x3', '\x2', '\x2', '\x2', '\x1475', '\x1480', '\x3', '\x2', 
		'\x2', '\x2', '\x1476', '\x147B', '\a', '\x27D', '\x2', '\x2', '\x1477', 
		'\x1478', '\a', '\x2B3', '\x2', '\x2', '\x1478', '\x1479', '\x5', '\x2CA', 
		'\x166', '\x2', '\x1479', '\x147A', '\a', '\x2B4', '\x2', '\x2', '\x147A', 
		'\x147C', '\x3', '\x2', '\x2', '\x2', '\x147B', '\x1477', '\x3', '\x2', 
		'\x2', '\x2', '\x147B', '\x147C', '\x3', '\x2', '\x2', '\x2', '\x147C', 
		'\x147D', '\x3', '\x2', '\x2', '\x2', '\x147D', '\x147E', '\a', '\x238', 
		'\x2', '\x2', '\x147E', '\x1480', '\a', '\x145', '\x2', '\x2', '\x147F', 
		'\x1467', '\x3', '\x2', '\x2', '\x2', '\x147F', '\x1476', '\x3', '\x2', 
		'\x2', '\x2', '\x1480', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x1481', 
		'\x1486', '\x5', '\x2D6', '\x16C', '\x2', '\x1482', '\x1483', '\a', '\x2C8', 
		'\x2', '\x2', '\x1483', '\x1484', '\x5', '\x2D0', '\x169', '\x2', '\x1484', 
		'\x1485', '\a', '\x2C9', '\x2', '\x2', '\x1485', '\x1487', '\x3', '\x2', 
		'\x2', '\x2', '\x1486', '\x1482', '\x3', '\x2', '\x2', '\x2', '\x1486', 
		'\x1487', '\x3', '\x2', '\x2', '\x2', '\x1487', '\x2CF', '\x3', '\x2', 
		'\x2', '\x2', '\x1488', '\x148B', '\a', '\x12', '\x2', '\x2', '\x1489', 
		'\x148B', '\x5', '\x2B8', '\x15D', '\x2', '\x148A', '\x1488', '\x3', '\x2', 
		'\x2', '\x2', '\x148A', '\x1489', '\x3', '\x2', '\x2', '\x2', '\x148B', 
		'\x1493', '\x3', '\x2', '\x2', '\x2', '\x148C', '\x148F', '\a', '\x2B9', 
		'\x2', '\x2', '\x148D', '\x1490', '\a', '\x12', '\x2', '\x2', '\x148E', 
		'\x1490', '\x5', '\x2B8', '\x15D', '\x2', '\x148F', '\x148D', '\x3', '\x2', 
		'\x2', '\x2', '\x148F', '\x148E', '\x3', '\x2', '\x2', '\x2', '\x1490', 
		'\x1492', '\x3', '\x2', '\x2', '\x2', '\x1491', '\x148C', '\x3', '\x2', 
		'\x2', '\x2', '\x1492', '\x1495', '\x3', '\x2', '\x2', '\x2', '\x1493', 
		'\x1491', '\x3', '\x2', '\x2', '\x2', '\x1493', '\x1494', '\x3', '\x2', 
		'\x2', '\x2', '\x1494', '\x14A0', '\x3', '\x2', '\x2', '\x2', '\x1495', 
		'\x1493', '\x3', '\x2', '\x2', '\x2', '\x1496', '\x149B', '\x5', '\x2D2', 
		'\x16A', '\x2', '\x1497', '\x1498', '\a', '\x2B9', '\x2', '\x2', '\x1498', 
		'\x149A', '\x5', '\x2D2', '\x16A', '\x2', '\x1499', '\x1497', '\x3', '\x2', 
		'\x2', '\x2', '\x149A', '\x149D', '\x3', '\x2', '\x2', '\x2', '\x149B', 
		'\x1499', '\x3', '\x2', '\x2', '\x2', '\x149B', '\x149C', '\x3', '\x2', 
		'\x2', '\x2', '\x149C', '\x14A0', '\x3', '\x2', '\x2', '\x2', '\x149D', 
		'\x149B', '\x3', '\x2', '\x2', '\x2', '\x149E', '\x14A0', '\x5', '\x2D4', 
		'\x16B', '\x2', '\x149F', '\x148A', '\x3', '\x2', '\x2', '\x2', '\x149F', 
		'\x1496', '\x3', '\x2', '\x2', '\x2', '\x149F', '\x149E', '\x3', '\x2', 
		'\x2', '\x2', '\x14A0', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x14A1', 
		'\x14A2', '\a', '\xD0', '\x2', '\x2', '\x14A2', '\x14B4', '\x5', '\x3B0', 
		'\x1D9', '\x2', '\x14A3', '\x14A4', '\a', '\xF6', '\x2', '\x2', '\x14A4', 
		'\x14A6', '\a', '\x2B3', '\x2', '\x2', '\x14A5', '\x14A7', '\x5', '\x2B6', 
		'\x15C', '\x2', '\x14A6', '\x14A5', '\x3', '\x2', '\x2', '\x2', '\x14A6', 
		'\x14A7', '\x3', '\x2', '\x2', '\x2', '\x14A7', '\x14A8', '\x3', '\x2', 
		'\x2', '\x2', '\x14A8', '\x14B5', '\a', '\x2B4', '\x2', '\x2', '\x14A9', 
		'\x14AA', '\a', '\x11B', '\x2', '\x2', '\x14AA', '\x14AC', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x14AB', '\x14A9', '\x3', '\x2', '\x2', '\x2', '\x14AB', 
		'\x14AC', '\x3', '\x2', '\x2', '\x2', '\x14AC', '\x14AD', '\x3', '\x2', 
		'\x2', '\x2', '\x14AD', '\x14AE', '\a', '\xD3', '\x2', '\x2', '\x14AE', 
		'\x14AF', '\x5', '\x2B8', '\x15D', '\x2', '\x14AF', '\x14B0', '\a', '\x238', 
		'\x2', '\x2', '\x14B0', '\x14B1', '\x5', '\x2B8', '\x15D', '\x2', '\x14B1', 
		'\x14B2', '\t', 'P', '\x2', '\x2', '\x14B2', '\x14B3', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x14B3', '\x14B5', '\x3', '\x2', '\x2', '\x2', '\x14B4', 
		'\x14A3', '\x3', '\x2', '\x2', '\x2', '\x14B4', '\x14AB', '\x3', '\x2', 
		'\x2', '\x2', '\x14B5', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x14B6', 
		'\x14B7', '\a', '\xD0', '\x2', '\x2', '\x14B7', '\x14B8', '\x5', '\x36A', 
		'\x1B6', '\x2', '\x14B8', '\x14B9', '\a', '\xF6', '\x2', '\x2', '\x14B9', 
		'\x14C0', '\a', '\x2B3', '\x2', '\x2', '\x14BA', '\x14C1', '\x5', '\x148', 
		'\xA5', '\x2', '\x14BB', '\x14BD', '\a', '\x2B3', '\x2', '\x2', '\x14BC', 
		'\x14BE', '\x5', '\x2B6', '\x15C', '\x2', '\x14BD', '\x14BC', '\x3', '\x2', 
		'\x2', '\x2', '\x14BD', '\x14BE', '\x3', '\x2', '\x2', '\x2', '\x14BE', 
		'\x14BF', '\x3', '\x2', '\x2', '\x2', '\x14BF', '\x14C1', '\a', '\x2B4', 
		'\x2', '\x2', '\x14C0', '\x14BA', '\x3', '\x2', '\x2', '\x2', '\x14C0', 
		'\x14BB', '\x3', '\x2', '\x2', '\x2', '\x14C1', '\x14C2', '\x3', '\x2', 
		'\x2', '\x2', '\x14C2', '\x14C3', '\a', '\x2B4', '\x2', '\x2', '\x14C3', 
		'\x2D5', '\x3', '\x2', '\x2', '\x2', '\x14C4', '\x14C5', '\t', 'O', '\x2', 
		'\x2', '\x14C5', '\x14D5', '\x5', '\x2D6', '\x16C', '\x2', '\x14C6', '\x14C7', 
		'\a', '\x1AC', '\x2', '\x2', '\x14C7', '\x14D5', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x14C8', '\x14C9', '\a', '[', '\x2', '\x2', '\x14C9', '\x14D5', 
		'\x5', '\x2D6', '\x16C', '\x2', '\x14CA', '\x14CB', '\a', '\x151', '\x2', 
		'\x2', '\x14CB', '\x14D5', '\x5', '\x2D6', '\x16C', '\x2', '\x14CC', '\x14CD', 
		'\a', '\x93', '\x2', '\x2', '\x14CD', '\x14D5', '\x5', '\x2D6', '\x16C', 
		'\x2', '\x14CE', '\x14CF', '\a', '\xE', '\x2', '\x2', '\x14CF', '\x14D5', 
		'\x5', '\x2D6', '\x16C', '\x2', '\x14D0', '\x14D5', '\x5', '\x2D8', '\x16D', 
		'\x2', '\x14D1', '\x14D5', '\x5', '\x2E6', '\x174', '\x2', '\x14D2', '\x14D5', 
		'\x5', '\x2EA', '\x176', '\x2', '\x14D3', '\x14D5', '\x5', '\x2E4', '\x173', 
		'\x2', '\x14D4', '\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14D4', '\x14C6', 
		'\x3', '\x2', '\x2', '\x2', '\x14D4', '\x14C8', '\x3', '\x2', '\x2', '\x2', 
		'\x14D4', '\x14CA', '\x3', '\x2', '\x2', '\x2', '\x14D4', '\x14CC', '\x3', 
		'\x2', '\x2', '\x2', '\x14D4', '\x14CE', '\x3', '\x2', '\x2', '\x2', '\x14D4', 
		'\x14D0', '\x3', '\x2', '\x2', '\x2', '\x14D4', '\x14D1', '\x3', '\x2', 
		'\x2', '\x2', '\x14D4', '\x14D2', '\x3', '\x2', '\x2', '\x2', '\x14D4', 
		'\x14D3', '\x3', '\x2', '\x2', '\x2', '\x14D5', '\x2D7', '\x3', '\x2', 
		'\x2', '\x2', '\x14D6', '\x14D9', '\x5', '\x2DE', '\x170', '\x2', '\x14D7', 
		'\x14D9', '\x5', '\x2DA', '\x16E', '\x2', '\x14D8', '\x14D6', '\x3', '\x2', 
		'\x2', '\x2', '\x14D8', '\x14D7', '\x3', '\x2', '\x2', '\x2', '\x14D9', 
		'\x2D9', '\x3', '\x2', '\x2', '\x2', '\x14DA', '\x14DC', '\x5', '\x34C', 
		'\x1A7', '\x2', '\x14DB', '\x14DA', '\x3', '\x2', '\x2', '\x2', '\x14DB', 
		'\x14DC', '\x3', '\x2', '\x2', '\x2', '\x14DC', '\x14DD', '\x3', '\x2', 
		'\x2', '\x2', '\x14DD', '\x14DE', '\a', '\x41', '\x2', '\x2', '\x14DE', 
		'\x14E0', '\x5', '\x2B8', '\x15D', '\x2', '\x14DF', '\x14E1', '\x5', '\x2DC', 
		'\x16F', '\x2', '\x14E0', '\x14DF', '\x3', '\x2', '\x2', '\x2', '\x14E1', 
		'\x14E2', '\x3', '\x2', '\x2', '\x2', '\x14E2', '\x14E0', '\x3', '\x2', 
		'\x2', '\x2', '\x14E2', '\x14E3', '\x3', '\x2', '\x2', '\x2', '\x14E3', 
		'\x14E5', '\x3', '\x2', '\x2', '\x2', '\x14E4', '\x14E6', '\x5', '\x2E2', 
		'\x172', '\x2', '\x14E5', '\x14E4', '\x3', '\x2', '\x2', '\x2', '\x14E5', 
		'\x14E6', '\x3', '\x2', '\x2', '\x2', '\x14E6', '\x14E7', '\x3', '\x2', 
		'\x2', '\x2', '\x14E7', '\x14E9', '\a', '\xA9', '\x2', '\x2', '\x14E8', 
		'\x14EA', '\a', '\x41', '\x2', '\x2', '\x14E9', '\x14E8', '\x3', '\x2', 
		'\x2', '\x2', '\x14E9', '\x14EA', '\x3', '\x2', '\x2', '\x2', '\x14EA', 
		'\x14EC', '\x3', '\x2', '\x2', '\x2', '\x14EB', '\x14ED', '\x5', '\x34C', 
		'\x1A7', '\x2', '\x14EC', '\x14EB', '\x3', '\x2', '\x2', '\x2', '\x14EC', 
		'\x14ED', '\x3', '\x2', '\x2', '\x2', '\x14ED', '\x2DB', '\x3', '\x2', 
		'\x2', '\x2', '\x14EE', '\x14EF', '\a', '\x267', '\x2', '\x2', '\x14EF', 
		'\x14F0', '\x5', '\x2B8', '\x15D', '\x2', '\x14F0', '\x14F3', '\a', '\x22C', 
		'\x2', '\x2', '\x14F1', '\x14F4', '\x5', '\x1A6', '\xD4', '\x2', '\x14F2', 
		'\x14F4', '\x5', '\x2B8', '\x15D', '\x2', '\x14F3', '\x14F1', '\x3', '\x2', 
		'\x2', '\x2', '\x14F3', '\x14F2', '\x3', '\x2', '\x2', '\x2', '\x14F4', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x14F5', '\x14F7', '\x5', '\x34C', 
		'\x1A7', '\x2', '\x14F6', '\x14F5', '\x3', '\x2', '\x2', '\x2', '\x14F6', 
		'\x14F7', '\x3', '\x2', '\x2', '\x2', '\x14F7', '\x14F8', '\x3', '\x2', 
		'\x2', '\x2', '\x14F8', '\x14FA', '\a', '\x41', '\x2', '\x2', '\x14F9', 
		'\x14FB', '\x5', '\x2E0', '\x171', '\x2', '\x14FA', '\x14F9', '\x3', '\x2', 
		'\x2', '\x2', '\x14FB', '\x14FC', '\x3', '\x2', '\x2', '\x2', '\x14FC', 
		'\x14FA', '\x3', '\x2', '\x2', '\x2', '\x14FC', '\x14FD', '\x3', '\x2', 
		'\x2', '\x2', '\x14FD', '\x14FF', '\x3', '\x2', '\x2', '\x2', '\x14FE', 
		'\x1500', '\x5', '\x2E2', '\x172', '\x2', '\x14FF', '\x14FE', '\x3', '\x2', 
		'\x2', '\x2', '\x14FF', '\x1500', '\x3', '\x2', '\x2', '\x2', '\x1500', 
		'\x1501', '\x3', '\x2', '\x2', '\x2', '\x1501', '\x1503', '\a', '\xA9', 
		'\x2', '\x2', '\x1502', '\x1504', '\a', '\x41', '\x2', '\x2', '\x1503', 
		'\x1502', '\x3', '\x2', '\x2', '\x2', '\x1503', '\x1504', '\x3', '\x2', 
		'\x2', '\x2', '\x1504', '\x1506', '\x3', '\x2', '\x2', '\x2', '\x1505', 
		'\x1507', '\x5', '\x34C', '\x1A7', '\x2', '\x1506', '\x1505', '\x3', '\x2', 
		'\x2', '\x2', '\x1506', '\x1507', '\x3', '\x2', '\x2', '\x2', '\x1507', 
		'\x2DF', '\x3', '\x2', '\x2', '\x2', '\x1508', '\x1509', '\a', '\x267', 
		'\x2', '\x2', '\x1509', '\x150A', '\x5', '\x2B8', '\x15D', '\x2', '\x150A', 
		'\x150D', '\a', '\x22C', '\x2', '\x2', '\x150B', '\x150E', '\x5', '\x1A6', 
		'\xD4', '\x2', '\x150C', '\x150E', '\x5', '\x2B8', '\x15D', '\x2', '\x150D', 
		'\x150B', '\x3', '\x2', '\x2', '\x2', '\x150D', '\x150C', '\x3', '\x2', 
		'\x2', '\x2', '\x150E', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x150F', 
		'\x1512', '\a', '\xA2', '\x2', '\x2', '\x1510', '\x1513', '\x5', '\x1A6', 
		'\xD4', '\x2', '\x1511', '\x1513', '\x5', '\x2B8', '\x15D', '\x2', '\x1512', 
		'\x1510', '\x3', '\x2', '\x2', '\x2', '\x1512', '\x1511', '\x3', '\x2', 
		'\x2', '\x2', '\x1513', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x1514', 
		'\x1515', '\x5', '\x386', '\x1C4', '\x2', '\x1515', '\x1516', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x1516', '\x1528', '\x3', '\x2', '\x2', '\x2', '\x1517', 
		'\x1528', '\x5', '\x380', '\x1C1', '\x2', '\x1518', '\x1528', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x1519', '\x1528', '\x5', '\x382', '\x1C2', '\x2', '\x151A', 
		'\x151B', '\a', '\x2B3', '\x2', '\x2', '\x151B', '\x151C', '\x5', '\x148', 
		'\xA5', '\x2', '\x151C', '\x1520', '\a', '\x2B4', '\x2', '\x2', '\x151D', 
		'\x151F', '\x5', '\x20A', '\x106', '\x2', '\x151E', '\x151D', '\x3', '\x2', 
		'\x2', '\x2', '\x151F', '\x1522', '\x3', '\x2', '\x2', '\x2', '\x1520', 
		'\x151E', '\x3', '\x2', '\x2', '\x2', '\x1520', '\x1521', '\x3', '\x2', 
		'\x2', '\x2', '\x1521', '\x1528', '\x3', '\x2', '\x2', '\x2', '\x1522', 
		'\x1520', '\x3', '\x2', '\x2', '\x2', '\x1523', '\x1524', '\a', '\x2B3', 
		'\x2', '\x2', '\x1524', '\x1525', '\x5', '\x2B6', '\x15C', '\x2', '\x1525', 
		'\x1526', '\a', '\x2B4', '\x2', '\x2', '\x1526', '\x1528', '\x3', '\x2', 
		'\x2', '\x2', '\x1527', '\x1514', '\x3', '\x2', '\x2', '\x2', '\x1527', 
		'\x1517', '\x3', '\x2', '\x2', '\x2', '\x1527', '\x1518', '\x3', '\x2', 
		'\x2', '\x2', '\x1527', '\x1519', '\x3', '\x2', '\x2', '\x2', '\x1527', 
		'\x151A', '\x3', '\x2', '\x2', '\x2', '\x1527', '\x1523', '\x3', '\x2', 
		'\x2', '\x2', '\x1528', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x1529', 
		'\x1532', '\t', 'Q', '\x2', '\x2', '\x152A', '\x152B', '\a', '\x2B3', 
		'\x2', '\x2', '\x152B', '\x152C', '\x5', '\x148', '\xA5', '\x2', '\x152C', 
		'\x152D', '\a', '\x2B4', '\x2', '\x2', '\x152D', '\x1533', '\x3', '\x2', 
		'\x2', '\x2', '\x152E', '\x152F', '\a', '\x2B3', '\x2', '\x2', '\x152F', 
		'\x1530', '\x5', '\x2B8', '\x15D', '\x2', '\x1530', '\x1531', '\a', '\x2B4', 
		'\x2', '\x2', '\x1531', '\x1533', '\x3', '\x2', '\x2', '\x2', '\x1532', 
		'\x152A', '\x3', '\x2', '\x2', '\x2', '\x1532', '\x152E', '\x3', '\x2', 
		'\x2', '\x2', '\x1533', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x1534', 
		'\x1535', '\a', '\x29D', '\x2', '\x2', '\x1535', '\x1536', '\a', '\x2B3', 
		'\x2', '\x2', '\x1536', '\x1537', '\x5', '\x2B8', '\x15D', '\x2', '\x1537', 
		'\x1538', '\a', '\x2B9', '\x2', '\x2', '\x1538', '\x153B', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x1539', '\x153A', '\a', '\x2B9', '\x2', '\x2', '\x153A', 
		'\x153C', '\x5', '\x2B8', '\x15D', '\x2', '\x153B', '\x1539', '\x3', '\x2', 
		'\x2', '\x2', '\x153B', '\x153C', '\x3', '\x2', '\x2', '\x2', '\x153C', 
		'\x153D', '\x3', '\x2', '\x2', '\x2', '\x153D', '\x153E', '\a', '\x2B4', 
		'\x2', '\x2', '\x153E', '\x157B', '\x3', '\x2', '\x2', '\x2', '\x153F', 
		'\x1540', '\a', '\x29E', '\x2', '\x2', '\x1540', '\x1544', '\a', '\x2B3', 
		'\x2', '\x2', '\x1541', '\x1545', '\x5', '\x386', '\x1C4', '\x2', '\x1542', 
		'\x1545', '\x5', '\x2EA', '\x176', '\x2', '\x1543', '\x1545', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x1544', '\x1541', '\x3', '\x2', '\x2', '\x2', '\x1544', 
		'\x1542', '\x3', '\x2', '\x2', '\x2', '\x1544', '\x1543', '\x3', '\x2', 
		'\x2', '\x2', '\x1545', '\x1548', '\x3', '\x2', '\x2', '\x2', '\x1546', 
		'\x1547', '\a', '\x2B9', '\x2', '\x2', '\x1547', '\x1549', '\x5', '\x3CA', 
		'\x1E6', '\x2', '\x1548', '\x1546', '\x3', '\x2', '\x2', '\x2', '\x1548', 
		'\x1549', '\x3', '\x2', '\x2', '\x2', '\x1549', '\x154C', '\x3', '\x2', 
		'\x2', '\x2', '\x154A', '\x154B', '\a', '\x2B9', '\x2', '\x2', '\x154B', 
		'\x154D', '\x5', '\x3CA', '\x1E6', '\x2', '\x154C', '\x154A', '\x3', '\x2', 
		'\x2', '\x2', '\x154C', '\x154D', '\x3', '\x2', '\x2', '\x2', '\x154D', 
		'\x154E', '\x3', '\x2', '\x2', '\x2', '\x154E', '\x154F', '\a', '\x2B4', 
		'\x2', '\x2', '\x154F', '\x157B', '\x3', '\x2', '\x2', '\x2', '\x1550', 
		'\x1551', '\a', '\x291', '\x2', '\x2', '\x1551', '\x1552', '\a', '\x2B3', 
		'\x2', '\x2', '\x1552', '\x1553', '\x5', '\x2B6', '\x15C', '\x2', '\x1553', 
		'\x1554', '\a', '\x2B4', '\x2', '\x2', '\x1554', '\x157B', '\x3', '\x2', 
		'\x2', '\x2', '\x1555', '\x1556', '\a', 'I', '\x2', '\x2', '\x1556', '\x1557', 
		'\a', '\x2B3', '\x2', '\x2', '\x1557', '\x1558', '\x5', '\x2CA', '\x166', 
		'\x2', '\x1558', '\x1559', '\a', '\x256', '\x2', '\x2', '\x1559', '\x155A', 
		'\a', '\x14D', '\x2', '\x2', '\x155A', '\x155B', '\a', '\x2B4', '\x2', 
		'\x2', '\x155B', '\x157B', '\x3', '\x2', '\x2', '\x2', '\x155C', '\x155D', 
		'\a', '\x298', '\x2', '\x2', '\x155D', '\x155E', '\a', '\x2B3', '\x2', 
		'\x2', '\x155E', '\x155F', '\x5', '\x2B8', '\x15D', '\x2', '\x155F', '\x1560', 
		'\a', '\x2B9', '\x2', '\x2', '\x1560', '\x1561', '\x5', '\x2B8', '\x15D', 
		'\x2', '\x1561', '\x1562', '\a', '\x2B4', '\x2', '\x2', '\x1562', '\x157B', 
		'\x3', '\x2', '\x2', '\x2', '\x1563', '\x1564', '\a', '\x29F', '\x2', 
		'\x2', '\x1564', '\x156C', '\a', '\x2B3', '\x2', '\x2', '\x1565', '\x1567', 
		'\t', 'R', '\x2', '\x2', '\x1566', '\x1565', '\x3', '\x2', '\x2', '\x2', 
		'\x1566', '\x1567', '\x3', '\x2', '\x2', '\x2', '\x1567', '\x1569', '\x3', 
		'\x2', '\x2', '\x2', '\x1568', '\x156A', '\x5', '\x3CA', '\x1E6', '\x2', 
		'\x1569', '\x1568', '\x3', '\x2', '\x2', '\x2', '\x1569', '\x156A', '\x3', 
		'\x2', '\x2', '\x2', '\x156A', '\x156B', '\x3', '\x2', '\x2', '\x2', '\x156B', 
		'\x156D', '\a', '\xD3', '\x2', '\x2', '\x156C', '\x1566', '\x3', '\x2', 
		'\x2', '\x2', '\x156C', '\x156D', '\x3', '\x2', '\x2', '\x2', '\x156D', 
		'\x156E', '\x3', '\x2', '\x2', '\x2', '\x156E', '\x156F', '\x5', '\x2CA', 
		'\x166', '\x2', '\x156F', '\x1570', '\a', '\x2B4', '\x2', '\x2', '\x1570', 
		'\x157B', '\x3', '\x2', '\x2', '\x2', '\x1571', '\x1572', '\a', '\x2A6', 
		'\x2', '\x2', '\x1572', '\x1573', '\a', '\x2B3', '\x2', '\x2', '\x1573', 
		'\x1576', '\x5', '\x2B8', '\x15D', '\x2', '\x1574', '\x1575', '\a', '\x2B9', 
		'\x2', '\x2', '\x1575', '\x1577', '\x5', '\x3CA', '\x1E6', '\x2', '\x1576', 
		'\x1574', '\x3', '\x2', '\x2', '\x2', '\x1576', '\x1577', '\x3', '\x2', 
		'\x2', '\x2', '\x1577', '\x1578', '\x3', '\x2', '\x2', '\x2', '\x1578', 
		'\x1579', '\a', '\x2B4', '\x2', '\x2', '\x1579', '\x157B', '\x3', '\x2', 
		'\x2', '\x2', '\x157A', '\x1534', '\x3', '\x2', '\x2', '\x2', '\x157A', 
		'\x153F', '\x3', '\x2', '\x2', '\x2', '\x157A', '\x1550', '\x3', '\x2', 
		'\x2', '\x2', '\x157A', '\x1555', '\x3', '\x2', '\x2', '\x2', '\x157A', 
		'\x155C', '\x3', '\x2', '\x2', '\x2', '\x157A', '\x1563', '\x3', '\x2', 
		'\x2', '\x2', '\x157A', '\x1571', '\x3', '\x2', '\x2', '\x2', '\x157B', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x157C', '\x1580', '\x5', '\x2E8', 
		'\x175', '\x2', '\x157D', '\x1580', '\x5', '\x2EC', '\x177', '\x2', '\x157E', 
		'\x1580', '\x5', '\x2F0', '\x179', '\x2', '\x157F', '\x157C', '\x3', '\x2', 
		'\x2', '\x2', '\x157F', '\x157D', '\x3', '\x2', '\x2', '\x2', '\x157F', 
		'\x157E', '\x3', '\x2', '\x2', '\x2', '\x1580', '\x2EB', '\x3', '\x2', 
		'\x2', '\x2', '\x1581', '\x1584', '\x5', '\x2EE', '\x178', '\x2', '\x1582', 
		'\x1585', '\x5', '\x2D2', '\x16A', '\x2', '\x1583', '\x1585', '\x5', '\x2D4', 
		'\x16B', '\x2', '\x1584', '\x1582', '\x3', '\x2', '\x2', '\x2', '\x1584', 
		'\x1583', '\x3', '\x2', '\x2', '\x2', '\x1584', '\x1585', '\x3', '\x2', 
		'\x2', '\x2', '\x1585', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x1586', 
		'\x1587', '\a', '\x2A0', '\x2', '\x2', '\x1587', '\x1589', '\a', '\x2B3', 
		'\x2', '\x2', '\x1588', '\x158A', '\t', 'S', '\x2', '\x2', '\x1589', '\x1588', 
		'\x3', '\x2', '\x2', '\x2', '\x1589', '\x158A', '\x3', '\x2', '\x2', '\x2', 
		'\x158A', '\x158B', '\x3', '\x2', '\x2', '\x2', '\x158B', '\x158C', '\x5', 
		'\x2B8', '\x15D', '\x2', '\x158C', '\x158D', '\a', '\x2B4', '\x2', '\x2', 
		'\x158D', '\x15C1', '\x3', '\x2', '\x2', '\x2', '\x158E', '\x158F', '\a', 
		'j', '\x2', '\x2', '\x158F', '\x1597', '\a', '\x2B3', '\x2', '\x2', '\x1590', 
		'\x1598', '\a', '\x2B6', '\x2', '\x2', '\x1591', '\x1593', '\t', '=', 
		'\x2', '\x2', '\x1592', '\x1591', '\x3', '\x2', '\x2', '\x2', '\x1592', 
		'\x1593', '\x3', '\x2', '\x2', '\x2', '\x1593', '\x1594', '\x3', '\x2', 
		'\x2', '\x2', '\x1594', '\x1596', '\x5', '\x2CA', '\x166', '\x2', '\x1595', 
		'\x1592', '\x3', '\x2', '\x2', '\x2', '\x1595', '\x1596', '\x3', '\x2', 
		'\x2', '\x2', '\x1596', '\x1598', '\x3', '\x2', '\x2', '\x2', '\x1597', 
		'\x1590', '\x3', '\x2', '\x2', '\x2', '\x1597', '\x1595', '\x3', '\x2', 
		'\x2', '\x2', '\x1598', '\x1599', '\x3', '\x2', '\x2', '\x2', '\x1599', 
		'\x159B', '\a', '\x2B4', '\x2', '\x2', '\x159A', '\x159C', '\x5', '\x2F8', 
		'\x17D', '\x2', '\x159B', '\x159A', '\x3', '\x2', '\x2', '\x2', '\x159B', 
		'\x159C', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x15C1', '\x3', '\x2', 
		'\x2', '\x2', '\x159D', '\x159E', '\a', '\x29B', '\x2', '\x2', '\x159E', 
		'\x159F', '\a', '\x2B3', '\x2', '\x2', '\x159F', '\x15A2', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x15A0', '\x15A1', '\a', '\x2B9', '\x2', '\x2', '\x15A1', 
		'\x15A3', '\a', '\x2AD', '\x2', '\x2', '\x15A2', '\x15A0', '\x3', '\x2', 
		'\x2', '\x2', '\x15A2', '\x15A3', '\x3', '\x2', '\x2', '\x2', '\x15A3', 
		'\x15A4', '\x3', '\x2', '\x2', '\x2', '\x15A4', '\x15A5', '\a', '\x2B4', 
		'\x2', '\x2', '\x15A5', '\x15C1', '\x3', '\x2', '\x2', '\x2', '\x15A6', 
		'\x15A7', '\a', '\x28E', '\x2', '\x2', '\x15A7', '\x15A9', '\a', '\x2B3', 
		'\x2', '\x2', '\x15A8', '\x15AA', '\t', 'S', '\x2', '\x2', '\x15A9', '\x15A8', 
		'\x3', '\x2', '\x2', '\x2', '\x15A9', '\x15AA', '\x3', '\x2', '\x2', '\x2', 
		'\x15AA', '\x15AB', '\x3', '\x2', '\x2', '\x2', '\x15AB', '\x15AC', '\x5', 
		'\x2B8', '\x15D', '\x2', '\x15AC', '\x15AD', '\a', '\x2B4', '\x2', '\x2', 
		'\x15AD', '\x15C1', '\x3', '\x2', '\x2', '\x2', '\x15AE', '\x15AF', '\a', 
		'\x294', '\x2', '\x2', '\x15AF', '\x15B1', '\a', '\x2B3', '\x2', '\x2', 
		'\x15B0', '\x15B2', '\t', 'S', '\x2', '\x2', '\x15B1', '\x15B0', '\x3', 
		'\x2', '\x2', '\x2', '\x15B1', '\x15B2', '\x3', '\x2', '\x2', '\x2', '\x15B2', 
		'\x15B3', '\x3', '\x2', '\x2', '\x2', '\x15B3', '\x15B4', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x15B4', '\x15B5', '\a', '\x2B4', '\x2', '\x2', '\x15B5', 
		'\x15C1', '\x3', '\x2', '\x2', '\x2', '\x15B6', '\x15B7', '\a', '\x2A4', 
		'\x2', '\x2', '\x15B7', '\x15B8', '\a', '\x2B3', '\x2', '\x2', '\x15B8', 
		'\x15B9', '\x5', '\x2B6', '\x15C', '\x2', '\x15B9', '\x15BA', '\a', '\x2B4', 
		'\x2', '\x2', '\x15BA', '\x15C1', '\x3', '\x2', '\x2', '\x2', '\x15BB', 
		'\x15BC', '\a', '\x2A5', '\x2', '\x2', '\x15BC', '\x15BD', '\a', '\x2B3', 
		'\x2', '\x2', '\x15BD', '\x15BE', '\x5', '\x2B6', '\x15C', '\x2', '\x15BE', 
		'\x15BF', '\a', '\x2B4', '\x2', '\x2', '\x15BF', '\x15C1', '\x3', '\x2', 
		'\x2', '\x2', '\x15C0', '\x1586', '\x3', '\x2', '\x2', '\x2', '\x15C0', 
		'\x158E', '\x3', '\x2', '\x2', '\x2', '\x15C0', '\x159D', '\x3', '\x2', 
		'\x2', '\x2', '\x15C0', '\x15A6', '\x3', '\x2', '\x2', '\x2', '\x15C0', 
		'\x15AE', '\x3', '\x2', '\x2', '\x2', '\x15C0', '\x15B6', '\x3', '\x2', 
		'\x2', '\x2', '\x15C0', '\x15BB', '\x3', '\x2', '\x2', '\x2', '\x15C1', 
		'\x2EF', '\x3', '\x2', '\x2', '\x2', '\x15C2', '\x15C3', '\x5', '\x2F2', 
		'\x17A', '\x2', '\x15C3', '\x15C5', '\x5', '\x370', '\x1B9', '\x2', '\x15C4', 
		'\x15C6', '\x5', '\x2F8', '\x17D', '\x2', '\x15C5', '\x15C4', '\x3', '\x2', 
		'\x2', '\x2', '\x15C5', '\x15C6', '\x3', '\x2', '\x2', '\x2', '\x15C6', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x15C7', '\x15C8', '\x5', '\x3BE', 
		'\x1E0', '\x2', '\x15C8', '\x15CA', '\x5', '\x372', '\x1BA', '\x2', '\x15C9', 
		'\x15CB', '\x5', '\x300', '\x181', '\x2', '\x15CA', '\x15C9', '\x3', '\x2', 
		'\x2', '\x2', '\x15CA', '\x15CB', '\x3', '\x2', '\x2', '\x2', '\x15CB', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x15CC', '\x15CD', '\a', 'j', '\x2', 
		'\x2', '\x15CD', '\x15D3', '\a', '\x2B3', '\x2', '\x2', '\x15CE', '\x15D4', 
		'\a', '\x2B6', '\x2', '\x2', '\x15CF', '\x15D1', '\t', '=', '\x2', '\x2', 
		'\x15D0', '\x15CF', '\x3', '\x2', '\x2', '\x2', '\x15D0', '\x15D1', '\x3', 
		'\x2', '\x2', '\x2', '\x15D1', '\x15D2', '\x3', '\x2', '\x2', '\x2', '\x15D2', 
		'\x15D4', '\x5', '\x2CA', '\x166', '\x2', '\x15D3', '\x15CE', '\x3', '\x2', 
		'\x2', '\x2', '\x15D3', '\x15D0', '\x3', '\x2', '\x2', '\x2', '\x15D4', 
		'\x15D5', '\x3', '\x2', '\x2', '\x2', '\x15D5', '\x15D7', '\a', '\x2B4', 
		'\x2', '\x2', '\x15D6', '\x15D8', '\x5', '\x2F8', '\x17D', '\x2', '\x15D7', 
		'\x15D6', '\x3', '\x2', '\x2', '\x2', '\x15D7', '\x15D8', '\x3', '\x2', 
		'\x2', '\x2', '\x15D8', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x15D9', 
		'\x15DA', '\t', 'T', '\x2', '\x2', '\x15DA', '\x15E1', '\a', '\x2B3', 
		'\x2', '\x2', '\x15DB', '\x15DC', '\a', '\x147', '\x2', '\x2', '\x15DC', 
		'\x15DD', '\a', '\x2B3', '\x2', '\x2', '\x15DD', '\x15DE', '\x5', '\x148', 
		'\xA5', '\x2', '\x15DE', '\x15DF', '\a', '\x2B4', '\x2', '\x2', '\x15DF', 
		'\x15E2', '\x3', '\x2', '\x2', '\x2', '\x15E0', '\x15E2', '\x5', '\x2CA', 
		'\x166', '\x2', '\x15E1', '\x15DB', '\x3', '\x2', '\x2', '\x2', '\x15E1', 
		'\x15E0', '\x3', '\x2', '\x2', '\x2', '\x15E2', '\x15E3', '\x3', '\x2', 
		'\x2', '\x2', '\x15E3', '\x15E4', '\a', '\x15', '\x2', '\x2', '\x15E4', 
		'\x15E5', '\x5', '\x378', '\x1BD', '\x2', '\x15E5', '\x15E6', '\a', '\x2B4', 
		'\x2', '\x2', '\x15E6', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x15E7', 
		'\x15E8', '\a', 'O', '\x2', '\x2', '\x15E8', '\x15E9', '\a', '\x2B3', 
		'\x2', '\x2', '\x15E9', '\x15EF', '\x5', '\x386', '\x1C4', '\x2', '\x15EA', 
		'\x15ED', '\a', '\x2B9', '\x2', '\x2', '\x15EB', '\x15EE', '\x5', '\x3C6', 
		'\x1E4', '\x2', '\x15EC', '\x15EE', '\x5', '\x3CA', '\x1E6', '\x2', '\x15ED', 
		'\x15EB', '\x3', '\x2', '\x2', '\x2', '\x15ED', '\x15EC', '\x3', '\x2', 
		'\x2', '\x2', '\x15EE', '\x15F0', '\x3', '\x2', '\x2', '\x2', '\x15EF', 
		'\x15EA', '\x3', '\x2', '\x2', '\x2', '\x15EF', '\x15F0', '\x3', '\x2', 
		'\x2', '\x2', '\x15F0', '\x15F1', '\x3', '\x2', '\x2', '\x2', '\x15F1', 
		'\x15F2', '\a', '\x2B4', '\x2', '\x2', '\x15F2', '\x16FE', '\x3', '\x2', 
		'\x2', '\x2', '\x15F3', '\x15F4', '\a', 'P', '\x2', '\x2', '\x15F4', '\x15F6', 
		'\a', '\x2B3', '\x2', '\x2', '\x15F5', '\x15F7', '\t', 'U', '\x2', '\x2', 
		'\x15F6', '\x15F5', '\x3', '\x2', '\x2', '\x2', '\x15F6', '\x15F7', '\x3', 
		'\x2', '\x2', '\x2', '\x15F7', '\x15F8', '\x3', '\x2', '\x2', '\x2', '\x15F8', 
		'\x15FA', '\x5', '\x2CA', '\x166', '\x2', '\x15F9', '\x15FB', '\x5', '\x304', 
		'\x183', '\x2', '\x15FA', '\x15F9', '\x3', '\x2', '\x2', '\x2', '\x15FA', 
		'\x15FB', '\x3', '\x2', '\x2', '\x2', '\x15FB', '\x15FC', '\x3', '\x2', 
		'\x2', '\x2', '\x15FC', '\x15FD', '\a', '\x2B4', '\x2', '\x2', '\x15FD', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x15FE', '\x15FF', '\x5', '\x2F4', 
		'\x17B', '\x2', '\x15FF', '\x1601', '\x5', '\x36E', '\x1B8', '\x2', '\x1600', 
		'\x1602', '\x5', '\x306', '\x184', '\x2', '\x1601', '\x1600', '\x3', '\x2', 
		'\x2', '\x2', '\x1602', '\x1603', '\x3', '\x2', '\x2', '\x2', '\x1603', 
		'\x1601', '\x3', '\x2', '\x2', '\x2', '\x1603', '\x1604', '\x3', '\x2', 
		'\x2', '\x2', '\x1604', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x1605', 
		'\x1606', '\x5', '\x33C', '\x19F', '\x2', '\x1606', '\x1607', '\t', 'V', 
		'\x2', '\x2', '\x1607', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x1608', 
		'\x1609', '\a', '\x82', '\x2', '\x2', '\x1609', '\x160A', '\a', '\x2B3', 
		'\x2', '\x2', '\x160A', '\x160C', '\x5', '\x2CA', '\x166', '\x2', '\x160B', 
		'\x160D', '\t', 'W', '\x2', '\x2', '\x160C', '\x160B', '\x3', '\x2', '\x2', 
		'\x2', '\x160C', '\x160D', '\x3', '\x2', '\x2', '\x2', '\x160D', '\x160E', 
		'\x3', '\x2', '\x2', '\x2', '\x160E', '\x160F', '\a', '\x2B4', '\x2', 
		'\x2', '\x160F', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x1610', '\x1611', 
		'\a', '\xBF', '\x2', '\x2', '\x1611', '\x1612', '\a', '\x2B3', '\x2', 
		'\x2', '\x1612', '\x1613', '\x5', '\x3BE', '\x1E0', '\x2', '\x1613', '\x1614', 
		'\a', '\xD3', '\x2', '\x2', '\x1614', '\x1615', '\x5', '\x2CA', '\x166', 
		'\x2', '\x1615', '\x1616', '\a', '\x2B4', '\x2', '\x2', '\x1616', '\x16FE', 
		'\x3', '\x2', '\x2', '\x2', '\x1617', '\x1618', '\t', 'X', '\x2', '\x2', 
		'\x1618', '\x161A', '\x5', '\x370', '\x1B9', '\x2', '\x1619', '\x161B', 
		'\x5', '\x374', '\x1BB', '\x2', '\x161A', '\x1619', '\x3', '\x2', '\x2', 
		'\x2', '\x161A', '\x161B', '\x3', '\x2', '\x2', '\x2', '\x161B', '\x161C', 
		'\x3', '\x2', '\x2', '\x2', '\x161C', '\x161D', '\x5', '\x2F8', '\x17D', 
		'\x2', '\x161D', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x161E', '\x161F', 
		'\x5', '\x2F6', '\x17C', '\x2', '\x161F', '\x1620', '\a', '\x2B3', '\x2', 
		'\x2', '\x1620', '\x1622', '\x5', '\x2B6', '\x15C', '\x2', '\x1621', '\x1623', 
		'\x5', '\x308', '\x185', '\x2', '\x1622', '\x1621', '\x3', '\x2', '\x2', 
		'\x2', '\x1622', '\x1623', '\x3', '\x2', '\x2', '\x2', '\x1623', '\x1625', 
		'\x3', '\x2', '\x2', '\x2', '\x1624', '\x1626', '\x5', '\x300', '\x181', 
		'\x2', '\x1625', '\x1624', '\x3', '\x2', '\x2', '\x2', '\x1625', '\x1626', 
		'\x3', '\x2', '\x2', '\x2', '\x1626', '\x1627', '\x3', '\x2', '\x2', '\x2', 
		'\x1627', '\x1628', '\a', '\x2B4', '\x2', '\x2', '\x1628', '\x16FE', '\x3', 
		'\x2', '\x2', '\x2', '\x1629', '\x162A', '\a', '\x23B', '\x2', '\x2', 
		'\x162A', '\x162B', '\a', '\x2B3', '\x2', '\x2', '\x162B', '\x162E', '\x5', 
		'\x2B8', '\x15D', '\x2', '\x162C', '\x162D', '\a', '\x256', '\x2', '\x2', 
		'\x162D', '\x162F', '\t', 'Y', '\x2', '\x2', '\x162E', '\x162C', '\x3', 
		'\x2', '\x2', '\x2', '\x162E', '\x162F', '\x3', '\x2', '\x2', '\x2', '\x162F', 
		'\x1634', '\x3', '\x2', '\x2', '\x2', '\x1630', '\x1631', '\a', '\x2B9', 
		'\x2', '\x2', '\x1631', '\x1633', '\x5', '\x2B8', '\x15D', '\x2', '\x1632', 
		'\x1630', '\x3', '\x2', '\x2', '\x2', '\x1633', '\x1636', '\x3', '\x2', 
		'\x2', '\x2', '\x1634', '\x1632', '\x3', '\x2', '\x2', '\x2', '\x1634', 
		'\x1635', '\x3', '\x2', '\x2', '\x2', '\x1635', '\x1637', '\x3', '\x2', 
		'\x2', '\x2', '\x1636', '\x1634', '\x3', '\x2', '\x2', '\x2', '\x1637', 
		'\x1638', '\a', '\x2B4', '\x2', '\x2', '\x1638', '\x16FE', '\x3', '\x2', 
		'\x2', '\x2', '\x1639', '\x163A', '\a', '\x23D', '\x2', '\x2', '\x163A', 
		'\x163B', '\a', '\x2B3', '\x2', '\x2', '\x163B', '\x163C', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x163C', '\x163E', '\a', '\x15', '\x2', '\x2', '\x163D', 
		'\x163F', '\a', '\x1C2', '\x2', '\x2', '\x163E', '\x163D', '\x3', '\x2', 
		'\x2', '\x2', '\x163E', '\x163F', '\x3', '\x2', '\x2', '\x2', '\x163F', 
		'\x1640', '\x3', '\x2', '\x2', '\x2', '\x1640', '\x1641', '\x5', '\x378', 
		'\x1BD', '\x2', '\x1641', '\x1642', '\a', '\x2B4', '\x2', '\x2', '\x1642', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x1643', '\x1644', '\a', '\x29F', 
		'\x2', '\x2', '\x1644', '\x164C', '\a', '\x2B3', '\x2', '\x2', '\x1645', 
		'\x1647', '\t', 'R', '\x2', '\x2', '\x1646', '\x1645', '\x3', '\x2', '\x2', 
		'\x2', '\x1646', '\x1647', '\x3', '\x2', '\x2', '\x2', '\x1647', '\x1649', 
		'\x3', '\x2', '\x2', '\x2', '\x1648', '\x164A', '\x5', '\x3CA', '\x1E6', 
		'\x2', '\x1649', '\x1648', '\x3', '\x2', '\x2', '\x2', '\x1649', '\x164A', 
		'\x3', '\x2', '\x2', '\x2', '\x164A', '\x164B', '\x3', '\x2', '\x2', '\x2', 
		'\x164B', '\x164D', '\a', '\xD3', '\x2', '\x2', '\x164C', '\x1646', '\x3', 
		'\x2', '\x2', '\x2', '\x164C', '\x164D', '\x3', '\x2', '\x2', '\x2', '\x164D', 
		'\x164E', '\x3', '\x2', '\x2', '\x2', '\x164E', '\x164F', '\x5', '\x2CA', 
		'\x166', '\x2', '\x164F', '\x1650', '\a', '\x2B4', '\x2', '\x2', '\x1650', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x1651', '\x1652', '\a', '\x26E', 
		'\x2', '\x2', '\x1652', '\x1653', '\a', '\x2B3', '\x2', '\x2', '\x1653', 
		'\x1655', '\x5', '\x2B8', '\x15D', '\x2', '\x1654', '\x1656', '\x5', '\x268', 
		'\x135', '\x2', '\x1655', '\x1654', '\x3', '\x2', '\x2', '\x2', '\x1655', 
		'\x1656', '\x3', '\x2', '\x2', '\x2', '\x1656', '\x1657', '\x3', '\x2', 
		'\x2', '\x2', '\x1657', '\x165A', '\a', '\x2B4', '\x2', '\x2', '\x1658', 
		'\x1659', '\a', '\x2AC', '\x2', '\x2', '\x1659', '\x165B', '\x5', '\x384', 
		'\x1C3', '\x2', '\x165A', '\x1658', '\x3', '\x2', '\x2', '\x2', '\x165A', 
		'\x165B', '\x3', '\x2', '\x2', '\x2', '\x165B', '\x16FE', '\x3', '\x2', 
		'\x2', '\x2', '\x165C', '\x165D', '\t', 'Z', '\x2', '\x2', '\x165D', '\x1662', 
		'\a', '\x2B3', '\x2', '\x2', '\x165E', '\x1660', '\a', '\x2B9', '\x2', 
		'\x2', '\x165F', '\x165E', '\x3', '\x2', '\x2', '\x2', '\x165F', '\x1660', 
		'\x3', '\x2', '\x2', '\x2', '\x1660', '\x1661', '\x3', '\x2', '\x2', '\x2', 
		'\x1661', '\x1663', '\x5', '\x314', '\x18B', '\x2', '\x1662', '\x165F', 
		'\x3', '\x2', '\x2', '\x2', '\x1663', '\x1664', '\x3', '\x2', '\x2', '\x2', 
		'\x1664', '\x1662', '\x3', '\x2', '\x2', '\x2', '\x1664', '\x1665', '\x3', 
		'\x2', '\x2', '\x2', '\x1665', '\x1666', '\x3', '\x2', '\x2', '\x2', '\x1666', 
		'\x1669', '\a', '\x2B4', '\x2', '\x2', '\x1667', '\x1668', '\a', '\x2AC', 
		'\x2', '\x2', '\x1668', '\x166A', '\x5', '\x384', '\x1C3', '\x2', '\x1669', 
		'\x1667', '\x3', '\x2', '\x2', '\x2', '\x1669', '\x166A', '\x3', '\x2', 
		'\x2', '\x2', '\x166A', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x166B', 
		'\x166C', '\a', '\x272', '\x2', '\x2', '\x166C', '\x166E', '\a', '\x2B3', 
		'\x2', '\x2', '\x166D', '\x166F', '\t', '[', '\x2', '\x2', '\x166E', '\x166D', 
		'\x3', '\x2', '\x2', '\x2', '\x166E', '\x166F', '\x3', '\x2', '\x2', '\x2', 
		'\x166F', '\x1671', '\x3', '\x2', '\x2', '\x2', '\x1670', '\x1672', '\t', 
		'\\', '\x2', '\x2', '\x1671', '\x1670', '\x3', '\x2', '\x2', '\x2', '\x1671', 
		'\x1672', '\x3', '\x2', '\x2', '\x2', '\x1672', '\x1673', '\x3', '\x2', 
		'\x2', '\x2', '\x1673', '\x1676', '\x5', '\x2B8', '\x15D', '\x2', '\x1674', 
		'\x1675', '\a', '\x2B9', '\x2', '\x2', '\x1675', '\x1677', '\x5', '\x30C', 
		'\x187', '\x2', '\x1676', '\x1674', '\x3', '\x2', '\x2', '\x2', '\x1676', 
		'\x1677', '\x3', '\x2', '\x2', '\x2', '\x1677', '\x167F', '\x3', '\x2', 
		'\x2', '\x2', '\x1678', '\x1679', '\a', '\x2B9', '\x2', '\x2', '\x1679', 
		'\x167B', '\x5', '\x2B8', '\x15D', '\x2', '\x167A', '\x167C', '\x5', '\x328', 
		'\x195', '\x2', '\x167B', '\x167A', '\x3', '\x2', '\x2', '\x2', '\x167B', 
		'\x167C', '\x3', '\x2', '\x2', '\x2', '\x167C', '\x167E', '\x3', '\x2', 
		'\x2', '\x2', '\x167D', '\x1678', '\x3', '\x2', '\x2', '\x2', '\x167E', 
		'\x1681', '\x3', '\x2', '\x2', '\x2', '\x167F', '\x167D', '\x3', '\x2', 
		'\x2', '\x2', '\x167F', '\x1680', '\x3', '\x2', '\x2', '\x2', '\x1680', 
		'\x1682', '\x3', '\x2', '\x2', '\x2', '\x1681', '\x167F', '\x3', '\x2', 
		'\x2', '\x2', '\x1682', '\x1685', '\a', '\x2B4', '\x2', '\x2', '\x1683', 
		'\x1684', '\a', '\x2AC', '\x2', '\x2', '\x1684', '\x1686', '\x5', '\x384', 
		'\x1C3', '\x2', '\x1685', '\x1683', '\x3', '\x2', '\x2', '\x2', '\x1685', 
		'\x1686', '\x3', '\x2', '\x2', '\x2', '\x1686', '\x16FE', '\x3', '\x2', 
		'\x2', '\x2', '\x1687', '\x1688', '\a', '\x273', '\x2', '\x2', '\x1688', 
		'\x1689', '\a', '\x2B3', '\x2', '\x2', '\x1689', '\x168B', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x168A', '\x168C', '\x5', '\x30A', '\x186', '\x2', '\x168B', 
		'\x168A', '\x3', '\x2', '\x2', '\x2', '\x168B', '\x168C', '\x3', '\x2', 
		'\x2', '\x2', '\x168C', '\x168D', '\x3', '\x2', '\x2', '\x2', '\x168D', 
		'\x168E', '\a', '\x2B4', '\x2', '\x2', '\x168E', '\x16FE', '\x3', '\x2', 
		'\x2', '\x2', '\x168F', '\x1690', '\a', '\x276', '\x2', '\x2', '\x1690', 
		'\x1691', '\a', '\x2B3', '\x2', '\x2', '\x1691', '\x1692', '\t', ']', 
		'\x2', '\x2', '\x1692', '\x1694', '\x5', '\x2CA', '\x166', '\x2', '\x1693', 
		'\x1695', '\a', '\x265', '\x2', '\x2', '\x1694', '\x1693', '\x3', '\x2', 
		'\x2', '\x2', '\x1694', '\x1695', '\x3', '\x2', '\x2', '\x2', '\x1695', 
		'\x1696', '\x3', '\x2', '\x2', '\x2', '\x1696', '\x1699', '\a', '\x2B4', 
		'\x2', '\x2', '\x1697', '\x1698', '\a', '\x2AC', '\x2', '\x2', '\x1698', 
		'\x169A', '\x5', '\x384', '\x1C3', '\x2', '\x1699', '\x1697', '\x3', '\x2', 
		'\x2', '\x2', '\x1699', '\x169A', '\x3', '\x2', '\x2', '\x2', '\x169A', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x169B', '\x169C', '\a', '\x277', 
		'\x2', '\x2', '\x169C', '\x16A1', '\a', '\x2B3', '\x2', '\x2', '\x169D', 
		'\x169E', '\a', '\x148', '\x2', '\x2', '\x169E', '\x16A2', '\x5', '\x390', 
		'\x1C9', '\x2', '\x169F', '\x16A0', '\a', '\xAF', '\x2', '\x2', '\x16A0', 
		'\x16A2', '\x5', '\x2CA', '\x166', '\x2', '\x16A1', '\x169D', '\x3', '\x2', 
		'\x2', '\x2', '\x16A1', '\x169F', '\x3', '\x2', '\x2', '\x2', '\x16A2', 
		'\x16A5', '\x3', '\x2', '\x2', '\x2', '\x16A3', '\x16A4', '\a', '\x2B9', 
		'\x2', '\x2', '\x16A4', '\x16A6', '\x5', '\x2CA', '\x166', '\x2', '\x16A5', 
		'\x16A3', '\x3', '\x2', '\x2', '\x2', '\x16A5', '\x16A6', '\x3', '\x2', 
		'\x2', '\x2', '\x16A6', '\x16A7', '\x3', '\x2', '\x2', '\x2', '\x16A7', 
		'\x16AA', '\a', '\x2B4', '\x2', '\x2', '\x16A8', '\x16A9', '\a', '\x2AC', 
		'\x2', '\x2', '\x16A9', '\x16AB', '\x5', '\x384', '\x1C3', '\x2', '\x16AA', 
		'\x16A8', '\x3', '\x2', '\x2', '\x2', '\x16AA', '\x16AB', '\x3', '\x2', 
		'\x2', '\x2', '\x16AB', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x16AC', 
		'\x16AD', '\a', '\x278', '\x2', '\x2', '\x16AD', '\x16AE', '\a', '\x2B3', 
		'\x2', '\x2', '\x16AE', '\x16B0', '\x5', '\x2CA', '\x166', '\x2', '\x16AF', 
		'\x16B1', '\x5', '\x30A', '\x186', '\x2', '\x16B0', '\x16AF', '\x3', '\x2', 
		'\x2', '\x2', '\x16B0', '\x16B1', '\x3', '\x2', '\x2', '\x2', '\x16B1', 
		'\x16B2', '\x3', '\x2', '\x2', '\x2', '\x16B2', '\x16B3', '\a', '\x1D3', 
		'\x2', '\x2', '\x16B3', '\x16B7', '\a', '\x63', '\x2', '\x2', '\x16B4', 
		'\x16B5', '\a', '\x16A', '\x2', '\x2', '\x16B5', '\x16B6', '\a', '\x178', 
		'\x2', '\x2', '\x16B6', '\x16B8', '\a', '\xA4', '\x2', '\x2', '\x16B7', 
		'\x16B4', '\x3', '\x2', '\x2', '\x2', '\x16B7', '\x16B8', '\x3', '\x2', 
		'\x2', '\x2', '\x16B8', '\x16B9', '\x3', '\x2', '\x2', '\x2', '\x16B9', 
		'\x16BC', '\a', '\x2B4', '\x2', '\x2', '\x16BA', '\x16BB', '\a', '\x2AC', 
		'\x2', '\x2', '\x16BB', '\x16BD', '\x5', '\x384', '\x1C3', '\x2', '\x16BC', 
		'\x16BA', '\x3', '\x2', '\x2', '\x2', '\x16BC', '\x16BD', '\x3', '\x2', 
		'\x2', '\x2', '\x16BD', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x16BE', 
		'\x16BF', '\a', '\x279', '\x2', '\x2', '\x16BF', '\x16C0', '\a', '\x2B3', 
		'\x2', '\x2', '\x16C0', '\x16C3', '\x5', '\x2CA', '\x166', '\x2', '\x16C1', 
		'\x16C2', '\a', '\x2B9', '\x2', '\x2', '\x16C2', '\x16C4', '\x5', '\x316', 
		'\x18C', '\x2', '\x16C3', '\x16C1', '\x3', '\x2', '\x2', '\x2', '\x16C3', 
		'\x16C4', '\x3', '\x2', '\x2', '\x2', '\x16C4', '\x16C7', '\x3', '\x2', 
		'\x2', '\x2', '\x16C5', '\x16C6', '\a', '\x2B9', '\x2', '\x2', '\x16C6', 
		'\x16C8', '\x5', '\x318', '\x18D', '\x2', '\x16C7', '\x16C5', '\x3', '\x2', 
		'\x2', '\x2', '\x16C7', '\x16C8', '\x3', '\x2', '\x2', '\x2', '\x16C8', 
		'\x16C9', '\x3', '\x2', '\x2', '\x2', '\x16C9', '\x16CC', '\a', '\x2B4', 
		'\x2', '\x2', '\x16CA', '\x16CB', '\a', '\x2AC', '\x2', '\x2', '\x16CB', 
		'\x16CD', '\x5', '\x384', '\x1C3', '\x2', '\x16CC', '\x16CA', '\x3', '\x2', 
		'\x2', '\x2', '\x16CC', '\x16CD', '\x3', '\x2', '\x2', '\x2', '\x16CD', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x16CE', '\x16CF', '\a', '\x27A', 
		'\x2', '\x2', '\x16CF', '\x16D0', '\a', '\x2B3', '\x2', '\x2', '\x16D0', 
		'\x16D1', '\t', ']', '\x2', '\x2', '\x16D1', '\x16D4', '\x5', '\x2CA', 
		'\x166', '\x2', '\x16D2', '\x16D3', '\a', '\x15', '\x2', '\x2', '\x16D3', 
		'\x16D5', '\x5', '\x378', '\x1BD', '\x2', '\x16D4', '\x16D2', '\x3', '\x2', 
		'\x2', '\x2', '\x16D4', '\x16D5', '\x3', '\x2', '\x2', '\x2', '\x16D5', 
		'\x16D7', '\x3', '\x2', '\x2', '\x2', '\x16D6', '\x16D8', '\x5', '\x31A', 
		'\x18E', '\x2', '\x16D7', '\x16D6', '\x3', '\x2', '\x2', '\x2', '\x16D7', 
		'\x16D8', '\x3', '\x2', '\x2', '\x2', '\x16D8', '\x16DA', '\x3', '\x2', 
		'\x2', '\x2', '\x16D9', '\x16DB', '\x5', '\x31C', '\x18F', '\x2', '\x16DA', 
		'\x16D9', '\x3', '\x2', '\x2', '\x2', '\x16DA', '\x16DB', '\x3', '\x2', 
		'\x2', '\x2', '\x16DB', '\x16DD', '\x3', '\x2', '\x2', '\x2', '\x16DC', 
		'\x16DE', '\x5', '\x31E', '\x190', '\x2', '\x16DD', '\x16DC', '\x3', '\x2', 
		'\x2', '\x2', '\x16DD', '\x16DE', '\x3', '\x2', '\x2', '\x2', '\x16DE', 
		'\x16E1', '\x3', '\x2', '\x2', '\x2', '\x16DF', '\x16E0', '\t', '^', '\x2', 
		'\x2', '\x16E0', '\x16E2', '\a', '\x85', '\x2', '\x2', '\x16E1', '\x16DF', 
		'\x3', '\x2', '\x2', '\x2', '\x16E1', '\x16E2', '\x3', '\x2', '\x2', '\x2', 
		'\x16E2', '\x16E3', '\x3', '\x2', '\x2', '\x2', '\x16E3', '\x16E6', '\a', 
		'\x2B4', '\x2', '\x2', '\x16E4', '\x16E5', '\a', '\x2AC', '\x2', '\x2', 
		'\x16E5', '\x16E7', '\x5', '\x384', '\x1C3', '\x2', '\x16E6', '\x16E4', 
		'\x3', '\x2', '\x2', '\x2', '\x16E6', '\x16E7', '\x3', '\x2', '\x2', '\x2', 
		'\x16E7', '\x16FE', '\x3', '\x2', '\x2', '\x2', '\x16E8', '\x16E9', '\a', 
		'\x27B', '\x2', '\x2', '\x16E9', '\x16EB', '\a', '\x2B3', '\x2', '\x2', 
		'\x16EA', '\x16EC', '\x5', '\x30E', '\x188', '\x2', '\x16EB', '\x16EA', 
		'\x3', '\x2', '\x2', '\x2', '\x16EB', '\x16EC', '\x3', '\x2', '\x2', '\x2', 
		'\x16EC', '\x16ED', '\x3', '\x2', '\x2', '\x2', '\x16ED', '\x16EF', '\x5', 
		'\x2CA', '\x166', '\x2', '\x16EE', '\x16F0', '\x5', '\x30A', '\x186', 
		'\x2', '\x16EF', '\x16EE', '\x3', '\x2', '\x2', '\x2', '\x16EF', '\x16F0', 
		'\x3', '\x2', '\x2', '\x2', '\x16F0', '\x16F6', '\x3', '\x2', '\x2', '\x2', 
		'\x16F1', '\x16F2', '\a', 'R', '\x2', '\x2', '\x16F2', '\x16F3', '\x5', 
		'\x310', '\x189', '\x2', '\x16F3', '\x16F4', '\a', '\x2B9', '\x2', '\x2', 
		'\x16F4', '\x16F5', '\x5', '\x310', '\x189', '\x2', '\x16F5', '\x16F7', 
		'\x3', '\x2', '\x2', '\x2', '\x16F6', '\x16F1', '\x3', '\x2', '\x2', '\x2', 
		'\x16F6', '\x16F7', '\x3', '\x2', '\x2', '\x2', '\x16F7', '\x16F8', '\x3', 
		'\x2', '\x2', '\x2', '\x16F8', '\x16FB', '\a', '\x2B4', '\x2', '\x2', 
		'\x16F9', '\x16FA', '\a', '\x2AC', '\x2', '\x2', '\x16FA', '\x16FC', '\x5', 
		'\x384', '\x1C3', '\x2', '\x16FB', '\x16F9', '\x3', '\x2', '\x2', '\x2', 
		'\x16FB', '\x16FC', '\x3', '\x2', '\x2', '\x2', '\x16FC', '\x16FE', '\x3', 
		'\x2', '\x2', '\x2', '\x16FD', '\x15C2', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x15C7', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x15CC', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x15D9', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x15E7', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x15F3', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x15FE', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x1605', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x1608', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x1610', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x1617', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x161E', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x1629', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x1639', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x1643', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x1651', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x165C', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x166B', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x1687', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x168F', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x169B', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x16AC', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x16BE', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x16CE', '\x3', '\x2', 
		'\x2', '\x2', '\x16FD', '\x16E8', '\x3', '\x2', '\x2', '\x2', '\x16FE', 
		'\x2F1', '\x3', '\x2', '\x2', '\x2', '\x16FF', '\x1700', '\t', '_', '\x2', 
		'\x2', '\x1700', '\x2F3', '\x3', '\x2', '\x2', '\x2', '\x1701', '\x1702', 
		'\t', '`', '\x2', '\x2', '\x1702', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'\x1703', '\x1704', '\t', '\x61', '\x2', '\x2', '\x1704', '\x2F7', '\x3', 
		'\x2', '\x2', '\x2', '\x1705', '\x1706', '\a', '\x186', '\x2', '\x2', 
		'\x1706', '\x1708', '\a', '\x2B3', '\x2', '\x2', '\x1707', '\x1709', '\x5', 
		'\x224', '\x113', '\x2', '\x1708', '\x1707', '\x3', '\x2', '\x2', '\x2', 
		'\x1708', '\x1709', '\x3', '\x2', '\x2', '\x2', '\x1709', '\x170E', '\x3', 
		'\x2', '\x2', '\x2', '\x170A', '\x170C', '\x5', '\x268', '\x135', '\x2', 
		'\x170B', '\x170D', '\x5', '\x2FA', '\x17E', '\x2', '\x170C', '\x170B', 
		'\x3', '\x2', '\x2', '\x2', '\x170C', '\x170D', '\x3', '\x2', '\x2', '\x2', 
		'\x170D', '\x170F', '\x3', '\x2', '\x2', '\x2', '\x170E', '\x170A', '\x3', 
		'\x2', '\x2', '\x2', '\x170E', '\x170F', '\x3', '\x2', '\x2', '\x2', '\x170F', 
		'\x1710', '\x3', '\x2', '\x2', '\x2', '\x1710', '\x1711', '\a', '\x2B4', 
		'\x2', '\x2', '\x1711', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x1712', 
		'\x1719', '\x5', '\x2FC', '\x17F', '\x2', '\x1713', '\x1714', '\a', '*', 
		'\x2', '\x2', '\x1714', '\x1715', '\x5', '\x2FE', '\x180', '\x2', '\x1715', 
		'\x1716', '\a', '\x11', '\x2', '\x2', '\x1716', '\x1717', '\x5', '\x2FE', 
		'\x180', '\x2', '\x1717', '\x171A', '\x3', '\x2', '\x2', '\x2', '\x1718', 
		'\x171A', '\x5', '\x2FE', '\x180', '\x2', '\x1719', '\x1713', '\x3', '\x2', 
		'\x2', '\x2', '\x1719', '\x1718', '\x3', '\x2', '\x2', '\x2', '\x171A', 
		'\x2FB', '\x3', '\x2', '\x2', '\x2', '\x171B', '\x171C', '\t', '\x62', 
		'\x2', '\x2', '\x171C', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x171D', 
		'\x171E', '\a', '\x243', '\x2', '\x2', '\x171E', '\x1725', '\a', '\x1A6', 
		'\x2', '\x2', '\x171F', '\x1720', '\a', 'p', '\x2', '\x2', '\x1720', '\x1725', 
		'\a', '\x1DF', '\x2', '\x2', '\x1721', '\x1722', '\x5', '\x2CA', '\x166', 
		'\x2', '\x1722', '\x1723', '\t', '\x63', '\x2', '\x2', '\x1723', '\x1725', 
		'\x3', '\x2', '\x2', '\x2', '\x1724', '\x171D', '\x3', '\x2', '\x2', '\x2', 
		'\x1724', '\x171F', '\x3', '\x2', '\x2', '\x2', '\x1724', '\x1721', '\x3', 
		'\x2', '\x2', '\x2', '\x1725', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x1726', 
		'\x1730', '\a', '\x256', '\x2', '\x2', '\x1727', '\x1731', '\a', '\x2B6', 
		'\x2', '\x2', '\x1728', '\x172A', '\a', '\x2B9', '\x2', '\x2', '\x1729', 
		'\x1728', '\x3', '\x2', '\x2', '\x2', '\x1729', '\x172A', '\x3', '\x2', 
		'\x2', '\x2', '\x172A', '\x172B', '\x3', '\x2', '\x2', '\x2', '\x172B', 
		'\x172D', '\x5', '\x302', '\x182', '\x2', '\x172C', '\x1729', '\x3', '\x2', 
		'\x2', '\x2', '\x172D', '\x172E', '\x3', '\x2', '\x2', '\x2', '\x172E', 
		'\x172C', '\x3', '\x2', '\x2', '\x2', '\x172E', '\x172F', '\x3', '\x2', 
		'\x2', '\x2', '\x172F', '\x1731', '\x3', '\x2', '\x2', '\x2', '\x1730', 
		'\x1727', '\x3', '\x2', '\x2', '\x2', '\x1730', '\x172C', '\x3', '\x2', 
		'\x2', '\x2', '\x1731', '\x301', '\x3', '\x2', '\x2', '\x2', '\x1732', 
		'\x1734', '\a', '\xF6', '\x2', '\x2', '\x1733', '\x1735', '\a', '\x184', 
		'\x2', '\x2', '\x1734', '\x1733', '\x3', '\x2', '\x2', '\x2', '\x1734', 
		'\x1735', '\x3', '\x2', '\x2', '\x2', '\x1735', '\x1738', '\x3', '\x2', 
		'\x2', '\x2', '\x1736', '\x1738', '\a', '\x184', '\x2', '\x2', '\x1737', 
		'\x1732', '\x3', '\x2', '\x2', '\x2', '\x1737', '\x1736', '\x3', '\x2', 
		'\x2', '\x2', '\x1737', '\x1738', '\x3', '\x2', '\x2', '\x2', '\x1738', 
		'\x1739', '\x3', '\x2', '\x2', '\x2', '\x1739', '\x173B', '\x5', '\x212', 
		'\x10A', '\x2', '\x173A', '\x173C', '\x5', '\x328', '\x195', '\x2', '\x173B', 
		'\x173A', '\x3', '\x2', '\x2', '\x2', '\x173B', '\x173C', '\x3', '\x2', 
		'\x2', '\x2', '\x173C', '\x303', '\x3', '\x2', '\x2', '\x2', '\x173D', 
		'\x173E', '\a', '\x17E', '\x2', '\x2', '\x173E', '\x173F', '\a', ':', 
		'\x2', '\x2', '\x173F', '\x1740', '\x5', '\x2CA', '\x166', '\x2', '\x1740', 
		'\x305', '\x3', '\x2', '\x2', '\x2', '\x1741', '\x1742', '\a', '\x26A', 
		'\x2', '\x2', '\x1742', '\x1743', '\a', '\xDA', '\x2', '\x2', '\x1743', 
		'\x1744', '\a', '\x2B3', '\x2', '\x2', '\x1744', '\x1745', '\x5', '\x268', 
		'\x135', '\x2', '\x1745', '\x1746', '\a', '\x2B4', '\x2', '\x2', '\x1746', 
		'\x1749', '\x3', '\x2', '\x2', '\x2', '\x1747', '\x1749', '\x5', '\x2F8', 
		'\x17D', '\x2', '\x1748', '\x1741', '\x3', '\x2', '\x2', '\x2', '\x1748', 
		'\x1747', '\x3', '\x2', '\x2', '\x2', '\x1749', '\x307', '\x3', '\x2', 
		'\x2', '\x2', '\x174A', '\x1760', '\a', 'i', '\x2', '\x2', '\x174B', '\x174D', 
		'\a', '\x142', '\x2', '\x2', '\x174C', '\x174E', '\a', '\x1F', '\x2', 
		'\x2', '\x174D', '\x174C', '\x3', '\x2', '\x2', '\x2', '\x174D', '\x174E', 
		'\x3', '\x2', '\x2', '\x2', '\x174E', '\x1761', '\x3', '\x2', '\x2', '\x2', 
		'\x174F', '\x1754', '\a', '\x2B3', '\x2', '\x2', '\x1750', '\x1752', '\a', 
		'\x2B9', '\x2', '\x2', '\x1751', '\x1750', '\x3', '\x2', '\x2', '\x2', 
		'\x1751', '\x1752', '\x3', '\x2', '\x2', '\x2', '\x1752', '\x1753', '\x3', 
		'\x2', '\x2', '\x2', '\x1753', '\x1755', '\x5', '\x39A', '\x1CE', '\x2', 
		'\x1754', '\x1751', '\x3', '\x2', '\x2', '\x2', '\x1755', '\x1756', '\x3', 
		'\x2', '\x2', '\x2', '\x1756', '\x1754', '\x3', '\x2', '\x2', '\x2', '\x1756', 
		'\x1757', '\x3', '\x2', '\x2', '\x2', '\x1757', '\x1758', '\x3', '\x2', 
		'\x2', '\x2', '\x1758', '\x1759', '\a', '\x2B4', '\x2', '\x2', '\x1759', 
		'\x175A', '\a', '\x258', '\x2', '\x2', '\x175A', '\x175C', '\a', '\x2B3', 
		'\x2', '\x2', '\x175B', '\x175D', '\x5', '\x2B6', '\x15C', '\x2', '\x175C', 
		'\x175B', '\x3', '\x2', '\x2', '\x2', '\x175C', '\x175D', '\x3', '\x2', 
		'\x2', '\x2', '\x175D', '\x175E', '\x3', '\x2', '\x2', '\x2', '\x175E', 
		'\x175F', '\a', '\x2B4', '\x2', '\x2', '\x175F', '\x1761', '\x3', '\x2', 
		'\x2', '\x2', '\x1760', '\x174B', '\x3', '\x2', '\x2', '\x2', '\x1760', 
		'\x174F', '\x3', '\x2', '\x2', '\x2', '\x1761', '\x309', '\x3', '\x2', 
		'\x2', '\x2', '\x1762', '\x1765', '\a', '\x190', '\x2', '\x2', '\x1763', 
		'\x1764', '\a', ':', '\x2', '\x2', '\x1764', '\x1766', '\a', '\x259', 
		'\x2', '\x2', '\x1765', '\x1763', '\x3', '\x2', '\x2', '\x2', '\x1765', 
		'\x1766', '\x3', '\x2', '\x2', '\x2', '\x1766', '\x1767', '\x3', '\x2', 
		'\x2', '\x2', '\x1767', '\x1769', '\x5', '\x2B8', '\x15D', '\x2', '\x1768', 
		'\x176A', '\x5', '\x328', '\x195', '\x2', '\x1769', '\x1768', '\x3', '\x2', 
		'\x2', '\x2', '\x1769', '\x176A', '\x3', '\x2', '\x2', '\x2', '\x176A', 
		'\x176B', '\x3', '\x2', '\x2', '\x2', '\x176B', '\x176C', '\a', '\x2B9', 
		'\x2', '\x2', '\x176C', '\x176E', '\x5', '\x2B8', '\x15D', '\x2', '\x176D', 
		'\x176F', '\x5', '\x328', '\x195', '\x2', '\x176E', '\x176D', '\x3', '\x2', 
		'\x2', '\x2', '\x176E', '\x176F', '\x3', '\x2', '\x2', '\x2', '\x176F', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x1770', '\x1771', '\a', '\x26F', 
		'\x2', '\x2', '\x1771', '\x1773', '\a', '\x2B3', '\x2', '\x2', '\x1772', 
		'\x1774', '\t', '[', '\x2', '\x2', '\x1773', '\x1772', '\x3', '\x2', '\x2', 
		'\x2', '\x1773', '\x1774', '\x3', '\x2', '\x2', '\x2', '\x1774', '\x1776', 
		'\x3', '\x2', '\x2', '\x2', '\x1775', '\x1777', '\t', '\x64', '\x2', '\x2', 
		'\x1776', '\x1775', '\x3', '\x2', '\x2', '\x2', '\x1776', '\x1777', '\x3', 
		'\x2', '\x2', '\x2', '\x1777', '\x177C', '\x3', '\x2', '\x2', '\x2', '\x1778', 
		'\x177A', '\a', '\x2B9', '\x2', '\x2', '\x1779', '\x1778', '\x3', '\x2', 
		'\x2', '\x2', '\x1779', '\x177A', '\x3', '\x2', '\x2', '\x2', '\x177A', 
		'\x177B', '\x3', '\x2', '\x2', '\x2', '\x177B', '\x177D', '\x5', '\x314', 
		'\x18B', '\x2', '\x177C', '\x1779', '\x3', '\x2', '\x2', '\x2', '\x177D', 
		'\x177E', '\x3', '\x2', '\x2', '\x2', '\x177E', '\x177C', '\x3', '\x2', 
		'\x2', '\x2', '\x177E', '\x177F', '\x3', '\x2', '\x2', '\x2', '\x177F', 
		'\x1780', '\x3', '\x2', '\x2', '\x2', '\x1780', '\x1781', '\a', '\x2B4', 
		'\x2', '\x2', '\x1781', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x1782', 
		'\x1783', '\a', '\x275', '\x2', '\x2', '\x1783', '\x1787', '\a', '\x2B3', 
		'\x2', '\x2', '\x1784', '\x1785', '\x5', '\x2CA', '\x166', '\x2', '\x1785', 
		'\x1786', '\x5', '\x328', '\x195', '\x2', '\x1786', '\x1788', '\x3', '\x2', 
		'\x2', '\x2', '\x1787', '\x1784', '\x3', '\x2', '\x2', '\x2', '\x1787', 
		'\x1788', '\x3', '\x2', '\x2', '\x2', '\x1788', '\x178F', '\x3', '\x2', 
		'\x2', '\x2', '\x1789', '\x178A', '\a', '\x2B9', '\x2', '\x2', '\x178A', 
		'\x178B', '\x5', '\x2CA', '\x166', '\x2', '\x178B', '\x178C', '\x5', '\x328', 
		'\x195', '\x2', '\x178C', '\x178E', '\x3', '\x2', '\x2', '\x2', '\x178D', 
		'\x1789', '\x3', '\x2', '\x2', '\x2', '\x178E', '\x1791', '\x3', '\x2', 
		'\x2', '\x2', '\x178F', '\x178D', '\x3', '\x2', '\x2', '\x2', '\x178F', 
		'\x1790', '\x3', '\x2', '\x2', '\x2', '\x1790', '\x1793', '\x3', '\x2', 
		'\x2', '\x2', '\x1791', '\x178F', '\x3', '\x2', '\x2', '\x2', '\x1792', 
		'\x1794', '\x5', '\x312', '\x18A', '\x2', '\x1793', '\x1792', '\x3', '\x2', 
		'\x2', '\x2', '\x1793', '\x1794', '\x3', '\x2', '\x2', '\x2', '\x1794', 
		'\x1795', '\x3', '\x2', '\x2', '\x2', '\x1795', '\x1796', '\a', '\x2B4', 
		'\x2', '\x2', '\x1796', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x1797', 
		'\x17A2', '\x5', '\x330', '\x199', '\x2', '\x1798', '\x1799', '\a', '\xD0', 
		'\x2', '\x2', '\x1799', '\x17A3', '\a', '\x17F', '\x2', '\x2', '\x179A', 
		'\x179D', '\x5', '\x378', '\x1BD', '\x2', '\x179B', '\x179C', '\a', '\x192', 
		'\x2', '\x2', '\x179C', '\x179E', '\x5', '\x2CA', '\x166', '\x2', '\x179D', 
		'\x179B', '\x3', '\x2', '\x2', '\x2', '\x179D', '\x179E', '\x3', '\x2', 
		'\x2', '\x2', '\x179E', '\x17A0', '\x3', '\x2', '\x2', '\x2', '\x179F', 
		'\x17A1', '\x5', '\x312', '\x18A', '\x2', '\x17A0', '\x179F', '\x3', '\x2', 
		'\x2', '\x2', '\x17A0', '\x17A1', '\x3', '\x2', '\x2', '\x2', '\x17A1', 
		'\x17A3', '\x3', '\x2', '\x2', '\x2', '\x17A2', '\x1798', '\x3', '\x2', 
		'\x2', '\x2', '\x17A2', '\x179A', '\x3', '\x2', '\x2', '\x2', '\x17A3', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x17A4', '\x17A5', '\a', '\x84', 
		'\x2', '\x2', '\x17A5', '\x17A6', '\x5', '\x2CA', '\x166', '\x2', '\x17A6', 
		'\x313', '\x3', '\x2', '\x2', '\x2', '\x17A7', '\x17AE', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x17A8', '\x17AC', '\a', '\x15', '\x2', '\x2', '\x17A9', 
		'\x17AD', '\x5', '\x3B2', '\x1DA', '\x2', '\x17AA', '\x17AB', '\a', '\xAF', 
		'\x2', '\x2', '\x17AB', '\x17AD', '\x5', '\x2CA', '\x166', '\x2', '\x17AC', 
		'\x17A9', '\x3', '\x2', '\x2', '\x2', '\x17AC', '\x17AA', '\x3', '\x2', 
		'\x2', '\x2', '\x17AD', '\x17AF', '\x3', '\x2', '\x2', '\x2', '\x17AE', 
		'\x17A8', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x17AF', '\x3', '\x2', 
		'\x2', '\x2', '\x17AF', '\x315', '\x3', '\x2', '\x2', '\x2', '\x17B0', 
		'\x17B4', '\a', '\x260', '\x2', '\x2', '\x17B1', '\x17B2', '\a', '\x160', 
		'\x2', '\x2', '\x17B2', '\x17B5', '\a', '\x259', '\x2', '\x2', '\x17B3', 
		'\x17B5', '\x5', '\x2B8', '\x15D', '\x2', '\x17B4', '\x17B1', '\x3', '\x2', 
		'\x2', '\x2', '\x17B4', '\x17B3', '\x3', '\x2', '\x2', '\x2', '\x17B5', 
		'\x317', '\x3', '\x2', '\x2', '\x2', '\x17B6', '\x17BC', '\a', '\x20F', 
		'\x2', '\x2', '\x17B7', '\x17BD', '\a', '\x27E', '\x2', '\x2', '\x17B8', 
		'\x17BA', '\a', '\x160', '\x2', '\x2', '\x17B9', '\x17BB', '\a', '\x259', 
		'\x2', '\x2', '\x17BA', '\x17B9', '\x3', '\x2', '\x2', '\x2', '\x17BA', 
		'\x17BB', '\x3', '\x2', '\x2', '\x2', '\x17BB', '\x17BD', '\x3', '\x2', 
		'\x2', '\x2', '\x17BC', '\x17B7', '\x3', '\x2', '\x2', '\x2', '\x17BC', 
		'\x17B8', '\x3', '\x2', '\x2', '\x2', '\x17BD', '\x319', '\x3', '\x2', 
		'\x2', '\x2', '\x17BE', '\x17BF', '\a', '\xA6', '\x2', '\x2', '\x17BF', 
		'\x17C0', '\x5', '\x2CA', '\x166', '\x2', '\x17C0', '\x31B', '\x3', '\x2', 
		'\x2', '\x2', '\x17C1', '\x17C2', '\a', '\x260', '\x2', '\x2', '\x17C2', 
		'\x17C3', '\x5', '\x2CA', '\x166', '\x2', '\x17C3', '\x31D', '\x3', '\x2', 
		'\x2', '\x2', '\x17C4', '\x17C5', '\a', '\x160', '\x2', '\x2', '\x17C5', 
		'\x17CD', '\a', '\xED', '\x2', '\x2', '\x17C6', '\x17CA', '\a', '\xED', 
		'\x2', '\x2', '\x17C7', '\x17C8', '\a', '\x202', '\x2', '\x2', '\x17C8', 
		'\x17C9', '\a', '\x2C7', '\x2', '\x2', '\x17C9', '\x17CB', '\x5', '\x2CA', 
		'\x166', '\x2', '\x17CA', '\x17C7', '\x3', '\x2', '\x2', '\x2', '\x17CA', 
		'\x17CB', '\x3', '\x2', '\x2', '\x2', '\x17CB', '\x17CD', '\x3', '\x2', 
		'\x2', '\x2', '\x17CC', '\x17C4', '\x3', '\x2', '\x2', '\x2', '\x17CC', 
		'\x17C6', '\x3', '\x2', '\x2', '\x2', '\x17CD', '\x31F', '\x3', '\x2', 
		'\x2', '\x2', '\x17CE', '\x17D7', '\a', '\x2BA', '\x2', '\x2', '\x17CF', 
		'\x17D7', '\a', '\xB9', '\x2', '\x2', '\x17D0', '\x17D7', '\a', '\x2CE', 
		'\x2', '\x2', '\x17D1', '\x17D2', '\a', '\x1FC', '\x2', '\x2', '\x17D2', 
		'\x17D7', '\t', '\x65', '\x2', '\x2', '\x17D3', '\x17D7', '\a', '\x2CF', 
		'\x2', '\x2', '\x17D4', '\x17D7', '\x5', '\x322', '\x192', '\x2', '\x17D5', 
		'\x17D7', '\x5', '\x324', '\x193', '\x2', '\x17D6', '\x17CE', '\x3', '\x2', 
		'\x2', '\x2', '\x17D6', '\x17CF', '\x3', '\x2', '\x2', '\x2', '\x17D6', 
		'\x17D0', '\x3', '\x2', '\x2', '\x2', '\x17D6', '\x17D1', '\x3', '\x2', 
		'\x2', '\x2', '\x17D6', '\x17D3', '\x3', '\x2', '\x2', '\x2', '\x17D6', 
		'\x17D4', '\x3', '\x2', '\x2', '\x2', '\x17D6', '\x17D5', '\x3', '\x2', 
		'\x2', '\x2', '\x17D7', '\x321', '\x3', '\x2', '\x2', '\x2', '\x17D8', 
		'\x17D9', '\a', '\x266', '\x2', '\x2', '\x17D9', '\x17DF', '\t', '\x66', 
		'\x2', '\x2', '\x17DA', '\x17DB', '\a', '\xB9', '\x2', '\x2', '\x17DB', 
		'\x17DC', '\t', 'g', '\x2', '\x2', '\x17DC', '\x17E0', '\t', 'h', '\x2', 
		'\x2', '\x17DD', '\x17DE', '\a', '\x65', '\x2', '\x2', '\x17DE', '\x17E0', 
		'\t', 'i', '\x2', '\x2', '\x17DF', '\x17DA', '\x3', '\x2', '\x2', '\x2', 
		'\x17DF', '\x17DD', '\x3', '\x2', '\x2', '\x2', '\x17E0', '\x323', '\x3', 
		'\x2', '\x2', '\x2', '\x17E1', '\x17E2', '\a', '\x1F8', '\x2', '\x2', 
		'\x17E2', '\x17E8', '\x5', '\x3BE', '\x1E0', '\x2', '\x17E3', '\x17E9', 
		'\a', '\x2AF', '\x2', '\x2', '\x17E4', '\x17E9', '\a', '\x178', '\x2', 
		'\x2', '\x17E5', '\x17E9', '\a', '\x171', '\x2', '\x2', '\x17E6', '\x17E9', 
		'\x5', '\x3C6', '\x1E4', '\x2', '\x17E7', '\x17E9', '\x5', '\x3BE', '\x1E0', 
		'\x2', '\x17E8', '\x17E3', '\x3', '\x2', '\x2', '\x2', '\x17E8', '\x17E4', 
		'\x3', '\x2', '\x2', '\x2', '\x17E8', '\x17E5', '\x3', '\x2', '\x2', '\x2', 
		'\x17E8', '\x17E6', '\x3', '\x2', '\x2', '\x2', '\x17E8', '\x17E7', '\x3', 
		'\x2', '\x2', '\x2', '\x17E9', '\x325', '\x3', '\x2', '\x2', '\x2', '\x17EA', 
		'\x17EC', '\t', 'j', '\x2', '\x2', '\x17EB', '\x17ED', '\a', '\xD0', '\x2', 
		'\x2', '\x17EC', '\x17EB', '\x3', '\x2', '\x2', '\x2', '\x17EC', '\x17ED', 
		'\x3', '\x2', '\x2', '\x2', '\x17ED', '\x17EE', '\x3', '\x2', '\x2', '\x2', 
		'\x17EE', '\x17F0', '\a', '\x2B3', '\x2', '\x2', '\x17EF', '\x17F1', '\x5', 
		'\x2B6', '\x15C', '\x2', '\x17F0', '\x17EF', '\x3', '\x2', '\x2', '\x2', 
		'\x17F0', '\x17F1', '\x3', '\x2', '\x2', '\x2', '\x17F1', '\x17F2', '\x3', 
		'\x2', '\x2', '\x2', '\x17F2', '\x17F3', '\a', '\x2B4', '\x2', '\x2', 
		'\x17F3', '\x327', '\x3', '\x2', '\x2', '\x2', '\x17F4', '\x17F6', '\a', 
		'\x15', '\x2', '\x2', '\x17F5', '\x17F4', '\x3', '\x2', '\x2', '\x2', 
		'\x17F5', '\x17F6', '\x3', '\x2', '\x2', '\x2', '\x17F6', '\x17F9', '\x3', 
		'\x2', '\x2', '\x2', '\x17F7', '\x17FA', '\x5', '\x390', '\x1C9', '\x2', 
		'\x17F8', '\x17FA', '\x5', '\x3CA', '\x1E6', '\x2', '\x17F9', '\x17F7', 
		'\x3', '\x2', '\x2', '\x2', '\x17F9', '\x17F8', '\x3', '\x2', '\x2', '\x2', 
		'\x17FA', '\x17FD', '\x3', '\x2', '\x2', '\x2', '\x17FB', '\x17FD', '\a', 
		'\x15', '\x2', '\x2', '\x17FC', '\x17F5', '\x3', '\x2', '\x2', '\x2', 
		'\x17FC', '\x17FB', '\x3', '\x2', '\x2', '\x2', '\x17FD', '\x329', '\x3', 
		'\x2', '\x2', '\x2', '\x17FE', '\x1801', '\x5', '\x390', '\x1C9', '\x2', 
		'\x17FF', '\x1801', '\x5', '\x3CA', '\x1E6', '\x2', '\x1800', '\x17FE', 
		'\x3', '\x2', '\x2', '\x2', '\x1800', '\x17FF', '\x3', '\x2', '\x2', '\x2', 
		'\x1801', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x1802', '\x1807', '\a', 
		'\x268', '\x2', '\x2', '\x1803', '\x1804', '\a', 'p', '\x2', '\x2', '\x1804', 
		'\x1805', '\a', '\x172', '\x2', '\x2', '\x1805', '\x1808', '\x5', '\x33C', 
		'\x19F', '\x2', '\x1806', '\x1808', '\x5', '\x2B8', '\x15D', '\x2', '\x1807', 
		'\x1803', '\x3', '\x2', '\x2', '\x2', '\x1807', '\x1806', '\x3', '\x2', 
		'\x2', '\x2', '\x1808', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x1809', 
		'\x180A', '\a', '\x39', '\x2', '\x2', '\x180A', '\x180C', '\a', 'P', '\x2', 
		'\x2', '\x180B', '\x1809', '\x3', '\x2', '\x2', '\x2', '\x180B', '\x180C', 
		'\x3', '\x2', '\x2', '\x2', '\x180C', '\x180D', '\x3', '\x2', '\x2', '\x2', 
		'\x180D', '\x1812', '\a', '\x105', '\x2', '\x2', '\x180E', '\x1810', '\a', 
		'\x2B9', '\x2', '\x2', '\x180F', '\x180E', '\x3', '\x2', '\x2', '\x2', 
		'\x180F', '\x1810', '\x3', '\x2', '\x2', '\x2', '\x1810', '\x1811', '\x3', 
		'\x2', '\x2', '\x2', '\x1811', '\x1813', '\x5', '\x33A', '\x19E', '\x2', 
		'\x1812', '\x180F', '\x3', '\x2', '\x2', '\x2', '\x1813', '\x1814', '\x3', 
		'\x2', '\x2', '\x2', '\x1814', '\x1812', '\x3', '\x2', '\x2', '\x2', '\x1814', 
		'\x1815', '\x3', '\x2', '\x2', '\x2', '\x1815', '\x32F', '\x3', '\x2', 
		'\x2', '\x2', '\x1816', '\x1819', '\x5', '\x390', '\x1C9', '\x2', '\x1817', 
		'\x1819', '\x5', '\x3CA', '\x1E6', '\x2', '\x1818', '\x1816', '\x3', '\x2', 
		'\x2', '\x2', '\x1818', '\x1817', '\x3', '\x2', '\x2', '\x2', '\x1819', 
		'\x331', '\x3', '\x2', '\x2', '\x2', '\x181A', '\x181D', '\x5', '\x3AA', 
		'\x1D6', '\x2', '\x181B', '\x181C', '\a', '\x2BB', '\x2', '\x2', '\x181C', 
		'\x181E', '\x5', '\x340', '\x1A1', '\x2', '\x181D', '\x181B', '\x3', '\x2', 
		'\x2', '\x2', '\x181D', '\x181E', '\x3', '\x2', '\x2', '\x2', '\x181E', 
		'\x333', '\x3', '\x2', '\x2', '\x2', '\x181F', '\x1821', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1820', '\x1822', '\x5', '\xB6', '\\', '\x2', '\x1821', 
		'\x1820', '\x3', '\x2', '\x2', '\x2', '\x1821', '\x1822', '\x3', '\x2', 
		'\x2', '\x2', '\x1822', '\x335', '\x3', '\x2', '\x2', '\x2', '\x1823', 
		'\x1826', '\x5', '\x3B2', '\x1DA', '\x2', '\x1824', '\x1826', '\a', '\\', 
		'\x2', '\x2', '\x1825', '\x1823', '\x3', '\x2', '\x2', '\x2', '\x1825', 
		'\x1824', '\x3', '\x2', '\x2', '\x2', '\x1826', '\x337', '\x3', '\x2', 
		'\x2', '\x2', '\x1827', '\x182A', '\x5', '\x3AA', '\x1D6', '\x2', '\x1828', 
		'\x1829', '\a', '\x2BB', '\x2', '\x2', '\x1829', '\x182B', '\x5', '\x340', 
		'\x1A1', '\x2', '\x182A', '\x1828', '\x3', '\x2', '\x2', '\x2', '\x182A', 
		'\x182B', '\x3', '\x2', '\x2', '\x2', '\x182B', '\x339', '\x3', '\x2', 
		'\x2', '\x2', '\x182C', '\x182D', '\a', '\x2CA', '\x2', '\x2', '\x182D', 
		'\x182F', '\x5', '\x3BA', '\x1DE', '\x2', '\x182E', '\x182C', '\x3', '\x2', 
		'\x2', '\x2', '\x182E', '\x182F', '\x3', '\x2', '\x2', '\x2', '\x182F', 
		'\x1830', '\x3', '\x2', '\x2', '\x2', '\x1830', '\x1833', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1831', '\x1832', '\a', '\x2AC', '\x2', '\x2', '\x1832', 
		'\x1834', '\x5', '\x3B2', '\x1DA', '\x2', '\x1833', '\x1831', '\x3', '\x2', 
		'\x2', '\x2', '\x1833', '\x1834', '\x3', '\x2', '\x2', '\x2', '\x1834', 
		'\x1837', '\x3', '\x2', '\x2', '\x2', '\x1835', '\x1837', '\x5', '\x380', 
		'\x1C1', '\x2', '\x1836', '\x182E', '\x3', '\x2', '\x2', '\x2', '\x1836', 
		'\x1835', '\x3', '\x2', '\x2', '\x2', '\x1837', '\x33B', '\x3', '\x2', 
		'\x2', '\x2', '\x1838', '\x183B', '\x5', '\x382', '\x1C2', '\x2', '\x1839', 
		'\x183B', '\x5', '\x380', '\x1C1', '\x2', '\x183A', '\x1838', '\x3', '\x2', 
		'\x2', '\x2', '\x183A', '\x1839', '\x3', '\x2', '\x2', '\x2', '\x183B', 
		'\x33D', '\x3', '\x2', '\x2', '\x2', '\x183C', '\x183F', '\x5', '\x390', 
		'\x1C9', '\x2', '\x183D', '\x183F', '\x5', '\x380', '\x1C1', '\x2', '\x183E', 
		'\x183C', '\x3', '\x2', '\x2', '\x2', '\x183E', '\x183D', '\x3', '\x2', 
		'\x2', '\x2', '\x183F', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x1840', 
		'\x1841', '\x5', '\x390', '\x1C9', '\x2', '\x1841', '\x341', '\x3', '\x2', 
		'\x2', '\x2', '\x1842', '\x1846', '\x5', '\x364', '\x1B3', '\x2', '\x1843', 
		'\x1844', '\a', '\x2BB', '\x2', '\x2', '\x1844', '\x1847', '\x5', '\x340', 
		'\x1A1', '\x2', '\x1845', '\x1847', '\x5', '\x326', '\x194', '\x2', '\x1846', 
		'\x1843', '\x3', '\x2', '\x2', '\x2', '\x1846', '\x1845', '\x3', '\x2', 
		'\x2', '\x2', '\x1846', '\x1847', '\x3', '\x2', '\x2', '\x2', '\x1847', 
		'\x343', '\x3', '\x2', '\x2', '\x2', '\x1848', '\x1849', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1849', '\x345', '\x3', '\x2', '\x2', '\x2', '\x184A', 
		'\x184B', '\x5', '\x3B2', '\x1DA', '\x2', '\x184B', '\x347', '\x3', '\x2', 
		'\x2', '\x2', '\x184C', '\x184D', '\x5', '\x3B2', '\x1DA', '\x2', '\x184D', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x184E', '\x184F', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x184F', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x1850', 
		'\x1851', '\x5', '\x3B2', '\x1DA', '\x2', '\x1851', '\x34D', '\x3', '\x2', 
		'\x2', '\x2', '\x1852', '\x1853', '\x5', '\x3B2', '\x1DA', '\x2', '\x1853', 
		'\x34F', '\x3', '\x2', '\x2', '\x2', '\x1854', '\x1855', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1855', '\x351', '\x3', '\x2', '\x2', '\x2', '\x1856', 
		'\x1857', '\x5', '\x3B2', '\x1DA', '\x2', '\x1857', '\x353', '\x3', '\x2', 
		'\x2', '\x2', '\x1858', '\x185B', '\x5', '\x390', '\x1C9', '\x2', '\x1859', 
		'\x185A', '\a', '\x2AC', '\x2', '\x2', '\x185A', '\x185C', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x185B', '\x1859', '\x3', '\x2', '\x2', '\x2', '\x185B', 
		'\x185C', '\x3', '\x2', '\x2', '\x2', '\x185C', '\x355', '\x3', '\x2', 
		'\x2', '\x2', '\x185D', '\x185E', '\x5', '\x354', '\x1AB', '\x2', '\x185E', 
		'\x357', '\x3', '\x2', '\x2', '\x2', '\x185F', '\x1860', '\x5', '\x354', 
		'\x1AB', '\x2', '\x1860', '\x359', '\x3', '\x2', '\x2', '\x2', '\x1861', 
		'\x1862', '\x5', '\x354', '\x1AB', '\x2', '\x1862', '\x35B', '\x3', '\x2', 
		'\x2', '\x2', '\x1863', '\x1864', '\x5', '\x354', '\x1AB', '\x2', '\x1864', 
		'\x35D', '\x3', '\x2', '\x2', '\x2', '\x1865', '\x1866', '\x5', '\x354', 
		'\x1AB', '\x2', '\x1866', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x1867', 
		'\x1868', '\x5', '\x354', '\x1AB', '\x2', '\x1868', '\x361', '\x3', '\x2', 
		'\x2', '\x2', '\x1869', '\x186A', '\x5', '\x354', '\x1AB', '\x2', '\x186A', 
		'\x363', '\x3', '\x2', '\x2', '\x2', '\x186B', '\x186C', '\x5', '\x354', 
		'\x1AB', '\x2', '\x186C', '\x365', '\x3', '\x2', '\x2', '\x2', '\x186D', 
		'\x1886', '\x5', '\x342', '\x1A2', '\x2', '\x186E', '\x1873', '\a', '\x254', 
		'\x2', '\x2', '\x186F', '\x1871', '\a', '\x2B9', '\x2', '\x2', '\x1870', 
		'\x186F', '\x3', '\x2', '\x2', '\x2', '\x1870', '\x1871', '\x3', '\x2', 
		'\x2', '\x2', '\x1871', '\x1872', '\x3', '\x2', '\x2', '\x2', '\x1872', 
		'\x1874', '\x5', '\x348', '\x1A5', '\x2', '\x1873', '\x1870', '\x3', '\x2', 
		'\x2', '\x2', '\x1874', '\x1875', '\x3', '\x2', '\x2', '\x2', '\x1875', 
		'\x1873', '\x3', '\x2', '\x2', '\x2', '\x1875', '\x1876', '\x3', '\x2', 
		'\x2', '\x2', '\x1876', '\x1886', '\x3', '\x2', '\x2', '\x2', '\x1877', 
		'\x1878', '\a', '\x90', '\x2', '\x2', '\x1878', '\x1886', '\x5', '\x346', 
		'\x1A4', '\x2', '\x1879', '\x187A', '\a', '\x9E', '\x2', '\x2', '\x187A', 
		'\x1886', '\x5', '\x350', '\x1A9', '\x2', '\x187B', '\x187C', '\a', '\x13D', 
		'\x2', '\x2', '\x187C', '\x187D', '\a', '\x142', '\x2', '\x2', '\x187D', 
		'\x1886', '\x5', '\x350', '\x1A9', '\x2', '\x187E', '\x187F', '\a', '\x10B', 
		'\x2', '\x2', '\x187F', '\x1880', '\t', 'k', '\x2', '\x2', '\x1880', '\x1886', 
		'\x5', '\x350', '\x1A9', '\x2', '\x1881', '\x1882', '\a', '\x20E', '\x2', 
		'\x2', '\x1882', '\x1883', '\a', '\x23C', '\x2', '\x2', '\x1883', '\x1884', 
		'\a', '\x1B1', '\x2', '\x2', '\x1884', '\x1886', '\x5', '\x350', '\x1A9', 
		'\x2', '\x1885', '\x186D', '\x3', '\x2', '\x2', '\x2', '\x1885', '\x186E', 
		'\x3', '\x2', '\x2', '\x2', '\x1885', '\x1877', '\x3', '\x2', '\x2', '\x2', 
		'\x1885', '\x1879', '\x3', '\x2', '\x2', '\x2', '\x1885', '\x187B', '\x3', 
		'\x2', '\x2', '\x2', '\x1885', '\x187E', '\x3', '\x2', '\x2', '\x2', '\x1885', 
		'\x1881', '\x3', '\x2', '\x2', '\x2', '\x1886', '\x367', '\x3', '\x2', 
		'\x2', '\x2', '\x1887', '\x1889', '\a', '\x2B9', '\x2', '\x2', '\x1888', 
		'\x1887', '\x3', '\x2', '\x2', '\x2', '\x1888', '\x1889', '\x3', '\x2', 
		'\x2', '\x2', '\x1889', '\x188A', '\x3', '\x2', '\x2', '\x2', '\x188A', 
		'\x188C', '\x5', '\x3B0', '\x1D9', '\x2', '\x188B', '\x1888', '\x3', '\x2', 
		'\x2', '\x2', '\x188C', '\x188D', '\x3', '\x2', '\x2', '\x2', '\x188D', 
		'\x188B', '\x3', '\x2', '\x2', '\x2', '\x188D', '\x188E', '\x3', '\x2', 
		'\x2', '\x2', '\x188E', '\x369', '\x3', '\x2', '\x2', '\x2', '\x188F', 
		'\x1890', '\a', '\x2B3', '\x2', '\x2', '\x1890', '\x1891', '\x5', '\x368', 
		'\x1B5', '\x2', '\x1891', '\x1892', '\a', '\x2B4', '\x2', '\x2', '\x1892', 
		'\x36B', '\x3', '\x2', '\x2', '\x2', '\x1893', '\x1894', '\a', '\x10E', 
		'\x2', '\x2', '\x1894', '\x1895', '\a', '\x2B3', '\x2', '\x2', '\x1895', 
		'\x1896', '\a', '\x288', '\x2', '\x2', '\x1896', '\x1897', '\t', 'H', 
		'\x2', '\x2', '\x1897', '\x1898', '\x5', '\x268', '\x135', '\x2', '\x1898', 
		'\x189A', '\a', '\x2B4', '\x2', '\x2', '\x1899', '\x189B', '\x5', '\x2F8', 
		'\x17D', '\x2', '\x189A', '\x1899', '\x3', '\x2', '\x2', '\x2', '\x189A', 
		'\x189B', '\x3', '\x2', '\x2', '\x2', '\x189B', '\x36D', '\x3', '\x2', 
		'\x2', '\x2', '\x189C', '\x18A3', '\a', '\x2B3', '\x2', '\x2', '\x189D', 
		'\x189F', '\a', '\x2B9', '\x2', '\x2', '\x189E', '\x189D', '\x3', '\x2', 
		'\x2', '\x2', '\x189E', '\x189F', '\x3', '\x2', '\x2', '\x2', '\x189F', 
		'\x18A0', '\x3', '\x2', '\x2', '\x2', '\x18A0', '\x18A2', '\x5', '\x376', 
		'\x1BC', '\x2', '\x18A1', '\x189E', '\x3', '\x2', '\x2', '\x2', '\x18A2', 
		'\x18A5', '\x3', '\x2', '\x2', '\x2', '\x18A3', '\x18A1', '\x3', '\x2', 
		'\x2', '\x2', '\x18A3', '\x18A4', '\x3', '\x2', '\x2', '\x2', '\x18A4', 
		'\x18A6', '\x3', '\x2', '\x2', '\x2', '\x18A5', '\x18A3', '\x3', '\x2', 
		'\x2', '\x2', '\x18A6', '\x18A8', '\a', '\x2B4', '\x2', '\x2', '\x18A7', 
		'\x18A9', '\x5', '\x36C', '\x1B7', '\x2', '\x18A8', '\x18A7', '\x3', '\x2', 
		'\x2', '\x2', '\x18A8', '\x18A9', '\x3', '\x2', '\x2', '\x2', '\x18A9', 
		'\x36F', '\x3', '\x2', '\x2', '\x2', '\x18AA', '\x18B4', '\a', '\x2B3', 
		'\x2', '\x2', '\x18AB', '\x18AD', '\a', '\x2B9', '\x2', '\x2', '\x18AC', 
		'\x18AB', '\x3', '\x2', '\x2', '\x2', '\x18AC', '\x18AD', '\x3', '\x2', 
		'\x2', '\x2', '\x18AD', '\x18AE', '\x3', '\x2', '\x2', '\x2', '\x18AE', 
		'\x18B0', '\x5', '\x376', '\x1BC', '\x2', '\x18AF', '\x18B1', '\x5', '\x374', 
		'\x1BB', '\x2', '\x18B0', '\x18AF', '\x3', '\x2', '\x2', '\x2', '\x18B0', 
		'\x18B1', '\x3', '\x2', '\x2', '\x2', '\x18B1', '\x18B3', '\x3', '\x2', 
		'\x2', '\x2', '\x18B2', '\x18AC', '\x3', '\x2', '\x2', '\x2', '\x18B3', 
		'\x18B6', '\x3', '\x2', '\x2', '\x2', '\x18B4', '\x18B2', '\x3', '\x2', 
		'\x2', '\x2', '\x18B4', '\x18B5', '\x3', '\x2', '\x2', '\x2', '\x18B5', 
		'\x18B7', '\x3', '\x2', '\x2', '\x2', '\x18B6', '\x18B4', '\x3', '\x2', 
		'\x2', '\x2', '\x18B7', '\x18B9', '\a', '\x2B4', '\x2', '\x2', '\x18B8', 
		'\x18BA', '\x5', '\x36C', '\x1B7', '\x2', '\x18B9', '\x18B8', '\x3', '\x2', 
		'\x2', '\x2', '\x18B9', '\x18BA', '\x3', '\x2', '\x2', '\x2', '\x18BA', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x18BB', '\x18BC', '\a', '\x2B3', 
		'\x2', '\x2', '\x18BC', '\x18C9', '\x5', '\x3B0', '\x1D9', '\x2', '\x18BD', 
		'\x18C0', '\a', '\x2B9', '\x2', '\x2', '\x18BE', '\x18C1', '\x5', '\x3C6', 
		'\x1E4', '\x2', '\x18BF', '\x18C1', '\a', '\x16A', '\x2', '\x2', '\x18C0', 
		'\x18BE', '\x3', '\x2', '\x2', '\x2', '\x18C0', '\x18BF', '\x3', '\x2', 
		'\x2', '\x2', '\x18C1', '\x18C7', '\x3', '\x2', '\x2', '\x2', '\x18C2', 
		'\x18C5', '\a', '\x2B9', '\x2', '\x2', '\x18C3', '\x18C6', '\x5', '\x3C6', 
		'\x1E4', '\x2', '\x18C4', '\x18C6', '\a', '\x16A', '\x2', '\x2', '\x18C5', 
		'\x18C3', '\x3', '\x2', '\x2', '\x2', '\x18C5', '\x18C4', '\x3', '\x2', 
		'\x2', '\x2', '\x18C6', '\x18C8', '\x3', '\x2', '\x2', '\x2', '\x18C7', 
		'\x18C2', '\x3', '\x2', '\x2', '\x2', '\x18C7', '\x18C8', '\x3', '\x2', 
		'\x2', '\x2', '\x18C8', '\x18CA', '\x3', '\x2', '\x2', '\x2', '\x18C9', 
		'\x18BD', '\x3', '\x2', '\x2', '\x2', '\x18C9', '\x18CA', '\x3', '\x2', 
		'\x2', '\x2', '\x18CA', '\x18CB', '\x3', '\x2', '\x2', '\x2', '\x18CB', 
		'\x18DC', '\a', '\x256', '\x2', '\x2', '\x18CC', '\x18CD', '\x5', '\x342', 
		'\x1A2', '\x2', '\x18CD', '\x18CE', '\a', '\x2AC', '\x2', '\x2', '\x18CE', 
		'\x18CF', '\a', '\x2B6', '\x2', '\x2', '\x18CF', '\x18DD', '\x3', '\x2', 
		'\x2', '\x2', '\x18D0', '\x18DD', '\a', '\x2B6', '\x2', '\x2', '\x18D1', 
		'\x18D3', '\a', '\x2B9', '\x2', '\x2', '\x18D2', '\x18D1', '\x3', '\x2', 
		'\x2', '\x2', '\x18D2', '\x18D3', '\x3', '\x2', '\x2', '\x2', '\x18D3', 
		'\x18D4', '\x3', '\x2', '\x2', '\x2', '\x18D4', '\x18D6', '\x5', '\x2B8', 
		'\x15D', '\x2', '\x18D5', '\x18D7', '\x5', '\x328', '\x195', '\x2', '\x18D6', 
		'\x18D5', '\x3', '\x2', '\x2', '\x2', '\x18D6', '\x18D7', '\x3', '\x2', 
		'\x2', '\x2', '\x18D7', '\x18D9', '\x3', '\x2', '\x2', '\x2', '\x18D8', 
		'\x18D2', '\x3', '\x2', '\x2', '\x2', '\x18D9', '\x18DA', '\x3', '\x2', 
		'\x2', '\x2', '\x18DA', '\x18D8', '\x3', '\x2', '\x2', '\x2', '\x18DA', 
		'\x18DB', '\x3', '\x2', '\x2', '\x2', '\x18DB', '\x18DD', '\x3', '\x2', 
		'\x2', '\x2', '\x18DC', '\x18CC', '\x3', '\x2', '\x2', '\x2', '\x18DC', 
		'\x18D0', '\x3', '\x2', '\x2', '\x2', '\x18DC', '\x18D8', '\x3', '\x2', 
		'\x2', '\x2', '\x18DD', '\x18DE', '\x3', '\x2', '\x2', '\x2', '\x18DE', 
		'\x18E0', '\a', '\x2B4', '\x2', '\x2', '\x18DF', '\x18E1', '\x5', '\x36C', 
		'\x1B7', '\x2', '\x18E0', '\x18DF', '\x3', '\x2', '\x2', '\x2', '\x18E0', 
		'\x18E1', '\x3', '\x2', '\x2', '\x2', '\x18E1', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\x18E2', '\x18E3', '\t', 'l', '\x2', '\x2', '\x18E3', '\x18E4', 
		'\a', '\x16B', '\x2', '\x2', '\x18E4', '\x375', '\x3', '\x2', '\x2', '\x2', 
		'\x18E5', '\x18E6', '\x5', '\x390', '\x1C9', '\x2', '\x18E6', '\x18E7', 
		'\a', '\x2C7', '\x2', '\x2', '\x18E7', '\x18E8', '\a', '\x2C2', '\x2', 
		'\x2', '\x18E8', '\x18EA', '\x3', '\x2', '\x2', '\x2', '\x18E9', '\x18E5', 
		'\x3', '\x2', '\x2', '\x2', '\x18E9', '\x18EA', '\x3', '\x2', '\x2', '\x2', 
		'\x18EA', '\x18EB', '\x3', '\x2', '\x2', '\x2', '\x18EB', '\x18EC', '\x5', 
		'\x2B8', '\x15D', '\x2', '\x18EC', '\x377', '\x3', '\x2', '\x2', '\x2', 
		'\x18ED', '\x18F6', '\x5', '\x37A', '\x1BE', '\x2', '\x18EE', '\x18F0', 
		'\a', '\x1C2', '\x2', '\x2', '\x18EF', '\x18EE', '\x3', '\x2', '\x2', 
		'\x2', '\x18EF', '\x18F0', '\x3', '\x2', '\x2', '\x2', '\x18F0', '\x18F1', 
		'\x3', '\x2', '\x2', '\x2', '\x18F1', '\x18F3', '\x5', '\x3B6', '\x1DC', 
		'\x2', '\x18F2', '\x18F4', '\t', 'm', '\x2', '\x2', '\x18F3', '\x18F2', 
		'\x3', '\x2', '\x2', '\x2', '\x18F3', '\x18F4', '\x3', '\x2', '\x2', '\x2', 
		'\x18F4', '\x18F6', '\x3', '\x2', '\x2', '\x2', '\x18F5', '\x18ED', '\x3', 
		'\x2', '\x2', '\x2', '\x18F5', '\x18EF', '\x3', '\x2', '\x2', '\x2', '\x18F6', 
		'\x379', '\x3', '\x2', '\x2', '\x2', '\x18F7', '\x18F9', '\x5', '\x37E', 
		'\x1C0', '\x2', '\x18F8', '\x18FA', '\x5', '\x37C', '\x1BF', '\x2', '\x18F9', 
		'\x18F8', '\x3', '\x2', '\x2', '\x2', '\x18F9', '\x18FA', '\x3', '\x2', 
		'\x2', '\x2', '\x18FA', '\x1904', '\x3', '\x2', '\x2', '\x2', '\x18FB', 
		'\x18FD', '\a', '\x26B', '\x2', '\x2', '\x18FC', '\x18FE', '\a', '\x120', 
		'\x2', '\x2', '\x18FD', '\x18FC', '\x3', '\x2', '\x2', '\x2', '\x18FD', 
		'\x18FE', '\x3', '\x2', '\x2', '\x2', '\x18FE', '\x18FF', '\x3', '\x2', 
		'\x2', '\x2', '\x18FF', '\x1900', '\a', '\x233', '\x2', '\x2', '\x1900', 
		'\x1905', '\a', '\x280', '\x2', '\x2', '\x1901', '\x1902', '\a', '\x45', 
		'\x2', '\x2', '\x1902', '\x1903', '\a', '\x1F8', '\x2', '\x2', '\x1903', 
		'\x1905', '\x5', '\x3BA', '\x1DE', '\x2', '\x1904', '\x18FB', '\x3', '\x2', 
		'\x2', '\x2', '\x1904', '\x1901', '\x3', '\x2', '\x2', '\x2', '\x1904', 
		'\x1905', '\x3', '\x2', '\x2', '\x2', '\x1905', '\x1917', '\x3', '\x2', 
		'\x2', '\x2', '\x1906', '\x1907', '\a', '\x103', '\x2', '\x2', '\x1907', 
		'\x190C', '\t', 'n', '\x2', '\x2', '\x1908', '\x1909', '\a', '\x2B3', 
		'\x2', '\x2', '\x1909', '\x190A', '\x5', '\x2B8', '\x15D', '\x2', '\x190A', 
		'\x190B', '\a', '\x2B4', '\x2', '\x2', '\x190B', '\x190D', '\x3', '\x2', 
		'\x2', '\x2', '\x190C', '\x1908', '\x3', '\x2', '\x2', '\x2', '\x190C', 
		'\x190D', '\x3', '\x2', '\x2', '\x2', '\x190D', '\x190E', '\x3', '\x2', 
		'\x2', '\x2', '\x190E', '\x190F', '\a', '\x238', '\x2', '\x2', '\x190F', 
		'\x1914', '\t', 'o', '\x2', '\x2', '\x1910', '\x1911', '\a', '\x2B3', 
		'\x2', '\x2', '\x1911', '\x1912', '\x5', '\x2B8', '\x15D', '\x2', '\x1912', 
		'\x1913', '\a', '\x2B4', '\x2', '\x2', '\x1913', '\x1915', '\x3', '\x2', 
		'\x2', '\x2', '\x1914', '\x1910', '\x3', '\x2', '\x2', '\x2', '\x1914', 
		'\x1915', '\x3', '\x2', '\x2', '\x2', '\x1915', '\x1917', '\x3', '\x2', 
		'\x2', '\x2', '\x1916', '\x18F7', '\x3', '\x2', '\x2', '\x2', '\x1916', 
		'\x1906', '\x3', '\x2', '\x2', '\x2', '\x1917', '\x37B', '\x3', '\x2', 
		'\x2', '\x2', '\x1918', '\x1919', '\a', '\x2B3', '\x2', '\x2', '\x1919', 
		'\x191C', '\x5', '\x3C6', '\x1E4', '\x2', '\x191A', '\x191B', '\a', '\x2B9', 
		'\x2', '\x2', '\x191B', '\x191D', '\x5', '\x3C6', '\x1E4', '\x2', '\x191C', 
		'\x191A', '\x3', '\x2', '\x2', '\x2', '\x191C', '\x191D', '\x3', '\x2', 
		'\x2', '\x2', '\x191D', '\x191F', '\x3', '\x2', '\x2', '\x2', '\x191E', 
		'\x1920', '\t', 'p', '\x2', '\x2', '\x191F', '\x191E', '\x3', '\x2', '\x2', 
		'\x2', '\x191F', '\x1920', '\x3', '\x2', '\x2', '\x2', '\x1920', '\x1921', 
		'\x3', '\x2', '\x2', '\x2', '\x1921', '\x1922', '\a', '\x2B4', '\x2', 
		'\x2', '\x1922', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x1923', '\x1960', 
		'\a', '/', '\x2', '\x2', '\x1924', '\x1960', '\a', '\x1A0', '\x2', '\x2', 
		'\x1925', '\x1960', '\a', '\x14A', '\x2', '\x2', '\x1926', '\x1960', '\a', 
		'.', '\x2', '\x2', '\x1927', '\x1960', '\a', '-', '\x2', '\x2', '\x1928', 
		'\x1960', '\a', '\x14B', '\x2', '\x2', '\x1929', '\x1960', '\a', '\x1A4', 
		'\x2', '\x2', '\x192A', '\x1960', '\a', '\x1A3', '\x2', '\x2', '\x192B', 
		'\x1960', '\a', '\x1FF', '\x2', '\x2', '\x192C', '\x1960', '\a', '\x200', 
		'\x2', '\x2', '\x192D', '\x1960', '\a', '\x16E', '\x2', '\x2', '\x192E', 
		'\x1960', '\a', '\x7F', '\x2', '\x2', '\x192F', '\x1960', '\a', '\x101', 
		'\x2', '\x2', '\x1930', '\x1960', '\a', '\x104', '\x2', '\x2', '\x1931', 
		'\x1960', '\a', '\x16D', '\x2', '\x2', '\x1932', '\x1960', '\a', '\x205', 
		'\x2', '\x2', '\x1933', '\x1960', '\a', '\x16C', '\x2', '\x2', '\x1934', 
		'\x1960', '\a', '\x80', '\x2', '\x2', '\x1935', '\x1937', '\a', '\x98', 
		'\x2', '\x2', '\x1936', '\x1938', '\a', '\x1A7', '\x2', '\x2', '\x1937', 
		'\x1936', '\x3', '\x2', '\x2', '\x2', '\x1937', '\x1938', '\x3', '\x2', 
		'\x2', '\x2', '\x1938', '\x1960', '\x3', '\x2', '\x2', '\x2', '\x1939', 
		'\x1960', '\a', '\xC9', '\x2', '\x2', '\x193A', '\x1960', '\a', '\x1BB', 
		'\x2', '\x2', '\x193B', '\x1960', '\a', '\x14E', '\x2', '\x2', '\x193C', 
		'\x193E', '\a', '\x129', '\x2', '\x2', '\x193D', '\x193F', '\a', '\x1B9', 
		'\x2', '\x2', '\x193E', '\x193D', '\x3', '\x2', '\x2', '\x2', '\x193E', 
		'\x193F', '\x3', '\x2', '\x2', '\x2', '\x193F', '\x1960', '\x3', '\x2', 
		'\x2', '\x2', '\x1940', '\x1960', '\a', '\x46', '\x2', '\x2', '\x1941', 
		'\x1960', '\a', '\x45', '\x2', '\x2', '\x1942', '\x1960', '\a', '\x25A', 
		'\x2', '\x2', '\x1943', '\x1960', '\a', '\x25B', '\x2', '\x2', '\x1944', 
		'\x1960', '\a', '\x218', '\x2', '\x2', '\x1945', '\x1960', '\a', '\x1B9', 
		'\x2', '\x2', '\x1946', '\x1960', '\a', '\x34', '\x2', '\x2', '\x1947', 
		'\x1960', '\a', 'x', '\x2', '\x2', '\x1948', '\x1960', '\a', '\x1DE', 
		'\x2', '\x2', '\x1949', '\x1960', '\a', '\x251', '\x2', '\x2', '\x194A', 
		'\x1960', '\a', '\x27D', '\x2', '\x2', '\x194B', '\x1960', '\a', '\x145', 
		'\x2', '\x2', '\x194C', '\x1960', '\a', 'y', '\x2', '\x2', '\x194D', '\x1960', 
		'\a', '\xE3', '\x2', '\x2', '\x194E', '\x1960', '\a', '\x13F', '\x2', 
		'\x2', '\x194F', '\x1960', '\a', '\x1EB', '\x2', '\x2', '\x1950', '\x1960', 
		'\a', '\x235', '\x2', '\x2', '\x1951', '\x1960', '\a', '\x236', '\x2', 
		'\x2', '\x1952', '\x1960', '\a', '\x237', '\x2', '\x2', '\x1953', '\x1960', 
		'\a', '\x234', '\x2', '\x2', '\x1954', '\x1960', '\a', '\x230', '\x2', 
		'\x2', '\x1955', '\x1960', '\a', '\x232', '\x2', '\x2', '\x1956', '\x1960', 
		'\a', '\x231', '\x2', '\x2', '\x1957', '\x1960', '\a', '\x22F', '\x2', 
		'\x2', '\x1958', '\x1960', '\a', '\x27F', '\x2', '\x2', '\x1959', '\x1960', 
		'\a', '\x9A', '\x2', '\x2', '\x195A', '\x1960', '\a', '+', '\x2', '\x2', 
		'\x195B', '\x1960', '\a', '\x30', '\x2', '\x2', '\x195C', '\x1960', '\a', 
		'L', '\x2', '\x2', '\x195D', '\x1960', '\a', '\x14F', '\x2', '\x2', '\x195E', 
		'\x1960', '\a', '\x141', '\x2', '\x2', '\x195F', '\x1923', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1924', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1925', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1926', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1927', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1928', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1929', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x192A', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x192B', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x192C', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x192D', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x192E', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x192F', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1930', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1931', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1932', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1933', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1934', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1935', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1939', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x193A', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x193B', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x193C', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1940', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1941', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1942', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1943', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1944', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1945', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1946', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1947', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1948', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1949', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x194A', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x194B', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x194C', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x194D', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x194E', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x194F', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1950', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1951', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1952', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1953', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1954', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1955', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1956', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x1957', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x1958', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x1959', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x195A', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x195B', '\x3', '\x2', '\x2', '\x2', '\x195F', '\x195C', '\x3', '\x2', 
		'\x2', '\x2', '\x195F', '\x195D', '\x3', '\x2', '\x2', '\x2', '\x195F', 
		'\x195E', '\x3', '\x2', '\x2', '\x2', '\x1960', '\x37F', '\x3', '\x2', 
		'\x2', '\x2', '\x1961', '\x1965', '\a', '\x2BD', '\x2', '\x2', '\x1962', 
		'\x1963', '\a', '\x2C4', '\x2', '\x2', '\x1963', '\x1965', '\a', '\x2AD', 
		'\x2', '\x2', '\x1964', '\x1961', '\x3', '\x2', '\x2', '\x2', '\x1964', 
		'\x1962', '\x3', '\x2', '\x2', '\x2', '\x1965', '\x196E', '\x3', '\x2', 
		'\x2', '\x2', '\x1966', '\x1968', '\a', '\xF2', '\x2', '\x2', '\x1967', 
		'\x1966', '\x3', '\x2', '\x2', '\x2', '\x1967', '\x1968', '\x3', '\x2', 
		'\x2', '\x2', '\x1968', '\x196C', '\x3', '\x2', '\x2', '\x2', '\x1969', 
		'\x196D', '\a', '\x2BD', '\x2', '\x2', '\x196A', '\x196B', '\a', '\x2C4', 
		'\x2', '\x2', '\x196B', '\x196D', '\a', '\x2AD', '\x2', '\x2', '\x196C', 
		'\x1969', '\x3', '\x2', '\x2', '\x2', '\x196C', '\x196A', '\x3', '\x2', 
		'\x2', '\x2', '\x196D', '\x196F', '\x3', '\x2', '\x2', '\x2', '\x196E', 
		'\x1967', '\x3', '\x2', '\x2', '\x2', '\x196E', '\x196F', '\x3', '\x2', 
		'\x2', '\x2', '\x196F', '\x1974', '\x3', '\x2', '\x2', '\x2', '\x1970', 
		'\x1971', '\a', '\x2AC', '\x2', '\x2', '\x1971', '\x1973', '\x5', '\x384', 
		'\x1C3', '\x2', '\x1972', '\x1970', '\x3', '\x2', '\x2', '\x2', '\x1973', 
		'\x1976', '\x3', '\x2', '\x2', '\x2', '\x1974', '\x1972', '\x3', '\x2', 
		'\x2', '\x2', '\x1974', '\x1975', '\x3', '\x2', '\x2', '\x2', '\x1975', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x1976', '\x1974', '\x3', '\x2', 
		'\x2', '\x2', '\x1977', '\x197C', '\x5', '\x384', '\x1C3', '\x2', '\x1978', 
		'\x1979', '\a', '\x2AC', '\x2', '\x2', '\x1979', '\x197B', '\x5', '\x384', 
		'\x1C3', '\x2', '\x197A', '\x1978', '\x3', '\x2', '\x2', '\x2', '\x197B', 
		'\x197E', '\x3', '\x2', '\x2', '\x2', '\x197C', '\x197A', '\x3', '\x2', 
		'\x2', '\x2', '\x197C', '\x197D', '\x3', '\x2', '\x2', '\x2', '\x197D', 
		'\x383', '\x3', '\x2', '\x2', '\x2', '\x197E', '\x197C', '\x3', '\x2', 
		'\x2', '\x2', '\x197F', '\x1980', '\a', '\x2CA', '\x2', '\x2', '\x1980', 
		'\x1982', '\x5', '\x3BA', '\x1DE', '\x2', '\x1981', '\x197F', '\x3', '\x2', 
		'\x2', '\x2', '\x1981', '\x1982', '\x3', '\x2', '\x2', '\x2', '\x1982', 
		'\x1983', '\x3', '\x2', '\x2', '\x2', '\x1983', '\x1986', '\x5', '\x3B4', 
		'\x1DB', '\x2', '\x1984', '\x1985', '\a', '\x2BB', '\x2', '\x2', '\x1985', 
		'\x1987', '\x5', '\x340', '\x1A1', '\x2', '\x1986', '\x1984', '\x3', '\x2', 
		'\x2', '\x2', '\x1986', '\x1987', '\x3', '\x2', '\x2', '\x2', '\x1987', 
		'\x1989', '\x3', '\x2', '\x2', '\x2', '\x1988', '\x198A', '\x5', '\x36E', 
		'\x1B8', '\x2', '\x1989', '\x1988', '\x3', '\x2', '\x2', '\x2', '\x1989', 
		'\x198A', '\x3', '\x2', '\x2', '\x2', '\x198A', '\x385', '\x3', '\x2', 
		'\x2', '\x2', '\x198B', '\x198C', '\a', '\x2CA', '\x2', '\x2', '\x198C', 
		'\x198E', '\x5', '\x3BA', '\x1DE', '\x2', '\x198D', '\x198B', '\x3', '\x2', 
		'\x2', '\x2', '\x198D', '\x198E', '\x3', '\x2', '\x2', '\x2', '\x198E', 
		'\x198F', '\x3', '\x2', '\x2', '\x2', '\x198F', '\x1990', '\x5', '\x3B4', 
		'\x1DB', '\x2', '\x1990', '\x387', '\x3', '\x2', '\x2', '\x2', '\x1991', 
		'\x1993', '\a', '\xE', '\x2', '\x2', '\x1992', '\x1994', '\a', '\x1AE', 
		'\x2', '\x2', '\x1993', '\x1992', '\x3', '\x2', '\x2', '\x2', '\x1993', 
		'\x1994', '\x3', '\x2', '\x2', '\x2', '\x1994', '\x19B3', '\x3', '\x2', 
		'\x2', '\x2', '\x1995', '\x19B3', '\a', '\xF', '\x2', '\x2', '\x1996', 
		'\x19B3', '\a', '~', '\x2', '\x2', '\x1997', '\x19B3', '\a', '\x8A', '\x2', 
		'\x2', '\x1998', '\x19B3', '\a', '\xB6', '\x2', '\x2', '\x1999', '\x19B3', 
		'\a', '\xC7', '\x2', '\x2', '\x199A', '\x199B', '\a', '\xC7', '\x2', '\x2', 
		'\x199B', '\x19B3', '\a', '\x13', '\x2', '\x2', '\x199C', '\x19B3', '\a', 
		'\xEF', '\x2', '\x2', '\x199D', '\x199E', '\a', '\xF5', '\x2', '\x2', 
		'\x199E', '\x19B3', '\a', '\x1AE', '\x2', '\x2', '\x199F', '\x19B3', '\a', 
		'\xFE', '\x2', '\x2', '\x19A0', '\x19A1', '\a', '\x10E', '\x2', '\x2', 
		'\x19A1', '\x19B3', '\a', '\x1F1', '\x2', '\x2', '\x19A2', '\x19A3', '\a', 
		'\x13A', '\x2', '\x2', '\x19A3', '\x19B3', '\a', '\x261', '\x2', '\x2', 
		'\x19A4', '\x19A5', '\a', '\x178', '\x2', '\x2', '\x19A5', '\x19A6', '\a', 
		'T', '\x2', '\x2', '\x19A6', '\x19B3', '\a', '\x1C3', '\x2', '\x2', '\x19A7', 
		'\x19A8', '\a', '\x1B5', '\x2', '\x2', '\x19A8', '\x19B3', '\a', '\x1D8', 
		'\x2', '\x2', '\x19A9', '\x19B3', '\a', '\x1BA', '\x2', '\x2', '\x19AA', 
		'\x19B3', '\a', '\x1C0', '\x2', '\x2', '\x19AB', '\x19B3', '\a', '\x1EF', 
		'\x2', '\x2', '\x19AC', '\x19AD', '\a', '\x23B', '\x2', '\x2', '\x19AD', 
		'\x19B3', '\a', '\x20E', '\x2', '\x2', '\x19AE', '\x19B3', '\a', '\x244', 
		'\x2', '\x2', '\x19AF', '\x19B3', '\a', '\x24F', '\x2', '\x2', '\x19B0', 
		'\x19B3', '\a', '\x255', '\x2', '\x2', '\x19B1', '\x19B3', '\a', '\x26D', 
		'\x2', '\x2', '\x19B2', '\x1991', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x1995', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x1996', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x1997', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x1998', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x1999', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x199A', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x199C', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x199D', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x199F', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x19A0', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x19A2', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x19A4', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x19A7', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x19A9', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x19AA', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x19AB', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x19AC', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x19AE', '\x3', '\x2', '\x2', '\x2', '\x19B2', 
		'\x19AF', '\x3', '\x2', '\x2', '\x2', '\x19B2', '\x19B0', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x19B1', '\x3', '\x2', '\x2', '\x2', '\x19B3', 
		'\x389', '\x3', '\x2', '\x2', '\x2', '\x19B4', '\x19B5', '\a', '\xE', 
		'\x2', '\x2', '\x19B5', '\x1AFB', '\a', '\x1AE', '\x2', '\x2', '\x19B6', 
		'\x1AFB', '\a', '\t', '\x2', '\x2', '\x19B7', '\x19B9', '\a', '\a', '\x2', 
		'\x2', '\x19B8', '\x19BA', '\a', '\x12', '\x2', '\x2', '\x19B9', '\x19B8', 
		'\x3', '\x2', '\x2', '\x2', '\x19B9', '\x19BA', '\x3', '\x2', '\x2', '\x2', 
		'\x19BA', '\x19BB', '\x3', '\x2', '\x2', '\x2', '\x19BB', '\x19BC', '\a', 
		'\x20E', '\x2', '\x2', '\x19BC', '\x19BD', '\a', '\x241', '\x2', '\x2', 
		'\x19BD', '\x1AFB', '\a', '\x1F8', '\x2', '\x2', '\x19BE', '\x19BF', '\t', 
		'q', '\x2', '\x2', '\x19BF', '\x19C0', '\a', '\x12', '\x2', '\x2', '\x19C0', 
		'\x19C1', '\a', '\x20E', '\x2', '\x2', '\x19C1', '\x1AFB', '\a', '\x1B1', 
		'\x2', '\x2', '\x19C2', '\x19C3', '\a', '\a', '\x2', '\x2', '\x19C3', 
		'\x19C4', '\a', '\x20E', '\x2', '\x2', '\x19C4', '\x19C5', '\a', '\x12E', 
		'\x2', '\x2', '\x19C5', '\x1AFB', '\a', '\x16F', '\x2', '\x2', '\x19C6', 
		'\x19C8', '\a', 'k', '\x2', '\x2', '\x19C7', '\x19C9', '\a', '\x12', '\x2', 
		'\x2', '\x19C8', '\x19C7', '\x3', '\x2', '\x2', '\x2', '\x19C8', '\x19C9', 
		'\x3', '\x2', '\x2', '\x2', '\x19C9', '\x19CA', '\x3', '\x2', '\x2', '\x2', 
		'\x19CA', '\x1AFB', '\a', 'N', '\x2', '\x2', '\x19CB', '\x19CC', '\t', 
		'r', '\x2', '\x2', '\x19CC', '\x19CD', '\a', '\x12', '\x2', '\x2', '\x19CD', 
		'\x1AFB', '\a', 'N', '\x2', '\x2', '\x19CE', '\x19CF', '\t', 's', '\x2', 
		'\x2', '\x19CF', '\x19D0', '\a', '\x12', '\x2', '\x2', '\x19D0', '\x1AFB', 
		'\a', '\x64', '\x2', '\x2', '\x19D1', '\x19D2', '\a', '\xB7', '\x2', '\x2', 
		'\x19D2', '\x19D3', '\a', '\x1BE', '\x2', '\x2', '\x19D3', '\x1AFB', '\a', 
		'\x1A2', '\x2', '\x2', '\x19D4', '\x19D5', '\a', '\xF', '\x2', '\x2', 
		'\x19D5', '\x1AFB', '\a', 'u', '\x2', '\x2', '\x19D6', '\x19D8', '\t', 
		't', '\x2', '\x2', '\x19D7', '\x19D9', '\a', '\x1B3', '\x2', '\x2', '\x19D8', 
		'\x19D7', '\x3', '\x2', '\x2', '\x2', '\x19D8', '\x19D9', '\x3', '\x2', 
		'\x2', '\x2', '\x19D9', '\x19DA', '\x3', '\x2', '\x2', '\x2', '\x19DA', 
		'\x19DB', '\a', 'u', '\x2', '\x2', '\x19DB', '\x1AFB', '\a', '\x11D', 
		'\x2', '\x2', '\x19DC', '\x19DD', '\a', '\x99', '\x2', '\x2', '\x19DD', 
		'\x19DE', '\a', '\x1B3', '\x2', '\x2', '\x19DE', '\x19DF', '\a', 'u', 
		'\x2', '\x2', '\x19DF', '\x1AFB', '\a', '\x11D', '\x2', '\x2', '\x19E0', 
		'\x19E1', '\a', '~', '\x2', '\x2', '\x19E1', '\x19E2', '\a', '\\', '\x2', 
		'\x2', '\x19E2', '\x1AFB', '\a', '\x1F6', '\x2', '\x2', '\x19E3', '\x19E4', 
		'\a', '~', '\x2', '\x2', '\x19E4', '\x19E5', '\a', '\x12', '\x2', '\x2', 
		'\x19E5', '\x1AFB', '\a', '\x1AF', '\x2', '\x2', '\x19E6', '\x19E7', '\a', 
		'\x10', '\x2', '\x2', '\x19E7', '\x19E8', '\a', '\x12', '\x2', '\x2', 
		'\x19E8', '\x1AFB', '\a', '\x8E', '\x2', '\x2', '\x19E9', '\x19EB', '\a', 
		'k', '\x2', '\x2', '\x19EA', '\x19EC', '\a', '\x12', '\x2', '\x2', '\x19EB', 
		'\x19EA', '\x3', '\x2', '\x2', '\x2', '\x19EB', '\x19EC', '\x3', '\x2', 
		'\x2', '\x2', '\x19EC', '\x19ED', '\x3', '\x2', '\x2', '\x2', '\x19ED', 
		'\x1AFB', '\a', '\x8F', '\x2', '\x2', '\x19EE', '\x19EF', '\t', 'r', '\x2', 
		'\x2', '\x19EF', '\x19F0', '\a', '\x12', '\x2', '\x2', '\x19F0', '\x1AFB', 
		'\a', '\x8F', '\x2', '\x2', '\x19F1', '\x19F2', '\t', 's', '\x2', '\x2', 
		'\x19F2', '\x19F3', '\a', '\x12', '\x2', '\x2', '\x19F3', '\x1AFB', '\a', 
		'\x90', '\x2', '\x2', '\x19F4', '\x19F5', '\t', 's', '\x2', '\x2', '\x19F5', 
		'\x19F6', '\a', '\x12', '\x2', '\x2', '\x19F6', '\x1AFB', '\a', '\x9E', 
		'\x2', '\x2', '\x19F7', '\x19FC', '\a', '\xC7', '\x2', '\x2', '\x19F8', 
		'\x19F9', '\a', '\x13', '\x2', '\x2', '\x19F9', '\x19FD', '\a', '\a', 
		'\x2', '\x2', '\x19FA', '\x19FB', '\a', '\x12', '\x2', '\x2', '\x19FB', 
		'\x19FD', '\a', '\x228', '\x2', '\x2', '\x19FC', '\x19F8', '\x3', '\x2', 
		'\x2', '\x2', '\x19FC', '\x19FA', '\x3', '\x2', '\x2', '\x2', '\x19FD', 
		'\x1AFB', '\x3', '\x2', '\x2', '\x2', '\x19FE', '\x19FF', '\t', 'q', '\x2', 
		'\x2', '\x19FF', '\x1A00', '\a', '\x12', '\x2', '\x2', '\x1A00', '\x1AFB', 
		'\a', '\xEF', '\x2', '\x2', '\x1A01', '\x1A03', '\a', 'k', '\x2', '\x2', 
		'\x1A02', '\x1A04', '\a', '\x12', '\x2', '\x2', '\x1A03', '\x1A02', '\x3', 
		'\x2', '\x2', '\x2', '\x1A03', '\x1A04', '\x3', '\x2', '\x2', '\x2', '\x1A04', 
		'\x1A05', '\x3', '\x2', '\x2', '\x2', '\x1A05', '\x1AFB', '\a', '\xF1', 
		'\x2', '\x2', '\x1A06', '\x1A07', '\t', 'u', '\x2', '\x2', '\x1A07', '\x1A08', 
		'\a', '\x12', '\x2', '\x2', '\x1A08', '\x1AFB', '\a', '\xF1', '\x2', '\x2', 
		'\x1A09', '\x1A0B', '\a', 'k', '\x2', '\x2', '\x1A0A', '\x1A0C', '\t', 
		'v', '\x2', '\x2', '\x1A0B', '\x1A0A', '\x3', '\x2', '\x2', '\x2', '\x1A0B', 
		'\x1A0C', '\x3', '\x2', '\x2', '\x2', '\x1A0C', '\x1A0D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A0D', '\x1AFB', '\a', '\x10C', '\x2', '\x2', '\x1A0E', 
		'\x1A0F', '\a', '\xB6', '\x2', '\x2', '\x1A0F', '\x1A10', '\a', '\x12', 
		'\x2', '\x2', '\x1A10', '\x1AFB', '\t', 'w', '\x2', '\x2', '\x1A11', '\x1A12', 
		'\a', '\x12D', '\x2', '\x2', '\x1A12', '\x1AFB', '\a', '\x1E6', '\x2', 
		'\x2', '\x1A13', '\x1A14', '\a', '\a', '\x2', '\x2', '\x1A14', '\x1A15', 
		'\a', '\x10F', '\x2', '\x2', '\x1A15', '\x1AFB', '\a', '\x12E', '\x2', 
		'\x2', '\x1A16', '\x1A18', '\a', 'k', '\x2', '\x2', '\x1A17', '\x1A19', 
		'\a', '\x12', '\x2', '\x2', '\x1A18', '\x1A17', '\x3', '\x2', '\x2', '\x2', 
		'\x1A18', '\x1A19', '\x3', '\x2', '\x2', '\x2', '\x1A19', '\x1A1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1A', '\x1AFB', '\a', '\x117', '\x2', '\x2', 
		'\x1A1B', '\x1A1C', '\t', 'u', '\x2', '\x2', '\x1A1C', '\x1A1D', '\a', 
		'\x12', '\x2', '\x2', '\x1A1D', '\x1AFB', '\a', '\x117', '\x2', '\x2', 
		'\x1A1E', '\x1AFB', '\a', '\x126', '\x2', '\x2', '\x1A1F', '\x1A21', '\a', 
		'k', '\x2', '\x2', '\x1A20', '\x1A22', '\a', '\x12', '\x2', '\x2', '\x1A21', 
		'\x1A20', '\x3', '\x2', '\x2', '\x2', '\x1A21', '\x1A22', '\x3', '\x2', 
		'\x2', '\x2', '\x1A22', '\x1A23', '\x3', '\x2', '\x2', '\x2', '\x1A23', 
		'\x1A24', '\a', '\x132', '\x2', '\x2', '\x1A24', '\x1AFB', '\a', '\x261', 
		'\x2', '\x2', '\x1A25', '\x1A26', '\t', 'r', '\x2', '\x2', '\x1A26', '\x1A27', 
		'\a', '\x12', '\x2', '\x2', '\x1A27', '\x1A28', '\a', '\x132', '\x2', 
		'\x2', '\x1A28', '\x1AFB', '\a', '\x261', '\x2', '\x2', '\x1A29', '\x1A2B', 
		'\a', '\xD6', '\x2', '\x2', '\x1A2A', '\x1A29', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2A', '\x1A2B', '\x3', '\x2', '\x2', '\x2', '\x1A2B', '\x1A2C', '\x3', 
		'\x2', '\x2', '\x2', '\x1A2C', '\x1A2D', '\a', '\x1B5', '\x2', '\x2', 
		'\x1A2D', '\x1AFB', '\a', '\x1D8', '\x2', '\x2', '\x1A2E', '\x1A2F', '\a', 
		'\x178', '\x2', '\x2', '\x1A2F', '\x1A30', '\a', 'T', '\x2', '\x2', '\x1A30', 
		'\x1AFB', '\a', '\x1C3', '\x2', '\x2', '\x1A31', '\x1A33', '\a', 'k', 
		'\x2', '\x2', '\x1A32', '\x1A34', '\a', '\x12', '\x2', '\x2', '\x1A33', 
		'\x1A32', '\x3', '\x2', '\x2', '\x2', '\x1A33', '\x1A34', '\x3', '\x2', 
		'\x2', '\x2', '\x1A34', '\x1A35', '\x3', '\x2', '\x2', '\x2', '\x1A35', 
		'\x1A36', '\a', '\x13D', '\x2', '\x2', '\x1A36', '\x1AFB', '\a', '\x142', 
		'\x2', '\x2', '\x1A37', '\x1A38', '\t', 'x', '\x2', '\x2', '\x1A38', '\x1A39', 
		'\a', '\x12', '\x2', '\x2', '\x1A39', '\x1A3A', '\a', '\x13D', '\x2', 
		'\x2', '\x1A3A', '\x1AFB', '\a', '\x142', '\x2', '\x2', '\x1A3B', '\x1A3D', 
		'\a', 'k', '\x2', '\x2', '\x1A3C', '\x1A3E', '\a', '\x12', '\x2', '\x2', 
		'\x1A3D', '\x1A3C', '\x3', '\x2', '\x2', '\x2', '\x1A3D', '\x1A3E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3E', '\x1A3F', '\x3', '\x2', '\x2', '\x2', '\x1A3F', 
		'\x1AFB', '\a', 'o', '\x2', '\x2', '\x1A40', '\x1A41', '\t', 'y', '\x2', 
		'\x2', '\x1A41', '\x1A42', '\a', '\x12', '\x2', '\x2', '\x1A42', '\x1AFB', 
		'\a', 'o', '\x2', '\x2', '\x1A43', '\x1A45', '\a', 'k', '\x2', '\x2', 
		'\x1A44', '\x1A46', '\a', '\x12', '\x2', '\x2', '\x1A45', '\x1A44', '\x3', 
		'\x2', '\x2', '\x2', '\x1A45', '\x1A46', '\x3', '\x2', '\x2', '\x2', '\x1A46', 
		'\x1A47', '\x3', '\x2', '\x2', '\x2', '\x1A47', '\x1A48', '\a', '\x135', 
		'\x2', '\x2', '\x1A48', '\x1AFB', '\a', '\xCA', '\x2', '\x2', '\x1A49', 
		'\x1A4A', '\t', 'z', '\x2', '\x2', '\x1A4A', '\x1A4B', '\a', '\x12', '\x2', 
		'\x2', '\x1A4B', '\x1A4C', '\a', '\x135', '\x2', '\x2', '\x1A4C', '\x1AFB', 
		'\a', '\xCA', '\x2', '\x2', '\x1A4D', '\x1A4F', '\a', 'k', '\x2', '\x2', 
		'\x1A4E', '\x1A50', '\a', '\x12', '\x2', '\x2', '\x1A4F', '\x1A4E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4F', '\x1A50', '\x3', '\x2', '\x2', '\x2', '\x1A50', 
		'\x1A51', '\x3', '\x2', '\x2', '\x2', '\x1A51', '\x1A52', '\a', 'o', '\x2', 
		'\x2', '\x1A52', '\x1AFB', '\a', '\x8F', '\x2', '\x2', '\x1A53', '\x1A54', 
		'\t', '{', '\x2', '\x2', '\x1A54', '\x1A55', '\a', '\x12', '\x2', '\x2', 
		'\x1A55', '\x1A56', '\a', 'o', '\x2', '\x2', '\x1A56', '\x1AFB', '\a', 
		'\x8F', '\x2', '\x2', '\x1A57', '\x1A59', '\a', 'k', '\x2', '\x2', '\x1A58', 
		'\x1A5A', '\a', '\x12', '\x2', '\x2', '\x1A59', '\x1A58', '\x3', '\x2', 
		'\x2', '\x2', '\x1A59', '\x1A5A', '\x3', '\x2', '\x2', '\x2', '\x1A5A', 
		'\x1A5B', '\x3', '\x2', '\x2', '\x2', '\x1A5B', '\x1A5C', '\a', 'o', '\x2', 
		'\x2', '\x1A5C', '\x1A5D', '\a', '\x38', '\x2', '\x2', '\x1A5D', '\x1AFB', 
		'\a', '\x1B0', '\x2', '\x2', '\x1A5E', '\x1A5F', '\t', '|', '\x2', '\x2', 
		'\x1A5F', '\x1A60', '\a', '\x12', '\x2', '\x2', '\x1A60', '\x1A61', '\a', 
		'o', '\x2', '\x2', '\x1A61', '\x1A62', '\a', '\x38', '\x2', '\x2', '\x1A62', 
		'\x1AFB', '\a', '\x1B0', '\x2', '\x2', '\x1A63', '\x1A65', '\a', 'k', 
		'\x2', '\x2', '\x1A64', '\x1A66', '\a', '\x12', '\x2', '\x2', '\x1A65', 
		'\x1A64', '\x3', '\x2', '\x2', '\x2', '\x1A65', '\x1A66', '\x3', '\x2', 
		'\x2', '\x2', '\x1A66', '\x1A67', '\x3', '\x2', '\x2', '\x2', '\x1A67', 
		'\x1AFB', '\a', '\x17A', '\x2', '\x2', '\x1A68', '\x1A69', '\t', 'u', 
		'\x2', '\x2', '\x1A69', '\x1A6A', '\a', '\x12', '\x2', '\x2', '\x1A6A', 
		'\x1AFB', '\a', '\x17A', '\x2', '\x2', '\x1A6B', '\x1A6C', '\t', 'q', 
		'\x2', '\x2', '\x1A6C', '\x1A6D', '\a', '\x12', '\x2', '\x2', '\x1A6D', 
		'\x1AFB', '\a', '\x183', '\x2', '\x2', '\x1A6E', '\x1A6F', '\a', 'k', 
		'\x2', '\x2', '\x1A6F', '\x1A70', '\a', '\x1A1', '\x2', '\x2', '\x1A70', 
		'\x1AFB', '\a', 'u', '\x2', '\x2', '\x1A71', '\x1A72', '\a', '\x1F8', 
		'\x2', '\x2', '\x1A72', '\x1AFB', '\a', '\x61', '\x2', '\x2', '\x1A73', 
		'\x1A75', '\a', 'k', '\x2', '\x2', '\x1A74', '\x1A76', '\a', '\x12', '\x2', 
		'\x2', '\x1A75', '\x1A74', '\x3', '\x2', '\x2', '\x2', '\x1A75', '\x1A76', 
		'\x3', '\x2', '\x2', '\x2', '\x1A76', '\x1A77', '\x3', '\x2', '\x2', '\x2', 
		'\x1A77', '\x1AFB', '\a', '\x1AF', '\x2', '\x2', '\x1A78', '\x1A79', '\t', 
		'u', '\x2', '\x2', '\x1A79', '\x1A7A', '\a', '\x12', '\x2', '\x2', '\x1A7A', 
		'\x1AFB', '\a', '\x1AF', '\x2', '\x2', '\x1A7B', '\x1A7C', '\t', 'q', 
		'\x2', '\x2', '\x1A7C', '\x1AFB', '\a', '\x1B1', '\x2', '\x2', '\x1A7D', 
		'\x1A7E', '\a', 'k', '\x2', '\x2', '\x1A7E', '\x1AFB', '\a', '\x1DA', 
		'\x2', '\x2', '\x1A7F', '\x1A80', '\t', '}', '\x2', '\x2', '\x1A80', '\x1A81', 
		'\a', '\x12', '\x2', '\x2', '\x1A81', '\x1AFB', '\a', '\x1DA', '\x2', 
		'\x2', '\x1A82', '\x1A83', '\t', 'q', '\x2', '\x2', '\x1A83', '\x1A84', 
		'\a', '\x1DC', '\x2', '\x2', '\x1A84', '\x1AFB', '\a', '\x1EE', '\x2', 
		'\x2', '\x1A85', '\x1A87', '\a', 'k', '\x2', '\x2', '\x1A86', '\x1A88', 
		'\a', '\x12', '\x2', '\x2', '\x1A87', '\x1A86', '\x3', '\x2', '\x2', '\x2', 
		'\x1A87', '\x1A88', '\x3', '\x2', '\x2', '\x2', '\x1A88', '\x1A89', '\x3', 
		'\x2', '\x2', '\x2', '\x1A89', '\x1AFB', '\a', '\x1F1', '\x2', '\x2', 
		'\x1A8A', '\x1A8B', '\t', '~', '\x2', '\x2', '\x1A8B', '\x1A8C', '\a', 
		'\x12', '\x2', '\x2', '\x1A8C', '\x1AFB', '\a', '\x1F1', '\x2', '\x2', 
		'\x1A8D', '\x1A8E', '\t', '\x7F', '\x2', '\x2', '\x1A8E', '\x1AFB', '\a', 
		'\x1F6', '\x2', '\x2', '\x1A8F', '\x1A90', '\a', '\xF', '\x2', '\x2', 
		'\x1A90', '\x1A91', '\a', '\x1CB', '\x2', '\x2', '\x1A91', '\x1AFB', '\a', 
		'i', '\x2', '\x2', '\x1A92', '\x1A94', '\a', 'k', '\x2', '\x2', '\x1A93', 
		'\x1A95', '\a', '\x12', '\x2', '\x2', '\x1A94', '\x1A93', '\x3', '\x2', 
		'\x2', '\x2', '\x1A94', '\x1A95', '\x3', '\x2', '\x2', '\x2', '\x1A95', 
		'\x1A96', '\x3', '\x2', '\x2', '\x2', '\x1A96', '\x1A97', '\a', '\x20E', 
		'\x2', '\x2', '\x1A97', '\x1A98', '\a', '\x23C', '\x2', '\x2', '\x1A98', 
		'\x1AFB', '\a', '\x1B1', '\x2', '\x2', '\x1A99', '\x1A9A', '\t', '\x80', 
		'\x2', '\x2', '\x1A9A', '\x1A9B', '\a', '\x12', '\x2', '\x2', '\x1A9B', 
		'\x1A9C', '\a', '\x20E', '\x2', '\x2', '\x1A9C', '\x1A9D', '\a', '\x23C', 
		'\x2', '\x2', '\x1A9D', '\x1AFB', '\a', '\x1B1', '\x2', '\x2', '\x1A9E', 
		'\x1A9F', '\a', '\x23B', '\x2', '\x2', '\x1A9F', '\x1AA0', '\a', '\x12', 
		'\x2', '\x2', '\x1AA0', '\x1AFB', '\a', '\x20E', '\x2', '\x2', '\x1AA1', 
		'\x1AA3', '\a', 'k', '\x2', '\x2', '\x1AA2', '\x1AA4', '\a', '\x12', '\x2', 
		'\x2', '\x1AA3', '\x1AA2', '\x3', '\x2', '\x2', '\x2', '\x1AA3', '\x1AA4', 
		'\x3', '\x2', '\x2', '\x2', '\x1AA4', '\x1AA5', '\x3', '\x2', '\x2', '\x2', 
		'\x1AA5', '\x1AFB', '\a', '\x21F', '\x2', '\x2', '\x1AA6', '\x1AA7', '\a', 
		'\x99', '\x2', '\x2', '\x1AA7', '\x1AA8', '\a', '\x12', '\x2', '\x2', 
		'\x1AA8', '\x1AFB', '\a', '\x21F', '\x2', '\x2', '\x1AA9', '\x1AAA', '\t', 
		's', '\x2', '\x2', '\x1AAA', '\x1AAB', '\a', '\x1B3', '\x2', '\x2', '\x1AAB', 
		'\x1AFB', '\a', '\x21F', '\x2', '\x2', '\x1AAC', '\x1AAE', '\a', 'k', 
		'\x2', '\x2', '\x1AAD', '\x1AAF', '\a', '\x12', '\x2', '\x2', '\x1AAE', 
		'\x1AAD', '\x3', '\x2', '\x2', '\x2', '\x1AAE', '\x1AAF', '\x3', '\x2', 
		'\x2', '\x2', '\x1AAF', '\x1AB0', '\x3', '\x2', '\x2', '\x2', '\x1AB0', 
		'\x1AFB', '\a', '\x228', '\x2', '\x2', '\x1AB1', '\x1AB2', '\t', '\x81', 
		'\x2', '\x2', '\x1AB2', '\x1AB3', '\a', '\x12', '\x2', '\x2', '\x1AB3', 
		'\x1AFB', '\a', '\x228', '\x2', '\x2', '\x1AB4', '\x1AB5', '\t', '\x82', 
		'\x2', '\x2', '\x1AB5', '\x1AFB', '\a', '\x227', '\x2', '\x2', '\x1AB6', 
		'\x1AB8', '\a', 'k', '\x2', '\x2', '\x1AB7', '\x1AB9', '\a', '\x12', '\x2', 
		'\x2', '\x1AB8', '\x1AB7', '\x3', '\x2', '\x2', '\x2', '\x1AB8', '\x1AB9', 
		'\x3', '\x2', '\x2', '\x2', '\x1AB9', '\x1ABA', '\x3', '\x2', '\x2', '\x2', 
		'\x1ABA', '\x1AFB', '\a', '\x23E', '\x2', '\x2', '\x1ABB', '\x1ABC', '\t', 
		'r', '\x2', '\x2', '\x1ABC', '\x1ABD', '\a', '\x12', '\x2', '\x2', '\x1ABD', 
		'\x1AFB', '\a', '\x23E', '\x2', '\x2', '\x1ABE', '\x1ABF', '\a', '\a', 
		'\x2', '\x2', '\x1ABF', '\x1AC0', '\a', 'u', '\x2', '\x2', '\x1AC0', '\x1AFB', 
		'\a', '\x23E', '\x2', '\x2', '\x1AC1', '\x1AC3', '\a', 'k', '\x2', '\x2', 
		'\x1AC2', '\x1AC4', '\a', '\x12', '\x2', '\x2', '\x1AC3', '\x1AC2', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC3', '\x1AC4', '\x3', '\x2', '\x2', '\x2', '\x1AC4', 
		'\x1AC5', '\x3', '\x2', '\x2', '\x2', '\x1AC5', '\x1AFB', '\a', '\x242', 
		'\x2', '\x2', '\x1AC6', '\x1AC7', '\t', '\x83', '\x2', '\x2', '\x1AC7', 
		'\x1AC8', '\a', '\x12', '\x2', '\x2', '\x1AC8', '\x1AFB', '\a', '\x242', 
		'\x2', '\x2', '\x1AC9', '\x1ACA', '\t', 'q', '\x2', '\x2', '\x1ACA', '\x1AFB', 
		'\a', '\x254', '\x2', '\x2', '\x1ACB', '\x1ACD', '\a', 'k', '\x2', '\x2', 
		'\x1ACC', '\x1ACE', '\a', '\x12', '\x2', '\x2', '\x1ACD', '\x1ACC', '\x3', 
		'\x2', '\x2', '\x2', '\x1ACD', '\x1ACE', '\x3', '\x2', '\x2', '\x2', '\x1ACE', 
		'\x1ACF', '\x3', '\x2', '\x2', '\x2', '\x1ACF', '\x1AFB', '\a', '\x261', 
		'\x2', '\x2', '\x1AD0', '\x1AD1', '\t', '\x84', '\x2', '\x2', '\x1AD1', 
		'\x1AD2', '\a', '\x12', '\x2', '\x2', '\x1AD2', '\x1AFB', '\a', '\x261', 
		'\x2', '\x2', '\x1AD3', '\x1AD4', '\t', '\x85', '\x2', '\x2', '\x1AD4', 
		'\x1AFB', '\a', '\x12', '\x2', '\x2', '\x1AD5', '\x1AD6', '\a', '\'', 
		'\x2', '\x2', '\x1AD6', '\x1AFB', '\a', '\x254', '\x2', '\x2', '\x1AD7', 
		'\x1AD8', '\a', '\x44', '\x2', '\x2', '\x1AD8', '\x1AFB', '\a', '\x166', 
		'\x2', '\x2', '\x1AD9', '\x1ADA', '\a', '\xB7', '\x2', '\x2', '\x1ADA', 
		'\x1ADB', '\a', '\x3', '\x2', '\x2', '\x1ADB', '\x1AFB', '\a', '\x1A2', 
		'\x2', '\x2', '\x1ADC', '\x1ADE', '\a', '\xCE', '\x2', '\x2', '\x1ADD', 
		'\x1ADF', '\a', '\x12', '\x2', '\x2', '\x1ADE', '\x1ADD', '\x3', '\x2', 
		'\x2', '\x2', '\x1ADE', '\x1ADF', '\x3', '\x2', '\x2', '\x2', '\x1ADF', 
		'\x1AE0', '\x3', '\x2', '\x2', '\x2', '\x1AE0', '\x1AFB', '\a', '\x23A', 
		'\x2', '\x2', '\x1AE1', '\x1AE2', '\a', '\xD9', '\x2', '\x2', '\x1AE2', 
		'\x1AE4', '\a', '\x12', '\x2', '\x2', '\x1AE3', '\x1AE5', '\a', '\x16F', 
		'\x2', '\x2', '\x1AE4', '\x1AE3', '\x3', '\x2', '\x2', '\x2', '\x1AE4', 
		'\x1AE5', '\x3', '\x2', '\x2', '\x2', '\x1AE5', '\x1AE6', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE6', '\x1AFB', '\a', '\x1AD', '\x2', '\x2', '\x1AE7', 
		'\x1AE8', '\a', '\xF5', '\x2', '\x2', '\x1AE8', '\x1AE9', '\a', '\x12', 
		'\x2', '\x2', '\x1AE9', '\x1AFB', '\a', '\x1AE', '\x2', '\x2', '\x1AEA', 
		'\x1AEB', '\a', '\x10E', '\x2', '\x2', '\x1AEB', '\x1AEC', '\a', 'x', 
		'\x2', '\x2', '\x1AEC', '\x1AFB', '\a', '\x233', '\x2', '\x2', '\x1AED', 
		'\x1AEE', '\a', '\x10E', '\x2', '\x2', '\x1AEE', '\x1AFB', '\a', '\x224', 
		'\x2', '\x2', '\x1AEF', '\x1AF0', '\a', '\x1B4', '\x2', '\x2', '\x1AF0', 
		'\x1AFB', '\a', 'z', '\x2', '\x2', '\x1AF1', '\x1AFB', '\a', '\x1D1', 
		'\x2', '\x2', '\x1AF2', '\x1AF3', '\a', '\x1EF', '\x2', '\x2', '\x1AF3', 
		'\x1AF4', '\a', '\x12', '\x2', '\x2', '\x1AF4', '\x1AFB', '\t', '\x86', 
		'\x2', '\x2', '\x1AF5', '\x1AFB', '\a', '\x220', '\x2', '\x2', '\x1AF6', 
		'\x1AFB', '\a', '\x222', '\x2', '\x2', '\x1AF7', '\x1AFB', '\a', '\x223', 
		'\x2', '\x2', '\x1AF8', '\x1AFB', '\a', '\x225', '\x2', '\x2', '\x1AF9', 
		'\x1AFB', '\a', '\x226', '\x2', '\x2', '\x1AFA', '\x19B4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x19B6', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x19B7', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x19BE', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x19C2', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x19C6', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x19CB', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x19CE', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x19D1', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x19D4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x19D6', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x19DC', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x19E0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x19E3', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x19E6', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x19E9', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x19EE', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x19F1', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x19F4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x19F7', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x19FE', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A01', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A06', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A09', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A0E', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A11', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A13', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A16', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A1B', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A1E', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A25', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A2A', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A2E', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A31', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A37', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A3B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A40', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A43', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A49', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A4D', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A53', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A57', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A5E', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A63', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A68', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A6B', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A6E', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A71', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A73', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A78', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A7B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A7D', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A7F', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A82', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A85', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A8A', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A8D', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A8F', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1A92', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1A99', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1A9E', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AA1', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AA9', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AAC', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AB1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AB4', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AB6', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1ABB', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1ABE', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AC1', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AC9', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1ACB', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AD0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AD3', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AD5', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AD7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AD9', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1ADC', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AE1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AE7', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AEA', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AED', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AEF', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AF1', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AF5', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AF6', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AF7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFA', '\x1AF8', '\x3', '\x2', '\x2', '\x2', '\x1AFA', 
		'\x1AF9', '\x3', '\x2', '\x2', '\x2', '\x1AFB', '\x38B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFC', '\x1AFF', '\x5', '\x38E', '\x1C8', '\x2', '\x1AFD', 
		'\x1AFF', '\x5', '\x1D0', '\xE9', '\x2', '\x1AFE', '\x1AFC', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFE', '\x1AFD', '\x3', '\x2', '\x2', '\x2', '\x1AFF', 
		'\x38D', '\x3', '\x2', '\x2', '\x2', '\x1B00', '\x1B03', '\a', '\x230', 
		'\x2', '\x2', '\x1B01', '\x1B04', '\x5', '\x3CA', '\x1E6', '\x2', '\x1B02', 
		'\x1B04', '\x5', '\x380', '\x1C1', '\x2', '\x1B03', '\x1B01', '\x3', '\x2', 
		'\x2', '\x2', '\x1B03', '\x1B02', '\x3', '\x2', '\x2', '\x2', '\x1B04', 
		'\x1B09', '\x3', '\x2', '\x2', '\x2', '\x1B05', '\x1B06', '\a', '\x18', 
		'\x2', '\x2', '\x1B06', '\x1B07', '\a', '\x233', '\x2', '\x2', '\x1B07', 
		'\x1B08', '\a', '\x280', '\x2', '\x2', '\x1B08', '\x1B0A', '\x5', '\x3CA', 
		'\x1E6', '\x2', '\x1B09', '\x1B05', '\x3', '\x2', '\x2', '\x2', '\x1B09', 
		'\x1B0A', '\x3', '\x2', '\x2', '\x2', '\x1B0A', '\x1B3F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0B', '\x1B0F', '\a', '\x103', '\x2', '\x2', '\x1B0C', 
		'\x1B10', '\x5', '\x3CA', '\x1E6', '\x2', '\x1B0D', '\x1B10', '\x5', '\x380', 
		'\x1C1', '\x2', '\x1B0E', '\x1B10', '\x5', '\x384', '\x1C3', '\x2', '\x1B0F', 
		'\x1B0C', '\x3', '\x2', '\x2', '\x2', '\x1B0F', '\x1B0D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0F', '\x1B0E', '\x3', '\x2', '\x2', '\x2', '\x1B10', 
		'\x1B11', '\x3', '\x2', '\x2', '\x2', '\x1B11', '\x1B1F', '\t', '\x87', 
		'\x2', '\x2', '\x1B12', '\x1B15', '\a', '\x2B3', '\x2', '\x2', '\x1B13', 
		'\x1B16', '\a', '\x2AD', '\x2', '\x2', '\x1B14', '\x1B16', '\x5', '\x380', 
		'\x1C1', '\x2', '\x1B15', '\x1B13', '\x3', '\x2', '\x2', '\x2', '\x1B15', 
		'\x1B14', '\x3', '\x2', '\x2', '\x2', '\x1B16', '\x1B1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B17', '\x1B1A', '\a', '\x2B9', '\x2', '\x2', '\x1B18', 
		'\x1B1B', '\a', '\x2AD', '\x2', '\x2', '\x1B19', '\x1B1B', '\x5', '\x380', 
		'\x1C1', '\x2', '\x1B1A', '\x1B18', '\x3', '\x2', '\x2', '\x2', '\x1B1A', 
		'\x1B19', '\x3', '\x2', '\x2', '\x2', '\x1B1B', '\x1B1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1C', '\x1B17', '\x3', '\x2', '\x2', '\x2', '\x1B1C', 
		'\x1B1D', '\x3', '\x2', '\x2', '\x2', '\x1B1D', '\x1B1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1E', '\x1B20', '\a', '\x2B4', '\x2', '\x2', '\x1B1F', 
		'\x1B12', '\x3', '\x2', '\x2', '\x2', '\x1B1F', '\x1B20', '\x3', '\x2', 
		'\x2', '\x2', '\x1B20', '\x1B30', '\x3', '\x2', '\x2', '\x2', '\x1B21', 
		'\x1B2E', '\a', '\x238', '\x2', '\x2', '\x1B22', '\x1B2F', '\a', 'y', 
		'\x2', '\x2', '\x1B23', '\x1B2F', '\a', '\xE3', '\x2', '\x2', '\x1B24', 
		'\x1B2F', '\a', '\x13F', '\x2', '\x2', '\x1B25', '\x1B2C', '\a', '\x1EB', 
		'\x2', '\x2', '\x1B26', '\x1B29', '\a', '\x2B3', '\x2', '\x2', '\x1B27', 
		'\x1B2A', '\a', '\x2AD', '\x2', '\x2', '\x1B28', '\x1B2A', '\x5', '\x380', 
		'\x1C1', '\x2', '\x1B29', '\x1B27', '\x3', '\x2', '\x2', '\x2', '\x1B29', 
		'\x1B28', '\x3', '\x2', '\x2', '\x2', '\x1B2A', '\x1B2B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2B', '\x1B2D', '\a', '\x2B4', '\x2', '\x2', '\x1B2C', 
		'\x1B26', '\x3', '\x2', '\x2', '\x2', '\x1B2C', '\x1B2D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2D', '\x1B2F', '\x3', '\x2', '\x2', '\x2', '\x1B2E', 
		'\x1B22', '\x3', '\x2', '\x2', '\x2', '\x1B2E', '\x1B23', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2E', '\x1B24', '\x3', '\x2', '\x2', '\x2', '\x1B2E', 
		'\x1B25', '\x3', '\x2', '\x2', '\x2', '\x1B2F', '\x1B31', '\x3', '\x2', 
		'\x2', '\x2', '\x1B30', '\x1B21', '\x3', '\x2', '\x2', '\x2', '\x1B30', 
		'\x1B31', '\x3', '\x2', '\x2', '\x2', '\x1B31', '\x1B3F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B32', '\x1B3F', '\x5', '\x3C6', '\x1E4', '\x2', '\x1B33', 
		'\x1B34', '\a', 'x', '\x2', '\x2', '\x1B34', '\x1B3F', '\x5', '\x3CA', 
		'\x1E6', '\x2', '\x1B35', '\x1B3F', '\x5', '\x3CA', '\x1E6', '\x2', '\x1B36', 
		'\x1B3F', '\a', '\x16A', '\x2', '\x2', '\x1B37', '\x1B3F', '\a', '\x23F', 
		'\x2', '\x2', '\x1B38', '\x1B3F', '\a', '\xC1', '\x2', '\x2', '\x1B39', 
		'\x1B3F', '\a', '|', '\x2', '\x2', '\x1B3A', '\x1B3F', '\a', '\x1F7', 
		'\x2', '\x2', '\x1B3B', '\x1B3F', '\a', '\x140', '\x2', '\x2', '\x1B3C', 
		'\x1B3F', '\a', '\x134', '\x2', '\x2', '\x1B3D', '\x1B3F', '\a', '\x84', 
		'\x2', '\x2', '\x1B3E', '\x1B00', '\x3', '\x2', '\x2', '\x2', '\x1B3E', 
		'\x1B0B', '\x3', '\x2', '\x2', '\x2', '\x1B3E', '\x1B32', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3E', '\x1B33', '\x3', '\x2', '\x2', '\x2', '\x1B3E', 
		'\x1B35', '\x3', '\x2', '\x2', '\x2', '\x1B3E', '\x1B36', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3E', '\x1B37', '\x3', '\x2', '\x2', '\x2', '\x1B3E', 
		'\x1B38', '\x3', '\x2', '\x2', '\x2', '\x1B3E', '\x1B39', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3E', '\x1B3A', '\x3', '\x2', '\x2', '\x2', '\x1B3E', 
		'\x1B3B', '\x3', '\x2', '\x2', '\x2', '\x1B3E', '\x1B3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3E', '\x1B3D', '\x3', '\x2', '\x2', '\x2', '\x1B3F', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x1B40', '\x1B41', '\a', '\x2CA', 
		'\x2', '\x2', '\x1B41', '\x1B43', '\x5', '\x3BA', '\x1DE', '\x2', '\x1B42', 
		'\x1B40', '\x3', '\x2', '\x2', '\x2', '\x1B42', '\x1B43', '\x3', '\x2', 
		'\x2', '\x2', '\x1B43', '\x1B44', '\x3', '\x2', '\x2', '\x2', '\x1B44', 
		'\x1B45', '\x5', '\x3B2', '\x1DA', '\x2', '\x1B45', '\x391', '\x3', '\x2', 
		'\x2', '\x2', '\x1B46', '\x1B47', '\x5', '\x390', '\x1C9', '\x2', '\x1B47', 
		'\x393', '\x3', '\x2', '\x2', '\x2', '\x1B48', '\x1B49', '\x5', '\x390', 
		'\x1C9', '\x2', '\x1B49', '\x395', '\x3', '\x2', '\x2', '\x2', '\x1B4A', 
		'\x1B4B', '\x5', '\x390', '\x1C9', '\x2', '\x1B4B', '\x397', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4C', '\x1B4D', '\x5', '\x390', '\x1C9', '\x2', '\x1B4D', 
		'\x399', '\x3', '\x2', '\x2', '\x2', '\x1B4E', '\x1B4F', '\x5', '\x390', 
		'\x1C9', '\x2', '\x1B4F', '\x39B', '\x3', '\x2', '\x2', '\x2', '\x1B50', 
		'\x1B51', '\x5', '\x390', '\x1C9', '\x2', '\x1B51', '\x39D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B52', '\x1B53', '\x5', '\x390', '\x1C9', '\x2', '\x1B53', 
		'\x39F', '\x3', '\x2', '\x2', '\x2', '\x1B54', '\x1B55', '\x5', '\x390', 
		'\x1C9', '\x2', '\x1B55', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x1B56', 
		'\x1B57', '\x5', '\x390', '\x1C9', '\x2', '\x1B57', '\x3A3', '\x3', '\x2', 
		'\x2', '\x2', '\x1B58', '\x1B59', '\x5', '\x390', '\x1C9', '\x2', '\x1B59', 
		'\x3A5', '\x3', '\x2', '\x2', '\x2', '\x1B5A', '\x1B5B', '\x5', '\x390', 
		'\x1C9', '\x2', '\x1B5B', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x1B5C', 
		'\x1B5D', '\x5', '\x390', '\x1C9', '\x2', '\x1B5D', '\x3A9', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5E', '\x1B63', '\x5', '\x390', '\x1C9', '\x2', '\x1B5F', 
		'\x1B60', '\a', '\x2AC', '\x2', '\x2', '\x1B60', '\x1B62', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1B61', '\x1B5F', '\x3', '\x2', '\x2', '\x2', '\x1B62', 
		'\x1B65', '\x3', '\x2', '\x2', '\x2', '\x1B63', '\x1B61', '\x3', '\x2', 
		'\x2', '\x2', '\x1B63', '\x1B64', '\x3', '\x2', '\x2', '\x2', '\x1B64', 
		'\x3AB', '\x3', '\x2', '\x2', '\x2', '\x1B65', '\x1B63', '\x3', '\x2', 
		'\x2', '\x2', '\x1B66', '\x1B67', '\x5', '\x3AA', '\x1D6', '\x2', '\x1B67', 
		'\x3AD', '\x3', '\x2', '\x2', '\x2', '\x1B68', '\x1B69', '\x5', '\x3AA', 
		'\x1D6', '\x2', '\x1B69', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x1B6A', 
		'\x1B6B', '\x5', '\x3AA', '\x1D6', '\x2', '\x1B6B', '\x3B1', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6C', '\x1B6F', '\x5', '\x3BE', '\x1E0', '\x2', '\x1B6D', 
		'\x1B6F', '\a', '\x2B0', '\x2', '\x2', '\x1B6E', '\x1B6C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6E', '\x1B6D', '\x3', '\x2', '\x2', '\x2', '\x1B6F', 
		'\x3B3', '\x3', '\x2', '\x2', '\x2', '\x1B70', '\x1B75', '\x5', '\x3B2', 
		'\x1DA', '\x2', '\x1B71', '\x1B72', '\a', '\x2AC', '\x2', '\x2', '\x1B72', 
		'\x1B74', '\x5', '\x3B2', '\x1DA', '\x2', '\x1B73', '\x1B71', '\x3', '\x2', 
		'\x2', '\x2', '\x1B74', '\x1B77', '\x3', '\x2', '\x2', '\x2', '\x1B75', 
		'\x1B73', '\x3', '\x2', '\x2', '\x2', '\x1B75', '\x1B76', '\x3', '\x2', 
		'\x2', '\x2', '\x1B76', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x1B77', 
		'\x1B75', '\x3', '\x2', '\x2', '\x2', '\x1B78', '\x1B79', '\x5', '\x3B4', 
		'\x1DB', '\x2', '\x1B79', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x1B7A', 
		'\x1B7B', '\x5', '\x3B4', '\x1DB', '\x2', '\x1B7B', '\x3B9', '\x3', '\x2', 
		'\x2', '\x2', '\x1B7C', '\x1B7D', '\x5', '\x3B4', '\x1DB', '\x2', '\x1B7D', 
		'\x3BB', '\x3', '\x2', '\x2', '\x2', '\x1B7E', '\x1B7F', '\a', '\x2B3', 
		'\x2', '\x2', '\x1B7F', '\x1B80', '\a', '\x2B7', '\x2', '\x2', '\x1B80', 
		'\x1B81', '\a', '\x2B4', '\x2', '\x2', '\x1B81', '\x3BD', '\x3', '\x2', 
		'\x2', '\x2', '\x1B82', '\x1B83', '\t', '\x88', '\x2', '\x2', '\x1B83', 
		'\x3BF', '\x3', '\x2', '\x2', '\x2', '\x1B84', '\x1B85', '\t', '\x89', 
		'\x2', '\x2', '\x1B85', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x1B86', 
		'\x1B87', '\t', '\x8A', '\x2', '\x2', '\x1B87', '\x3C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1B88', '\x1B8B', '\x5', '\x3C6', '\x1E4', '\x2', '\x1B89', 
		'\x1B8B', '\x5', '\x3C8', '\x1E5', '\x2', '\x1B8A', '\x1B88', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8A', '\x1B89', '\x3', '\x2', '\x2', '\x2', '\x1B8B', 
		'\x3C5', '\x3', '\x2', '\x2', '\x2', '\x1B8C', '\x1B8D', '\t', '\x8B', 
		'\x2', '\x2', '\x1B8D', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x1B8E', 
		'\x1B8F', '\a', '\x2B8', '\x2', '\x2', '\x1B8F', '\x1B90', '\x5', '\x3C6', 
		'\x1E4', '\x2', '\x1B90', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x1B91', 
		'\x1B92', '\t', '\x8C', '\x2', '\x2', '\x1B92', '\x3CB', '\x3', '\x2', 
		'\x2', '\x2', '\x3D5', '\x3CE', '\x3D1', '\x3D5', '\x3EC', '\x3F8', '\x3FD', 
		'\x402', '\x409', '\x40F', '\x414', '\x418', '\x420', '\x422', '\x426', 
		'\x42A', '\x42D', '\x431', '\x436', '\x43C', '\x445', '\x448', '\x44E', 
		'\x457', '\x464', '\x469', '\x473', '\x476', '\x47B', '\x480', '\x487', 
		'\x48D', '\x491', '\x497', '\x49C', '\x4A3', '\x4AA', '\x4B1', '\x4B6', 
		'\x4BA', '\x4C6', '\x4D0', '\x4D5', '\x4E1', '\x4E6', '\x4EB', '\x4EE', 
		'\x4FB', '\x507', '\x50C', '\x511', '\x51D', '\x522', '\x52A', '\x52C', 
		'\x530', '\x534', '\x537', '\x53B', '\x540', '\x54C', '\x551', '\x555', 
		'\x558', '\x55D', '\x564', '\x56E', '\x573', '\x576', '\x57A', '\x57D', 
		'\x582', '\x594', '\x599', '\x59E', '\x5A0', '\x5A7', '\x5AE', '\x5B1', 
		'\x5B4', '\x5B7', '\x5C2', '\x5CE', '\x5D2', '\x5D5', '\x5DE', '\x5E6', 
		'\x5EE', '\x5F1', '\x5F8', '\x5FC', '\x601', '\x606', '\x62F', '\x64B', 
		'\x652', '\x657', '\x65E', '\x669', '\x671', '\x675', '\x681', '\x684', 
		'\x68A', '\x68D', '\x692', '\x697', '\x69B', '\x6A5', '\x6AF', '\x6B5', 
		'\x6C0', '\x6C5', '\x6C9', '\x6D1', '\x6D9', '\x6DE', '\x6E1', '\x6E3', 
		'\x6E6', '\x6EF', '\x6F4', '\x6FB', '\x6FE', '\x701', '\x705', '\x708', 
		'\x710', '\x715', '\x71A', '\x721', '\x72B', '\x73B', '\x741', '\x74B', 
		'\x755', '\x75C', '\x75F', '\x764', '\x76E', '\x773', '\x77A', '\x77D', 
		'\x782', '\x785', '\x788', '\x799', '\x79E', '\x7A7', '\x7AA', '\x7AF', 
		'\x7B2', '\x7B9', '\x7BC', '\x7C3', '\x7C8', '\x7CC', '\x7D1', '\x7D6', 
		'\x7E0', '\x7E6', '\x7F0', '\x7F5', '\x7FC', '\x802', '\x806', '\x809', 
		'\x80C', '\x81D', '\x822', '\x82A', '\x838', '\x83F', '\x84F', '\x858', 
		'\x85A', '\x86F', '\x877', '\x880', '\x884', '\x89C', '\x89E', '\x8B0', 
		'\x8B2', '\x8B7', '\x8BC', '\x8C1', '\x8C6', '\x8D0', '\x8D9', '\x8E2', 
		'\x8E7', '\x8EC', '\x8F1', '\x8F5', '\x8F8', '\x8FE', '\x90C', '\x911', 
		'\x913', '\x916', '\x91E', '\x92B', '\x92D', '\x931', '\x939', '\x93B', 
		'\x93D', '\x93F', '\x943', '\x948', '\x952', '\x95D', '\x95F', '\x969', 
		'\x96E', '\x972', '\x976', '\x97A', '\x97C', '\x97F', '\x983', '\x987', 
		'\x98E', '\x993', '\x995', '\x99A', '\x99E', '\x9A4', '\x9A6', '\x9AA', 
		'\x9AE', '\x9B2', '\x9B6', '\x9B8', '\x9BD', '\x9C2', '\x9C7', '\x9CA', 
		'\x9D5', '\x9D8', '\x9DB', '\x9E0', '\x9E3', '\x9E8', '\x9ED', '\x9F1', 
		'\x9F5', '\x9F9', '\x9FE', '\xA02', '\xA06', '\xA12', '\xA17', '\xA1A', 
		'\xA1E', '\xA22', '\xA27', '\xA2B', '\xA31', '\xA36', '\xA39', '\xA41', 
		'\xA44', '\xA48', '\xA4E', '\xA52', '\xA55', '\xA58', '\xA61', '\xA63', 
		'\xA70', '\xA78', '\xA83', '\xA88', '\xA8A', '\xA8C', '\xA92', '\xA95', 
		'\xA98', '\xA9B', '\xA9E', '\xAA0', '\xAA7', '\xAA9', '\xAAD', '\xAB9', 
		'\xABB', '\xABF', '\xAC3', '\xACA', '\xAD2', '\xAD4', '\xAD7', '\xADC', 
		'\xAE0', '\xAE4', '\xAE8', '\xAEB', '\xAF1', '\xAFA', '\xB01', '\xB07', 
		'\xB0D', '\xB10', '\xB13', '\xB18', '\xB1B', '\xB1E', '\xB22', '\xB27', 
		'\xB31', '\xB39', '\xB3B', '\xB48', '\xB52', '\xB57', '\xB5D', '\xB6E', 
		'\xB70', '\xB7F', '\xB81', '\xB8E', '\xB91', '\xB94', '\xB9D', '\xBA0', 
		'\xBA3', '\xBAA', '\xBB0', '\xBB5', '\xBB9', '\xBBC', '\xBBF', '\xBC5', 
		'\xBCA', '\xBCD', '\xBD1', '\xBD5', '\xBD8', '\xBDF', '\xBE2', '\xBE4', 
		'\xBE9', '\xBEF', '\xBF5', '\xBFB', '\xC00', '\xC05', '\xC0B', '\xC0F', 
		'\xC14', '\xC1A', '\xC1F', '\xC22', '\xC25', '\xC2D', '\xC2F', '\xC31', 
		'\xC34', '\xC41', '\xC58', '\xC5F', '\xC61', '\xC68', '\xC6C', '\xC71', 
		'\xC76', '\xC79', '\xC7C', '\xC7F', '\xC81', '\xC85', '\xC88', '\xC8C', 
		'\xC9F', '\xCA8', '\xCAD', '\xCB2', '\xCB8', '\xCBF', '\xCC4', '\xCC6', 
		'\xCD6', '\xCDB', '\xCE1', '\xCE8', '\xCFB', '\xD05', '\xD07', '\xD0E', 
		'\xD19', '\xD21', '\xD23', '\xD32', '\xD3B', '\xD40', '\xD44', '\xD47', 
		'\xD55', '\xD5D', '\xD61', '\xD64', '\xD6C', '\xD78', '\xD7C', '\xD81', 
		'\xD84', '\xD91', '\xD95', '\xD9D', '\xDA2', '\xDA6', '\xDAA', '\xDAE', 
		'\xDB4', '\xDB7', '\xDBA', '\xDD5', '\xDDB', '\xDDF', '\xDE6', '\xDEB', 
		'\xDF1', '\xDF5', '\xDF8', '\xDFE', '\xE07', '\xE0F', '\xE13', '\xE17', 
		'\xE1F', '\xE28', '\xE2E', '\xE30', '\xE4C', '\xE51', '\xE55', '\xE5C', 
		'\xE60', '\xE64', '\xE68', '\xE74', '\xE78', '\xE86', '\xE8C', '\xE93', 
		'\xE98', '\xEA3', '\xEA6', '\xEAC', '\xEAE', '\xEB7', '\xEC1', '\xEC6', 
		'\xED5', '\xED9', '\xEDC', '\xEE0', '\xEEE', '\xEF0', '\xEF4', '\xEFC', 
		'\xF03', '\xF08', '\xF0A', '\xF0F', '\xF14', '\xF1C', '\xF23', '\xF27', 
		'\xF2A', '\xF36', '\xF3C', '\xF45', '\xF48', '\xF4E', '\xF53', '\xF59', 
		'\xF5E', '\xF60', '\xF67', '\xF6A', '\xF71', '\xF7C', '\xF82', '\xF86', 
		'\xF8C', '\xF91', '\xF93', '\xF99', '\xFA4', '\xFA6', '\xFA8', '\xFAB', 
		'\xFAF', '\xFB2', '\xFB6', '\xFBA', '\xFBF', '\xFCA', '\xFCE', '\xFD6', 
		'\xFD9', '\xFDE', '\xFE0', '\xFE5', '\xFEA', '\xFEE', '\xFF4', '\xFF8', 
		'\xFFB', '\x1003', '\x1006', '\x100A', '\x100E', '\x1013', '\x1016', '\x101A', 
		'\x101E', '\x1022', '\x1036', '\x103A', '\x103E', '\x1044', '\x1048', 
		'\x104D', '\x104F', '\x1052', '\x1056', '\x1059', '\x105C', '\x105F', 
		'\x1063', '\x106F', '\x1072', '\x1075', '\x107A', '\x1080', '\x1085', 
		'\x108B', '\x108F', '\x1094', '\x109B', '\x10A1', '\x10A8', '\x10AB', 
		'\x10AE', '\x10B2', '\x10B7', '\x10BB', '\x10BD', '\x10C8', '\x10CF', 
		'\x10D3', '\x10DD', '\x10E1', '\x10E5', '\x10EA', '\x10F5', '\x10FA', 
		'\x1100', '\x1105', '\x1108', '\x110D', '\x110F', '\x1115', '\x111A', 
		'\x111D', '\x1122', '\x1127', '\x1130', '\x1135', '\x113B', '\x1141', 
		'\x1146', '\x114A', '\x114C', '\x1151', '\x1155', '\x115B', '\x115F', 
		'\x1168', '\x116D', '\x1170', '\x1176', '\x117B', '\x117D', '\x117F', 
		'\x1184', '\x1189', '\x118E', '\x1196', '\x119B', '\x11A2', '\x11A6', 
		'\x11AF', '\x11B3', '\x11B8', '\x11C3', '\x11C5', '\x11D5', '\x11DA', 
		'\x11E0', '\x11E6', '\x11F4', '\x11F9', '\x11FF', '\x1202', '\x1205', 
		'\x1209', '\x120E', '\x1217', '\x1219', '\x121D', '\x1220', '\x1225', 
		'\x1227', '\x122B', '\x1237', '\x1240', '\x1244', '\x1249', '\x124D', 
		'\x1251', '\x1256', '\x1259', '\x1263', '\x1269', '\x126C', '\x126F', 
		'\x1273', '\x1278', '\x1281', '\x128B', '\x128F', '\x1293', '\x1296', 
		'\x1299', '\x129E', '\x12A3', '\x12A6', '\x12A9', '\x12AF', '\x12B2', 
		'\x12B8', '\x12BB', '\x12BE', '\x12C3', '\x12C6', '\x12CE', '\x12D4', 
		'\x12D9', '\x12DE', '\x12E6', '\x12F0', '\x12F4', '\x12F6', '\x12F9', 
		'\x1305', '\x1309', '\x130C', '\x131B', '\x1320', '\x1324', '\x132B', 
		'\x132E', '\x1337', '\x133E', '\x1343', '\x1347', '\x134F', '\x1355', 
		'\x135D', '\x1360', '\x1369', '\x136C', '\x136F', '\x1378', '\x137E', 
		'\x1384', '\x1386', '\x1393', '\x1395', '\x139E', '\x13A0', '\x13A4', 
		'\x13AA', '\x13AE', '\x13BC', '\x13C2', '\x13CD', '\x13D8', '\x13DC', 
		'\x13E3', '\x13E8', '\x13EC', '\x13F1', '\x13F9', '\x13FB', '\x1401', 
		'\x1404', '\x140F', '\x1414', '\x141E', '\x1420', '\x1422', '\x142C', 
		'\x1430', '\x1432', '\x143E', '\x1446', '\x1453', '\x1456', '\x1462', 
		'\x1464', '\x146C', '\x1474', '\x147B', '\x147F', '\x1486', '\x148A', 
		'\x148F', '\x1493', '\x149B', '\x149F', '\x14A6', '\x14AB', '\x14B4', 
		'\x14BD', '\x14C0', '\x14D4', '\x14D8', '\x14DB', '\x14E2', '\x14E5', 
		'\x14E9', '\x14EC', '\x14F3', '\x14F6', '\x14FC', '\x14FF', '\x1503', 
		'\x1506', '\x150D', '\x1512', '\x1520', '\x1527', '\x1532', '\x153B', 
		'\x1544', '\x1548', '\x154C', '\x1566', '\x1569', '\x156C', '\x1576', 
		'\x157A', '\x157F', '\x1584', '\x1589', '\x1592', '\x1595', '\x1597', 
		'\x159B', '\x15A2', '\x15A9', '\x15B1', '\x15C0', '\x15C5', '\x15CA', 
		'\x15D0', '\x15D3', '\x15D7', '\x15E1', '\x15ED', '\x15EF', '\x15F6', 
		'\x15FA', '\x1603', '\x160C', '\x161A', '\x1622', '\x1625', '\x162E', 
		'\x1634', '\x163E', '\x1646', '\x1649', '\x164C', '\x1655', '\x165A', 
		'\x165F', '\x1664', '\x1669', '\x166E', '\x1671', '\x1676', '\x167B', 
		'\x167F', '\x1685', '\x168B', '\x1694', '\x1699', '\x16A1', '\x16A5', 
		'\x16AA', '\x16B0', '\x16B7', '\x16BC', '\x16C3', '\x16C7', '\x16CC', 
		'\x16D4', '\x16D7', '\x16DA', '\x16DD', '\x16E1', '\x16E6', '\x16EB', 
		'\x16EF', '\x16F6', '\x16FB', '\x16FD', '\x1708', '\x170C', '\x170E', 
		'\x1719', '\x1724', '\x1729', '\x172E', '\x1730', '\x1734', '\x1737', 
		'\x173B', '\x1748', '\x174D', '\x1751', '\x1756', '\x175C', '\x1760', 
		'\x1765', '\x1769', '\x176E', '\x1773', '\x1776', '\x1779', '\x177E', 
		'\x1787', '\x178F', '\x1793', '\x179D', '\x17A0', '\x17A2', '\x17AC', 
		'\x17AE', '\x17B4', '\x17BA', '\x17BC', '\x17CA', '\x17CC', '\x17D6', 
		'\x17DF', '\x17E8', '\x17EC', '\x17F0', '\x17F5', '\x17F9', '\x17FC', 
		'\x1800', '\x1807', '\x180B', '\x180F', '\x1814', '\x1818', '\x181D', 
		'\x1821', '\x1825', '\x182A', '\x182E', '\x1833', '\x1836', '\x183A', 
		'\x183E', '\x1846', '\x185B', '\x1870', '\x1875', '\x1885', '\x1888', 
		'\x188D', '\x189A', '\x189E', '\x18A3', '\x18A8', '\x18AC', '\x18B0', 
		'\x18B4', '\x18B9', '\x18C0', '\x18C5', '\x18C7', '\x18C9', '\x18D2', 
		'\x18D6', '\x18DA', '\x18DC', '\x18E0', '\x18E9', '\x18EF', '\x18F3', 
		'\x18F5', '\x18F9', '\x18FD', '\x1904', '\x190C', '\x1914', '\x1916', 
		'\x191C', '\x191F', '\x1937', '\x193E', '\x195F', '\x1964', '\x1967', 
		'\x196C', '\x196E', '\x1974', '\x197C', '\x1981', '\x1986', '\x1989', 
		'\x198D', '\x1993', '\x19B2', '\x19B9', '\x19C8', '\x19D8', '\x19EB', 
		'\x19FC', '\x1A03', '\x1A0B', '\x1A18', '\x1A21', '\x1A2A', '\x1A33', 
		'\x1A3D', '\x1A45', '\x1A4F', '\x1A59', '\x1A65', '\x1A75', '\x1A87', 
		'\x1A94', '\x1AA3', '\x1AAE', '\x1AB8', '\x1AC3', '\x1ACD', '\x1ADE', 
		'\x1AE4', '\x1AFA', '\x1AFE', '\x1B03', '\x1B09', '\x1B0F', '\x1B15', 
		'\x1B1A', '\x1B1C', '\x1B1F', '\x1B29', '\x1B2C', '\x1B2E', '\x1B30', 
		'\x1B3E', '\x1B42', '\x1B63', '\x1B6E', '\x1B75', '\x1B8A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Oracle.Parser
