//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PlSqlParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Oracle.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class PlSqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ACCESS=1, ACCOUNT=2, ADD=3, ADMIN=4, ADMINISTER=5, ADVANCED=6, ADVISOR=7, 
		AFTER=8, AGENT=9, AGGREGATE=10, A_LETTER=11, ALL=12, ALLOW=13, ALTER=14, 
		ALWAYS=15, ANALYZE=16, AND=17, ANY=18, ANYSCHEMA=19, ARCHIVAL=20, ARCHIVE=21, 
		ARRAY=22, AS=23, ASC=24, ASSOCIATE=25, AT=26, ATTRIBUTE=27, AUDIT=28, 
		AUTHENTICATED=29, AUTHENTICATION=30, AUTHID=31, AUTOALLOCATE=32, AUTO=33, 
		AUTOEXTEND=34, AUTOMATIC=35, AUTONOMOUS_TRANSACTION=36, BACKUP=37, BASIC=38, 
		BASICFILE=39, BATCH=40, BECOME=41, BEFORE=42, BEGIN=43, BETWEEN=44, BFILE=45, 
		BIGFILE=46, BINARY=47, BINARY_DOUBLE=48, BINARY_FLOAT=49, BINARY_INTEGER=50, 
		BLOB=51, BLOCK=52, BLOCKSIZE=53, BODY=54, BOOLEAN=55, BOTH=56, BREADTH=57, 
		BUFFER_POOL=58, BUILD=59, BULK=60, BY=61, BYTE=62, CACHE=63, CALL=64, 
		CANONICAL=65, CAPACITY=66, CASCADE=67, CASE=68, CAST=69, CERTIFICATE=70, 
		CHANGE=71, CHARACTER=72, CHAR=73, CHAR_CS=74, CHECK=75, CHR=76, CHUNK=77, 
		CLASS=78, C_LETTER=79, CLOB=80, CLOSE=81, CLUSTER=82, CLUSTERING=83, COALESCE=84, 
		COLLECT=85, COLUMN=86, COLUMNS=87, COMMENT=88, COMMIT=89, COMMITTED=90, 
		COMPATIBILITY=91, COMPILE=92, COMPOUND=93, COMPRESS=94, COMPUTE=95, CONNECT_BY_ROOT=96, 
		CONNECT=97, CONSTANT=98, CONSTRAINT=99, CONSTRAINTS=100, CONSTRUCTOR=101, 
		CONTAINER=102, CONTAINER_DATA=103, CONTENT=104, CONTEXT=105, CONTINUE=106, 
		CONVERT=107, CORRUPT_XID_ALL=108, CORRUPT_XID=109, COST=110, COUNT=111, 
		CREATE=112, CREATION=113, CRITICAL=114, CROSS=115, CUBE=116, CURRENT=117, 
		CURRENT_USER=118, CURSOR=119, CUSTOMDATUM=120, CYCLE=121, DATABASE=122, 
		DATA=123, DATAFILE=124, DATE=125, DAY=126, DAYS=127, DBA_RECYCLEBIN=128, 
		DB_ROLE_CHANGE=129, DBTIMEZONE=130, DDL=131, DEBUG=132, DEC=133, DECIMAL=134, 
		DECLARE=135, DECOMPOSE=136, DECREMENT=137, DECRYPT=138, DEDUPLICATE=139, 
		DEFAULT=140, DEFAULTS=141, DEFERRABLE=142, DEFERRED=143, DEFINER=144, 
		DELEGATE=145, DELETE=146, DEPTH=147, DESC=148, DETERMINISTIC=149, DICTIONARY=150, 
		DIMENSION=151, DIRECTORY=152, DISABLE=153, DISALLOW=154, DISASSOCIATE=155, 
		DISTINCT=156, DISTINGUISHED=157, DISTRIBUTE=158, DML=159, DOCUMENT=160, 
		DOUBLE=161, DROP=162, DSINTERVAL_UNCONSTRAINED=163, DUPLICATE=164, EACH=165, 
		EDITIONABLE=166, EDITION=167, EDITIONING=168, EDITIONS=169, ELEMENT=170, 
		ELSE=171, ELSIF=172, EMPTY=173, ENABLE=174, ENCODING=175, ENCRYPT=176, 
		ENCRYPTION=177, END=178, ENTERPRISE=179, ENTITYESCAPING=180, ERR=181, 
		ERRORS=182, ESCAPE=183, EVALNAME=184, EVALUATION=185, EXCEPT=186, EXCEPTION=187, 
		EXCEPTION_INIT=188, EXCEPTIONS=189, EXCLUDE=190, EXCLUSIVE=191, EXECUTE=192, 
		EXEMPT=193, EXISTS=194, EXIT=195, EXPIRE=196, EXPLAIN=197, EXTENT=198, 
		EXTERNAL=199, EXTERNALLY=200, EXTRACT=201, FAILURE=202, FALSE=203, FETCH=204, 
		FILESYSTEM_LIKE_LOGGING=205, FINAL=206, FIRST=207, FIRST_VALUE=208, FLASHBACK=209, 
		FLASH_CACHE=210, FLOAT=211, FOLDER=212, FOLLOWING=213, FOLLOWS=214, FORALL=215, 
		FORCE=216, FOREIGN=217, FOR=218, FREELIST=219, FREELISTS=220, FREEPOOLS=221, 
		FROM=222, FULL=223, FUNCTION=224, GENERATED=225, GLOBAL=226, GLOBALLY=227, 
		GOTO=228, GRANT=229, GROUP=230, GROUPING=231, GROUPS=232, GUARANTEE=233, 
		HASH=234, HAVING=235, HEAP=236, HIDE=237, HIERARCHY=238, HIGH=239, HOUR=240, 
		IDENTIFIED=241, IDENTIFIER=242, IDENTITY=243, ID=244, IF=245, IGNORE=246, 
		ILM=247, IMMEDIATE=248, INCLUDE=249, INCLUDING=250, INCREMENT=251, INDENT=252, 
		INDEXED=253, INDEX=254, INDEXING=255, INDEXTYPE=256, INDICATOR=257, INDICES=258, 
		INFINITE=259, INHERIT=260, IN=261, INITIAL=262, INITIALLY=263, INITRANS=264, 
		INLINE=265, INMEMORY=266, INNER=267, INOUT=268, INSERT=269, INSTANTIABLE=270, 
		INSTEAD=271, INTEGER=272, INTERSECT=273, INTERVAL=274, INTERVLEAVED=275, 
		INT=276, INTO=277, INVALIDATE=278, INVISIBLE=279, IS=280, ISOLATION=281, 
		ITERATE=282, JAVA=283, JOB=284, JOIN=285, KEEP_DUPLICATES=286, KEEP=287, 
		KEY=288, LANGUAGE=289, LAST=290, LAST_VALUE=291, LEADING=292, LEFT=293, 
		LESS=294, LEVEL=295, LEVELS=296, LIBRARY=297, LIKE2=298, LIKE4=299, LIKEC=300, 
		LIKE=301, LIMIT=302, LINEAR=303, LINK=304, LIST=305, LOAD=306, LOB=307, 
		LOBS=308, LOCAL=309, LOCATION=310, LOCATOR=311, LOCKED=312, LOCKING=313, 
		LOCK=314, LOGGING=315, LOG=316, LOGMINING=317, LOGOFF=318, LOGON=319, 
		LONG=320, LOOP=321, LOW=322, MAIN=323, MANAGE=324, MANAGEMENT=325, MANUAL=326, 
		MAP=327, MAPPING=328, MATCHED=329, MATERIALIZED=330, MAXSIZE=331, MAXVALUE=332, 
		MEASURE=333, MEASURES=334, MEDIUM=335, MEMBER=336, MEMCOMPRESS=337, MERGE=338, 
		MINEXTENTS=339, MINIMUM=340, MINING=341, MINUS=342, MINUTE=343, MINVALUE=344, 
		MLSLABEL=345, MODEL=346, MODE=347, MODIFICATION=348, MODIFY=349, MONTH=350, 
		MONTHS=351, MOVEMENT=352, MULTISET=353, NAME=354, NAN=355, NATURAL=356, 
		NATURALN=357, NAV=358, NCHAR_CS=359, NCHAR=360, NCLOB=361, NESTED=362, 
		NEW=363, NEXT=364, NOAUDIT=365, NOCACHE=366, NOCOMPRESS=367, NOCOPY=368, 
		NOCYCLE=369, NOEDITIONABLE=370, NOENTITYESCAPING=371, NOGUARANTEE=372, 
		NOKEEP=373, NOLOGGING=374, NOMAPPING=375, NOMAXVALUE=376, NOMINVALUE=377, 
		NONEDITIONABLE=378, NONE=379, NO=380, NONSCHEMA=381, NOORDER=382, NOPARALLEL=383, 
		NORELY=384, NOROWDEPENDENCIES=385, NOSCHEMACHECK=386, NOSORT=387, NOTIFICATION=388, 
		NOT=389, NOVALIDATE=390, NOWAIT=391, NULL=392, NULLS=393, NUMBER=394, 
		NUMERIC=395, NVARCHAR2=396, OBJECT=397, OFFLINE=398, OFF=399, OF=400, 
		OID=401, OLD=402, OLTP=403, ONLINE=404, ONLY=405, ON=406, OPEN=407, OPERATOR=408, 
		OPTIMAL=409, OPTION=410, ORADATA=411, ORDER=412, ORDINALITY=413, ORGANIZATION=414, 
		OR=415, OSERROR=416, OUTER=417, OUTLINE=418, OUT=419, OVERFLOW=420, OVER=421, 
		OVERRIDING=422, PACKAGE=423, PARALLEL_ENABLE=424, PARALLEL=425, PARAMETERS=426, 
		PARENT=427, PARTIAL=428, PARTITION=429, PARTITIONS=430, PASSING=431, PASSWORD=432, 
		PATH=433, PCTFREE=434, PCTINCREASE=435, PCTTHRESHOLD=436, PCTUSED=437, 
		PCTVERSION=438, PERCENT_FOUND=439, PERCENT_ISOPEN=440, PERCENT_NOTFOUND=441, 
		PERCENT_ROWCOUNT=442, PERCENT_ROWTYPE=443, PERCENT_TYPE=444, PIPELINED=445, 
		PIPE=446, PIVOT=447, PLAN=448, PLS_INTEGER=449, PLUGGABLE=450, POLICY=451, 
		POSITIVEN=452, POSITIVE=453, PRAGMA=454, PRECEDING=455, PRECISION=456, 
		PRESENT=457, PRESERVE=458, PRIMARY=459, PRIORITY=460, PRIOR=461, PRIVILEGE=462, 
		PRIVILEGES=463, PROCEDURE=464, PROCESS=465, PROFILE=466, PROGRAM=467, 
		PUBLIC=468, PURGE=469, QUERY=470, QUOTA=471, RAISE=472, RANGE=473, RAW=474, 
		READ=475, READS=476, REAL=477, RECORD=478, RECYCLE=479, REDACTION=480, 
		REFERENCE=481, REFERENCES=482, REFERENCING=483, REF=484, REFRESH=485, 
		REJECT=486, RELATIONAL=487, RELIES_ON=488, RELY=489, REMOVE=490, RENAME=491, 
		REPLACE=492, REQUIRED=493, RESOURCE=494, RESPECT=495, RESTRICTED=496, 
		RESTRICT_REFERENCES=497, RESULT_CACHE=498, RESULT=499, RESUMABLE=500, 
		RETENTION=501, RETURNING=502, RETURN=503, REUSE=504, REVERSE=505, REVOKE=506, 
		REWRITE=507, RIGHT=508, ROLE=509, ROLES=510, ROLLBACK=511, ROLLUP=512, 
		ROWDEPENDENCIES=513, ROWID=514, ROW=515, ROWS=516, RULES=517, SALT=518, 
		SAMPLE=519, SAVEPOINT=520, SAVE=521, SCHEDULER=522, SCHEMACHECK=523, SCHEMA=524, 
		SCN=525, SCOPE=526, SEARCH=527, SECOND=528, SECUREFILE=529, SEED=530, 
		SEGMENT=531, SELECT=532, SELF=533, SEQUENCE=534, SEQUENTIAL=535, SERIALIZABLE=536, 
		SERIALLY_REUSABLE=537, SERVERERROR=538, SESSION=539, SESSIONTIMEZONE=540, 
		SET=541, SETS=542, SETTINGS=543, SHARE=544, SHARP=545, SHOW=546, SHUTDOWN=547, 
		SIBLINGS=548, SIGNTYPE=549, SIMPLE_INTEGER=550, SINGLE=551, SIZE=552, 
		SKIP_=553, SMALLFILE=554, SMALLINT=555, SNAPSHOT=556, SOME=557, SORT=558, 
		SOURCE=559, SPACE_KEYWORD=560, SPECIFICATION=561, SQLDATA=562, SQLERROR=563, 
		SQL=564, STANDALONE=565, START=566, STARTUP=567, STATEMENT_ID=568, STATEMENT=569, 
		STATIC=570, STATISTICS=571, STORAGE=572, STORE=573, STRING=574, SUBMULTISET=575, 
		SUBPARTITIONS=576, SUBPARTITION=577, SUBSTITUTABLE=578, SUBTYPE=579, SUCCESS=580, 
		SUPPLEMENTAL=581, SUSPEND=582, SYNONYM=583, SYSBACKUP=584, SYSDATE=585, 
		SYSDBA=586, SYSDG=587, SYSGUID=588, SYSKM=589, SYSOPER=590, SYSTEM=591, 
		TABLESPACE=592, TABLES=593, TABLE=594, TEMPFILE=595, TEMPLATE=596, TEMPORARY=597, 
		THAN=598, THEN=599, THE=600, THROUGH=601, TIER=602, TIMESTAMP_LTZ_UNCONSTRAINED=603, 
		TIMESTAMP=604, TIMESTAMP_TZ_UNCONSTRAINED=605, TIMESTAMP_UNCONSTRAINED=606, 
		TIME=607, TIMEZONE_ABBR=608, TIMEZONE_HOUR=609, TIMEZONE_MINUTE=610, TIMEZONE_REGION=611, 
		TO_NCLOB=612, TO_NUMBER=613, TO_SINGLE_BYTE=614, TO_TIMESTAMP_TZ=615, 
		TO=616, TO_YMINTERVAL=617, TRAILING=618, TRANSACTION=619, TRANSLATE=620, 
		TRANSLATION=621, TREAT=622, TRIGGER=623, TRUE=624, TRUNCATE=625, TRUNC=626, 
		TUNING=627, TYPE=628, UNBOUNDED=629, UNDER=630, UNDO=631, UNIFORM=632, 
		UNION=633, UNIQUE=634, UNLIMITED=635, UNLOCK=636, UNPIVOT=637, UNTIL=638, 
		UNUSABLE=639, UPDATED=640, UPDATE=641, UPSERT=642, UROWID=643, USABLE=644, 
		USERS=645, USER=646, USE=647, USING=648, VALIDATE=649, VALUES=650, VALUE=651, 
		VARCHAR2=652, VARCHAR=653, VARIABLE=654, VARRAYS=655, VARRAY=656, VARYING=657, 
		VERSIONS=658, VERSION=659, VIEW=660, VIRTUAL=661, VISIBLE=662, WAIT=663, 
		WARNING=664, WELLFORMED=665, WHENEVER=666, WHEN=667, WHERE=668, WHILE=669, 
		WITHIN=670, WITHOUT=671, WITH=672, WORK=673, WRITE=674, XMLAGG=675, XMLATTRIBUTES=676, 
		XMLCAST=677, XMLCOLATTVAL=678, XMLELEMENT=679, XMLEXISTS=680, XMLFOREST=681, 
		XMLNAMESPACES=682, XMLPARSE=683, XMLPI=684, XMLQUERY=685, XMLROOT=686, 
		XMLSCHEMA=687, XMLSERIALIZE=688, XMLTABLE=689, XMLTYPE=690, XML=691, YEARS=692, 
		YEAR=693, YES=694, YMINTERVAL_UNCONSTRAINED=695, ZONEMAP=696, ZONE=697, 
		PREDICTION=698, PREDICTION_BOUNDS=699, PREDICTION_COST=700, PREDICTION_DETAILS=701, 
		PREDICTION_PROBABILITY=702, PREDICTION_SET=703, CUME_DIST=704, DENSE_RANK=705, 
		LISTAGG=706, PERCENT_RANK=707, PERCENTILE_CONT=708, PERCENTILE_DISC=709, 
		RANK=710, AVG=711, CORR=712, COVAR_=713, DECODE=714, LAG=715, LEAD=716, 
		MAX=717, MEDIAN=718, MIN=719, NTILE=720, NVL=721, RATIO_TO_REPORT=722, 
		REGR_=723, ROUND=724, ROW_NUMBER=725, SUBSTR=726, TO_CHAR=727, TRIM=728, 
		SUM=729, STDDEV=730, VAR_=731, VARIANCE=732, LEAST=733, GREATEST=734, 
		TO_DATE=735, VARIABLE_SESSION=736, NATIONAL_CHAR_STRING_LIT=737, BIT_STRING_LIT=738, 
		HEX_STRING_LIT=739, DOUBLE_PERIOD=740, PERIOD=741, UNSIGNED_INTEGER=742, 
		APPROXIMATE_NUM_LIT=743, CHAR_STRING=744, DELIMITED_ID=745, PERCENT=746, 
		AMPERSAND=747, LEFT_PAREN=748, RIGHT_PAREN=749, DOUBLE_ASTERISK=750, ASTERISK=751, 
		PLUS_SIGN=752, MINUS_SIGN=753, COMMA=754, SOLIDUS=755, AT_SIGN=756, ASSIGN_OP=757, 
		BINDVAR=758, NOT_EQUAL_OP=759, CARRET_OPERATOR_PART=760, TILDE_OPERATOR_PART=761, 
		EXCLAMATION_OPERATOR_PART=762, GREATER_THAN_OP=763, LESS_THAN_OP=764, 
		COLON=765, SEMICOLON=766, BAR=767, EQUALS_OP=768, LEFT_BRACKET=769, RIGHT_BRACKET=770, 
		BIND_VAR=771, INTRODUCER=772, SPACES=773, SINGLE_LINE_COMMENT=774, MULTI_LINE_COMMENT=775, 
		PROMPT=776, START_CMD=777, REGULAR_ID=778, ZV=779;
	public const int
		RULE_sql_script = 0, RULE_unit_statement = 1, RULE_drop_function = 2, 
		RULE_alter_function = 3, RULE_create_function_body = 4, RULE_parallel_enable_clause = 5, 
		RULE_partition_by_clause = 6, RULE_result_cache_clause = 7, RULE_relies_on_part = 8, 
		RULE_streaming_clause = 9, RULE_drop_package = 10, RULE_alter_package = 11, 
		RULE_create_package = 12, RULE_create_package_body = 13, RULE_package_obj_spec = 14, 
		RULE_procedure_spec = 15, RULE_function_spec = 16, RULE_package_obj_body = 17, 
		RULE_drop_procedure = 18, RULE_alter_procedure = 19, RULE_function_body = 20, 
		RULE_procedure_body = 21, RULE_create_procedure_body = 22, RULE_drop_trigger = 23, 
		RULE_alter_trigger = 24, RULE_create_trigger = 25, RULE_trigger_follows_clause = 26, 
		RULE_trigger_when_clause = 27, RULE_simple_dml_trigger = 28, RULE_for_each_row = 29, 
		RULE_compound_dml_trigger = 30, RULE_non_dml_trigger = 31, RULE_trigger_body = 32, 
		RULE_routine_clause = 33, RULE_compound_trigger_block = 34, RULE_timing_point_section = 35, 
		RULE_non_dml_event = 36, RULE_dml_event_clause = 37, RULE_dml_event_element = 38, 
		RULE_dml_event_nested_clause = 39, RULE_referencing_clause = 40, RULE_referencing_element = 41, 
		RULE_drop_type = 42, RULE_alter_type = 43, RULE_compile_type_clause = 44, 
		RULE_replace_type_clause = 45, RULE_alter_method_spec = 46, RULE_alter_method_element = 47, 
		RULE_alter_attribute_definition = 48, RULE_attribute_definition = 49, 
		RULE_alter_collection_clauses = 50, RULE_dependent_handling_clause = 51, 
		RULE_dependent_exceptions_part = 52, RULE_create_type = 53, RULE_type_definition = 54, 
		RULE_object_type_def = 55, RULE_object_as_part = 56, RULE_object_under_part = 57, 
		RULE_nested_table_type_def = 58, RULE_sqlj_object_type = 59, RULE_type_body = 60, 
		RULE_type_body_elements = 61, RULE_map_order_func_declaration = 62, RULE_subprog_decl_in_type = 63, 
		RULE_proc_decl_in_type = 64, RULE_func_decl_in_type = 65, RULE_constructor_declaration = 66, 
		RULE_modifier_clause = 67, RULE_object_member_spec = 68, RULE_sqlj_object_type_attr = 69, 
		RULE_element_spec = 70, RULE_element_spec_options = 71, RULE_subprogram_spec = 72, 
		RULE_type_procedure_spec = 73, RULE_type_function_spec = 74, RULE_constructor_spec = 75, 
		RULE_map_order_function_spec = 76, RULE_pragma_clause = 77, RULE_pragma_elements = 78, 
		RULE_type_elements_parameter = 79, RULE_drop_sequence = 80, RULE_alter_sequence = 81, 
		RULE_create_sequence = 82, RULE_sequence_spec = 83, RULE_create_index = 84, 
		RULE_alter_index = 85, RULE_create_user = 86, RULE_alter_user = 87, RULE_alter_identified_by = 88, 
		RULE_identified_by = 89, RULE_identified_other_clause = 90, RULE_user_tablespace_clause = 91, 
		RULE_quota_clause = 92, RULE_profile_clause = 93, RULE_role_clause = 94, 
		RULE_user_default_role_clause = 95, RULE_password_expire_clause = 96, 
		RULE_user_lock_clause = 97, RULE_user_editions_clause = 98, RULE_alter_user_editions_clause = 99, 
		RULE_proxy_clause = 100, RULE_container_names = 101, RULE_set_container_data = 102, 
		RULE_add_rem_container_data = 103, RULE_container_data_clause = 104, RULE_drop_index = 105, 
		RULE_revoke_statment = 106, RULE_revoke_system_privileges = 107, RULE_revoke_object_privileges = 108, 
		RULE_grant_statement = 109, RULE_container_clause = 110, RULE_create_view = 111, 
		RULE_view_options = 112, RULE_view_alias_constraint = 113, RULE_object_view_clause = 114, 
		RULE_constraint = 115, RULE_inline_constraint = 116, RULE_out_of_line_constraint = 117, 
		RULE_out_of_line_constraints = 118, RULE_constraint_state = 119, RULE_using_index_clause = 120, 
		RULE_index_properties = 121, RULE_global_partitioned_index = 122, RULE_individual_hash_partitions = 123, 
		RULE_index_partitioning_clause = 124, RULE_segment_attributes_clause = 125, 
		RULE_index_attributes = 126, RULE_physical_attributes_clause = 127, RULE_hash_partitions_by_quantity = 128, 
		RULE_local_partitioned_index = 129, RULE_on_range_partitioned_table = 130, 
		RULE_on_list_partitioned_table = 131, RULE_on_hash_partitioned_table = 132, 
		RULE_on_comp_partitioned_table = 133, RULE_xmltable_index_clause = 134, 
		RULE_xmlindex_clause = 135, RULE_partition_clause = 136, RULE_partition_clause_optional = 137, 
		RULE_indexing_clause = 138, RULE_partitioning_storage_clause = 139, RULE_inmemory_table_clause = 140, 
		RULE_inmemory_column_clause = 141, RULE_inmemory_clause = 142, RULE_inmemory_parameters = 143, 
		RULE_inmemory_memcompress = 144, RULE_inmemory_priority = 145, RULE_inmemory_distribute = 146, 
		RULE_inmemory_duplicate = 147, RULE_table_compression = 148, RULE_index_compression = 149, 
		RULE_prefix_compression = 150, RULE_advanced_index_compression = 151, 
		RULE_lob_partitioning_storage = 152, RULE_index_subpartition_clause = 153, 
		RULE_usable_clause = 154, RULE_hash_partition_quantity = 155, RULE_varray_item = 156, 
		RULE_partial_index_clause = 157, RULE_parallel_clause = 158, RULE_domain_index_clause = 159, 
		RULE_local_domain_index_clause = 160, RULE_local_domain_index_parameters_clause = 161, 
		RULE_odci_parameters = 162, RULE_exceptions_clause = 163, RULE_create_tablespace = 164, 
		RULE_permanent_tablespace_clause = 165, RULE_tablespace_encryption_spec = 166, 
		RULE_logging_clause = 167, RULE_extent_management_clause = 168, RULE_segment_management_clause = 169, 
		RULE_flashback_mode_clause = 170, RULE_temporary_tablespace_clause = 171, 
		RULE_tablespace_group_clause = 172, RULE_undo_tablespace_clause = 173, 
		RULE_tablespace_retention_clause = 174, RULE_datafile_specification = 175, 
		RULE_tempfile_specification = 176, RULE_datafile_tempfile_spec = 177, 
		RULE_redo_log_file_spec = 178, RULE_autoextend_clause = 179, RULE_maxsize_clause = 180, 
		RULE_subquery = 181, RULE_create_table = 182, RULE_relational_table = 183, 
		RULE_relational_properties = 184, RULE_relational_property = 185, RULE_table_properties = 186, 
		RULE_flashback_archive_clause = 187, RULE_row_movement_clause = 188, RULE_attribute_clustering_clause = 189, 
		RULE_clustering_join = 190, RULE_cluster_clause = 191, RULE_clustering_columns = 192, 
		RULE_clustering_columns_group = 193, RULE_clustering_when = 194, RULE_zonemap_clause = 195, 
		RULE_enable_disable_clause = 196, RULE_table_partitioning_clauses = 197, 
		RULE_range_partitions = 198, RULE_hash_partitions = 199, RULE_column_properties = 200, 
		RULE_xmltype_column_properties = 201, RULE_xmltype_storage = 202, RULE_xmlschema_spec = 203, 
		RULE_list_partitions = 204, RULE_composite_range_partitions = 205, RULE_composite_hash_partitions = 206, 
		RULE_composite_list_partitions = 207, RULE_range_partition_desc = 208, 
		RULE_list_partition_desc = 209, RULE_range_subpartition_desc = 210, RULE_list_subpartition_desc = 211, 
		RULE_individual_hash_subparts = 212, RULE_hash_subparts_by_quantity = 213, 
		RULE_table_partition_description = 214, RULE_range_values_clause = 215, 
		RULE_list_values_clause = 216, RULE_subpartition_by_range = 217, RULE_subpartition_by_list = 218, 
		RULE_subpartition_by_hash = 219, RULE_subpartition_template = 220, RULE_reference_partitioning = 221, 
		RULE_reference_partition_desc = 222, RULE_object_type_col_properties = 223, 
		RULE_substituable_column_clause = 224, RULE_nested_table_col_properties = 225, 
		RULE_object_properties = 226, RULE_varray_col_properties = 227, RULE_varray_storage_clause = 228, 
		RULE_lob_storage_clause = 229, RULE_lob_storage_parameters = 230, RULE_paren_lob_parameters = 231, 
		RULE_lob_parameters = 232, RULE_lob_retention_clause = 233, RULE_lob_deduplicate_clause = 234, 
		RULE_lob_compresssion_clause = 235, RULE_physical_properties = 236, RULE_external_table_clause = 237, 
		RULE_external_data_properties = 238, RULE_external_data_properties_location = 239, 
		RULE_index_org_table_clause = 240, RULE_mapping_table_clause = 241, RULE_index_org_overflow_clause = 242, 
		RULE_deferred_segment_creation = 243, RULE_tablespace_clause = 244, RULE_store_in = 245, 
		RULE_ilm_clause = 246, RULE_ilm_policy_clause = 247, RULE_ilm_compression_policy = 248, 
		RULE_ilm_tiering_policy = 249, RULE_ilm_time_period = 250, RULE_storage_clause = 251, 
		RULE_column_definition = 252, RULE_virtual_column_definition = 253, RULE_period_definition = 254, 
		RULE_supplemental_logging_props = 255, RULE_supplemental_log_grp_clause = 256, 
		RULE_supplemental_id_key_clause = 257, RULE_column_logged = 258, RULE_evaluation_edition_clause = 259, 
		RULE_edition_name = 260, RULE_unusable_editions_clause = 261, RULE_identity_options = 262, 
		RULE_encryption_spec = 263, RULE_inline_ref_constraint = 264, RULE_out_of_line_ref_constraint = 265, 
		RULE_size_clause = 266, RULE_drop_table = 267, RULE_comment_on_column = 268, 
		RULE_create_synonym = 269, RULE_comment_on_table = 270, RULE_alter_table = 271, 
		RULE_add_constraint = 272, RULE_check_constraint = 273, RULE_drop_constraint = 274, 
		RULE_enable_constraint = 275, RULE_disable_constraint = 276, RULE_foreign_key_clause = 277, 
		RULE_references_clause = 278, RULE_on_delete_clause = 279, RULE_unique_key_clause = 280, 
		RULE_primary_key_clause = 281, RULE_anonymous_block = 282, RULE_invoker_rights_clause = 283, 
		RULE_compiler_parameters_clause = 284, RULE_call_spec = 285, RULE_java_spec = 286, 
		RULE_c_spec = 287, RULE_c_agent_in_clause = 288, RULE_c_parameters_clause = 289, 
		RULE_parameter = 290, RULE_default_value_part = 291, RULE_seq_of_declare_specs = 292, 
		RULE_declare_spec = 293, RULE_variable_declaration = 294, RULE_subtype_declaration = 295, 
		RULE_cursor_declaration = 296, RULE_parameter_spec = 297, RULE_exception_declaration = 298, 
		RULE_pragma_declaration = 299, RULE_type_declaration = 300, RULE_ref_cursor_type_def = 301, 
		RULE_table_type_def = 302, RULE_table_indexed_by_part = 303, RULE_varray_type_def = 304, 
		RULE_record_type_def = 305, RULE_field_spec = 306, RULE_seq_of_statements = 307, 
		RULE_label_declaration = 308, RULE_statement = 309, RULE_swallow_to_semi = 310, 
		RULE_assignment_statement = 311, RULE_continue_statement = 312, RULE_exit_statement = 313, 
		RULE_goto_statement = 314, RULE_if_statement = 315, RULE_elsif_part = 316, 
		RULE_else_part = 317, RULE_loop_statement = 318, RULE_cursor_loop_param = 319, 
		RULE_forall_statement = 320, RULE_bounds_clause = 321, RULE_between_bound = 322, 
		RULE_lower_bound = 323, RULE_upper_bound = 324, RULE_null_statement = 325, 
		RULE_raise_statement = 326, RULE_return_statement = 327, RULE_function_call = 328, 
		RULE_pipe_row_statement = 329, RULE_body = 330, RULE_exception_handler = 331, 
		RULE_trigger_block = 332, RULE_block = 333, RULE_sql_statement = 334, 
		RULE_execute_immediate = 335, RULE_dynamic_returning_clause = 336, RULE_data_manipulation_language_statements = 337, 
		RULE_cursor_manipulation_statements = 338, RULE_close_statement = 339, 
		RULE_open_statement = 340, RULE_fetch_statement = 341, RULE_open_for_statement = 342, 
		RULE_transaction_control_statements = 343, RULE_set_transaction_command = 344, 
		RULE_set_constraint_command = 345, RULE_commit_statement = 346, RULE_write_clause = 347, 
		RULE_rollback_statement = 348, RULE_savepoint_statement = 349, RULE_explain_statement = 350, 
		RULE_select_statement = 351, RULE_subquery_factoring_clause = 352, RULE_factoring_element = 353, 
		RULE_search_clause = 354, RULE_cycle_clause = 355, RULE_subquery_basic_elements = 356, 
		RULE_subquery_operation_part = 357, RULE_query_block = 358, RULE_selected_element = 359, 
		RULE_from_clause = 360, RULE_select_list_elements = 361, RULE_table_ref_list = 362, 
		RULE_table_ref = 363, RULE_table_ref_aux = 364, RULE_table_ref_aux_internal = 365, 
		RULE_join_clause = 366, RULE_join_on_part = 367, RULE_join_using_part = 368, 
		RULE_outer_join_type = 369, RULE_query_partition_clause = 370, RULE_flashback_query_clause = 371, 
		RULE_pivot_clause = 372, RULE_pivot_element = 373, RULE_pivot_for_clause = 374, 
		RULE_pivot_in_clause = 375, RULE_pivot_in_clause_element = 376, RULE_pivot_in_clause_elements = 377, 
		RULE_unpivot_clause = 378, RULE_unpivot_in_clause = 379, RULE_unpivot_in_elements = 380, 
		RULE_hierarchical_query_clause = 381, RULE_start_part = 382, RULE_group_by_clause = 383, 
		RULE_group_by_elements = 384, RULE_rollup_cube_clause = 385, RULE_grouping_sets_clause = 386, 
		RULE_grouping_sets_elements = 387, RULE_having_clause = 388, RULE_model_clause = 389, 
		RULE_cell_reference_options = 390, RULE_return_rows_clause = 391, RULE_reference_model = 392, 
		RULE_main_model = 393, RULE_model_column_clauses = 394, RULE_model_column_partition_part = 395, 
		RULE_model_column_list = 396, RULE_model_column = 397, RULE_model_rules_clause = 398, 
		RULE_model_rules_part = 399, RULE_model_rules_element = 400, RULE_cell_assignment = 401, 
		RULE_model_iterate_clause = 402, RULE_until_part = 403, RULE_order_by_clause = 404, 
		RULE_order_by_elements = 405, RULE_for_update_clause = 406, RULE_for_update_of_part = 407, 
		RULE_for_update_options = 408, RULE_update_statement = 409, RULE_update_set_clause = 410, 
		RULE_column_based_update_set_clause = 411, RULE_delete_statement = 412, 
		RULE_insert_statement = 413, RULE_single_table_insert = 414, RULE_multi_table_insert = 415, 
		RULE_multi_table_element = 416, RULE_conditional_insert_clause = 417, 
		RULE_conditional_insert_when_part = 418, RULE_conditional_insert_else_part = 419, 
		RULE_insert_into_clause = 420, RULE_values_clause = 421, RULE_merge_statement = 422, 
		RULE_merge_update_clause = 423, RULE_merge_element = 424, RULE_merge_update_delete_part = 425, 
		RULE_merge_insert_clause = 426, RULE_selected_tableview = 427, RULE_lock_table_statement = 428, 
		RULE_wait_nowait_part = 429, RULE_lock_table_element = 430, RULE_lock_mode = 431, 
		RULE_general_table_ref = 432, RULE_static_returning_clause = 433, RULE_error_logging_clause = 434, 
		RULE_error_logging_into_part = 435, RULE_error_logging_reject_part = 436, 
		RULE_dml_table_expression_clause = 437, RULE_table_collection_expression = 438, 
		RULE_subquery_restriction_clause = 439, RULE_sample_clause = 440, RULE_seed_part = 441, 
		RULE_condition = 442, RULE_expressions = 443, RULE_expression = 444, RULE_cursor_expression = 445, 
		RULE_logical_expression = 446, RULE_multiset_expression = 447, RULE_relational_expression = 448, 
		RULE_compound_expression = 449, RULE_concatenation = 450, RULE_relational_operator = 451, 
		RULE_model_expression = 452, RULE_in_elements = 453, RULE_between_elements = 454, 
		RULE_interval_expression = 455, RULE_model_expression_element = 456, RULE_single_column_for_loop = 457, 
		RULE_multi_column_for_loop = 458, RULE_unary_expression = 459, RULE_case_statement = 460, 
		RULE_simple_case_statement = 461, RULE_simple_case_when_part = 462, RULE_searched_case_statement = 463, 
		RULE_searched_case_when_part = 464, RULE_case_else_part = 465, RULE_atom = 466, 
		RULE_quantified_expression = 467, RULE_standard_function = 468, RULE_string_function = 469, 
		RULE_numeric_function_wrapper = 470, RULE_numeric_function = 471, RULE_to_date = 472, 
		RULE_other_function = 473, RULE_over_clause_keyword = 474, RULE_within_or_over_clause_keyword = 475, 
		RULE_standard_prediction_function_keyword = 476, RULE_over_clause = 477, 
		RULE_windowing_clause = 478, RULE_windowing_type = 479, RULE_windowing_elements = 480, 
		RULE_using_clause = 481, RULE_using_element = 482, RULE_collect_order_by_part = 483, 
		RULE_within_or_over_part = 484, RULE_cost_matrix_clause = 485, RULE_xml_passing_clause = 486, 
		RULE_xml_attributes_clause = 487, RULE_xml_namespaces_clause = 488, RULE_xml_table_column = 489, 
		RULE_xml_general_default_part = 490, RULE_xml_multiuse_expression_element = 491, 
		RULE_xmlroot_param_version_part = 492, RULE_xmlroot_param_standalone_part = 493, 
		RULE_xmlserialize_param_enconding_part = 494, RULE_xmlserialize_param_version_part = 495, 
		RULE_xmlserialize_param_ident_part = 496, RULE_sql_plus_command = 497, 
		RULE_sqlplus_execute_command = 498, RULE_sqlplus_whenever_command = 499, 
		RULE_function_arguments = 500, RULE_arguments = 501, RULE_argument = 502, 
		RULE_sqlplus_set_command = 503, RULE_partition_extension_clause = 504, 
		RULE_column_alias = 505, RULE_table_alias = 506, RULE_where_clause = 507, 
		RULE_into_clause = 508, RULE_xml_column_name = 509, RULE_routine_name = 510, 
		RULE_indextype = 511, RULE_grantee_name = 512, RULE_role_name = 513, RULE_constraint_name = 514, 
		RULE_variable_name = 515, RULE_cursor_name = 516, RULE_record_name = 517, 
		RULE_link_name = 518, RULE_tableview_name = 519, RULE_element_name = 520, 
		RULE_flashback_archive_name = 521, RULE_zonemap_name = 522, RULE_subpartition_name = 523, 
		RULE_lob_item_name = 524, RULE_dir_object_name = 525, RULE_user_object_name = 526, 
		RULE_tablespace_name = 527, RULE_label_name = 528, RULE_partition_name = 529, 
		RULE_schema_object_name = 530, RULE_lob_segname = 531, RULE_ilm_policy_name = 532, 
		RULE_directory_name = 533, RULE_full_identifier = 534, RULE_implementation_type_name = 535, 
		RULE_container_tableview_name = 536, RULE_function_name = 537, RULE_procedure_name = 538, 
		RULE_trigger_name = 539, RULE_collection_name = 540, RULE_index_name = 541, 
		RULE_table_fullname = 542, RULE_grant_object_name = 543, RULE_column_list = 544, 
		RULE_paren_column_list = 545, RULE_keep_clause = 546, RULE_function_argument_analytic = 547, 
		RULE_function_argument_modeling = 548, RULE_respect_or_ignore_nulls = 549, 
		RULE_type_spec = 550, RULE_datatype = 551, RULE_precision_part = 552, 
		RULE_native_datatype_element = 553, RULE_bind_variable = 554, RULE_general_element = 555, 
		RULE_general_element_part = 556, RULE_table_element = 557, RULE_object_privilege = 558, 
		RULE_system_privilege = 559, RULE_literal = 560, RULE_literal_datetime = 561, 
		RULE_constant = 562, RULE_identifier = 563, RULE_synonym_name = 564, RULE_package_name = 565, 
		RULE_parameter_name = 566, RULE_reference_model_name = 567, RULE_cost_class_name = 568, 
		RULE_attribute_name = 569, RULE_savepoint_name = 570, RULE_rollback_segment_name = 571, 
		RULE_table_var_name = 572, RULE_schema_name = 573, RULE_main_model_name = 574, 
		RULE_query_name = 575, RULE_log_group_name = 576, RULE_identifiers = 577, 
		RULE_aggregate_function_name = 578, RULE_exception_name = 579, RULE_column_name = 580, 
		RULE_id_expression = 581, RULE_id_expressions = 582, RULE_type_name = 583, 
		RULE_sequence_name = 584, RULE_char_set_name = 585, RULE_outer_join_sign = 586, 
		RULE_regular_id = 587, RULE_string_function_name = 588, RULE_numeric_function_name = 589, 
		RULE_integer = 590, RULE_numeric = 591, RULE_numeric_negative = 592, RULE_string = 593;
	public static readonly string[] ruleNames = {
		"sql_script", "unit_statement", "drop_function", "alter_function", "create_function_body", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "create_package_body", "package_obj_spec", "procedure_spec", 
		"function_spec", "package_obj_body", "drop_procedure", "alter_procedure", 
		"function_body", "procedure_body", "create_procedure_body", "drop_trigger", 
		"alter_trigger", "create_trigger", "trigger_follows_clause", "trigger_when_clause", 
		"simple_dml_trigger", "for_each_row", "compound_dml_trigger", "non_dml_trigger", 
		"trigger_body", "routine_clause", "compound_trigger_block", "timing_point_section", 
		"non_dml_event", "dml_event_clause", "dml_event_element", "dml_event_nested_clause", 
		"referencing_clause", "referencing_element", "drop_type", "alter_type", 
		"compile_type_clause", "replace_type_clause", "alter_method_spec", "alter_method_element", 
		"alter_attribute_definition", "attribute_definition", "alter_collection_clauses", 
		"dependent_handling_clause", "dependent_exceptions_part", "create_type", 
		"type_definition", "object_type_def", "object_as_part", "object_under_part", 
		"nested_table_type_def", "sqlj_object_type", "type_body", "type_body_elements", 
		"map_order_func_declaration", "subprog_decl_in_type", "proc_decl_in_type", 
		"func_decl_in_type", "constructor_declaration", "modifier_clause", "object_member_spec", 
		"sqlj_object_type_attr", "element_spec", "element_spec_options", "subprogram_spec", 
		"type_procedure_spec", "type_function_spec", "constructor_spec", "map_order_function_spec", 
		"pragma_clause", "pragma_elements", "type_elements_parameter", "drop_sequence", 
		"alter_sequence", "create_sequence", "sequence_spec", "create_index", 
		"alter_index", "create_user", "alter_user", "alter_identified_by", "identified_by", 
		"identified_other_clause", "user_tablespace_clause", "quota_clause", "profile_clause", 
		"role_clause", "user_default_role_clause", "password_expire_clause", "user_lock_clause", 
		"user_editions_clause", "alter_user_editions_clause", "proxy_clause", 
		"container_names", "set_container_data", "add_rem_container_data", "container_data_clause", 
		"drop_index", "revoke_statment", "revoke_system_privileges", "revoke_object_privileges", 
		"grant_statement", "container_clause", "create_view", "view_options", 
		"view_alias_constraint", "object_view_clause", "constraint", "inline_constraint", 
		"out_of_line_constraint", "out_of_line_constraints", "constraint_state", 
		"using_index_clause", "index_properties", "global_partitioned_index", 
		"individual_hash_partitions", "index_partitioning_clause", "segment_attributes_clause", 
		"index_attributes", "physical_attributes_clause", "hash_partitions_by_quantity", 
		"local_partitioned_index", "on_range_partitioned_table", "on_list_partitioned_table", 
		"on_hash_partitioned_table", "on_comp_partitioned_table", "xmltable_index_clause", 
		"xmlindex_clause", "partition_clause", "partition_clause_optional", "indexing_clause", 
		"partitioning_storage_clause", "inmemory_table_clause", "inmemory_column_clause", 
		"inmemory_clause", "inmemory_parameters", "inmemory_memcompress", "inmemory_priority", 
		"inmemory_distribute", "inmemory_duplicate", "table_compression", "index_compression", 
		"prefix_compression", "advanced_index_compression", "lob_partitioning_storage", 
		"index_subpartition_clause", "usable_clause", "hash_partition_quantity", 
		"varray_item", "partial_index_clause", "parallel_clause", "domain_index_clause", 
		"local_domain_index_clause", "local_domain_index_parameters_clause", "odci_parameters", 
		"exceptions_clause", "create_tablespace", "permanent_tablespace_clause", 
		"tablespace_encryption_spec", "logging_clause", "extent_management_clause", 
		"segment_management_clause", "flashback_mode_clause", "temporary_tablespace_clause", 
		"tablespace_group_clause", "undo_tablespace_clause", "tablespace_retention_clause", 
		"datafile_specification", "tempfile_specification", "datafile_tempfile_spec", 
		"redo_log_file_spec", "autoextend_clause", "maxsize_clause", "subquery", 
		"create_table", "relational_table", "relational_properties", "relational_property", 
		"table_properties", "flashback_archive_clause", "row_movement_clause", 
		"attribute_clustering_clause", "clustering_join", "cluster_clause", "clustering_columns", 
		"clustering_columns_group", "clustering_when", "zonemap_clause", "enable_disable_clause", 
		"table_partitioning_clauses", "range_partitions", "hash_partitions", "column_properties", 
		"xmltype_column_properties", "xmltype_storage", "xmlschema_spec", "list_partitions", 
		"composite_range_partitions", "composite_hash_partitions", "composite_list_partitions", 
		"range_partition_desc", "list_partition_desc", "range_subpartition_desc", 
		"list_subpartition_desc", "individual_hash_subparts", "hash_subparts_by_quantity", 
		"table_partition_description", "range_values_clause", "list_values_clause", 
		"subpartition_by_range", "subpartition_by_list", "subpartition_by_hash", 
		"subpartition_template", "reference_partitioning", "reference_partition_desc", 
		"object_type_col_properties", "substituable_column_clause", "nested_table_col_properties", 
		"object_properties", "varray_col_properties", "varray_storage_clause", 
		"lob_storage_clause", "lob_storage_parameters", "paren_lob_parameters", 
		"lob_parameters", "lob_retention_clause", "lob_deduplicate_clause", "lob_compresssion_clause", 
		"physical_properties", "external_table_clause", "external_data_properties", 
		"external_data_properties_location", "index_org_table_clause", "mapping_table_clause", 
		"index_org_overflow_clause", "deferred_segment_creation", "tablespace_clause", 
		"store_in", "ilm_clause", "ilm_policy_clause", "ilm_compression_policy", 
		"ilm_tiering_policy", "ilm_time_period", "storage_clause", "column_definition", 
		"virtual_column_definition", "period_definition", "supplemental_logging_props", 
		"supplemental_log_grp_clause", "supplemental_id_key_clause", "column_logged", 
		"evaluation_edition_clause", "edition_name", "unusable_editions_clause", 
		"identity_options", "encryption_spec", "inline_ref_constraint", "out_of_line_ref_constraint", 
		"size_clause", "drop_table", "comment_on_column", "create_synonym", "comment_on_table", 
		"alter_table", "add_constraint", "check_constraint", "drop_constraint", 
		"enable_constraint", "disable_constraint", "foreign_key_clause", "references_clause", 
		"on_delete_clause", "unique_key_clause", "primary_key_clause", "anonymous_block", 
		"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
		"c_spec", "c_agent_in_clause", "c_parameters_clause", "parameter", "default_value_part", 
		"seq_of_declare_specs", "declare_spec", "variable_declaration", "subtype_declaration", 
		"cursor_declaration", "parameter_spec", "exception_declaration", "pragma_declaration", 
		"type_declaration", "ref_cursor_type_def", "table_type_def", "table_indexed_by_part", 
		"varray_type_def", "record_type_def", "field_spec", "seq_of_statements", 
		"label_declaration", "statement", "swallow_to_semi", "assignment_statement", 
		"continue_statement", "exit_statement", "goto_statement", "if_statement", 
		"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
		"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
		"raise_statement", "return_statement", "function_call", "pipe_row_statement", 
		"body", "exception_handler", "trigger_block", "block", "sql_statement", 
		"execute_immediate", "dynamic_returning_clause", "data_manipulation_language_statements", 
		"cursor_manipulation_statements", "close_statement", "open_statement", 
		"fetch_statement", "open_for_statement", "transaction_control_statements", 
		"set_transaction_command", "set_constraint_command", "commit_statement", 
		"write_clause", "rollback_statement", "savepoint_statement", "explain_statement", 
		"select_statement", "subquery_factoring_clause", "factoring_element", 
		"search_clause", "cycle_clause", "subquery_basic_elements", "subquery_operation_part", 
		"query_block", "selected_element", "from_clause", "select_list_elements", 
		"table_ref_list", "table_ref", "table_ref_aux", "table_ref_aux_internal", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "condition", "expressions", "expression", 
		"cursor_expression", "logical_expression", "multiset_expression", "relational_expression", 
		"compound_expression", "concatenation", "relational_operator", "model_expression", 
		"in_elements", "between_elements", "interval_expression", "model_expression_element", 
		"single_column_for_loop", "multi_column_for_loop", "unary_expression", 
		"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
		"searched_case_when_part", "case_else_part", "atom", "quantified_expression", 
		"standard_function", "string_function", "numeric_function_wrapper", "numeric_function", 
		"to_date", "other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"sqlplus_execute_command", "sqlplus_whenever_command", "function_arguments", 
		"arguments", "argument", "sqlplus_set_command", "partition_extension_clause", 
		"column_alias", "table_alias", "where_clause", "into_clause", "xml_column_name", 
		"routine_name", "indextype", "grantee_name", "role_name", "constraint_name", 
		"variable_name", "cursor_name", "record_name", "link_name", "tableview_name", 
		"element_name", "flashback_archive_name", "zonemap_name", "subpartition_name", 
		"lob_item_name", "dir_object_name", "user_object_name", "tablespace_name", 
		"label_name", "partition_name", "schema_object_name", "lob_segname", "ilm_policy_name", 
		"directory_name", "full_identifier", "implementation_type_name", "container_tableview_name", 
		"function_name", "procedure_name", "trigger_name", "collection_name", 
		"index_name", "table_fullname", "grant_object_name", "column_list", "paren_column_list", 
		"keep_clause", "function_argument_analytic", "function_argument_modeling", 
		"respect_or_ignore_nulls", "type_spec", "datatype", "precision_part", 
		"native_datatype_element", "bind_variable", "general_element", "general_element_part", 
		"table_element", "object_privilege", "system_privilege", "literal", "literal_datetime", 
		"constant", "identifier", "synonym_name", "package_name", "parameter_name", 
		"reference_model_name", "cost_class_name", "attribute_name", "savepoint_name", 
		"rollback_segment_name", "table_var_name", "schema_name", "main_model_name", 
		"query_name", "log_group_name", "identifiers", "aggregate_function_name", 
		"exception_name", "column_name", "id_expression", "id_expressions", "type_name", 
		"sequence_name", "char_set_name", "outer_join_sign", "regular_id", "string_function_name", 
		"numeric_function_name", "integer", "numeric", "numeric_negative", "string"
	};

	private static readonly string[] _LiteralNames = {
		null, "'ACCESS'", "'ACCOUNT'", "'ADD'", "'ADMIN'", "'ADMINISTER'", "'ADVANCED'", 
		"'ADVISOR'", "'AFTER'", "'AGENT'", "'AGGREGATE'", "'A'", "'ALL'", "'ALLOW'", 
		"'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", "'ANY'", "'ANYSCHEMA'", "'ARCHIVAL'", 
		"'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'ASSOCIATE'", "'AT'", "'ATTRIBUTE'", 
		"'AUDIT'", "'AUTHENTICATED'", "'AUTHENTICATION'", "'AUTHID'", "'AUTOALLOCATE'", 
		"'AUTO'", "'AUTOEXTEND'", "'AUTOMATIC'", "'AUTONOMOUS_TRANSACTION'", "'BACKUP'", 
		"'BASIC'", "'BASICFILE'", "'BATCH'", "'BECOME'", "'BEFORE'", "'BEGIN'", 
		"'BETWEEN'", "'BFILE'", "'BIGFILE'", "'BINARY'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", 
		"'BINARY_INTEGER'", "'BLOB'", "'BLOCK'", "'BLOCKSIZE'", "'BODY'", "'BOOLEAN'", 
		"'BOTH'", "'BREADTH'", "'BUFFER_POOL'", "'BUILD'", "'BULK'", "'BY'", "'BYTE'", 
		"'CACHE'", "'CALL'", "'CANONICAL'", "'CAPACITY'", "'CASCADE'", "'CASE'", 
		"'CAST'", "'CERTIFICATE'", "'CHANGE'", "'CHARACTER'", "'CHAR'", "'CHAR_CS'", 
		"'CHECK'", "'CHR'", "'CHUNK'", "'CLASS'", "'C'", "'CLOB'", "'CLOSE'", 
		"'CLUSTER'", "'CLUSTERING'", "'COALESCE'", "'COLLECT'", "'COLUMN'", "'COLUMNS'", 
		"'COMMENT'", "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY'", "'COMPILE'", 
		"'COMPOUND'", "'COMPRESS'", "'COMPUTE'", "'CONNECT_BY_ROOT'", "'CONNECT'", 
		"'CONSTANT'", "'CONSTRAINT'", "'CONSTRAINTS'", "'CONSTRUCTOR'", "'CONTAINER'", 
		"'CONTAINER_DATA'", "'CONTENT'", "'CONTEXT'", "'CONTINUE'", "'CONVERT'", 
		"'CORRUPT_XID_ALL'", "'CORRUPT_XID'", "'COST'", "'COUNT'", "'CREATE'", 
		"'CREATION'", "'CRITICAL'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_USER'", 
		"'CURSOR'", "'CUSTOMDATUM'", "'CYCLE'", "'DATABASE'", "'DATA'", "'DATAFILE'", 
		"'DATE'", "'DAY'", "'DAYS'", "'DBA_RECYCLEBIN'", "'DB_ROLE_CHANGE'", "'DBTIMEZONE'", 
		"'DDL'", "'DEBUG'", "'DEC'", "'DECIMAL'", "'DECLARE'", "'DECOMPOSE'", 
		"'DECREMENT'", "'DECRYPT'", "'DEDUPLICATE'", "'DEFAULT'", "'DEFAULTS'", 
		"'DEFERRABLE'", "'DEFERRED'", "'DEFINER'", "'DELEGATE'", "'DELETE'", "'DEPTH'", 
		"'DESC'", "'DETERMINISTIC'", "'DICTIONARY'", "'DIMENSION'", "'DIRECTORY'", 
		"'DISABLE'", "'DISALLOW'", "'DISASSOCIATE'", "'DISTINCT'", "'DISTINGUISHED'", 
		"'DISTRIBUTE'", "'DML'", "'DOCUMENT'", "'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", 
		"'DUPLICATE'", "'EACH'", "'EDITIONABLE'", "'EDITION'", "'EDITIONING'", 
		"'EDITIONS'", "'ELEMENT'", "'ELSE'", "'ELSIF'", "'EMPTY'", "'ENABLE'", 
		"'ENCODING'", "'ENCRYPT'", "'ENCRYPTION'", "'END'", "'ENTERPRISE'", "'ENTITYESCAPING'", 
		"'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EVALUATION'", "'EXCEPT'", 
		"'EXCEPTION'", "'EXCEPTION_INIT'", "'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", 
		"'EXECUTE'", "'EXEMPT'", "'EXISTS'", "'EXIT'", "'EXPIRE'", "'EXPLAIN'", 
		"'EXTENT'", "'EXTERNAL'", "'EXTERNALLY'", "'EXTRACT'", "'FAILURE'", "'FALSE'", 
		"'FETCH'", "'FILESYSTEM_LIKE_LOGGING'", "'FINAL'", "'FIRST'", "'FIRST_VALUE'", 
		"'FLASHBACK'", "'FLASH_CACHE'", "'FLOAT'", "'FOLDER'", "'FOLLOWING'", 
		"'FOLLOWS'", "'FORALL'", "'FORCE'", "'FOREIGN'", "'FOR'", "'FREELIST'", 
		"'FREELISTS'", "'FREEPOOLS'", "'FROM'", "'FULL'", "'FUNCTION'", "'GENERATED'", 
		"'GLOBAL'", "'GLOBALLY'", "'GOTO'", "'GRANT'", "'GROUP'", "'GROUPING'", 
		"'GROUPS'", "'GUARANTEE'", "'HASH'", "'HAVING'", "'HEAP'", "'HIDE'", "'HIERARCHY'", 
		"'HIGH'", "'HOUR'", "'IDENTIFIED'", "'IDENTIFIER'", "'IDENTITY'", "'ID'", 
		"'IF'", "'IGNORE'", "'ILM'", "'IMMEDIATE'", "'INCLUDE'", "'INCLUDING'", 
		"'INCREMENT'", "'INDENT'", "'INDEXED'", "'INDEX'", "'INDEXING'", "'INDEXTYPE'", 
		"'INDICATOR'", "'INDICES'", "'INFINITE'", "'INHERIT'", "'IN'", "'INITIAL'", 
		"'INITIALLY'", "'INITRANS'", "'INLINE'", "'INMEMORY'", "'INNER'", "'INOUT'", 
		"'INSERT'", "'INSTANTIABLE'", "'INSTEAD'", "'INTEGER'", "'INTERSECT'", 
		"'INTERVAL'", "'INTERVLEAVED'", "'INT'", "'INTO'", "'INVALIDATE'", "'INVISIBLE'", 
		"'IS'", "'ISOLATION'", "'ITERATE'", "'JAVA'", "'JOB'", "'JOIN'", "'KEEP_DUPLICATES'", 
		"'KEEP'", "'KEY'", "'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEADING'", 
		"'LEFT'", "'LESS'", "'LEVEL'", "'LEVELS'", "'LIBRARY'", "'LIKE2'", "'LIKE4'", 
		"'LIKEC'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINK'", "'LIST'", "'LOAD'", 
		"'LOB'", "'LOBS'", "'LOCAL'", "'LOCATION'", "'LOCATOR'", "'LOCKED'", "'LOCKING'", 
		"'LOCK'", "'LOGGING'", "'LOG'", "'LOGMINING'", "'LOGOFF'", "'LOGON'", 
		"'LONG'", "'LOOP'", "'LOW'", "'MAIN'", "'MANAGE'", "'MANAGEMENT'", "'MANUAL'", 
		"'MAP'", "'MAPPING'", "'MATCHED'", "'MATERIALIZED'", "'MAXSIZE'", "'MAXVALUE'", 
		"'MEASURE'", "'MEASURES'", "'MEDIUM'", "'MEMBER'", "'MEMCOMPRESS'", "'MERGE'", 
		"'MINEXTENTS'", "'MINIMUM'", "'MINING'", "'MINUS'", "'MINUTE'", "'MINVALUE'", 
		"'MLSLABEL'", "'MODEL'", "'MODE'", "'MODIFICATION'", "'MODIFY'", "'MONTH'", 
		"'MONTHS'", "'MOVEMENT'", "'MULTISET'", "'NAME'", "'NAN'", "'NATURAL'", 
		"'NATURALN'", "'NAV'", "'NCHAR_CS'", "'NCHAR'", "'NCLOB'", "'NESTED'", 
		"'NEW'", "'NEXT'", "'NOAUDIT'", "'NOCACHE'", "'NOCOMPRESS'", "'NOCOPY'", 
		"'NOCYCLE'", "'NOEDITIONABLE'", "'NOENTITYESCAPING'", "'NOGUARANTEE'", 
		"'NOKEEP'", "'NOLOGGING'", "'NOMAPPING'", "'NOMAXVALUE'", "'NOMINVALUE'", 
		"'NONEDITIONABLE'", "'NONE'", "'NO'", "'NONSCHEMA'", "'NOORDER'", "'NOPARALLEL'", 
		"'NORELY'", "'NOROWDEPENDENCIES'", "'NOSCHEMACHECK'", "'NOSORT'", "'NOTIFICATION'", 
		"'NOT'", "'NOVALIDATE'", "'NOWAIT'", "'NULL'", "'NULLS'", "'NUMBER'", 
		"'NUMERIC'", "'NVARCHAR2'", "'OBJECT'", "'OFFLINE'", "'OFF'", "'OF'", 
		"'OID'", "'OLD'", "'OLTP'", "'ONLINE'", "'ONLY'", "'ON'", "'OPEN'", "'OPERATOR'", 
		"'OPTIMAL'", "'OPTION'", "'ORADATA'", "'ORDER'", "'ORDINALITY'", "'ORGANIZATION'", 
		"'OR'", "'OSERROR'", "'OUTER'", "'OUTLINE'", "'OUT'", "'OVERFLOW'", "'OVER'", 
		"'OVERRIDING'", "'PACKAGE'", "'PARALLEL_ENABLE'", "'PARALLEL'", "'PARAMETERS'", 
		"'PARENT'", "'PARTIAL'", "'PARTITION'", "'PARTITIONS'", "'PASSING'", "'PASSWORD'", 
		"'PATH'", "'PCTFREE'", "'PCTINCREASE'", "'PCTTHRESHOLD'", "'PCTUSED'", 
		"'PCTVERSION'", "'%FOUND'", "'%ISOPEN'", "'%NOTFOUND'", "'%ROWCOUNT'", 
		"'%ROWTYPE'", "'%TYPE'", "'PIPELINED'", "'PIPE'", "'PIVOT'", "'PLAN'", 
		"'PLS_INTEGER'", "'PLUGGABLE'", "'POLICY'", "'POSITIVEN'", "'POSITIVE'", 
		"'PRAGMA'", "'PRECEDING'", "'PRECISION'", "'PRESENT'", "'PRESERVE'", "'PRIMARY'", 
		"'PRIORITY'", "'PRIOR'", "'PRIVILEGE'", "'PRIVILEGES'", "'PROCEDURE'", 
		"'PROCESS'", "'PROFILE'", "'PROGRAM'", "'PUBLIC'", "'PURGE'", "'QUERY'", 
		"'QUOTA'", "'RAISE'", "'RANGE'", "'RAW'", "'READ'", "'READS'", "'REAL'", 
		"'RECORD'", "'RECYCLE'", "'REDACTION'", "'REFERENCE'", "'REFERENCES'", 
		"'REFERENCING'", "'REF'", "'REFRESH'", "'REJECT'", "'RELATIONAL'", "'RELIES_ON'", 
		"'RELY'", "'REMOVE'", "'RENAME'", "'REPLACE'", "'REQUIRED'", "'RESOURCE'", 
		"'RESPECT'", "'RESTRICTED'", "'RESTRICT_REFERENCES'", "'RESULT_CACHE'", 
		"'RESULT'", "'RESUMABLE'", "'RETENTION'", "'RETURNING'", "'RETURN'", "'REUSE'", 
		"'REVERSE'", "'REVOKE'", "'REWRITE'", "'RIGHT'", "'ROLE'", "'ROLES'", 
		"'ROLLBACK'", "'ROLLUP'", "'ROWDEPENDENCIES'", "'ROWID'", "'ROW'", "'ROWS'", 
		"'RULES'", "'SALT'", "'SAMPLE'", "'SAVEPOINT'", "'SAVE'", "'SCHEDULER'", 
		"'SCHEMACHECK'", "'SCHEMA'", "'SCN'", "'SCOPE'", "'SEARCH'", "'SECOND'", 
		"'SECUREFILE'", "'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", "'SEQUENCE'", 
		"'SEQUENTIAL'", "'SERIALIZABLE'", "'SERIALLY_REUSABLE'", "'SERVERERROR'", 
		"'SESSION'", "'SESSIONTIMEZONE'", "'SET'", "'SETS'", "'SETTINGS'", "'SHARE'", 
		"'#'", "'SHOW'", "'SHUTDOWN'", "'SIBLINGS'", "'SIGNTYPE'", "'SIMPLE_INTEGER'", 
		"'SINGLE'", "'SIZE'", "'SKIP'", "'SMALLFILE'", "'SMALLINT'", "'SNAPSHOT'", 
		"'SOME'", "'SORT'", "'SOURCE'", "'SPACE'", "'SPECIFICATION'", "'SQLDATA'", 
		"'SQLERROR'", "'SQL'", "'STANDALONE'", "'START'", "'STARTUP'", "'STATEMENT_ID'", 
		"'STATEMENT'", "'STATIC'", "'STATISTICS'", "'STORAGE'", "'STORE'", "'STRING'", 
		"'SUBMULTISET'", "'SUBPARTITIONS'", "'SUBPARTITION'", "'SUBSTITUTABLE'", 
		"'SUBTYPE'", "'SUCCESS'", "'SUPPLEMENTAL'", "'SUSPEND'", "'SYNONYM'", 
		"'SYSBACKUP'", "'SYSDATE'", "'SYSDBA'", "'SYSDG'", "'SYSGUID'", "'SYSKM'", 
		"'SYSOPER'", "'SYSTEM'", "'TABLESPACE'", "'TABLES'", "'TABLE'", "'TEMPFILE'", 
		"'TEMPLATE'", "'TEMPORARY'", "'THAN'", "'THEN'", "'THE'", "'THROUGH'", 
		"'TIER'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", "'TIMESTAMP'", "'TIMESTAMP_TZ_UNCONSTRAINED'", 
		"'TIMESTAMP_UNCONSTRAINED'", "'TIME'", "'TIMEZONE_ABBR'", "'TIMEZONE_HOUR'", 
		"'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", "'TO_NCLOB'", "'TO_NUMBER'", 
		"'TO_SINGLE_BYTE'", "'TO_TIMESTAMP_TZ'", "'TO'", "'TO_YMINTERVAL'", "'TRAILING'", 
		"'TRANSACTION'", "'TRANSLATE'", "'TRANSLATION'", "'TREAT'", "'TRIGGER'", 
		"'TRUE'", "'TRUNCATE'", "'TRUNC'", "'TUNING'", "'TYPE'", "'UNBOUNDED'", 
		"'UNDER'", "'UNDO'", "'UNIFORM'", "'UNION'", "'UNIQUE'", "'UNLIMITED'", 
		"'UNLOCK'", "'UNPIVOT'", "'UNTIL'", "'UNUSABLE'", "'UPDATED'", "'UPDATE'", 
		"'UPSERT'", "'UROWID'", "'USABLE'", "'USERS'", "'USER'", "'USE'", "'USING'", 
		"'VALIDATE'", "'VALUES'", "'VALUE'", "'VARCHAR2'", "'VARCHAR'", "'VARIABLE'", 
		"'VARRAYS'", "'VARRAY'", "'VARYING'", "'VERSIONS'", "'VERSION'", "'VIEW'", 
		"'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNING'", "'WELLFORMED'", "'WHENEVER'", 
		"'WHEN'", "'WHERE'", "'WHILE'", "'WITHIN'", "'WITHOUT'", "'WITH'", "'WORK'", 
		"'WRITE'", "'XMLAGG'", "'XMLATTRIBUTES'", "'XMLCAST'", "'XMLCOLATTVAL'", 
		"'XMLELEMENT'", "'XMLEXISTS'", "'XMLFOREST'", "'XMLNAMESPACES'", "'XMLPARSE'", 
		"'XMLPI'", "'XMLQUERY'", "'XMLROOT'", "'XMLSCHEMA'", "'XMLSERIALIZE'", 
		"'XMLTABLE'", "'XMLTYPE'", "'XML'", "'YEARS'", "'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", 
		"'ZONEMAP'", "'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", 
		"'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
		"'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", 
		"'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", 
		"'REGR_'", "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", "'TRIM'", 
		"'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", "'GREATEST'", 
		"'TO_DATE'", null, null, null, null, "'..'", "'.'", null, null, null, 
		null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", 
		"'/'", "'@'", "':='", null, null, "'^'", "'~'", "'!'", "'>'", "'<'", "':'", 
		"';'", "'|'", "'='", "'['", "']'", "'=>'", "'_'", null, null, null, null, 
		null, null, "'@!'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESS", "ACCOUNT", "ADD", "ADMIN", "ADMINISTER", "ADVANCED", "ADVISOR", 
		"AFTER", "AGENT", "AGGREGATE", "A_LETTER", "ALL", "ALLOW", "ALTER", "ALWAYS", 
		"ANALYZE", "AND", "ANY", "ANYSCHEMA", "ARCHIVAL", "ARCHIVE", "ARRAY", 
		"AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", "AUTHENTICATED", 
		"AUTHENTICATION", "AUTHID", "AUTOALLOCATE", "AUTO", "AUTOEXTEND", "AUTOMATIC", 
		"AUTONOMOUS_TRANSACTION", "BACKUP", "BASIC", "BASICFILE", "BATCH", "BECOME", 
		"BEFORE", "BEGIN", "BETWEEN", "BFILE", "BIGFILE", "BINARY", "BINARY_DOUBLE", 
		"BINARY_FLOAT", "BINARY_INTEGER", "BLOB", "BLOCK", "BLOCKSIZE", "BODY", 
		"BOOLEAN", "BOTH", "BREADTH", "BUFFER_POOL", "BUILD", "BULK", "BY", "BYTE", 
		"CACHE", "CALL", "CANONICAL", "CAPACITY", "CASCADE", "CASE", "CAST", "CERTIFICATE", 
		"CHANGE", "CHARACTER", "CHAR", "CHAR_CS", "CHECK", "CHR", "CHUNK", "CLASS", 
		"C_LETTER", "CLOB", "CLOSE", "CLUSTER", "CLUSTERING", "COALESCE", "COLLECT", 
		"COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
		"COMPILE", "COMPOUND", "COMPRESS", "COMPUTE", "CONNECT_BY_ROOT", "CONNECT", 
		"CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", "CONTAINER", "CONTAINER_DATA", 
		"CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID_ALL", "CORRUPT_XID", 
		"COST", "COUNT", "CREATE", "CREATION", "CRITICAL", "CROSS", "CUBE", "CURRENT", 
		"CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", "DATABASE", "DATA", 
		"DATAFILE", "DATE", "DAY", "DAYS", "DBA_RECYCLEBIN", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DECRYPT", "DEDUPLICATE", "DEFAULT", "DEFAULTS", "DEFERRABLE", 
		"DEFERRED", "DEFINER", "DELEGATE", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
		"DICTIONARY", "DIMENSION", "DIRECTORY", "DISABLE", "DISALLOW", "DISASSOCIATE", 
		"DISTINCT", "DISTINGUISHED", "DISTRIBUTE", "DML", "DOCUMENT", "DOUBLE", 
		"DROP", "DSINTERVAL_UNCONSTRAINED", "DUPLICATE", "EACH", "EDITIONABLE", 
		"EDITION", "EDITIONING", "EDITIONS", "ELEMENT", "ELSE", "ELSIF", "EMPTY", 
		"ENABLE", "ENCODING", "ENCRYPT", "ENCRYPTION", "END", "ENTERPRISE", "ENTITYESCAPING", 
		"ERR", "ERRORS", "ESCAPE", "EVALNAME", "EVALUATION", "EXCEPT", "EXCEPTION", 
		"EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXEMPT", 
		"EXISTS", "EXIT", "EXPIRE", "EXPLAIN", "EXTENT", "EXTERNAL", "EXTERNALLY", 
		"EXTRACT", "FAILURE", "FALSE", "FETCH", "FILESYSTEM_LIKE_LOGGING", "FINAL", 
		"FIRST", "FIRST_VALUE", "FLASHBACK", "FLASH_CACHE", "FLOAT", "FOLDER", 
		"FOLLOWING", "FOLLOWS", "FORALL", "FORCE", "FOREIGN", "FOR", "FREELIST", 
		"FREELISTS", "FREEPOOLS", "FROM", "FULL", "FUNCTION", "GENERATED", "GLOBAL", 
		"GLOBALLY", "GOTO", "GRANT", "GROUP", "GROUPING", "GROUPS", "GUARANTEE", 
		"HASH", "HAVING", "HEAP", "HIDE", "HIERARCHY", "HIGH", "HOUR", "IDENTIFIED", 
		"IDENTIFIER", "IDENTITY", "ID", "IF", "IGNORE", "ILM", "IMMEDIATE", "INCLUDE", 
		"INCLUDING", "INCREMENT", "INDENT", "INDEXED", "INDEX", "INDEXING", "INDEXTYPE", 
		"INDICATOR", "INDICES", "INFINITE", "INHERIT", "IN", "INITIAL", "INITIALLY", 
		"INITRANS", "INLINE", "INMEMORY", "INNER", "INOUT", "INSERT", "INSTANTIABLE", 
		"INSTEAD", "INTEGER", "INTERSECT", "INTERVAL", "INTERVLEAVED", "INT", 
		"INTO", "INVALIDATE", "INVISIBLE", "IS", "ISOLATION", "ITERATE", "JAVA", 
		"JOB", "JOIN", "KEEP_DUPLICATES", "KEEP", "KEY", "LANGUAGE", "LAST", "LAST_VALUE", 
		"LEADING", "LEFT", "LESS", "LEVEL", "LEVELS", "LIBRARY", "LIKE2", "LIKE4", 
		"LIKEC", "LIKE", "LIMIT", "LINEAR", "LINK", "LIST", "LOAD", "LOB", "LOBS", 
		"LOCAL", "LOCATION", "LOCATOR", "LOCKED", "LOCKING", "LOCK", "LOGGING", 
		"LOG", "LOGMINING", "LOGOFF", "LOGON", "LONG", "LOOP", "LOW", "MAIN", 
		"MANAGE", "MANAGEMENT", "MANUAL", "MAP", "MAPPING", "MATCHED", "MATERIALIZED", 
		"MAXSIZE", "MAXVALUE", "MEASURE", "MEASURES", "MEDIUM", "MEMBER", "MEMCOMPRESS", 
		"MERGE", "MINEXTENTS", "MINIMUM", "MINING", "MINUS", "MINUTE", "MINVALUE", 
		"MLSLABEL", "MODEL", "MODE", "MODIFICATION", "MODIFY", "MONTH", "MONTHS", 
		"MOVEMENT", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR_CS", 
		"NCHAR", "NCLOB", "NESTED", "NEW", "NEXT", "NOAUDIT", "NOCACHE", "NOCOMPRESS", 
		"NOCOPY", "NOCYCLE", "NOEDITIONABLE", "NOENTITYESCAPING", "NOGUARANTEE", 
		"NOKEEP", "NOLOGGING", "NOMAPPING", "NOMAXVALUE", "NOMINVALUE", "NONEDITIONABLE", 
		"NONE", "NO", "NONSCHEMA", "NOORDER", "NOPARALLEL", "NORELY", "NOROWDEPENDENCIES", 
		"NOSCHEMACHECK", "NOSORT", "NOTIFICATION", "NOT", "NOVALIDATE", "NOWAIT", 
		"NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", "OFFLINE", 
		"OFF", "OF", "OID", "OLD", "OLTP", "ONLINE", "ONLY", "ON", "OPEN", "OPERATOR", 
		"OPTIMAL", "OPTION", "ORADATA", "ORDER", "ORDINALITY", "ORGANIZATION", 
		"OR", "OSERROR", "OUTER", "OUTLINE", "OUT", "OVERFLOW", "OVER", "OVERRIDING", 
		"PACKAGE", "PARALLEL_ENABLE", "PARALLEL", "PARAMETERS", "PARENT", "PARTIAL", 
		"PARTITION", "PARTITIONS", "PASSING", "PASSWORD", "PATH", "PCTFREE", "PCTINCREASE", 
		"PCTTHRESHOLD", "PCTUSED", "PCTVERSION", "PERCENT_FOUND", "PERCENT_ISOPEN", 
		"PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", "PERCENT_TYPE", 
		"PIPELINED", "PIPE", "PIVOT", "PLAN", "PLS_INTEGER", "PLUGGABLE", "POLICY", 
		"POSITIVEN", "POSITIVE", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", 
		"PRESERVE", "PRIMARY", "PRIORITY", "PRIOR", "PRIVILEGE", "PRIVILEGES", 
		"PROCEDURE", "PROCESS", "PROFILE", "PROGRAM", "PUBLIC", "PURGE", "QUERY", 
		"QUOTA", "RAISE", "RANGE", "RAW", "READ", "READS", "REAL", "RECORD", "RECYCLE", 
		"REDACTION", "REFERENCE", "REFERENCES", "REFERENCING", "REF", "REFRESH", 
		"REJECT", "RELATIONAL", "RELIES_ON", "RELY", "REMOVE", "RENAME", "REPLACE", 
		"REQUIRED", "RESOURCE", "RESPECT", "RESTRICTED", "RESTRICT_REFERENCES", 
		"RESULT_CACHE", "RESULT", "RESUMABLE", "RETENTION", "RETURNING", "RETURN", 
		"REUSE", "REVERSE", "REVOKE", "REWRITE", "RIGHT", "ROLE", "ROLES", "ROLLBACK", 
		"ROLLUP", "ROWDEPENDENCIES", "ROWID", "ROW", "ROWS", "RULES", "SALT", 
		"SAMPLE", "SAVEPOINT", "SAVE", "SCHEDULER", "SCHEMACHECK", "SCHEMA", "SCN", 
		"SCOPE", "SEARCH", "SECOND", "SECUREFILE", "SEED", "SEGMENT", "SELECT", 
		"SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
		"SERVERERROR", "SESSION", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", 
		"SHARE", "SHARP", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
		"SINGLE", "SIZE", "SKIP_", "SMALLFILE", "SMALLINT", "SNAPSHOT", "SOME", 
		"SORT", "SOURCE", "SPACE_KEYWORD", "SPECIFICATION", "SQLDATA", "SQLERROR", 
		"SQL", "STANDALONE", "START", "STARTUP", "STATEMENT_ID", "STATEMENT", 
		"STATIC", "STATISTICS", "STORAGE", "STORE", "STRING", "SUBMULTISET", "SUBPARTITIONS", 
		"SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", "SUPPLEMENTAL", 
		"SUSPEND", "SYNONYM", "SYSBACKUP", "SYSDATE", "SYSDBA", "SYSDG", "SYSGUID", 
		"SYSKM", "SYSOPER", "SYSTEM", "TABLESPACE", "TABLES", "TABLE", "TEMPFILE", 
		"TEMPLATE", "TEMPORARY", "THAN", "THEN", "THE", "THROUGH", "TIER", "TIMESTAMP_LTZ_UNCONSTRAINED", 
		"TIMESTAMP", "TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", 
		"TIME", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", 
		"TO_NCLOB", "TO_NUMBER", "TO_SINGLE_BYTE", "TO_TIMESTAMP_TZ", "TO", "TO_YMINTERVAL", 
		"TRAILING", "TRANSACTION", "TRANSLATE", "TRANSLATION", "TREAT", "TRIGGER", 
		"TRUE", "TRUNCATE", "TRUNC", "TUNING", "TYPE", "UNBOUNDED", "UNDER", "UNDO", 
		"UNIFORM", "UNION", "UNIQUE", "UNLIMITED", "UNLOCK", "UNPIVOT", "UNTIL", 
		"UNUSABLE", "UPDATED", "UPDATE", "UPSERT", "UROWID", "USABLE", "USERS", 
		"USER", "USE", "USING", "VALIDATE", "VALUES", "VALUE", "VARCHAR2", "VARCHAR", 
		"VARIABLE", "VARRAYS", "VARRAY", "VARYING", "VERSIONS", "VERSION", "VIEW", 
		"VIRTUAL", "VISIBLE", "WAIT", "WARNING", "WELLFORMED", "WHENEVER", "WHEN", 
		"WHERE", "WHILE", "WITHIN", "WITHOUT", "WITH", "WORK", "WRITE", "XMLAGG", 
		"XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", "XMLEXISTS", 
		"XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", "XMLROOT", 
		"XMLSCHEMA", "XMLSERIALIZE", "XMLTABLE", "XMLTYPE", "XML", "YEARS", "YEAR", 
		"YES", "YMINTERVAL_UNCONSTRAINED", "ZONEMAP", "ZONE", "PREDICTION", "PREDICTION_BOUNDS", 
		"PREDICTION_COST", "PREDICTION_DETAILS", "PREDICTION_PROBABILITY", "PREDICTION_SET", 
		"CUME_DIST", "DENSE_RANK", "LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", 
		"PERCENTILE_DISC", "RANK", "AVG", "CORR", "COVAR_", "DECODE", "LAG", "LEAD", 
		"MAX", "MEDIAN", "MIN", "NTILE", "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", 
		"ROW_NUMBER", "SUBSTR", "TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", "VARIANCE", 
		"LEAST", "GREATEST", "TO_DATE", "VARIABLE_SESSION", "NATIONAL_CHAR_STRING_LIT", 
		"BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", 
		"APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", 
		"LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", 
		"MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", "ASSIGN_OP", "BINDVAR", "NOT_EQUAL_OP", 
		"CARRET_OPERATOR_PART", "TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", 
		"GREATER_THAN_OP", "LESS_THAN_OP", "COLON", "SEMICOLON", "BAR", "EQUALS_OP", 
		"LEFT_BRACKET", "RIGHT_BRACKET", "BIND_VAR", "INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "PROMPT", "START_CMD", "REGULAR_ID", "ZV"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlSqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PlSqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PlSqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlSqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Sql_scriptContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(PlSqlParser.Eof, 0); }
		public Unit_statementContext[] unit_statement() {
			return GetRuleContexts<Unit_statementContext>();
		}
		public Unit_statementContext unit_statement(int i) {
			return GetRuleContext<Unit_statementContext>(i);
		}
		public Sql_plus_commandContext[] sql_plus_command() {
			return GetRuleContexts<Sql_plus_commandContext>();
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return GetRuleContext<Sql_plus_commandContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(PlSqlParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(PlSqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_script(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_scriptContext sql_script() {
		Sql_scriptContext _localctx = new Sql_scriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_sql_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECLARE - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DROP - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GRANT - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSERT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOCK - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELECT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPDATE - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WITH - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (LEFT_PAREN - 713)) | (1L << (COMMA - 713)) | (1L << (SOLIDUS - 713)) | (1L << (PROMPT - 713)))) != 0) || _la==START_CMD || _la==REGULAR_ID) {
				{
				{
				State = 1190;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 1188; unit_statement();
					}
					break;
				case 2:
					{
					State = 1189; sql_plus_command();
					}
					break;
				}
				State = 1193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 1192; Match(SEMICOLON);
					}
				}

				}
				}
				State = 1199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1200; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unit_statementContext : ParserRuleContext {
		public Transaction_control_statementsContext transaction_control_statements() {
			return GetRuleContext<Transaction_control_statementsContext>(0);
		}
		public Alter_functionContext alter_function() {
			return GetRuleContext<Alter_functionContext>(0);
		}
		public Alter_packageContext alter_package() {
			return GetRuleContext<Alter_packageContext>(0);
		}
		public Alter_procedureContext alter_procedure() {
			return GetRuleContext<Alter_procedureContext>(0);
		}
		public Alter_sequenceContext alter_sequence() {
			return GetRuleContext<Alter_sequenceContext>(0);
		}
		public Alter_triggerContext alter_trigger() {
			return GetRuleContext<Alter_triggerContext>(0);
		}
		public Alter_typeContext alter_type() {
			return GetRuleContext<Alter_typeContext>(0);
		}
		public Alter_tableContext alter_table() {
			return GetRuleContext<Alter_tableContext>(0);
		}
		public Alter_indexContext alter_index() {
			return GetRuleContext<Alter_indexContext>(0);
		}
		public Alter_userContext alter_user() {
			return GetRuleContext<Alter_userContext>(0);
		}
		public Create_function_bodyContext create_function_body() {
			return GetRuleContext<Create_function_bodyContext>(0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return GetRuleContext<Create_procedure_bodyContext>(0);
		}
		public Create_packageContext create_package() {
			return GetRuleContext<Create_packageContext>(0);
		}
		public Create_package_bodyContext create_package_body() {
			return GetRuleContext<Create_package_bodyContext>(0);
		}
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public Create_tableContext create_table() {
			return GetRuleContext<Create_tableContext>(0);
		}
		public Create_tablespaceContext create_tablespace() {
			return GetRuleContext<Create_tablespaceContext>(0);
		}
		public Create_userContext create_user() {
			return GetRuleContext<Create_userContext>(0);
		}
		public Create_sequenceContext create_sequence() {
			return GetRuleContext<Create_sequenceContext>(0);
		}
		public Create_triggerContext create_trigger() {
			return GetRuleContext<Create_triggerContext>(0);
		}
		public Create_typeContext create_type() {
			return GetRuleContext<Create_typeContext>(0);
		}
		public Create_synonymContext create_synonym() {
			return GetRuleContext<Create_synonymContext>(0);
		}
		public Drop_functionContext drop_function() {
			return GetRuleContext<Drop_functionContext>(0);
		}
		public Drop_packageContext drop_package() {
			return GetRuleContext<Drop_packageContext>(0);
		}
		public Drop_procedureContext drop_procedure() {
			return GetRuleContext<Drop_procedureContext>(0);
		}
		public Drop_sequenceContext drop_sequence() {
			return GetRuleContext<Drop_sequenceContext>(0);
		}
		public Drop_triggerContext drop_trigger() {
			return GetRuleContext<Drop_triggerContext>(0);
		}
		public Drop_typeContext drop_type() {
			return GetRuleContext<Drop_typeContext>(0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return GetRuleContext<Data_manipulation_language_statementsContext>(0);
		}
		public Drop_tableContext drop_table() {
			return GetRuleContext<Drop_tableContext>(0);
		}
		public Drop_indexContext drop_index() {
			return GetRuleContext<Drop_indexContext>(0);
		}
		public Comment_on_columnContext comment_on_column() {
			return GetRuleContext<Comment_on_columnContext>(0);
		}
		public Comment_on_tableContext comment_on_table() {
			return GetRuleContext<Comment_on_tableContext>(0);
		}
		public Anonymous_blockContext anonymous_block() {
			return GetRuleContext<Anonymous_blockContext>(0);
		}
		public Grant_statementContext grant_statement() {
			return GetRuleContext<Grant_statementContext>(0);
		}
		public Revoke_statmentContext revoke_statment() {
			return GetRuleContext<Revoke_statmentContext>(0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unit_statementContext unit_statement() {
		Unit_statementContext _localctx = new Unit_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_unit_statement);
		try {
			State = 1238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1202; transaction_control_statements();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1203; alter_function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1204; alter_package();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1205; alter_procedure();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1206; alter_sequence();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1207; alter_trigger();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1208; alter_type();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1209; alter_table();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1210; alter_index();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1211; alter_user();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1212; create_function_body();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1213; create_procedure_body();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1214; create_package();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1215; create_package_body();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1216; create_index();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1217; create_table();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1218; create_tablespace();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1219; create_user();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1220; create_sequence();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1221; create_trigger();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1222; create_type();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1223; create_synonym();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1224; drop_function();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1225; drop_package();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1226; drop_procedure();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1227; drop_sequence();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1228; drop_trigger();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1229; drop_type();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1230; data_manipulation_language_statements();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1231; drop_table();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1232; drop_index();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1233; comment_on_column();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1234; comment_on_table();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1235; anonymous_block();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1236; grant_statement();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1237; revoke_statment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_functionContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_functionContext drop_function() {
		Drop_functionContext _localctx = new Drop_functionContext(Context, State);
		EnterRule(_localctx, 4, RULE_drop_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1240; Match(DROP);
			State = 1241; Match(FUNCTION);
			State = 1242; function_name();
			State = 1243; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_functionContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_functionContext alter_function() {
		Alter_functionContext _localctx = new Alter_functionContext(Context, State);
		EnterRule(_localctx, 6, RULE_alter_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1245; Match(ALTER);
			State = 1246; Match(FUNCTION);
			State = 1247; function_name();
			State = 1248; Match(COMPILE);
			State = 1250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 1249; Match(DEBUG);
				}
				break;
			}
			State = 1255;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1252; compiler_parameters_clause();
					}
					} 
				}
				State = 1257;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 1260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1258; Match(REUSE);
				State = 1259; Match(SETTINGS);
				}
			}

			State = 1262; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_function_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return GetRuleContext<Implementation_type_nameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext[] invoker_rights_clause() {
			return GetRuleContexts<Invoker_rights_clauseContext>();
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return GetRuleContext<Invoker_rights_clauseContext>(i);
		}
		public Parallel_enable_clauseContext[] parallel_enable_clause() {
			return GetRuleContexts<Parallel_enable_clauseContext>();
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return GetRuleContext<Parallel_enable_clauseContext>(i);
		}
		public Result_cache_clauseContext[] result_cache_clause() {
			return GetRuleContexts<Result_cache_clauseContext>();
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return GetRuleContext<Result_cache_clauseContext>(i);
		}
		public ITerminalNode[] DETERMINISTIC() { return GetTokens(PlSqlParser.DETERMINISTIC); }
		public ITerminalNode DETERMINISTIC(int i) {
			return GetToken(PlSqlParser.DETERMINISTIC, i);
		}
		public ITerminalNode PIPELINED() { return GetToken(PlSqlParser.PIPELINED, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(PlSqlParser.AGGREGATE, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_function_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_function_bodyContext create_function_body() {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_create_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1264; Match(CREATE);
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1265; Match(OR);
				State = 1266; Match(REPLACE);
				}
			}

			State = 1269; Match(FUNCTION);
			State = 1270; function_name();
			State = 1282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1271; Match(LEFT_PAREN);
				State = 1276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 1273;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 1272; Match(COMMA);
						}
					}

					State = 1275; parameter();
					}
					}
					State = 1278;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
				State = 1280; Match(RIGHT_PAREN);
				}
			}

			State = 1284; Match(RETURN);
			State = 1285; type_spec();
			State = 1292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				State = 1290;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTHID:
					{
					State = 1286; invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					State = 1287; parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					State = 1288; result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					State = 1289; Match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				{
				State = 1296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PIPELINED) {
					{
					State = 1295; Match(PIPELINED);
					}
				}

				State = 1298;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1307;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 1300;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DECLARE) {
						{
						State = 1299; Match(DECLARE);
						}
					}

					State = 1303;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
						{
						State = 1302; seq_of_declare_specs();
						}
					}

					State = 1305; body();
					}
					break;
				case 2:
					{
					State = 1306; call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 1309;
				_la = TokenStream.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1310; Match(USING);
				State = 1311; implementation_type_name();
				}
				break;
			}
			State = 1314; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_enable_clauseContext : ParserRuleContext {
		public ITerminalNode PARALLEL_ENABLE() { return GetToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return GetRuleContext<Partition_by_clauseContext>(0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_enable_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_enable_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_enable_clauseContext parallel_enable_clause() {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(Context, State);
		EnterRule(_localctx, 10, RULE_parallel_enable_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1316; Match(PARALLEL_ENABLE);
			State = 1318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1317; partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_by_clauseContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode ANY() { return GetToken(PlSqlParser.ANY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode HASH() { return GetToken(PlSqlParser.HASH, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ITerminalNode LIST() { return GetToken(PlSqlParser.LIST, 0); }
		public Streaming_clauseContext streaming_clause() {
			return GetRuleContext<Streaming_clauseContext>(0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_by_clauseContext partition_by_clause() {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(Context, State);
		EnterRule(_localctx, 12, RULE_partition_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320; Match(LEFT_PAREN);
			State = 1321; Match(PARTITION);
			State = 1322; expression();
			State = 1323; Match(BY);
			State = 1327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANY:
				{
				State = 1324; Match(ANY);
				}
				break;
			case HASH:
			case LIST:
			case RANGE:
				{
				State = 1325;
				_la = TokenStream.LA(1);
				if ( !(_la==HASH || _la==LIST || _la==RANGE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1326; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				State = 1329; streaming_clause();
				}
			}

			State = 1332; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_cache_clauseContext : ParserRuleContext {
		public ITerminalNode RESULT_CACHE() { return GetToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return GetRuleContext<Relies_on_partContext>(0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_cache_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResult_cache_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Result_cache_clauseContext result_cache_clause() {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_result_cache_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334; Match(RESULT_CACHE);
			State = 1336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELIES_ON) {
				{
				State = 1335; relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relies_on_partContext : ParserRuleContext {
		public ITerminalNode RELIES_ON() { return GetToken(PlSqlParser.RELIES_ON, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Tableview_nameContext[] tableview_name() {
			return GetRuleContexts<Tableview_nameContext>();
		}
		public Tableview_nameContext tableview_name(int i) {
			return GetRuleContext<Tableview_nameContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relies_on_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelies_on_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relies_on_partContext relies_on_part() {
		Relies_on_partContext _localctx = new Relies_on_partContext(Context, State);
		EnterRule(_localctx, 16, RULE_relies_on_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1338; Match(RELIES_ON);
			State = 1339; Match(LEFT_PAREN);
			State = 1340; tableview_name();
			State = 1345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1341; Match(COMMA);
				State = 1342; tableview_name();
				}
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1348; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Streaming_clauseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode CLUSTER() { return GetToken(PlSqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streaming_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreaming_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Streaming_clauseContext streaming_clause() {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(Context, State);
		EnterRule(_localctx, 18, RULE_streaming_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350;
			_la = TokenStream.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1351; expression();
			State = 1352; Match(BY);
			State = 1353; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_packageContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_packageContext drop_package() {
		Drop_packageContext _localctx = new Drop_packageContext(Context, State);
		EnterRule(_localctx, 20, RULE_drop_package);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355; Match(DROP);
			State = 1356; Match(PACKAGE);
			State = 1358;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1357; Match(BODY);
				}
				break;
			}
			State = 1363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 1360; schema_object_name();
				State = 1361; Match(PERIOD);
				}
				break;
			}
			State = 1365; package_name();
			State = 1366; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_packageContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode[] PACKAGE() { return GetTokens(PlSqlParser.PACKAGE); }
		public ITerminalNode PACKAGE(int i) {
			return GetToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return GetRuleContext<Package_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_packageContext alter_package() {
		Alter_packageContext _localctx = new Alter_packageContext(Context, State);
		EnterRule(_localctx, 22, RULE_alter_package);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1368; Match(ALTER);
			State = 1369; Match(PACKAGE);
			State = 1370; package_name();
			State = 1371; Match(COMPILE);
			State = 1373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				{
				State = 1372; Match(DEBUG);
				}
				break;
			}
			State = 1376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 1375;
				_la = TokenStream.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1378; compiler_parameters_clause();
					}
					} 
				}
				State = 1383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			State = 1386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1384; Match(REUSE);
				State = 1385; Match(SETTINGS);
				}
			}

			State = 1388; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_packageContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext[] package_name() {
			return GetRuleContexts<Package_nameContext>();
		}
		public Package_nameContext package_name(int i) {
			return GetRuleContext<Package_nameContext>(i);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Package_obj_specContext[] package_obj_spec() {
			return GetRuleContexts<Package_obj_specContext>();
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return GetRuleContext<Package_obj_specContext>(i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_package; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_package(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_packageContext create_package() {
		Create_packageContext _localctx = new Create_packageContext(Context, State);
		EnterRule(_localctx, 24, RULE_create_package);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1390; Match(CREATE);
			State = 1393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1391; Match(OR);
				State = 1392; Match(REPLACE);
				}
			}

			State = 1395; Match(PACKAGE);
			State = 1399;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 1396; schema_object_name();
				State = 1397; Match(PERIOD);
				}
				break;
			}
			State = 1401; package_name();
			State = 1403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1402; invoker_rights_clause();
				}
			}

			State = 1405;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				{
				State = 1406; package_obj_spec();
				}
				}
				State = 1411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1412; Match(END);
			State = 1414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 1413; package_name();
				}
			}

			State = 1416; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_package_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Package_nameContext[] package_name() {
			return GetRuleContexts<Package_nameContext>();
		}
		public Package_nameContext package_name(int i) {
			return GetRuleContext<Package_nameContext>(i);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public Package_obj_bodyContext[] package_obj_body() {
			return GetRuleContexts<Package_obj_bodyContext>();
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return GetRuleContext<Package_obj_bodyContext>(i);
		}
		public ITerminalNode BEGIN() { return GetToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_package_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_package_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_package_bodyContext create_package_body() {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(Context, State);
		EnterRule(_localctx, 26, RULE_create_package_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1418; Match(CREATE);
			State = 1421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1419; Match(OR);
				State = 1420; Match(REPLACE);
				}
			}

			State = 1423; Match(PACKAGE);
			State = 1424; Match(BODY);
			State = 1428;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 1425; schema_object_name();
				State = 1426; Match(PERIOD);
				}
				break;
			}
			State = 1430; package_name();
			State = 1431;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				{
				State = 1432; package_obj_body();
				}
				}
				State = 1437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1440;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BEGIN) {
				{
				State = 1438; Match(BEGIN);
				State = 1439; seq_of_statements();
				}
			}

			State = 1442; Match(END);
			State = 1444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 1443; package_name();
				}
			}

			State = 1446; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_obj_specContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return GetRuleContext<Pragma_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_obj_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_obj_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_obj_specContext package_obj_spec() {
		Package_obj_specContext _localctx = new Package_obj_specContext(Context, State);
		EnterRule(_localctx, 28, RULE_package_obj_spec);
		try {
			State = 1456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1448; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1449; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1450; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1451; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1452; pragma_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1453; type_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1454; procedure_spec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1455; function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_specContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_specContext procedure_spec() {
		Procedure_specContext _localctx = new Procedure_specContext(Context, State);
		EnterRule(_localctx, 30, RULE_procedure_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1458; Match(PROCEDURE);
			State = 1459; identifier();
			State = 1471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1460; Match(LEFT_PAREN);
				State = 1461; parameter();
				State = 1466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1462; Match(COMMA);
					State = 1463; parameter();
					}
					}
					State = 1468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1469; Match(RIGHT_PAREN);
				}
			}

			State = 1473; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_specContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(PlSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode RESULT_CACHE() { return GetToken(PlSqlParser.RESULT_CACHE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_specContext function_spec() {
		Function_specContext _localctx = new Function_specContext(Context, State);
		EnterRule(_localctx, 32, RULE_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1475; Match(FUNCTION);
			State = 1476; identifier();
			State = 1488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1477; Match(LEFT_PAREN);
				State = 1478; parameter();
				State = 1483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1479; Match(COMMA);
					State = 1480; parameter();
					}
					}
					State = 1485;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1486; Match(RIGHT_PAREN);
				}
			}

			State = 1490; Match(RETURN);
			State = 1491; type_spec();
			State = 1493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DETERMINISTIC) {
				{
				State = 1492; Match(DETERMINISTIC);
				}
			}

			State = 1496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RESULT_CACHE) {
				{
				State = 1495; Match(RESULT_CACHE);
				}
			}

			State = 1498; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_obj_bodyContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_bodyContext procedure_body() {
			return GetRuleContext<Procedure_bodyContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_obj_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_obj_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_obj_bodyContext package_obj_body() {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_package_obj_body);
		try {
			State = 1509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1500; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1501; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1502; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1503; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1504; type_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1505; procedure_body();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1506; function_body();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1507; procedure_spec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1508; function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_procedureContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_procedure; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_procedureContext drop_procedure() {
		Drop_procedureContext _localctx = new Drop_procedureContext(Context, State);
		EnterRule(_localctx, 36, RULE_drop_procedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511; Match(DROP);
			State = 1512; Match(PROCEDURE);
			State = 1513; procedure_name();
			State = 1514; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_procedureContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_procedure; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_procedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_procedureContext alter_procedure() {
		Alter_procedureContext _localctx = new Alter_procedureContext(Context, State);
		EnterRule(_localctx, 38, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1516; Match(ALTER);
			State = 1517; Match(PROCEDURE);
			State = 1518; procedure_name();
			State = 1519; Match(COMPILE);
			State = 1521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 1520; Match(DEBUG);
				}
				break;
			}
			State = 1526;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1523; compiler_parameters_clause();
					}
					} 
				}
				State = 1528;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1529; Match(REUSE);
				State = 1530; Match(SETTINGS);
				}
			}

			State = 1533; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return GetRuleContext<Implementation_type_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext[] invoker_rights_clause() {
			return GetRuleContexts<Invoker_rights_clauseContext>();
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return GetRuleContext<Invoker_rights_clauseContext>(i);
		}
		public Parallel_enable_clauseContext[] parallel_enable_clause() {
			return GetRuleContexts<Parallel_enable_clauseContext>();
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return GetRuleContext<Parallel_enable_clauseContext>(i);
		}
		public Result_cache_clauseContext[] result_cache_clause() {
			return GetRuleContexts<Result_cache_clauseContext>();
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return GetRuleContext<Result_cache_clauseContext>(i);
		}
		public ITerminalNode[] DETERMINISTIC() { return GetTokens(PlSqlParser.DETERMINISTIC); }
		public ITerminalNode DETERMINISTIC(int i) {
			return GetToken(PlSqlParser.DETERMINISTIC, i);
		}
		public ITerminalNode PIPELINED() { return GetToken(PlSqlParser.PIPELINED, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(PlSqlParser.AGGREGATE, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 40, RULE_function_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535; Match(FUNCTION);
			State = 1536; function_name();
			State = 1548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1537; Match(LEFT_PAREN);
				State = 1538; parameter();
				State = 1543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1539; Match(COMMA);
					State = 1540; parameter();
					}
					}
					State = 1545;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1546; Match(RIGHT_PAREN);
				}
			}

			State = 1550; Match(RETURN);
			State = 1551; type_spec();
			State = 1558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				State = 1556;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTHID:
					{
					State = 1552; invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					State = 1553; parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					State = 1554; result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					State = 1555; Match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				{
				State = 1562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PIPELINED) {
					{
					State = 1561; Match(PIPELINED);
					}
				}

				State = 1564;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 1566;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DECLARE) {
						{
						State = 1565; Match(DECLARE);
						}
					}

					State = 1569;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
						{
						State = 1568; seq_of_declare_specs();
						}
					}

					State = 1571; body();
					}
					break;
				case 2:
					{
					State = 1572; call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				State = 1575;
				_la = TokenStream.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1576; Match(USING);
				State = 1577; implementation_type_name();
				}
				break;
			}
			State = 1580; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_bodyContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_bodyContext procedure_body() {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_procedure_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1582; Match(PROCEDURE);
			State = 1583; procedure_name();
			State = 1595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1584; Match(LEFT_PAREN);
				State = 1585; parameter();
				State = 1590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1586; Match(COMMA);
					State = 1587; parameter();
					}
					}
					State = 1592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1593; Match(RIGHT_PAREN);
				}
			}

			State = 1597;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				{
				State = 1599;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1598; Match(DECLARE);
					}
				}

				State = 1602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 1601; seq_of_declare_specs();
					}
				}

				State = 1604; body();
				}
				break;
			case 2:
				{
				State = 1605; call_spec();
				}
				break;
			case 3:
				{
				State = 1606; Match(EXTERNAL);
				}
				break;
			}
			State = 1609; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedure_bodyContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_procedure_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedure_bodyContext create_procedure_body() {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(Context, State);
		EnterRule(_localctx, 44, RULE_create_procedure_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1611; Match(CREATE);
			State = 1614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1612; Match(OR);
				State = 1613; Match(REPLACE);
				}
			}

			State = 1616; Match(PROCEDURE);
			State = 1617; procedure_name();
			State = 1629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1618; Match(LEFT_PAREN);
				State = 1619; parameter();
				State = 1624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1620; Match(COMMA);
					State = 1621; parameter();
					}
					}
					State = 1626;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1627; Match(RIGHT_PAREN);
				}
			}

			State = 1632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1631; invoker_rights_clause();
				}
			}

			State = 1634;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				{
				State = 1636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 1635; Match(DECLARE);
					}
				}

				State = 1639;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 1638; seq_of_declare_specs();
					}
				}

				State = 1641; body();
				}
				break;
			case 2:
				{
				State = 1642; call_spec();
				}
				break;
			case 3:
				{
				State = 1643; Match(EXTERNAL);
				}
				break;
			}
			State = 1646; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_triggerContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_triggerContext drop_trigger() {
		Drop_triggerContext _localctx = new Drop_triggerContext(Context, State);
		EnterRule(_localctx, 46, RULE_drop_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1648; Match(DROP);
			State = 1649; Match(TRIGGER);
			State = 1650; trigger_name();
			State = 1651; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_triggerContext : ParserRuleContext {
		public Trigger_nameContext alter_trigger_name;
		public Trigger_nameContext rename_trigger_name;
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext[] trigger_name() {
			return GetRuleContexts<Trigger_nameContext>();
		}
		public Trigger_nameContext trigger_name(int i) {
			return GetRuleContext<Trigger_nameContext>(i);
		}
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_triggerContext alter_trigger() {
		Alter_triggerContext _localctx = new Alter_triggerContext(Context, State);
		EnterRule(_localctx, 48, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1653; Match(ALTER);
			State = 1654; Match(TRIGGER);
			State = 1655; _localctx.alter_trigger_name = trigger_name();
			State = 1674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				State = 1656;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case RENAME:
				{
				State = 1657; Match(RENAME);
				State = 1658; Match(TO);
				State = 1659; _localctx.rename_trigger_name = trigger_name();
				}
				break;
			case COMPILE:
				{
				State = 1660; Match(COMPILE);
				State = 1662;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
				case 1:
					{
					State = 1661; Match(DEBUG);
					}
					break;
				}
				State = 1667;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1664; compiler_parameters_clause();
						}
						} 
					}
					State = 1669;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
				}
				State = 1672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REUSE) {
					{
					State = 1670; Match(REUSE);
					State = 1671; Match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1676; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_triggerContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Trigger_bodyContext trigger_body() {
			return GetRuleContext<Trigger_bodyContext>(0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return GetRuleContext<Simple_dml_triggerContext>(0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return GetRuleContext<Compound_dml_triggerContext>(0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return GetRuleContext<Non_dml_triggerContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return GetRuleContext<Trigger_follows_clauseContext>(0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return GetRuleContext<Trigger_when_clauseContext>(0);
		}
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_triggerContext create_trigger() {
		Create_triggerContext _localctx = new Create_triggerContext(Context, State);
		EnterRule(_localctx, 50, RULE_create_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1678; Match(CREATE);
			State = 1681;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1679; Match(OR);
				State = 1680; Match(REPLACE);
				}
			}

			State = 1683; Match(TRIGGER);
			State = 1684; trigger_name();
			State = 1688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				{
				State = 1685; simple_dml_trigger();
				}
				break;
			case 2:
				{
				State = 1686; compound_dml_trigger();
				}
				break;
			case 3:
				{
				State = 1687; non_dml_trigger();
				}
				break;
			}
			State = 1691;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				State = 1690; trigger_follows_clause();
				}
				break;
			}
			State = 1694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 1693;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1697;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1696; trigger_when_clause();
				}
			}

			State = 1699; trigger_body();
			State = 1700; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_follows_clauseContext : ParserRuleContext {
		public ITerminalNode FOLLOWS() { return GetToken(PlSqlParser.FOLLOWS, 0); }
		public Trigger_nameContext[] trigger_name() {
			return GetRuleContexts<Trigger_nameContext>();
		}
		public Trigger_nameContext trigger_name(int i) {
			return GetRuleContext<Trigger_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_follows_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_follows_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_follows_clauseContext trigger_follows_clause() {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(Context, State);
		EnterRule(_localctx, 52, RULE_trigger_follows_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1702; Match(FOLLOWS);
			State = 1703; trigger_name();
			State = 1708;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1704; Match(COMMA);
				State = 1705; trigger_name();
				}
				}
				State = 1710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_when_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_when_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_when_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_when_clauseContext trigger_when_clause() {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(Context, State);
		EnterRule(_localctx, 54, RULE_trigger_when_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711; Match(WHEN);
			State = 1712; Match(LEFT_PAREN);
			State = 1713; condition();
			State = 1714; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_dml_triggerContext : ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return GetRuleContext<Dml_event_clauseContext>(0);
		}
		public ITerminalNode BEFORE() { return GetToken(PlSqlParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public ITerminalNode INSTEAD() { return GetToken(PlSqlParser.INSTEAD, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return GetRuleContext<Referencing_clauseContext>(0);
		}
		public For_each_rowContext for_each_row() {
			return GetRuleContext<For_each_rowContext>(0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_dml_triggerContext simple_dml_trigger() {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(Context, State);
		EnterRule(_localctx, 56, RULE_simple_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1720;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEFORE:
				{
				State = 1716; Match(BEFORE);
				}
				break;
			case AFTER:
				{
				State = 1717; Match(AFTER);
				}
				break;
			case INSTEAD:
				{
				State = 1718; Match(INSTEAD);
				State = 1719; Match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1722; dml_event_clause();
			State = 1724;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				{
				State = 1723; referencing_clause();
				}
				break;
			}
			State = 1727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 1726; for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_each_rowContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode EACH() { return GetToken(PlSqlParser.EACH, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_each_row; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_each_row(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_each_rowContext for_each_row() {
		For_each_rowContext _localctx = new For_each_rowContext(Context, State);
		EnterRule(_localctx, 58, RULE_for_each_row);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1729; Match(FOR);
			State = 1730; Match(EACH);
			State = 1731; Match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_dml_triggerContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return GetRuleContext<Dml_event_clauseContext>(0);
		}
		public Referencing_clauseContext referencing_clause() {
			return GetRuleContext<Referencing_clauseContext>(0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_dml_triggerContext compound_dml_trigger() {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(Context, State);
		EnterRule(_localctx, 60, RULE_compound_dml_trigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733; Match(FOR);
			State = 1734; dml_event_clause();
			State = 1736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				{
				State = 1735; referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_dml_triggerContext : ParserRuleContext {
		public Non_dml_eventContext[] non_dml_event() {
			return GetRuleContexts<Non_dml_eventContext>();
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return GetRuleContext<Non_dml_eventContext>(i);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode BEFORE() { return GetToken(PlSqlParser.BEFORE, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(PlSqlParser.SCHEMA, 0); }
		public ITerminalNode[] OR() { return GetTokens(PlSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return GetRuleContext<Schema_nameContext>(0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_dml_trigger; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_dml_trigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_dml_triggerContext non_dml_trigger() {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(Context, State);
		EnterRule(_localctx, 62, RULE_non_dml_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738;
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1739; non_dml_event();
			State = 1744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1740; Match(OR);
				State = 1741; non_dml_event();
				}
				}
				State = 1746;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1747; Match(ON);
			State = 1755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 1748; Match(DATABASE);
				}
				break;
			case 2:
				{
				State = 1752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 1749; schema_name();
					State = 1750; Match(PERIOD);
					}
					break;
				}
				State = 1754; Match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_bodyContext : ParserRuleContext {
		public ITerminalNode COMPOUND() { return GetToken(PlSqlParser.COMPOUND, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode CALL() { return GetToken(PlSqlParser.CALL, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Trigger_blockContext trigger_block() {
			return GetRuleContext<Trigger_blockContext>(0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_bodyContext trigger_body() {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(Context, State);
		EnterRule(_localctx, 64, RULE_trigger_body);
		try {
			State = 1762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1757; Match(COMPOUND);
				State = 1758; Match(TRIGGER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1759; Match(CALL);
				State = 1760; identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1761; trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Routine_clauseContext : ParserRuleContext {
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutine_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Routine_clauseContext routine_clause() {
		Routine_clauseContext _localctx = new Routine_clauseContext(Context, State);
		EnterRule(_localctx, 66, RULE_routine_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 1764; function_arguments();
				}
			}

			State = 1768;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KEEP) {
				{
				State = 1767; keep_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_trigger_blockContext : ParserRuleContext {
		public ITerminalNode COMPOUND() { return GetToken(PlSqlParser.COMPOUND, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return GetRuleContext<Trigger_nameContext>(0);
		}
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Timing_point_sectionContext[] timing_point_section() {
			return GetRuleContexts<Timing_point_sectionContext>();
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return GetRuleContext<Timing_point_sectionContext>(i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_trigger_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_trigger_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_trigger_blockContext compound_trigger_block() {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(Context, State);
		EnterRule(_localctx, 68, RULE_compound_trigger_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1770; Match(COMPOUND);
			State = 1771; Match(TRIGGER);
			State = 1773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1772; seq_of_declare_specs();
				}
				break;
			}
			State = 1776;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1775; timing_point_section();
				}
				}
				State = 1778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			State = 1780; Match(END);
			State = 1781; trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Timing_point_sectionContext : ParserRuleContext {
		public IToken bk;
		public IToken ak;
		public ITerminalNode[] STATEMENT() { return GetTokens(PlSqlParser.STATEMENT); }
		public ITerminalNode STATEMENT(int i) {
			return GetToken(PlSqlParser.STATEMENT, i);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return GetRuleContext<Trigger_blockContext>(0);
		}
		public ITerminalNode[] BEFORE() { return GetTokens(PlSqlParser.BEFORE); }
		public ITerminalNode BEFORE(int i) {
			return GetToken(PlSqlParser.BEFORE, i);
		}
		public ITerminalNode[] EACH() { return GetTokens(PlSqlParser.EACH); }
		public ITerminalNode EACH(int i) {
			return GetToken(PlSqlParser.EACH, i);
		}
		public ITerminalNode[] ROW() { return GetTokens(PlSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(PlSqlParser.ROW, i);
		}
		public ITerminalNode[] AFTER() { return GetTokens(PlSqlParser.AFTER); }
		public ITerminalNode AFTER(int i) {
			return GetToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timing_point_section; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiming_point_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Timing_point_sectionContext timing_point_section() {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(Context, State);
		EnterRule(_localctx, 70, RULE_timing_point_section);
		try {
			State = 1819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1783; _localctx.bk = Match(BEFORE);
				State = 1784; Match(STATEMENT);
				State = 1785; Match(IS);
				State = 1786; trigger_block();
				State = 1787; Match(BEFORE);
				State = 1788; Match(STATEMENT);
				State = 1789; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1791; _localctx.bk = Match(BEFORE);
				State = 1792; Match(EACH);
				State = 1793; Match(ROW);
				State = 1794; Match(IS);
				State = 1795; trigger_block();
				State = 1796; Match(BEFORE);
				State = 1797; Match(EACH);
				State = 1798; Match(ROW);
				State = 1799; Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1801; _localctx.ak = Match(AFTER);
				State = 1802; Match(STATEMENT);
				State = 1803; Match(IS);
				State = 1804; trigger_block();
				State = 1805; Match(AFTER);
				State = 1806; Match(STATEMENT);
				State = 1807; Match(SEMICOLON);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1809; _localctx.ak = Match(AFTER);
				State = 1810; Match(EACH);
				State = 1811; Match(ROW);
				State = 1812; Match(IS);
				State = 1813; trigger_block();
				State = 1814; Match(AFTER);
				State = 1815; Match(EACH);
				State = 1816; Match(ROW);
				State = 1817; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_dml_eventContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode ANALYZE() { return GetToken(PlSqlParser.ANALYZE, 0); }
		public ITerminalNode ASSOCIATE() { return GetToken(PlSqlParser.ASSOCIATE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(PlSqlParser.STATISTICS, 0); }
		public ITerminalNode AUDIT() { return GetToken(PlSqlParser.AUDIT, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode DISASSOCIATE() { return GetToken(PlSqlParser.DISASSOCIATE, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode GRANT() { return GetToken(PlSqlParser.GRANT, 0); }
		public ITerminalNode NOAUDIT() { return GetToken(PlSqlParser.NOAUDIT, 0); }
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(PlSqlParser.TRUNCATE, 0); }
		public ITerminalNode DDL() { return GetToken(PlSqlParser.DDL, 0); }
		public ITerminalNode STARTUP() { return GetToken(PlSqlParser.STARTUP, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(PlSqlParser.SHUTDOWN, 0); }
		public ITerminalNode DB_ROLE_CHANGE() { return GetToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public ITerminalNode LOGON() { return GetToken(PlSqlParser.LOGON, 0); }
		public ITerminalNode LOGOFF() { return GetToken(PlSqlParser.LOGOFF, 0); }
		public ITerminalNode SERVERERROR() { return GetToken(PlSqlParser.SERVERERROR, 0); }
		public ITerminalNode SUSPEND() { return GetToken(PlSqlParser.SUSPEND, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode SCHEMA() { return GetToken(PlSqlParser.SCHEMA, 0); }
		public ITerminalNode FOLLOWS() { return GetToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_dml_event; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_dml_event(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_dml_eventContext non_dml_event() {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(Context, State);
		EnterRule(_localctx, 72, RULE_non_dml_event);
		try {
			State = 1847;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1821; Match(ALTER);
				}
				break;
			case ANALYZE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1822; Match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1823; Match(ASSOCIATE);
				State = 1824; Match(STATISTICS);
				}
				break;
			case AUDIT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1825; Match(AUDIT);
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1826; Match(COMMENT);
				}
				break;
			case CREATE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1827; Match(CREATE);
				}
				break;
			case DISASSOCIATE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1828; Match(DISASSOCIATE);
				State = 1829; Match(STATISTICS);
				}
				break;
			case DROP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1830; Match(DROP);
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1831; Match(GRANT);
				}
				break;
			case NOAUDIT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1832; Match(NOAUDIT);
				}
				break;
			case RENAME:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1833; Match(RENAME);
				}
				break;
			case REVOKE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1834; Match(REVOKE);
				}
				break;
			case TRUNCATE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1835; Match(TRUNCATE);
				}
				break;
			case DDL:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1836; Match(DDL);
				}
				break;
			case STARTUP:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1837; Match(STARTUP);
				}
				break;
			case SHUTDOWN:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1838; Match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1839; Match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1840; Match(LOGON);
				}
				break;
			case LOGOFF:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1841; Match(LOGOFF);
				}
				break;
			case SERVERERROR:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1842; Match(SERVERERROR);
				}
				break;
			case SUSPEND:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1843; Match(SUSPEND);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1844; Match(DATABASE);
				}
				break;
			case SCHEMA:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1845; Match(SCHEMA);
				}
				break;
			case FOLLOWS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1846; Match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_clauseContext : ParserRuleContext {
		public Dml_event_elementContext[] dml_event_element() {
			return GetRuleContexts<Dml_event_elementContext>();
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return GetRuleContext<Dml_event_elementContext>(i);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(PlSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return GetRuleContext<Dml_event_nested_clauseContext>(0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_clauseContext dml_event_clause() {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_dml_event_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1849; dml_event_element();
			State = 1854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 1850; Match(OR);
				State = 1851; dml_event_element();
				}
				}
				State = 1856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1857; Match(ON);
			State = 1859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 1858; dml_event_nested_clause();
				}
				break;
			}
			State = 1861; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_elementContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_elementContext dml_event_element() {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(Context, State);
		EnterRule(_localctx, 76, RULE_dml_event_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863;
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF) {
				{
				State = 1864; Match(OF);
				State = 1865; column_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_event_nested_clauseContext : ParserRuleContext {
		public ITerminalNode NESTED() { return GetToken(PlSqlParser.NESTED, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_event_nested_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_event_nested_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_event_nested_clauseContext dml_event_nested_clause() {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(Context, State);
		EnterRule(_localctx, 78, RULE_dml_event_nested_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868; Match(NESTED);
			State = 1869; Match(TABLE);
			State = 1870; tableview_name();
			State = 1871; Match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Referencing_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCING() { return GetToken(PlSqlParser.REFERENCING, 0); }
		public Referencing_elementContext[] referencing_element() {
			return GetRuleContexts<Referencing_elementContext>();
		}
		public Referencing_elementContext referencing_element(int i) {
			return GetRuleContext<Referencing_elementContext>(i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Referencing_clauseContext referencing_clause() {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(Context, State);
		EnterRule(_localctx, 80, RULE_referencing_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1873; Match(REFERENCING);
			State = 1875;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1874; referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1877;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,98,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Referencing_elementContext : ParserRuleContext {
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(PlSqlParser.NEW, 0); }
		public ITerminalNode OLD() { return GetToken(PlSqlParser.OLD, 0); }
		public ITerminalNode PARENT() { return GetToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referencing_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferencing_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Referencing_elementContext referencing_element() {
		Referencing_elementContext _localctx = new Referencing_elementContext(Context, State);
		EnterRule(_localctx, 82, RULE_referencing_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1879;
			_la = TokenStream.LA(1);
			if ( !(_la==NEW || _la==OLD || _la==PARENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1880; column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_typeContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode VALIDATE() { return GetToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_typeContext drop_type() {
		Drop_typeContext _localctx = new Drop_typeContext(Context, State);
		EnterRule(_localctx, 84, RULE_drop_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1882; Match(DROP);
			State = 1883; Match(TYPE);
			State = 1885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				{
				State = 1884; Match(BODY);
				}
				break;
			}
			State = 1887; type_name();
			State = 1889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				State = 1888;
				_la = TokenStream.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1891; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_typeContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return GetRuleContext<Compile_type_clauseContext>(0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return GetRuleContext<Replace_type_clauseContext>(0);
		}
		public Alter_method_specContext alter_method_spec() {
			return GetRuleContext<Alter_method_specContext>(0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return GetRuleContext<Alter_collection_clausesContext>(0);
		}
		public Modifier_clauseContext modifier_clause() {
			return GetRuleContext<Modifier_clauseContext>(0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return GetRuleContext<Dependent_handling_clauseContext>(0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_typeContext alter_type() {
		Alter_typeContext _localctx = new Alter_typeContext(Context, State);
		EnterRule(_localctx, 86, RULE_alter_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893; Match(ALTER);
			State = 1894; Match(TYPE);
			State = 1895; type_name();
			State = 1901;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPILE:
				{
				State = 1896; compile_type_clause();
				}
				break;
			case REPLACE:
				{
				State = 1897; replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				State = 1898; alter_method_spec();
				}
				break;
			case MODIFY:
				{
				State = 1899; alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				State = 1900; modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				State = 1903; dependent_handling_clause();
				}
			}

			State = 1906; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compile_type_clauseContext : ParserRuleContext {
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public Compiler_parameters_clauseContext[] compiler_parameters_clause() {
			return GetRuleContexts<Compiler_parameters_clauseContext>();
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return GetRuleContext<Compiler_parameters_clauseContext>(i);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(PlSqlParser.SPECIFICATION, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compile_type_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompile_type_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compile_type_clauseContext compile_type_clause() {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(Context, State);
		EnterRule(_localctx, 88, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1908; Match(COMPILE);
			State = 1910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 1909; Match(DEBUG);
				}
				break;
			}
			State = 1913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1912;
				_la = TokenStream.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 1918;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1915; compiler_parameters_clause();
					}
					} 
				}
				State = 1920;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			}
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 1921; Match(REUSE);
				State = 1922; Match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replace_type_clauseContext : ParserRuleContext {
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Object_member_specContext[] object_member_spec() {
			return GetRuleContexts<Object_member_specContext>();
		}
		public Object_member_specContext object_member_spec(int i) {
			return GetRuleContext<Object_member_specContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replace_type_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplace_type_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Replace_type_clauseContext replace_type_clause() {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_replace_type_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1925; Match(REPLACE);
			State = 1927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 1926; invoker_rights_clause();
				}
			}

			State = 1929; Match(AS);
			State = 1930; Match(OBJECT);
			State = 1931; Match(LEFT_PAREN);
			State = 1932; object_member_spec();
			State = 1937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1933; Match(COMMA);
				State = 1934; object_member_spec();
				}
				}
				State = 1939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1940; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_method_specContext : ParserRuleContext {
		public Alter_method_elementContext[] alter_method_element() {
			return GetRuleContexts<Alter_method_elementContext>();
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return GetRuleContext<Alter_method_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_method_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_method_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_method_specContext alter_method_spec() {
		Alter_method_specContext _localctx = new Alter_method_specContext(Context, State);
		EnterRule(_localctx, 92, RULE_alter_method_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1942; alter_method_element();
			State = 1947;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1943; Match(COMMA);
				State = 1944; alter_method_element();
				}
				}
				State = 1949;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_method_elementContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return GetRuleContext<Map_order_function_specContext>(0);
		}
		public Subprogram_specContext subprogram_spec() {
			return GetRuleContext<Subprogram_specContext>(0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_method_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_method_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_method_elementContext alter_method_element() {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(Context, State);
		EnterRule(_localctx, 94, RULE_alter_method_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1950;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1953;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAP:
			case ORDER:
				{
				State = 1951; map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				State = 1952; subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_attribute_definitionContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(PlSqlParser.ATTRIBUTE, 0); }
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode MODIFY() { return GetToken(PlSqlParser.MODIFY, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public Attribute_definitionContext[] attribute_definition() {
			return GetRuleContexts<Attribute_definitionContext>();
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return GetRuleContext<Attribute_definitionContext>(i);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_attribute_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_attribute_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_attribute_definitionContext alter_attribute_definition() {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_alter_attribute_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1956; Match(ATTRIBUTE);
			State = 1969;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 1957; attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				State = 1958; Match(LEFT_PAREN);
				State = 1959; attribute_definition();
				State = 1964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1960; Match(COMMA);
					State = 1961; attribute_definition();
					}
					}
					State = 1966;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1967; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_definitionContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_definitionContext attribute_definition() {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_attribute_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1971; attribute_name();
			State = 1973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 1972; type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_collection_clausesContext : ParserRuleContext {
		public ITerminalNode MODIFY() { return GetToken(PlSqlParser.MODIFY, 0); }
		public ITerminalNode LIMIT() { return GetToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ELEMENT() { return GetToken(PlSqlParser.ELEMENT, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_collection_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_collection_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_collection_clausesContext alter_collection_clauses() {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(Context, State);
		EnterRule(_localctx, 100, RULE_alter_collection_clauses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1975; Match(MODIFY);
			State = 1981;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIMIT:
				{
				State = 1976; Match(LIMIT);
				State = 1977; expression();
				}
				break;
			case ELEMENT:
				{
				State = 1978; Match(ELEMENT);
				State = 1979; Match(TYPE);
				State = 1980; type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dependent_handling_clauseContext : ParserRuleContext {
		public ITerminalNode INVALIDATE() { return GetToken(PlSqlParser.INVALIDATE, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode CONVERT() { return GetToken(PlSqlParser.CONVERT, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode SUBSTITUTABLE() { return GetToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public ITerminalNode INCLUDING() { return GetToken(PlSqlParser.INCLUDING, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode DATA() { return GetToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return GetRuleContext<Dependent_exceptions_partContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent_handling_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent_handling_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dependent_handling_clauseContext dependent_handling_clause() {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(Context, State);
		EnterRule(_localctx, 102, RULE_dependent_handling_clause);
		int _la;
		try {
			State = 1999;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INVALIDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1983; Match(INVALIDATE);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1984; Match(CASCADE);
				State = 1994;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONVERT:
					{
					State = 1985; Match(CONVERT);
					State = 1986; Match(TO);
					State = 1987; Match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					State = 1989;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT) {
						{
						State = 1988; Match(NOT);
						}
					}

					State = 1991; Match(INCLUDING);
					State = 1992; Match(TABLE);
					State = 1993; Match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				State = 1997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					State = 1996; dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dependent_exceptions_partContext : ParserRuleContext {
		public ITerminalNode EXCEPTIONS() { return GetToken(PlSqlParser.EXCEPTIONS, 0); }
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dependent_exceptions_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDependent_exceptions_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dependent_exceptions_partContext dependent_exceptions_part() {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(Context, State);
		EnterRule(_localctx, 104, RULE_dependent_exceptions_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE) {
				{
				State = 2001; Match(FORCE);
				}
			}

			State = 2004; Match(EXCEPTIONS);
			State = 2005; Match(INTO);
			State = 2006; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_typeContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return GetRuleContext<Type_definitionContext>(0);
		}
		public Type_bodyContext type_body() {
			return GetRuleContext<Type_bodyContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_typeContext create_type() {
		Create_typeContext _localctx = new Create_typeContext(Context, State);
		EnterRule(_localctx, 106, RULE_create_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2008; Match(CREATE);
			State = 2011;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2009; Match(OR);
				State = 2010; Match(REPLACE);
				}
			}

			State = 2013; Match(TYPE);
			State = 2016;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 2014; type_definition();
				}
				break;
			case 2:
				{
				State = 2015; type_body();
				}
				break;
			}
			State = 2018; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OID() { return GetToken(PlSqlParser.OID, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return GetRuleContext<Object_type_defContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 108, RULE_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020; type_name();
			State = 2023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OID) {
				{
				State = 2021; Match(OID);
				State = 2022; Match(CHAR_STRING);
				}
			}

			State = 2026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				State = 2025; object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_defContext : ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return GetRuleContext<Object_as_partContext>(0);
		}
		public Object_under_partContext object_under_part() {
			return GetRuleContext<Object_under_partContext>(0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return GetRuleContext<Invoker_rights_clauseContext>(0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return GetRuleContext<Sqlj_object_typeContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Object_member_specContext[] object_member_spec() {
			return GetRuleContexts<Object_member_specContext>();
		}
		public Object_member_specContext object_member_spec(int i) {
			return GetRuleContext<Object_member_specContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Modifier_clauseContext[] modifier_clause() {
			return GetRuleContexts<Modifier_clauseContext>();
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return GetRuleContext<Modifier_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_defContext object_type_def() {
		Object_type_defContext _localctx = new Object_type_defContext(Context, State);
		EnterRule(_localctx, 110, RULE_object_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTHID) {
				{
				State = 2028; invoker_rights_clause();
				}
			}

			State = 2033;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case IS:
				{
				State = 2031; object_as_part();
				}
				break;
			case UNDER:
				{
				State = 2032; object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2036;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTERNAL) {
				{
				State = 2035; sqlj_object_type();
				}
			}

			State = 2049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2038; Match(LEFT_PAREN);
				State = 2039; object_member_spec();
				State = 2044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2040; Match(COMMA);
					State = 2041; object_member_spec();
					}
					}
					State = 2046;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2047; Match(RIGHT_PAREN);
				}
			}

			State = 2054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				State = 2051; modifier_clause();
				}
				}
				State = 2056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_as_partContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return GetRuleContext<Varray_type_defContext>(0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return GetRuleContext<Nested_table_type_defContext>(0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_as_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_as_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_as_partContext object_as_part() {
		Object_as_partContext _localctx = new Object_as_partContext(Context, State);
		EnterRule(_localctx, 112, RULE_object_as_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2057;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2061;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT:
				{
				State = 2058; Match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				State = 2059; varray_type_def();
				}
				break;
			case TABLE:
				{
				State = 2060; nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_under_partContext : ParserRuleContext {
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_under_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_under_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_under_partContext object_under_part() {
		Object_under_partContext _localctx = new Object_under_partContext(Context, State);
		EnterRule(_localctx, 114, RULE_object_under_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2063; Match(UNDER);
			State = 2064; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_table_type_defContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_table_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_table_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_table_type_defContext nested_table_type_def() {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(Context, State);
		EnterRule(_localctx, 116, RULE_nested_table_type_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2066; Match(TABLE);
			State = 2067; Match(OF);
			State = 2068; type_spec();
			State = 2071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 2069; Match(NOT);
				State = 2070; Match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlj_object_typeContext : ParserRuleContext {
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LANGUAGE() { return GetToken(PlSqlParser.LANGUAGE, 0); }
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode SQLDATA() { return GetToken(PlSqlParser.SQLDATA, 0); }
		public ITerminalNode CUSTOMDATUM() { return GetToken(PlSqlParser.CUSTOMDATUM, 0); }
		public ITerminalNode ORADATA() { return GetToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlj_object_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlj_object_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlj_object_typeContext sqlj_object_type() {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(Context, State);
		EnterRule(_localctx, 118, RULE_sqlj_object_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2073; Match(EXTERNAL);
			State = 2074; Match(NAME);
			State = 2075; expression();
			State = 2076; Match(LANGUAGE);
			State = 2077; Match(JAVA);
			State = 2078; Match(USING);
			State = 2079;
			_la = TokenStream.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_bodyContext : ParserRuleContext {
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Type_body_elementsContext[] type_body_elements() {
			return GetRuleContexts<Type_body_elementsContext>();
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return GetRuleContext<Type_body_elementsContext>(i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_bodyContext type_body() {
		Type_bodyContext _localctx = new Type_bodyContext(Context, State);
		EnterRule(_localctx, 120, RULE_type_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2081; Match(BODY);
			State = 2082; type_name();
			State = 2083;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2084; type_body_elements();
				}
				}
				State = 2087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			State = 2089; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_body_elementsContext : ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return GetRuleContext<Map_order_func_declarationContext>(0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return GetRuleContext<Subprog_decl_in_typeContext>(0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_body_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_body_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_body_elementsContext type_body_elements() {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(Context, State);
		EnterRule(_localctx, 122, RULE_type_body_elements);
		try {
			State = 2093;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAP:
			case ORDER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2091; map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2092; subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_order_func_declarationContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return GetRuleContext<Func_decl_in_typeContext>(0);
		}
		public ITerminalNode MAP() { return GetToken(PlSqlParser.MAP, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_order_func_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_order_func_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_order_func_declarationContext map_order_func_declaration() {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_map_order_func_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2095;
			_la = TokenStream.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2096; Match(MEMBER);
			State = 2097; func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprog_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return GetRuleContext<Proc_decl_in_typeContext>(0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return GetRuleContext<Func_decl_in_typeContext>(0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return GetRuleContext<Constructor_declarationContext>(0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprog_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprog_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprog_decl_in_typeContext subprog_decl_in_type() {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 126, RULE_subprog_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2099;
			_la = TokenStream.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				{
				State = 2100; proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				State = 2101; func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				State = 2102; constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proc_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proc_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProc_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proc_decl_in_typeContext proc_decl_in_type() {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 128, RULE_proc_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2105; Match(PROCEDURE);
			State = 2106; procedure_name();
			State = 2107; Match(LEFT_PAREN);
			State = 2108; type_elements_parameter();
			State = 2113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2109; Match(COMMA);
				State = 2110; type_elements_parameter();
				}
				}
				State = 2115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2116; Match(RIGHT_PAREN);
			State = 2117;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				{
				State = 2118; call_spec();
				}
				break;
			case 2:
				{
				State = 2120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 2119; Match(DECLARE);
					}
				}

				State = 2123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 2122; seq_of_declare_specs();
					}
				}

				State = 2125; body();
				State = 2126; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_decl_in_typeContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_decl_in_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_decl_in_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_decl_in_typeContext func_decl_in_type() {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(Context, State);
		EnterRule(_localctx, 130, RULE_func_decl_in_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2130; Match(FUNCTION);
			State = 2131; function_name();
			State = 2143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2132; Match(LEFT_PAREN);
				State = 2133; type_elements_parameter();
				State = 2138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2134; Match(COMMA);
					State = 2135; type_elements_parameter();
					}
					}
					State = 2140;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2141; Match(RIGHT_PAREN);
				}
			}

			State = 2145; Match(RETURN);
			State = 2146; type_spec();
			State = 2147;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				{
				State = 2148; call_spec();
				}
				break;
			case 2:
				{
				State = 2150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 2149; Match(DECLARE);
					}
				}

				State = 2153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 2152; seq_of_declare_specs();
					}
				}

				State = 2155; body();
				State = 2156; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(PlSqlParser.CONSTRUCTOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode[] SELF() { return GetTokens(PlSqlParser.SELF); }
		public ITerminalNode SELF(int i) {
			return GetToken(PlSqlParser.SELF, i);
		}
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL) {
				{
				State = 2160; Match(FINAL);
				}
			}

			State = 2164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSTANTIABLE) {
				{
				State = 2163; Match(INSTANTIABLE);
				}
			}

			State = 2166; Match(CONSTRUCTOR);
			State = 2167; Match(FUNCTION);
			State = 2168; type_spec();
			State = 2186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2169; Match(LEFT_PAREN);
				{
				State = 2170; Match(SELF);
				State = 2171; Match(IN);
				State = 2172; Match(OUT);
				State = 2173; type_spec();
				State = 2174; Match(COMMA);
				}
				State = 2176; type_elements_parameter();
				State = 2181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2177; Match(COMMA);
					State = 2178; type_elements_parameter();
					}
					}
					State = 2183;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2184; Match(RIGHT_PAREN);
				}
			}

			State = 2188; Match(RETURN);
			State = 2189; Match(SELF);
			State = 2190; Match(AS);
			State = 2191; Match(RESULT);
			State = 2192;
			_la = TokenStream.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				{
				State = 2193; call_spec();
				}
				break;
			case 2:
				{
				State = 2195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 2194; Match(DECLARE);
					}
				}

				State = 2198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 2197; seq_of_declare_specs();
					}
				}

				State = 2200; body();
				State = 2201; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Modifier_clauseContext : ParserRuleContext {
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode OVERRIDING() { return GetToken(PlSqlParser.OVERRIDING, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Modifier_clauseContext modifier_clause() {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(Context, State);
		EnterRule(_localctx, 134, RULE_modifier_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 2205; Match(NOT);
				}
			}

			State = 2208;
			_la = TokenStream.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_member_specContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return GetRuleContext<Sqlj_object_type_attrContext>(0);
		}
		public Element_specContext element_spec() {
			return GetRuleContext<Element_specContext>(0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_member_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_member_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_member_specContext object_member_spec() {
		Object_member_specContext _localctx = new Object_member_specContext(Context, State);
		EnterRule(_localctx, 136, RULE_object_member_spec);
		int _la;
		try {
			State = 2216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2210; identifier();
				State = 2211; type_spec();
				State = 2213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTERNAL) {
					{
					State = 2212; sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2215; element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlj_object_type_attrContext : ParserRuleContext {
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlj_object_type_attr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlj_object_type_attr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlj_object_type_attrContext sqlj_object_type_attr() {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(Context, State);
		EnterRule(_localctx, 138, RULE_sqlj_object_type_attr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2218; Match(EXTERNAL);
			State = 2219; Match(NAME);
			State = 2220; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_specContext : ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return GetRuleContext<Modifier_clauseContext>(0);
		}
		public Element_spec_optionsContext[] element_spec_options() {
			return GetRuleContexts<Element_spec_optionsContext>();
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return GetRuleContext<Element_spec_optionsContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public Pragma_clauseContext pragma_clause() {
			return GetRuleContext<Pragma_clauseContext>(0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_specContext element_spec() {
		Element_specContext _localctx = new Element_specContext(Context, State);
		EnterRule(_localctx, 140, RULE_element_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 2222; modifier_clause();
				}
				break;
			}
			State = 2226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2225; element_spec_options();
				}
				}
				State = 2228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || _la==MAP || _la==MEMBER || _la==ORDER || _la==STATIC );
			State = 2232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
			case 1:
				{
				State = 2230; Match(COMMA);
				State = 2231; pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_spec_optionsContext : ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return GetRuleContext<Subprogram_specContext>(0);
		}
		public Constructor_specContext constructor_spec() {
			return GetRuleContext<Constructor_specContext>(0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return GetRuleContext<Map_order_function_specContext>(0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_spec_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_spec_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_spec_optionsContext element_spec_options() {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(Context, State);
		EnterRule(_localctx, 142, RULE_element_spec_options);
		try {
			State = 2237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEMBER:
			case STATIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2234; subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2235; constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2236; map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subprogram_specContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode STATIC() { return GetToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return GetRuleContext<Type_procedure_specContext>(0);
		}
		public Type_function_specContext type_function_spec() {
			return GetRuleContext<Type_function_specContext>(0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subprogram_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubprogram_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subprogram_specContext subprogram_spec() {
		Subprogram_specContext _localctx = new Subprogram_specContext(Context, State);
		EnterRule(_localctx, 144, RULE_subprogram_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2239;
			_la = TokenStream.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2242;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE:
				{
				State = 2240; type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				State = 2241; type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_procedure_specContext : ParserRuleContext {
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_procedure_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_procedure_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_procedure_specContext type_procedure_spec() {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(Context, State);
		EnterRule(_localctx, 146, RULE_type_procedure_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2244; Match(PROCEDURE);
			State = 2245; procedure_name();
			State = 2246; Match(LEFT_PAREN);
			State = 2247; type_elements_parameter();
			State = 2252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2248; Match(COMMA);
				State = 2249; type_elements_parameter();
				}
				}
				State = 2254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2255; Match(RIGHT_PAREN);
			State = 2258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IS) {
				{
				State = 2256;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2257; call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_function_specContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(PlSqlParser.SELF, 0); }
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode VARIABLE() { return GetToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_function_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_function_specContext type_function_spec() {
		Type_function_specContext _localctx = new Type_function_specContext(Context, State);
		EnterRule(_localctx, 148, RULE_type_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2260; Match(FUNCTION);
			State = 2261; function_name();
			State = 2273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2262; Match(LEFT_PAREN);
				State = 2263; type_elements_parameter();
				State = 2268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2264; Match(COMMA);
					State = 2265; type_elements_parameter();
					}
					}
					State = 2270;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2271; Match(RIGHT_PAREN);
				}
			}

			State = 2275; Match(RETURN);
			State = 2280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 2276; type_spec();
				}
				break;
			case 2:
				{
				State = 2277; Match(SELF);
				State = 2278; Match(AS);
				State = 2279; Match(RESULT);
				}
				break;
			}
			State = 2290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
			case IS:
				{
				State = 2282;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2283; call_spec();
				}
				break;
			case EXTERNAL:
				{
				State = 2284; Match(EXTERNAL);
				State = 2286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARIABLE) {
					{
					State = 2285; Match(VARIABLE);
					}
				}

				State = 2288; Match(NAME);
				State = 2289; expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_specContext : ParserRuleContext {
		public ITerminalNode CONSTRUCTOR() { return GetToken(PlSqlParser.CONSTRUCTOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode[] SELF() { return GetTokens(PlSqlParser.SELF); }
		public ITerminalNode SELF(int i) {
			return GetToken(PlSqlParser.SELF, i);
		}
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Type_elements_parameterContext[] type_elements_parameter() {
			return GetRuleContexts<Type_elements_parameterContext>();
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return GetRuleContext<Type_elements_parameterContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return GetRuleContext<Call_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Constructor_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_specContext constructor_spec() {
		Constructor_specContext _localctx = new Constructor_specContext(Context, State);
		EnterRule(_localctx, 150, RULE_constructor_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FINAL) {
				{
				State = 2292; Match(FINAL);
				}
			}

			State = 2296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INSTANTIABLE) {
				{
				State = 2295; Match(INSTANTIABLE);
				}
			}

			State = 2298; Match(CONSTRUCTOR);
			State = 2299; Match(FUNCTION);
			State = 2300; type_spec();
			State = 2318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 2301; Match(LEFT_PAREN);
				{
				State = 2302; Match(SELF);
				State = 2303; Match(IN);
				State = 2304; Match(OUT);
				State = 2305; type_spec();
				State = 2306; Match(COMMA);
				}
				State = 2308; type_elements_parameter();
				State = 2313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2309; Match(COMMA);
					State = 2310; type_elements_parameter();
					}
					}
					State = 2315;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2316; Match(RIGHT_PAREN);
				}
			}

			State = 2320; Match(RETURN);
			State = 2321; Match(SELF);
			State = 2322; Match(AS);
			State = 2323; Match(RESULT);
			State = 2326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS || _la==IS) {
				{
				State = 2324;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2325; call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_order_function_specContext : ParserRuleContext {
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return GetRuleContext<Type_function_specContext>(0);
		}
		public ITerminalNode MAP() { return GetToken(PlSqlParser.MAP, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_order_function_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_order_function_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_order_function_specContext map_order_function_spec() {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(Context, State);
		EnterRule(_localctx, 152, RULE_map_order_function_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2328;
			_la = TokenStream.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2329; Match(MEMBER);
			State = 2330; type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_clauseContext : ParserRuleContext {
		public ITerminalNode PRAGMA() { return GetToken(PlSqlParser.PRAGMA, 0); }
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Pragma_elementsContext[] pragma_elements() {
			return GetRuleContexts<Pragma_elementsContext>();
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return GetRuleContext<Pragma_elementsContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_clauseContext pragma_clause() {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(Context, State);
		EnterRule(_localctx, 154, RULE_pragma_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2332; Match(PRAGMA);
			State = 2333; Match(RESTRICT_REFERENCES);
			State = 2334; Match(LEFT_PAREN);
			State = 2335; pragma_elements();
			State = 2340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2336; Match(COMMA);
				State = 2337; pragma_elements();
				}
				}
				State = 2342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2343; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_elementsContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_elementsContext pragma_elements() {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(Context, State);
		EnterRule(_localctx, 156, RULE_pragma_elements);
		try {
			State = 2347;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2345; identifier();
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2346; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_elements_parameterContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_elements_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_elements_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_elements_parameterContext type_elements_parameter() {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(Context, State);
		EnterRule(_localctx, 158, RULE_type_elements_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2349; parameter_name();
			State = 2350; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_sequenceContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_sequenceContext drop_sequence() {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(Context, State);
		EnterRule(_localctx, 160, RULE_drop_sequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2352; Match(DROP);
			State = 2353; Match(SEQUENCE);
			State = 2354; sequence_name();
			State = 2355; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_sequenceContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Sequence_specContext[] sequence_spec() {
			return GetRuleContexts<Sequence_specContext>();
		}
		public Sequence_specContext sequence_spec(int i) {
			return GetRuleContext<Sequence_specContext>(i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_sequenceContext alter_sequence() {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(Context, State);
		EnterRule(_localctx, 162, RULE_alter_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2357; Match(ALTER);
			State = 2358; Match(SEQUENCE);
			State = 2359; sequence_name();
			State = 2361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2360; sequence_spec();
				}
				}
				State = 2363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (GLOBAL - 226)) | (1L << (INCREMENT - 226)) | (1L << (KEEP - 226)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (MAXVALUE - 332)) | (1L << (MINVALUE - 332)) | (1L << (NOCACHE - 332)) | (1L << (NOCYCLE - 332)) | (1L << (NOKEEP - 332)) | (1L << (NOMAXVALUE - 332)) | (1L << (NOMINVALUE - 332)) | (1L << (NOORDER - 332)))) != 0) || _la==ORDER || _la==SESSION || _la==START );
			State = 2365; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_sequenceContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return GetRuleContext<Sequence_nameContext>(0);
		}
		public Sequence_specContext[] sequence_spec() {
			return GetRuleContexts<Sequence_specContext>();
		}
		public Sequence_specContext sequence_spec(int i) {
			return GetRuleContext<Sequence_specContext>(i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_sequence; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_sequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_sequenceContext create_sequence() {
		Create_sequenceContext _localctx = new Create_sequenceContext(Context, State);
		EnterRule(_localctx, 164, RULE_create_sequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2367; Match(CREATE);
			State = 2368; Match(SEQUENCE);
			State = 2369; sequence_name();
			State = 2373;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (GLOBAL - 226)) | (1L << (INCREMENT - 226)) | (1L << (KEEP - 226)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (MAXVALUE - 332)) | (1L << (MINVALUE - 332)) | (1L << (NOCACHE - 332)) | (1L << (NOCYCLE - 332)) | (1L << (NOKEEP - 332)) | (1L << (NOMAXVALUE - 332)) | (1L << (NOMINVALUE - 332)) | (1L << (NOORDER - 332)))) != 0) || _la==ORDER || _la==SESSION || _la==START) {
				{
				{
				State = 2370; sequence_spec();
				}
				}
				State = 2375;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2376; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_specContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode INCREMENT() { return GetToken(PlSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode START() { return GetToken(PlSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode NOMAXVALUE() { return GetToken(PlSqlParser.NOMAXVALUE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(PlSqlParser.MINVALUE, 0); }
		public ITerminalNode NOMINVALUE() { return GetToken(PlSqlParser.NOMINVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(PlSqlParser.CYCLE, 0); }
		public ITerminalNode NOCYCLE() { return GetToken(PlSqlParser.NOCYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(PlSqlParser.CACHE, 0); }
		public ITerminalNode NOCACHE() { return GetToken(PlSqlParser.NOCACHE, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode NOORDER() { return GetToken(PlSqlParser.NOORDER, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode NOKEEP() { return GetToken(PlSqlParser.NOKEEP, 0); }
		public ITerminalNode SESSION() { return GetToken(PlSqlParser.SESSION, 0); }
		public ITerminalNode GLOBAL() { return GetToken(PlSqlParser.GLOBAL, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_specContext sequence_spec() {
		Sequence_specContext _localctx = new Sequence_specContext(Context, State);
		EnterRule(_localctx, 166, RULE_sequence_spec);
		int _la;
		try {
			State = 2404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCREMENT:
			case START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2382;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INCREMENT:
					{
					State = 2378; Match(INCREMENT);
					State = 2379; Match(BY);
					}
					break;
				case START:
					{
					State = 2380; Match(START);
					State = 2381; Match(WITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2384; integer();
				}
				break;
			case MAXVALUE:
			case NOMAXVALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2388;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAXVALUE:
					{
					State = 2385; Match(MAXVALUE);
					State = 2386; integer();
					}
					break;
				case NOMAXVALUE:
					{
					State = 2387; Match(NOMAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MINVALUE:
			case NOMINVALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2393;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINVALUE:
					{
					State = 2390; Match(MINVALUE);
					State = 2391; integer();
					}
					break;
				case NOMINVALUE:
					{
					State = 2392; Match(NOMINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CYCLE:
			case NOCYCLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2395;
				_la = TokenStream.LA(1);
				if ( !(_la==CYCLE || _la==NOCYCLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CACHE:
			case NOCACHE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2399;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CACHE:
					{
					State = 2396; Match(CACHE);
					State = 2397; integer();
					}
					break;
				case NOCACHE:
					{
					State = 2398; Match(NOCACHE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NOORDER:
			case ORDER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2401;
				_la = TokenStream.LA(1);
				if ( !(_la==NOORDER || _la==ORDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case KEEP:
			case NOKEEP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2402;
				_la = TokenStream.LA(1);
				if ( !(_la==KEEP || _la==NOKEEP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case GLOBAL:
			case SESSION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2403;
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_indexContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public ITerminalNode COMPUTE() { return GetToken(PlSqlParser.COMPUTE, 0); }
		public ITerminalNode STATISTICS() { return GetToken(PlSqlParser.STATISTICS, 0); }
		public Create_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_indexContext create_index() {
		Create_indexContext _localctx = new Create_indexContext(Context, State);
		EnterRule(_localctx, 168, RULE_create_index);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2406; Match(CREATE);
			State = 2408;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE) {
				{
				State = 2407; Match(UNIQUE);
				}
			}

			State = 2410; Match(INDEX);
			State = 2411; index_name();
			State = 2412; Match(ON);
			State = 2413; tableview_name();
			State = 2414; paren_column_list();
			State = 2417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 2415; Match(TABLESPACE);
				State = 2416; Match(REGULAR_ID);
				}
			}

			State = 2421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPUTE) {
				{
				State = 2419; Match(COMPUTE);
				State = 2420; Match(STATISTICS);
				}
			}

			State = 2423; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_indexContext : ParserRuleContext {
		public Index_nameContext old_index_name;
		public Index_nameContext new_index_name;
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public Index_nameContext[] index_name() {
			return GetRuleContexts<Index_nameContext>();
		}
		public Index_nameContext index_name(int i) {
			return GetRuleContext<Index_nameContext>(i);
		}
		public Alter_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_indexContext alter_index() {
		Alter_indexContext _localctx = new Alter_indexContext(Context, State);
		EnterRule(_localctx, 170, RULE_alter_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425; Match(ALTER);
			State = 2426; Match(INDEX);
			State = 2427; _localctx.old_index_name = index_name();
			State = 2428; Match(RENAME);
			State = 2429; Match(TO);
			State = 2430; _localctx.new_index_name = index_name();
			State = 2431; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_userContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public User_object_nameContext user_object_name() {
			return GetRuleContext<User_object_nameContext>(0);
		}
		public Identified_byContext[] identified_by() {
			return GetRuleContexts<Identified_byContext>();
		}
		public Identified_byContext identified_by(int i) {
			return GetRuleContext<Identified_byContext>(i);
		}
		public Identified_other_clauseContext[] identified_other_clause() {
			return GetRuleContexts<Identified_other_clauseContext>();
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return GetRuleContext<Identified_other_clauseContext>(i);
		}
		public User_tablespace_clauseContext[] user_tablespace_clause() {
			return GetRuleContexts<User_tablespace_clauseContext>();
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return GetRuleContext<User_tablespace_clauseContext>(i);
		}
		public Quota_clauseContext[] quota_clause() {
			return GetRuleContexts<Quota_clauseContext>();
		}
		public Quota_clauseContext quota_clause(int i) {
			return GetRuleContext<Quota_clauseContext>(i);
		}
		public Profile_clauseContext[] profile_clause() {
			return GetRuleContexts<Profile_clauseContext>();
		}
		public Profile_clauseContext profile_clause(int i) {
			return GetRuleContext<Profile_clauseContext>(i);
		}
		public Password_expire_clauseContext[] password_expire_clause() {
			return GetRuleContexts<Password_expire_clauseContext>();
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return GetRuleContext<Password_expire_clauseContext>(i);
		}
		public User_lock_clauseContext[] user_lock_clause() {
			return GetRuleContexts<User_lock_clauseContext>();
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return GetRuleContext<User_lock_clauseContext>(i);
		}
		public User_editions_clauseContext[] user_editions_clause() {
			return GetRuleContexts<User_editions_clauseContext>();
		}
		public User_editions_clauseContext user_editions_clause(int i) {
			return GetRuleContext<User_editions_clauseContext>(i);
		}
		public Container_clauseContext[] container_clause() {
			return GetRuleContexts<Container_clauseContext>();
		}
		public Container_clauseContext container_clause(int i) {
			return GetRuleContext<Container_clauseContext>(i);
		}
		public Create_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_userContext create_user() {
		Create_userContext _localctx = new Create_userContext(Context, State);
		EnterRule(_localctx, 172, RULE_create_user);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2433; Match(CREATE);
			State = 2434; Match(USER);
			State = 2435; user_object_name();
			State = 2445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2445;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
				case 1:
					{
					State = 2436; identified_by();
					}
					break;
				case 2:
					{
					State = 2437; identified_other_clause();
					}
					break;
				case 3:
					{
					State = 2438; user_tablespace_clause();
					}
					break;
				case 4:
					{
					State = 2439; quota_clause();
					}
					break;
				case 5:
					{
					State = 2440; profile_clause();
					}
					break;
				case 6:
					{
					State = 2441; password_expire_clause();
					}
					break;
				case 7:
					{
					State = 2442; user_lock_clause();
					}
					break;
				case 8:
					{
					State = 2443; user_editions_clause();
					}
					break;
				case 9:
					{
					State = 2444; container_clause();
					}
					break;
				}
				}
				State = 2447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ACCOUNT || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (PASSWORD - 432)) | (1L << (PROFILE - 432)) | (1L << (QUOTA - 432)))) != 0) || _la==TEMPORARY );
			State = 2449; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_userContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public User_object_nameContext[] user_object_name() {
			return GetRuleContexts<User_object_nameContext>();
		}
		public User_object_nameContext user_object_name(int i) {
			return GetRuleContext<User_object_nameContext>(i);
		}
		public Alter_identified_byContext[] alter_identified_by() {
			return GetRuleContexts<Alter_identified_byContext>();
		}
		public Alter_identified_byContext alter_identified_by(int i) {
			return GetRuleContext<Alter_identified_byContext>(i);
		}
		public Identified_other_clauseContext[] identified_other_clause() {
			return GetRuleContexts<Identified_other_clauseContext>();
		}
		public Identified_other_clauseContext identified_other_clause(int i) {
			return GetRuleContext<Identified_other_clauseContext>(i);
		}
		public User_tablespace_clauseContext[] user_tablespace_clause() {
			return GetRuleContexts<User_tablespace_clauseContext>();
		}
		public User_tablespace_clauseContext user_tablespace_clause(int i) {
			return GetRuleContext<User_tablespace_clauseContext>(i);
		}
		public Quota_clauseContext[] quota_clause() {
			return GetRuleContexts<Quota_clauseContext>();
		}
		public Quota_clauseContext quota_clause(int i) {
			return GetRuleContext<Quota_clauseContext>(i);
		}
		public Profile_clauseContext[] profile_clause() {
			return GetRuleContexts<Profile_clauseContext>();
		}
		public Profile_clauseContext profile_clause(int i) {
			return GetRuleContext<Profile_clauseContext>(i);
		}
		public User_default_role_clauseContext[] user_default_role_clause() {
			return GetRuleContexts<User_default_role_clauseContext>();
		}
		public User_default_role_clauseContext user_default_role_clause(int i) {
			return GetRuleContext<User_default_role_clauseContext>(i);
		}
		public Password_expire_clauseContext[] password_expire_clause() {
			return GetRuleContexts<Password_expire_clauseContext>();
		}
		public Password_expire_clauseContext password_expire_clause(int i) {
			return GetRuleContext<Password_expire_clauseContext>(i);
		}
		public User_lock_clauseContext[] user_lock_clause() {
			return GetRuleContexts<User_lock_clauseContext>();
		}
		public User_lock_clauseContext user_lock_clause(int i) {
			return GetRuleContext<User_lock_clauseContext>(i);
		}
		public Alter_user_editions_clauseContext[] alter_user_editions_clause() {
			return GetRuleContexts<Alter_user_editions_clauseContext>();
		}
		public Alter_user_editions_clauseContext alter_user_editions_clause(int i) {
			return GetRuleContext<Alter_user_editions_clauseContext>(i);
		}
		public Container_clauseContext[] container_clause() {
			return GetRuleContexts<Container_clauseContext>();
		}
		public Container_clauseContext container_clause(int i) {
			return GetRuleContext<Container_clauseContext>(i);
		}
		public Container_data_clauseContext[] container_data_clause() {
			return GetRuleContexts<Container_data_clauseContext>();
		}
		public Container_data_clauseContext container_data_clause(int i) {
			return GetRuleContext<Container_data_clauseContext>(i);
		}
		public Proxy_clauseContext proxy_clause() {
			return GetRuleContext<Proxy_clauseContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_userContext alter_user() {
		Alter_userContext _localctx = new Alter_userContext(Context, State);
		EnterRule(_localctx, 174, RULE_alter_user);
		int _la;
		try {
			int _alt;
			State = 2482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2451; Match(ALTER);
				State = 2452; Match(USER);
				State = 2453; user_object_name();
				State = 2465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 2465;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
					case 1:
						{
						State = 2454; alter_identified_by();
						}
						break;
					case 2:
						{
						State = 2455; identified_other_clause();
						}
						break;
					case 3:
						{
						State = 2456; user_tablespace_clause();
						}
						break;
					case 4:
						{
						State = 2457; quota_clause();
						}
						break;
					case 5:
						{
						State = 2458; profile_clause();
						}
						break;
					case 6:
						{
						State = 2459; user_default_role_clause();
						}
						break;
					case 7:
						{
						State = 2460; password_expire_clause();
						}
						break;
					case 8:
						{
						State = 2461; user_lock_clause();
						}
						break;
					case 9:
						{
						State = 2462; alter_user_editions_clause();
						}
						break;
					case 10:
						{
						State = 2463; container_clause();
						}
						break;
					case 11:
						{
						State = 2464; container_data_clause();
						}
						break;
					}
					}
					State = 2467;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ACCOUNT || _la==ADD || _la==CONTAINER || _la==DEFAULT || _la==ENABLE || _la==IDENTIFIED || ((((_la - 432)) & ~0x3f) == 0 && ((1L << (_la - 432)) & ((1L << (PASSWORD - 432)) | (1L << (PROFILE - 432)) | (1L << (QUOTA - 432)) | (1L << (REMOVE - 432)))) != 0) || _la==SET || _la==TEMPORARY );
				State = 2469; Match(SEMICOLON);
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2475;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2472;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2471; Match(COMMA);
							}
						}

						State = 2474; user_object_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2477;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,188,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 2479; proxy_clause();
				State = 2480; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_identified_byContext : ParserRuleContext {
		public Identified_byContext identified_by() {
			return GetRuleContext<Identified_byContext>(0);
		}
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Alter_identified_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_identified_by; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_identified_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_identified_byContext alter_identified_by() {
		Alter_identified_byContext _localctx = new Alter_identified_byContext(Context, State);
		EnterRule(_localctx, 176, RULE_alter_identified_by);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2484; identified_by();
			State = 2487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REPLACE) {
				{
				State = 2485; Match(REPLACE);
				State = 2486; id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identified_byContext : ParserRuleContext {
		public ITerminalNode IDENTIFIED() { return GetToken(PlSqlParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Identified_byContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identified_by; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentified_by(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identified_byContext identified_by() {
		Identified_byContext _localctx = new Identified_byContext(Context, State);
		EnterRule(_localctx, 178, RULE_identified_by);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2489; Match(IDENTIFIED);
			State = 2490; Match(BY);
			State = 2491; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identified_other_clauseContext : ParserRuleContext {
		public ITerminalNode IDENTIFIED() { return GetToken(PlSqlParser.IDENTIFIED, 0); }
		public ITerminalNode EXTERNALLY() { return GetToken(PlSqlParser.EXTERNALLY, 0); }
		public ITerminalNode GLOBALLY() { return GetToken(PlSqlParser.GLOBALLY, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Identified_other_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identified_other_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentified_other_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identified_other_clauseContext identified_other_clause() {
		Identified_other_clauseContext _localctx = new Identified_other_clauseContext(Context, State);
		EnterRule(_localctx, 180, RULE_identified_other_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2493; Match(IDENTIFIED);
			State = 2494;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTERNALLY || _la==GLOBALLY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 2495; Match(AS);
				State = 2496; @string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public User_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_tablespace_clauseContext user_tablespace_clause() {
		User_tablespace_clauseContext _localctx = new User_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 182, RULE_user_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==TEMPORARY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2500; Match(TABLESPACE);
			State = 2501; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quota_clauseContext : ParserRuleContext {
		public ITerminalNode QUOTA() { return GetToken(PlSqlParser.QUOTA, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public Quota_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quota_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuota_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quota_clauseContext quota_clause() {
		Quota_clauseContext _localctx = new Quota_clauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_quota_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2503; Match(QUOTA);
			State = 2506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSIGNED_INTEGER:
				{
				State = 2504; size_clause();
				}
				break;
			case UNLIMITED:
				{
				State = 2505; Match(UNLIMITED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2508; Match(ON);
			State = 2509; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Profile_clauseContext : ParserRuleContext {
		public ITerminalNode PROFILE() { return GetToken(PlSqlParser.PROFILE, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Profile_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profile_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProfile_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Profile_clauseContext profile_clause() {
		Profile_clauseContext _localctx = new Profile_clauseContext(Context, State);
		EnterRule(_localctx, 186, RULE_profile_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2511; Match(PROFILE);
			State = 2512; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_clauseContext : ParserRuleContext {
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode[] EXCEPT() { return GetTokens(PlSqlParser.EXCEPT); }
		public ITerminalNode EXCEPT(int i) {
			return GetToken(PlSqlParser.EXCEPT, i);
		}
		public Role_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Role_clauseContext role_clause() {
		Role_clauseContext _localctx = new Role_clauseContext(Context, State);
		EnterRule(_localctx, 188, RULE_role_clause);
		int _la;
		try {
			int _alt;
			State = 2537;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2518;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2515;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2514; Match(COMMA);
							}
						}

						State = 2517; role_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2520;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,194,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2522; Match(ALL);
				State = 2534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXCEPT) {
					{
					{
					State = 2523; Match(EXCEPT);
					State = 2528;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 2525;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 2524; Match(COMMA);
								}
							}

							State = 2527; role_name();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 2530;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,196,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					State = 2536;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_default_role_clauseContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode ROLE() { return GetToken(PlSqlParser.ROLE, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public Role_clauseContext role_clause() {
			return GetRuleContext<Role_clauseContext>(0);
		}
		public User_default_role_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_default_role_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_default_role_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_default_role_clauseContext user_default_role_clause() {
		User_default_role_clauseContext _localctx = new User_default_role_clauseContext(Context, State);
		EnterRule(_localctx, 190, RULE_user_default_role_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539; Match(DEFAULT);
			State = 2540; Match(ROLE);
			State = 2543;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
			case 1:
				{
				State = 2541; Match(NONE);
				}
				break;
			case 2:
				{
				State = 2542; role_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Password_expire_clauseContext : ParserRuleContext {
		public ITerminalNode PASSWORD() { return GetToken(PlSqlParser.PASSWORD, 0); }
		public ITerminalNode EXPIRE() { return GetToken(PlSqlParser.EXPIRE, 0); }
		public Password_expire_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_password_expire_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPassword_expire_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Password_expire_clauseContext password_expire_clause() {
		Password_expire_clauseContext _localctx = new Password_expire_clauseContext(Context, State);
		EnterRule(_localctx, 192, RULE_password_expire_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2545; Match(PASSWORD);
			State = 2546; Match(EXPIRE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_lock_clauseContext : ParserRuleContext {
		public ITerminalNode ACCOUNT() { return GetToken(PlSqlParser.ACCOUNT, 0); }
		public ITerminalNode LOCK() { return GetToken(PlSqlParser.LOCK, 0); }
		public ITerminalNode UNLOCK() { return GetToken(PlSqlParser.UNLOCK, 0); }
		public User_lock_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_lock_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_lock_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_lock_clauseContext user_lock_clause() {
		User_lock_clauseContext _localctx = new User_lock_clauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_user_lock_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2548; Match(ACCOUNT);
			State = 2549;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_editions_clauseContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode EDITIONS() { return GetToken(PlSqlParser.EDITIONS, 0); }
		public User_editions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_editions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_editions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_editions_clauseContext user_editions_clause() {
		User_editions_clauseContext _localctx = new User_editions_clauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_user_editions_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551; Match(ENABLE);
			State = 2552; Match(EDITIONS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_user_editions_clauseContext : ParserRuleContext {
		public User_editions_clauseContext user_editions_clause() {
			return GetRuleContext<User_editions_clauseContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Regular_idContext[] regular_id() {
			return GetRuleContexts<Regular_idContext>();
		}
		public Regular_idContext regular_id(int i) {
			return GetRuleContext<Regular_idContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Alter_user_editions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_user_editions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_user_editions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_user_editions_clauseContext alter_user_editions_clause() {
		Alter_user_editions_clauseContext _localctx = new Alter_user_editions_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_alter_user_editions_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2554; user_editions_clause();
			State = 2564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 2555; Match(FOR);
				State = 2560;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 2557;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2556; Match(COMMA);
							}
						}

						State = 2559; regular_id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2562;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,201,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 2567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE) {
				{
				State = 2566; Match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Proxy_clauseContext : ParserRuleContext {
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public ITerminalNode THROUGH() { return GetToken(PlSqlParser.THROUGH, 0); }
		public ITerminalNode ENTERPRISE() { return GetToken(PlSqlParser.ENTERPRISE, 0); }
		public ITerminalNode USERS() { return GetToken(PlSqlParser.USERS, 0); }
		public User_object_nameContext user_object_name() {
			return GetRuleContext<User_object_nameContext>(0);
		}
		public ITerminalNode GRANT() { return GetToken(PlSqlParser.GRANT, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode AUTHENTICATION() { return GetToken(PlSqlParser.AUTHENTICATION, 0); }
		public ITerminalNode REQUIRED() { return GetToken(PlSqlParser.REQUIRED, 0); }
		public ITerminalNode AUTHENTICATED() { return GetToken(PlSqlParser.AUTHENTICATED, 0); }
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode ROLES() { return GetToken(PlSqlParser.ROLES, 0); }
		public ITerminalNode ROLE() { return GetToken(PlSqlParser.ROLE, 0); }
		public Role_clauseContext role_clause() {
			return GetRuleContext<Role_clauseContext>(0);
		}
		public ITerminalNode PASSWORD() { return GetToken(PlSqlParser.PASSWORD, 0); }
		public ITerminalNode CERTIFICATE() { return GetToken(PlSqlParser.CERTIFICATE, 0); }
		public ITerminalNode DISTINGUISHED() { return GetToken(PlSqlParser.DISTINGUISHED, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public Proxy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_proxy_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProxy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Proxy_clauseContext proxy_clause() {
		Proxy_clauseContext _localctx = new Proxy_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_proxy_clause);
		int _la;
		try {
			State = 2608;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REVOKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2569; Match(REVOKE);
				State = 2570; Match(CONNECT);
				State = 2571; Match(THROUGH);
				State = 2575;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTERPRISE:
					{
					State = 2572; Match(ENTERPRISE);
					State = 2573; Match(USERS);
					}
					break;
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 2574; user_object_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case GRANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2577; Match(GRANT);
				State = 2578; Match(CONNECT);
				State = 2579; Match(THROUGH);
				State = 2606;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENTERPRISE:
					{
					State = 2580; Match(ENTERPRISE);
					State = 2581; Match(USERS);
					}
					break;
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 2582; user_object_name();
					State = 2590;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 2583; Match(WITH);
						State = 2588;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NO:
							{
							State = 2584; Match(NO);
							State = 2585; Match(ROLES);
							}
							break;
						case ROLE:
							{
							State = 2586; Match(ROLE);
							State = 2587; role_clause();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					State = 2594;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTHENTICATION) {
						{
						State = 2592; Match(AUTHENTICATION);
						State = 2593; Match(REQUIRED);
						}
					}

					State = 2604;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AUTHENTICATED) {
						{
						State = 2596; Match(AUTHENTICATED);
						State = 2597; Match(USING);
						State = 2602;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case PASSWORD:
							{
							State = 2598; Match(PASSWORD);
							}
							break;
						case CERTIFICATE:
							{
							State = 2599; Match(CERTIFICATE);
							}
							break;
						case DISTINGUISHED:
							{
							State = 2600; Match(DISTINGUISHED);
							State = 2601; Match(NAME);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_namesContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Container_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_names; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_namesContext container_names() {
		Container_namesContext _localctx = new Container_namesContext(Context, State);
		EnterRule(_localctx, 202, RULE_container_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610; Match(LEFT_PAREN);
			State = 2615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2611; Match(COMMA);
					}
				}

				State = 2614; id_expression();
				}
				}
				State = 2617;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)))) != 0) || _la==REGULAR_ID );
			State = 2619; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_container_dataContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode CONTAINER_DATA() { return GetToken(PlSqlParser.CONTAINER_DATA, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(PlSqlParser.EQUALS_OP, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Container_namesContext container_names() {
			return GetRuleContext<Container_namesContext>(0);
		}
		public Set_container_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_container_data; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_container_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_container_dataContext set_container_data() {
		Set_container_dataContext _localctx = new Set_container_dataContext(Context, State);
		EnterRule(_localctx, 204, RULE_set_container_data);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2621; Match(SET);
			State = 2622; Match(CONTAINER_DATA);
			State = 2623; Match(EQUALS_OP);
			State = 2627;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 2624; Match(ALL);
				}
				break;
			case DEFAULT:
				{
				State = 2625; Match(DEFAULT);
				}
				break;
			case LEFT_PAREN:
				{
				State = 2626; container_names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_rem_container_dataContext : ParserRuleContext {
		public ITerminalNode CONTAINER_DATA() { return GetToken(PlSqlParser.CONTAINER_DATA, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(PlSqlParser.EQUALS_OP, 0); }
		public Container_namesContext container_names() {
			return GetRuleContext<Container_namesContext>(0);
		}
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(PlSqlParser.REMOVE, 0); }
		public Add_rem_container_dataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_rem_container_data; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_rem_container_data(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_rem_container_dataContext add_rem_container_data() {
		Add_rem_container_dataContext _localctx = new Add_rem_container_dataContext(Context, State);
		EnterRule(_localctx, 206, RULE_add_rem_container_data);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2629;
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==REMOVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2630; Match(CONTAINER_DATA);
			State = 2631; Match(EQUALS_OP);
			State = 2632; container_names();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_data_clauseContext : ParserRuleContext {
		public Set_container_dataContext set_container_data() {
			return GetRuleContext<Set_container_dataContext>(0);
		}
		public Add_rem_container_dataContext add_rem_container_data() {
			return GetRuleContext<Add_rem_container_dataContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Container_tableview_nameContext container_tableview_name() {
			return GetRuleContext<Container_tableview_nameContext>(0);
		}
		public Container_data_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_data_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_data_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_data_clauseContext container_data_clause() {
		Container_data_clauseContext _localctx = new Container_data_clauseContext(Context, State);
		EnterRule(_localctx, 208, RULE_container_data_clause);
		int _la;
		try {
			State = 2640;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2634; set_container_data();
				}
				break;
			case ADD:
			case REMOVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2635; add_rem_container_data();
				State = 2638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 2636; Match(FOR);
					State = 2637; container_tableview_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_indexContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_indexContext drop_index() {
		Drop_indexContext _localctx = new Drop_indexContext(Context, State);
		EnterRule(_localctx, 210, RULE_drop_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2642; Match(DROP);
			State = 2643; Match(INDEX);
			State = 2644; index_name();
			State = 2645; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_statmentContext : ParserRuleContext {
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public Revoke_system_privilegesContext revoke_system_privileges() {
			return GetRuleContext<Revoke_system_privilegesContext>(0);
		}
		public Revoke_object_privilegesContext revoke_object_privileges() {
			return GetRuleContext<Revoke_object_privilegesContext>(0);
		}
		public Revoke_statmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_statment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke_statment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_statmentContext revoke_statment() {
		Revoke_statmentContext _localctx = new Revoke_statmentContext(Context, State);
		EnterRule(_localctx, 212, RULE_revoke_statment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2647; Match(REVOKE);
			State = 2650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,217,Context) ) {
			case 1:
				{
				State = 2648; revoke_system_privileges();
				}
				break;
			case 2:
				{
				State = 2649; revoke_object_privileges();
				}
				break;
			}
			State = 2652; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_system_privilegesContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public Grantee_nameContext[] grantee_name() {
			return GetRuleContexts<Grantee_nameContext>();
		}
		public Grantee_nameContext grantee_name(int i) {
			return GetRuleContext<Grantee_nameContext>(i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(PlSqlParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(PlSqlParser.PUBLIC, i);
		}
		public Role_nameContext role_name() {
			return GetRuleContext<Role_nameContext>(0);
		}
		public System_privilegeContext system_privilege() {
			return GetRuleContext<System_privilegeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Revoke_system_privilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_system_privileges; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke_system_privileges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_system_privilegesContext revoke_system_privileges() {
		Revoke_system_privilegesContext _localctx = new Revoke_system_privilegesContext(Context, State);
		EnterRule(_localctx, 214, RULE_revoke_system_privileges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2654; Match(COMMA);
				}
			}

			State = 2659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2657; role_name();
				}
				break;
			case 2:
				{
				State = 2658; system_privilege();
				}
				break;
			}
			}
			State = 2661; Match(FROM);
			State = 2667;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2667;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					State = 2663;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2662; Match(COMMA);
						}
					}

					State = 2665; grantee_name();
					}
					break;
				case PUBLIC:
					{
					State = 2666; Match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (PUBLIC - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)))) != 0) || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_object_privilegesContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return GetRuleContext<Grant_object_nameContext>(0);
		}
		public Grantee_nameContext[] grantee_name() {
			return GetRuleContexts<Grantee_nameContext>();
		}
		public Grantee_nameContext grantee_name(int i) {
			return GetRuleContext<Grantee_nameContext>(i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(PlSqlParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(PlSqlParser.PUBLIC, i);
		}
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(PlSqlParser.CONSTRAINTS, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Object_privilegeContext[] object_privilege() {
			return GetRuleContexts<Object_privilegeContext>();
		}
		public Object_privilegeContext object_privilege(int i) {
			return GetRuleContext<Object_privilegeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Revoke_object_privilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_object_privileges; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevoke_object_privileges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_object_privilegesContext revoke_object_privileges() {
		Revoke_object_privilegesContext _localctx = new Revoke_object_privilegesContext(Context, State);
		EnterRule(_localctx, 216, RULE_revoke_object_privileges);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2678;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2672;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2671; Match(COMMA);
						}
					}

					State = 2676;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,224,Context) ) {
					case 1:
						{
						State = 2674; role_name();
						}
						break;
					case 2:
						{
						State = 2675; object_privilege();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2680;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,225,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			{
			State = 2682; Match(ON);
			State = 2683; grant_object_name();
			}
			State = 2685; Match(FROM);
			State = 2692;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2692;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
					case 1:
						{
						State = 2687;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2686; Match(COMMA);
							}
						}

						State = 2689; grantee_name();
						}
						break;
					case 2:
						{
						State = 2690; Match(PUBLIC);
						}
						break;
					case 3:
						{
						State = 2691; role_name();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2694;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,228,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE:
				{
				State = 2696; Match(CASCADE);
				State = 2697; Match(CONSTRAINTS);
				}
				break;
			case FORCE:
				{
				State = 2698; Match(FORCE);
				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_statementContext : ParserRuleContext {
		public ITerminalNode[] GRANT() { return GetTokens(PlSqlParser.GRANT); }
		public ITerminalNode GRANT(int i) {
			return GetToken(PlSqlParser.GRANT, i);
		}
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Grant_object_nameContext grant_object_name() {
			return GetRuleContext<Grant_object_nameContext>(0);
		}
		public Grantee_nameContext[] grantee_name() {
			return GetRuleContexts<Grantee_nameContext>();
		}
		public Grantee_nameContext grantee_name(int i) {
			return GetRuleContext<Grantee_nameContext>(i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(PlSqlParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(PlSqlParser.PUBLIC, i);
		}
		public ITerminalNode[] WITH() { return GetTokens(PlSqlParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(PlSqlParser.WITH, i);
		}
		public ITerminalNode[] OPTION() { return GetTokens(PlSqlParser.OPTION); }
		public ITerminalNode OPTION(int i) {
			return GetToken(PlSqlParser.OPTION, i);
		}
		public ITerminalNode HIERARCHY() { return GetToken(PlSqlParser.HIERARCHY, 0); }
		public Container_clauseContext container_clause() {
			return GetRuleContext<Container_clauseContext>(0);
		}
		public ITerminalNode ADMIN() { return GetToken(PlSqlParser.ADMIN, 0); }
		public ITerminalNode DELEGATE() { return GetToken(PlSqlParser.DELEGATE, 0); }
		public Role_nameContext[] role_name() {
			return GetRuleContexts<Role_nameContext>();
		}
		public Role_nameContext role_name(int i) {
			return GetRuleContext<Role_nameContext>(i);
		}
		public System_privilegeContext[] system_privilege() {
			return GetRuleContexts<System_privilegeContext>();
		}
		public System_privilegeContext system_privilege(int i) {
			return GetRuleContext<System_privilegeContext>(i);
		}
		public Object_privilegeContext[] object_privilege() {
			return GetRuleContexts<Object_privilegeContext>();
		}
		public Object_privilegeContext object_privilege(int i) {
			return GetRuleContext<Object_privilegeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Paren_column_listContext[] paren_column_list() {
			return GetRuleContexts<Paren_column_listContext>();
		}
		public Paren_column_listContext paren_column_list(int i) {
			return GetRuleContext<Paren_column_listContext>(i);
		}
		public Grant_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_statementContext grant_statement() {
		Grant_statementContext _localctx = new Grant_statementContext(Context, State);
		EnterRule(_localctx, 218, RULE_grant_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2701; Match(GRANT);
			State = 2713;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2703;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2702; Match(COMMA);
						}
					}

					State = 2711;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
					case 1:
						{
						State = 2705; role_name();
						}
						break;
					case 2:
						{
						State = 2706; system_privilege();
						}
						break;
					case 3:
						{
						State = 2707; object_privilege();
						State = 2709;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LEFT_PAREN) {
							{
							State = 2708; paren_column_list();
							}
						}

						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2715;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,233,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2717; Match(ON);
				State = 2718; grant_object_name();
				}
			}

			State = 2721; Match(TO);
			State = 2727;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 2727;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case COMMA:
				case REGULAR_ID:
					{
					State = 2723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2722; Match(COMMA);
						}
					}

					State = 2725; grantee_name();
					}
					break;
				case PUBLIC:
					{
					State = 2726; Match(PUBLIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 2729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (PUBLIC - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)))) != 0) || _la==REGULAR_ID );
			State = 2734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 2731; Match(WITH);
				State = 2732;
				_la = TokenStream.LA(1);
				if ( !(_la==ADMIN || _la==DELEGATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2733; Match(OPTION);
				}
				break;
			}
			State = 2739;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				{
				State = 2736; Match(WITH);
				State = 2737; Match(HIERARCHY);
				State = 2738; Match(OPTION);
				}
				break;
			}
			State = 2744;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2741; Match(WITH);
				State = 2742; Match(GRANT);
				State = 2743; Match(OPTION);
				}
			}

			State = 2747;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONTAINER) {
				{
				State = 2746; container_clause();
				}
			}

			State = 2749; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_clauseContext : ParserRuleContext {
		public ITerminalNode CONTAINER() { return GetToken(PlSqlParser.CONTAINER, 0); }
		public ITerminalNode EQUALS_OP() { return GetToken(PlSqlParser.EQUALS_OP, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Container_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_clauseContext container_clause() {
		Container_clauseContext _localctx = new Container_clauseContext(Context, State);
		EnterRule(_localctx, 220, RULE_container_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2751; Match(CONTAINER);
			State = 2752; Match(EQUALS_OP);
			State = 2753;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==CURRENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_viewContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode VIEW() { return GetToken(PlSqlParser.VIEW, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode EDITIONING() { return GetToken(PlSqlParser.EDITIONING, 0); }
		public ITerminalNode EDITIONABLE() { return GetToken(PlSqlParser.EDITIONABLE, 0); }
		public ITerminalNode NOEDITIONABLE() { return GetToken(PlSqlParser.NOEDITIONABLE, 0); }
		public View_optionsContext view_options() {
			return GetRuleContext<View_optionsContext>(0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return GetRuleContext<Subquery_restriction_clauseContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Create_viewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_view(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_viewContext create_view() {
		Create_viewContext _localctx = new Create_viewContext(Context, State);
		EnterRule(_localctx, 222, RULE_create_view);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2755; Match(CREATE);
			State = 2758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 2756; Match(OR);
				State = 2757; Match(REPLACE);
				}
			}

			State = 2764;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE || _la==NO) {
				{
				State = 2761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 2760; Match(NO);
					}
				}

				State = 2763; Match(FORCE);
				}
			}

			State = 2772;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EDITIONING:
				{
				State = 2766; Match(EDITIONING);
				}
				break;
			case EDITIONABLE:
				{
				State = 2767; Match(EDITIONABLE);
				State = 2769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EDITIONING) {
					{
					State = 2768; Match(EDITIONING);
					}
				}

				}
				break;
			case NOEDITIONABLE:
				{
				State = 2771; Match(NOEDITIONABLE);
				}
				break;
			case VIEW:
				break;
			default:
				break;
			}
			State = 2774; Match(VIEW);
			State = 2775; tableview_name();
			State = 2777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF || _la==LEFT_PAREN) {
				{
				State = 2776; view_options();
				}
			}

			State = 2779; Match(AS);
			State = 2780; subquery();
			State = 2782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2781; subquery_restriction_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_optionsContext : ParserRuleContext {
		public View_alias_constraintContext view_alias_constraint() {
			return GetRuleContext<View_alias_constraintContext>(0);
		}
		public Object_view_clauseContext object_view_clause() {
			return GetRuleContext<Object_view_clauseContext>(0);
		}
		public View_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_optionsContext view_options() {
		View_optionsContext _localctx = new View_optionsContext(Context, State);
		EnterRule(_localctx, 224, RULE_view_options);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 2784; view_alias_constraint();
				}
				break;
			case OF:
				{
				State = 2785; object_view_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_alias_constraintContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext[] table_alias() {
			return GetRuleContexts<Table_aliasContext>();
		}
		public Table_aliasContext table_alias(int i) {
			return GetRuleContext<Table_aliasContext>(i);
		}
		public Out_of_line_constraintContext[] out_of_line_constraint() {
			return GetRuleContexts<Out_of_line_constraintContext>();
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return GetRuleContext<Out_of_line_constraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public ITerminalNode[] VISIBLE() { return GetTokens(PlSqlParser.VISIBLE); }
		public ITerminalNode VISIBLE(int i) {
			return GetToken(PlSqlParser.VISIBLE, i);
		}
		public ITerminalNode[] INVISIBLE() { return GetTokens(PlSqlParser.INVISIBLE); }
		public ITerminalNode INVISIBLE(int i) {
			return GetToken(PlSqlParser.INVISIBLE, i);
		}
		public View_alias_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_alias_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitView_alias_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public View_alias_constraintContext view_alias_constraint() {
		View_alias_constraintContext _localctx = new View_alias_constraintContext(Context, State);
		EnterRule(_localctx, 226, RULE_view_alias_constraint);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2788; Match(LEFT_PAREN);
			State = 2805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2789; Match(COMMA);
					}
				}

				State = 2803;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
				case 1:
					{
					State = 2792; table_alias();
					State = 2794;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==INVISIBLE || _la==VISIBLE) {
						{
						State = 2793;
						_la = TokenStream.LA(1);
						if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 2799;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 2796; inline_constraint();
							}
							} 
						}
						State = 2801;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,252,Context);
					}
					}
					break;
				case 2:
					{
					State = 2802; out_of_line_constraint();
					}
					break;
				}
				}
				}
				State = 2807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FOREIGN - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIMARY - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNIQUE - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (NATIONAL_CHAR_STRING_LIT - 713)) | (1L << (CHAR_STRING - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
			State = 2809; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_view_clauseContext : ParserRuleContext {
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(PlSqlParser.IDENTIFIER, 0); }
		public ITerminalNode ID() { return GetToken(PlSqlParser.ID, 0); }
		public ITerminalNode OID() { return GetToken(PlSqlParser.OID, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode[] REGULAR_ID() { return GetTokens(PlSqlParser.REGULAR_ID); }
		public ITerminalNode REGULAR_ID(int i) {
			return GetToken(PlSqlParser.REGULAR_ID, i);
		}
		public Out_of_line_constraintContext[] out_of_line_constraint() {
			return GetRuleContexts<Out_of_line_constraintContext>();
		}
		public Out_of_line_constraintContext out_of_line_constraint(int i) {
			return GetRuleContext<Out_of_line_constraintContext>(i);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Object_view_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_view_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_view_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_view_clauseContext object_view_clause() {
		Object_view_clauseContext _localctx = new Object_view_clauseContext(Context, State);
		EnterRule(_localctx, 228, RULE_object_view_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2811; Match(OF);
			State = 2812; type_name();
			State = 2831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				{
				State = 2813; Match(WITH);
				State = 2814; Match(OBJECT);
				State = 2815;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==ID || _la==OID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2827;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 2816; Match(DEFAULT);
					}
					break;
				case LEFT_PAREN:
					{
					State = 2817; Match(LEFT_PAREN);
					State = 2822;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 2819;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2818; Match(COMMA);
							}
						}

						State = 2821; Match(REGULAR_ID);
						}
						}
						State = 2824;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMMA || _la==REGULAR_ID );
					State = 2826; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case UNDER:
				{
				State = 2829; Match(UNDER);
				State = 2830; tableview_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LEFT_PAREN) {
				{
				{
				State = 2833; Match(LEFT_PAREN);
				State = 2842;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2835;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2834; Match(COMMA);
						}
					}

					State = 2840;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case CHECK:
					case CONSTRAINT:
					case FOREIGN:
					case PRIMARY:
					case UNIQUE:
						{
						State = 2837; out_of_line_constraint();
						}
						break;
					case REGULAR_ID:
						{
						State = 2838; Match(REGULAR_ID);
						State = 2839; inline_constraint();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					State = 2844;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE || _la==COMMA || _la==REGULAR_ID );
				State = 2846; Match(RIGHT_PAREN);
				}
				}
				State = 2852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public Inline_constraintContext inline_constraint() {
			return GetRuleContext<Inline_constraintContext>(0);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return GetRuleContext<Out_of_line_constraintContext>(0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return GetRuleContext<Inline_ref_constraintContext>(0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return GetRuleContext<Out_of_line_ref_constraintContext>(0);
		}
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 230, RULE_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2853; inline_constraint();
			State = 2854; out_of_line_constraint();
			State = 2855; inline_ref_constraint();
			State = 2856; out_of_line_ref_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_constraintContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode PRIMARY() { return GetToken(PlSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_constraintContext inline_constraint() {
		Inline_constraintContext _localctx = new Inline_constraintContext(Context, State);
		EnterRule(_localctx, 232, RULE_inline_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 2858; Match(CONSTRAINT);
				State = 2859; constraint_name();
				}
			}

			State = 2871;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL:
				{
				State = 2863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2862; Match(NOT);
					}
				}

				State = 2865; Match(NULL);
				}
				break;
			case UNIQUE:
				{
				State = 2866; Match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				State = 2867; Match(PRIMARY);
				State = 2868; Match(KEY);
				}
				break;
			case REFERENCES:
				{
				State = 2869; references_clause();
				}
				break;
			case CHECK:
				{
				State = 2870; check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2874;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 2873; constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_of_line_constraintContext : ParserRuleContext {
		public Out_of_line_constraintsContext[] out_of_line_constraints() {
			return GetRuleContexts<Out_of_line_constraintsContext>();
		}
		public Out_of_line_constraintsContext out_of_line_constraints(int i) {
			return GetRuleContext<Out_of_line_constraintsContext>(i);
		}
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_of_line_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_of_line_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_of_line_constraintContext out_of_line_constraint() {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(Context, State);
		EnterRule(_localctx, 234, RULE_out_of_line_constraint);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2877;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2876; out_of_line_constraints();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2879;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,267,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 2882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 2881; constraint_state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_of_line_constraintsContext : ParserRuleContext {
		public Primary_key_clauseContext primary_key_clause() {
			return GetRuleContext<Primary_key_clauseContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return GetRuleContext<Unique_key_clauseContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Out_of_line_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_of_line_constraints; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_of_line_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_of_line_constraintsContext out_of_line_constraints() {
		Out_of_line_constraintsContext _localctx = new Out_of_line_constraintsContext(Context, State);
		EnterRule(_localctx, 236, RULE_out_of_line_constraints);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 2884; Match(CONSTRAINT);
				State = 2885; constraint_name();
				}
			}

			State = 2892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				{
				State = 2888; primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				State = 2889; foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				State = 2890; unique_key_clause();
				}
				break;
			case CHECK:
				{
				State = 2891; check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraint_stateContext : ParserRuleContext {
		public ITerminalNode[] DEFERRABLE() { return GetTokens(PlSqlParser.DEFERRABLE); }
		public ITerminalNode DEFERRABLE(int i) {
			return GetToken(PlSqlParser.DEFERRABLE, i);
		}
		public ITerminalNode[] INITIALLY() { return GetTokens(PlSqlParser.INITIALLY); }
		public ITerminalNode INITIALLY(int i) {
			return GetToken(PlSqlParser.INITIALLY, i);
		}
		public Using_index_clauseContext[] using_index_clause() {
			return GetRuleContexts<Using_index_clauseContext>();
		}
		public Using_index_clauseContext using_index_clause(int i) {
			return GetRuleContext<Using_index_clauseContext>(i);
		}
		public Exceptions_clauseContext[] exceptions_clause() {
			return GetRuleContexts<Exceptions_clauseContext>();
		}
		public Exceptions_clauseContext exceptions_clause(int i) {
			return GetRuleContext<Exceptions_clauseContext>(i);
		}
		public ITerminalNode[] IMMEDIATE() { return GetTokens(PlSqlParser.IMMEDIATE); }
		public ITerminalNode IMMEDIATE(int i) {
			return GetToken(PlSqlParser.IMMEDIATE, i);
		}
		public ITerminalNode[] DEFERRED() { return GetTokens(PlSqlParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(PlSqlParser.DEFERRED, i);
		}
		public ITerminalNode[] RELY() { return GetTokens(PlSqlParser.RELY); }
		public ITerminalNode RELY(int i) {
			return GetToken(PlSqlParser.RELY, i);
		}
		public ITerminalNode[] NORELY() { return GetTokens(PlSqlParser.NORELY); }
		public ITerminalNode NORELY(int i) {
			return GetToken(PlSqlParser.NORELY, i);
		}
		public ITerminalNode[] ENABLE() { return GetTokens(PlSqlParser.ENABLE); }
		public ITerminalNode ENABLE(int i) {
			return GetToken(PlSqlParser.ENABLE, i);
		}
		public ITerminalNode[] DISABLE() { return GetTokens(PlSqlParser.DISABLE); }
		public ITerminalNode DISABLE(int i) {
			return GetToken(PlSqlParser.DISABLE, i);
		}
		public ITerminalNode[] VALIDATE() { return GetTokens(PlSqlParser.VALIDATE); }
		public ITerminalNode VALIDATE(int i) {
			return GetToken(PlSqlParser.VALIDATE, i);
		}
		public ITerminalNode[] NOVALIDATE() { return GetTokens(PlSqlParser.NOVALIDATE); }
		public ITerminalNode NOVALIDATE(int i) {
			return GetToken(PlSqlParser.NOVALIDATE, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(PlSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(PlSqlParser.NOT, i);
		}
		public Constraint_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint_state; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constraint_stateContext constraint_state() {
		Constraint_stateContext _localctx = new Constraint_stateContext(Context, State);
		EnterRule(_localctx, 238, RULE_constraint_state);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2905;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2905;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DEFERRABLE:
					case NOT:
						{
						State = 2895;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 2894; Match(NOT);
							}
						}

						State = 2897; Match(DEFERRABLE);
						}
						break;
					case INITIALLY:
						{
						State = 2898; Match(INITIALLY);
						State = 2899;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case NORELY:
					case RELY:
						{
						State = 2900;
						_la = TokenStream.LA(1);
						if ( !(_la==NORELY || _la==RELY) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case USING:
						{
						State = 2901; using_index_clause();
						}
						break;
					case DISABLE:
					case ENABLE:
						{
						State = 2902;
						_la = TokenStream.LA(1);
						if ( !(_la==DISABLE || _la==ENABLE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case NOVALIDATE:
					case VALIDATE:
						{
						State = 2903;
						_la = TokenStream.LA(1);
						if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case EXCEPTIONS:
						{
						State = 2904; exceptions_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2907;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,273,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_index_clauseContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Create_indexContext create_index() {
			return GetRuleContext<Create_indexContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Index_propertiesContext index_properties() {
			return GetRuleContext<Index_propertiesContext>(0);
		}
		public Using_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_index_clauseContext using_index_clause() {
		Using_index_clauseContext _localctx = new Using_index_clauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_using_index_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2909; Match(USING);
			State = 2910; Match(INDEX);
			State = 2919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				{
				State = 2911; index_name();
				}
				break;
			case 2:
				{
				State = 2912; Match(LEFT_PAREN);
				State = 2913; create_index();
				State = 2914; Match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				State = 2917;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
				case 1:
					{
					State = 2916; index_properties();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_propertiesContext : ParserRuleContext {
		public Global_partitioned_indexContext[] global_partitioned_index() {
			return GetRuleContexts<Global_partitioned_indexContext>();
		}
		public Global_partitioned_indexContext global_partitioned_index(int i) {
			return GetRuleContext<Global_partitioned_indexContext>(i);
		}
		public Local_partitioned_indexContext[] local_partitioned_index() {
			return GetRuleContexts<Local_partitioned_indexContext>();
		}
		public Local_partitioned_indexContext local_partitioned_index(int i) {
			return GetRuleContext<Local_partitioned_indexContext>(i);
		}
		public Index_attributesContext[] index_attributes() {
			return GetRuleContexts<Index_attributesContext>();
		}
		public Index_attributesContext index_attributes(int i) {
			return GetRuleContext<Index_attributesContext>(i);
		}
		public ITerminalNode INDEXTYPE() { return GetToken(PlSqlParser.INDEXTYPE, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Domain_index_clauseContext domain_index_clause() {
			return GetRuleContext<Domain_index_clauseContext>(0);
		}
		public Xmlindex_clauseContext xmlindex_clause() {
			return GetRuleContext<Xmlindex_clauseContext>(0);
		}
		public Index_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_propertiesContext index_properties() {
		Index_propertiesContext _localctx = new Index_propertiesContext(Context, State);
		EnterRule(_localctx, 242, RULE_index_properties);
		try {
			int _alt;
			State = 2940;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
			case FILESYSTEM_LIKE_LOGGING:
			case GLOBAL:
			case INDEXING:
			case INITRANS:
			case INVISIBLE:
			case LOCAL:
			case LOGGING:
			case NOCOMPRESS:
			case NOLOGGING:
			case NOPARALLEL:
			case NOSORT:
			case ONLINE:
			case PARALLEL:
			case PCTFREE:
			case PCTUSED:
			case REVERSE:
			case SORT:
			case STORAGE:
			case TABLESPACE:
			case VISIBLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2930;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2930;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case GLOBAL:
						case LOCAL:
							{
							State = 2923;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case GLOBAL:
								{
								State = 2921; global_partitioned_index();
								}
								break;
							case LOCAL:
								{
								State = 2922; local_partitioned_index();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case COMPRESS:
						case FILESYSTEM_LIKE_LOGGING:
						case INDEXING:
						case INITRANS:
						case INVISIBLE:
						case LOGGING:
						case NOCOMPRESS:
						case NOLOGGING:
						case NOPARALLEL:
						case NOSORT:
						case ONLINE:
						case PARALLEL:
						case PCTFREE:
						case PCTUSED:
						case REVERSE:
						case SORT:
						case STORAGE:
						case TABLESPACE:
						case VISIBLE:
							{
							State = 2926;
							ErrorHandler.Sync(this);
							_alt = 1;
							do {
								switch (_alt) {
								case 1:
									{
									{
									State = 2925; index_attributes();
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								State = 2928;
								ErrorHandler.Sync(this);
								_alt = Interpreter.AdaptivePredict(TokenStream,277,Context);
							} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2932;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case INDEXTYPE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2934; Match(INDEXTYPE);
				State = 2935; Match(IS);
				State = 2938;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
				case 1:
					{
					State = 2936; domain_index_clause();
					}
					break;
				case 2:
					{
					State = 2937; xmlindex_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_partitioned_indexContext : ParserRuleContext {
		public ITerminalNode GLOBAL() { return GetToken(PlSqlParser.GLOBAL, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Index_partitioning_clauseContext index_partitioning_clause() {
			return GetRuleContext<Index_partitioning_clauseContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return GetRuleContext<Individual_hash_partitionsContext>(0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return GetRuleContext<Hash_partitions_by_quantityContext>(0);
		}
		public Global_partitioned_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_partitioned_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_partitioned_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_partitioned_indexContext global_partitioned_index() {
		Global_partitioned_indexContext _localctx = new Global_partitioned_indexContext(Context, State);
		EnterRule(_localctx, 244, RULE_global_partitioned_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2942; Match(GLOBAL);
			State = 2943; Match(PARTITION);
			State = 2944; Match(BY);
			State = 2957;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RANGE:
				{
				State = 2945; Match(RANGE);
				State = 2946; paren_column_list();
				State = 2947; Match(LEFT_PAREN);
				State = 2948; index_partitioning_clause();
				State = 2949; Match(RIGHT_PAREN);
				}
				break;
			case HASH:
				{
				State = 2951; Match(HASH);
				State = 2952; paren_column_list();
				State = 2955;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LEFT_PAREN:
					{
					State = 2953; individual_hash_partitions();
					}
					break;
				case PARTITIONS:
					{
					State = 2954; hash_partitions_by_quantity();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Individual_hash_partitionsContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Partition_clauseContext[] partition_clause() {
			return GetRuleContexts<Partition_clauseContext>();
		}
		public Partition_clauseContext partition_clause(int i) {
			return GetRuleContext<Partition_clauseContext>(i);
		}
		public Partitioning_storage_clauseContext[] partitioning_storage_clause() {
			return GetRuleContexts<Partitioning_storage_clauseContext>();
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause(int i) {
			return GetRuleContext<Partitioning_storage_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Indexing_clauseContext[] indexing_clause() {
			return GetRuleContexts<Indexing_clauseContext>();
		}
		public Indexing_clauseContext indexing_clause(int i) {
			return GetRuleContext<Indexing_clauseContext>(i);
		}
		public Individual_hash_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_individual_hash_partitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndividual_hash_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Individual_hash_partitionsContext individual_hash_partitions() {
		Individual_hash_partitionsContext _localctx = new Individual_hash_partitionsContext(Context, State);
		EnterRule(_localctx, 246, RULE_individual_hash_partitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2959; Match(LEFT_PAREN);
			State = 2969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2961;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2960; Match(COMMA);
					}
				}

				{
				State = 2963; partition_clause();
				State = 2965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEXING) {
					{
					State = 2964; indexing_clause();
					}
				}

				State = 2967; partitioning_storage_clause();
				}
				}
				}
				State = 2971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PARTITION || _la==COMMA );
			State = 2973; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_partitioning_clauseContext : ParserRuleContext {
		public Partition_clause_optionalContext partition_clause_optional() {
			return GetRuleContext<Partition_clause_optionalContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ITerminalNode LESS() { return GetToken(PlSqlParser.LESS, 0); }
		public ITerminalNode THAN() { return GetToken(PlSqlParser.THAN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return GetRuleContext<Segment_attributes_clauseContext>(0);
		}
		public Index_partitioning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_partitioning_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_partitioning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_partitioning_clauseContext index_partitioning_clause() {
		Index_partitioning_clauseContext _localctx = new Index_partitioning_clauseContext(Context, State);
		EnterRule(_localctx, 248, RULE_index_partitioning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2975; partition_clause_optional();
			State = 2976; Match(VALUES);
			State = 2977; Match(LESS);
			State = 2978; Match(THAN);
			State = 2979; Match(LEFT_PAREN);
			State = 2980; literal();
			State = 2985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2981; Match(COMMA);
				State = 2982; literal();
				}
				}
				State = 2987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2988; Match(RIGHT_PAREN);
			State = 2990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				State = 2989; segment_attributes_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Segment_attributes_clauseContext : ParserRuleContext {
		public Tablespace_clauseContext[] tablespace_clause() {
			return GetRuleContexts<Tablespace_clauseContext>();
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return GetRuleContext<Tablespace_clauseContext>(i);
		}
		public Logging_clauseContext[] logging_clause() {
			return GetRuleContexts<Logging_clauseContext>();
		}
		public Logging_clauseContext logging_clause(int i) {
			return GetRuleContext<Logging_clauseContext>(i);
		}
		public Physical_attributes_clauseContext[] physical_attributes_clause() {
			return GetRuleContexts<Physical_attributes_clauseContext>();
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return GetRuleContext<Physical_attributes_clauseContext>(i);
		}
		public Segment_attributes_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment_attributes_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment_attributes_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Segment_attributes_clauseContext segment_attributes_clause() {
		Segment_attributes_clauseContext _localctx = new Segment_attributes_clauseContext(Context, State);
		EnterRule(_localctx, 250, RULE_segment_attributes_clause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2999;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 2999;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INITRANS:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
						{
						State = 2993;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 2992; physical_attributes_clause();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 2995;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,289,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case TABLESPACE:
						{
						State = 2997; tablespace_clause();
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case LOGGING:
					case NOLOGGING:
						{
						State = 2998; logging_clause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3001;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,291,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_attributesContext : ParserRuleContext {
		public Physical_attributes_clauseContext[] physical_attributes_clause() {
			return GetRuleContexts<Physical_attributes_clauseContext>();
		}
		public Physical_attributes_clauseContext physical_attributes_clause(int i) {
			return GetRuleContext<Physical_attributes_clauseContext>(i);
		}
		public Logging_clauseContext logging_clause() {
			return GetRuleContext<Logging_clauseContext>(0);
		}
		public ITerminalNode ONLINE() { return GetToken(PlSqlParser.ONLINE, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public Tablespace_nameContext tablespace_name() {
			return GetRuleContext<Tablespace_nameContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Advanced_index_compressionContext advanced_index_compression() {
			return GetRuleContext<Advanced_index_compressionContext>(0);
		}
		public ITerminalNode SORT() { return GetToken(PlSqlParser.SORT, 0); }
		public ITerminalNode NOSORT() { return GetToken(PlSqlParser.NOSORT, 0); }
		public ITerminalNode REVERSE() { return GetToken(PlSqlParser.REVERSE, 0); }
		public ITerminalNode VISIBLE() { return GetToken(PlSqlParser.VISIBLE, 0); }
		public ITerminalNode INVISIBLE() { return GetToken(PlSqlParser.INVISIBLE, 0); }
		public Partial_index_clauseContext partial_index_clause() {
			return GetRuleContext<Partial_index_clauseContext>(0);
		}
		public Parallel_clauseContext parallel_clause() {
			return GetRuleContext<Parallel_clauseContext>(0);
		}
		public Index_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_attributes; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_attributesContext index_attributes() {
		Index_attributesContext _localctx = new Index_attributesContext(Context, State);
		EnterRule(_localctx, 252, RULE_index_attributes);
		int _la;
		try {
			int _alt;
			State = 3021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITRANS:
			case PCTFREE:
			case PCTUSED:
			case STORAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3004;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3003; physical_attributes_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3006;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,292,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case FILESYSTEM_LIKE_LOGGING:
			case LOGGING:
			case NOLOGGING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3008; logging_clause();
				}
				break;
			case ONLINE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3009; Match(ONLINE);
				}
				break;
			case TABLESPACE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3010; Match(TABLESPACE);
				State = 3013;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 3011; tablespace_name();
					}
					break;
				case DEFAULT:
					{
					State = 3012; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3015; advanced_index_compression();
				}
				break;
			case NOSORT:
			case SORT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3016;
				_la = TokenStream.LA(1);
				if ( !(_la==NOSORT || _la==SORT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REVERSE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3017; Match(REVERSE);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3018;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case INDEXING:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3019; partial_index_clause();
				}
				break;
			case NOPARALLEL:
			case PARALLEL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3020; parallel_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Physical_attributes_clauseContext : ParserRuleContext {
		public ITerminalNode PCTFREE() { return GetToken(PlSqlParser.PCTFREE, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode PCTUSED() { return GetToken(PlSqlParser.PCTUSED, 0); }
		public ITerminalNode INITRANS() { return GetToken(PlSqlParser.INITRANS, 0); }
		public Storage_clauseContext storage_clause() {
			return GetRuleContext<Storage_clauseContext>(0);
		}
		public Physical_attributes_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_physical_attributes_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhysical_attributes_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Physical_attributes_clauseContext physical_attributes_clause() {
		Physical_attributes_clauseContext _localctx = new Physical_attributes_clauseContext(Context, State);
		EnterRule(_localctx, 254, RULE_physical_attributes_clause);
		try {
			State = 3030;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PCTFREE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3023; Match(PCTFREE);
				State = 3024; integer();
				}
				break;
			case PCTUSED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3025; Match(PCTUSED);
				State = 3026; integer();
				}
				break;
			case INITRANS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3027; Match(INITRANS);
				State = 3028; integer();
				}
				break;
			case STORAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3029; storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partitions_by_quantityContext : ParserRuleContext {
		public ITerminalNode PARTITIONS() { return GetToken(PlSqlParser.PARTITIONS, 0); }
		public Hash_partition_quantityContext hash_partition_quantity() {
			return GetRuleContext<Hash_partition_quantityContext>(0);
		}
		public ITerminalNode[] STORE() { return GetTokens(PlSqlParser.STORE); }
		public ITerminalNode STORE(int i) {
			return GetToken(PlSqlParser.STORE, i);
		}
		public ITerminalNode[] IN() { return GetTokens(PlSqlParser.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(PlSqlParser.IN, i);
		}
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Table_compressionContext table_compression() {
			return GetRuleContext<Table_compressionContext>(0);
		}
		public Index_compressionContext index_compression() {
			return GetRuleContext<Index_compressionContext>(0);
		}
		public ITerminalNode OVERFLOW() { return GetToken(PlSqlParser.OVERFLOW, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Hash_partitions_by_quantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partitions_by_quantity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_partitions_by_quantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
		Hash_partitions_by_quantityContext _localctx = new Hash_partitions_by_quantityContext(Context, State);
		EnterRule(_localctx, 256, RULE_hash_partitions_by_quantity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032; Match(PARTITIONS);
			State = 3033; hash_partition_quantity();
			State = 3047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				{
				State = 3034; Match(STORE);
				State = 3035; Match(IN);
				State = 3036; Match(LEFT_PAREN);
				State = 3037; tablespace_name();
				State = 3042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3038; Match(COMMA);
					State = 3039; tablespace_name();
					}
					}
					State = 3044;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3045; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 3051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
			case 1:
				{
				State = 3049; table_compression();
				}
				break;
			case 2:
				{
				State = 3050; index_compression();
				}
				break;
			}
			State = 3067;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERFLOW) {
				{
				State = 3053; Match(OVERFLOW);
				State = 3054; Match(STORE);
				State = 3055; Match(IN);
				State = 3056; Match(LEFT_PAREN);
				State = 3057; tablespace_name();
				State = 3062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3058; Match(COMMA);
					State = 3059; tablespace_name();
					}
					}
					State = 3064;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3065; Match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_partitioned_indexContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public On_range_partitioned_tableContext on_range_partitioned_table() {
			return GetRuleContext<On_range_partitioned_tableContext>(0);
		}
		public On_list_partitioned_tableContext on_list_partitioned_table() {
			return GetRuleContext<On_list_partitioned_tableContext>(0);
		}
		public On_hash_partitioned_tableContext on_hash_partitioned_table() {
			return GetRuleContext<On_hash_partitioned_tableContext>(0);
		}
		public On_comp_partitioned_tableContext on_comp_partitioned_table() {
			return GetRuleContext<On_comp_partitioned_tableContext>(0);
		}
		public Local_partitioned_indexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_partitioned_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_partitioned_index(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_partitioned_indexContext local_partitioned_index() {
		Local_partitioned_indexContext _localctx = new Local_partitioned_indexContext(Context, State);
		EnterRule(_localctx, 258, RULE_local_partitioned_index);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3069; Match(LOCAL);
			State = 3074;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				{
				State = 3070; on_range_partitioned_table();
				}
				break;
			case 2:
				{
				State = 3071; on_list_partitioned_table();
				}
				break;
			case 3:
				{
				State = 3072; on_hash_partitioned_table();
				}
				break;
			case 4:
				{
				State = 3073; on_comp_partitioned_table();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_range_partitioned_tableContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Partition_clause_optionalContext partition_clause_optional() {
			return GetRuleContext<Partition_clause_optionalContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] UNUSABLE() { return GetTokens(PlSqlParser.UNUSABLE); }
		public ITerminalNode UNUSABLE(int i) {
			return GetToken(PlSqlParser.UNUSABLE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode[] PARTITION() { return GetTokens(PlSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(PlSqlParser.PARTITION, i);
		}
		public Segment_attributes_clauseContext[] segment_attributes_clause() {
			return GetRuleContexts<Segment_attributes_clauseContext>();
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return GetRuleContext<Segment_attributes_clauseContext>(i);
		}
		public Index_compressionContext[] index_compression() {
			return GetRuleContexts<Index_compressionContext>();
		}
		public Index_compressionContext index_compression(int i) {
			return GetRuleContext<Index_compressionContext>(i);
		}
		public Partition_nameContext[] partition_name() {
			return GetRuleContexts<Partition_nameContext>();
		}
		public Partition_nameContext partition_name(int i) {
			return GetRuleContext<Partition_nameContext>(i);
		}
		public On_range_partitioned_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_range_partitioned_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_range_partitioned_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_range_partitioned_tableContext on_range_partitioned_table() {
		On_range_partitioned_tableContext _localctx = new On_range_partitioned_tableContext(Context, State);
		EnterRule(_localctx, 260, RULE_on_range_partitioned_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3076; Match(LEFT_PAREN);
			State = 3077; partition_clause_optional();
			State = 3084;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				State = 3080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 3080;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						State = 3078; segment_attributes_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						State = 3079; index_compression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
				}
			}

			State = 3087;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNUSABLE) {
				{
				State = 3086; Match(UNUSABLE);
				}
			}

			State = 3107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3089; Match(COMMA);
				State = 3090; Match(PARTITION);
				State = 3092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 3091; partition_name();
					}
				}

				State = 3100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					State = 3096;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						State = 3096;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							State = 3094; segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							State = 3095; index_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						State = 3098;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				State = 3103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNUSABLE) {
					{
					State = 3102; Match(UNUSABLE);
					}
				}

				}
				}
				State = 3109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3110; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_list_partitioned_tableContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Partition_clause_optionalContext[] partition_clause_optional() {
			return GetRuleContexts<Partition_clause_optionalContext>();
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return GetRuleContext<Partition_clause_optionalContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Usable_clauseContext[] usable_clause() {
			return GetRuleContexts<Usable_clauseContext>();
		}
		public Usable_clauseContext usable_clause(int i) {
			return GetRuleContext<Usable_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Segment_attributes_clauseContext[] segment_attributes_clause() {
			return GetRuleContexts<Segment_attributes_clauseContext>();
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return GetRuleContext<Segment_attributes_clauseContext>(i);
		}
		public Index_compressionContext[] index_compression() {
			return GetRuleContexts<Index_compressionContext>();
		}
		public Index_compressionContext index_compression(int i) {
			return GetRuleContext<Index_compressionContext>(i);
		}
		public On_list_partitioned_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_list_partitioned_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_list_partitioned_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_list_partitioned_tableContext on_list_partitioned_table() {
		On_list_partitioned_tableContext _localctx = new On_list_partitioned_tableContext(Context, State);
		EnterRule(_localctx, 262, RULE_on_list_partitioned_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3112; Match(LEFT_PAREN);
			State = 3113; partition_clause_optional();
			State = 3120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				State = 3116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 3116;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						State = 3114; segment_attributes_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						State = 3115; index_compression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
				}
			}

			State = 3123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNUSABLE || _la==USABLE) {
				{
				State = 3122; usable_clause();
				}
			}

			State = 3140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3125; Match(COMMA);
				State = 3126; partition_clause_optional();
				State = 3133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					State = 3129;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						State = 3129;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							State = 3127; segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							State = 3128; index_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						State = 3131;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				State = 3136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					State = 3135; usable_clause();
					}
				}

				}
				}
				State = 3142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3143; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_hash_partitioned_tableContext : ParserRuleContext {
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Partition_clause_optionalContext[] partition_clause_optional() {
			return GetRuleContexts<Partition_clause_optionalContext>();
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return GetRuleContext<Partition_clause_optionalContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Tablespace_clauseContext[] tablespace_clause() {
			return GetRuleContexts<Tablespace_clauseContext>();
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return GetRuleContext<Tablespace_clauseContext>(i);
		}
		public Advanced_index_compressionContext[] advanced_index_compression() {
			return GetRuleContexts<Advanced_index_compressionContext>();
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return GetRuleContext<Advanced_index_compressionContext>(i);
		}
		public Usable_clauseContext[] usable_clause() {
			return GetRuleContexts<Usable_clauseContext>();
		}
		public Usable_clauseContext usable_clause(int i) {
			return GetRuleContext<Usable_clauseContext>(i);
		}
		public On_hash_partitioned_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_hash_partitioned_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_hash_partitioned_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_hash_partitioned_tableContext on_hash_partitioned_table() {
		On_hash_partitioned_tableContext _localctx = new On_hash_partitioned_tableContext(Context, State);
		EnterRule(_localctx, 264, RULE_on_hash_partitioned_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3187;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STORE:
				{
				State = 3145; Match(STORE);
				State = 3146; Match(IN);
				State = 3147; Match(LEFT_PAREN);
				State = 3148; tablespace_name();
				State = 3153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3149; Match(COMMA);
					State = 3150; tablespace_name();
					}
					}
					State = 3155;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3156; Match(RIGHT_PAREN);
				}
				break;
			case LEFT_PAREN:
				{
				State = 3158; Match(LEFT_PAREN);
				State = 3159; partition_clause_optional();
				State = 3161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 3160; tablespace_clause();
					}
				}

				State = 3164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPRESS || _la==NOCOMPRESS) {
					{
					State = 3163; advanced_index_compression();
					}
				}

				State = 3167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					State = 3166; usable_clause();
					}
				}

				State = 3182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3169; Match(COMMA);
					State = 3170; partition_clause_optional();
					State = 3172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TABLESPACE) {
						{
						State = 3171; tablespace_clause();
						}
					}

					State = 3175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						State = 3174; advanced_index_compression();
						}
					}

					State = 3178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==UNUSABLE || _la==USABLE) {
						{
						State = 3177; usable_clause();
						}
					}

					}
					}
					State = 3184;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3185; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_comp_partitioned_tableContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Partition_clause_optionalContext[] partition_clause_optional() {
			return GetRuleContexts<Partition_clause_optionalContext>();
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return GetRuleContext<Partition_clause_optionalContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Store_inContext store_in() {
			return GetRuleContext<Store_inContext>(0);
		}
		public Usable_clauseContext[] usable_clause() {
			return GetRuleContexts<Usable_clauseContext>();
		}
		public Usable_clauseContext usable_clause(int i) {
			return GetRuleContext<Usable_clauseContext>(i);
		}
		public Index_subpartition_clauseContext[] index_subpartition_clause() {
			return GetRuleContexts<Index_subpartition_clauseContext>();
		}
		public Index_subpartition_clauseContext index_subpartition_clause(int i) {
			return GetRuleContext<Index_subpartition_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Segment_attributes_clauseContext[] segment_attributes_clause() {
			return GetRuleContexts<Segment_attributes_clauseContext>();
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return GetRuleContext<Segment_attributes_clauseContext>(i);
		}
		public Advanced_index_compressionContext[] advanced_index_compression() {
			return GetRuleContexts<Advanced_index_compressionContext>();
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return GetRuleContext<Advanced_index_compressionContext>(i);
		}
		public On_comp_partitioned_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_comp_partitioned_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_comp_partitioned_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_comp_partitioned_tableContext on_comp_partitioned_table() {
		On_comp_partitioned_tableContext _localctx = new On_comp_partitioned_tableContext(Context, State);
		EnterRule(_localctx, 266, RULE_on_comp_partitioned_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORE) {
				{
				State = 3189; store_in();
				}
			}

			State = 3192; Match(LEFT_PAREN);
			State = 3193; partition_clause_optional();
			State = 3200;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				State = 3196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 3196;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case PCTFREE:
					case PCTUSED:
					case STORAGE:
					case TABLESPACE:
						{
						State = 3194; segment_attributes_clause();
						}
						break;
					case COMPRESS:
					case NOCOMPRESS:
						{
						State = 3195; advanced_index_compression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
				}
			}

			State = 3203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNUSABLE || _la==USABLE) {
				{
				State = 3202; usable_clause();
				}
			}

			State = 3206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORE || _la==LEFT_PAREN) {
				{
				State = 3205; index_subpartition_clause();
				}
			}

			State = 3226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3208; Match(COMMA);
				State = 3209; partition_clause_optional();
				State = 3216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					State = 3212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						State = 3212;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case FILESYSTEM_LIKE_LOGGING:
						case INITRANS:
						case LOGGING:
						case NOLOGGING:
						case PCTFREE:
						case PCTUSED:
						case STORAGE:
						case TABLESPACE:
							{
							State = 3210; segment_attributes_clause();
							}
							break;
						case COMPRESS:
						case NOCOMPRESS:
							{
							State = 3211; advanced_index_compression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						State = 3214;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==COMPRESS || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (NOCOMPRESS - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE );
					}
				}

				State = 3219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					State = 3218; usable_clause();
					}
				}

				State = 3222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORE || _la==LEFT_PAREN) {
					{
					State = 3221; index_subpartition_clause();
					}
				}

				}
				}
				State = 3228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3229; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltable_index_clauseContext : ParserRuleContext {
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public Xmltable_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltable_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmltable_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmltable_index_clauseContext xmltable_index_clause() {
		Xmltable_index_clauseContext _localctx = new Xmltable_index_clauseContext(Context, State);
		EnterRule(_localctx, 268, RULE_xmltable_index_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3231; Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlindex_clauseContext : ParserRuleContext {
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public Xmlindex_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlindex_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlindex_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlindex_clauseContext xmlindex_clause() {
		Xmlindex_clauseContext _localctx = new Xmlindex_clauseContext(Context, State);
		EnterRule(_localctx, 270, RULE_xmlindex_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3233; Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public Partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_clauseContext partition_clause() {
		Partition_clauseContext _localctx = new Partition_clauseContext(Context, State);
		EnterRule(_localctx, 272, RULE_partition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3235; Match(PARTITION);
			State = 3236; partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_clause_optionalContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public Partition_clause_optionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_clause_optional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_clause_optional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_clause_optionalContext partition_clause_optional() {
		Partition_clause_optionalContext _localctx = new Partition_clause_optionalContext(Context, State);
		EnterRule(_localctx, 274, RULE_partition_clause_optional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3238; Match(PARTITION);
			State = 3240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
			case 1:
				{
				State = 3239; partition_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexing_clauseContext : ParserRuleContext {
		public ITerminalNode INDEXING() { return GetToken(PlSqlParser.INDEXING, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public Indexing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexing_clauseContext indexing_clause() {
		Indexing_clauseContext _localctx = new Indexing_clauseContext(Context, State);
		EnterRule(_localctx, 276, RULE_indexing_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3242; Match(INDEXING);
			State = 3243;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partitioning_storage_clauseContext : ParserRuleContext {
		public Tablespace_clauseContext[] tablespace_clause() {
			return GetRuleContexts<Tablespace_clauseContext>();
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return GetRuleContext<Tablespace_clauseContext>(i);
		}
		public ITerminalNode[] OVERFLOW() { return GetTokens(PlSqlParser.OVERFLOW); }
		public ITerminalNode OVERFLOW(int i) {
			return GetToken(PlSqlParser.OVERFLOW, i);
		}
		public Table_compressionContext[] table_compression() {
			return GetRuleContexts<Table_compressionContext>();
		}
		public Table_compressionContext table_compression(int i) {
			return GetRuleContext<Table_compressionContext>(i);
		}
		public Index_compressionContext[] index_compression() {
			return GetRuleContexts<Index_compressionContext>();
		}
		public Index_compressionContext index_compression(int i) {
			return GetRuleContext<Index_compressionContext>(i);
		}
		public Inmemory_clauseContext[] inmemory_clause() {
			return GetRuleContexts<Inmemory_clauseContext>();
		}
		public Inmemory_clauseContext inmemory_clause(int i) {
			return GetRuleContext<Inmemory_clauseContext>(i);
		}
		public Lob_partitioning_storageContext[] lob_partitioning_storage() {
			return GetRuleContexts<Lob_partitioning_storageContext>();
		}
		public Lob_partitioning_storageContext lob_partitioning_storage(int i) {
			return GetRuleContext<Lob_partitioning_storageContext>(i);
		}
		public ITerminalNode[] VARRAY() { return GetTokens(PlSqlParser.VARRAY); }
		public ITerminalNode VARRAY(int i) {
			return GetToken(PlSqlParser.VARRAY, i);
		}
		public Varray_itemContext[] varray_item() {
			return GetRuleContexts<Varray_itemContext>();
		}
		public Varray_itemContext varray_item(int i) {
			return GetRuleContext<Varray_itemContext>(i);
		}
		public ITerminalNode[] STORE() { return GetTokens(PlSqlParser.STORE); }
		public ITerminalNode STORE(int i) {
			return GetToken(PlSqlParser.STORE, i);
		}
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode[] LOB() { return GetTokens(PlSqlParser.LOB); }
		public ITerminalNode LOB(int i) {
			return GetToken(PlSqlParser.LOB, i);
		}
		public Lob_segnameContext[] lob_segname() {
			return GetRuleContexts<Lob_segnameContext>();
		}
		public Lob_segnameContext lob_segname(int i) {
			return GetRuleContext<Lob_segnameContext>(i);
		}
		public ITerminalNode[] SECUREFILE() { return GetTokens(PlSqlParser.SECUREFILE); }
		public ITerminalNode SECUREFILE(int i) {
			return GetToken(PlSqlParser.SECUREFILE, i);
		}
		public ITerminalNode[] BASICFILE() { return GetTokens(PlSqlParser.BASICFILE); }
		public ITerminalNode BASICFILE(int i) {
			return GetToken(PlSqlParser.BASICFILE, i);
		}
		public Partitioning_storage_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitioning_storage_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitioning_storage_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partitioning_storage_clauseContext partitioning_storage_clause() {
		Partitioning_storage_clauseContext _localctx = new Partitioning_storage_clauseContext(Context, State);
		EnterRule(_localctx, 278, RULE_partitioning_storage_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3264;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 3264;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,345,Context) ) {
					case 1:
						{
						State = 3245; tablespace_clause();
						}
						break;
					case 2:
						{
						State = 3246; Match(OVERFLOW);
						State = 3248;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
						case 1:
							{
							State = 3247; tablespace_clause();
							}
							break;
						}
						}
						break;
					case 3:
						{
						State = 3250; table_compression();
						}
						break;
					case 4:
						{
						State = 3251; index_compression();
						}
						break;
					case 5:
						{
						State = 3252; inmemory_clause();
						}
						break;
					case 6:
						{
						State = 3253; lob_partitioning_storage();
						}
						break;
					case 7:
						{
						State = 3254; Match(VARRAY);
						State = 3255; varray_item();
						State = 3256; Match(STORE);
						State = 3257; Match(AS);
						State = 3259;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==BASICFILE || _la==SECUREFILE) {
							{
							State = 3258;
							_la = TokenStream.LA(1);
							if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
						}

						State = 3261; Match(LOB);
						State = 3262; lob_segname();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,346,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_table_clauseContext : ParserRuleContext {
		public ITerminalNode INMEMORY() { return GetToken(PlSqlParser.INMEMORY, 0); }
		public Inmemory_parametersContext inmemory_parameters() {
			return GetRuleContext<Inmemory_parametersContext>(0);
		}
		public Inmemory_column_clauseContext inmemory_column_clause() {
			return GetRuleContext<Inmemory_column_clauseContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_table_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_table_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_table_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_table_clauseContext inmemory_table_clause() {
		Inmemory_table_clauseContext _localctx = new Inmemory_table_clauseContext(Context, State);
		EnterRule(_localctx, 280, RULE_inmemory_table_clause);
		try {
			State = 3276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INMEMORY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3268; Match(INMEMORY);
				State = 3272;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
				case 1:
					{
					State = 3269; inmemory_parameters();
					State = 3270; inmemory_column_clause();
					}
					break;
				}
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3274; Match(NO);
				State = 3275; Match(INMEMORY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_column_clauseContext : ParserRuleContext {
		public ITerminalNode INMEMORY() { return GetToken(PlSqlParser.INMEMORY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Inmemory_memcompressContext inmemory_memcompress() {
			return GetRuleContext<Inmemory_memcompressContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_column_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_column_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_column_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_column_clauseContext inmemory_column_clause() {
		Inmemory_column_clauseContext _localctx = new Inmemory_column_clauseContext(Context, State);
		EnterRule(_localctx, 282, RULE_inmemory_column_clause);
		int _la;
		try {
			State = 3285;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INMEMORY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3278; Match(INMEMORY);
				State = 3280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MEMCOMPRESS || _la==NO) {
					{
					State = 3279; inmemory_memcompress();
					}
				}

				State = 3282; paren_column_list();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3283; Match(NO);
				State = 3284; Match(INMEMORY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_clauseContext : ParserRuleContext {
		public ITerminalNode INMEMORY() { return GetToken(PlSqlParser.INMEMORY, 0); }
		public Inmemory_parametersContext inmemory_parameters() {
			return GetRuleContext<Inmemory_parametersContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_clauseContext inmemory_clause() {
		Inmemory_clauseContext _localctx = new Inmemory_clauseContext(Context, State);
		EnterRule(_localctx, 284, RULE_inmemory_clause);
		try {
			State = 3291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INMEMORY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3287; Match(INMEMORY);
				State = 3288; inmemory_parameters();
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3289; Match(NO);
				State = 3290; Match(INMEMORY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_parametersContext : ParserRuleContext {
		public Inmemory_memcompressContext inmemory_memcompress() {
			return GetRuleContext<Inmemory_memcompressContext>(0);
		}
		public Inmemory_priorityContext inmemory_priority() {
			return GetRuleContext<Inmemory_priorityContext>(0);
		}
		public Inmemory_distributeContext inmemory_distribute() {
			return GetRuleContext<Inmemory_distributeContext>(0);
		}
		public Inmemory_duplicateContext inmemory_duplicate() {
			return GetRuleContext<Inmemory_duplicateContext>(0);
		}
		public Inmemory_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_parametersContext inmemory_parameters() {
		Inmemory_parametersContext _localctx = new Inmemory_parametersContext(Context, State);
		EnterRule(_localctx, 286, RULE_inmemory_parameters);
		int _la;
		try {
			State = 3305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3294;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
				case 1:
					{
					State = 3293; inmemory_memcompress();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIORITY) {
					{
					State = 3296; inmemory_priority();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DISTRIBUTE) {
					{
					State = 3299; inmemory_distribute();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
				case 1:
					{
					State = 3302; inmemory_duplicate();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_memcompressContext : ParserRuleContext {
		public ITerminalNode MEMCOMPRESS() { return GetToken(PlSqlParser.MEMCOMPRESS, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode DML() { return GetToken(PlSqlParser.DML, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode CAPACITY() { return GetToken(PlSqlParser.CAPACITY, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_memcompressContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_memcompress; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_memcompress(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_memcompressContext inmemory_memcompress() {
		Inmemory_memcompressContext _localctx = new Inmemory_memcompressContext(Context, State);
		EnterRule(_localctx, 288, RULE_inmemory_memcompress);
		int _la;
		try {
			State = 3318;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MEMCOMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3307; Match(MEMCOMPRESS);
				State = 3308; Match(FOR);
				State = 3314;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DML:
					{
					State = 3309; Match(DML);
					}
					break;
				case CAPACITY:
				case QUERY:
					{
					State = 3310;
					_la = TokenStream.LA(1);
					if ( !(_la==CAPACITY || _la==QUERY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3312;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HIGH || _la==LOW) {
						{
						State = 3311;
						_la = TokenStream.LA(1);
						if ( !(_la==HIGH || _la==LOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3316; Match(NO);
				State = 3317; Match(MEMCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_priorityContext : ParserRuleContext {
		public ITerminalNode PRIORITY() { return GetToken(PlSqlParser.PRIORITY, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode MEDIUM() { return GetToken(PlSqlParser.MEDIUM, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public ITerminalNode CRITICAL() { return GetToken(PlSqlParser.CRITICAL, 0); }
		public Inmemory_priorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_priority; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_priority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_priorityContext inmemory_priority() {
		Inmemory_priorityContext _localctx = new Inmemory_priorityContext(Context, State);
		EnterRule(_localctx, 290, RULE_inmemory_priority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3320; Match(PRIORITY);
			State = 3321;
			_la = TokenStream.LA(1);
			if ( !(_la==CRITICAL || _la==HIGH || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (LOW - 322)) | (1L << (MEDIUM - 322)) | (1L << (NONE - 322)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_distributeContext : ParserRuleContext {
		public ITerminalNode DISTRIBUTE() { return GetToken(PlSqlParser.DISTRIBUTE, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public Inmemory_distributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_distribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_distribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_distributeContext inmemory_distribute() {
		Inmemory_distributeContext _localctx = new Inmemory_distributeContext(Context, State);
		EnterRule(_localctx, 292, RULE_inmemory_distribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3323; Match(DISTRIBUTE);
			State = 3332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				{
				State = 3324; Match(AUTO);
				}
				break;
			case 2:
				{
				{
				State = 3325; Match(BY);
				State = 3330;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ROWID:
					{
					State = 3326; Match(ROWID);
					State = 3327; Match(RANGE);
					}
					break;
				case PARTITION:
					{
					State = 3328; Match(PARTITION);
					}
					break;
				case SUBPARTITION:
					{
					State = 3329; Match(SUBPARTITION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inmemory_duplicateContext : ParserRuleContext {
		public ITerminalNode DUPLICATE() { return GetToken(PlSqlParser.DUPLICATE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Inmemory_duplicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inmemory_duplicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInmemory_duplicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inmemory_duplicateContext inmemory_duplicate() {
		Inmemory_duplicateContext _localctx = new Inmemory_duplicateContext(Context, State);
		EnterRule(_localctx, 294, RULE_inmemory_duplicate);
		int _la;
		try {
			State = 3340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DUPLICATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3334; Match(DUPLICATE);
				State = 3336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 3335; Match(ALL);
					}
				}

				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3338; Match(NO);
				State = 3339; Match(DUPLICATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_compressionContext : ParserRuleContext {
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode BASIC() { return GetToken(PlSqlParser.BASIC, 0); }
		public ITerminalNode ADVANCED() { return GetToken(PlSqlParser.ADVANCED, 0); }
		public ITerminalNode COLUMN() { return GetToken(PlSqlParser.COLUMN, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode LEVEL() { return GetToken(PlSqlParser.LEVEL, 0); }
		public ITerminalNode LOCKING() { return GetToken(PlSqlParser.LOCKING, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public Table_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_compressionContext table_compression() {
		Table_compressionContext _localctx = new Table_compressionContext(Context, State);
		EnterRule(_localctx, 296, RULE_table_compression);
		int _la;
		try {
			State = 3369;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3342; Match(COMPRESS);
				}
				break;
			case ROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3343; Match(ROW);
				State = 3344; Match(STORE);
				State = 3345; Match(COMPRESS);
				State = 3347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADVANCED || _la==BASIC) {
					{
					State = 3346;
					_la = TokenStream.LA(1);
					if ( !(_la==ADVANCED || _la==BASIC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case COLUMN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3349; Match(COLUMN);
				State = 3350; Match(STORE);
				State = 3351; Match(COMPRESS);
				State = 3357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 3352; Match(FOR);
					State = 3353;
					_la = TokenStream.LA(1);
					if ( !(_la==ARCHIVE || _la==QUERY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3355;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==HIGH || _la==LOW) {
						{
						State = 3354;
						_la = TokenStream.LA(1);
						if ( !(_la==HIGH || _la==LOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					}
				}

				State = 3365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
				case 1:
					{
					State = 3360;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO) {
						{
						State = 3359; Match(NO);
						}
					}

					State = 3362; Match(ROW);
					State = 3363; Match(LEVEL);
					State = 3364; Match(LOCKING);
					}
					break;
				}
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3367; Match(NO);
				State = 3368; Match(COMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_compressionContext : ParserRuleContext {
		public Prefix_compressionContext prefix_compression() {
			return GetRuleContext<Prefix_compressionContext>(0);
		}
		public Advanced_index_compressionContext advanced_index_compression() {
			return GetRuleContext<Advanced_index_compressionContext>(0);
		}
		public Index_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_compressionContext index_compression() {
		Index_compressionContext _localctx = new Index_compressionContext(Context, State);
		EnterRule(_localctx, 298, RULE_index_compression);
		try {
			State = 3373;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3371; prefix_compression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3372; advanced_index_compression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefix_compressionContext : ParserRuleContext {
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode NOCOMPRESS() { return GetToken(PlSqlParser.NOCOMPRESS, 0); }
		public Prefix_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefix_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefix_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prefix_compressionContext prefix_compression() {
		Prefix_compressionContext _localctx = new Prefix_compressionContext(Context, State);
		EnterRule(_localctx, 300, RULE_prefix_compression);
		int _la;
		try {
			State = 3380;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3375; Match(COMPRESS);
				State = 3377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 742)) & ~0x3f) == 0 && ((1L << (_la - 742)) & ((1L << (UNSIGNED_INTEGER - 742)) | (1L << (APPROXIMATE_NUM_LIT - 742)) | (1L << (PLUS_SIGN - 742)) | (1L << (MINUS_SIGN - 742)))) != 0)) {
					{
					State = 3376; integer();
					}
				}

				}
				break;
			case NOCOMPRESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3379; Match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Advanced_index_compressionContext : ParserRuleContext {
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public ITerminalNode ADVANCED() { return GetToken(PlSqlParser.ADVANCED, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode NOCOMPRESS() { return GetToken(PlSqlParser.NOCOMPRESS, 0); }
		public Advanced_index_compressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_advanced_index_compression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdvanced_index_compression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Advanced_index_compressionContext advanced_index_compression() {
		Advanced_index_compressionContext _localctx = new Advanced_index_compressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_advanced_index_compression);
		try {
			State = 3386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3382; Match(COMPRESS);
				State = 3383; Match(ADVANCED);
				State = 3384; Match(LOW);
				}
				break;
			case NOCOMPRESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3385; Match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_partitioning_storageContext : ParserRuleContext {
		public ITerminalNode LOB() { return GetToken(PlSqlParser.LOB, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Lob_item_nameContext lob_item_name() {
			return GetRuleContext<Lob_item_nameContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Lob_segnameContext lob_segname() {
			return GetRuleContext<Lob_segnameContext>(0);
		}
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public ITerminalNode BASICFILE() { return GetToken(PlSqlParser.BASICFILE, 0); }
		public ITerminalNode SECUREFILE() { return GetToken(PlSqlParser.SECUREFILE, 0); }
		public Lob_partitioning_storageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_partitioning_storage; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_partitioning_storage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_partitioning_storageContext lob_partitioning_storage() {
		Lob_partitioning_storageContext _localctx = new Lob_partitioning_storageContext(Context, State);
		EnterRule(_localctx, 304, RULE_lob_partitioning_storage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3388; Match(LOB);
			State = 3389; Match(LEFT_PAREN);
			State = 3390; lob_item_name();
			State = 3391; Match(RIGHT_PAREN);
			State = 3392; Match(STORE);
			State = 3393; Match(AS);
			State = 3395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				State = 3394;
				_la = TokenStream.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				{
				State = 3397; lob_segname();
				State = 3402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
				case 1:
					{
					State = 3398; Match(LEFT_PAREN);
					State = 3399; tablespace_clause();
					State = 3400; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3404; Match(LEFT_PAREN);
				State = 3405; tablespace_clause();
				State = 3406; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_subpartition_clauseContext : ParserRuleContext {
		public Store_inContext store_in() {
			return GetRuleContext<Store_inContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Partition_clause_optionalContext[] partition_clause_optional() {
			return GetRuleContexts<Partition_clause_optionalContext>();
		}
		public Partition_clause_optionalContext partition_clause_optional(int i) {
			return GetRuleContext<Partition_clause_optionalContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Tablespace_clauseContext[] tablespace_clause() {
			return GetRuleContexts<Tablespace_clauseContext>();
		}
		public Tablespace_clauseContext tablespace_clause(int i) {
			return GetRuleContext<Tablespace_clauseContext>(i);
		}
		public Advanced_index_compressionContext[] advanced_index_compression() {
			return GetRuleContexts<Advanced_index_compressionContext>();
		}
		public Advanced_index_compressionContext advanced_index_compression(int i) {
			return GetRuleContext<Advanced_index_compressionContext>(i);
		}
		public Usable_clauseContext[] usable_clause() {
			return GetRuleContexts<Usable_clauseContext>();
		}
		public Usable_clauseContext usable_clause(int i) {
			return GetRuleContext<Usable_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Index_subpartition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_subpartition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_subpartition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_subpartition_clauseContext index_subpartition_clause() {
		Index_subpartition_clauseContext _localctx = new Index_subpartition_clauseContext(Context, State);
		EnterRule(_localctx, 306, RULE_index_subpartition_clause);
		int _la;
		try {
			State = 3440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STORE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3410; store_in();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3411; Match(LEFT_PAREN);
				State = 3412; partition_clause_optional();
				State = 3414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLESPACE) {
					{
					State = 3413; tablespace_clause();
					}
				}

				State = 3417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMPRESS || _la==NOCOMPRESS) {
					{
					State = 3416; advanced_index_compression();
					}
				}

				State = 3420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNUSABLE || _la==USABLE) {
					{
					State = 3419; usable_clause();
					}
				}

				State = 3435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3422; Match(COMMA);
					State = 3423; partition_clause_optional();
					State = 3425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TABLESPACE) {
						{
						State = 3424; tablespace_clause();
						}
					}

					State = 3428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMPRESS || _la==NOCOMPRESS) {
						{
						State = 3427; advanced_index_compression();
						}
					}

					State = 3431;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==UNUSABLE || _la==USABLE) {
						{
						State = 3430; usable_clause();
						}
					}

					}
					}
					State = 3437;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3438; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Usable_clauseContext : ParserRuleContext {
		public ITerminalNode USABLE() { return GetToken(PlSqlParser.USABLE, 0); }
		public ITerminalNode UNUSABLE() { return GetToken(PlSqlParser.UNUSABLE, 0); }
		public Usable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usable_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsable_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Usable_clauseContext usable_clause() {
		Usable_clauseContext _localctx = new Usable_clauseContext(Context, State);
		EnterRule(_localctx, 308, RULE_usable_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3442;
			_la = TokenStream.LA(1);
			if ( !(_la==UNUSABLE || _la==USABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partition_quantityContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Hash_partition_quantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partition_quantity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_partition_quantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partition_quantityContext hash_partition_quantity() {
		Hash_partition_quantityContext _localctx = new Hash_partition_quantityContext(Context, State);
		EnterRule(_localctx, 310, RULE_hash_partition_quantity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3444; Match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varray_itemContext : ParserRuleContext {
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public Varray_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varray_item; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarray_item(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Varray_itemContext varray_item() {
		Varray_itemContext _localctx = new Varray_itemContext(Context, State);
		EnterRule(_localctx, 312, RULE_varray_item);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3446; Match(REGULAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partial_index_clauseContext : ParserRuleContext {
		public ITerminalNode INDEXING() { return GetToken(PlSqlParser.INDEXING, 0); }
		public ITerminalNode PARTIAL() { return GetToken(PlSqlParser.PARTIAL, 0); }
		public ITerminalNode FULL() { return GetToken(PlSqlParser.FULL, 0); }
		public Partial_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartial_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partial_index_clauseContext partial_index_clause() {
		Partial_index_clauseContext _localctx = new Partial_index_clauseContext(Context, State);
		EnterRule(_localctx, 314, RULE_partial_index_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3448; Match(INDEXING);
			State = 3449;
			_la = TokenStream.LA(1);
			if ( !(_la==FULL || _la==PARTIAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parallel_clauseContext : ParserRuleContext {
		public ITerminalNode NOPARALLEL() { return GetToken(PlSqlParser.NOPARALLEL, 0); }
		public ITerminalNode PARALLEL() { return GetToken(PlSqlParser.PARALLEL, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Parallel_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parallel_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParallel_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parallel_clauseContext parallel_clause() {
		Parallel_clauseContext _localctx = new Parallel_clauseContext(Context, State);
		EnterRule(_localctx, 316, RULE_parallel_clause);
		try {
			State = 3454;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOPARALLEL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3451; Match(NOPARALLEL);
				}
				break;
			case PARALLEL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3452; Match(PARALLEL);
				State = 3453; integer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Domain_index_clauseContext : ParserRuleContext {
		public IndextypeContext indextype() {
			return GetRuleContext<IndextypeContext>(0);
		}
		public Local_domain_index_clauseContext local_domain_index_clause() {
			return GetRuleContext<Local_domain_index_clauseContext>(0);
		}
		public Parallel_clauseContext parallel_clause() {
			return GetRuleContext<Parallel_clauseContext>(0);
		}
		public ITerminalNode PARAMETERS() { return GetToken(PlSqlParser.PARAMETERS, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Odci_parametersContext odci_parameters() {
			return GetRuleContext<Odci_parametersContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Domain_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_domain_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDomain_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Domain_index_clauseContext domain_index_clause() {
		Domain_index_clauseContext _localctx = new Domain_index_clauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_domain_index_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3456; indextype();
			State = 3458;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
			case 1:
				{
				State = 3457; local_domain_index_clause();
				}
				break;
			}
			State = 3461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				State = 3460; parallel_clause();
				}
			}

			State = 3468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				{
				State = 3463; Match(PARAMETERS);
				State = 3464; Match(LEFT_PAREN);
				State = 3465; odci_parameters();
				State = 3466; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_domain_index_clauseContext : ParserRuleContext {
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public Local_domain_index_parameters_clauseContext[] local_domain_index_parameters_clause() {
			return GetRuleContexts<Local_domain_index_parameters_clauseContext>();
		}
		public Local_domain_index_parameters_clauseContext local_domain_index_parameters_clause(int i) {
			return GetRuleContext<Local_domain_index_parameters_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Local_domain_index_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_domain_index_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_domain_index_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_domain_index_clauseContext local_domain_index_clause() {
		Local_domain_index_clauseContext _localctx = new Local_domain_index_clauseContext(Context, State);
		EnterRule(_localctx, 320, RULE_local_domain_index_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3470; Match(LOCAL);
			State = 3472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 3471; local_domain_index_parameters_clause();
				}
			}

			State = 3478;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,390,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3474; Match(COMMA);
					State = 3475; local_domain_index_parameters_clause();
					}
					} 
				}
				State = 3480;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,390,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_domain_index_parameters_clauseContext : ParserRuleContext {
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode PARAMETERS() { return GetToken(PlSqlParser.PARAMETERS, 0); }
		public Odci_parametersContext odci_parameters() {
			return GetRuleContext<Odci_parametersContext>(0);
		}
		public Local_domain_index_parameters_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_domain_index_parameters_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_domain_index_parameters_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_domain_index_parameters_clauseContext local_domain_index_parameters_clause() {
		Local_domain_index_parameters_clauseContext _localctx = new Local_domain_index_parameters_clauseContext(Context, State);
		EnterRule(_localctx, 322, RULE_local_domain_index_parameters_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3481; Match(LEFT_PAREN);
			State = 3482; Match(PARTITION);
			State = 3483; partition_name();
			State = 3489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMETERS) {
				{
				State = 3484; Match(PARAMETERS);
				State = 3485; Match(LEFT_PAREN);
				State = 3486; odci_parameters();
				State = 3487; Match(RIGHT_PAREN);
				}
			}

			State = 3491; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Odci_parametersContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Odci_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_odci_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOdci_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Odci_parametersContext odci_parameters() {
		Odci_parametersContext _localctx = new Odci_parametersContext(Context, State);
		EnterRule(_localctx, 324, RULE_odci_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3493; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exceptions_clauseContext : ParserRuleContext {
		public ITerminalNode EXCEPTIONS() { return GetToken(PlSqlParser.EXCEPTIONS, 0); }
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public Exceptions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExceptions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exceptions_clauseContext exceptions_clause() {
		Exceptions_clauseContext _localctx = new Exceptions_clauseContext(Context, State);
		EnterRule(_localctx, 326, RULE_exceptions_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3495; Match(EXCEPTIONS);
			State = 3496; Match(INTO);
			State = 3497; table_fullname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tablespaceContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
			return GetRuleContext<Permanent_tablespace_clauseContext>(0);
		}
		public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
			return GetRuleContext<Temporary_tablespace_clauseContext>(0);
		}
		public Undo_tablespace_clauseContext undo_tablespace_clause() {
			return GetRuleContext<Undo_tablespace_clauseContext>(0);
		}
		public ITerminalNode BIGFILE() { return GetToken(PlSqlParser.BIGFILE, 0); }
		public ITerminalNode SMALLFILE() { return GetToken(PlSqlParser.SMALLFILE, 0); }
		public Create_tablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_tablespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_tablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tablespaceContext create_tablespace() {
		Create_tablespaceContext _localctx = new Create_tablespaceContext(Context, State);
		EnterRule(_localctx, 328, RULE_create_tablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3499; Match(CREATE);
			State = 3501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BIGFILE || _la==SMALLFILE) {
				{
				State = 3500;
				_la = TokenStream.LA(1);
				if ( !(_la==BIGFILE || _la==SMALLFILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE:
				{
				State = 3503; permanent_tablespace_clause();
				}
				break;
			case TEMPORARY:
				{
				State = 3504; temporary_tablespace_clause();
				}
				break;
			case UNDO:
				{
				State = 3505; undo_tablespace_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3508; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Permanent_tablespace_clauseContext : ParserRuleContext {
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public Datafile_specificationContext datafile_specification() {
			return GetRuleContext<Datafile_specificationContext>(0);
		}
		public ITerminalNode[] MINIMUM() { return GetTokens(PlSqlParser.MINIMUM); }
		public ITerminalNode MINIMUM(int i) {
			return GetToken(PlSqlParser.MINIMUM, i);
		}
		public ITerminalNode[] EXTENT() { return GetTokens(PlSqlParser.EXTENT); }
		public ITerminalNode EXTENT(int i) {
			return GetToken(PlSqlParser.EXTENT, i);
		}
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode[] BLOCKSIZE() { return GetTokens(PlSqlParser.BLOCKSIZE); }
		public ITerminalNode BLOCKSIZE(int i) {
			return GetToken(PlSqlParser.BLOCKSIZE, i);
		}
		public Logging_clauseContext[] logging_clause() {
			return GetRuleContexts<Logging_clauseContext>();
		}
		public Logging_clauseContext logging_clause(int i) {
			return GetRuleContext<Logging_clauseContext>(i);
		}
		public ITerminalNode[] FORCE() { return GetTokens(PlSqlParser.FORCE); }
		public ITerminalNode FORCE(int i) {
			return GetToken(PlSqlParser.FORCE, i);
		}
		public ITerminalNode[] LOGGING() { return GetTokens(PlSqlParser.LOGGING); }
		public ITerminalNode LOGGING(int i) {
			return GetToken(PlSqlParser.LOGGING, i);
		}
		public ITerminalNode[] ENCRYPTION() { return GetTokens(PlSqlParser.ENCRYPTION); }
		public ITerminalNode ENCRYPTION(int i) {
			return GetToken(PlSqlParser.ENCRYPTION, i);
		}
		public Tablespace_encryption_specContext[] tablespace_encryption_spec() {
			return GetRuleContexts<Tablespace_encryption_specContext>();
		}
		public Tablespace_encryption_specContext tablespace_encryption_spec(int i) {
			return GetRuleContext<Tablespace_encryption_specContext>(i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(PlSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(PlSqlParser.DEFAULT, i);
		}
		public Extent_management_clauseContext[] extent_management_clause() {
			return GetRuleContexts<Extent_management_clauseContext>();
		}
		public Extent_management_clauseContext extent_management_clause(int i) {
			return GetRuleContext<Extent_management_clauseContext>(i);
		}
		public Segment_management_clauseContext[] segment_management_clause() {
			return GetRuleContexts<Segment_management_clauseContext>();
		}
		public Segment_management_clauseContext segment_management_clause(int i) {
			return GetRuleContext<Segment_management_clauseContext>(i);
		}
		public Flashback_mode_clauseContext[] flashback_mode_clause() {
			return GetRuleContexts<Flashback_mode_clauseContext>();
		}
		public Flashback_mode_clauseContext flashback_mode_clause(int i) {
			return GetRuleContext<Flashback_mode_clauseContext>(i);
		}
		public ITerminalNode[] ONLINE() { return GetTokens(PlSqlParser.ONLINE); }
		public ITerminalNode ONLINE(int i) {
			return GetToken(PlSqlParser.ONLINE, i);
		}
		public ITerminalNode[] OFFLINE() { return GetTokens(PlSqlParser.OFFLINE); }
		public ITerminalNode OFFLINE(int i) {
			return GetToken(PlSqlParser.OFFLINE, i);
		}
		public Permanent_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_permanent_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPermanent_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Permanent_tablespace_clauseContext permanent_tablespace_clause() {
		Permanent_tablespace_clauseContext _localctx = new Permanent_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 330, RULE_permanent_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3510; tablespace_clause();
			State = 3512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATAFILE) {
				{
				State = 3511; datafile_specification();
				}
			}

			State = 3531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BLOCKSIZE || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (DEFAULT - 140)) | (1L << (ENCRYPTION - 140)) | (1L << (EXTENT - 140)))) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (FILESYSTEM_LIKE_LOGGING - 205)) | (1L << (FLASHBACK - 205)) | (1L << (FORCE - 205)))) != 0) || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (LOGGING - 315)) | (1L << (MINIMUM - 315)) | (1L << (NOLOGGING - 315)))) != 0) || _la==OFFLINE || _la==ONLINE || _la==SEGMENT) {
				{
				State = 3529;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINIMUM:
					{
					State = 3514; Match(MINIMUM);
					State = 3515; Match(EXTENT);
					State = 3516; size_clause();
					}
					break;
				case BLOCKSIZE:
					{
					State = 3517; Match(BLOCKSIZE);
					State = 3518; size_clause();
					}
					break;
				case FILESYSTEM_LIKE_LOGGING:
				case LOGGING:
				case NOLOGGING:
					{
					State = 3519; logging_clause();
					}
					break;
				case FORCE:
					{
					State = 3520; Match(FORCE);
					State = 3521; Match(LOGGING);
					}
					break;
				case OFFLINE:
				case ONLINE:
					{
					State = 3522;
					_la = TokenStream.LA(1);
					if ( !(_la==OFFLINE || _la==ONLINE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case ENCRYPTION:
					{
					State = 3523; Match(ENCRYPTION);
					State = 3524; tablespace_encryption_spec();
					}
					break;
				case DEFAULT:
					{
					State = 3525; Match(DEFAULT);
					}
					break;
				case EXTENT:
					{
					State = 3526; extent_management_clause();
					}
					break;
				case SEGMENT:
					{
					State = 3527; segment_management_clause();
					}
					break;
				case FLASHBACK:
					{
					State = 3528; flashback_mode_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 3533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_encryption_specContext : ParserRuleContext {
		public IToken encrypt_algorithm;
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_encryption_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_encryption_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_encryption_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_encryption_specContext tablespace_encryption_spec() {
		Tablespace_encryption_specContext _localctx = new Tablespace_encryption_specContext(Context, State);
		EnterRule(_localctx, 332, RULE_tablespace_encryption_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3534; Match(USING);
			State = 3535; _localctx.encrypt_algorithm = Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logging_clauseContext : ParserRuleContext {
		public ITerminalNode LOGGING() { return GetToken(PlSqlParser.LOGGING, 0); }
		public ITerminalNode NOLOGGING() { return GetToken(PlSqlParser.NOLOGGING, 0); }
		public ITerminalNode FILESYSTEM_LIKE_LOGGING() { return GetToken(PlSqlParser.FILESYSTEM_LIKE_LOGGING, 0); }
		public Logging_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logging_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogging_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logging_clauseContext logging_clause() {
		Logging_clauseContext _localctx = new Logging_clauseContext(Context, State);
		EnterRule(_localctx, 334, RULE_logging_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3537;
			_la = TokenStream.LA(1);
			if ( !(_la==FILESYSTEM_LIKE_LOGGING || _la==LOGGING || _la==NOLOGGING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extent_management_clauseContext : ParserRuleContext {
		public ITerminalNode EXTENT() { return GetToken(PlSqlParser.EXTENT, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(PlSqlParser.MANAGEMENT, 0); }
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode AUTOALLOCATE() { return GetToken(PlSqlParser.AUTOALLOCATE, 0); }
		public ITerminalNode UNIFORM() { return GetToken(PlSqlParser.UNIFORM, 0); }
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Extent_management_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extent_management_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtent_management_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extent_management_clauseContext extent_management_clause() {
		Extent_management_clauseContext _localctx = new Extent_management_clauseContext(Context, State);
		EnterRule(_localctx, 336, RULE_extent_management_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3539; Match(EXTENT);
			State = 3540; Match(MANAGEMENT);
			State = 3541; Match(LOCAL);
			State = 3548;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AUTOALLOCATE:
				{
				State = 3542; Match(AUTOALLOCATE);
				}
				break;
			case UNIFORM:
				{
				State = 3543; Match(UNIFORM);
				State = 3546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIZE) {
					{
					State = 3544; Match(SIZE);
					State = 3545; size_clause();
					}
				}

				}
				break;
			case BLOCKSIZE:
			case DEFAULT:
			case ENCRYPTION:
			case EXTENT:
			case FILESYSTEM_LIKE_LOGGING:
			case FLASHBACK:
			case FORCE:
			case LOGGING:
			case MINIMUM:
			case NOLOGGING:
			case OFFLINE:
			case ONLINE:
			case RETENTION:
			case SEGMENT:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Segment_management_clauseContext : ParserRuleContext {
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode SPACE_KEYWORD() { return GetToken(PlSqlParser.SPACE_KEYWORD, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(PlSqlParser.MANAGEMENT, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public ITerminalNode MANUAL() { return GetToken(PlSqlParser.MANUAL, 0); }
		public Segment_management_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_segment_management_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSegment_management_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Segment_management_clauseContext segment_management_clause() {
		Segment_management_clauseContext _localctx = new Segment_management_clauseContext(Context, State);
		EnterRule(_localctx, 338, RULE_segment_management_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3550; Match(SEGMENT);
			State = 3551; Match(SPACE_KEYWORD);
			State = 3552; Match(MANAGEMENT);
			State = 3553;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTO || _la==MANUAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_mode_clauseContext : ParserRuleContext {
		public ITerminalNode FLASHBACK() { return GetToken(PlSqlParser.FLASHBACK, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public Flashback_mode_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_mode_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_mode_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_mode_clauseContext flashback_mode_clause() {
		Flashback_mode_clauseContext _localctx = new Flashback_mode_clauseContext(Context, State);
		EnterRule(_localctx, 340, RULE_flashback_mode_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3555; Match(FLASHBACK);
			State = 3556;
			_la = TokenStream.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Temporary_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public Tempfile_specificationContext tempfile_specification() {
			return GetRuleContext<Tempfile_specificationContext>(0);
		}
		public Tablespace_group_clauseContext tablespace_group_clause() {
			return GetRuleContext<Tablespace_group_clauseContext>(0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return GetRuleContext<Extent_management_clauseContext>(0);
		}
		public Temporary_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporary_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemporary_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Temporary_tablespace_clauseContext temporary_tablespace_clause() {
		Temporary_tablespace_clauseContext _localctx = new Temporary_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 342, RULE_temporary_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3558; Match(TEMPORARY);
			State = 3559; tablespace_clause();
			State = 3561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPFILE) {
				{
				State = 3560; tempfile_specification();
				}
			}

			State = 3564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLESPACE) {
				{
				State = 3563; tablespace_group_clause();
				}
			}

			State = 3567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT) {
				{
				State = 3566; extent_management_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_group_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Tablespace_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_group_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_group_clauseContext tablespace_group_clause() {
		Tablespace_group_clauseContext _localctx = new Tablespace_group_clauseContext(Context, State);
		EnterRule(_localctx, 344, RULE_tablespace_group_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3569; Match(TABLESPACE);
			State = 3570; Match(GROUP);
			State = 3571;
			_la = TokenStream.LA(1);
			if ( !(_la==CHAR_STRING || _la==REGULAR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Undo_tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode UNDO() { return GetToken(PlSqlParser.UNDO, 0); }
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public Datafile_specificationContext datafile_specification() {
			return GetRuleContext<Datafile_specificationContext>(0);
		}
		public Extent_management_clauseContext extent_management_clause() {
			return GetRuleContext<Extent_management_clauseContext>(0);
		}
		public Tablespace_retention_clauseContext tablespace_retention_clause() {
			return GetRuleContext<Tablespace_retention_clauseContext>(0);
		}
		public Undo_tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undo_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUndo_tablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Undo_tablespace_clauseContext undo_tablespace_clause() {
		Undo_tablespace_clauseContext _localctx = new Undo_tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 346, RULE_undo_tablespace_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3573; Match(UNDO);
			State = 3574; tablespace_clause();
			State = 3576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DATAFILE) {
				{
				State = 3575; datafile_specification();
				}
			}

			State = 3579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT) {
				{
				State = 3578; extent_management_clause();
				}
			}

			State = 3582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETENTION) {
				{
				State = 3581; tablespace_retention_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_retention_clauseContext : ParserRuleContext {
		public ITerminalNode RETENTION() { return GetToken(PlSqlParser.RETENTION, 0); }
		public ITerminalNode GUARANTEE() { return GetToken(PlSqlParser.GUARANTEE, 0); }
		public ITerminalNode NOGUARANTEE() { return GetToken(PlSqlParser.NOGUARANTEE, 0); }
		public Tablespace_retention_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_retention_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_retention_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_retention_clauseContext tablespace_retention_clause() {
		Tablespace_retention_clauseContext _localctx = new Tablespace_retention_clauseContext(Context, State);
		EnterRule(_localctx, 348, RULE_tablespace_retention_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3584; Match(RETENTION);
			State = 3585;
			_la = TokenStream.LA(1);
			if ( !(_la==GUARANTEE || _la==NOGUARANTEE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datafile_specificationContext : ParserRuleContext {
		public ITerminalNode DATAFILE() { return GetToken(PlSqlParser.DATAFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return GetRuleContext<Datafile_tempfile_specContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public Datafile_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datafile_specification; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatafile_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datafile_specificationContext datafile_specification() {
		Datafile_specificationContext _localctx = new Datafile_specificationContext(Context, State);
		EnterRule(_localctx, 350, RULE_datafile_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3587; Match(DATAFILE);
			{
			State = 3589;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3588; Match(COMMA);
				}
			}

			State = 3591; datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tempfile_specificationContext : ParserRuleContext {
		public ITerminalNode TEMPFILE() { return GetToken(PlSqlParser.TEMPFILE, 0); }
		public Datafile_tempfile_specContext datafile_tempfile_spec() {
			return GetRuleContext<Datafile_tempfile_specContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public Tempfile_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tempfile_specification; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTempfile_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tempfile_specificationContext tempfile_specification() {
		Tempfile_specificationContext _localctx = new Tempfile_specificationContext(Context, State);
		EnterRule(_localctx, 352, RULE_tempfile_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3593; Match(TEMPFILE);
			{
			State = 3595;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3594; Match(COMMA);
				}
			}

			State = 3597; datafile_tempfile_spec();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datafile_tempfile_specContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public Autoextend_clauseContext autoextend_clause() {
			return GetRuleContext<Autoextend_clauseContext>(0);
		}
		public Datafile_tempfile_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datafile_tempfile_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatafile_tempfile_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datafile_tempfile_specContext datafile_tempfile_spec() {
		Datafile_tempfile_specContext _localctx = new Datafile_tempfile_specContext(Context, State);
		EnterRule(_localctx, 354, RULE_datafile_tempfile_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 3599; Match(CHAR_STRING);
				}
			}

			State = 3604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 3602; Match(SIZE);
				State = 3603; size_clause();
				}
			}

			State = 3607;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 3606; Match(REUSE);
				}
			}

			State = 3610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND) {
				{
				State = 3609; autoextend_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Redo_log_file_specContext : ParserRuleContext {
		public ITerminalNode DATAFILE() { return GetToken(PlSqlParser.DATAFILE, 0); }
		public ITerminalNode[] CHAR_STRING() { return GetTokens(PlSqlParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(PlSqlParser.CHAR_STRING, i);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode BLOCKSIZE() { return GetToken(PlSqlParser.BLOCKSIZE, 0); }
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Redo_log_file_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redo_log_file_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedo_log_file_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Redo_log_file_specContext redo_log_file_spec() {
		Redo_log_file_specContext _localctx = new Redo_log_file_specContext(Context, State);
		EnterRule(_localctx, 356, RULE_redo_log_file_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3612; Match(DATAFILE);
			State = 3624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_STRING:
				{
				State = 3613; Match(CHAR_STRING);
				}
				break;
			case LEFT_PAREN:
				{
				State = 3614; Match(LEFT_PAREN);
				State = 3619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3616;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 3615; Match(COMMA);
						}
					}

					State = 3618; Match(CHAR_STRING);
					}
					}
					State = 3621;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHAR_STRING || _la==COMMA );
				State = 3623; Match(RIGHT_PAREN);
				}
				break;
			case Eof:
			case BLOCKSIZE:
			case REUSE:
			case SIZE:
				break;
			default:
				break;
			}
			State = 3628;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIZE) {
				{
				State = 3626; Match(SIZE);
				State = 3627; size_clause();
				}
			}

			State = 3632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLOCKSIZE) {
				{
				State = 3630; Match(BLOCKSIZE);
				State = 3631; size_clause();
				}
			}

			State = 3635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REUSE) {
				{
				State = 3634; Match(REUSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Autoextend_clauseContext : ParserRuleContext {
		public ITerminalNode AUTOEXTEND() { return GetToken(PlSqlParser.AUTOEXTEND, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode NEXT() { return GetToken(PlSqlParser.NEXT, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Maxsize_clauseContext maxsize_clause() {
			return GetRuleContext<Maxsize_clauseContext>(0);
		}
		public Autoextend_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_autoextend_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoextend_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Autoextend_clauseContext autoextend_clause() {
		Autoextend_clauseContext _localctx = new Autoextend_clauseContext(Context, State);
		EnterRule(_localctx, 358, RULE_autoextend_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3637; Match(AUTOEXTEND);
			State = 3647;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OFF:
				{
				State = 3638; Match(OFF);
				}
				break;
			case ON:
				{
				State = 3639; Match(ON);
				State = 3642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT) {
					{
					State = 3640; Match(NEXT);
					State = 3641; size_clause();
					}
				}

				State = 3645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MAXSIZE) {
					{
					State = 3644; maxsize_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Maxsize_clauseContext : ParserRuleContext {
		public ITerminalNode MAXSIZE() { return GetToken(PlSqlParser.MAXSIZE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public Size_clauseContext size_clause() {
			return GetRuleContext<Size_clauseContext>(0);
		}
		public Maxsize_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxsize_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMaxsize_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Maxsize_clauseContext maxsize_clause() {
		Maxsize_clauseContext _localctx = new Maxsize_clauseContext(Context, State);
		EnterRule(_localctx, 360, RULE_maxsize_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3649; Match(MAXSIZE);
			State = 3652;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNLIMITED:
				{
				State = 3650; Match(UNLIMITED);
				}
				break;
			case UNSIGNED_INTEGER:
				{
				State = 3651; size_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return GetRuleContext<Subquery_basic_elementsContext>(0);
		}
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 362, RULE_subquery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3654; subquery_basic_elements();
			State = 3658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				State = 3655; subquery_operation_part();
				}
				}
				State = 3660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_tableContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public Relational_tableContext relational_table() {
			return GetRuleContext<Relational_tableContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(PlSqlParser.GLOBAL, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_tableContext create_table() {
		Create_tableContext _localctx = new Create_tableContext(Context, State);
		EnterRule(_localctx, 364, RULE_create_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3661; Match(CREATE);
			State = 3664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL) {
				{
				State = 3662; Match(GLOBAL);
				State = 3663; Match(TEMPORARY);
				}
			}

			State = 3666; Match(TABLE);
			State = 3667; table_fullname();
			{
			State = 3668; relational_table();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_tableContext : ParserRuleContext {
		public Table_propertiesContext table_properties() {
			return GetRuleContext<Table_propertiesContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Relational_propertiesContext relational_properties() {
			return GetRuleContext<Relational_propertiesContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public Physical_propertiesContext physical_properties() {
			return GetRuleContext<Physical_propertiesContext>(0);
		}
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode PRESERVE() { return GetToken(PlSqlParser.PRESERVE, 0); }
		public Relational_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_tableContext relational_table() {
		Relational_tableContext _localctx = new Relational_tableContext(Context, State);
		EnterRule(_localctx, 366, RULE_relational_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3674;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				{
				State = 3670; Match(LEFT_PAREN);
				State = 3671; relational_properties();
				State = 3672; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 3682;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3676; Match(ON);
				State = 3677; Match(COMMIT);
				State = 3679;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DELETE || _la==PRESERVE) {
					{
					State = 3678;
					_la = TokenStream.LA(1);
					if ( !(_la==DELETE || _la==PRESERVE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3681; Match(ROWS);
				}
			}

			State = 3685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				{
				State = 3684; physical_properties();
				}
				break;
			}
			State = 3687; table_properties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_propertiesContext : ParserRuleContext {
		public Relational_propertyContext[] relational_property() {
			return GetRuleContexts<Relational_propertyContext>();
		}
		public Relational_propertyContext relational_property(int i) {
			return GetRuleContext<Relational_propertyContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Relational_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_propertiesContext relational_properties() {
		Relational_propertiesContext _localctx = new Relational_propertiesContext(Context, State);
		EnterRule(_localctx, 368, RULE_relational_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3689; relational_property();
			State = 3694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3690; Match(COMMA);
				State = 3691; relational_property();
				}
				}
				State = 3696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_propertyContext : ParserRuleContext {
		public Column_definitionContext column_definition() {
			return GetRuleContext<Column_definitionContext>(0);
		}
		public Virtual_column_definitionContext virtual_column_definition() {
			return GetRuleContext<Virtual_column_definitionContext>(0);
		}
		public Period_definitionContext period_definition() {
			return GetRuleContext<Period_definitionContext>(0);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return GetRuleContext<Out_of_line_constraintContext>(0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return GetRuleContext<Out_of_line_ref_constraintContext>(0);
		}
		public Supplemental_logging_propsContext supplemental_logging_props() {
			return GetRuleContext<Supplemental_logging_propsContext>(0);
		}
		public Relational_propertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_property; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_propertyContext relational_property() {
		Relational_propertyContext _localctx = new Relational_propertyContext(Context, State);
		EnterRule(_localctx, 370, RULE_relational_property);
		try {
			State = 3705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,429,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3697; column_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3698; virtual_column_definition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3699; period_definition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3702;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,428,Context) ) {
				case 1:
					{
					State = 3700; out_of_line_constraint();
					}
					break;
				case 2:
					{
					State = 3701; out_of_line_ref_constraint();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3704; supplemental_logging_props();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_propertiesContext : ParserRuleContext {
		public Column_propertiesContext column_properties() {
			return GetRuleContext<Column_propertiesContext>(0);
		}
		public Indexing_clauseContext indexing_clause() {
			return GetRuleContext<Indexing_clauseContext>(0);
		}
		public Table_partitioning_clausesContext table_partitioning_clauses() {
			return GetRuleContext<Table_partitioning_clausesContext>(0);
		}
		public Attribute_clustering_clauseContext attribute_clustering_clause() {
			return GetRuleContext<Attribute_clustering_clauseContext>(0);
		}
		public ITerminalNode RESULT_CACHE() { return GetToken(PlSqlParser.RESULT_CACHE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode MODE() { return GetToken(PlSqlParser.MODE, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Parallel_clauseContext parallel_clause() {
			return GetRuleContext<Parallel_clauseContext>(0);
		}
		public Enable_disable_clauseContext[] enable_disable_clause() {
			return GetRuleContexts<Enable_disable_clauseContext>();
		}
		public Enable_disable_clauseContext enable_disable_clause(int i) {
			return GetRuleContext<Enable_disable_clauseContext>(i);
		}
		public Row_movement_clauseContext row_movement_clause() {
			return GetRuleContext<Row_movement_clauseContext>(0);
		}
		public Flashback_archive_clauseContext flashback_archive_clause() {
			return GetRuleContext<Flashback_archive_clauseContext>(0);
		}
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode ARCHIVAL() { return GetToken(PlSqlParser.ARCHIVAL, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode CACHE() { return GetToken(PlSqlParser.CACHE, 0); }
		public ITerminalNode NOCACHE() { return GetToken(PlSqlParser.NOCACHE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode ROWDEPENDENCIES() { return GetToken(PlSqlParser.ROWDEPENDENCIES, 0); }
		public ITerminalNode NOROWDEPENDENCIES() { return GetToken(PlSqlParser.NOROWDEPENDENCIES, 0); }
		public Table_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_propertiesContext table_properties() {
		Table_propertiesContext _localctx = new Table_propertiesContext(Context, State);
		EnterRule(_localctx, 372, RULE_table_properties);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3708;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				{
				State = 3707; column_properties();
				}
				break;
			}
			State = 3711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXING) {
				{
				State = 3710; indexing_clause();
				}
			}

			State = 3714;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
			case 1:
				{
				State = 3713; table_partitioning_clauses();
				}
				break;
			}
			State = 3717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CLUSTERING) {
				{
				State = 3716; attribute_clustering_clause();
				}
			}

			State = 3720;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CACHE || _la==NOCACHE) {
				{
				State = 3719;
				_la = TokenStream.LA(1);
				if ( !(_la==CACHE || _la==NOCACHE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,435,Context) ) {
			case 1:
				{
				State = 3722; Match(RESULT_CACHE);
				State = 3723; Match(LEFT_PAREN);
				State = 3724; Match(MODE);
				State = 3725;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==FORCE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3726; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 3730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOPARALLEL || _la==PARALLEL) {
				{
				State = 3729; parallel_clause();
				}
			}

			State = 3733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) {
				{
				State = 3732;
				_la = TokenStream.LA(1);
				if ( !(_la==NOROWDEPENDENCIES || _la==ROWDEPENDENCIES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3738;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,438,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3735; enable_disable_clause();
					}
					} 
				}
				State = 3740;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,438,Context);
			}
			State = 3742;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
			case 1:
				{
				State = 3741; row_movement_clause();
				}
				break;
			}
			State = 3745;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,440,Context) ) {
			case 1:
				{
				State = 3744; flashback_archive_clause();
				}
				break;
			}
			State = 3749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				{
				State = 3747; Match(ROW);
				State = 3748; Match(ARCHIVAL);
				}
				break;
			}
			State = 3753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 3751; Match(AS);
				State = 3752; subquery();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_archive_clauseContext : ParserRuleContext {
		public ITerminalNode FLASHBACK() { return GetToken(PlSqlParser.FLASHBACK, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public Flashback_archive_nameContext flashback_archive_name() {
			return GetRuleContext<Flashback_archive_nameContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Flashback_archive_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_archive_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_archive_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_archive_clauseContext flashback_archive_clause() {
		Flashback_archive_clauseContext _localctx = new Flashback_archive_clauseContext(Context, State);
		EnterRule(_localctx, 374, RULE_flashback_archive_clause);
		try {
			State = 3763;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLASHBACK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3755; Match(FLASHBACK);
				State = 3756; Match(ARCHIVE);
				State = 3758;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
				case 1:
					{
					State = 3757; flashback_archive_name();
					}
					break;
				}
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3760; Match(NO);
				State = 3761; Match(FLASHBACK);
				State = 3762; Match(ARCHIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Row_movement_clauseContext : ParserRuleContext {
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode MOVEMENT() { return GetToken(PlSqlParser.MOVEMENT, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public Row_movement_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row_movement_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow_movement_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Row_movement_clauseContext row_movement_clause() {
		Row_movement_clauseContext _localctx = new Row_movement_clauseContext(Context, State);
		EnterRule(_localctx, 376, RULE_row_movement_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3765;
			_la = TokenStream.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3766; Match(ROW);
			State = 3767; Match(MOVEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_clustering_clauseContext : ParserRuleContext {
		public ITerminalNode CLUSTERING() { return GetToken(PlSqlParser.CLUSTERING, 0); }
		public Cluster_clauseContext cluster_clause() {
			return GetRuleContext<Cluster_clauseContext>(0);
		}
		public Zonemap_clauseContext zonemap_clause() {
			return GetRuleContext<Zonemap_clauseContext>(0);
		}
		public Clustering_joinContext clustering_join() {
			return GetRuleContext<Clustering_joinContext>(0);
		}
		public Clustering_whenContext clustering_when() {
			return GetRuleContext<Clustering_whenContext>(0);
		}
		public Attribute_clustering_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_clustering_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_clustering_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_clustering_clauseContext attribute_clustering_clause() {
		Attribute_clustering_clauseContext _localctx = new Attribute_clustering_clauseContext(Context, State);
		EnterRule(_localctx, 378, RULE_attribute_clustering_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3769; Match(CLUSTERING);
			State = 3771;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 3770; clustering_join();
				}
			}

			State = 3773; cluster_clause();
			State = 3775;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO || _la==YES) {
				{
				State = 3774; clustering_when();
				}
			}

			State = 3777; zonemap_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clustering_joinContext : ParserRuleContext {
		public Table_fullnameContext[] table_fullname() {
			return GetRuleContexts<Table_fullnameContext>();
		}
		public Table_fullnameContext table_fullname(int i) {
			return GetRuleContext<Table_fullnameContext>(i);
		}
		public ITerminalNode JOIN() { return GetToken(PlSqlParser.JOIN, 0); }
		public Clustering_joinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustering_join; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustering_join(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clustering_joinContext clustering_join() {
		Clustering_joinContext _localctx = new Clustering_joinContext(Context, State);
		EnterRule(_localctx, 380, RULE_clustering_join);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3779; table_fullname();
			State = 3780; Match(JOIN);
			State = 3781; table_fullname();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cluster_clauseContext : ParserRuleContext {
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public Clustering_columnsContext clustering_columns() {
			return GetRuleContext<Clustering_columnsContext>(0);
		}
		public ITerminalNode LINEAR() { return GetToken(PlSqlParser.LINEAR, 0); }
		public ITerminalNode INTERVLEAVED() { return GetToken(PlSqlParser.INTERVLEAVED, 0); }
		public Cluster_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cluster_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCluster_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cluster_clauseContext cluster_clause() {
		Cluster_clauseContext _localctx = new Cluster_clauseContext(Context, State);
		EnterRule(_localctx, 382, RULE_cluster_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3783; Match(BY);
			State = 3785;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERVLEAVED || _la==LINEAR) {
				{
				State = 3784;
				_la = TokenStream.LA(1);
				if ( !(_la==INTERVLEAVED || _la==LINEAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3787; Match(ORDER);
			State = 3788; clustering_columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clustering_columnsContext : ParserRuleContext {
		public Clustering_columns_groupContext clustering_columns_group() {
			return GetRuleContext<Clustering_columns_groupContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Clustering_columnsContext[] clustering_columns() {
			return GetRuleContexts<Clustering_columnsContext>();
		}
		public Clustering_columnsContext clustering_columns(int i) {
			return GetRuleContext<Clustering_columnsContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Clustering_columnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustering_columns; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustering_columns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clustering_columnsContext clustering_columns() {
		Clustering_columnsContext _localctx = new Clustering_columnsContext(Context, State);
		EnterRule(_localctx, 384, RULE_clustering_columns);
		int _la;
		try {
			State = 3801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3790; clustering_columns_group();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3791; Match(LEFT_PAREN);
				State = 3792; clustering_columns();
				State = 3795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3793; Match(COMMA);
					State = 3794; clustering_columns();
					}
					}
					State = 3797;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 3799; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clustering_columns_groupContext : ParserRuleContext {
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Clustering_columns_groupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustering_columns_group; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustering_columns_group(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clustering_columns_groupContext clustering_columns_group() {
		Clustering_columns_groupContext _localctx = new Clustering_columns_groupContext(Context, State);
		EnterRule(_localctx, 386, RULE_clustering_columns_group);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3803; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Clustering_whenContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode LOAD() { return GetToken(PlSqlParser.LOAD, 0); }
		public ITerminalNode YES() { return GetToken(PlSqlParser.YES, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode DATA() { return GetToken(PlSqlParser.DATA, 0); }
		public ITerminalNode MOVEMENT() { return GetToken(PlSqlParser.MOVEMENT, 0); }
		public Clustering_whenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clustering_when; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClustering_when(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Clustering_whenContext clustering_when() {
		Clustering_whenContext _localctx = new Clustering_whenContext(Context, State);
		EnterRule(_localctx, 388, RULE_clustering_when);
		int _la;
		try {
			State = 3812;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 3805;
				_la = TokenStream.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3806; Match(ON);
				State = 3807; Match(LOAD);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 3808;
				_la = TokenStream.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3809; Match(ON);
				State = 3810; Match(DATA);
				State = 3811; Match(MOVEMENT);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zonemap_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(PlSqlParser.MATERIALIZED, 0); }
		public ITerminalNode ZONEMAP() { return GetToken(PlSqlParser.ZONEMAP, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Zonemap_nameContext zonemap_name() {
			return GetRuleContext<Zonemap_nameContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode WITHOUT() { return GetToken(PlSqlParser.WITHOUT, 0); }
		public Zonemap_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zonemap_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZonemap_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zonemap_clauseContext zonemap_clause() {
		Zonemap_clauseContext _localctx = new Zonemap_clauseContext(Context, State);
		EnterRule(_localctx, 390, RULE_zonemap_clause);
		try {
			State = 3824;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3814; Match(WITH);
				State = 3815; Match(MATERIALIZED);
				State = 3816; Match(ZONEMAP);
				State = 3817; Match(LEFT_PAREN);
				State = 3818; zonemap_name();
				State = 3819; Match(RIGHT_PAREN);
				}
				break;
			case WITHOUT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3821; Match(WITHOUT);
				State = 3822; Match(MATERIALIZED);
				State = 3823; Match(ZONEMAP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_disable_clauseContext : ParserRuleContext {
		public Exceptions_clauseContext exceptions_clause() {
			return GetRuleContext<Exceptions_clauseContext>(0);
		}
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode PRIMARY() { return GetToken(PlSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Using_index_clauseContext using_index_clause() {
			return GetRuleContext<Using_index_clauseContext>(0);
		}
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode VALIDATE() { return GetToken(PlSqlParser.VALIDATE, 0); }
		public ITerminalNode NOVALIDATE() { return GetToken(PlSqlParser.NOVALIDATE, 0); }
		public Enable_disable_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_disable_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_disable_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_disable_clauseContext enable_disable_clause() {
		Enable_disable_clauseContext _localctx = new Enable_disable_clauseContext(Context, State);
		EnterRule(_localctx, 392, RULE_enable_disable_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3826;
			_la = TokenStream.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOVALIDATE || _la==VALIDATE) {
				{
				State = 3827;
				_la = TokenStream.LA(1);
				if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3836;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE:
				{
				State = 3830; Match(UNIQUE);
				State = 3831; paren_column_list();
				}
				break;
			case PRIMARY:
				{
				State = 3832; Match(PRIMARY);
				State = 3833; Match(KEY);
				}
				break;
			case CONSTRAINT:
				{
				State = 3834; Match(CONSTRAINT);
				State = 3835; constraint_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 3838; using_index_clause();
				}
			}

			State = 3841; exceptions_clause();
			State = 3843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
			case 1:
				{
				State = 3842; Match(CASCADE);
				}
				break;
			}
			State = 3848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,456,Context) ) {
			case 1:
				{
				State = 3845; Match(KEEP);
				State = 3846; Match(INDEX);
				}
				break;
			case 2:
				{
				State = 3847; Match(DROP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_partitioning_clausesContext : ParserRuleContext {
		public Range_partitionsContext range_partitions() {
			return GetRuleContext<Range_partitionsContext>(0);
		}
		public List_partitionsContext list_partitions() {
			return GetRuleContext<List_partitionsContext>(0);
		}
		public Hash_partitionsContext hash_partitions() {
			return GetRuleContext<Hash_partitionsContext>(0);
		}
		public Composite_range_partitionsContext composite_range_partitions() {
			return GetRuleContext<Composite_range_partitionsContext>(0);
		}
		public Composite_list_partitionsContext composite_list_partitions() {
			return GetRuleContext<Composite_list_partitionsContext>(0);
		}
		public Composite_hash_partitionsContext composite_hash_partitions() {
			return GetRuleContext<Composite_hash_partitionsContext>(0);
		}
		public Reference_partitioningContext reference_partitioning() {
			return GetRuleContext<Reference_partitioningContext>(0);
		}
		public Table_partitioning_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_partitioning_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_partitioning_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_partitioning_clausesContext table_partitioning_clauses() {
		Table_partitioning_clausesContext _localctx = new Table_partitioning_clausesContext(Context, State);
		EnterRule(_localctx, 394, RULE_table_partitioning_clauses);
		try {
			State = 3857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,457,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3850; range_partitions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3851; list_partitions();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3852; hash_partitions();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3853; composite_range_partitions();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3854; composite_list_partitions();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3855; composite_hash_partitions();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3856; reference_partitioning();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_partitionsContext : ParserRuleContext {
		public ITerminalNode[] PARTITION() { return GetTokens(PlSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(PlSqlParser.PARTITION, i);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Range_values_clauseContext range_values_clause() {
			return GetRuleContext<Range_values_clauseContext>(0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return GetRuleContext<Table_partition_descriptionContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode STORAGE() { return GetToken(PlSqlParser.STORAGE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Range_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_partitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_partitionsContext range_partitions() {
		Range_partitionsContext _localctx = new Range_partitionsContext(Context, State);
		EnterRule(_localctx, 396, RULE_range_partitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3859; Match(PARTITION);
			State = 3860; Match(BY);
			State = 3861; Match(RANGE);
			State = 3862; paren_column_list();
			State = 3880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERVAL) {
				{
				State = 3863; Match(INTERVAL);
				State = 3864; Match(LEFT_PAREN);
				State = 3865; expression();
				State = 3866; Match(RIGHT_PAREN);
				State = 3867; Match(STORAGE);
				State = 3868; Match(IN);
				State = 3869; Match(LEFT_PAREN);
				State = 3870; tablespace_name();
				State = 3875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3871; Match(COMMA);
					State = 3872; tablespace_name();
					}
					}
					State = 3877;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3878; Match(RIGHT_PAREN);
				}
			}

			State = 3882; Match(LEFT_PAREN);
			State = 3883; Match(PARTITION);
			State = 3885;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 3884; partition_name();
				}
			}

			State = 3887; range_values_clause();
			State = 3888; table_partition_description();
			State = 3889; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode HASH() { return GetToken(PlSqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return GetRuleContext<Individual_hash_partitionsContext>(0);
		}
		public Hash_partition_quantityContext hash_partition_quantity() {
			return GetRuleContext<Hash_partition_quantityContext>(0);
		}
		public Hash_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_partitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_partitionsContext hash_partitions() {
		Hash_partitionsContext _localctx = new Hash_partitionsContext(Context, State);
		EnterRule(_localctx, 398, RULE_hash_partitions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3891; Match(PARTITION);
			State = 3892; Match(BY);
			State = 3893; Match(HASH);
			State = 3894; paren_column_list();
			State = 3897;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 3895; individual_hash_partitions();
				}
				break;
			case UNSIGNED_INTEGER:
				{
				State = 3896; hash_partition_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_propertiesContext : ParserRuleContext {
		public Object_type_col_propertiesContext object_type_col_properties() {
			return GetRuleContext<Object_type_col_propertiesContext>(0);
		}
		public Nested_table_col_propertiesContext nested_table_col_properties() {
			return GetRuleContext<Nested_table_col_propertiesContext>(0);
		}
		public Varray_col_propertiesContext varray_col_properties() {
			return GetRuleContext<Varray_col_propertiesContext>(0);
		}
		public Lob_storage_clauseContext lob_storage_clause() {
			return GetRuleContext<Lob_storage_clauseContext>(0);
		}
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Lob_partitioning_storageContext[] lob_partitioning_storage() {
			return GetRuleContexts<Lob_partitioning_storageContext>();
		}
		public Lob_partitioning_storageContext lob_partitioning_storage(int i) {
			return GetRuleContext<Lob_partitioning_storageContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Xmltype_column_propertiesContext xmltype_column_properties() {
			return GetRuleContext<Xmltype_column_propertiesContext>(0);
		}
		public Column_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_propertiesContext column_properties() {
		Column_propertiesContext _localctx = new Column_propertiesContext(Context, State);
		EnterRule(_localctx, 400, RULE_column_properties);
		try {
			int _alt;
			State = 3915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLUMN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3899; object_type_col_properties();
				}
				break;
			case NESTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3900; nested_table_col_properties();
				}
				break;
			case LOB:
			case VARRAY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3903;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARRAY:
					{
					State = 3901; varray_col_properties();
					}
					break;
				case LOB:
					{
					State = 3902; lob_storage_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3911;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,463,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3905; Match(LEFT_PAREN);
						State = 3906; lob_partitioning_storage();
						State = 3907; Match(RIGHT_PAREN);
						}
						} 
					}
					State = 3913;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,463,Context);
				}
				}
				break;
			case XMLTYPE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3914; xmltype_column_properties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltype_column_propertiesContext : ParserRuleContext {
		public ITerminalNode XMLTYPE() { return GetToken(PlSqlParser.XMLTYPE, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Xmlschema_specContext xmlschema_spec() {
			return GetRuleContext<Xmlschema_specContext>(0);
		}
		public ITerminalNode COLUMN() { return GetToken(PlSqlParser.COLUMN, 0); }
		public Xmltype_storageContext xmltype_storage() {
			return GetRuleContext<Xmltype_storageContext>(0);
		}
		public Xmltype_column_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltype_column_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmltype_column_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmltype_column_propertiesContext xmltype_column_properties() {
		Xmltype_column_propertiesContext _localctx = new Xmltype_column_propertiesContext(Context, State);
		EnterRule(_localctx, 402, RULE_xmltype_column_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3917; Match(XMLTYPE);
			State = 3919;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMN) {
				{
				State = 3918; Match(COLUMN);
				}
			}

			State = 3921; column_name();
			State = 3923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORE) {
				{
				State = 3922; xmltype_storage();
				}
			}

			State = 3925; xmlschema_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmltype_storageContext : ParserRuleContext {
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode VARRAYS() { return GetToken(PlSqlParser.VARRAYS, 0); }
		public ITerminalNode LOBS() { return GetToken(PlSqlParser.LOBS, 0); }
		public ITerminalNode TABLES() { return GetToken(PlSqlParser.TABLES, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode RELATIONAL() { return GetToken(PlSqlParser.RELATIONAL, 0); }
		public ITerminalNode CLOB() { return GetToken(PlSqlParser.CLOB, 0); }
		public ITerminalNode BINARY() { return GetToken(PlSqlParser.BINARY, 0); }
		public ITerminalNode XML() { return GetToken(PlSqlParser.XML, 0); }
		public Lob_segnameContext lob_segname() {
			return GetRuleContext<Lob_segnameContext>(0);
		}
		public Paren_lob_parametersContext paren_lob_parameters() {
			return GetRuleContext<Paren_lob_parametersContext>(0);
		}
		public ITerminalNode SECUREFILE() { return GetToken(PlSqlParser.SECUREFILE, 0); }
		public ITerminalNode BASICFILE() { return GetToken(PlSqlParser.BASICFILE, 0); }
		public Xmltype_storageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmltype_storage; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmltype_storage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmltype_storageContext xmltype_storage() {
		Xmltype_storageContext _localctx = new Xmltype_storageContext(Context, State);
		EnterRule(_localctx, 404, RULE_xmltype_storage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3927; Match(STORE);
			State = 3952;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AS:
				{
				State = 3928; Match(AS);
				State = 3946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
				case 1:
					{
					State = 3929; Match(OBJECT);
					State = 3930; Match(RELATIONAL);
					}
					break;
				case 2:
					{
					State = 3932;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BASICFILE || _la==SECUREFILE) {
						{
						State = 3931;
						_la = TokenStream.LA(1);
						if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3937;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,468,Context) ) {
					case 1:
						{
						State = 3934; Match(CLOB);
						}
						break;
					case 2:
						{
						State = 3935; Match(BINARY);
						State = 3936; Match(XML);
						}
						break;
					}
					State = 3944;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,470,Context) ) {
					case 1:
						{
						State = 3939; lob_segname();
						State = 3941;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LEFT_PAREN) {
							{
							State = 3940; paren_lob_parameters();
							}
						}

						}
						break;
					case 2:
						{
						State = 3943; paren_lob_parameters();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case ALL:
				{
				State = 3948; Match(ALL);
				State = 3949; Match(VARRAYS);
				State = 3950; Match(AS);
				State = 3951;
				_la = TokenStream.LA(1);
				if ( !(_la==LOBS || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlschema_specContext : ParserRuleContext {
		public IToken xmlschema_url;
		public IToken xmlschema_url2;
		public ITerminalNode ELEMENT() { return GetToken(PlSqlParser.ELEMENT, 0); }
		public Element_nameContext element_name() {
			return GetRuleContext<Element_nameContext>(0);
		}
		public ITerminalNode SHARP() { return GetToken(PlSqlParser.SHARP, 0); }
		public ITerminalNode XMLSCHEMA() { return GetToken(PlSqlParser.XMLSCHEMA, 0); }
		public ITerminalNode[] CHAR_STRING() { return GetTokens(PlSqlParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(PlSqlParser.CHAR_STRING, i);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode VARRAYS() { return GetToken(PlSqlParser.VARRAYS, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode NONSCHEMA() { return GetToken(PlSqlParser.NONSCHEMA, 0); }
		public ITerminalNode ANYSCHEMA() { return GetToken(PlSqlParser.ANYSCHEMA, 0); }
		public ITerminalNode LOBS() { return GetToken(PlSqlParser.LOBS, 0); }
		public ITerminalNode TABLES() { return GetToken(PlSqlParser.TABLES, 0); }
		public ITerminalNode[] ALLOW() { return GetTokens(PlSqlParser.ALLOW); }
		public ITerminalNode ALLOW(int i) {
			return GetToken(PlSqlParser.ALLOW, i);
		}
		public ITerminalNode[] DISALLOW() { return GetTokens(PlSqlParser.DISALLOW); }
		public ITerminalNode DISALLOW(int i) {
			return GetToken(PlSqlParser.DISALLOW, i);
		}
		public Xmlschema_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlschema_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlschema_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlschema_specContext xmlschema_spec() {
		Xmlschema_specContext _localctx = new Xmlschema_specContext(Context, State);
		EnterRule(_localctx, 406, RULE_xmlschema_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3956;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==XMLSCHEMA) {
				{
				State = 3954; Match(XMLSCHEMA);
				State = 3955; _localctx.xmlschema_url = Match(CHAR_STRING);
				}
			}

			State = 3958; Match(ELEMENT);
			State = 3963;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				State = 3959; element_name();
				}
				break;
			case CHAR_STRING:
				{
				State = 3960; _localctx.xmlschema_url2 = Match(CHAR_STRING);
				State = 3961; Match(SHARP);
				State = 3962; element_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,475,Context) ) {
			case 1:
				{
				State = 3965; Match(STORE);
				State = 3966; Match(ALL);
				State = 3967; Match(VARRAYS);
				State = 3968; Match(AS);
				State = 3969;
				_la = TokenStream.LA(1);
				if ( !(_la==LOBS || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3974;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
			case 1:
				{
				State = 3972;
				_la = TokenStream.LA(1);
				if ( !(_la==ALLOW || _la==DISALLOW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3973; Match(NONSCHEMA);
				}
				break;
			}
			State = 3978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALLOW || _la==DISALLOW) {
				{
				State = 3976;
				_la = TokenStream.LA(1);
				if ( !(_la==ALLOW || _la==DISALLOW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3977; Match(ANYSCHEMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_partitionsContext : ParserRuleContext {
		public ITerminalNode[] PARTITION() { return GetTokens(PlSqlParser.PARTITION); }
		public ITerminalNode PARTITION(int i) {
			return GetToken(PlSqlParser.PARTITION, i);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode LIST() { return GetToken(PlSqlParser.LIST, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List_values_clauseContext[] list_values_clause() {
			return GetRuleContexts<List_values_clauseContext>();
		}
		public List_values_clauseContext list_values_clause(int i) {
			return GetRuleContext<List_values_clauseContext>(i);
		}
		public Table_partition_descriptionContext[] table_partition_description() {
			return GetRuleContexts<Table_partition_descriptionContext>();
		}
		public Table_partition_descriptionContext table_partition_description(int i) {
			return GetRuleContext<Table_partition_descriptionContext>(i);
		}
		public Partition_nameContext[] partition_name() {
			return GetRuleContexts<Partition_nameContext>();
		}
		public Partition_nameContext partition_name(int i) {
			return GetRuleContext<Partition_nameContext>(i);
		}
		public List_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_partitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_partitionsContext list_partitions() {
		List_partitionsContext _localctx = new List_partitionsContext(Context, State);
		EnterRule(_localctx, 408, RULE_list_partitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3980; Match(PARTITION);
			State = 3981; Match(BY);
			State = 3982; Match(LIST);
			State = 3983; paren_column_list();
			State = 3984; Match(LEFT_PAREN);
			State = 3992;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3985; Match(PARTITION);
				State = 3987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 3986; partition_name();
					}
				}

				State = 3989; list_values_clause();
				State = 3990; table_partition_description();
				}
				}
				State = 3994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==PARTITION );
			State = 3996; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Composite_range_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Range_partition_descContext range_partition_desc() {
			return GetRuleContext<Range_partition_descContext>(0);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return GetRuleContext<Subpartition_by_rangeContext>(0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return GetRuleContext<Subpartition_by_listContext>(0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return GetRuleContext<Subpartition_by_hashContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Composite_range_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite_range_partitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposite_range_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Composite_range_partitionsContext composite_range_partitions() {
		Composite_range_partitionsContext _localctx = new Composite_range_partitionsContext(Context, State);
		EnterRule(_localctx, 410, RULE_composite_range_partitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3998; Match(PARTITION);
			State = 3999; Match(BY);
			State = 4000; Match(RANGE);
			State = 4001; paren_column_list();
			State = 4002; Match(INTERVAL);
			State = 4003; Match(LEFT_PAREN);
			State = 4004; expression();
			State = 4005; Match(RIGHT_PAREN);
			{
			State = 4006; Match(STORE);
			State = 4007; Match(IN);
			State = 4008; Match(LEFT_PAREN);
			State = 4009; tablespace_name();
			State = 4014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4010; Match(COMMA);
				State = 4011; tablespace_name();
				}
				}
				State = 4016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4017; Match(RIGHT_PAREN);
			}
			State = 4022;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,481,Context) ) {
			case 1:
				{
				State = 4019; subpartition_by_range();
				}
				break;
			case 2:
				{
				State = 4020; subpartition_by_list();
				}
				break;
			case 3:
				{
				State = 4021; subpartition_by_hash();
				}
				break;
			}
			State = 4024; Match(LEFT_PAREN);
			State = 4025; range_partition_desc();
			State = 4026; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Composite_hash_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode HASH() { return GetToken(PlSqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return GetRuleContext<Subpartition_by_rangeContext>(0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return GetRuleContext<Subpartition_by_listContext>(0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return GetRuleContext<Subpartition_by_hashContext>(0);
		}
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return GetRuleContext<Individual_hash_partitionsContext>(0);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return GetRuleContext<Hash_partitions_by_quantityContext>(0);
		}
		public Composite_hash_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite_hash_partitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposite_hash_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Composite_hash_partitionsContext composite_hash_partitions() {
		Composite_hash_partitionsContext _localctx = new Composite_hash_partitionsContext(Context, State);
		EnterRule(_localctx, 412, RULE_composite_hash_partitions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4028; Match(PARTITION);
			State = 4029; Match(BY);
			State = 4030; Match(HASH);
			State = 4031; paren_column_list();
			State = 4035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,482,Context) ) {
			case 1:
				{
				State = 4032; subpartition_by_range();
				}
				break;
			case 2:
				{
				State = 4033; subpartition_by_list();
				}
				break;
			case 3:
				{
				State = 4034; subpartition_by_hash();
				}
				break;
			}
			State = 4039;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 4037; individual_hash_partitions();
				}
				break;
			case PARTITIONS:
				{
				State = 4038; hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Composite_list_partitionsContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode LIST() { return GetToken(PlSqlParser.LIST, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public List_partition_descContext[] list_partition_desc() {
			return GetRuleContexts<List_partition_descContext>();
		}
		public List_partition_descContext list_partition_desc(int i) {
			return GetRuleContext<List_partition_descContext>(i);
		}
		public Subpartition_by_rangeContext subpartition_by_range() {
			return GetRuleContext<Subpartition_by_rangeContext>(0);
		}
		public Subpartition_by_listContext subpartition_by_list() {
			return GetRuleContext<Subpartition_by_listContext>(0);
		}
		public Subpartition_by_hashContext subpartition_by_hash() {
			return GetRuleContext<Subpartition_by_hashContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Composite_list_partitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_composite_list_partitions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComposite_list_partitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Composite_list_partitionsContext composite_list_partitions() {
		Composite_list_partitionsContext _localctx = new Composite_list_partitionsContext(Context, State);
		EnterRule(_localctx, 414, RULE_composite_list_partitions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4041; Match(PARTITION);
			State = 4042; Match(BY);
			State = 4043; Match(LIST);
			State = 4044; paren_column_list();
			State = 4048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				{
				State = 4045; subpartition_by_range();
				}
				break;
			case 2:
				{
				State = 4046; subpartition_by_list();
				}
				break;
			case 3:
				{
				State = 4047; subpartition_by_hash();
				}
				break;
			}
			State = 4050; list_partition_desc();
			State = 4055;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,485,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4051; Match(COMMA);
					State = 4052; list_partition_desc();
					}
					} 
				}
				State = 4057;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,485,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_partition_descContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public Range_values_clauseContext range_values_clause() {
			return GetRuleContext<Range_values_clauseContext>(0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return GetRuleContext<Table_partition_descriptionContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Range_subpartition_descContext[] range_subpartition_desc() {
			return GetRuleContexts<Range_subpartition_descContext>();
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return GetRuleContext<Range_subpartition_descContext>(i);
		}
		public List_subpartition_descContext[] list_subpartition_desc() {
			return GetRuleContexts<List_subpartition_descContext>();
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return GetRuleContext<List_subpartition_descContext>(i);
		}
		public Individual_hash_subpartsContext[] individual_hash_subparts() {
			return GetRuleContexts<Individual_hash_subpartsContext>();
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return GetRuleContext<Individual_hash_subpartsContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return GetRuleContext<Hash_subparts_by_quantityContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Range_partition_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_partition_desc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_partition_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_partition_descContext range_partition_desc() {
		Range_partition_descContext _localctx = new Range_partition_descContext(Context, State);
		EnterRule(_localctx, 416, RULE_range_partition_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4058; Match(PARTITION);
			State = 4059; partition_name();
			State = 4060; range_values_clause();
			State = 4061; table_partition_description();
			State = 4090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,489,Context) ) {
			case 1:
				{
				State = 4062; Match(LEFT_PAREN);
				State = 4063; range_subpartition_desc();
				State = 4068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4064; Match(COMMA);
					State = 4065; range_subpartition_desc();
					}
					}
					State = 4070;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 4071; list_subpartition_desc();
				State = 4076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4072; Match(COMMA);
					State = 4073; list_subpartition_desc();
					}
					}
					State = 4078;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				{
				State = 4079; individual_hash_subparts();
				State = 4084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4080; Match(COMMA);
					State = 4081; individual_hash_subparts();
					}
					}
					State = 4086;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4087; Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				State = 4089; hash_subparts_by_quantity();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_partition_descContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public Partition_nameContext partition_name() {
			return GetRuleContext<Partition_nameContext>(0);
		}
		public List_values_clauseContext list_values_clause() {
			return GetRuleContext<List_values_clauseContext>(0);
		}
		public Table_partition_descriptionContext table_partition_description() {
			return GetRuleContext<Table_partition_descriptionContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Range_subpartition_descContext[] range_subpartition_desc() {
			return GetRuleContexts<Range_subpartition_descContext>();
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return GetRuleContext<Range_subpartition_descContext>(i);
		}
		public List_subpartition_descContext[] list_subpartition_desc() {
			return GetRuleContexts<List_subpartition_descContext>();
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return GetRuleContext<List_subpartition_descContext>(i);
		}
		public Individual_hash_subpartsContext[] individual_hash_subparts() {
			return GetRuleContexts<Individual_hash_subpartsContext>();
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return GetRuleContext<Individual_hash_subpartsContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
			return GetRuleContext<Hash_subparts_by_quantityContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public List_partition_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_partition_desc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_partition_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_partition_descContext list_partition_desc() {
		List_partition_descContext _localctx = new List_partition_descContext(Context, State);
		EnterRule(_localctx, 418, RULE_list_partition_desc);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4092; Match(PARTITION);
			State = 4093; partition_name();
			State = 4094; list_values_clause();
			State = 4095; table_partition_description();
			State = 4124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				{
				State = 4096; Match(LEFT_PAREN);
				State = 4097; range_subpartition_desc();
				State = 4102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,490,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4098; Match(COMMA);
						State = 4099; range_subpartition_desc();
						}
						} 
					}
					State = 4104;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,490,Context);
				}
				}
				break;
			case 2:
				{
				State = 4105; list_subpartition_desc();
				State = 4110;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,491,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4106; Match(COMMA);
						State = 4107; list_subpartition_desc();
						}
						} 
					}
					State = 4112;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,491,Context);
				}
				}
				break;
			case 3:
				{
				State = 4113; individual_hash_subparts();
				State = 4118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4114; Match(COMMA);
					State = 4115; individual_hash_subparts();
					}
					}
					State = 4120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4121; Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				State = 4123; hash_subparts_by_quantity();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_subpartition_descContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public Range_values_clauseContext range_values_clause() {
			return GetRuleContext<Range_values_clauseContext>(0);
		}
		public Subpartition_nameContext subpartition_name() {
			return GetRuleContext<Subpartition_nameContext>(0);
		}
		public Indexing_clauseContext indexing_clause() {
			return GetRuleContext<Indexing_clauseContext>(0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return GetRuleContext<Partitioning_storage_clauseContext>(0);
		}
		public Range_subpartition_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_subpartition_desc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_subpartition_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_subpartition_descContext range_subpartition_desc() {
		Range_subpartition_descContext _localctx = new Range_subpartition_descContext(Context, State);
		EnterRule(_localctx, 420, RULE_range_subpartition_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4126; Match(SUBPARTITION);
			State = 4128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 4127; subpartition_name();
				}
			}

			State = 4130; range_values_clause();
			State = 4132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXING) {
				{
				State = 4131; indexing_clause();
				}
			}

			State = 4135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
			case 1:
				{
				State = 4134; partitioning_storage_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_subpartition_descContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public List_values_clauseContext list_values_clause() {
			return GetRuleContext<List_values_clauseContext>(0);
		}
		public Subpartition_nameContext subpartition_name() {
			return GetRuleContext<Subpartition_nameContext>(0);
		}
		public Indexing_clauseContext indexing_clause() {
			return GetRuleContext<Indexing_clauseContext>(0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return GetRuleContext<Partitioning_storage_clauseContext>(0);
		}
		public List_subpartition_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_subpartition_desc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_subpartition_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_subpartition_descContext list_subpartition_desc() {
		List_subpartition_descContext _localctx = new List_subpartition_descContext(Context, State);
		EnterRule(_localctx, 422, RULE_list_subpartition_desc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4137; Match(SUBPARTITION);
			State = 4139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 4138; subpartition_name();
				}
			}

			State = 4141; list_values_clause();
			State = 4143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXING) {
				{
				State = 4142; indexing_clause();
				}
			}

			State = 4146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				{
				State = 4145; partitioning_storage_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Individual_hash_subpartsContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public Subpartition_nameContext subpartition_name() {
			return GetRuleContext<Subpartition_nameContext>(0);
		}
		public Indexing_clauseContext indexing_clause() {
			return GetRuleContext<Indexing_clauseContext>(0);
		}
		public Partitioning_storage_clauseContext partitioning_storage_clause() {
			return GetRuleContext<Partitioning_storage_clauseContext>(0);
		}
		public Individual_hash_subpartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_individual_hash_subparts; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndividual_hash_subparts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Individual_hash_subpartsContext individual_hash_subparts() {
		Individual_hash_subpartsContext _localctx = new Individual_hash_subpartsContext(Context, State);
		EnterRule(_localctx, 424, RULE_individual_hash_subparts);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4148; Match(SUBPARTITION);
			State = 4150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
			case 1:
				{
				State = 4149; subpartition_name();
				}
				break;
			}
			State = 4153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXING) {
				{
				State = 4152; indexing_clause();
				}
			}

			State = 4156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMN || _la==COMPRESS || _la==INMEMORY || _la==LOB || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (NOCOMPRESS - 367)) | (1L << (NO - 367)) | (1L << (OVERFLOW - 367)))) != 0) || _la==ROW || _la==TABLESPACE || _la==VARRAY) {
				{
				State = 4155; partitioning_storage_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hash_subparts_by_quantityContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Hash_subparts_by_quantityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hash_subparts_by_quantity; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHash_subparts_by_quantity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hash_subparts_by_quantityContext hash_subparts_by_quantity() {
		Hash_subparts_by_quantityContext _localctx = new Hash_subparts_by_quantityContext(Context, State);
		EnterRule(_localctx, 426, RULE_hash_subparts_by_quantity);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4158; Match(SUBPARTITION);
			State = 4159; integer();
			State = 4173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,504,Context) ) {
			case 1:
				{
				State = 4160; Match(STORE);
				State = 4161; Match(IN);
				{
				State = 4162; Match(LEFT_PAREN);
				State = 4163; tablespace_name();
				State = 4168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4164; Match(COMMA);
					State = 4165; tablespace_name();
					}
					}
					State = 4170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4171; Match(RIGHT_PAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_partition_descriptionContext : ParserRuleContext {
		public Deferred_segment_creationContext deferred_segment_creation() {
			return GetRuleContext<Deferred_segment_creationContext>(0);
		}
		public Indexing_clauseContext indexing_clause() {
			return GetRuleContext<Indexing_clauseContext>(0);
		}
		public Segment_attributes_clauseContext[] segment_attributes_clause() {
			return GetRuleContexts<Segment_attributes_clauseContext>();
		}
		public Segment_attributes_clauseContext segment_attributes_clause(int i) {
			return GetRuleContext<Segment_attributes_clauseContext>(i);
		}
		public Table_compressionContext table_compression() {
			return GetRuleContext<Table_compressionContext>(0);
		}
		public Prefix_compressionContext prefix_compression() {
			return GetRuleContext<Prefix_compressionContext>(0);
		}
		public Inmemory_clauseContext inmemory_clause() {
			return GetRuleContext<Inmemory_clauseContext>(0);
		}
		public Ilm_clauseContext ilm_clause() {
			return GetRuleContext<Ilm_clauseContext>(0);
		}
		public ITerminalNode OVERFLOW() { return GetToken(PlSqlParser.OVERFLOW, 0); }
		public Lob_storage_clauseContext[] lob_storage_clause() {
			return GetRuleContexts<Lob_storage_clauseContext>();
		}
		public Lob_storage_clauseContext lob_storage_clause(int i) {
			return GetRuleContext<Lob_storage_clauseContext>(i);
		}
		public Varray_col_propertiesContext[] varray_col_properties() {
			return GetRuleContexts<Varray_col_propertiesContext>();
		}
		public Varray_col_propertiesContext varray_col_properties(int i) {
			return GetRuleContext<Varray_col_propertiesContext>(i);
		}
		public Nested_table_col_propertiesContext[] nested_table_col_properties() {
			return GetRuleContexts<Nested_table_col_propertiesContext>();
		}
		public Nested_table_col_propertiesContext nested_table_col_properties(int i) {
			return GetRuleContext<Nested_table_col_propertiesContext>(i);
		}
		public Table_partition_descriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_partition_description; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_partition_description(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_partition_descriptionContext table_partition_description() {
		Table_partition_descriptionContext _localctx = new Table_partition_descriptionContext(Context, State);
		EnterRule(_localctx, 428, RULE_table_partition_description);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,505,Context) ) {
			case 1:
				{
				State = 4175; deferred_segment_creation();
				}
				break;
			}
			State = 4179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXING) {
				{
				State = 4178; indexing_clause();
				}
			}

			State = 4182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
				{
				State = 4181; segment_attributes_clause();
				}
			}

			State = 4186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,508,Context) ) {
			case 1:
				{
				State = 4184; table_compression();
				}
				break;
			case 2:
				{
				State = 4185; prefix_compression();
				}
				break;
			}
			State = 4189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,509,Context) ) {
			case 1:
				{
				State = 4188; inmemory_clause();
				}
				break;
			}
			State = 4192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,510,Context) ) {
			case 1:
				{
				State = 4191; ilm_clause();
				}
				break;
			}
			State = 4198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OVERFLOW) {
				{
				State = 4194; Match(OVERFLOW);
				State = 4196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
					{
					State = 4195; segment_attributes_clause();
					}
				}

				}
			}

			State = 4205;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 4203;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LOB:
						{
						State = 4200; lob_storage_clause();
						}
						break;
					case VARRAY:
						{
						State = 4201; varray_col_properties();
						}
						break;
					case NESTED:
						{
						State = 4202; nested_table_col_properties();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 4207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,514,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_values_clauseContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ITerminalNode LESS() { return GetToken(PlSqlParser.LESS, 0); }
		public ITerminalNode THAN() { return GetToken(PlSqlParser.THAN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Range_values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_values_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange_values_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Range_values_clauseContext range_values_clause() {
		Range_values_clauseContext _localctx = new Range_values_clauseContext(Context, State);
		EnterRule(_localctx, 430, RULE_range_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4208; Match(VALUES);
			State = 4209; Match(LESS);
			State = 4210; Match(THAN);
			State = 4211; Match(LEFT_PAREN);
			State = 4221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
			case 1:
				{
				State = 4212; literal();
				State = 4217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4213; Match(COMMA);
					State = 4214; literal();
					}
					}
					State = 4219;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 4220; Match(MAXVALUE);
				}
				break;
			}
			State = 4223; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_values_clauseContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List_values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_values_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_values_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_values_clauseContext list_values_clause() {
		List_values_clauseContext _localctx = new List_values_clauseContext(Context, State);
		EnterRule(_localctx, 432, RULE_list_values_clause);
		try {
			int _alt;
			State = 4240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4225; Match(VALUES);
				State = 4226; Match(LEFT_PAREN);
				State = 4236;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,518,Context) ) {
				case 1:
					{
					State = 4227; literal();
					State = 4232;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,517,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 4228; Match(COMMA);
							State = 4229; literal();
							}
							} 
						}
						State = 4234;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,517,Context);
					}
					}
					break;
				case 2:
					{
					State = 4235; Match(NULL);
					}
					break;
				}
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4238; Match(DEFAULT);
				State = 4239; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subpartition_by_rangeContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Subpartition_templateContext subpartition_template() {
			return GetRuleContext<Subpartition_templateContext>(0);
		}
		public Subpartition_by_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartition_by_range; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartition_by_range(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subpartition_by_rangeContext subpartition_by_range() {
		Subpartition_by_rangeContext _localctx = new Subpartition_by_rangeContext(Context, State);
		EnterRule(_localctx, 434, RULE_subpartition_by_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4242; Match(SUBPARTITION);
			State = 4243; Match(BY);
			State = 4244; Match(RANGE);
			State = 4245; paren_column_list();
			State = 4246; subpartition_template();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subpartition_by_listContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode LIST() { return GetToken(PlSqlParser.LIST, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Subpartition_templateContext subpartition_template() {
			return GetRuleContext<Subpartition_templateContext>(0);
		}
		public Subpartition_by_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartition_by_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartition_by_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subpartition_by_listContext subpartition_by_list() {
		Subpartition_by_listContext _localctx = new Subpartition_by_listContext(Context, State);
		EnterRule(_localctx, 436, RULE_subpartition_by_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4248; Match(SUBPARTITION);
			State = 4249; Match(BY);
			State = 4250; Match(LIST);
			State = 4251; paren_column_list();
			State = 4252; subpartition_template();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subpartition_by_hashContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode HASH() { return GetToken(PlSqlParser.HASH, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode SUBPARTITIONS() { return GetToken(PlSqlParser.SUBPARTITIONS, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Subpartition_templateContext subpartition_template() {
			return GetRuleContext<Subpartition_templateContext>(0);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Subpartition_by_hashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartition_by_hash; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartition_by_hash(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subpartition_by_hashContext subpartition_by_hash() {
		Subpartition_by_hashContext _localctx = new Subpartition_by_hashContext(Context, State);
		EnterRule(_localctx, 438, RULE_subpartition_by_hash);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4254; Match(SUBPARTITION);
			State = 4255; Match(BY);
			State = 4256; Match(HASH);
			State = 4257; paren_column_list();
			{
			State = 4258; Match(SUBPARTITIONS);
			State = 4259; integer();
			{
			State = 4260; Match(STORE);
			State = 4261; Match(IN);
			State = 4262; Match(LEFT_PAREN);
			State = 4263; tablespace_name();
			State = 4268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4264; Match(COMMA);
				State = 4265; tablespace_name();
				}
				}
				State = 4270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4271; Match(RIGHT_PAREN);
			}
			State = 4273; subpartition_template();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subpartition_templateContext : ParserRuleContext {
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode TEMPLATE() { return GetToken(PlSqlParser.TEMPLATE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Range_subpartition_descContext[] range_subpartition_desc() {
			return GetRuleContexts<Range_subpartition_descContext>();
		}
		public Range_subpartition_descContext range_subpartition_desc(int i) {
			return GetRuleContext<Range_subpartition_descContext>(i);
		}
		public List_subpartition_descContext[] list_subpartition_desc() {
			return GetRuleContexts<List_subpartition_descContext>();
		}
		public List_subpartition_descContext list_subpartition_desc(int i) {
			return GetRuleContext<List_subpartition_descContext>(i);
		}
		public Individual_hash_subpartsContext[] individual_hash_subparts() {
			return GetRuleContexts<Individual_hash_subpartsContext>();
		}
		public Individual_hash_subpartsContext individual_hash_subparts(int i) {
			return GetRuleContext<Individual_hash_subpartsContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Hash_partition_quantityContext hash_partition_quantity() {
			return GetRuleContext<Hash_partition_quantityContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Subpartition_templateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartition_template; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartition_template(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subpartition_templateContext subpartition_template() {
		Subpartition_templateContext _localctx = new Subpartition_templateContext(Context, State);
		EnterRule(_localctx, 440, RULE_subpartition_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4275; Match(SUBPARTITION);
			State = 4276; Match(TEMPLATE);
			State = 4305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
			case 1:
				{
				State = 4277; Match(LEFT_PAREN);
				State = 4278; range_subpartition_desc();
				State = 4283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4279; Match(COMMA);
					State = 4280; range_subpartition_desc();
					}
					}
					State = 4285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 4286; list_subpartition_desc();
				State = 4291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4287; Match(COMMA);
					State = 4288; list_subpartition_desc();
					}
					}
					State = 4293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				{
				State = 4294; individual_hash_subparts();
				State = 4299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4295; Match(COMMA);
					State = 4296; individual_hash_subparts();
					}
					}
					State = 4301;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4302; Match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				State = 4304; hash_partition_quantity();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_partitioningContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode REFERENCE() { return GetToken(PlSqlParser.REFERENCE, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Reference_partition_descContext[] reference_partition_desc() {
			return GetRuleContexts<Reference_partition_descContext>();
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return GetRuleContext<Reference_partition_descContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public Reference_partitioningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_partitioning; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_partitioning(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_partitioningContext reference_partitioning() {
		Reference_partitioningContext _localctx = new Reference_partitioningContext(Context, State);
		EnterRule(_localctx, 442, RULE_reference_partitioning);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4307; Match(PARTITION);
			State = 4308; Match(BY);
			State = 4309; Match(REFERENCE);
			State = 4310; Match(LEFT_PAREN);
			State = 4311; constraint();
			State = 4312; Match(RIGHT_PAREN);
			State = 4321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
			case 1:
				{
				State = 4313; Match(LEFT_PAREN);
				State = 4314; reference_partition_desc();
				State = 4317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 4315; Match(COMMA);
					State = 4316; reference_partition_desc();
					}
				}

				State = 4319; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_partition_descContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode SYSTEM() { return GetToken(PlSqlParser.SYSTEM, 0); }
		public ITerminalNode PARTITIONS() { return GetToken(PlSqlParser.PARTITIONS, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Reference_partition_descContext[] reference_partition_desc() {
			return GetRuleContexts<Reference_partition_descContext>();
		}
		public Reference_partition_descContext reference_partition_desc(int i) {
			return GetRuleContext<Reference_partition_descContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Reference_partition_descContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_partition_desc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_partition_desc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_partition_descContext reference_partition_desc() {
		Reference_partition_descContext _localctx = new Reference_partition_descContext(Context, State);
		EnterRule(_localctx, 444, RULE_reference_partition_desc);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4323; Match(PARTITION);
			State = 4324; Match(BY);
			State = 4325; Match(SYSTEM);
			State = 4335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PARTITIONS:
				{
				State = 4326; Match(PARTITIONS);
				State = 4327; integer();
				}
				break;
			case PARTITION:
				{
				{
				State = 4328; reference_partition_desc();
				State = 4331;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4329; Match(COMMA);
						State = 4330; reference_partition_desc();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4333;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,527,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				break;
			case RIGHT_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_type_col_propertiesContext : ParserRuleContext {
		public ITerminalNode COLUMN() { return GetToken(PlSqlParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Substituable_column_clauseContext substituable_column_clause() {
			return GetRuleContext<Substituable_column_clauseContext>(0);
		}
		public Object_type_col_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_type_col_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_type_col_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_type_col_propertiesContext object_type_col_properties() {
		Object_type_col_propertiesContext _localctx = new Object_type_col_propertiesContext(Context, State);
		EnterRule(_localctx, 446, RULE_object_type_col_properties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4337; Match(COLUMN);
			State = 4338; column_name();
			State = 4339; substituable_column_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Substituable_column_clauseContext : ParserRuleContext {
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode ELEMENT() { return GetToken(PlSqlParser.ELEMENT, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public ITerminalNode SUBSTITUTABLE() { return GetToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public ITerminalNode AT() { return GetToken(PlSqlParser.AT, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode LEVELS() { return GetToken(PlSqlParser.LEVELS, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public Substituable_column_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substituable_column_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstituable_column_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Substituable_column_clauseContext substituable_column_clause() {
		Substituable_column_clauseContext _localctx = new Substituable_column_clauseContext(Context, State);
		EnterRule(_localctx, 448, RULE_substituable_column_clause);
		int _la;
		try {
			State = 4361;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELEMENT:
			case IS:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 4342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELEMENT) {
					{
					State = 4341; Match(ELEMENT);
					}
				}

				State = 4344; Match(IS);
				State = 4345; Match(OF);
				State = 4347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE) {
					{
					State = 4346; Match(TYPE);
					}
				}

				State = 4349; Match(LEFT_PAREN);
				State = 4350; Match(ONLY);
				State = 4351; type_name();
				State = 4352; Match(RIGHT_PAREN);
				}
				}
				break;
			case NOT:
			case SUBSTITUTABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 4354; Match(NOT);
					}
				}

				State = 4357; Match(SUBSTITUTABLE);
				State = 4358; Match(AT);
				State = 4359; Match(ALL);
				State = 4360; Match(LEVELS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nested_table_col_propertiesContext : ParserRuleContext {
		public Collection_nameContext nested_item;
		public Table_fullnameContext storage_table;
		public ITerminalNode NESTED() { return GetToken(PlSqlParser.NESTED, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode[] AS() { return GetTokens(PlSqlParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(PlSqlParser.AS, i);
		}
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public ITerminalNode LOCATOR() { return GetToken(PlSqlParser.LOCATOR, 0); }
		public ITerminalNode[] VALUE() { return GetTokens(PlSqlParser.VALUE); }
		public ITerminalNode VALUE(int i) {
			return GetToken(PlSqlParser.VALUE, i);
		}
		public ITerminalNode COLUMN() { return GetToken(PlSqlParser.COLUMN, 0); }
		public Collection_nameContext collection_name() {
			return GetRuleContext<Collection_nameContext>(0);
		}
		public Substituable_column_clauseContext substituable_column_clause() {
			return GetRuleContext<Substituable_column_clauseContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode GLOBAL() { return GetToken(PlSqlParser.GLOBAL, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public Object_propertiesContext[] object_properties() {
			return GetRuleContexts<Object_propertiesContext>();
		}
		public Object_propertiesContext object_properties(int i) {
			return GetRuleContext<Object_propertiesContext>(i);
		}
		public Physical_propertiesContext[] physical_properties() {
			return GetRuleContexts<Physical_propertiesContext>();
		}
		public Physical_propertiesContext physical_properties(int i) {
			return GetRuleContext<Physical_propertiesContext>(i);
		}
		public Column_propertiesContext[] column_properties() {
			return GetRuleContexts<Column_propertiesContext>();
		}
		public Column_propertiesContext column_properties(int i) {
			return GetRuleContext<Column_propertiesContext>(i);
		}
		public Nested_table_col_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested_table_col_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested_table_col_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nested_table_col_propertiesContext nested_table_col_properties() {
		Nested_table_col_propertiesContext _localctx = new Nested_table_col_propertiesContext(Context, State);
		EnterRule(_localctx, 450, RULE_nested_table_col_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4363; Match(NESTED);
			State = 4364; Match(TABLE);
			State = 4368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 4365; _localctx.nested_item = collection_name();
				}
				break;
			case COLUMN:
				{
				State = 4366; Match(COLUMN);
				State = 4367; Match(VALUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
				{
				State = 4370; substituable_column_clause();
				}
			}

			State = 4375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 4373; Match(LOCAL);
				State = 4374; Match(GLOBAL);
				}
			}

			State = 4377; Match(STORE);
			State = 4378; Match(AS);
			State = 4379; _localctx.storage_table = table_fullname();
			State = 4393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 4380; Match(LEFT_PAREN);
				State = 4387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 4387;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LEFT_PAREN:
						{
						State = 4381; Match(LEFT_PAREN);
						State = 4382; object_properties();
						State = 4383; Match(RIGHT_PAREN);
						}
						break;
					case FILESYSTEM_LIKE_LOGGING:
					case INITRANS:
					case LOGGING:
					case NOLOGGING:
					case ORGANIZATION:
					case PCTFREE:
					case PCTUSED:
					case SEGMENT:
					case STORAGE:
					case TABLESPACE:
						{
						State = 4385; physical_properties();
						}
						break;
					case COLUMN:
					case LOB:
					case NESTED:
					case VARRAY:
					case XMLTYPE:
						{
						State = 4386; column_properties();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 4389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COLUMN || _la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || ((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (LOB - 307)) | (1L << (LOGGING - 307)) | (1L << (NESTED - 307)))) != 0) || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & ((1L << (NOLOGGING - 374)) | (1L << (ORGANIZATION - 374)) | (1L << (PCTFREE - 374)) | (1L << (PCTUSED - 374)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (SEGMENT - 531)) | (1L << (STORAGE - 531)) | (1L << (TABLESPACE - 531)))) != 0) || _la==VARRAY || _la==XMLTYPE || _la==LEFT_PAREN );
				State = 4391; Match(RIGHT_PAREN);
				}
			}

			State = 4395; Match(RETURN);
			State = 4396; Match(AS);
			State = 4397;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCATOR || _la==VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_propertiesContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return GetRuleContext<Inline_ref_constraintContext>(0);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return GetRuleContext<Out_of_line_constraintContext>(0);
		}
		public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
			return GetRuleContext<Out_of_line_ref_constraintContext>(0);
		}
		public Supplemental_logging_propsContext supplemental_logging_props() {
			return GetRuleContext<Supplemental_logging_propsContext>(0);
		}
		public Object_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_propertiesContext object_properties() {
		Object_propertiesContext _localctx = new Object_propertiesContext(Context, State);
		EnterRule(_localctx, 452, RULE_object_properties);
		int _la;
		try {
			State = 4420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,544,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4401;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
				case 1:
					{
					State = 4399; column_name();
					}
					break;
				case 2:
					{
					State = 4400; attribute_name();
					}
					break;
				}
				State = 4405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 4403; Match(DEFAULT);
					State = 4404; expression();
					}
				}

				State = 4413;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
				case 1:
					{
					State = 4408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4407; inline_constraint();
						}
						}
						State = 4410;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CHECK || _la==CONSTRAINT || _la==NOT || _la==NULL || _la==PRIMARY || _la==REFERENCES || _la==UNIQUE );
					}
					break;
				case 2:
					{
					State = 4412; inline_ref_constraint();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4418;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
				case 1:
					{
					State = 4415; out_of_line_constraint();
					}
					break;
				case 2:
					{
					State = 4416; out_of_line_ref_constraint();
					}
					break;
				case 3:
					{
					State = 4417; supplemental_logging_props();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varray_col_propertiesContext : ParserRuleContext {
		public ITerminalNode VARRAY() { return GetToken(PlSqlParser.VARRAY, 0); }
		public Varray_itemContext varray_item() {
			return GetRuleContext<Varray_itemContext>(0);
		}
		public Varray_storage_clauseContext varray_storage_clause() {
			return GetRuleContext<Varray_storage_clauseContext>(0);
		}
		public Substituable_column_clauseContext substituable_column_clause() {
			return GetRuleContext<Substituable_column_clauseContext>(0);
		}
		public Varray_col_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varray_col_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarray_col_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Varray_col_propertiesContext varray_col_properties() {
		Varray_col_propertiesContext _localctx = new Varray_col_propertiesContext(Context, State);
		EnterRule(_localctx, 454, RULE_varray_col_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4422; Match(VARRAY);
			State = 4423; varray_item();
			State = 4429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,546,Context) ) {
			case 1:
				{
				State = 4425;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELEMENT || _la==IS || _la==NOT || _la==SUBSTITUTABLE) {
					{
					State = 4424; substituable_column_clause();
					}
				}

				State = 4427; varray_storage_clause();
				}
				break;
			case 2:
				{
				State = 4428; substituable_column_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varray_storage_clauseContext : ParserRuleContext {
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode LOB() { return GetToken(PlSqlParser.LOB, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Lob_storage_parametersContext lob_storage_parameters() {
			return GetRuleContext<Lob_storage_parametersContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode SECUREFILE() { return GetToken(PlSqlParser.SECUREFILE, 0); }
		public ITerminalNode BASICFILE() { return GetToken(PlSqlParser.BASICFILE, 0); }
		public Lob_segnameContext lob_segname() {
			return GetRuleContext<Lob_segnameContext>(0);
		}
		public Varray_storage_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varray_storage_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarray_storage_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Varray_storage_clauseContext varray_storage_clause() {
		Varray_storage_clauseContext _localctx = new Varray_storage_clauseContext(Context, State);
		EnterRule(_localctx, 456, RULE_varray_storage_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4431; Match(STORE);
			State = 4432; Match(AS);
			State = 4434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BASICFILE || _la==SECUREFILE) {
				{
				State = 4433;
				_la = TokenStream.LA(1);
				if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4436; Match(LOB);
			State = 4445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,549,Context) ) {
			case 1:
				{
				State = 4438;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 4437; lob_segname();
					}
				}

				State = 4440; Match(LEFT_PAREN);
				State = 4441; lob_storage_parameters();
				State = 4442; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 4444; lob_storage_parameters();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_storage_clauseContext : ParserRuleContext {
		public ITerminalNode LOB() { return GetToken(PlSqlParser.LOB, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public Lob_item_nameContext[] lob_item_name() {
			return GetRuleContexts<Lob_item_nameContext>();
		}
		public Lob_item_nameContext lob_item_name(int i) {
			return GetRuleContext<Lob_item_nameContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Lob_storage_parametersContext lob_storage_parameters() {
			return GetRuleContext<Lob_storage_parametersContext>(0);
		}
		public Lob_segnameContext lob_segname() {
			return GetRuleContext<Lob_segnameContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode SECUREFILE() { return GetToken(PlSqlParser.SECUREFILE, 0); }
		public ITerminalNode BASICFILE() { return GetToken(PlSqlParser.BASICFILE, 0); }
		public Lob_storage_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_storage_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_storage_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_storage_clauseContext lob_storage_clause() {
		Lob_storage_clauseContext _localctx = new Lob_storage_clauseContext(Context, State);
		EnterRule(_localctx, 458, RULE_lob_storage_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4447; Match(LOB);
			State = 4487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,554,Context) ) {
			case 1:
				{
				State = 4448; Match(LEFT_PAREN);
				State = 4449; lob_item_name();
				State = 4454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4450; Match(COMMA);
					State = 4451; lob_item_name();
					}
					}
					State = 4456;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4457; Match(RIGHT_PAREN);
				State = 4458; Match(STORE);
				State = 4459; Match(AS);
				State = 4465;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BASICFILE:
				case SECUREFILE:
					{
					State = 4460;
					_la = TokenStream.LA(1);
					if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case LEFT_PAREN:
					{
					State = 4461; Match(LEFT_PAREN);
					State = 4462; lob_storage_parameters();
					State = 4463; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 4467; Match(LEFT_PAREN);
				State = 4468; lob_item_name();
				State = 4473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4469; Match(COMMA);
					State = 4470; lob_item_name();
					}
					}
					State = 4475;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4476; Match(RIGHT_PAREN);
				State = 4477; Match(STORE);
				State = 4478; Match(AS);
				State = 4485;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BASICFILE:
				case SECUREFILE:
					{
					State = 4479;
					_la = TokenStream.LA(1);
					if ( !(_la==BASICFILE || _la==SECUREFILE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					State = 4480; lob_segname();
					}
					break;
				case LEFT_PAREN:
					{
					State = 4481; Match(LEFT_PAREN);
					State = 4482; lob_storage_parameters();
					State = 4483; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_storage_parametersContext : ParserRuleContext {
		public Tablespace_clauseContext tablespace_clause() {
			return GetRuleContext<Tablespace_clauseContext>(0);
		}
		public Lob_parametersContext[] lob_parameters() {
			return GetRuleContexts<Lob_parametersContext>();
		}
		public Lob_parametersContext lob_parameters(int i) {
			return GetRuleContext<Lob_parametersContext>(i);
		}
		public Storage_clauseContext storage_clause() {
			return GetRuleContext<Storage_clauseContext>(0);
		}
		public Lob_storage_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_storage_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_storage_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_storage_parametersContext lob_storage_parameters() {
		Lob_storage_parametersContext _localctx = new Lob_storage_parametersContext(Context, State);
		EnterRule(_localctx, 460, RULE_lob_storage_parameters);
		try {
			int _alt;
			State = 4501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CACHE:
			case CHUNK:
			case COMPRESS:
			case DECRYPT:
			case DEDUPLICATE:
			case DISABLE:
			case ENABLE:
			case ENCRYPT:
			case FREEPOOLS:
			case KEEP_DUPLICATES:
			case NOCACHE:
			case NOCOMPRESS:
			case PCTVERSION:
			case RETENTION:
			case TABLESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4498;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TABLESPACE:
					{
					State = 4489; tablespace_clause();
					}
					break;
				case CACHE:
				case CHUNK:
				case COMPRESS:
				case DECRYPT:
				case DEDUPLICATE:
				case DISABLE:
				case ENABLE:
				case ENCRYPT:
				case FREEPOOLS:
				case KEEP_DUPLICATES:
				case NOCACHE:
				case NOCOMPRESS:
				case PCTVERSION:
				case RETENTION:
					{
					State = 4491;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 4490; lob_parameters();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 4493;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,555,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					State = 4496;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,556,Context) ) {
					case 1:
						{
						State = 4495; storage_clause();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case STORAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4500; storage_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paren_lob_parametersContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Lob_parametersContext lob_parameters() {
			return GetRuleContext<Lob_parametersContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_lob_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paren_lob_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen_lob_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paren_lob_parametersContext paren_lob_parameters() {
		Paren_lob_parametersContext _localctx = new Paren_lob_parametersContext(Context, State);
		EnterRule(_localctx, 462, RULE_paren_lob_parameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4503; Match(LEFT_PAREN);
			State = 4504; lob_parameters();
			State = 4505; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_parametersContext : ParserRuleContext {
		public IntegerContext ChunkInteger;
		public IntegerContext PctVersionIntger;
		public IntegerContext FreePoolsInteger;
		public ITerminalNode STORAGE() { return GetToken(PlSqlParser.STORAGE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode CHUNK() { return GetToken(PlSqlParser.CHUNK, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode PCTVERSION() { return GetToken(PlSqlParser.PCTVERSION, 0); }
		public ITerminalNode FREEPOOLS() { return GetToken(PlSqlParser.FREEPOOLS, 0); }
		public Lob_retention_clauseContext lob_retention_clause() {
			return GetRuleContext<Lob_retention_clauseContext>(0);
		}
		public Lob_deduplicate_clauseContext lob_deduplicate_clause() {
			return GetRuleContext<Lob_deduplicate_clauseContext>(0);
		}
		public Lob_compresssion_clauseContext lob_compresssion_clause() {
			return GetRuleContext<Lob_compresssion_clauseContext>(0);
		}
		public ITerminalNode ENCRYPT() { return GetToken(PlSqlParser.ENCRYPT, 0); }
		public Encryption_specContext encryption_spec() {
			return GetRuleContext<Encryption_specContext>(0);
		}
		public ITerminalNode DECRYPT() { return GetToken(PlSqlParser.DECRYPT, 0); }
		public Logging_clauseContext logging_clause() {
			return GetRuleContext<Logging_clauseContext>(0);
		}
		public ITerminalNode CACHE() { return GetToken(PlSqlParser.CACHE, 0); }
		public ITerminalNode NOCACHE() { return GetToken(PlSqlParser.NOCACHE, 0); }
		public ITerminalNode READS() { return GetToken(PlSqlParser.READS, 0); }
		public Lob_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_parametersContext lob_parameters() {
		Lob_parametersContext _localctx = new Lob_parametersContext(Context, State);
		EnterRule(_localctx, 464, RULE_lob_parameters);
		int _la;
		try {
			State = 4532;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DISABLE:
			case ENABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4507;
				_la = TokenStream.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4508; Match(STORAGE);
				State = 4509; Match(IN);
				State = 4510; Match(ROW);
				}
				break;
			case CHUNK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4511; Match(CHUNK);
				State = 4512; _localctx.ChunkInteger = integer();
				}
				break;
			case PCTVERSION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4513; Match(PCTVERSION);
				State = 4514; _localctx.PctVersionIntger = integer();
				}
				break;
			case FREEPOOLS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4515; Match(FREEPOOLS);
				State = 4516; _localctx.FreePoolsInteger = integer();
				}
				break;
			case RETENTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4517; lob_retention_clause();
				}
				break;
			case DEDUPLICATE:
			case KEEP_DUPLICATES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4518; lob_deduplicate_clause();
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4519; lob_compresssion_clause();
				}
				break;
			case DECRYPT:
			case ENCRYPT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4523;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ENCRYPT:
					{
					State = 4520; Match(ENCRYPT);
					State = 4521; encryption_spec();
					}
					break;
				case DECRYPT:
					{
					State = 4522; Match(DECRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CACHE:
			case NOCACHE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4529;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,560,Context) ) {
				case 1:
					{
					State = 4525; Match(CACHE);
					}
					break;
				case 2:
					{
					State = 4526; Match(NOCACHE);
					}
					break;
				case 3:
					{
					State = 4527; Match(CACHE);
					State = 4528; Match(READS);
					}
					break;
				}
				State = 4531; logging_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_retention_clauseContext : ParserRuleContext {
		public IntegerContext MinIntger;
		public ITerminalNode RETENTION() { return GetToken(PlSqlParser.RETENTION, 0); }
		public ITerminalNode MAX() { return GetToken(PlSqlParser.MAX, 0); }
		public ITerminalNode MIN() { return GetToken(PlSqlParser.MIN, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Lob_retention_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_retention_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_retention_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_retention_clauseContext lob_retention_clause() {
		Lob_retention_clauseContext _localctx = new Lob_retention_clauseContext(Context, State);
		EnterRule(_localctx, 466, RULE_lob_retention_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4534; Match(RETENTION);
			State = 4540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
			case 1:
				{
				State = 4535; Match(MAX);
				}
				break;
			case 2:
				{
				State = 4536; Match(MIN);
				State = 4537; _localctx.MinIntger = integer();
				}
				break;
			case 3:
				{
				State = 4538; Match(AUTO);
				}
				break;
			case 4:
				{
				State = 4539; Match(NONE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_deduplicate_clauseContext : ParserRuleContext {
		public ITerminalNode DEDUPLICATE() { return GetToken(PlSqlParser.DEDUPLICATE, 0); }
		public ITerminalNode KEEP_DUPLICATES() { return GetToken(PlSqlParser.KEEP_DUPLICATES, 0); }
		public Lob_deduplicate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_deduplicate_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_deduplicate_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_deduplicate_clauseContext lob_deduplicate_clause() {
		Lob_deduplicate_clauseContext _localctx = new Lob_deduplicate_clauseContext(Context, State);
		EnterRule(_localctx, 468, RULE_lob_deduplicate_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4542;
			_la = TokenStream.LA(1);
			if ( !(_la==DEDUPLICATE || _la==KEEP_DUPLICATES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_compresssion_clauseContext : ParserRuleContext {
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public ITerminalNode HIGH() { return GetToken(PlSqlParser.HIGH, 0); }
		public ITerminalNode MEDIUM() { return GetToken(PlSqlParser.MEDIUM, 0); }
		public ITerminalNode LOW() { return GetToken(PlSqlParser.LOW, 0); }
		public ITerminalNode NOCOMPRESS() { return GetToken(PlSqlParser.NOCOMPRESS, 0); }
		public Lob_compresssion_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_compresssion_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_compresssion_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_compresssion_clauseContext lob_compresssion_clause() {
		Lob_compresssion_clauseContext _localctx = new Lob_compresssion_clauseContext(Context, State);
		EnterRule(_localctx, 470, RULE_lob_compresssion_clause);
		int _la;
		try {
			State = 4549;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMPRESS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4544; Match(COMPRESS);
				State = 4546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HIGH || _la==LOW || _la==MEDIUM) {
					{
					State = 4545;
					_la = TokenStream.LA(1);
					if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case NOCOMPRESS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4548; Match(NOCOMPRESS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Physical_propertiesContext : ParserRuleContext {
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return GetRuleContext<Segment_attributes_clauseContext>(0);
		}
		public Ilm_clauseContext ilm_clause() {
			return GetRuleContext<Ilm_clauseContext>(0);
		}
		public Deferred_segment_creationContext deferred_segment_creation() {
			return GetRuleContext<Deferred_segment_creationContext>(0);
		}
		public Table_compressionContext table_compression() {
			return GetRuleContext<Table_compressionContext>(0);
		}
		public Inmemory_table_clauseContext inmemory_table_clause() {
			return GetRuleContext<Inmemory_table_clauseContext>(0);
		}
		public ITerminalNode ORGANIZATION() { return GetToken(PlSqlParser.ORGANIZATION, 0); }
		public ITerminalNode HEAP() { return GetToken(PlSqlParser.HEAP, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Index_org_table_clauseContext index_org_table_clause() {
			return GetRuleContext<Index_org_table_clauseContext>(0);
		}
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public External_table_clauseContext external_table_clause() {
			return GetRuleContext<External_table_clauseContext>(0);
		}
		public Physical_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_physical_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPhysical_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Physical_propertiesContext physical_properties() {
		Physical_propertiesContext _localctx = new Physical_propertiesContext(Context, State);
		EnterRule(_localctx, 472, RULE_physical_properties);
		int _la;
		try {
			State = 4589;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,575,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEGMENT) {
					{
					State = 4551; deferred_segment_creation();
					}
				}

				State = 4554; segment_attributes_clause();
				State = 4556;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,566,Context) ) {
				case 1:
					{
					State = 4555; table_compression();
					}
					break;
				}
				State = 4559;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INMEMORY || _la==NO) {
					{
					State = 4558; inmemory_table_clause();
					}
				}

				State = 4561; ilm_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4564;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEGMENT) {
					{
					State = 4563; deferred_segment_creation();
					}
				}

				State = 4566; Match(ORGANIZATION);
				State = 4587;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case HEAP:
					{
					State = 4567; Match(HEAP);
					State = 4569;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,569,Context) ) {
					case 1:
						{
						State = 4568; segment_attributes_clause();
						}
						break;
					}
					State = 4572;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,570,Context) ) {
					case 1:
						{
						State = 4571; table_compression();
						}
						break;
					}
					State = 4575;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,571,Context) ) {
					case 1:
						{
						State = 4574; inmemory_table_clause();
						}
						break;
					}
					State = 4578;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,572,Context) ) {
					case 1:
						{
						State = 4577; ilm_clause();
						}
						break;
					}
					}
					break;
				case INDEX:
					{
					State = 4580; Match(INDEX);
					State = 4582;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FILESYSTEM_LIKE_LOGGING || _la==INITRANS || _la==LOGGING || _la==NOLOGGING || _la==PCTFREE || _la==PCTUSED || _la==STORAGE || _la==TABLESPACE) {
						{
						State = 4581; segment_attributes_clause();
						}
					}

					State = 4584; index_org_table_clause();
					}
					break;
				case EXTERNAL:
					{
					State = 4585; Match(EXTERNAL);
					State = 4586; external_table_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_table_clauseContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public External_data_propertiesContext external_data_properties() {
			return GetRuleContext<External_data_propertiesContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public ITerminalNode REJECT() { return GetToken(PlSqlParser.REJECT, 0); }
		public ITerminalNode LIMIT() { return GetToken(PlSqlParser.LIMIT, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public External_table_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_table_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_table_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_table_clauseContext external_table_clause() {
		External_table_clauseContext _localctx = new External_table_clauseContext(Context, State);
		EnterRule(_localctx, 474, RULE_external_table_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4591; Match(LEFT_PAREN);
			State = 4593;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE) {
				{
				State = 4592; Match(TYPE);
				}
			}

			State = 4595; external_data_properties();
			State = 4596; Match(RIGHT_PAREN);
			State = 4603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				{
				State = 4597; Match(REJECT);
				State = 4598; Match(LIMIT);
				State = 4601;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case PLUS_SIGN:
				case MINUS_SIGN:
					{
					State = 4599; integer();
					}
					break;
				case UNLIMITED:
					{
					State = 4600; Match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_data_propertiesContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(PlSqlParser.DIRECTORY, 0); }
		public Directory_nameContext directory_name() {
			return GetRuleContext<Directory_nameContext>(0);
		}
		public ITerminalNode LOCATION() { return GetToken(PlSqlParser.LOCATION, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public External_data_properties_locationContext[] external_data_properties_location() {
			return GetRuleContexts<External_data_properties_locationContext>();
		}
		public External_data_properties_locationContext external_data_properties_location(int i) {
			return GetRuleContext<External_data_properties_locationContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode ACCESS() { return GetToken(PlSqlParser.ACCESS, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(PlSqlParser.PARAMETERS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode CLOB() { return GetToken(PlSqlParser.CLOB, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public External_data_propertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_data_properties; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_data_properties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_data_propertiesContext external_data_properties() {
		External_data_propertiesContext _localctx = new External_data_propertiesContext(Context, State);
		EnterRule(_localctx, 476, RULE_external_data_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4605; Match(DEFAULT);
			State = 4606; Match(DIRECTORY);
			State = 4607; directory_name();
			{
			State = 4608; Match(ACCESS);
			State = 4609; Match(PARAMETERS);
			State = 4615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_PAREN:
				{
				State = 4610; Match(LEFT_PAREN);
				State = 4611; Match(RIGHT_PAREN);
				}
				break;
			case USING:
				{
				State = 4612; Match(USING);
				State = 4613; Match(CLOB);
				State = 4614; subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			State = 4617; Match(LOCATION);
			State = 4618; Match(LEFT_PAREN);
			State = 4619; external_data_properties_location();
			State = 4622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4620; Match(COMMA);
				State = 4621; external_data_properties_location();
				}
				}
				State = 4624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 4626; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class External_data_properties_locationContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Directory_nameContext directory_name() {
			return GetRuleContext<Directory_nameContext>(0);
		}
		public External_data_properties_locationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_external_data_properties_location; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternal_data_properties_location(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public External_data_properties_locationContext external_data_properties_location() {
		External_data_properties_locationContext _localctx = new External_data_properties_locationContext(Context, State);
		EnterRule(_localctx, 478, RULE_external_data_properties_location);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COLON - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 4629;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 4628; directory_name();
					}
				}

				State = 4631; Match(COLON);
				}
			}

			State = 4634; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_org_table_clauseContext : ParserRuleContext {
		public Index_org_overflow_clauseContext index_org_overflow_clause() {
			return GetRuleContext<Index_org_overflow_clauseContext>(0);
		}
		public Mapping_table_clauseContext mapping_table_clause() {
			return GetRuleContext<Mapping_table_clauseContext>(0);
		}
		public ITerminalNode PCTTHRESHOLD() { return GetToken(PlSqlParser.PCTTHRESHOLD, 0); }
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Prefix_compressionContext prefix_compression() {
			return GetRuleContext<Prefix_compressionContext>(0);
		}
		public Index_org_table_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_org_table_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_org_table_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_org_table_clauseContext index_org_table_clause() {
		Index_org_table_clauseContext _localctx = new Index_org_table_clauseContext(Context, State);
		EnterRule(_localctx, 480, RULE_index_org_table_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4640;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAPPING:
			case NOMAPPING:
				{
				State = 4636; mapping_table_clause();
				}
				break;
			case PCTTHRESHOLD:
				{
				State = 4637; Match(PCTTHRESHOLD);
				State = 4638; integer();
				}
				break;
			case COMPRESS:
			case NOCOMPRESS:
				{
				State = 4639; prefix_compression();
				}
				break;
			case INCLUDING:
			case OVERFLOW:
				break;
			default:
				break;
			}
			State = 4642; index_org_overflow_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Mapping_table_clauseContext : ParserRuleContext {
		public ITerminalNode MAPPING() { return GetToken(PlSqlParser.MAPPING, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode NOMAPPING() { return GetToken(PlSqlParser.NOMAPPING, 0); }
		public Mapping_table_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping_table_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapping_table_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mapping_table_clauseContext mapping_table_clause() {
		Mapping_table_clauseContext _localctx = new Mapping_table_clauseContext(Context, State);
		EnterRule(_localctx, 482, RULE_mapping_table_clause);
		try {
			State = 4647;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAPPING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4644; Match(MAPPING);
				State = 4645; Match(TABLE);
				}
				break;
			case NOMAPPING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4646; Match(NOMAPPING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_org_overflow_clauseContext : ParserRuleContext {
		public ITerminalNode OVERFLOW() { return GetToken(PlSqlParser.OVERFLOW, 0); }
		public ITerminalNode INCLUDING() { return GetToken(PlSqlParser.INCLUDING, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Segment_attributes_clauseContext segment_attributes_clause() {
			return GetRuleContext<Segment_attributes_clauseContext>(0);
		}
		public Index_org_overflow_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_org_overflow_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_org_overflow_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_org_overflow_clauseContext index_org_overflow_clause() {
		Index_org_overflow_clauseContext _localctx = new Index_org_overflow_clauseContext(Context, State);
		EnterRule(_localctx, 484, RULE_index_org_overflow_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INCLUDING) {
				{
				State = 4649; Match(INCLUDING);
				State = 4650; column_name();
				}
			}

			State = 4653; Match(OVERFLOW);
			State = 4655;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,586,Context) ) {
			case 1:
				{
				State = 4654; segment_attributes_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Deferred_segment_creationContext : ParserRuleContext {
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode CREATION() { return GetToken(PlSqlParser.CREATION, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode DEFERRED() { return GetToken(PlSqlParser.DEFERRED, 0); }
		public Deferred_segment_creationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deferred_segment_creation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeferred_segment_creation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Deferred_segment_creationContext deferred_segment_creation() {
		Deferred_segment_creationContext _localctx = new Deferred_segment_creationContext(Context, State);
		EnterRule(_localctx, 486, RULE_deferred_segment_creation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4657; Match(SEGMENT);
			State = 4658; Match(CREATION);
			State = 4659;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_clauseContext : ParserRuleContext {
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public Tablespace_nameContext tablespace_name() {
			return GetRuleContext<Tablespace_nameContext>(0);
		}
		public Tablespace_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_clauseContext tablespace_clause() {
		Tablespace_clauseContext _localctx = new Tablespace_clauseContext(Context, State);
		EnterRule(_localctx, 488, RULE_tablespace_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4661; Match(TABLESPACE);
			State = 4662; tablespace_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Store_inContext : ParserRuleContext {
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Tablespace_nameContext[] tablespace_name() {
			return GetRuleContexts<Tablespace_nameContext>();
		}
		public Tablespace_nameContext tablespace_name(int i) {
			return GetRuleContext<Tablespace_nameContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Store_inContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_store_in; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStore_in(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Store_inContext store_in() {
		Store_inContext _localctx = new Store_inContext(Context, State);
		EnterRule(_localctx, 490, RULE_store_in);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4664; Match(STORE);
			State = 4665; Match(IN);
			State = 4666; Match(LEFT_PAREN);
			State = 4667; tablespace_name();
			State = 4672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4668; Match(COMMA);
				State = 4669; tablespace_name();
				}
				}
				State = 4674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4675; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ilm_clauseContext : ParserRuleContext {
		public ITerminalNode ILM() { return GetToken(PlSqlParser.ILM, 0); }
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode POLICY() { return GetToken(PlSqlParser.POLICY, 0); }
		public Ilm_policy_clauseContext ilm_policy_clause() {
			return GetRuleContext<Ilm_policy_clauseContext>(0);
		}
		public Ilm_policy_nameContext ilm_policy_name() {
			return GetRuleContext<Ilm_policy_nameContext>(0);
		}
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Ilm_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ilm_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIlm_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ilm_clauseContext ilm_clause() {
		Ilm_clauseContext _localctx = new Ilm_clauseContext(Context, State);
		EnterRule(_localctx, 492, RULE_ilm_clause);
		int _la;
		try {
			State = 4692;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,589,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4677; Match(ILM);
				State = 4678; Match(ADD);
				State = 4679; Match(POLICY);
				State = 4680; ilm_policy_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4681;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 146)) & ~0x3f) == 0 && ((1L << (_la - 146)) & ((1L << (DELETE - 146)) | (1L << (DISABLE - 146)) | (1L << (ENABLE - 146)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4682; Match(POLICY);
				State = 4683; ilm_policy_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4690;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DELETE:
					{
					State = 4684; Match(DELETE);
					State = 4685; Match(ALL);
					}
					break;
				case ENABLE:
					{
					State = 4686; Match(ENABLE);
					State = 4687; Match(ALL);
					}
					break;
				case DISABLE:
					{
					State = 4688; Match(DISABLE);
					State = 4689; Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ilm_policy_clauseContext : ParserRuleContext {
		public Ilm_compression_policyContext ilm_compression_policy() {
			return GetRuleContext<Ilm_compression_policyContext>(0);
		}
		public Ilm_tiering_policyContext ilm_tiering_policy() {
			return GetRuleContext<Ilm_tiering_policyContext>(0);
		}
		public Ilm_policy_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ilm_policy_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIlm_policy_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ilm_policy_clauseContext ilm_policy_clause() {
		Ilm_policy_clauseContext _localctx = new Ilm_policy_clauseContext(Context, State);
		EnterRule(_localctx, 494, RULE_ilm_policy_clause);
		try {
			State = 4696;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COLUMN:
			case COMPRESS:
			case NO:
			case ROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4694; ilm_compression_policy();
				}
				break;
			case TIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4695; ilm_tiering_policy();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ilm_compression_policyContext : ParserRuleContext {
		public Table_compressionContext table_compression() {
			return GetRuleContext<Table_compressionContext>(0);
		}
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public Ilm_time_periodContext ilm_time_period() {
			return GetRuleContext<Ilm_time_periodContext>(0);
		}
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode ACCESS() { return GetToken(PlSqlParser.ACCESS, 0); }
		public ITerminalNode MODIFICATION() { return GetToken(PlSqlParser.MODIFICATION, 0); }
		public ITerminalNode CREATION() { return GetToken(PlSqlParser.CREATION, 0); }
		public ITerminalNode[] ROW() { return GetTokens(PlSqlParser.ROW); }
		public ITerminalNode ROW(int i) {
			return GetToken(PlSqlParser.ROW, i);
		}
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode COMPRESS() { return GetToken(PlSqlParser.COMPRESS, 0); }
		public ITerminalNode ADVANCED() { return GetToken(PlSqlParser.ADVANCED, 0); }
		public Ilm_compression_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ilm_compression_policy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIlm_compression_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ilm_compression_policyContext ilm_compression_policy() {
		Ilm_compression_policyContext _localctx = new Ilm_compression_policyContext(Context, State);
		EnterRule(_localctx, 496, RULE_ilm_compression_policy);
		int _la;
		try {
			State = 4725;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,593,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4698; table_compression();
				State = 4699;
				_la = TokenStream.LA(1);
				if ( !(_la==GROUP || _la==SEGMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4712;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AFTER:
					{
					State = 4700; Match(AFTER);
					State = 4701; ilm_time_period();
					State = 4702; Match(OF);
					State = 4708;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,591,Context) ) {
					case 1:
						{
						State = 4703; Match(NO);
						State = 4704; Match(ACCESS);
						}
						break;
					case 2:
						{
						State = 4705; Match(NO);
						State = 4706; Match(MODIFICATION);
						}
						break;
					case 3:
						{
						State = 4707; Match(CREATION);
						}
						break;
					}
					}
					break;
				case ON:
					{
					State = 4710; Match(ON);
					State = 4711; function_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4714; Match(ROW);
				State = 4715; Match(STORE);
				State = 4716; Match(COMPRESS);
				State = 4717; Match(ADVANCED);
				State = 4718; Match(ROW);
				State = 4719; Match(AFTER);
				State = 4720; ilm_time_period();
				State = 4721; Match(OF);
				State = 4722; Match(NO);
				State = 4723; Match(MODIFICATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ilm_tiering_policyContext : ParserRuleContext {
		public ITerminalNode TIER() { return GetToken(PlSqlParser.TIER, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public Tablespace_nameContext tablespace_name() {
			return GetRuleContext<Tablespace_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public Ilm_time_periodContext ilm_time_period() {
			return GetRuleContext<Ilm_time_periodContext>(0);
		}
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode ACCESS() { return GetToken(PlSqlParser.ACCESS, 0); }
		public ITerminalNode MODIFICATION() { return GetToken(PlSqlParser.MODIFICATION, 0); }
		public ITerminalNode CREATION() { return GetToken(PlSqlParser.CREATION, 0); }
		public Ilm_tiering_policyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ilm_tiering_policy; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIlm_tiering_policy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ilm_tiering_policyContext ilm_tiering_policy() {
		Ilm_tiering_policyContext _localctx = new Ilm_tiering_policyContext(Context, State);
		EnterRule(_localctx, 498, RULE_ilm_tiering_policy);
		int _la;
		try {
			State = 4758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4727; Match(TIER);
				State = 4728; Match(TO);
				State = 4729; tablespace_name();
				State = 4731;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP || _la==SEGMENT) {
					{
					State = 4730;
					_la = TokenStream.LA(1);
					if ( !(_la==GROUP || _la==SEGMENT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 4733; Match(ON);
				State = 4734; function_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4736; Match(TIER);
				State = 4737; Match(TO);
				State = 4738; tablespace_name();
				State = 4739; Match(READ);
				State = 4740; Match(ONLY);
				State = 4742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP || _la==SEGMENT) {
					{
					State = 4741;
					_la = TokenStream.LA(1);
					if ( !(_la==GROUP || _la==SEGMENT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 4756;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AFTER:
					{
					State = 4744; Match(AFTER);
					State = 4745; ilm_time_period();
					State = 4746; Match(OF);
					State = 4752;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
					case 1:
						{
						State = 4747; Match(NO);
						State = 4748; Match(ACCESS);
						}
						break;
					case 2:
						{
						State = 4749; Match(NO);
						State = 4750; Match(MODIFICATION);
						}
						break;
					case 3:
						{
						State = 4751; Match(CREATION);
						}
						break;
					}
					}
					break;
				case ON:
					{
					State = 4754; Match(ON);
					State = 4755; function_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ilm_time_periodContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode DAYS() { return GetToken(PlSqlParser.DAYS, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode MONTHS() { return GetToken(PlSqlParser.MONTHS, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode YEARS() { return GetToken(PlSqlParser.YEARS, 0); }
		public Ilm_time_periodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ilm_time_period; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIlm_time_period(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ilm_time_periodContext ilm_time_period() {
		Ilm_time_periodContext _localctx = new Ilm_time_periodContext(Context, State);
		EnterRule(_localctx, 500, RULE_ilm_time_period);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4760; integer();
			State = 4761;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY || _la==DAYS || _la==MONTH || _la==MONTHS || _la==YEARS || _la==YEAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Storage_clauseContext : ParserRuleContext {
		public Size_clauseContext initial_size;
		public Size_clauseContext next_size;
		public IToken minextents;
		public IToken pctincrease;
		public IToken freelists;
		public IToken freelist_groups;
		public ITerminalNode STORAGE() { return GetToken(PlSqlParser.STORAGE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] INITIAL() { return GetTokens(PlSqlParser.INITIAL); }
		public ITerminalNode INITIAL(int i) {
			return GetToken(PlSqlParser.INITIAL, i);
		}
		public ITerminalNode[] NEXT() { return GetTokens(PlSqlParser.NEXT); }
		public ITerminalNode NEXT(int i) {
			return GetToken(PlSqlParser.NEXT, i);
		}
		public ITerminalNode[] MINEXTENTS() { return GetTokens(PlSqlParser.MINEXTENTS); }
		public ITerminalNode MINEXTENTS(int i) {
			return GetToken(PlSqlParser.MINEXTENTS, i);
		}
		public ITerminalNode[] PCTINCREASE() { return GetTokens(PlSqlParser.PCTINCREASE); }
		public ITerminalNode PCTINCREASE(int i) {
			return GetToken(PlSqlParser.PCTINCREASE, i);
		}
		public ITerminalNode[] FREELISTS() { return GetTokens(PlSqlParser.FREELISTS); }
		public ITerminalNode FREELISTS(int i) {
			return GetToken(PlSqlParser.FREELISTS, i);
		}
		public ITerminalNode[] FREELIST() { return GetTokens(PlSqlParser.FREELIST); }
		public ITerminalNode FREELIST(int i) {
			return GetToken(PlSqlParser.FREELIST, i);
		}
		public ITerminalNode[] GROUPS() { return GetTokens(PlSqlParser.GROUPS); }
		public ITerminalNode GROUPS(int i) {
			return GetToken(PlSqlParser.GROUPS, i);
		}
		public ITerminalNode[] OPTIMAL() { return GetTokens(PlSqlParser.OPTIMAL); }
		public ITerminalNode OPTIMAL(int i) {
			return GetToken(PlSqlParser.OPTIMAL, i);
		}
		public ITerminalNode[] BUFFER_POOL() { return GetTokens(PlSqlParser.BUFFER_POOL); }
		public ITerminalNode BUFFER_POOL(int i) {
			return GetToken(PlSqlParser.BUFFER_POOL, i);
		}
		public ITerminalNode[] FLASH_CACHE() { return GetTokens(PlSqlParser.FLASH_CACHE); }
		public ITerminalNode FLASH_CACHE(int i) {
			return GetToken(PlSqlParser.FLASH_CACHE, i);
		}
		public ITerminalNode[] ENCRYPT() { return GetTokens(PlSqlParser.ENCRYPT); }
		public ITerminalNode ENCRYPT(int i) {
			return GetToken(PlSqlParser.ENCRYPT, i);
		}
		public Size_clauseContext[] size_clause() {
			return GetRuleContexts<Size_clauseContext>();
		}
		public Size_clauseContext size_clause(int i) {
			return GetRuleContext<Size_clauseContext>(i);
		}
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public ITerminalNode[] KEEP() { return GetTokens(PlSqlParser.KEEP); }
		public ITerminalNode KEEP(int i) {
			return GetToken(PlSqlParser.KEEP, i);
		}
		public ITerminalNode[] RECYCLE() { return GetTokens(PlSqlParser.RECYCLE); }
		public ITerminalNode RECYCLE(int i) {
			return GetToken(PlSqlParser.RECYCLE, i);
		}
		public ITerminalNode[] DEFAULT() { return GetTokens(PlSqlParser.DEFAULT); }
		public ITerminalNode DEFAULT(int i) {
			return GetToken(PlSqlParser.DEFAULT, i);
		}
		public ITerminalNode[] NONE() { return GetTokens(PlSqlParser.NONE); }
		public ITerminalNode NONE(int i) {
			return GetToken(PlSqlParser.NONE, i);
		}
		public ITerminalNode[] UNLIMITED() { return GetTokens(PlSqlParser.UNLIMITED); }
		public ITerminalNode UNLIMITED(int i) {
			return GetToken(PlSqlParser.UNLIMITED, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(PlSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(PlSqlParser.NULL, i);
		}
		public Storage_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storage_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorage_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Storage_clauseContext storage_clause() {
		Storage_clauseContext _localctx = new Storage_clauseContext(Context, State);
		EnterRule(_localctx, 502, RULE_storage_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4763; Match(STORAGE);
			State = 4764; Match(LEFT_PAREN);
			State = 4788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 4788;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INITIAL:
					{
					State = 4765; Match(INITIAL);
					State = 4766; _localctx.initial_size = size_clause();
					}
					break;
				case NEXT:
					{
					State = 4767; Match(NEXT);
					State = 4768; _localctx.next_size = size_clause();
					}
					break;
				case MINEXTENTS:
					{
					State = 4769; Match(MINEXTENTS);
					State = 4770;
					_localctx.minextents = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==UNLIMITED || _la==UNSIGNED_INTEGER) ) {
						_localctx.minextents = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case PCTINCREASE:
					{
					State = 4771; Match(PCTINCREASE);
					State = 4772; _localctx.pctincrease = Match(UNSIGNED_INTEGER);
					}
					break;
				case FREELISTS:
					{
					State = 4773; Match(FREELISTS);
					State = 4774; _localctx.freelists = Match(UNSIGNED_INTEGER);
					}
					break;
				case FREELIST:
					{
					State = 4775; Match(FREELIST);
					State = 4776; Match(GROUPS);
					State = 4777; _localctx.freelist_groups = Match(UNSIGNED_INTEGER);
					}
					break;
				case OPTIMAL:
					{
					State = 4778; Match(OPTIMAL);
					State = 4781;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						State = 4779; size_clause();
						}
						break;
					case NULL:
						{
						State = 4780; Match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case BUFFER_POOL:
					{
					State = 4783; Match(BUFFER_POOL);
					State = 4784;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==RECYCLE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case FLASH_CACHE:
					{
					State = 4785; Match(FLASH_CACHE);
					State = 4786;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==KEEP || _la==NONE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case ENCRYPT:
					{
					State = 4787; Match(ENCRYPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 4790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==BUFFER_POOL || ((((_la - 176)) & ~0x3f) == 0 && ((1L << (_la - 176)) & ((1L << (ENCRYPT - 176)) | (1L << (FLASH_CACHE - 176)) | (1L << (FREELIST - 176)) | (1L << (FREELISTS - 176)))) != 0) || _la==INITIAL || _la==MINEXTENTS || _la==NEXT || _la==OPTIMAL || _la==PCTINCREASE );
			State = 4792; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_definitionContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode SORT() { return GetToken(PlSqlParser.SORT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ENCRYPT() { return GetToken(PlSqlParser.ENCRYPT, 0); }
		public Encryption_specContext encryption_spec() {
			return GetRuleContext<Encryption_specContext>(0);
		}
		public Inline_ref_constraintContext inline_ref_constraint() {
			return GetRuleContext<Inline_ref_constraintContext>(0);
		}
		public ITerminalNode VISIBLE() { return GetToken(PlSqlParser.VISIBLE, 0); }
		public ITerminalNode INVISIBLE() { return GetToken(PlSqlParser.INVISIBLE, 0); }
		public ITerminalNode GENERATED() { return GetToken(PlSqlParser.GENERATED, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode IDENTITY() { return GetToken(PlSqlParser.IDENTITY, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public ITerminalNode ALWAYS() { return GetToken(PlSqlParser.ALWAYS, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Identity_optionsContext identity_options() {
			return GetRuleContext<Identity_optionsContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_definitionContext column_definition() {
		Column_definitionContext _localctx = new Column_definitionContext(Context, State);
		EnterRule(_localctx, 504, RULE_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4794; column_name();
			State = 4796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BOOLEAN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (CHARACTER - 72)) | (1L << (CHAR - 72)) | (1L << (CLOB - 72)) | (1L << (DATE - 72)) | (1L << (DAY - 72)) | (1L << (DEC - 72)) | (1L << (DECIMAL - 72)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (DOUBLE - 161)) | (1L << (DSINTERVAL_UNCONSTRAINED - 161)) | (1L << (FLOAT - 161)))) != 0) || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (HOUR - 240)) | (1L << (INTEGER - 240)) | (1L << (INTERVAL - 240)) | (1L << (INT - 240)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (LONG - 320)) | (1L << (MINUTE - 320)) | (1L << (MLSLABEL - 320)) | (1L << (MONTH - 320)) | (1L << (NATURAL - 320)) | (1L << (NATURALN - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NUMBER - 394)) | (1L << (NUMERIC - 394)) | (1L << (NVARCHAR2 - 394)) | (1L << (PLS_INTEGER - 394)) | (1L << (POSITIVEN - 394)) | (1L << (POSITIVE - 394)))) != 0) || ((((_la - 474)) & ~0x3f) == 0 && ((1L << (_la - 474)) & ((1L << (RAW - 474)) | (1L << (REAL - 474)) | (1L << (ROWID - 474)) | (1L << (SECOND - 474)))) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (SIGNTYPE - 549)) | (1L << (SIMPLE_INTEGER - 549)) | (1L << (SMALLINT - 549)) | (1L << (STRING - 549)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 549)) | (1L << (TIMESTAMP - 549)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 549)) | (1L << (TIMESTAMP_UNCONSTRAINED - 549)) | (1L << (TIMEZONE_ABBR - 549)) | (1L << (TIMEZONE_HOUR - 549)) | (1L << (TIMEZONE_MINUTE - 549)) | (1L << (TIMEZONE_REGION - 549)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (UROWID - 643)) | (1L << (VARCHAR2 - 643)) | (1L << (VARCHAR - 643)) | (1L << (YEAR - 643)) | (1L << (YMINTERVAL_UNCONSTRAINED - 643)))) != 0)) {
				{
				State = 4795; datatype();
				}
			}

			State = 4799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SORT) {
				{
				State = 4798; Match(SORT);
				}
			}

			State = 4802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INVISIBLE || _la==VISIBLE) {
				{
				State = 4801;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
				{
				State = 4804; Match(DEFAULT);
				State = 4807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON) {
					{
					State = 4805; Match(ON);
					State = 4806; Match(NULL);
					}
				}

				State = 4809; expression();
				}
				break;
			case GENERATED:
				{
				{
				State = 4810; Match(GENERATED);
				State = 4818;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALWAYS:
					{
					State = 4811; Match(ALWAYS);
					}
					break;
				case BY:
					{
					State = 4812; Match(BY);
					State = 4813; Match(DEFAULT);
					State = 4816;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ON) {
						{
						State = 4814; Match(ON);
						State = 4815; Match(NULL);
						}
					}

					}
					break;
				case AS:
					break;
				default:
					break;
				}
				State = 4820; Match(AS);
				State = 4821; Match(IDENTITY);
				State = 4826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 4822; Match(LEFT_PAREN);
					State = 4823; identity_options();
					State = 4824; Match(RIGHT_PAREN);
					}
				}

				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case ENCRYPT:
			case NOT:
			case NULL:
			case PRIMARY:
			case REFERENCES:
			case SCOPE:
			case UNIQUE:
			case WITH:
			case RIGHT_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			State = 4832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENCRYPT) {
				{
				State = 4830; Match(ENCRYPT);
				State = 4831; encryption_spec();
				}
			}

			State = 4840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,612,Context) ) {
			case 1:
				{
				State = 4835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 4834; inline_constraint();
					}
					}
					State = 4837;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==CHECK || _la==CONSTRAINT || _la==NOT || _la==NULL || _la==PRIMARY || _la==REFERENCES || _la==UNIQUE );
				}
				break;
			case 2:
				{
				State = 4839; inline_ref_constraint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Virtual_column_definitionContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode SORT() { return GetToken(PlSqlParser.SORT, 0); }
		public ITerminalNode GENERATED() { return GetToken(PlSqlParser.GENERATED, 0); }
		public ITerminalNode ALWAYS() { return GetToken(PlSqlParser.ALWAYS, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(PlSqlParser.VIRTUAL, 0); }
		public Evaluation_edition_clauseContext evaluation_edition_clause() {
			return GetRuleContext<Evaluation_edition_clauseContext>(0);
		}
		public Unusable_editions_clauseContext unusable_editions_clause() {
			return GetRuleContext<Unusable_editions_clauseContext>(0);
		}
		public Inline_constraintContext[] inline_constraint() {
			return GetRuleContexts<Inline_constraintContext>();
		}
		public Inline_constraintContext inline_constraint(int i) {
			return GetRuleContext<Inline_constraintContext>(i);
		}
		public ITerminalNode VISIBLE() { return GetToken(PlSqlParser.VISIBLE, 0); }
		public ITerminalNode INVISIBLE() { return GetToken(PlSqlParser.INVISIBLE, 0); }
		public Virtual_column_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtual_column_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtual_column_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Virtual_column_definitionContext virtual_column_definition() {
		Virtual_column_definitionContext _localctx = new Virtual_column_definitionContext(Context, State);
		EnterRule(_localctx, 506, RULE_virtual_column_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4842; column_name();
			State = 4844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BOOLEAN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (CHARACTER - 72)) | (1L << (CHAR - 72)) | (1L << (CLOB - 72)) | (1L << (DATE - 72)) | (1L << (DAY - 72)) | (1L << (DEC - 72)) | (1L << (DECIMAL - 72)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (DOUBLE - 161)) | (1L << (DSINTERVAL_UNCONSTRAINED - 161)) | (1L << (FLOAT - 161)))) != 0) || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (HOUR - 240)) | (1L << (INTEGER - 240)) | (1L << (INTERVAL - 240)) | (1L << (INT - 240)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (LONG - 320)) | (1L << (MINUTE - 320)) | (1L << (MLSLABEL - 320)) | (1L << (MONTH - 320)) | (1L << (NATURAL - 320)) | (1L << (NATURALN - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NUMBER - 394)) | (1L << (NUMERIC - 394)) | (1L << (NVARCHAR2 - 394)) | (1L << (PLS_INTEGER - 394)) | (1L << (POSITIVEN - 394)) | (1L << (POSITIVE - 394)))) != 0) || ((((_la - 474)) & ~0x3f) == 0 && ((1L << (_la - 474)) & ((1L << (RAW - 474)) | (1L << (REAL - 474)) | (1L << (ROWID - 474)) | (1L << (SECOND - 474)))) != 0) || ((((_la - 549)) & ~0x3f) == 0 && ((1L << (_la - 549)) & ((1L << (SIGNTYPE - 549)) | (1L << (SIMPLE_INTEGER - 549)) | (1L << (SMALLINT - 549)) | (1L << (STRING - 549)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 549)) | (1L << (TIMESTAMP - 549)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 549)) | (1L << (TIMESTAMP_UNCONSTRAINED - 549)) | (1L << (TIMEZONE_ABBR - 549)) | (1L << (TIMEZONE_HOUR - 549)) | (1L << (TIMEZONE_MINUTE - 549)) | (1L << (TIMEZONE_REGION - 549)))) != 0) || ((((_la - 643)) & ~0x3f) == 0 && ((1L << (_la - 643)) & ((1L << (UROWID - 643)) | (1L << (VARCHAR2 - 643)) | (1L << (VARCHAR - 643)) | (1L << (YEAR - 643)) | (1L << (YMINTERVAL_UNCONSTRAINED - 643)))) != 0)) {
				{
				State = 4843; datatype();
				}
			}

			State = 4847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SORT) {
				{
				State = 4846; Match(SORT);
				}
			}

			State = 4850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INVISIBLE || _la==VISIBLE) {
				{
				State = 4849;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GENERATED) {
				{
				State = 4852; Match(GENERATED);
				State = 4853; Match(ALWAYS);
				}
			}

			State = 4856; Match(AS);
			State = 4857; Match(LEFT_PAREN);
			State = 4858; Match(RIGHT_PAREN);
			State = 4860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VIRTUAL) {
				{
				State = 4859; Match(VIRTUAL);
				}
			}

			State = 4863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EVALUATION) {
				{
				State = 4862; evaluation_edition_clause();
				}
			}

			State = 4866;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNUSABLE) {
				{
				State = 4865; unusable_editions_clause();
				}
			}

			State = 4871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CHECK || _la==CONSTRAINT || _la==NOT || _la==NULL || _la==PRIMARY || _la==REFERENCES || _la==UNIQUE) {
				{
				{
				State = 4868; inline_constraint();
				}
				}
				State = 4873;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Period_definitionContext : ParserRuleContext {
		public Column_nameContext valid_time_column;
		public Column_nameContext start_time_column;
		public Column_nameContext end_time_column;
		public ITerminalNode PERIOD() { return GetToken(PlSqlParser.PERIOD, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public Period_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_period_definition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeriod_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Period_definitionContext period_definition() {
		Period_definitionContext _localctx = new Period_definitionContext(Context, State);
		EnterRule(_localctx, 508, RULE_period_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4874; Match(PERIOD);
			State = 4875; Match(FOR);
			State = 4876; _localctx.valid_time_column = column_name();
			State = 4881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 4877; _localctx.start_time_column = column_name();
				State = 4878; Match(COMMA);
				State = 4879; _localctx.end_time_column = column_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supplemental_logging_propsContext : ParserRuleContext {
		public ITerminalNode SUPPLEMENTAL() { return GetToken(PlSqlParser.SUPPLEMENTAL, 0); }
		public ITerminalNode LOG() { return GetToken(PlSqlParser.LOG, 0); }
		public Supplemental_log_grp_clauseContext supplemental_log_grp_clause() {
			return GetRuleContext<Supplemental_log_grp_clauseContext>(0);
		}
		public Supplemental_id_key_clauseContext supplemental_id_key_clause() {
			return GetRuleContext<Supplemental_id_key_clauseContext>(0);
		}
		public Supplemental_logging_propsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplemental_logging_props; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplemental_logging_props(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Supplemental_logging_propsContext supplemental_logging_props() {
		Supplemental_logging_propsContext _localctx = new Supplemental_logging_propsContext(Context, State);
		EnterRule(_localctx, 510, RULE_supplemental_logging_props);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4883; Match(SUPPLEMENTAL);
			State = 4884; Match(LOG);
			State = 4887;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP:
				{
				State = 4885; supplemental_log_grp_clause();
				}
				break;
			case DATA:
				{
				State = 4886; supplemental_id_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supplemental_log_grp_clauseContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public Log_group_nameContext log_group_name() {
			return GetRuleContext<Log_group_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_loggedContext[] column_logged() {
			return GetRuleContexts<Column_loggedContext>();
		}
		public Column_loggedContext column_logged(int i) {
			return GetRuleContext<Column_loggedContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode ALWAYS() { return GetToken(PlSqlParser.ALWAYS, 0); }
		public Supplemental_log_grp_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplemental_log_grp_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplemental_log_grp_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Supplemental_log_grp_clauseContext supplemental_log_grp_clause() {
		Supplemental_log_grp_clauseContext _localctx = new Supplemental_log_grp_clauseContext(Context, State);
		EnterRule(_localctx, 512, RULE_supplemental_log_grp_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4889; Match(GROUP);
			State = 4890; log_group_name();
			State = 4891; Match(LEFT_PAREN);
			State = 4892; column_logged();
			State = 4897;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4893; Match(COMMA);
				State = 4894; column_logged();
				}
				}
				State = 4899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4900; Match(RIGHT_PAREN);
			State = 4902;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALWAYS) {
				{
				State = 4901; Match(ALWAYS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Supplemental_id_key_clauseContext : ParserRuleContext {
		public ITerminalNode DATA() { return GetToken(PlSqlParser.DATA, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode COLUMNS() { return GetToken(PlSqlParser.COLUMNS, 0); }
		public ITerminalNode[] ALL() { return GetTokens(PlSqlParser.ALL); }
		public ITerminalNode ALL(int i) {
			return GetToken(PlSqlParser.ALL, i);
		}
		public ITerminalNode[] PRIMARY() { return GetTokens(PlSqlParser.PRIMARY); }
		public ITerminalNode PRIMARY(int i) {
			return GetToken(PlSqlParser.PRIMARY, i);
		}
		public ITerminalNode[] KEY() { return GetTokens(PlSqlParser.KEY); }
		public ITerminalNode KEY(int i) {
			return GetToken(PlSqlParser.KEY, i);
		}
		public ITerminalNode[] UNIQUE() { return GetTokens(PlSqlParser.UNIQUE); }
		public ITerminalNode UNIQUE(int i) {
			return GetToken(PlSqlParser.UNIQUE, i);
		}
		public ITerminalNode[] FOREIGN() { return GetTokens(PlSqlParser.FOREIGN); }
		public ITerminalNode FOREIGN(int i) {
			return GetToken(PlSqlParser.FOREIGN, i);
		}
		public Supplemental_id_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supplemental_id_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupplemental_id_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Supplemental_id_key_clauseContext supplemental_id_key_clause() {
		Supplemental_id_key_clauseContext _localctx = new Supplemental_id_key_clauseContext(Context, State);
		EnterRule(_localctx, 514, RULE_supplemental_id_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4904; Match(DATA);
			State = 4905; Match(LEFT_PAREN);
			State = 4912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 4912;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ALL:
					{
					State = 4906; Match(ALL);
					}
					break;
				case PRIMARY:
					{
					State = 4907; Match(PRIMARY);
					State = 4908; Match(KEY);
					}
					break;
				case UNIQUE:
					{
					State = 4909; Match(UNIQUE);
					}
					break;
				case FOREIGN:
					{
					State = 4910; Match(FOREIGN);
					State = 4911; Match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 4914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ALL || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE );
			State = 4916; Match(RIGHT_PAREN);
			State = 4917; Match(COLUMNS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_loggedContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode LOG() { return GetToken(PlSqlParser.LOG, 0); }
		public Column_loggedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_logged; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_logged(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_loggedContext column_logged() {
		Column_loggedContext _localctx = new Column_loggedContext(Context, State);
		EnterRule(_localctx, 516, RULE_column_logged);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4919; column_name();
			State = 4922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO) {
				{
				State = 4920; Match(NO);
				State = 4921; Match(LOG);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Evaluation_edition_clauseContext : ParserRuleContext {
		public ITerminalNode EVALUATION() { return GetToken(PlSqlParser.EVALUATION, 0); }
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode EDITION() { return GetToken(PlSqlParser.EDITION, 0); }
		public Edition_nameContext edition_name() {
			return GetRuleContext<Edition_nameContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Evaluation_edition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evaluation_edition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvaluation_edition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Evaluation_edition_clauseContext evaluation_edition_clause() {
		Evaluation_edition_clauseContext _localctx = new Evaluation_edition_clauseContext(Context, State);
		EnterRule(_localctx, 518, RULE_evaluation_edition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4924; Match(EVALUATION);
			State = 4925; Match(USING);
			State = 4932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
				{
				State = 4926; Match(CURRENT);
				State = 4927; Match(EDITION);
				}
				break;
			case EDITION:
				{
				State = 4928; Match(EDITION);
				State = 4929; edition_name();
				}
				break;
			case NULL:
				{
				State = 4930; Match(NULL);
				State = 4931; Match(EDITION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Edition_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Edition_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edition_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdition_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Edition_nameContext edition_name() {
		Edition_nameContext _localctx = new Edition_nameContext(Context, State);
		EnterRule(_localctx, 520, RULE_edition_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4934; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unusable_editions_clauseContext : ParserRuleContext {
		public ITerminalNode UNUSABLE() { return GetToken(PlSqlParser.UNUSABLE, 0); }
		public ITerminalNode BEFORE() { return GetToken(PlSqlParser.BEFORE, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode EDITION() { return GetToken(PlSqlParser.EDITION, 0); }
		public Edition_nameContext edition_name() {
			return GetRuleContext<Edition_nameContext>(0);
		}
		public Unusable_editions_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unusable_editions_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnusable_editions_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unusable_editions_clauseContext unusable_editions_clause() {
		Unusable_editions_clauseContext _localctx = new Unusable_editions_clauseContext(Context, State);
		EnterRule(_localctx, 522, RULE_unusable_editions_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4936; Match(UNUSABLE);
			State = 4937; Match(BEFORE);
			State = 4942;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
				{
				State = 4938; Match(CURRENT);
				State = 4939; Match(EDITION);
				}
				break;
			case EDITION:
				{
				State = 4940; Match(EDITION);
				State = 4941; edition_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identity_optionsContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode INCREMENT() { return GetToken(PlSqlParser.INCREMENT, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode START() { return GetToken(PlSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode NOMAXVALUE() { return GetToken(PlSqlParser.NOMAXVALUE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(PlSqlParser.MINVALUE, 0); }
		public ITerminalNode NOMINVALUE() { return GetToken(PlSqlParser.NOMINVALUE, 0); }
		public ITerminalNode CYCLE() { return GetToken(PlSqlParser.CYCLE, 0); }
		public ITerminalNode NOCYCLE() { return GetToken(PlSqlParser.NOCYCLE, 0); }
		public ITerminalNode CACHE() { return GetToken(PlSqlParser.CACHE, 0); }
		public ITerminalNode NOCACHE() { return GetToken(PlSqlParser.NOCACHE, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode NOORDER() { return GetToken(PlSqlParser.NOORDER, 0); }
		public Identity_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identity_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentity_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identity_optionsContext identity_options() {
		Identity_optionsContext _localctx = new Identity_optionsContext(Context, State);
		EnterRule(_localctx, 524, RULE_identity_options);
		int _la;
		try {
			State = 4968;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INCREMENT:
			case START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4948;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INCREMENT:
					{
					State = 4944; Match(INCREMENT);
					State = 4945; Match(BY);
					}
					break;
				case START:
					{
					State = 4946; Match(START);
					State = 4947; Match(WITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4950; Match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
			case NOMAXVALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4954;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAXVALUE:
					{
					State = 4951; Match(MAXVALUE);
					State = 4952; Match(UNSIGNED_INTEGER);
					}
					break;
				case NOMAXVALUE:
					{
					State = 4953; Match(NOMAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case MINVALUE:
			case NOMINVALUE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4959;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MINVALUE:
					{
					State = 4956; Match(MINVALUE);
					State = 4957; Match(UNSIGNED_INTEGER);
					}
					break;
				case NOMINVALUE:
					{
					State = 4958; Match(NOMINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CYCLE:
			case NOCYCLE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4961;
				_la = TokenStream.LA(1);
				if ( !(_la==CYCLE || _la==NOCYCLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CACHE:
			case NOCACHE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4965;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CACHE:
					{
					State = 4962; Match(CACHE);
					State = 4963; Match(UNSIGNED_INTEGER);
					}
					break;
				case NOCACHE:
					{
					State = 4964; Match(NOCACHE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NOORDER:
			case ORDER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4967;
				_la = TokenStream.LA(1);
				if ( !(_la==NOORDER || _la==ORDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Encryption_specContext : ParserRuleContext {
		public IToken Encrypt_Algoritm;
		public IToken Password;
		public IToken Integrity_Algoritm;
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode IDENTIFIED() { return GetToken(PlSqlParser.IDENTIFIED, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode SALT() { return GetToken(PlSqlParser.SALT, 0); }
		public ITerminalNode[] CHAR_STRING() { return GetTokens(PlSqlParser.CHAR_STRING); }
		public ITerminalNode CHAR_STRING(int i) {
			return GetToken(PlSqlParser.CHAR_STRING, i);
		}
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public Encryption_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryption_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncryption_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Encryption_specContext encryption_spec() {
		Encryption_specContext _localctx = new Encryption_specContext(Context, State);
		EnterRule(_localctx, 526, RULE_encryption_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 4970; Match(USING);
				State = 4971; _localctx.Encrypt_Algoritm = Match(CHAR_STRING);
				}
			}

			State = 4977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIED) {
				{
				State = 4974; Match(IDENTIFIED);
				State = 4975; Match(BY);
				State = 4976; _localctx.Password = Match(CHAR_STRING);
				}
			}

			State = 4980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING) {
				{
				State = 4979; _localctx.Integrity_Algoritm = Match(CHAR_STRING);
				}
			}

			State = 4986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
			case 1:
				{
				State = 4983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4982; Match(NO);
					}
				}

				State = 4985; Match(SALT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inline_ref_constraintContext : ParserRuleContext {
		public ITerminalNode SCOPE() { return GetToken(PlSqlParser.SCOPE, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public Inline_ref_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inline_ref_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInline_ref_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inline_ref_constraintContext inline_ref_constraint() {
		Inline_ref_constraintContext _localctx = new Inline_ref_constraintContext(Context, State);
		EnterRule(_localctx, 528, RULE_inline_ref_constraint);
		int _la;
		try {
			State = 5001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCOPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4988; Match(SCOPE);
				State = 4989; Match(IS);
				State = 4990; table_fullname();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4991; Match(WITH);
				State = 4992; Match(ROWID);
				}
				break;
			case CONSTRAINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4993; Match(CONSTRAINT);
				State = 4995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 4994; constraint_name();
					}
				}

				State = 4997; references_clause();
				State = 4999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (DEFERRABLE - 142)) | (1L << (DISABLE - 142)) | (1L << (ENABLE - 142)) | (1L << (EXCEPTIONS - 142)))) != 0) || _la==INITIALLY || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (NORELY - 384)) | (1L << (NOT - 384)) | (1L << (NOVALIDATE - 384)))) != 0) || _la==RELY || _la==USING || _la==VALIDATE) {
					{
					State = 4998; constraint_state();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Out_of_line_ref_constraintContext : ParserRuleContext {
		public ITerminalNode SCOPE() { return GetToken(PlSqlParser.SCOPE, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public ITerminalNode FOREIGN() { return GetToken(PlSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Constraint_stateContext constraint_state() {
			return GetRuleContext<Constraint_stateContext>(0);
		}
		public Out_of_line_ref_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_out_of_line_ref_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOut_of_line_ref_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Out_of_line_ref_constraintContext out_of_line_ref_constraint() {
		Out_of_line_ref_constraintContext _localctx = new Out_of_line_ref_constraintContext(Context, State);
		EnterRule(_localctx, 530, RULE_out_of_line_ref_constraint);
		int _la;
		try {
			State = 5029;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCOPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5003; Match(SCOPE);
				State = 5004; Match(FOR);
				State = 5005; Match(LEFT_PAREN);
				State = 5006; column_name();
				State = 5007; Match(RIGHT_PAREN);
				State = 5008; Match(IS);
				State = 5009; table_fullname();
				}
				break;
			case REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5011; Match(REF);
				State = 5012; Match(LEFT_PAREN);
				State = 5013; column_name();
				State = 5014; Match(RIGHT_PAREN);
				State = 5015; Match(WITH);
				State = 5016; Match(ROWID);
				}
				break;
			case CONSTRAINT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5018; Match(CONSTRAINT);
				State = 5020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
					{
					State = 5019; constraint_name();
					}
				}

				State = 5022; Match(FOREIGN);
				State = 5023; Match(KEY);
				State = 5024; paren_column_list();
				State = 5025; references_clause();
				State = 5027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (DEFERRABLE - 142)) | (1L << (DISABLE - 142)) | (1L << (ENABLE - 142)) | (1L << (EXCEPTIONS - 142)))) != 0) || _la==INITIALLY || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (NORELY - 384)) | (1L << (NOT - 384)) | (1L << (NOVALIDATE - 384)))) != 0) || _la==RELY || _la==USING || _la==VALIDATE) {
					{
					State = 5026; constraint_state();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Size_clauseContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public Size_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_size_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSize_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Size_clauseContext size_clause() {
		Size_clauseContext _localctx = new Size_clauseContext(Context, State);
		EnterRule(_localctx, 532, RULE_size_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5031; Match(UNSIGNED_INTEGER);
			State = 5033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REGULAR_ID) {
				{
				State = 5032; Match(REGULAR_ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_tableContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(PlSqlParser.SEMICOLON, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_tableContext drop_table() {
		Drop_tableContext _localctx = new Drop_tableContext(Context, State);
		EnterRule(_localctx, 534, RULE_drop_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5035; Match(DROP);
			State = 5036; Match(TABLE);
			State = 5037; tableview_name();
			State = 5038; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_on_columnContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COLUMN() { return GetToken(PlSqlParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode PERIOD() { return GetToken(PlSqlParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_on_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_on_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_on_columnContext comment_on_column() {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(Context, State);
		EnterRule(_localctx, 536, RULE_comment_on_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5040; Match(COMMENT);
			State = 5041; Match(ON);
			State = 5042; Match(COLUMN);
			State = 5043; tableview_name();
			State = 5044; Match(PERIOD);
			State = 5045; column_name();
			State = 5046; Match(IS);
			State = 5047; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_synonymContext : ParserRuleContext {
		public Schema_nameContext Schema_synonym;
		public Schema_nameContext objectSchema;
		public Schema_object_nameContext objectName;
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(PlSqlParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return GetRuleContext<Synonym_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(PlSqlParser.PUBLIC, 0); }
		public ITerminalNode[] PERIOD() { return GetTokens(PlSqlParser.PERIOD); }
		public ITerminalNode PERIOD(int i) {
			return GetToken(PlSqlParser.PERIOD, i);
		}
		public ITerminalNode AT_SIGN() { return GetToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public ITerminalNode EDITIONABLE() { return GetToken(PlSqlParser.EDITIONABLE, 0); }
		public ITerminalNode NONEDITIONABLE() { return GetToken(PlSqlParser.NONEDITIONABLE, 0); }
		public Schema_nameContext[] schema_name() {
			return GetRuleContexts<Schema_nameContext>();
		}
		public Schema_nameContext schema_name(int i) {
			return GetRuleContext<Schema_nameContext>(i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_synonym; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate_synonym(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Create_synonymContext create_synonym() {
		Create_synonymContext _localctx = new Create_synonymContext(Context, State);
		EnterRule(_localctx, 538, RULE_create_synonym);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5049; Match(CREATE);
			State = 5052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 5050; Match(OR);
				State = 5051; Match(REPLACE);
				}
			}

			State = 5055;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EDITIONABLE || _la==NONEDITIONABLE) {
				{
				State = 5054;
				_la = TokenStream.LA(1);
				if ( !(_la==EDITIONABLE || _la==NONEDITIONABLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5058;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PUBLIC) {
				{
				State = 5057; Match(PUBLIC);
				}
			}

			State = 5060; Match(SYNONYM);
			State = 5064;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,650,Context) ) {
			case 1:
				{
				State = 5061; _localctx.Schema_synonym = schema_name();
				State = 5062; Match(PERIOD);
				}
				break;
			}
			State = 5066; synonym_name();
			State = 5067; Match(FOR);
			State = 5071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,651,Context) ) {
			case 1:
				{
				State = 5068; _localctx.objectSchema = schema_name();
				State = 5069; Match(PERIOD);
				}
				break;
			}
			State = 5073; _localctx.objectName = schema_object_name();
			State = 5076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN) {
				{
				State = 5074; Match(AT_SIGN);
				State = 5075; link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comment_on_tableContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment_on_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment_on_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comment_on_tableContext comment_on_table() {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(Context, State);
		EnterRule(_localctx, 540, RULE_comment_on_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5078; Match(COMMENT);
			State = 5079; Match(ON);
			State = 5080; Match(TABLE);
			State = 5081; tableview_name();
			State = 5082; Match(IS);
			State = 5083; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_tableContext : ParserRuleContext {
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Add_constraintContext add_constraint() {
			return GetRuleContext<Add_constraintContext>(0);
		}
		public Drop_constraintContext drop_constraint() {
			return GetRuleContext<Drop_constraintContext>(0);
		}
		public Enable_constraintContext enable_constraint() {
			return GetRuleContext<Enable_constraintContext>(0);
		}
		public Disable_constraintContext disable_constraint() {
			return GetRuleContext<Disable_constraintContext>(0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlter_table(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alter_tableContext alter_table() {
		Alter_tableContext _localctx = new Alter_tableContext(Context, State);
		EnterRule(_localctx, 542, RULE_alter_table);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5085; Match(ALTER);
			State = 5086; Match(TABLE);
			State = 5087; tableview_name();
			State = 5092;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 5088; add_constraint();
				}
				break;
			case DROP:
				{
				State = 5089; drop_constraint();
				}
				break;
			case ENABLE:
				{
				State = 5090; enable_constraint();
				}
				break;
			case DISABLE:
				{
				State = 5091; disable_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_constraintContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return GetRuleContext<Primary_key_clauseContext>(0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return GetRuleContext<Foreign_key_clauseContext>(0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return GetRuleContext<Unique_key_clauseContext>(0);
		}
		public Check_constraintContext check_constraint() {
			return GetRuleContext<Check_constraintContext>(0);
		}
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_constraintContext add_constraint() {
		Add_constraintContext _localctx = new Add_constraintContext(Context, State);
		EnterRule(_localctx, 544, RULE_add_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5094; Match(ADD);
			State = 5097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONSTRAINT) {
				{
				State = 5095; Match(CONSTRAINT);
				State = 5096; constraint_name();
				}
			}

			State = 5103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY:
				{
				State = 5099; primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				State = 5100; foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				State = 5101; unique_key_clause();
				}
				break;
			case CHECK:
				{
				State = 5102; check_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_constraintContext : ParserRuleContext {
		public ITerminalNode CHECK() { return GetToken(PlSqlParser.CHECK, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public Check_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_constraintContext check_constraint() {
		Check_constraintContext _localctx = new Check_constraintContext(Context, State);
		EnterRule(_localctx, 546, RULE_check_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5105; Match(CHECK);
			State = 5106; Match(LEFT_PAREN);
			State = 5107; condition();
			State = 5108; Match(RIGHT_PAREN);
			State = 5110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,656,Context) ) {
			case 1:
				{
				State = 5109; Match(DISABLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_constraintContext : ParserRuleContext {
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Drop_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDrop_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Drop_constraintContext drop_constraint() {
		Drop_constraintContext _localctx = new Drop_constraintContext(Context, State);
		EnterRule(_localctx, 548, RULE_drop_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5112; Match(DROP);
			State = 5113; Match(CONSTRAINT);
			State = 5114; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enable_constraintContext : ParserRuleContext {
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Enable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enable_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enable_constraintContext enable_constraint() {
		Enable_constraintContext _localctx = new Enable_constraintContext(Context, State);
		EnterRule(_localctx, 550, RULE_enable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5116; Match(ENABLE);
			State = 5117; Match(CONSTRAINT);
			State = 5118; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Disable_constraintContext : ParserRuleContext {
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Disable_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_disable_constraint; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisable_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Disable_constraintContext disable_constraint() {
		Disable_constraintContext _localctx = new Disable_constraintContext(Context, State);
		EnterRule(_localctx, 552, RULE_disable_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5120; Match(DISABLE);
			State = 5121; Match(CONSTRAINT);
			State = 5122; constraint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreign_key_clauseContext : ParserRuleContext {
		public ITerminalNode FOREIGN() { return GetToken(PlSqlParser.FOREIGN, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public References_clauseContext references_clause() {
			return GetRuleContext<References_clauseContext>(0);
		}
		public On_delete_clauseContext on_delete_clause() {
			return GetRuleContext<On_delete_clauseContext>(0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreign_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeign_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreign_key_clauseContext foreign_key_clause() {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(Context, State);
		EnterRule(_localctx, 554, RULE_foreign_key_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5124; Match(FOREIGN);
			State = 5125; Match(KEY);
			State = 5126; paren_column_list();
			State = 5127; references_clause();
			State = 5129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 5128; on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class References_clauseContext : ParserRuleContext {
		public ITerminalNode REFERENCES() { return GetToken(PlSqlParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public References_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferences_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public References_clauseContext references_clause() {
		References_clauseContext _localctx = new References_clauseContext(Context, State);
		EnterRule(_localctx, 556, RULE_references_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5131; Match(REFERENCES);
			State = 5132; tableview_name();
			State = 5133; paren_column_list();
			State = 5141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,659,Context) ) {
			case 1:
				{
				State = 5134; Match(ON);
				State = 5135; Match(DELETE);
				State = 5139;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CASCADE:
					{
					State = 5136; Match(CASCADE);
					}
					break;
				case SET:
					{
					State = 5137; Match(SET);
					State = 5138; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_delete_clauseContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_delete_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_delete_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_delete_clauseContext on_delete_clause() {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(Context, State);
		EnterRule(_localctx, 558, RULE_on_delete_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5143; Match(ON);
			State = 5144; Match(DELETE);
			State = 5148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE:
				{
				State = 5145; Match(CASCADE);
				}
				break;
			case SET:
				{
				State = 5146; Match(SET);
				State = 5147; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unique_key_clauseContext : ParserRuleContext {
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unique_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnique_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unique_key_clauseContext unique_key_clause() {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(Context, State);
		EnterRule(_localctx, 560, RULE_unique_key_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5150; Match(UNIQUE);
			State = 5151; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_key_clauseContext : ParserRuleContext {
		public ITerminalNode PRIMARY() { return GetToken(PlSqlParser.PRIMARY, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_key_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_key_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_key_clauseContext primary_key_clause() {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(Context, State);
		EnterRule(_localctx, 562, RULE_primary_key_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5153; Match(PRIMARY);
			State = 5154; Match(KEY);
			State = 5155; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_blockContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(PlSqlParser.SEMICOLON, 0); }
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Seq_of_declare_specsContext seq_of_declare_specs() {
			return GetRuleContext<Seq_of_declare_specsContext>(0);
		}
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_handlerContext[] exception_handler() {
			return GetRuleContexts<Exception_handlerContext>();
		}
		public Exception_handlerContext exception_handler(int i) {
			return GetRuleContext<Exception_handlerContext>(i);
		}
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_blockContext anonymous_block() {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(Context, State);
		EnterRule(_localctx, 564, RULE_anonymous_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 5157; Match(DECLARE);
				State = 5158; seq_of_declare_specs();
				}
			}

			State = 5161; Match(BEGIN);
			State = 5162; seq_of_statements();
			State = 5169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 5163; Match(EXCEPTION);
				State = 5165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5164; exception_handler();
					}
					}
					State = 5167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
			}

			State = 5171; Match(END);
			State = 5172; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Invoker_rights_clauseContext : ParserRuleContext {
		public ITerminalNode AUTHID() { return GetToken(PlSqlParser.AUTHID, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(PlSqlParser.CURRENT_USER, 0); }
		public ITerminalNode DEFINER() { return GetToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invoker_rights_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvoker_rights_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Invoker_rights_clauseContext invoker_rights_clause() {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(Context, State);
		EnterRule(_localctx, 566, RULE_invoker_rights_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5174; Match(AUTHID);
			State = 5175;
			_la = TokenStream.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compiler_parameters_clauseContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compiler_parameters_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompiler_parameters_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compiler_parameters_clauseContext compiler_parameters_clause() {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(Context, State);
		EnterRule(_localctx, 568, RULE_compiler_parameters_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5177; identifier();
			State = 5178; Match(EQUALS_OP);
			State = 5179; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_specContext : ParserRuleContext {
		public ITerminalNode LANGUAGE() { return GetToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return GetRuleContext<Java_specContext>(0);
		}
		public C_specContext c_spec() {
			return GetRuleContext<C_specContext>(0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Call_specContext call_spec() {
		Call_specContext _localctx = new Call_specContext(Context, State);
		EnterRule(_localctx, 570, RULE_call_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5181; Match(LANGUAGE);
			State = 5184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JAVA:
				{
				State = 5182; java_spec();
				}
				break;
			case C_LETTER:
				{
				State = 5183; c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Java_specContext : ParserRuleContext {
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_java_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJava_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Java_specContext java_spec() {
		Java_specContext _localctx = new Java_specContext(Context, State);
		EnterRule(_localctx, 572, RULE_java_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5186; Match(JAVA);
			State = 5187; Match(NAME);
			State = 5188; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_specContext : ParserRuleContext {
		public ITerminalNode C_LETTER() { return GetToken(PlSqlParser.C_LETTER, 0); }
		public ITerminalNode LIBRARY() { return GetToken(PlSqlParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return GetRuleContext<C_agent_in_clauseContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode CONTEXT() { return GetToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return GetRuleContext<C_parameters_clauseContext>(0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_specContext c_spec() {
		C_specContext _localctx = new C_specContext(Context, State);
		EnterRule(_localctx, 574, RULE_c_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5190; Match(C_LETTER);
			State = 5193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 5191; Match(NAME);
				State = 5192; Match(CHAR_STRING);
				}
			}

			State = 5195; Match(LIBRARY);
			State = 5196; identifier();
			State = 5198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGENT) {
				{
				State = 5197; c_agent_in_clause();
				}
			}

			State = 5202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5200; Match(WITH);
				State = 5201; Match(CONTEXT);
				}
			}

			State = 5205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMETERS) {
				{
				State = 5204; c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_agent_in_clauseContext : ParserRuleContext {
		public ITerminalNode AGENT() { return GetToken(PlSqlParser.AGENT, 0); }
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_agent_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_agent_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_agent_in_clauseContext c_agent_in_clause() {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(Context, State);
		EnterRule(_localctx, 576, RULE_c_agent_in_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5207; Match(AGENT);
			State = 5208; Match(IN);
			State = 5209; Match(LEFT_PAREN);
			State = 5210; expressions();
			State = 5211; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class C_parameters_clauseContext : ParserRuleContext {
		public ITerminalNode PARAMETERS() { return GetToken(PlSqlParser.PARAMETERS, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_c_parameters_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitC_parameters_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public C_parameters_clauseContext c_parameters_clause() {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(Context, State);
		EnterRule(_localctx, 578, RULE_c_parameters_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5213; Match(PARAMETERS);
			State = 5214; Match(LEFT_PAREN);
			State = 5219;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5215; expressions();
				}
				break;
			case PERIOD:
				{
				State = 5216; Match(PERIOD);
				State = 5217; Match(PERIOD);
				State = 5218; Match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5221; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public ITerminalNode[] IN() { return GetTokens(PlSqlParser.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(PlSqlParser.IN, i);
		}
		public ITerminalNode[] OUT() { return GetTokens(PlSqlParser.OUT); }
		public ITerminalNode OUT(int i) {
			return GetToken(PlSqlParser.OUT, i);
		}
		public ITerminalNode[] INOUT() { return GetTokens(PlSqlParser.INOUT); }
		public ITerminalNode INOUT(int i) {
			return GetToken(PlSqlParser.INOUT, i);
		}
		public ITerminalNode[] NOCOPY() { return GetTokens(PlSqlParser.NOCOPY); }
		public ITerminalNode NOCOPY(int i) {
			return GetToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 580, RULE_parameter);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5223; parameter_name();
			State = 5227;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,670,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5224;
					_la = TokenStream.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 5229;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,670,Context);
			}
			State = 5231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,671,Context) ) {
			case 1:
				{
				State = 5230; type_spec();
				}
				break;
			}
			State = 5234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 5233; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_partContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(PlSqlParser.ASSIGN_OP, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_partContext default_value_part() {
		Default_value_partContext _localctx = new Default_value_partContext(Context, State);
		EnterRule(_localctx, 582, RULE_default_value_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5236;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5237; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seq_of_declare_specsContext : ParserRuleContext {
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public Seq_of_declare_specsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seq_of_declare_specs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq_of_declare_specs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seq_of_declare_specsContext seq_of_declare_specs() {
		Seq_of_declare_specsContext _localctx = new Seq_of_declare_specsContext(Context, State);
		EnterRule(_localctx, 584, RULE_seq_of_declare_specs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5240;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5239; declare_spec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,673,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declare_specContext : ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return GetRuleContext<Subtype_declarationContext>(0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return GetRuleContext<Cursor_declarationContext>(0);
		}
		public Exception_declarationContext exception_declaration() {
			return GetRuleContext<Exception_declarationContext>(0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return GetRuleContext<Pragma_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Procedure_specContext procedure_spec() {
			return GetRuleContext<Procedure_specContext>(0);
		}
		public Function_specContext function_spec() {
			return GetRuleContext<Function_specContext>(0);
		}
		public Procedure_bodyContext procedure_body() {
			return GetRuleContext<Procedure_bodyContext>(0);
		}
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclare_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declare_specContext declare_spec() {
		Declare_specContext _localctx = new Declare_specContext(Context, State);
		EnterRule(_localctx, 586, RULE_declare_spec);
		try {
			State = 5254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,674,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5244; variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5245; subtype_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5246; cursor_declaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5247; exception_declaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5248; pragma_declaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5249; type_declaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5250; procedure_spec();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5251; function_spec();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5252; procedure_body();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5253; function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode CONSTANT() { return GetToken(PlSqlParser.CONSTANT, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 588, RULE_variable_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5256; identifier();
			State = 5258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,675,Context) ) {
			case 1:
				{
				State = 5257; Match(CONSTANT);
				}
				break;
			}
			State = 5260; type_spec();
			State = 5263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 5261; Match(NOT);
				State = 5262; Match(NULL);
				}
			}

			State = 5266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 5265; default_value_part();
				}
			}

			State = 5268; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subtype_declarationContext : ParserRuleContext {
		public ITerminalNode SUBTYPE() { return GetToken(PlSqlParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtype_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtype_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subtype_declarationContext subtype_declaration() {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(Context, State);
		EnterRule(_localctx, 590, RULE_subtype_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5270; Match(SUBTYPE);
			State = 5271; identifier();
			State = 5272; Match(IS);
			State = 5273; type_spec();
			State = 5279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE) {
				{
				State = 5274; Match(RANGE);
				State = 5275; expression();
				State = 5276; Match(DOUBLE_PERIOD);
				State = 5277; expression();
				}
			}

			State = 5283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 5281; Match(NOT);
				State = 5282; Match(NULL);
				}
			}

			State = 5285; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_declarationContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Parameter_specContext[] parameter_spec() {
			return GetRuleContexts<Parameter_specContext>();
		}
		public Parameter_specContext parameter_spec(int i) {
			return GetRuleContext<Parameter_specContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_declarationContext cursor_declaration() {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(Context, State);
		EnterRule(_localctx, 592, RULE_cursor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5287; Match(CURSOR);
			State = 5288; identifier();
			State = 5300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 5289; Match(LEFT_PAREN);
				State = 5294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 5290; Match(COMMA);
						}
					}

					State = 5293; parameter_spec();
					}
					}
					State = 5296;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
				State = 5298; Match(RIGHT_PAREN);
				}
			}

			State = 5304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 5302; Match(RETURN);
				State = 5303; type_spec();
				}
			}

			State = 5308;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IS) {
				{
				State = 5306; Match(IS);
				State = 5307; select_statement();
				}
			}

			State = 5310; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_specContext : ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return GetRuleContext<Parameter_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_specContext parameter_spec() {
		Parameter_specContext _localctx = new Parameter_specContext(Context, State);
		EnterRule(_localctx, 594, RULE_parameter_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5312; parameter_name();
			State = 5317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,686,Context) ) {
			case 1:
				{
				State = 5314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 5313; Match(IN);
					}
				}

				State = 5316; type_spec();
				}
				break;
			}
			State = 5320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 5319; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_declarationContext exception_declaration() {
		Exception_declarationContext _localctx = new Exception_declarationContext(Context, State);
		EnterRule(_localctx, 596, RULE_exception_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5322; identifier();
			State = 5323; Match(EXCEPTION);
			State = 5324; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pragma_declarationContext : ParserRuleContext {
		public IdentifierContext id1;
		public ITerminalNode PRAGMA() { return GetToken(PlSqlParser.PRAGMA, 0); }
		public ITerminalNode SERIALLY_REUSABLE() { return GetToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public ITerminalNode AUTONOMOUS_TRANSACTION() { return GetToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public ITerminalNode EXCEPTION_INIT() { return GetToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Exception_nameContext exception_name() {
			return GetRuleContext<Exception_nameContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Numeric_negativeContext numeric_negative() {
			return GetRuleContext<Numeric_negativeContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode INLINE() { return GetToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragma_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPragma_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pragma_declarationContext pragma_declaration() {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(Context, State);
		EnterRule(_localctx, 598, RULE_pragma_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5326; Match(PRAGMA);
			State = 5357;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				State = 5327; Match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				State = 5328; Match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				State = 5329; Match(EXCEPTION_INIT);
				State = 5330; Match(LEFT_PAREN);
				State = 5331; exception_name();
				State = 5332; Match(COMMA);
				State = 5333; numeric_negative();
				State = 5334; Match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				State = 5336; Match(INLINE);
				State = 5337; Match(LEFT_PAREN);
				State = 5338; _localctx.id1 = identifier();
				State = 5339; Match(COMMA);
				State = 5340; expression();
				State = 5341; Match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				State = 5343; Match(RESTRICT_REFERENCES);
				State = 5344; Match(LEFT_PAREN);
				State = 5347;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 5345; identifier();
					}
					break;
				case DEFAULT:
					{
					State = 5346; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5349; Match(COMMA);
					State = 5350; identifier();
					}
					}
					State = 5353;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 5355; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5359; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IS() { return GetToken(PlSqlParser.IS, 0); }
		public Table_type_defContext table_type_def() {
			return GetRuleContext<Table_type_defContext>(0);
		}
		public Varray_type_defContext varray_type_def() {
			return GetRuleContext<Varray_type_defContext>(0);
		}
		public Record_type_defContext record_type_def() {
			return GetRuleContext<Record_type_defContext>(0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return GetRuleContext<Ref_cursor_type_defContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 600, RULE_type_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5361; Match(TYPE);
			State = 5362; identifier();
			State = 5363; Match(IS);
			State = 5368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
				{
				State = 5364; table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				State = 5365; varray_type_def();
				}
				break;
			case RECORD:
				{
				State = 5366; record_type_def();
				}
				break;
			case REF:
				{
				State = 5367; ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5370; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_cursor_type_defContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_cursor_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRef_cursor_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ref_cursor_type_defContext ref_cursor_type_def() {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(Context, State);
		EnterRule(_localctx, 602, RULE_ref_cursor_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5372; Match(REF);
			State = 5373; Match(CURSOR);
			State = 5376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 5374; Match(RETURN);
				State = 5375; type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_type_defContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return GetRuleContext<Table_indexed_by_partContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_type_defContext table_type_def() {
		Table_type_defContext _localctx = new Table_type_defContext(Context, State);
		EnterRule(_localctx, 604, RULE_table_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5378; Match(TABLE);
			State = 5379; Match(OF);
			State = 5380; type_spec();
			State = 5382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEXED || _la==INDEX) {
				{
				State = 5381; table_indexed_by_part();
				}
			}

			State = 5386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 5384; Match(NOT);
				State = 5385; Match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_indexed_by_partContext : ParserRuleContext {
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode INDEXED() { return GetToken(PlSqlParser.INDEXED, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_indexed_by_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_indexed_by_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_indexed_by_partContext table_indexed_by_part() {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(Context, State);
		EnterRule(_localctx, 606, RULE_table_indexed_by_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5388;
			_la = TokenStream.LA(1);
			if ( !(_la==INDEXED || _la==INDEX) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5389; Match(BY);
			State = 5390; type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Varray_type_defContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode VARRAY() { return GetToken(PlSqlParser.VARRAY, 0); }
		public ITerminalNode VARYING() { return GetToken(PlSqlParser.VARYING, 0); }
		public ITerminalNode ARRAY() { return GetToken(PlSqlParser.ARRAY, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varray_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarray_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Varray_type_defContext varray_type_def() {
		Varray_type_defContext _localctx = new Varray_type_defContext(Context, State);
		EnterRule(_localctx, 608, RULE_varray_type_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARRAY:
				{
				State = 5392; Match(VARRAY);
				}
				break;
			case VARYING:
				{
				State = 5393; Match(VARYING);
				State = 5394; Match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5397; Match(LEFT_PAREN);
			State = 5398; expression();
			State = 5399; Match(RIGHT_PAREN);
			State = 5400; Match(OF);
			State = 5401; type_spec();
			State = 5404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,696,Context) ) {
			case 1:
				{
				State = 5402; Match(NOT);
				State = 5403; Match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_type_defContext : ParserRuleContext {
		public ITerminalNode RECORD() { return GetToken(PlSqlParser.RECORD, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Field_specContext[] field_spec() {
			return GetRuleContexts<Field_specContext>();
		}
		public Field_specContext field_spec(int i) {
			return GetRuleContext<Field_specContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_type_def; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_type_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_type_defContext record_type_def() {
		Record_type_defContext _localctx = new Record_type_defContext(Context, State);
		EnterRule(_localctx, 610, RULE_record_type_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5406; Match(RECORD);
			State = 5407; Match(LEFT_PAREN);
			State = 5412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5408; Match(COMMA);
					}
				}

				State = 5411; field_spec();
				}
				}
				State = 5414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
			State = 5416; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_specContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return GetRuleContext<Default_value_partContext>(0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_specContext field_spec() {
		Field_specContext _localctx = new Field_specContext(Context, State);
		EnterRule(_localctx, 612, RULE_field_spec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5418; column_name();
			State = 5420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,699,Context) ) {
			case 1:
				{
				State = 5419; type_spec();
				}
				break;
			}
			State = 5424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 5422; Match(NOT);
				State = 5423; Match(NULL);
				}
			}

			State = 5427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				State = 5426; default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seq_of_statementsContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Label_declarationContext[] label_declaration() {
			return GetRuleContexts<Label_declarationContext>();
		}
		public Label_declarationContext label_declaration(int i) {
			return GetRuleContext<Label_declarationContext>(i);
		}
		public ITerminalNode[] Eof() { return GetTokens(PlSqlParser.Eof); }
		public ITerminalNode Eof(int i) {
			return GetToken(PlSqlParser.Eof, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seq_of_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq_of_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seq_of_statementsContext seq_of_statements() {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(Context, State);
		EnterRule(_localctx, 614, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5433;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5433;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,702,Context) ) {
					case 1:
						{
						State = 5429; statement();
						State = 5430;
						_la = TokenStream.LA(1);
						if ( !(_la==Eof || _la==SEMICOLON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 5432; label_declaration();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5435;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,703,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_declarationContext : ParserRuleContext {
		public IToken ltp1;
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_declarationContext label_declaration() {
		Label_declarationContext _localctx = new Label_declarationContext(Context, State);
		EnterRule(_localctx, 616, RULE_label_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5437; _localctx.ltp1 = Match(LESS_THAN_OP);
			State = 5438; Match(LESS_THAN_OP);
			State = 5439; label_name();
			State = 5440; Match(GREATER_THAN_OP);
			State = 5441; Match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return GetRuleContext<Swallow_to_semiContext>(0);
		}
		public ITerminalNode TRUNCATE() { return GetToken(PlSqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Assignment_statementContext assignment_statement() {
			return GetRuleContext<Assignment_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Exit_statementContext exit_statement() {
			return GetRuleContext<Exit_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		public Forall_statementContext forall_statement() {
			return GetRuleContext<Forall_statementContext>(0);
		}
		public Null_statementContext null_statement() {
			return GetRuleContext<Null_statementContext>(0);
		}
		public Raise_statementContext raise_statement() {
			return GetRuleContext<Raise_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		public Sql_statementContext sql_statement() {
			return GetRuleContext<Sql_statementContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return GetRuleContext<Pipe_row_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 618, RULE_statement);
		try {
			State = 5463;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5443; Match(CREATE);
				State = 5444; swallow_to_semi();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5445; Match(TRUNCATE);
				State = 5446; swallow_to_semi();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5447; body();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5448; block();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5449; assignment_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5450; continue_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5451; exit_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5452; goto_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5453; if_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5454; loop_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5455; forall_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5456; null_statement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5457; raise_statement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5458; return_statement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5459; case_statement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5460; sql_statement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5461; function_call();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5462; pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Swallow_to_semiContext : ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_swallow_to_semi; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwallow_to_semi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Swallow_to_semiContext swallow_to_semi() {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(Context, State);
		EnterRule(_localctx, 620, RULE_swallow_to_semi);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5465;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 5468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ACCOUNT) | (1L << ADD) | (1L << ADMIN) | (1L << ADMINISTER) | (1L << ADVANCED) | (1L << ADVISOR) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ALLOW) | (1L << ALTER) | (1L << ALWAYS) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ANYSCHEMA) | (1L << ARCHIVAL) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHENTICATED) | (1L << AUTHENTICATION) | (1L << AUTHID) | (1L << AUTOALLOCATE) | (1L << AUTO) | (1L << AUTOEXTEND) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BACKUP) | (1L << BASIC) | (1L << BASICFILE) | (1L << BATCH) | (1L << BECOME) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BIGFILE) | (1L << BINARY) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BLOCKSIZE) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BUFFER_POOL) | (1L << BUILD) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << CACHE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CAPACITY - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CERTIFICATE - 64)) | (1L << (CHANGE - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHECK - 64)) | (1L << (CHR - 64)) | (1L << (CHUNK - 64)) | (1L << (CLASS - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (CLUSTERING - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMN - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (COMPRESS - 64)) | (1L << (COMPUTE - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONNECT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTAINER - 64)) | (1L << (CONTAINER_DATA - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CREATION - 64)) | (1L << (CRITICAL - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATAFILE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DAYS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (DBA_RECYCLEBIN - 128)) | (1L << (DB_ROLE_CHANGE - 128)) | (1L << (DBTIMEZONE - 128)) | (1L << (DDL - 128)) | (1L << (DEBUG - 128)) | (1L << (DEC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DECLARE - 128)) | (1L << (DECOMPOSE - 128)) | (1L << (DECREMENT - 128)) | (1L << (DECRYPT - 128)) | (1L << (DEDUPLICATE - 128)) | (1L << (DEFAULT - 128)) | (1L << (DEFAULTS - 128)) | (1L << (DEFERRABLE - 128)) | (1L << (DEFERRED - 128)) | (1L << (DEFINER - 128)) | (1L << (DELEGATE - 128)) | (1L << (DELETE - 128)) | (1L << (DEPTH - 128)) | (1L << (DESC - 128)) | (1L << (DETERMINISTIC - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DIMENSION - 128)) | (1L << (DIRECTORY - 128)) | (1L << (DISABLE - 128)) | (1L << (DISALLOW - 128)) | (1L << (DISASSOCIATE - 128)) | (1L << (DISTINCT - 128)) | (1L << (DISTINGUISHED - 128)) | (1L << (DISTRIBUTE - 128)) | (1L << (DML - 128)) | (1L << (DOCUMENT - 128)) | (1L << (DOUBLE - 128)) | (1L << (DROP - 128)) | (1L << (DSINTERVAL_UNCONSTRAINED - 128)) | (1L << (DUPLICATE - 128)) | (1L << (EACH - 128)) | (1L << (EDITIONABLE - 128)) | (1L << (EDITION - 128)) | (1L << (EDITIONING - 128)) | (1L << (EDITIONS - 128)) | (1L << (ELEMENT - 128)) | (1L << (ELSE - 128)) | (1L << (ELSIF - 128)) | (1L << (EMPTY - 128)) | (1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENCRYPT - 128)) | (1L << (ENCRYPTION - 128)) | (1L << (END - 128)) | (1L << (ENTERPRISE - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERR - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EVALUATION - 128)) | (1L << (EXCEPT - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (EXECUTE - 192)) | (1L << (EXEMPT - 192)) | (1L << (EXISTS - 192)) | (1L << (EXIT - 192)) | (1L << (EXPIRE - 192)) | (1L << (EXPLAIN - 192)) | (1L << (EXTENT - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTERNALLY - 192)) | (1L << (EXTRACT - 192)) | (1L << (FAILURE - 192)) | (1L << (FALSE - 192)) | (1L << (FETCH - 192)) | (1L << (FILESYSTEM_LIKE_LOGGING - 192)) | (1L << (FINAL - 192)) | (1L << (FIRST - 192)) | (1L << (FIRST_VALUE - 192)) | (1L << (FLASHBACK - 192)) | (1L << (FLASH_CACHE - 192)) | (1L << (FLOAT - 192)) | (1L << (FOLDER - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FOLLOWS - 192)) | (1L << (FORALL - 192)) | (1L << (FORCE - 192)) | (1L << (FOREIGN - 192)) | (1L << (FOR - 192)) | (1L << (FREELIST - 192)) | (1L << (FREELISTS - 192)) | (1L << (FREEPOOLS - 192)) | (1L << (FROM - 192)) | (1L << (FULL - 192)) | (1L << (FUNCTION - 192)) | (1L << (GENERATED - 192)) | (1L << (GLOBAL - 192)) | (1L << (GLOBALLY - 192)) | (1L << (GOTO - 192)) | (1L << (GRANT - 192)) | (1L << (GROUP - 192)) | (1L << (GROUPING - 192)) | (1L << (GROUPS - 192)) | (1L << (GUARANTEE - 192)) | (1L << (HASH - 192)) | (1L << (HAVING - 192)) | (1L << (HEAP - 192)) | (1L << (HIDE - 192)) | (1L << (HIERARCHY - 192)) | (1L << (HIGH - 192)) | (1L << (HOUR - 192)) | (1L << (IDENTIFIED - 192)) | (1L << (IDENTIFIER - 192)) | (1L << (IDENTITY - 192)) | (1L << (ID - 192)) | (1L << (IF - 192)) | (1L << (IGNORE - 192)) | (1L << (ILM - 192)) | (1L << (IMMEDIATE - 192)) | (1L << (INCLUDE - 192)) | (1L << (INCLUDING - 192)) | (1L << (INCREMENT - 192)) | (1L << (INDENT - 192)) | (1L << (INDEXED - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXING - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (INDEXTYPE - 256)) | (1L << (INDICATOR - 256)) | (1L << (INDICES - 256)) | (1L << (INFINITE - 256)) | (1L << (INHERIT - 256)) | (1L << (IN - 256)) | (1L << (INITIAL - 256)) | (1L << (INITIALLY - 256)) | (1L << (INITRANS - 256)) | (1L << (INLINE - 256)) | (1L << (INMEMORY - 256)) | (1L << (INNER - 256)) | (1L << (INOUT - 256)) | (1L << (INSERT - 256)) | (1L << (INSTANTIABLE - 256)) | (1L << (INSTEAD - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERSECT - 256)) | (1L << (INTERVAL - 256)) | (1L << (INTERVLEAVED - 256)) | (1L << (INT - 256)) | (1L << (INTO - 256)) | (1L << (INVALIDATE - 256)) | (1L << (INVISIBLE - 256)) | (1L << (IS - 256)) | (1L << (ISOLATION - 256)) | (1L << (ITERATE - 256)) | (1L << (JAVA - 256)) | (1L << (JOB - 256)) | (1L << (JOIN - 256)) | (1L << (KEEP_DUPLICATES - 256)) | (1L << (KEEP - 256)) | (1L << (KEY - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LAST - 256)) | (1L << (LAST_VALUE - 256)) | (1L << (LEADING - 256)) | (1L << (LEFT - 256)) | (1L << (LESS - 256)) | (1L << (LEVEL - 256)) | (1L << (LEVELS - 256)) | (1L << (LIBRARY - 256)) | (1L << (LIKE2 - 256)) | (1L << (LIKE4 - 256)) | (1L << (LIKEC - 256)) | (1L << (LIKE - 256)) | (1L << (LIMIT - 256)) | (1L << (LINEAR - 256)) | (1L << (LINK - 256)) | (1L << (LIST - 256)) | (1L << (LOAD - 256)) | (1L << (LOB - 256)) | (1L << (LOBS - 256)) | (1L << (LOCAL - 256)) | (1L << (LOCATION - 256)) | (1L << (LOCATOR - 256)) | (1L << (LOCKED - 256)) | (1L << (LOCKING - 256)) | (1L << (LOCK - 256)) | (1L << (LOGGING - 256)) | (1L << (LOG - 256)) | (1L << (LOGMINING - 256)) | (1L << (LOGOFF - 256)) | (1L << (LOGON - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (LONG - 320)) | (1L << (LOOP - 320)) | (1L << (LOW - 320)) | (1L << (MAIN - 320)) | (1L << (MANAGE - 320)) | (1L << (MANAGEMENT - 320)) | (1L << (MANUAL - 320)) | (1L << (MAP - 320)) | (1L << (MAPPING - 320)) | (1L << (MATCHED - 320)) | (1L << (MATERIALIZED - 320)) | (1L << (MAXSIZE - 320)) | (1L << (MAXVALUE - 320)) | (1L << (MEASURE - 320)) | (1L << (MEASURES - 320)) | (1L << (MEDIUM - 320)) | (1L << (MEMBER - 320)) | (1L << (MEMCOMPRESS - 320)) | (1L << (MERGE - 320)) | (1L << (MINEXTENTS - 320)) | (1L << (MINIMUM - 320)) | (1L << (MINING - 320)) | (1L << (MINUS - 320)) | (1L << (MINUTE - 320)) | (1L << (MINVALUE - 320)) | (1L << (MLSLABEL - 320)) | (1L << (MODEL - 320)) | (1L << (MODE - 320)) | (1L << (MODIFICATION - 320)) | (1L << (MODIFY - 320)) | (1L << (MONTH - 320)) | (1L << (MONTHS - 320)) | (1L << (MOVEMENT - 320)) | (1L << (MULTISET - 320)) | (1L << (NAME - 320)) | (1L << (NAN - 320)) | (1L << (NATURAL - 320)) | (1L << (NATURALN - 320)) | (1L << (NAV - 320)) | (1L << (NCHAR_CS - 320)) | (1L << (NCHAR - 320)) | (1L << (NCLOB - 320)) | (1L << (NESTED - 320)) | (1L << (NEW - 320)) | (1L << (NEXT - 320)) | (1L << (NOAUDIT - 320)) | (1L << (NOCACHE - 320)) | (1L << (NOCOMPRESS - 320)) | (1L << (NOCOPY - 320)) | (1L << (NOCYCLE - 320)) | (1L << (NOEDITIONABLE - 320)) | (1L << (NOENTITYESCAPING - 320)) | (1L << (NOGUARANTEE - 320)) | (1L << (NOKEEP - 320)) | (1L << (NOLOGGING - 320)) | (1L << (NOMAPPING - 320)) | (1L << (NOMAXVALUE - 320)) | (1L << (NOMINVALUE - 320)) | (1L << (NONEDITIONABLE - 320)) | (1L << (NONE - 320)) | (1L << (NO - 320)) | (1L << (NONSCHEMA - 320)) | (1L << (NOORDER - 320)) | (1L << (NOPARALLEL - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (NORELY - 384)) | (1L << (NOROWDEPENDENCIES - 384)) | (1L << (NOSCHEMACHECK - 384)) | (1L << (NOSORT - 384)) | (1L << (NOTIFICATION - 384)) | (1L << (NOT - 384)) | (1L << (NOVALIDATE - 384)) | (1L << (NOWAIT - 384)) | (1L << (NULL - 384)) | (1L << (NULLS - 384)) | (1L << (NUMBER - 384)) | (1L << (NUMERIC - 384)) | (1L << (NVARCHAR2 - 384)) | (1L << (OBJECT - 384)) | (1L << (OFFLINE - 384)) | (1L << (OFF - 384)) | (1L << (OF - 384)) | (1L << (OID - 384)) | (1L << (OLD - 384)) | (1L << (OLTP - 384)) | (1L << (ONLINE - 384)) | (1L << (ONLY - 384)) | (1L << (ON - 384)) | (1L << (OPEN - 384)) | (1L << (OPERATOR - 384)) | (1L << (OPTIMAL - 384)) | (1L << (OPTION - 384)) | (1L << (ORADATA - 384)) | (1L << (ORDER - 384)) | (1L << (ORDINALITY - 384)) | (1L << (ORGANIZATION - 384)) | (1L << (OR - 384)) | (1L << (OSERROR - 384)) | (1L << (OUTER - 384)) | (1L << (OUTLINE - 384)) | (1L << (OUT - 384)) | (1L << (OVERFLOW - 384)) | (1L << (OVER - 384)) | (1L << (OVERRIDING - 384)) | (1L << (PACKAGE - 384)) | (1L << (PARALLEL_ENABLE - 384)) | (1L << (PARALLEL - 384)) | (1L << (PARAMETERS - 384)) | (1L << (PARENT - 384)) | (1L << (PARTIAL - 384)) | (1L << (PARTITION - 384)) | (1L << (PARTITIONS - 384)) | (1L << (PASSING - 384)) | (1L << (PASSWORD - 384)) | (1L << (PATH - 384)) | (1L << (PCTFREE - 384)) | (1L << (PCTINCREASE - 384)) | (1L << (PCTTHRESHOLD - 384)) | (1L << (PCTUSED - 384)) | (1L << (PCTVERSION - 384)) | (1L << (PERCENT_FOUND - 384)) | (1L << (PERCENT_ISOPEN - 384)) | (1L << (PERCENT_NOTFOUND - 384)) | (1L << (PERCENT_ROWCOUNT - 384)) | (1L << (PERCENT_ROWTYPE - 384)) | (1L << (PERCENT_TYPE - 384)) | (1L << (PIPELINED - 384)) | (1L << (PIPE - 384)) | (1L << (PIVOT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (PLAN - 448)) | (1L << (PLS_INTEGER - 448)) | (1L << (PLUGGABLE - 448)) | (1L << (POLICY - 448)) | (1L << (POSITIVEN - 448)) | (1L << (POSITIVE - 448)) | (1L << (PRAGMA - 448)) | (1L << (PRECEDING - 448)) | (1L << (PRECISION - 448)) | (1L << (PRESENT - 448)) | (1L << (PRESERVE - 448)) | (1L << (PRIMARY - 448)) | (1L << (PRIORITY - 448)) | (1L << (PRIOR - 448)) | (1L << (PRIVILEGE - 448)) | (1L << (PRIVILEGES - 448)) | (1L << (PROCEDURE - 448)) | (1L << (PROCESS - 448)) | (1L << (PROFILE - 448)) | (1L << (PROGRAM - 448)) | (1L << (PUBLIC - 448)) | (1L << (PURGE - 448)) | (1L << (QUERY - 448)) | (1L << (QUOTA - 448)) | (1L << (RAISE - 448)) | (1L << (RANGE - 448)) | (1L << (RAW - 448)) | (1L << (READ - 448)) | (1L << (READS - 448)) | (1L << (REAL - 448)) | (1L << (RECORD - 448)) | (1L << (RECYCLE - 448)) | (1L << (REDACTION - 448)) | (1L << (REFERENCE - 448)) | (1L << (REFERENCES - 448)) | (1L << (REFERENCING - 448)) | (1L << (REF - 448)) | (1L << (REFRESH - 448)) | (1L << (REJECT - 448)) | (1L << (RELATIONAL - 448)) | (1L << (RELIES_ON - 448)) | (1L << (RELY - 448)) | (1L << (REMOVE - 448)) | (1L << (RENAME - 448)) | (1L << (REPLACE - 448)) | (1L << (REQUIRED - 448)) | (1L << (RESOURCE - 448)) | (1L << (RESPECT - 448)) | (1L << (RESTRICTED - 448)) | (1L << (RESTRICT_REFERENCES - 448)) | (1L << (RESULT_CACHE - 448)) | (1L << (RESULT - 448)) | (1L << (RESUMABLE - 448)) | (1L << (RETENTION - 448)) | (1L << (RETURNING - 448)) | (1L << (RETURN - 448)) | (1L << (REUSE - 448)) | (1L << (REVERSE - 448)) | (1L << (REVOKE - 448)) | (1L << (REWRITE - 448)) | (1L << (RIGHT - 448)) | (1L << (ROLE - 448)) | (1L << (ROLES - 448)) | (1L << (ROLLBACK - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (ROLLUP - 512)) | (1L << (ROWDEPENDENCIES - 512)) | (1L << (ROWID - 512)) | (1L << (ROW - 512)) | (1L << (ROWS - 512)) | (1L << (RULES - 512)) | (1L << (SALT - 512)) | (1L << (SAMPLE - 512)) | (1L << (SAVEPOINT - 512)) | (1L << (SAVE - 512)) | (1L << (SCHEDULER - 512)) | (1L << (SCHEMACHECK - 512)) | (1L << (SCHEMA - 512)) | (1L << (SCN - 512)) | (1L << (SCOPE - 512)) | (1L << (SEARCH - 512)) | (1L << (SECOND - 512)) | (1L << (SECUREFILE - 512)) | (1L << (SEED - 512)) | (1L << (SEGMENT - 512)) | (1L << (SELECT - 512)) | (1L << (SELF - 512)) | (1L << (SEQUENCE - 512)) | (1L << (SEQUENTIAL - 512)) | (1L << (SERIALIZABLE - 512)) | (1L << (SERIALLY_REUSABLE - 512)) | (1L << (SERVERERROR - 512)) | (1L << (SESSION - 512)) | (1L << (SESSIONTIMEZONE - 512)) | (1L << (SET - 512)) | (1L << (SETS - 512)) | (1L << (SETTINGS - 512)) | (1L << (SHARE - 512)) | (1L << (SHARP - 512)) | (1L << (SHOW - 512)) | (1L << (SHUTDOWN - 512)) | (1L << (SIBLINGS - 512)) | (1L << (SIGNTYPE - 512)) | (1L << (SIMPLE_INTEGER - 512)) | (1L << (SINGLE - 512)) | (1L << (SIZE - 512)) | (1L << (SKIP_ - 512)) | (1L << (SMALLFILE - 512)) | (1L << (SMALLINT - 512)) | (1L << (SNAPSHOT - 512)) | (1L << (SOME - 512)) | (1L << (SORT - 512)) | (1L << (SOURCE - 512)) | (1L << (SPACE_KEYWORD - 512)) | (1L << (SPECIFICATION - 512)) | (1L << (SQLDATA - 512)) | (1L << (SQLERROR - 512)) | (1L << (SQL - 512)) | (1L << (STANDALONE - 512)) | (1L << (START - 512)) | (1L << (STARTUP - 512)) | (1L << (STATEMENT_ID - 512)) | (1L << (STATEMENT - 512)) | (1L << (STATIC - 512)) | (1L << (STATISTICS - 512)) | (1L << (STORAGE - 512)) | (1L << (STORE - 512)) | (1L << (STRING - 512)) | (1L << (SUBMULTISET - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SUBPARTITIONS - 576)) | (1L << (SUBPARTITION - 576)) | (1L << (SUBSTITUTABLE - 576)) | (1L << (SUBTYPE - 576)) | (1L << (SUCCESS - 576)) | (1L << (SUPPLEMENTAL - 576)) | (1L << (SUSPEND - 576)) | (1L << (SYNONYM - 576)) | (1L << (SYSBACKUP - 576)) | (1L << (SYSDATE - 576)) | (1L << (SYSDBA - 576)) | (1L << (SYSDG - 576)) | (1L << (SYSGUID - 576)) | (1L << (SYSKM - 576)) | (1L << (SYSOPER - 576)) | (1L << (SYSTEM - 576)) | (1L << (TABLESPACE - 576)) | (1L << (TABLES - 576)) | (1L << (TABLE - 576)) | (1L << (TEMPFILE - 576)) | (1L << (TEMPLATE - 576)) | (1L << (TEMPORARY - 576)) | (1L << (THAN - 576)) | (1L << (THEN - 576)) | (1L << (THE - 576)) | (1L << (THROUGH - 576)) | (1L << (TIER - 576)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 576)) | (1L << (TIMESTAMP - 576)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 576)) | (1L << (TIMESTAMP_UNCONSTRAINED - 576)) | (1L << (TIME - 576)) | (1L << (TIMEZONE_ABBR - 576)) | (1L << (TIMEZONE_HOUR - 576)) | (1L << (TIMEZONE_MINUTE - 576)) | (1L << (TIMEZONE_REGION - 576)) | (1L << (TO_NCLOB - 576)) | (1L << (TO_NUMBER - 576)) | (1L << (TO_SINGLE_BYTE - 576)) | (1L << (TO_TIMESTAMP_TZ - 576)) | (1L << (TO - 576)) | (1L << (TO_YMINTERVAL - 576)) | (1L << (TRAILING - 576)) | (1L << (TRANSACTION - 576)) | (1L << (TRANSLATE - 576)) | (1L << (TRANSLATION - 576)) | (1L << (TREAT - 576)) | (1L << (TRIGGER - 576)) | (1L << (TRUE - 576)) | (1L << (TRUNCATE - 576)) | (1L << (TRUNC - 576)) | (1L << (TUNING - 576)) | (1L << (TYPE - 576)) | (1L << (UNBOUNDED - 576)) | (1L << (UNDER - 576)) | (1L << (UNDO - 576)) | (1L << (UNIFORM - 576)) | (1L << (UNION - 576)) | (1L << (UNIQUE - 576)) | (1L << (UNLIMITED - 576)) | (1L << (UNLOCK - 576)) | (1L << (UNPIVOT - 576)) | (1L << (UNTIL - 576)) | (1L << (UNUSABLE - 576)))) != 0) || ((((_la - 640)) & ~0x3f) == 0 && ((1L << (_la - 640)) & ((1L << (UPDATED - 640)) | (1L << (UPDATE - 640)) | (1L << (UPSERT - 640)) | (1L << (UROWID - 640)) | (1L << (USABLE - 640)) | (1L << (USERS - 640)) | (1L << (USER - 640)) | (1L << (USE - 640)) | (1L << (USING - 640)) | (1L << (VALIDATE - 640)) | (1L << (VALUES - 640)) | (1L << (VALUE - 640)) | (1L << (VARCHAR2 - 640)) | (1L << (VARCHAR - 640)) | (1L << (VARIABLE - 640)) | (1L << (VARRAYS - 640)) | (1L << (VARRAY - 640)) | (1L << (VARYING - 640)) | (1L << (VERSIONS - 640)) | (1L << (VERSION - 640)) | (1L << (VIEW - 640)) | (1L << (VIRTUAL - 640)) | (1L << (VISIBLE - 640)) | (1L << (WAIT - 640)) | (1L << (WARNING - 640)) | (1L << (WELLFORMED - 640)) | (1L << (WHENEVER - 640)) | (1L << (WHEN - 640)) | (1L << (WHERE - 640)) | (1L << (WHILE - 640)) | (1L << (WITHIN - 640)) | (1L << (WITHOUT - 640)) | (1L << (WITH - 640)) | (1L << (WORK - 640)) | (1L << (WRITE - 640)) | (1L << (XMLAGG - 640)) | (1L << (XMLATTRIBUTES - 640)) | (1L << (XMLCAST - 640)) | (1L << (XMLCOLATTVAL - 640)) | (1L << (XMLELEMENT - 640)) | (1L << (XMLEXISTS - 640)) | (1L << (XMLFOREST - 640)) | (1L << (XMLNAMESPACES - 640)) | (1L << (XMLPARSE - 640)) | (1L << (XMLPI - 640)) | (1L << (XMLQUERY - 640)) | (1L << (XMLROOT - 640)) | (1L << (XMLSCHEMA - 640)) | (1L << (XMLSERIALIZE - 640)) | (1L << (XMLTABLE - 640)) | (1L << (XMLTYPE - 640)) | (1L << (XML - 640)) | (1L << (YEARS - 640)) | (1L << (YEAR - 640)) | (1L << (YES - 640)) | (1L << (YMINTERVAL_UNCONSTRAINED - 640)) | (1L << (ZONEMAP - 640)) | (1L << (ZONE - 640)) | (1L << (PREDICTION - 640)) | (1L << (PREDICTION_BOUNDS - 640)) | (1L << (PREDICTION_COST - 640)) | (1L << (PREDICTION_DETAILS - 640)) | (1L << (PREDICTION_PROBABILITY - 640)) | (1L << (PREDICTION_SET - 640)))) != 0) || ((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (CUME_DIST - 704)) | (1L << (DENSE_RANK - 704)) | (1L << (LISTAGG - 704)) | (1L << (PERCENT_RANK - 704)) | (1L << (PERCENTILE_CONT - 704)) | (1L << (PERCENTILE_DISC - 704)) | (1L << (RANK - 704)) | (1L << (AVG - 704)) | (1L << (CORR - 704)) | (1L << (COVAR_ - 704)) | (1L << (DECODE - 704)) | (1L << (LAG - 704)) | (1L << (LEAD - 704)) | (1L << (MAX - 704)) | (1L << (MEDIAN - 704)) | (1L << (MIN - 704)) | (1L << (NTILE - 704)) | (1L << (NVL - 704)) | (1L << (RATIO_TO_REPORT - 704)) | (1L << (REGR_ - 704)) | (1L << (ROUND - 704)) | (1L << (ROW_NUMBER - 704)) | (1L << (SUBSTR - 704)) | (1L << (TO_CHAR - 704)) | (1L << (TRIM - 704)) | (1L << (SUM - 704)) | (1L << (STDDEV - 704)) | (1L << (VAR_ - 704)) | (1L << (VARIANCE - 704)) | (1L << (LEAST - 704)) | (1L << (GREATEST - 704)) | (1L << (TO_DATE - 704)) | (1L << (VARIABLE_SESSION - 704)) | (1L << (NATIONAL_CHAR_STRING_LIT - 704)) | (1L << (BIT_STRING_LIT - 704)) | (1L << (HEX_STRING_LIT - 704)) | (1L << (DOUBLE_PERIOD - 704)) | (1L << (PERIOD - 704)) | (1L << (UNSIGNED_INTEGER - 704)) | (1L << (APPROXIMATE_NUM_LIT - 704)) | (1L << (CHAR_STRING - 704)) | (1L << (DELIMITED_ID - 704)) | (1L << (PERCENT - 704)) | (1L << (AMPERSAND - 704)) | (1L << (LEFT_PAREN - 704)) | (1L << (RIGHT_PAREN - 704)) | (1L << (DOUBLE_ASTERISK - 704)) | (1L << (ASTERISK - 704)) | (1L << (PLUS_SIGN - 704)) | (1L << (MINUS_SIGN - 704)) | (1L << (COMMA - 704)) | (1L << (SOLIDUS - 704)) | (1L << (AT_SIGN - 704)) | (1L << (ASSIGN_OP - 704)) | (1L << (BINDVAR - 704)) | (1L << (NOT_EQUAL_OP - 704)) | (1L << (CARRET_OPERATOR_PART - 704)) | (1L << (TILDE_OPERATOR_PART - 704)) | (1L << (EXCLAMATION_OPERATOR_PART - 704)) | (1L << (GREATER_THAN_OP - 704)) | (1L << (LESS_THAN_OP - 704)) | (1L << (COLON - 704)) | (1L << (BAR - 704)))) != 0) || ((((_la - 768)) & ~0x3f) == 0 && ((1L << (_la - 768)) & ((1L << (EQUALS_OP - 768)) | (1L << (LEFT_BRACKET - 768)) | (1L << (RIGHT_BRACKET - 768)) | (1L << (BIND_VAR - 768)) | (1L << (INTRODUCER - 768)) | (1L << (SPACES - 768)) | (1L << (SINGLE_LINE_COMMENT - 768)) | (1L << (MULTI_LINE_COMMENT - 768)) | (1L << (PROMPT - 768)) | (1L << (START_CMD - 768)) | (1L << (REGULAR_ID - 768)) | (1L << (ZV - 768)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_statementContext : ParserRuleContext {
		public ITerminalNode ASSIGN_OP() { return GetToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_statementContext assignment_statement() {
		Assignment_statementContext _localctx = new Assignment_statementContext(Context, State);
		EnterRule(_localctx, 622, RULE_assignment_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5472;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5470; general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				State = 5471; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5474; Match(ASSIGN_OP);
			State = 5475; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 624, RULE_continue_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5477; Match(CONTINUE);
			State = 5479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5478; label_name();
				}
			}

			State = 5483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 5481; Match(WHEN);
				State = 5482; condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exit_statementContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exit_statementContext exit_statement() {
		Exit_statementContext _localctx = new Exit_statementContext(Context, State);
		EnterRule(_localctx, 626, RULE_exit_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5485; Match(EXIT);
			State = 5487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5486; label_name();
				}
			}

			State = 5491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 5489; Match(WHEN);
				State = 5490; condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(Context, State);
		EnterRule(_localctx, 628, RULE_goto_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5493; Match(GOTO);
			State = 5494; label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode[] IF() { return GetTokens(PlSqlParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public Elsif_partContext[] elsif_part() {
			return GetRuleContexts<Elsif_partContext>();
		}
		public Elsif_partContext elsif_part(int i) {
			return GetRuleContext<Elsif_partContext>(i);
		}
		public Else_partContext else_part() {
			return GetRuleContext<Else_partContext>(0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 630, RULE_if_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5496; Match(IF);
			State = 5497; condition();
			State = 5498; Match(THEN);
			State = 5499; seq_of_statements();
			State = 5503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSIF) {
				{
				{
				State = 5500; elsif_part();
				}
				}
				State = 5505;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 5506; else_part();
				}
			}

			State = 5509; Match(END);
			State = 5510; Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Elsif_partContext : ParserRuleContext {
		public ITerminalNode ELSIF() { return GetToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsif_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsif_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Elsif_partContext elsif_part() {
		Elsif_partContext _localctx = new Elsif_partContext(Context, State);
		EnterRule(_localctx, 632, RULE_elsif_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5512; Match(ELSIF);
			State = 5513; condition();
			State = 5514; Match(THEN);
			State = 5515; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElse_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Else_partContext else_part() {
		Else_partContext _localctx = new Else_partContext(Context, State);
		EnterRule(_localctx, 634, RULE_else_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5517; Match(ELSE);
			State = 5518; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		public ITerminalNode[] LOOP() { return GetTokens(PlSqlParser.LOOP); }
		public ITerminalNode LOOP(int i) {
			return GetToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public Label_declarationContext label_declaration() {
			return GetRuleContext<Label_declarationContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return GetRuleContext<Cursor_loop_paramContext>(0);
		}
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoop_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 636, RULE_loop_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5521;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LESS_THAN_OP) {
				{
				State = 5520; label_declaration();
				}
			}

			State = 5527;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WHILE:
				{
				State = 5523; Match(WHILE);
				State = 5524; condition();
				}
				break;
			case FOR:
				{
				State = 5525; Match(FOR);
				State = 5526; cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			State = 5529; Match(LOOP);
			State = 5530; seq_of_statements();
			State = 5531; Match(END);
			State = 5532; Match(LOOP);
			State = 5534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5533; label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_loop_paramContext : ParserRuleContext {
		public IToken range_separator;
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public ITerminalNode REVERSE() { return GetToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return GetRuleContext<Record_nameContext>(0);
		}
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_loop_param; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_loop_param(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_loop_paramContext cursor_loop_param() {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(Context, State);
		EnterRule(_localctx, 638, RULE_cursor_loop_param);
		int _la;
		try {
			State = 5561;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,720,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5536; index_name();
				State = 5537; Match(IN);
				State = 5539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,716,Context) ) {
				case 1:
					{
					State = 5538; Match(REVERSE);
					}
					break;
				}
				State = 5541; lower_bound();
				State = 5542; _localctx.range_separator = Match(DOUBLE_PERIOD);
				State = 5543; upper_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5545; record_name();
				State = 5546; Match(IN);
				State = 5559;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 5547; cursor_name();
					State = 5553;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LEFT_PAREN) {
						{
						State = 5548; Match(LEFT_PAREN);
						State = 5550;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
							{
							State = 5549; expressions();
							}
						}

						State = 5552; Match(RIGHT_PAREN);
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					State = 5555; Match(LEFT_PAREN);
					State = 5556; select_statement();
					State = 5557; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Forall_statementContext : ParserRuleContext {
		public ITerminalNode FORALL() { return GetToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return GetRuleContext<Bounds_clauseContext>(0);
		}
		public Sql_statementContext sql_statement() {
			return GetRuleContext<Sql_statementContext>(0);
		}
		public ITerminalNode SAVE() { return GetToken(PlSqlParser.SAVE, 0); }
		public ITerminalNode EXCEPTIONS() { return GetToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forall_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForall_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Forall_statementContext forall_statement() {
		Forall_statementContext _localctx = new Forall_statementContext(Context, State);
		EnterRule(_localctx, 640, RULE_forall_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5563; Match(FORALL);
			State = 5564; index_name();
			State = 5565; Match(IN);
			State = 5566; bounds_clause();
			State = 5567; sql_statement();
			State = 5570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SAVE) {
				{
				State = 5568; Match(SAVE);
				State = 5569; Match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bounds_clauseContext : ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public ITerminalNode INDICES() { return GetToken(PlSqlParser.INDICES, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return GetRuleContext<Collection_nameContext>(0);
		}
		public Between_boundContext between_bound() {
			return GetRuleContext<Between_boundContext>(0);
		}
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bounds_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBounds_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bounds_clauseContext bounds_clause() {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(Context, State);
		EnterRule(_localctx, 642, RULE_bounds_clause);
		int _la;
		try {
			State = 5585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,723,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5572; lower_bound();
				State = 5573; Match(DOUBLE_PERIOD);
				State = 5574; upper_bound();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5576; Match(INDICES);
				State = 5577; Match(OF);
				State = 5578; collection_name();
				State = 5580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BETWEEN) {
					{
					State = 5579; between_bound();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5582; Match(VALUES);
				State = 5583; Match(OF);
				State = 5584; index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_boundContext : ParserRuleContext {
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return GetRuleContext<Lower_boundContext>(0);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return GetRuleContext<Upper_boundContext>(0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_boundContext between_bound() {
		Between_boundContext _localctx = new Between_boundContext(Context, State);
		EnterRule(_localctx, 644, RULE_between_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5587; Match(BETWEEN);
			State = 5588; lower_bound();
			State = 5589; Match(AND);
			State = 5590; upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lower_boundContext : ParserRuleContext {
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lower_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLower_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lower_boundContext lower_bound() {
		Lower_boundContext _localctx = new Lower_boundContext(Context, State);
		EnterRule(_localctx, 646, RULE_lower_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5592; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Upper_boundContext : ParserRuleContext {
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_upper_bound; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpper_bound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Upper_boundContext upper_bound() {
		Upper_boundContext _localctx = new Upper_boundContext(Context, State);
		EnterRule(_localctx, 648, RULE_upper_bound);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5594; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_statementContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_statementContext null_statement() {
		Null_statementContext _localctx = new Null_statementContext(Context, State);
		EnterRule(_localctx, 650, RULE_null_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5596; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Raise_statementContext : ParserRuleContext {
		public ITerminalNode RAISE() { return GetToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return GetRuleContext<Exception_nameContext>(0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raise_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaise_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Raise_statementContext raise_statement() {
		Raise_statementContext _localctx = new Raise_statementContext(Context, State);
		EnterRule(_localctx, 652, RULE_raise_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5598; Match(RAISE);
			State = 5600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5599; exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 654, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5602; Match(RETURN);
			State = 5604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5603; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Routine_nameContext routine_name() {
			return GetRuleContext<Routine_nameContext>(0);
		}
		public ITerminalNode CALL() { return GetToken(PlSqlParser.CALL, 0); }
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 656, RULE_function_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5607;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
			case 1:
				{
				State = 5606; Match(CALL);
				}
				break;
			}
			State = 5609; routine_name();
			State = 5611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,727,Context) ) {
			case 1:
				{
				State = 5610; function_arguments();
				}
				break;
			}
			State = 5614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,728,Context) ) {
			case 1:
				{
				State = 5613; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pipe_row_statementContext : ParserRuleContext {
		public ITerminalNode PIPE() { return GetToken(PlSqlParser.PIPE, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pipe_row_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe_row_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pipe_row_statementContext pipe_row_statement() {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(Context, State);
		EnterRule(_localctx, 658, RULE_pipe_row_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5616; Match(PIPE);
			State = 5617; Match(ROW);
			State = 5618; Match(LEFT_PAREN);
			State = 5619; expression();
			State = 5620; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return GetRuleContext<Label_nameContext>(0);
		}
		public Exception_handlerContext[] exception_handler() {
			return GetRuleContexts<Exception_handlerContext>();
		}
		public Exception_handlerContext exception_handler(int i) {
			return GetRuleContext<Exception_handlerContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 660, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5622; Match(BEGIN);
			State = 5623; seq_of_statements();
			State = 5630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCEPTION) {
				{
				State = 5624; Match(EXCEPTION);
				State = 5626;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5625; exception_handler();
					}
					}
					State = 5628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				}
			}

			State = 5632; Match(END);
			State = 5634;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,731,Context) ) {
			case 1:
				{
				State = 5633; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_handlerContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public Exception_nameContext[] exception_name() {
			return GetRuleContexts<Exception_nameContext>();
		}
		public Exception_nameContext exception_name(int i) {
			return GetRuleContext<Exception_nameContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ITerminalNode[] OR() { return GetTokens(PlSqlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_handler; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_handler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_handlerContext exception_handler() {
		Exception_handlerContext _localctx = new Exception_handlerContext(Context, State);
		EnterRule(_localctx, 662, RULE_exception_handler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5636; Match(WHEN);
			State = 5637; exception_name();
			State = 5642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 5638; Match(OR);
				State = 5639; exception_name();
				}
				}
				State = 5644;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5645; Match(THEN);
			State = 5646; seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_blockContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_blockContext trigger_block() {
		Trigger_blockContext _localctx = new Trigger_blockContext(Context, State);
		EnterRule(_localctx, 664, RULE_trigger_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECLARE - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 5649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DECLARE) {
					{
					State = 5648; Match(DECLARE);
					}
				}

				State = 5652;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 5651; declare_spec();
					}
					}
					State = 5654;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
				}
			}

			State = 5658; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public ITerminalNode DECLARE() { return GetToken(PlSqlParser.DECLARE, 0); }
		public Declare_specContext[] declare_spec() {
			return GetRuleContexts<Declare_specContext>();
		}
		public Declare_specContext declare_spec(int i) {
			return GetRuleContext<Declare_specContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 666, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5661;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DECLARE) {
				{
				State = 5660; Match(DECLARE);
				}
			}

			State = 5664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5663; declare_spec();
				}
				}
				State = 5666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROCEDURE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
			State = 5668; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_statementContext : ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return GetRuleContext<Execute_immediateContext>(0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return GetRuleContext<Data_manipulation_language_statementsContext>(0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return GetRuleContext<Cursor_manipulation_statementsContext>(0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return GetRuleContext<Transaction_control_statementsContext>(0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_statementContext sql_statement() {
		Sql_statementContext _localctx = new Sql_statementContext(Context, State);
		EnterRule(_localctx, 668, RULE_sql_statement);
		try {
			State = 5674;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXECUTE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5670; execute_immediate();
				}
				break;
			case DELETE:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5671; data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5672; cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5673; transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Execute_immediateContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return GetRuleContext<Dynamic_returning_clauseContext>(0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execute_immediate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecute_immediate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Execute_immediateContext execute_immediate() {
		Execute_immediateContext _localctx = new Execute_immediateContext(Context, State);
		EnterRule(_localctx, 670, RULE_execute_immediate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5676; Match(EXECUTE);
			State = 5677; Match(IMMEDIATE);
			State = 5678; expression();
			State = 5688;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BULK:
			case INTO:
				{
				State = 5679; into_clause();
				State = 5681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 5680; using_clause();
					}
				}

				}
				break;
			case USING:
				{
				State = 5683; using_clause();
				State = 5685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING || _la==RETURN) {
					{
					State = 5684; dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURNING:
			case RETURN:
				{
				State = 5687; dynamic_returning_clause();
				}
				break;
			case Eof:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_returning_clauseContext : ParserRuleContext {
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_returning_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamic_returning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_returning_clauseContext dynamic_returning_clause() {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(Context, State);
		EnterRule(_localctx, 672, RULE_dynamic_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5690;
			_la = TokenStream.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5691; into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Data_manipulation_language_statementsContext : ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return GetRuleContext<Lock_table_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_data_manipulation_language_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitData_manipulation_language_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(Context, State);
		EnterRule(_localctx, 674, RULE_data_manipulation_language_statements);
		try {
			State = 5699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MERGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5693; merge_statement();
				}
				break;
			case LOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5694; lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5695; select_statement();
				}
				break;
			case UPDATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5696; update_statement();
				}
				break;
			case DELETE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5697; delete_statement();
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5698; insert_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_manipulation_statementsContext : ParserRuleContext {
		public Close_statementContext close_statement() {
			return GetRuleContext<Close_statementContext>(0);
		}
		public Open_statementContext open_statement() {
			return GetRuleContext<Open_statementContext>(0);
		}
		public Fetch_statementContext fetch_statement() {
			return GetRuleContext<Fetch_statementContext>(0);
		}
		public Open_for_statementContext open_for_statement() {
			return GetRuleContext<Open_for_statementContext>(0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_manipulation_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_manipulation_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(Context, State);
		EnterRule(_localctx, 676, RULE_cursor_manipulation_statements);
		try {
			State = 5705;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5701; close_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5702; open_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5703; fetch_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5704; open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Close_statementContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_close_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClose_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Close_statementContext close_statement() {
		Close_statementContext _localctx = new Close_statementContext(Context, State);
		EnterRule(_localctx, 678, RULE_close_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5707; Match(CLOSE);
			State = 5708; cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_statementContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_statementContext open_statement() {
		Open_statementContext _localctx = new Open_statementContext(Context, State);
		EnterRule(_localctx, 680, RULE_open_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5710; Match(OPEN);
			State = 5711; cursor_name();
			State = 5717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 5712; Match(LEFT_PAREN);
				State = 5714;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
					{
					State = 5713; expressions();
					}
				}

				State = 5716; Match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fetch_statementContext : ParserRuleContext {
		public IToken it1;
		public ITerminalNode FETCH() { return GetToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode BULK() { return GetToken(PlSqlParser.BULK, 0); }
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fetch_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fetch_statementContext fetch_statement() {
		Fetch_statementContext _localctx = new Fetch_statementContext(Context, State);
		EnterRule(_localctx, 682, RULE_fetch_statement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5719; Match(FETCH);
			State = 5720; cursor_name();
			State = 5741;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				{
				State = 5721; _localctx.it1 = Match(INTO);
				State = 5726;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5723;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5722; Match(COMMA);
							}
						}

						State = 5725; variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5728;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,747,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case BULK:
				{
				State = 5730; Match(BULK);
				State = 5731; Match(COLLECT);
				State = 5732; Match(INTO);
				State = 5737;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5734;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5733; Match(COMMA);
							}
						}

						State = 5736; variable_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5739;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,749,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Open_for_statementContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return GetRuleContext<Variable_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_open_for_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpen_for_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Open_for_statementContext open_for_statement() {
		Open_for_statementContext _localctx = new Open_for_statementContext(Context, State);
		EnterRule(_localctx, 684, RULE_open_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5743; Match(OPEN);
			State = 5744; variable_name();
			State = 5745; Match(FOR);
			State = 5748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,751,Context) ) {
			case 1:
				{
				State = 5746; select_statement();
				}
				break;
			case 2:
				{
				State = 5747; expression();
				}
				break;
			}
			State = 5751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 5750; using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Transaction_control_statementsContext : ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return GetRuleContext<Set_transaction_commandContext>(0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return GetRuleContext<Set_constraint_commandContext>(0);
		}
		public Commit_statementContext commit_statement() {
			return GetRuleContext<Commit_statementContext>(0);
		}
		public Rollback_statementContext rollback_statement() {
			return GetRuleContext<Rollback_statementContext>(0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return GetRuleContext<Savepoint_statementContext>(0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transaction_control_statements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransaction_control_statements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Transaction_control_statementsContext transaction_control_statements() {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(Context, State);
		EnterRule(_localctx, 686, RULE_transaction_control_statements);
		try {
			State = 5758;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,753,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5753; set_transaction_command();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5754; set_constraint_command();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5755; commit_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5756; rollback_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5757; savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_transaction_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(PlSqlParser.TRANSACTION, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode ISOLATION() { return GetToken(PlSqlParser.ISOLATION, 0); }
		public ITerminalNode LEVEL() { return GetToken(PlSqlParser.LEVEL, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return GetRuleContext<Rollback_segment_nameContext>(0);
		}
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(PlSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode COMMITTED() { return GetToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_transaction_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_transaction_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_transaction_commandContext set_transaction_command() {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(Context, State);
		EnterRule(_localctx, 688, RULE_set_transaction_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5760; Match(SET);
			State = 5761; Match(TRANSACTION);
			State = 5775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
			case 1:
				{
				State = 5762; Match(READ);
				State = 5763;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				{
				State = 5764; Match(ISOLATION);
				State = 5765; Match(LEVEL);
				State = 5769;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SERIALIZABLE:
					{
					State = 5766; Match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					State = 5767; Match(READ);
					State = 5768; Match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 5771; Match(USE);
				State = 5772; Match(ROLLBACK);
				State = 5773; Match(SEGMENT);
				State = 5774; rollback_segment_name();
				}
				break;
			}
			State = 5779;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
			case 1:
				{
				State = 5777; Match(NAME);
				State = 5778; @string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_constraint_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(PlSqlParser.CONSTRAINTS, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode DEFERRED() { return GetToken(PlSqlParser.DEFERRED, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Constraint_nameContext[] constraint_name() {
			return GetRuleContexts<Constraint_nameContext>();
		}
		public Constraint_nameContext constraint_name(int i) {
			return GetRuleContext<Constraint_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_constraint_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_constraint_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_constraint_commandContext set_constraint_command() {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(Context, State);
		EnterRule(_localctx, 690, RULE_set_constraint_command);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5781; Match(SET);
			State = 5782;
			_la = TokenStream.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5792;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				{
				State = 5783; Match(ALL);
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case COMMA:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5788;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5785;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5784; Match(COMMA);
							}
						}

						State = 5787; constraint_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5790;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,758,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5794;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_statementContext : ParserRuleContext {
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode WORK() { return GetToken(PlSqlParser.WORK, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return GetRuleContext<Write_clauseContext>(0);
		}
		public ITerminalNode CORRUPT_XID() { return GetToken(PlSqlParser.CORRUPT_XID, 0); }
		public ITerminalNode CORRUPT_XID_ALL() { return GetToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Commit_statementContext commit_statement() {
		Commit_statementContext _localctx = new Commit_statementContext(Context, State);
		EnterRule(_localctx, 692, RULE_commit_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5796; Match(COMMIT);
			State = 5798;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,760,Context) ) {
			case 1:
				{
				State = 5797; Match(WORK);
				}
				break;
			}
			State = 5813;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,763,Context) ) {
			case 1:
				{
				State = 5800; Match(COMMENT);
				State = 5801; expression();
				}
				break;
			case 2:
				{
				State = 5802; Match(FORCE);
				State = 5811;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,762,Context) ) {
				case 1:
					{
					State = 5803; Match(CORRUPT_XID);
					State = 5804; expression();
					}
					break;
				case 2:
					{
					State = 5805; Match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					State = 5806; expression();
					State = 5809;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,761,Context) ) {
					case 1:
						{
						State = 5807; Match(COMMA);
						State = 5808; expression();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
			State = 5816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,764,Context) ) {
			case 1:
				{
				State = 5815; write_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Write_clauseContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ITerminalNode NOWAIT() { return GetToken(PlSqlParser.NOWAIT, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode BATCH() { return GetToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_write_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWrite_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Write_clauseContext write_clause() {
		Write_clauseContext _localctx = new Write_clauseContext(Context, State);
		EnterRule(_localctx, 694, RULE_write_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5818; Match(WRITE);
			State = 5820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,765,Context) ) {
			case 1:
				{
				State = 5819;
				_la = TokenStream.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 5823;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
			case 1:
				{
				State = 5822;
				_la = TokenStream.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_statementContext : ParserRuleContext {
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode WORK() { return GetToken(PlSqlParser.WORK, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode SAVEPOINT() { return GetToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_statementContext rollback_statement() {
		Rollback_statementContext _localctx = new Rollback_statementContext(Context, State);
		EnterRule(_localctx, 696, RULE_rollback_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5825; Match(ROLLBACK);
			State = 5827;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,767,Context) ) {
			case 1:
				{
				State = 5826; Match(WORK);
				}
				break;
			}
			State = 5836;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,769,Context) ) {
			case 1:
				{
				State = 5829; Match(TO);
				State = 5831;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
				case 1:
					{
					State = 5830; Match(SAVEPOINT);
					}
					break;
				}
				State = 5833; savepoint_name();
				}
				break;
			case 2:
				{
				State = 5834; Match(FORCE);
				State = 5835; @string();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_statementContext : ParserRuleContext {
		public ITerminalNode SAVEPOINT() { return GetToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return GetRuleContext<Savepoint_nameContext>(0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_statementContext savepoint_statement() {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(Context, State);
		EnterRule(_localctx, 698, RULE_savepoint_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5838; Match(SAVEPOINT);
			State = 5839; savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explain_statementContext : ParserRuleContext {
		public ITerminalNode EXPLAIN() { return GetToken(PlSqlParser.EXPLAIN, 0); }
		public ITerminalNode PLAN() { return GetToken(PlSqlParser.PLAN, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Update_statementContext update_statement() {
			return GetRuleContext<Update_statementContext>(0);
		}
		public Delete_statementContext delete_statement() {
			return GetRuleContext<Delete_statementContext>(0);
		}
		public Insert_statementContext insert_statement() {
			return GetRuleContext<Insert_statementContext>(0);
		}
		public Merge_statementContext merge_statement() {
			return GetRuleContext<Merge_statementContext>(0);
		}
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode STATEMENT_ID() { return GetToken(PlSqlParser.STATEMENT_ID, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explain_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplain_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explain_statementContext explain_statement() {
		Explain_statementContext _localctx = new Explain_statementContext(Context, State);
		EnterRule(_localctx, 700, RULE_explain_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5841; Match(EXPLAIN);
			State = 5842; Match(PLAN);
			State = 5847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 5843; Match(SET);
				State = 5844; Match(STATEMENT_ID);
				State = 5845; Match(EQUALS_OP);
				State = 5846; @string();
				}
			}

			State = 5851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 5849; Match(INTO);
				State = 5850; tableview_name();
				}
			}

			State = 5853; Match(FOR);
			State = 5859;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				State = 5854; select_statement();
				}
				break;
			case UPDATE:
				{
				State = 5855; update_statement();
				}
				break;
			case DELETE:
				{
				State = 5856; delete_statement();
				}
				break;
			case INSERT:
				{
				State = 5857; insert_statement();
				}
				break;
			case MERGE:
				{
				State = 5858; merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return GetRuleContext<Subquery_factoring_clauseContext>(0);
		}
		public For_update_clauseContext[] for_update_clause() {
			return GetRuleContexts<For_update_clauseContext>();
		}
		public For_update_clauseContext for_update_clause(int i) {
			return GetRuleContext<For_update_clauseContext>(i);
		}
		public Order_by_clauseContext[] order_by_clause() {
			return GetRuleContexts<Order_by_clauseContext>();
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return GetRuleContext<Order_by_clauseContext>(i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 702, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5862;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5861; subquery_factoring_clause();
				}
			}

			State = 5864; subquery();
			State = 5869;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				State = 5867;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 5865; for_update_clause();
					}
					break;
				case ORDER:
					{
					State = 5866; order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 5871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_factoring_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public Factoring_elementContext[] factoring_element() {
			return GetRuleContexts<Factoring_elementContext>();
		}
		public Factoring_elementContext factoring_element(int i) {
			return GetRuleContext<Factoring_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_factoring_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_factoring_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_factoring_clauseContext subquery_factoring_clause() {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(Context, State);
		EnterRule(_localctx, 704, RULE_subquery_factoring_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5872; Match(WITH);
			State = 5877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 5874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 5873; Match(COMMA);
					}
				}

				State = 5876; factoring_element();
				}
				}
				State = 5879;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Factoring_elementContext : ParserRuleContext {
		public Query_nameContext query_name() {
			return GetRuleContext<Query_nameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Search_clauseContext search_clause() {
			return GetRuleContext<Search_clauseContext>(0);
		}
		public Cycle_clauseContext cycle_clause() {
			return GetRuleContext<Cycle_clauseContext>(0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factoring_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactoring_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Factoring_elementContext factoring_element() {
		Factoring_elementContext _localctx = new Factoring_elementContext(Context, State);
		EnterRule(_localctx, 706, RULE_factoring_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5881; query_name();
			State = 5883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 5882; paren_column_list();
				}
			}

			State = 5885; Match(AS);
			State = 5886; Match(LEFT_PAREN);
			State = 5887; subquery();
			State = 5889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 5888; order_by_clause();
				}
			}

			State = 5891; Match(RIGHT_PAREN);
			State = 5893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEARCH) {
				{
				State = 5892; search_clause();
				}
			}

			State = 5896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
			case 1:
				{
				State = 5895; cycle_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_clauseContext : ParserRuleContext {
		public ITerminalNode SEARCH() { return GetToken(PlSqlParser.SEARCH, 0); }
		public ITerminalNode[] FIRST() { return GetTokens(PlSqlParser.FIRST); }
		public ITerminalNode FIRST(int i) {
			return GetToken(PlSqlParser.FIRST, i);
		}
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode DEPTH() { return GetToken(PlSqlParser.DEPTH, 0); }
		public ITerminalNode BREADTH() { return GetToken(PlSqlParser.BREADTH, 0); }
		public ITerminalNode[] ASC() { return GetTokens(PlSqlParser.ASC); }
		public ITerminalNode ASC(int i) {
			return GetToken(PlSqlParser.ASC, i);
		}
		public ITerminalNode[] DESC() { return GetTokens(PlSqlParser.DESC); }
		public ITerminalNode DESC(int i) {
			return GetToken(PlSqlParser.DESC, i);
		}
		public ITerminalNode[] NULLS() { return GetTokens(PlSqlParser.NULLS); }
		public ITerminalNode NULLS(int i) {
			return GetToken(PlSqlParser.NULLS, i);
		}
		public ITerminalNode[] LAST() { return GetTokens(PlSqlParser.LAST); }
		public ITerminalNode LAST(int i) {
			return GetToken(PlSqlParser.LAST, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_clauseContext search_clause() {
		Search_clauseContext _localctx = new Search_clauseContext(Context, State);
		EnterRule(_localctx, 708, RULE_search_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5898; Match(SEARCH);
			State = 5899;
			_la = TokenStream.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5900; Match(FIRST);
			State = 5901; Match(BY);
			State = 5902; column_name();
			State = 5904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC) {
				{
				State = 5903; Match(ASC);
				}
			}

			State = 5907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DESC) {
				{
				State = 5906; Match(DESC);
				}
			}

			State = 5911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,784,Context) ) {
			case 1:
				{
				State = 5909; Match(NULLS);
				State = 5910; Match(FIRST);
				}
				break;
			}
			State = 5915;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS) {
				{
				State = 5913; Match(NULLS);
				State = 5914; Match(LAST);
				}
			}

			State = 5935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5917; Match(COMMA);
				State = 5918; column_name();
				State = 5920;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC) {
					{
					State = 5919; Match(ASC);
					}
				}

				State = 5923;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DESC) {
					{
					State = 5922; Match(DESC);
					}
				}

				State = 5927;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,788,Context) ) {
				case 1:
					{
					State = 5925; Match(NULLS);
					State = 5926; Match(FIRST);
					}
					break;
				}
				State = 5931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULLS) {
					{
					State = 5929; Match(NULLS);
					State = 5930; Match(LAST);
					}
				}

				}
				}
				State = 5937;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5938; Match(SET);
			State = 5939; column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cycle_clauseContext : ParserRuleContext {
		public ITerminalNode CYCLE() { return GetToken(PlSqlParser.CYCLE, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycle_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCycle_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cycle_clauseContext cycle_clause() {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(Context, State);
		EnterRule(_localctx, 710, RULE_cycle_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5941; Match(CYCLE);
			State = 5942; column_list();
			State = 5943; Match(SET);
			State = 5944; column_name();
			State = 5945; Match(TO);
			State = 5946; expression();
			State = 5947; Match(DEFAULT);
			State = 5948; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_basic_elementsContext : ParserRuleContext {
		public Query_blockContext query_block() {
			return GetRuleContext<Query_blockContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_basic_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_basic_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_basic_elementsContext subquery_basic_elements() {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(Context, State);
		EnterRule(_localctx, 712, RULE_subquery_basic_elements);
		try {
			State = 5955;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5950; query_block();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5951; Match(LEFT_PAREN);
				State = 5952; subquery();
				State = 5953; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_operation_partContext : ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return GetRuleContext<Subquery_basic_elementsContext>(0);
		}
		public ITerminalNode UNION() { return GetToken(PlSqlParser.UNION, 0); }
		public ITerminalNode INTERSECT() { return GetToken(PlSqlParser.INTERSECT, 0); }
		public ITerminalNode MINUS() { return GetToken(PlSqlParser.MINUS, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_operation_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_operation_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_operation_partContext subquery_operation_part() {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(Context, State);
		EnterRule(_localctx, 714, RULE_subquery_operation_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5963;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNION:
				{
				State = 5957; Match(UNION);
				State = 5959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 5958; Match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				State = 5961; Match(INTERSECT);
				}
				break;
			case MINUS:
				{
				State = 5962; Match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5965; subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_blockContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return GetRuleContext<Hierarchical_query_clauseContext>(0);
		}
		public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		public Model_clauseContext model_clause() {
			return GetRuleContext<Model_clauseContext>(0);
		}
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Selected_elementContext[] selected_element() {
			return GetRuleContexts<Selected_elementContext>();
		}
		public Selected_elementContext selected_element(int i) {
			return GetRuleContext<Selected_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_blockContext query_block() {
		Query_blockContext _localctx = new Query_blockContext(Context, State);
		EnterRule(_localctx, 716, RULE_query_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5967; Match(SELECT);
			State = 5969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,794,Context) ) {
			case 1:
				{
				State = 5968;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 5980;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 5971; Match(ASTERISK);
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 5976;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 5973;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 5972; Match(COMMA);
							}
						}

						State = 5975; selected_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 5978;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,796,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 5983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				State = 5982; into_clause();
				}
			}

			State = 5985; from_clause();
			State = 5987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,799,Context) ) {
			case 1:
				{
				State = 5986; where_clause();
				}
				break;
			}
			State = 5990;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,800,Context) ) {
			case 1:
				{
				State = 5989; hierarchical_query_clause();
				}
				break;
			}
			State = 5993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,801,Context) ) {
			case 1:
				{
				State = 5992; group_by_clause();
				}
				break;
			}
			State = 5996;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,802,Context) ) {
			case 1:
				{
				State = 5995; model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_elementContext : ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return GetRuleContext<Select_list_elementsContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_elementContext selected_element() {
		Selected_elementContext _localctx = new Selected_elementContext(Context, State);
		EnterRule(_localctx, 718, RULE_selected_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5998; select_list_elements();
			State = 6000;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,803,Context) ) {
			case 1:
				{
				State = 5999; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return GetRuleContext<Table_ref_listContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 720, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6002; Match(FROM);
			State = 6003; table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_list_elementsContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_list_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_list_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_list_elementsContext select_list_elements() {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(Context, State);
		EnterRule(_localctx, 722, RULE_select_list_elements);
		try {
			State = 6015;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,805,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6005; tableview_name();
				State = 6006; Match(PERIOD);
				State = 6007; Match(ASTERISK);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6012;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
				case 1:
					{
					State = 6009; regular_id();
					State = 6010; Match(PERIOD);
					}
					break;
				}
				State = 6014; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_listContext : ParserRuleContext {
		public Table_refContext[] table_ref() {
			return GetRuleContexts<Table_refContext>();
		}
		public Table_refContext table_ref(int i) {
			return GetRuleContext<Table_refContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_listContext table_ref_list() {
		Table_ref_listContext _localctx = new Table_ref_listContext(Context, State);
		EnterRule(_localctx, 724, RULE_table_ref_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6021;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6018;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6017; Match(COMMA);
						}
					}

					State = 6020; table_ref();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6023;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,807,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_refContext : ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return GetRuleContext<Table_ref_auxContext>(0);
		}
		public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_refContext table_ref() {
		Table_refContext _localctx = new Table_refContext(Context, State);
		EnterRule(_localctx, 726, RULE_table_ref);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6025; table_ref_aux();
			State = 6029;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,808,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6026; join_clause();
					}
					} 
				}
				State = 6031;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,808,Context);
			}
			State = 6034;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
			case 1:
				{
				State = 6032; pivot_clause();
				}
				break;
			case 2:
				{
				State = 6033; unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_auxContext : ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return GetRuleContext<Table_ref_aux_internalContext>(0);
		}
		public Flashback_query_clauseContext[] flashback_query_clause() {
			return GetRuleContexts<Flashback_query_clauseContext>();
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return GetRuleContext<Flashback_query_clauseContext>(i);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_aux; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_auxContext table_ref_aux() {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(Context, State);
		EnterRule(_localctx, 728, RULE_table_ref_aux);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6036; table_ref_aux_internal();
			State = 6040;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,810,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6037; flashback_query_clause();
					}
					} 
				}
				State = 6042;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,810,Context);
			}
			State = 6044;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
			case 1:
				{
				State = 6043; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_ref_aux_internalContext : ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_ref_aux_internal; } }
	 
		public Table_ref_aux_internalContext() { }
		public virtual void CopyFrom(Table_ref_aux_internalContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Table_ref_aux_internal_threeContext : Table_ref_aux_internalContext {
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_three(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_ref_aux_internal_oneContext : Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_one(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Table_ref_aux_internal_twoContext : Table_ref_aux_internalContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Table_refContext table_ref() {
			return GetRuleContext<Table_refContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public Pivot_clauseContext pivot_clause() {
			return GetRuleContext<Pivot_clauseContext>(0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return GetRuleContext<Unpivot_clauseContext>(0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_ref_aux_internal_two(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_ref_aux_internalContext table_ref_aux_internal() {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(Context, State);
		EnterRule(_localctx, 730, RULE_table_ref_aux_internal);
		int _la;
		try {
			State = 6069;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,815,Context) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6046; dml_table_expression_clause();
				State = 6049;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,812,Context) ) {
				case 1:
					{
					State = 6047; pivot_clause();
					}
					break;
				case 2:
					{
					State = 6048; unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6051; Match(LEFT_PAREN);
				State = 6052; table_ref();
				State = 6056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					State = 6053; subquery_operation_part();
					}
					}
					State = 6058;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 6059; Match(RIGHT_PAREN);
				State = 6062;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
				case 1:
					{
					State = 6060; pivot_clause();
					}
					break;
				case 2:
					{
					State = 6061; unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6064; Match(ONLY);
				State = 6065; Match(LEFT_PAREN);
				State = 6066; dml_table_expression_clause();
				State = 6067; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return GetRuleContext<Table_ref_auxContext>(0);
		}
		public Query_partition_clauseContext[] query_partition_clause() {
			return GetRuleContexts<Query_partition_clauseContext>();
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return GetRuleContext<Query_partition_clauseContext>(i);
		}
		public ITerminalNode INNER() { return GetToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return GetRuleContext<Outer_join_typeContext>(0);
		}
		public Join_on_partContext[] join_on_part() {
			return GetRuleContexts<Join_on_partContext>();
		}
		public Join_on_partContext join_on_part(int i) {
			return GetRuleContext<Join_on_partContext>(i);
		}
		public Join_using_partContext[] join_using_part() {
			return GetRuleContexts<Join_using_partContext>();
		}
		public Join_using_partContext join_using_part(int i) {
			return GetRuleContext<Join_using_partContext>(i);
		}
		public ITerminalNode CROSS() { return GetToken(PlSqlParser.CROSS, 0); }
		public ITerminalNode NATURAL() { return GetToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 732, RULE_join_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6071; query_partition_clause();
				}
			}

			State = 6075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				State = 6074;
				_la = TokenStream.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6079;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INNER:
				{
				State = 6077; Match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				State = 6078; outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			State = 6081; Match(JOIN);
			State = 6082; table_ref_aux();
			State = 6084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
			case 1:
				{
				State = 6083; query_partition_clause();
				}
				break;
			}
			State = 6090;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,821,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 6088;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ON:
						{
						State = 6086; join_on_part();
						}
						break;
					case USING:
						{
						State = 6087; join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 6092;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,821,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_on_partContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_on_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_on_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_on_partContext join_on_part() {
		Join_on_partContext _localctx = new Join_on_partContext(Context, State);
		EnterRule(_localctx, 734, RULE_join_on_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6093; Match(ON);
			State = 6094; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_using_partContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_using_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_using_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_using_partContext join_using_part() {
		Join_using_partContext _localctx = new Join_using_partContext(Context, State);
		EnterRule(_localctx, 736, RULE_join_using_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6096; Match(USING);
			State = 6097; paren_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_typeContext : ParserRuleContext {
		public ITerminalNode FULL() { return GetToken(PlSqlParser.FULL, 0); }
		public ITerminalNode LEFT() { return GetToken(PlSqlParser.LEFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(PlSqlParser.RIGHT, 0); }
		public ITerminalNode OUTER() { return GetToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_typeContext outer_join_type() {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(Context, State);
		EnterRule(_localctx, 738, RULE_outer_join_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6099;
			_la = TokenStream.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER) {
				{
				State = 6100; Match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_partition_clauseContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_partition_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_partition_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_partition_clauseContext query_partition_clause() {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(Context, State);
		EnterRule(_localctx, 740, RULE_query_partition_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6103; Match(PARTITION);
			State = 6104; Match(BY);
			State = 6112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
			case 1:
				{
				{
				State = 6105; Match(LEFT_PAREN);
				State = 6108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,823,Context) ) {
				case 1:
					{
					State = 6106; subquery();
					}
					break;
				case 2:
					{
					State = 6107; expressions();
					}
					break;
				}
				State = 6110; Match(RIGHT_PAREN);
				}
				}
				break;
			case 2:
				{
				State = 6111; expressions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_query_clauseContext : ParserRuleContext {
		public ITerminalNode VERSIONS() { return GetToken(PlSqlParser.VERSIONS, 0); }
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SCN() { return GetToken(PlSqlParser.SCN, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_query_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_query_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_query_clauseContext flashback_query_clause() {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(Context, State);
		EnterRule(_localctx, 742, RULE_flashback_query_clause);
		int _la;
		try {
			State = 6122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERSIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6114; Match(VERSIONS);
				State = 6115; Match(BETWEEN);
				State = 6116;
				_la = TokenStream.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6117; expression();
				}
				break;
			case AS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6118; Match(AS);
				State = 6119; Match(OF);
				State = 6120;
				_la = TokenStream.LA(1);
				if ( !(_la==SCN || _la==SNAPSHOT || _la==TIMESTAMP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6121; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_clauseContext : ParserRuleContext {
		public ITerminalNode PIVOT() { return GetToken(PlSqlParser.PIVOT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return GetRuleContext<Pivot_for_clauseContext>(0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return GetRuleContext<Pivot_in_clauseContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode XML() { return GetToken(PlSqlParser.XML, 0); }
		public Pivot_elementContext[] pivot_element() {
			return GetRuleContexts<Pivot_elementContext>();
		}
		public Pivot_elementContext pivot_element(int i) {
			return GetRuleContext<Pivot_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_clauseContext pivot_clause() {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(Context, State);
		EnterRule(_localctx, 744, RULE_pivot_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6124; Match(PIVOT);
			State = 6126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==XML) {
				{
				State = 6125; Match(XML);
				}
			}

			State = 6128; Match(LEFT_PAREN);
			State = 6133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6129; Match(COMMA);
					}
				}

				State = 6132; pivot_element();
				}
				}
				State = 6135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
			State = 6137; pivot_for_clause();
			State = 6138; pivot_in_clause();
			State = 6139; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_elementContext : ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return GetRuleContext<Aggregate_function_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_elementContext pivot_element() {
		Pivot_elementContext _localctx = new Pivot_elementContext(Context, State);
		EnterRule(_localctx, 746, RULE_pivot_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6141; aggregate_function_name();
			State = 6142; Match(LEFT_PAREN);
			State = 6143; expression();
			State = 6144; Match(RIGHT_PAREN);
			State = 6146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,829,Context) ) {
			case 1:
				{
				State = 6145; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_for_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_for_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_for_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_for_clauseContext pivot_for_clause() {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(Context, State);
		EnterRule(_localctx, 748, RULE_pivot_for_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6148; Match(FOR);
			State = 6151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 6149; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 6150; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clauseContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode[] ANY() { return GetTokens(PlSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(PlSqlParser.ANY, i);
		}
		public Pivot_in_clause_elementContext[] pivot_in_clause_element() {
			return GetRuleContexts<Pivot_in_clause_elementContext>();
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return GetRuleContext<Pivot_in_clause_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clauseContext pivot_in_clause() {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(Context, State);
		EnterRule(_localctx, 750, RULE_pivot_in_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6153; Match(IN);
			State = 6154; Match(LEFT_PAREN);
			State = 6172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,835,Context) ) {
			case 1:
				{
				State = 6155; subquery();
				}
				break;
			case 2:
				{
				State = 6160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6157;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6156; Match(COMMA);
						}
					}

					State = 6159; Match(ANY);
					}
					}
					State = 6162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ANY || _la==COMMA );
				}
				break;
			case 3:
				{
				State = 6168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6164; Match(COMMA);
						}
					}

					State = 6167; pivot_in_clause_element();
					}
					}
					State = 6170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID );
				}
				break;
			}
			State = 6174; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clause_elementContext : ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return GetRuleContext<Pivot_in_clause_elementsContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clause_elementContext pivot_in_clause_element() {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(Context, State);
		EnterRule(_localctx, 752, RULE_pivot_in_clause_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6176; pivot_in_clause_elements();
			State = 6178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,836,Context) ) {
			case 1:
				{
				State = 6177; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pivot_in_clause_elementsContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pivot_in_clause_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPivot_in_clause_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(Context, State);
		EnterRule(_localctx, 754, RULE_pivot_in_clause_elements);
		int _la;
		try {
			State = 6186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,838,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6180; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6181; Match(LEFT_PAREN);
				State = 6183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
					{
					State = 6182; expressions();
					}
				}

				State = 6185; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_clauseContext : ParserRuleContext {
		public ITerminalNode UNPIVOT() { return GetToken(PlSqlParser.UNPIVOT, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return GetRuleContext<Pivot_for_clauseContext>(0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return GetRuleContext<Unpivot_in_clauseContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode INCLUDE() { return GetToken(PlSqlParser.INCLUDE, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(PlSqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_clauseContext unpivot_clause() {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(Context, State);
		EnterRule(_localctx, 756, RULE_unpivot_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6188; Match(UNPIVOT);
			State = 6191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				State = 6189;
				_la = TokenStream.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6190; Match(NULLS);
				}
			}

			State = 6193; Match(LEFT_PAREN);
			State = 6196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 6194; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 6195; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6198; pivot_for_clause();
			State = 6199; unpivot_in_clause();
			State = 6200; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_in_clauseContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Unpivot_in_elementsContext[] unpivot_in_elements() {
			return GetRuleContexts<Unpivot_in_elementsContext>();
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return GetRuleContext<Unpivot_in_elementsContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_in_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_in_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_in_clauseContext unpivot_in_clause() {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(Context, State);
		EnterRule(_localctx, 758, RULE_unpivot_in_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6202; Match(IN);
			State = 6203; Match(LEFT_PAREN);
			State = 6208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6204; Match(COMMA);
					}
				}

				State = 6207; unpivot_in_elements();
				}
				}
				State = 6210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (LEFT_PAREN - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
			State = 6212; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unpivot_in_elementsContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unpivot_in_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnpivot_in_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unpivot_in_elementsContext unpivot_in_elements() {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(Context, State);
		EnterRule(_localctx, 760, RULE_unpivot_in_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 6214; column_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 6215; paren_column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6233;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 6218; Match(AS);
				State = 6231;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case PLUS_SIGN:
					{
					State = 6219; constant();
					}
					break;
				case LEFT_PAREN:
					{
					State = 6220; Match(LEFT_PAREN);
					State = 6225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 6222;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 6221; Match(COMMA);
							}
						}

						State = 6224; constant();
						}
						}
						State = 6227;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 125)) & ~0x3f) == 0 && ((1L << (_la - 125)) & ((1L << (DATE - 125)) | (1L << (DBTIMEZONE - 125)) | (1L << (DEFAULT - 125)))) != 0) || _la==FALSE || _la==INTERVAL || _la==MAXVALUE || _la==MINVALUE || _la==NULL || _la==SESSIONTIMEZONE || _la==TIMESTAMP || _la==TRUE || ((((_la - 737)) & ~0x3f) == 0 && ((1L << (_la - 737)) & ((1L << (NATIONAL_CHAR_STRING_LIT - 737)) | (1L << (UNSIGNED_INTEGER - 737)) | (1L << (APPROXIMATE_NUM_LIT - 737)) | (1L << (CHAR_STRING - 737)) | (1L << (PLUS_SIGN - 737)) | (1L << (COMMA - 737)))) != 0) );
					State = 6229; Match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchical_query_clauseContext : ParserRuleContext {
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode NOCYCLE() { return GetToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return GetRuleContext<Start_partContext>(0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchical_query_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchical_query_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchical_query_clauseContext hierarchical_query_clause() {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(Context, State);
		EnterRule(_localctx, 762, RULE_hierarchical_query_clause);
		try {
			State = 6252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONNECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6235; Match(CONNECT);
				State = 6236; Match(BY);
				State = 6238;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
				case 1:
					{
					State = 6237; Match(NOCYCLE);
					}
					break;
				}
				State = 6240; condition();
				State = 6242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
				case 1:
					{
					State = 6241; start_part();
					}
					break;
				}
				}
				break;
			case START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6244; start_part();
				State = 6245; Match(CONNECT);
				State = 6246; Match(BY);
				State = 6248;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,850,Context) ) {
				case 1:
					{
					State = 6247; Match(NOCYCLE);
					}
					break;
				}
				State = 6250; condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Start_partContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(PlSqlParser.START, 0); }
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Start_partContext start_part() {
		Start_partContext _localctx = new Start_partContext(Context, State);
		EnterRule(_localctx, 764, RULE_start_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6254; Match(START);
			State = 6255; Match(WITH);
			State = 6256; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Group_by_elementsContext[] group_by_elements() {
			return GetRuleContexts<Group_by_elementsContext>();
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return GetRuleContext<Group_by_elementsContext>(i);
		}
		public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 766, RULE_group_by_clause);
		int _la;
		try {
			int _alt;
			State = 6284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GROUP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6258; Match(GROUP);
				State = 6259; Match(BY);
				State = 6264;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6261;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 6260; Match(COMMA);
							}
						}

						State = 6263; group_by_elements();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6266;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,853,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 6269;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,854,Context) ) {
				case 1:
					{
					State = 6268; having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6271; having_clause();
				State = 6282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,857,Context) ) {
				case 1:
					{
					State = 6272; Match(GROUP);
					State = 6273; Match(BY);
					State = 6278;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 6275;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 6274; Match(COMMA);
								}
							}

							State = 6277; group_by_elements();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 6280;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,856,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_elementsContext : ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return GetRuleContext<Grouping_sets_clauseContext>(0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return GetRuleContext<Rollup_cube_clauseContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_by_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_elementsContext group_by_elements() {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(Context, State);
		EnterRule(_localctx, 768, RULE_group_by_elements);
		try {
			State = 6289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,859,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6286; grouping_sets_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6287; rollup_cube_clause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6288; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollup_cube_clauseContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode ROLLUP() { return GetToken(PlSqlParser.ROLLUP, 0); }
		public ITerminalNode CUBE() { return GetToken(PlSqlParser.CUBE, 0); }
		public Grouping_sets_elementsContext[] grouping_sets_elements() {
			return GetRuleContexts<Grouping_sets_elementsContext>();
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return GetRuleContext<Grouping_sets_elementsContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollup_cube_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollup_cube_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollup_cube_clauseContext rollup_cube_clause() {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(Context, State);
		EnterRule(_localctx, 770, RULE_rollup_cube_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6291;
			_la = TokenStream.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6292; Match(LEFT_PAREN);
			State = 6297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6293; Match(COMMA);
					}
				}

				State = 6296; grouping_sets_elements();
				}
				}
				State = 6299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID );
			State = 6301; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_clauseContext : ParserRuleContext {
		public ITerminalNode GROUPING() { return GetToken(PlSqlParser.GROUPING, 0); }
		public ITerminalNode SETS() { return GetToken(PlSqlParser.SETS, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Grouping_sets_elementsContext[] grouping_sets_elements() {
			return GetRuleContexts<Grouping_sets_elementsContext>();
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return GetRuleContext<Grouping_sets_elementsContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_clauseContext grouping_sets_clause() {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(Context, State);
		EnterRule(_localctx, 772, RULE_grouping_sets_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6303; Match(GROUPING);
			State = 6304; Match(SETS);
			State = 6305; Match(LEFT_PAREN);
			State = 6310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6306; Match(COMMA);
					}
				}

				State = 6309; grouping_sets_elements();
				}
				}
				State = 6312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID );
			State = 6314; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grouping_sets_elementsContext : ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return GetRuleContext<Rollup_cube_clauseContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grouping_sets_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping_sets_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grouping_sets_elementsContext grouping_sets_elements() {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(Context, State);
		EnterRule(_localctx, 774, RULE_grouping_sets_elements);
		int _la;
		try {
			State = 6323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6316; rollup_cube_clause();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6317; Match(LEFT_PAREN);
				State = 6319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
					{
					State = 6318; expressions();
					}
				}

				State = 6321; Match(RIGHT_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6322; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		public ITerminalNode HAVING() { return GetToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 776, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6325; Match(HAVING);
			State = 6326; condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_clauseContext : ParserRuleContext {
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return GetRuleContext<Main_modelContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return GetRuleContext<Return_rows_clauseContext>(0);
		}
		public Reference_modelContext[] reference_model() {
			return GetRuleContexts<Reference_modelContext>();
		}
		public Reference_modelContext reference_model(int i) {
			return GetRuleContext<Reference_modelContext>(i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_clauseContext model_clause() {
		Model_clauseContext _localctx = new Model_clauseContext(Context, State);
		EnterRule(_localctx, 778, RULE_model_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6328; Match(MODEL);
			State = 6332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 6329; cell_reference_options();
				}
				}
				State = 6334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RETURN) {
				{
				State = 6335; return_rows_clause();
				}
			}

			State = 6341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==REFERENCE) {
				{
				{
				State = 6338; reference_model();
				}
				}
				State = 6343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6344; main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_reference_optionsContext : ParserRuleContext {
		public ITerminalNode NAV() { return GetToken(PlSqlParser.NAV, 0); }
		public ITerminalNode IGNORE() { return GetToken(PlSqlParser.IGNORE, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode SINGLE() { return GetToken(PlSqlParser.SINGLE, 0); }
		public ITerminalNode REFERENCE() { return GetToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_reference_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_reference_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_reference_optionsContext cell_reference_options() {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(Context, State);
		EnterRule(_localctx, 780, RULE_cell_reference_options);
		int _la;
		try {
			State = 6354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IGNORE:
			case KEEP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6346;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6347; Match(NAV);
				}
				break;
			case UNIQUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6348; Match(UNIQUE);
				State = 6352;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DIMENSION:
					{
					State = 6349; Match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					State = 6350; Match(SINGLE);
					State = 6351; Match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_rows_clauseContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public ITerminalNode UPDATED() { return GetToken(PlSqlParser.UPDATED, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_rows_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_rows_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_rows_clauseContext return_rows_clause() {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(Context, State);
		EnterRule(_localctx, 782, RULE_return_rows_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6356; Match(RETURN);
			State = 6357;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6358; Match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_modelContext : ParserRuleContext {
		public ITerminalNode REFERENCE() { return GetToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return GetRuleContext<Reference_model_nameContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return GetRuleContext<Model_column_clausesContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_model; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_model(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_modelContext reference_model() {
		Reference_modelContext _localctx = new Reference_modelContext(Context, State);
		EnterRule(_localctx, 784, RULE_reference_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6360; Match(REFERENCE);
			State = 6361; reference_model_name();
			State = 6362; Match(ON);
			State = 6363; Match(LEFT_PAREN);
			State = 6364; subquery();
			State = 6365; Match(RIGHT_PAREN);
			State = 6366; model_column_clauses();
			State = 6370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 6367; cell_reference_options();
				}
				}
				State = 6372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_modelContext : ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return GetRuleContext<Model_column_clausesContext>(0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return GetRuleContext<Model_rules_clauseContext>(0);
		}
		public ITerminalNode MAIN() { return GetToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return GetRuleContext<Main_model_nameContext>(0);
		}
		public Cell_reference_optionsContext[] cell_reference_options() {
			return GetRuleContexts<Cell_reference_optionsContext>();
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return GetRuleContext<Cell_reference_optionsContext>(i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_model; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain_model(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Main_modelContext main_model() {
		Main_modelContext _localctx = new Main_modelContext(Context, State);
		EnterRule(_localctx, 786, RULE_main_model);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAIN) {
				{
				State = 6373; Match(MAIN);
				State = 6374; main_model_name();
				}
			}

			State = 6377; model_column_clauses();
			State = 6381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				State = 6378; cell_reference_options();
				}
				}
				State = 6383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6384; model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_clausesContext : ParserRuleContext {
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Model_column_listContext[] model_column_list() {
			return GetRuleContexts<Model_column_listContext>();
		}
		public Model_column_listContext model_column_list(int i) {
			return GetRuleContext<Model_column_listContext>(i);
		}
		public ITerminalNode MEASURES() { return GetToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return GetRuleContext<Model_column_partition_partContext>(0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_clauses; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_clausesContext model_column_clauses() {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(Context, State);
		EnterRule(_localctx, 788, RULE_model_column_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6386; model_column_partition_part();
				}
			}

			State = 6389; Match(DIMENSION);
			State = 6390; Match(BY);
			State = 6391; model_column_list();
			State = 6392; Match(MEASURES);
			State = 6393; model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_partition_partContext : ParserRuleContext {
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return GetRuleContext<Model_column_listContext>(0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_partition_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_partition_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_partition_partContext model_column_partition_part() {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(Context, State);
		EnterRule(_localctx, 790, RULE_model_column_partition_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6395; Match(PARTITION);
			State = 6396; Match(BY);
			State = 6397; model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_column_listContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Model_columnContext[] model_column() {
			return GetRuleContexts<Model_columnContext>();
		}
		public Model_columnContext model_column(int i) {
			return GetRuleContext<Model_columnContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_column_listContext model_column_list() {
		Model_column_listContext _localctx = new Model_column_listContext(Context, State);
		EnterRule(_localctx, 792, RULE_model_column_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6399; Match(LEFT_PAREN);
			State = 6404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6400; Match(COMMA);
					}
				}

				State = 6403; model_column();
				}
				}
				State = 6406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELECT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID );
			State = 6408; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_columnContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Query_blockContext query_block() {
			return GetRuleContext<Query_blockContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_columnContext model_column() {
		Model_columnContext _localctx = new Model_columnContext(Context, State);
		EnterRule(_localctx, 794, RULE_model_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 6410; expression();
				}
				break;
			case SELECT:
				{
				State = 6411; query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6415;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,878,Context) ) {
			case 1:
				{
				State = 6414; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_clauseContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Model_rules_partContext model_rules_part() {
			return GetRuleContext<Model_rules_partContext>(0);
		}
		public Model_rules_elementContext[] model_rules_element() {
			return GetRuleContexts<Model_rules_elementContext>();
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return GetRuleContext<Model_rules_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_clauseContext model_rules_clause() {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(Context, State);
		EnterRule(_localctx, 796, RULE_model_rules_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RULES) {
				{
				State = 6417; model_rules_part();
				}
			}

			State = 6420; Match(LEFT_PAREN);
			State = 6427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (NULL - 392)) | (1L << (NULLS - 392)) | (1L << (NUMBER - 392)) | (1L << (NUMERIC - 392)) | (1L << (NVARCHAR2 - 392)) | (1L << (OBJECT - 392)) | (1L << (OFF - 392)) | (1L << (OID - 392)) | (1L << (OLD - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPERATOR - 392)) | (1L << (ORADATA - 392)) | (1L << (ORDINALITY - 392)) | (1L << (OSERROR - 392)) | (1L << (OUTER - 392)) | (1L << (OUT - 392)) | (1L << (OVER - 392)) | (1L << (OVERRIDING - 392)) | (1L << (PACKAGE - 392)) | (1L << (PARALLEL_ENABLE - 392)) | (1L << (PARAMETERS - 392)) | (1L << (PARENT - 392)) | (1L << (PARTITION - 392)) | (1L << (PASSING - 392)) | (1L << (PASSWORD - 392)) | (1L << (PATH - 392)) | (1L << (PIPELINED - 392)) | (1L << (PLAN - 392)) | (1L << (PLS_INTEGER - 392)) | (1L << (POSITIVEN - 392)) | (1L << (POSITIVE - 392)) | (1L << (PRAGMA - 392)) | (1L << (PRECEDING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PRECISION - 456)) | (1L << (PRESENT - 456)) | (1L << (PRIOR - 456)) | (1L << (PRIVILEGE - 456)) | (1L << (PROGRAM - 456)) | (1L << (RAISE - 456)) | (1L << (RANGE - 456)) | (1L << (RAW - 456)) | (1L << (READ - 456)) | (1L << (REAL - 456)) | (1L << (RECORD - 456)) | (1L << (REFERENCE - 456)) | (1L << (REFERENCING - 456)) | (1L << (REF - 456)) | (1L << (REJECT - 456)) | (1L << (RELIES_ON - 456)) | (1L << (RENAME - 456)) | (1L << (REPLACE - 456)) | (1L << (RESPECT - 456)) | (1L << (RESTRICT_REFERENCES - 456)) | (1L << (RESULT_CACHE - 456)) | (1L << (RESULT - 456)) | (1L << (RETURNING - 456)) | (1L << (RETURN - 456)) | (1L << (REUSE - 456)) | (1L << (REVERSE - 456)) | (1L << (REVOKE - 456)) | (1L << (RIGHT - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROWID - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (RULES - 456)) | (1L << (SAMPLE - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SAVEPOINT - 520)) | (1L << (SAVE - 520)) | (1L << (SCHEMACHECK - 520)) | (1L << (SCHEMA - 520)) | (1L << (SCN - 520)) | (1L << (SECOND - 520)) | (1L << (SEED - 520)) | (1L << (SEGMENT - 520)) | (1L << (SELF - 520)) | (1L << (SEQUENTIAL - 520)) | (1L << (SERIALIZABLE - 520)) | (1L << (SERIALLY_REUSABLE - 520)) | (1L << (SERVERERROR - 520)) | (1L << (SESSIONTIMEZONE - 520)) | (1L << (SET - 520)) | (1L << (SETS - 520)) | (1L << (SETTINGS - 520)) | (1L << (SHOW - 520)) | (1L << (SHUTDOWN - 520)) | (1L << (SIBLINGS - 520)) | (1L << (SIGNTYPE - 520)) | (1L << (SIMPLE_INTEGER - 520)) | (1L << (SINGLE - 520)) | (1L << (SKIP_ - 520)) | (1L << (SMALLINT - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOME - 520)) | (1L << (SPECIFICATION - 520)) | (1L << (SQLDATA - 520)) | (1L << (SQLERROR - 520)) | (1L << (STANDALONE - 520)) | (1L << (STARTUP - 520)) | (1L << (STATEMENT_ID - 520)) | (1L << (STATEMENT - 520)) | (1L << (STATIC - 520)) | (1L << (STATISTICS - 520)) | (1L << (STORE - 520)) | (1L << (STRING - 520)) | (1L << (SUBMULTISET - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBSTITUTABLE - 520)) | (1L << (SUBTYPE - 520)) | (1L << (SUCCESS - 520)) | (1L << (SUSPEND - 520)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUE - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TRUNC - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPDATE - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (DECODE - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (NVL - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROUND - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TO_CHAR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (LEAST - 713)) | (1L << (GREATEST - 713)) | (1L << (TO_DATE - 713)) | (1L << (NATIONAL_CHAR_STRING_LIT - 713)) | (1L << (UNSIGNED_INTEGER - 713)) | (1L << (APPROXIMATE_NUM_LIT - 713)) | (1L << (CHAR_STRING - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (LEFT_PAREN - 713)) | (1L << (PLUS_SIGN - 713)) | (1L << (MINUS_SIGN - 713)) | (1L << (COMMA - 713)) | (1L << (BINDVAR - 713)) | (1L << (COLON - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				{
				State = 6422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6421; Match(COMMA);
					}
				}

				State = 6424; model_rules_element();
				}
				}
				State = 6429;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6430; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_partContext : ParserRuleContext {
		public ITerminalNode RULES() { return GetToken(PlSqlParser.RULES, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode UPSERT() { return GetToken(PlSqlParser.UPSERT, 0); }
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return GetRuleContext<Model_iterate_clauseContext>(0);
		}
		public ITerminalNode AUTOMATIC() { return GetToken(PlSqlParser.AUTOMATIC, 0); }
		public ITerminalNode SEQUENTIAL() { return GetToken(PlSqlParser.SEQUENTIAL, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_partContext model_rules_part() {
		Model_rules_partContext _localctx = new Model_rules_partContext(Context, State);
		EnterRule(_localctx, 798, RULE_model_rules_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6432; Match(RULES);
			State = 6438;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE:
				{
				State = 6433; Match(UPDATE);
				}
				break;
			case UPSERT:
				{
				State = 6434; Match(UPSERT);
				State = 6436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL) {
					{
					State = 6435; Match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			State = 6442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				State = 6440;
				_la = TokenStream.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6441; Match(ORDER);
				}
			}

			State = 6445;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ITERATE) {
				{
				State = 6444; model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_rules_elementContext : ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return GetRuleContext<Cell_assignmentContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode UPSERT() { return GetToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_rules_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_rules_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_rules_elementContext model_rules_element() {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(Context, State);
		EnterRule(_localctx, 800, RULE_model_rules_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6452;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,887,Context) ) {
			case 1:
				{
				State = 6447; Match(UPDATE);
				}
				break;
			case 2:
				{
				State = 6448; Match(UPSERT);
				State = 6450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
				case 1:
					{
					State = 6449; Match(ALL);
					}
					break;
				}
				}
				break;
			}
			State = 6454; cell_assignment();
			State = 6456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 6455; order_by_clause();
				}
			}

			State = 6458; Match(EQUALS_OP);
			State = 6459; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cell_assignmentContext : ParserRuleContext {
		public Model_expressionContext model_expression() {
			return GetRuleContext<Model_expressionContext>(0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cell_assignmentContext cell_assignment() {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(Context, State);
		EnterRule(_localctx, 802, RULE_cell_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6461; model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_iterate_clauseContext : ParserRuleContext {
		public ITerminalNode ITERATE() { return GetToken(PlSqlParser.ITERATE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Until_partContext until_part() {
			return GetRuleContext<Until_partContext>(0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_iterate_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_iterate_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_iterate_clauseContext model_iterate_clause() {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(Context, State);
		EnterRule(_localctx, 804, RULE_model_iterate_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6463; Match(ITERATE);
			State = 6464; Match(LEFT_PAREN);
			State = 6465; expression();
			State = 6466; Match(RIGHT_PAREN);
			State = 6468;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 6467; until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Until_partContext : ParserRuleContext {
		public ITerminalNode UNTIL() { return GetToken(PlSqlParser.UNTIL, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Until_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_until_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUntil_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Until_partContext until_part() {
		Until_partContext _localctx = new Until_partContext(Context, State);
		EnterRule(_localctx, 806, RULE_until_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6470; Match(UNTIL);
			State = 6471; Match(LEFT_PAREN);
			State = 6472; condition();
			State = 6473; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode SIBLINGS() { return GetToken(PlSqlParser.SIBLINGS, 0); }
		public Order_by_elementsContext[] order_by_elements() {
			return GetRuleContexts<Order_by_elementsContext>();
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return GetRuleContext<Order_by_elementsContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 808, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6475; Match(ORDER);
			State = 6477;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIBLINGS) {
				{
				State = 6476; Match(SIBLINGS);
				}
			}

			State = 6479; Match(BY);
			State = 6484;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 6481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 6480; Match(COMMA);
						}
					}

					State = 6483; order_by_elements();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6486;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,892,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_elementsContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode ASC() { return GetToken(PlSqlParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(PlSqlParser.DESC, 0); }
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_elementsContext order_by_elements() {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(Context, State);
		EnterRule(_localctx, 810, RULE_order_by_elements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6488; expression();
			State = 6490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 6489;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6494;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,894,Context) ) {
			case 1:
				{
				State = 6492; Match(NULLS);
				State = 6493;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_clauseContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return GetRuleContext<For_update_of_partContext>(0);
		}
		public For_update_optionsContext for_update_options() {
			return GetRuleContext<For_update_optionsContext>(0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_clauseContext for_update_clause() {
		For_update_clauseContext _localctx = new For_update_clauseContext(Context, State);
		EnterRule(_localctx, 812, RULE_for_update_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6496; Match(FOR);
			State = 6497; Match(UPDATE);
			State = 6499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OF) {
				{
				State = 6498; for_update_of_part();
				}
			}

			State = 6502;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,896,Context) ) {
			case 1:
				{
				State = 6501; for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_of_partContext : ParserRuleContext {
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_of_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_of_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_of_partContext for_update_of_part() {
		For_update_of_partContext _localctx = new For_update_of_partContext(Context, State);
		EnterRule(_localctx, 814, RULE_for_update_of_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6504; Match(OF);
			State = 6505; column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_update_optionsContext : ParserRuleContext {
		public ITerminalNode SKIP_() { return GetToken(PlSqlParser.SKIP_, 0); }
		public ITerminalNode LOCKED() { return GetToken(PlSqlParser.LOCKED, 0); }
		public ITerminalNode NOWAIT() { return GetToken(PlSqlParser.NOWAIT, 0); }
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_update_options; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_update_options(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_update_optionsContext for_update_options() {
		For_update_optionsContext _localctx = new For_update_optionsContext(Context, State);
		EnterRule(_localctx, 816, RULE_for_update_options);
		try {
			State = 6512;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6507; Match(SKIP_);
				State = 6508; Match(LOCKED);
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6509; Match(NOWAIT);
				}
				break;
			case WAIT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6510; Match(WAIT);
				State = 6511; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_statementContext : ParserRuleContext {
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public Update_set_clauseContext update_set_clause() {
			return GetRuleContext<Update_set_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_statementContext update_statement() {
		Update_statementContext _localctx = new Update_statementContext(Context, State);
		EnterRule(_localctx, 818, RULE_update_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6514; Match(UPDATE);
			State = 6515; general_table_ref();
			State = 6516; update_set_clause();
			State = 6518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6517; where_clause();
				}
			}

			State = 6521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,899,Context) ) {
			case 1:
				{
				State = 6520; static_returning_clause();
				}
				break;
			}
			State = 6524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,900,Context) ) {
			case 1:
				{
				State = 6523; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_set_clauseContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Column_based_update_set_clauseContext[] column_based_update_set_clause() {
			return GetRuleContexts<Column_based_update_set_clauseContext>();
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return GetRuleContext<Column_based_update_set_clauseContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_set_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdate_set_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Update_set_clauseContext update_set_clause() {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(Context, State);
		EnterRule(_localctx, 820, RULE_update_set_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6526; Match(SET);
			State = 6542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
			case 1:
				{
				State = 6531;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6528;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 6527; Match(COMMA);
							}
						}

						State = 6530; column_based_update_set_clause();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6533;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,902,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				State = 6535; Match(VALUE);
				State = 6536; Match(LEFT_PAREN);
				State = 6537; identifier();
				State = 6538; Match(RIGHT_PAREN);
				State = 6539; Match(EQUALS_OP);
				State = 6540; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_based_update_set_clauseContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_based_update_set_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_based_update_set_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_based_update_set_clauseContext column_based_update_set_clause() {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(Context, State);
		EnterRule(_localctx, 822, RULE_column_based_update_set_clause);
		try {
			State = 6552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6544; column_name();
				State = 6545; Match(EQUALS_OP);
				State = 6546; expression();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6548; paren_column_list();
				State = 6549; Match(EQUALS_OP);
				State = 6550; subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_statementContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delete_statementContext delete_statement() {
		Delete_statementContext _localctx = new Delete_statementContext(Context, State);
		EnterRule(_localctx, 824, RULE_delete_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6554; Match(DELETE);
			State = 6556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 6555; Match(FROM);
				}
			}

			State = 6558; general_table_ref();
			State = 6560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6559; where_clause();
				}
			}

			State = 6563;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,907,Context) ) {
			case 1:
				{
				State = 6562; static_returning_clause();
				}
				break;
			}
			State = 6566;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,908,Context) ) {
			case 1:
				{
				State = 6565; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_statementContext : ParserRuleContext {
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return GetRuleContext<Single_table_insertContext>(0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return GetRuleContext<Multi_table_insertContext>(0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_statementContext insert_statement() {
		Insert_statementContext _localctx = new Insert_statementContext(Context, State);
		EnterRule(_localctx, 826, RULE_insert_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6568; Match(INSERT);
			State = 6571;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTO:
				{
				State = 6569; single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				State = 6570; multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_table_insertContext : ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return GetRuleContext<Insert_into_clauseContext>(0);
		}
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return GetRuleContext<Static_returning_clauseContext>(0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_table_insert; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_table_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_table_insertContext single_table_insert() {
		Single_table_insertContext _localctx = new Single_table_insertContext(Context, State);
		EnterRule(_localctx, 828, RULE_single_table_insert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6573; insert_into_clause();
			State = 6579;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES:
				{
				State = 6574; values_clause();
				State = 6576;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,910,Context) ) {
				case 1:
					{
					State = 6575; static_returning_clause();
					}
					break;
				}
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				State = 6578; select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,912,Context) ) {
			case 1:
				{
				State = 6581; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_table_insertContext : ParserRuleContext {
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return GetRuleContext<Conditional_insert_clauseContext>(0);
		}
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_table_insert; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_table_insert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_table_insertContext multi_table_insert() {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(Context, State);
		EnterRule(_localctx, 830, RULE_multi_table_insert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6591;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,914,Context) ) {
			case 1:
				{
				State = 6584; Match(ALL);
				State = 6586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6585; multi_table_element();
					}
					}
					State = 6588;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				State = 6590; conditional_insert_clause();
				}
				break;
			}
			State = 6593; select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_table_elementContext : ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return GetRuleContext<Insert_into_clauseContext>(0);
		}
		public Values_clauseContext values_clause() {
			return GetRuleContext<Values_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_table_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_table_elementContext multi_table_element() {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(Context, State);
		EnterRule(_localctx, 832, RULE_multi_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6595; insert_into_clause();
			State = 6597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VALUES) {
				{
				State = 6596; values_clause();
				}
			}

			State = 6600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOG) {
				{
				State = 6599; error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_clauseContext : ParserRuleContext {
		public Conditional_insert_when_partContext[] conditional_insert_when_part() {
			return GetRuleContexts<Conditional_insert_when_partContext>();
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return GetRuleContext<Conditional_insert_when_partContext>(i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return GetRuleContext<Conditional_insert_else_partContext>(0);
		}
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_clauseContext conditional_insert_clause() {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(Context, State);
		EnterRule(_localctx, 834, RULE_conditional_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				State = 6602;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6605; conditional_insert_when_part();
				}
				}
				State = 6608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 6611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 6610; conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_when_partContext conditional_insert_when_part() {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(Context, State);
		EnterRule(_localctx, 836, RULE_conditional_insert_when_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6613; Match(WHEN);
			State = 6614; condition();
			State = 6615; Match(THEN);
			State = 6617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6616; multi_table_element();
				}
				}
				State = 6619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_insert_else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PlSqlParser.ELSE, 0); }
		public Multi_table_elementContext[] multi_table_element() {
			return GetRuleContexts<Multi_table_elementContext>();
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return GetRuleContext<Multi_table_elementContext>(i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_insert_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_insert_else_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_insert_else_partContext conditional_insert_else_part() {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(Context, State);
		EnterRule(_localctx, 838, RULE_conditional_insert_else_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6621; Match(ELSE);
			State = 6623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6622; multi_table_element();
				}
				}
				State = 6625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_into_clauseContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return GetRuleContext<General_table_refContext>(0);
		}
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_into_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsert_into_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Insert_into_clauseContext insert_into_clause() {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(Context, State);
		EnterRule(_localctx, 840, RULE_insert_into_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6627; Match(INTO);
			State = 6628; general_table_ref();
			State = 6630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,922,Context) ) {
			case 1:
				{
				State = 6629; paren_column_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Values_clauseContext : ParserRuleContext {
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValues_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Values_clauseContext values_clause() {
		Values_clauseContext _localctx = new Values_clauseContext(Context, State);
		EnterRule(_localctx, 842, RULE_values_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6632; Match(VALUES);
			State = 6633; Match(LEFT_PAREN);
			State = 6635;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
				{
				State = 6634; expressions();
				}
			}

			State = 6637; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_statementContext : ParserRuleContext {
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return GetRuleContext<Selected_tableviewContext>(0);
		}
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return GetRuleContext<Merge_update_clauseContext>(0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return GetRuleContext<Merge_insert_clauseContext>(0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return GetRuleContext<Error_logging_clauseContext>(0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_statementContext merge_statement() {
		Merge_statementContext _localctx = new Merge_statementContext(Context, State);
		EnterRule(_localctx, 844, RULE_merge_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6639; Match(MERGE);
			State = 6640; Match(INTO);
			State = 6641; tableview_name();
			State = 6643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (NATIONAL_CHAR_STRING_LIT - 713)) | (1L << (CHAR_STRING - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 6642; table_alias();
				}
			}

			State = 6645; Match(USING);
			State = 6646; selected_tableview();
			State = 6647; Match(ON);
			State = 6648; Match(LEFT_PAREN);
			State = 6649; condition();
			State = 6650; Match(RIGHT_PAREN);
			State = 6659;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
			case 1:
				{
				State = 6651; merge_update_clause();
				State = 6653;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 6652; merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				State = 6655; merge_insert_clause();
				State = 6657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 6656; merge_update_clause();
					}
				}

				}
				break;
			}
			State = 6662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,928,Context) ) {
			case 1:
				{
				State = 6661; error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ITerminalNode MATCHED() { return GetToken(PlSqlParser.MATCHED, 0); }
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Merge_elementContext[] merge_element() {
			return GetRuleContexts<Merge_elementContext>();
		}
		public Merge_elementContext merge_element(int i) {
			return GetRuleContext<Merge_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return GetRuleContext<Merge_update_delete_partContext>(0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_clauseContext merge_update_clause() {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(Context, State);
		EnterRule(_localctx, 846, RULE_merge_update_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6664; Match(WHEN);
			State = 6665; Match(MATCHED);
			State = 6666; Match(THEN);
			State = 6667; Match(UPDATE);
			State = 6668; Match(SET);
			State = 6669; merge_element();
			State = 6674;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,929,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6670; Match(COMMA);
					State = 6671; merge_element();
					}
					} 
				}
				State = 6676;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,929,Context);
			}
			State = 6678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6677; where_clause();
				}
			}

			State = 6681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
			case 1:
				{
				State = 6680; merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_elementContext : ParserRuleContext {
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_elementContext merge_element() {
		Merge_elementContext _localctx = new Merge_elementContext(Context, State);
		EnterRule(_localctx, 848, RULE_merge_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6683; column_name();
			State = 6684; Match(EQUALS_OP);
			State = 6685; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_update_delete_partContext : ParserRuleContext {
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_update_delete_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_update_delete_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_update_delete_partContext merge_update_delete_part() {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(Context, State);
		EnterRule(_localctx, 850, RULE_merge_update_delete_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6687; Match(DELETE);
			State = 6688; where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Merge_insert_clauseContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode MATCHED() { return GetToken(PlSqlParser.MATCHED, 0); }
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_merge_insert_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMerge_insert_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Merge_insert_clauseContext merge_insert_clause() {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(Context, State);
		EnterRule(_localctx, 852, RULE_merge_insert_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6690; Match(WHEN);
			State = 6691; Match(NOT);
			State = 6692; Match(MATCHED);
			State = 6693; Match(THEN);
			State = 6694; Match(INSERT);
			State = 6696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LEFT_PAREN) {
				{
				State = 6695; paren_column_list();
				}
			}

			State = 6698; Match(VALUES);
			State = 6699; Match(LEFT_PAREN);
			State = 6701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
				{
				State = 6700; expressions();
				}
			}

			State = 6703; Match(RIGHT_PAREN);
			State = 6705;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 6704; where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selected_tableviewContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selected_tableview; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelected_tableview(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selected_tableviewContext selected_tableview() {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(Context, State);
		EnterRule(_localctx, 854, RULE_selected_tableview);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6712;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 6707; tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				State = 6708; Match(LEFT_PAREN);
				State = 6709; select_statement();
				State = 6710; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (NATIONAL_CHAR_STRING_LIT - 713)) | (1L << (CHAR_STRING - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 6714; table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_table_statementContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(PlSqlParser.LOCK, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public Lock_table_elementContext[] lock_table_element() {
			return GetRuleContexts<Lock_table_elementContext>();
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return GetRuleContext<Lock_table_elementContext>(i);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return GetRuleContext<Lock_modeContext>(0);
		}
		public ITerminalNode MODE() { return GetToken(PlSqlParser.MODE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Wait_nowait_partContext wait_nowait_part() {
			return GetRuleContext<Wait_nowait_partContext>(0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_table_statementContext lock_table_statement() {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(Context, State);
		EnterRule(_localctx, 856, RULE_lock_table_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6717; Match(LOCK);
			State = 6718; Match(TABLE);
			State = 6719; lock_table_element();
			State = 6724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6720; Match(COMMA);
				State = 6721; lock_table_element();
				}
				}
				State = 6726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6727; Match(IN);
			State = 6728; lock_mode();
			State = 6729; Match(MODE);
			State = 6731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,938,Context) ) {
			case 1:
				{
				State = 6730; wait_nowait_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Wait_nowait_partContext : ParserRuleContext {
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode NOWAIT() { return GetToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wait_nowait_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWait_nowait_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Wait_nowait_partContext wait_nowait_part() {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(Context, State);
		EnterRule(_localctx, 858, RULE_wait_nowait_part);
		try {
			State = 6736;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6733; Match(WAIT);
				State = 6734; expression();
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6735; Match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_table_elementContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return GetRuleContext<Partition_extension_clauseContext>(0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_table_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_table_elementContext lock_table_element() {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(Context, State);
		EnterRule(_localctx, 860, RULE_lock_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6738; tableview_name();
			State = 6740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				State = 6739; partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_modeContext : ParserRuleContext {
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode SHARE() { return GetToken(PlSqlParser.SHARE, 0); }
		public ITerminalNode EXCLUSIVE() { return GetToken(PlSqlParser.EXCLUSIVE, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_mode; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_mode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_modeContext lock_mode() {
		Lock_modeContext _localctx = new Lock_modeContext(Context, State);
		EnterRule(_localctx, 862, RULE_lock_mode);
		int _la;
		try {
			State = 6754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6742; Match(ROW);
				State = 6743; Match(SHARE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6744; Match(ROW);
				State = 6745; Match(EXCLUSIVE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6746; Match(SHARE);
				State = 6748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UPDATE) {
					{
					State = 6747; Match(UPDATE);
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6750; Match(SHARE);
				State = 6751; Match(ROW);
				State = 6752; Match(EXCLUSIVE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6753; Match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_table_refContext : ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return GetRuleContext<Dml_table_expression_clauseContext>(0);
		}
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_table_ref; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_table_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_table_refContext general_table_ref() {
		General_table_refContext _localctx = new General_table_refContext(Context, State);
		EnterRule(_localctx, 864, RULE_general_table_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
			case 1:
				{
				State = 6756; dml_table_expression_clause();
				}
				break;
			case 2:
				{
				State = 6757; Match(ONLY);
				State = 6758; Match(LEFT_PAREN);
				State = 6759; dml_table_expression_clause();
				State = 6760; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 6765;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
			case 1:
				{
				State = 6764; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_returning_clauseContext : ParserRuleContext {
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Into_clauseContext into_clause() {
			return GetRuleContext<Into_clauseContext>(0);
		}
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_returning_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_returning_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_returning_clauseContext static_returning_clause() {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(Context, State);
		EnterRule(_localctx, 866, RULE_static_returning_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6767;
			_la = TokenStream.LA(1);
			if ( !(_la==RETURNING || _la==RETURN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6768; expressions();
			State = 6769; into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_clauseContext : ParserRuleContext {
		public ITerminalNode LOG() { return GetToken(PlSqlParser.LOG, 0); }
		public ITerminalNode ERRORS() { return GetToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return GetRuleContext<Error_logging_into_partContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return GetRuleContext<Error_logging_reject_partContext>(0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_clauseContext error_logging_clause() {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(Context, State);
		EnterRule(_localctx, 868, RULE_error_logging_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6771; Match(LOG);
			State = 6772; Match(ERRORS);
			State = 6774;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,945,Context) ) {
			case 1:
				{
				State = 6773; error_logging_into_part();
				}
				break;
			}
			State = 6777;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,946,Context) ) {
			case 1:
				{
				State = 6776; expression();
				}
				break;
			}
			State = 6780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
			case 1:
				{
				State = 6779; error_logging_reject_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_into_partContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_into_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_into_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_into_partContext error_logging_into_part() {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(Context, State);
		EnterRule(_localctx, 870, RULE_error_logging_into_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6782; Match(INTO);
			State = 6783; tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_logging_reject_partContext : ParserRuleContext {
		public ITerminalNode REJECT() { return GetToken(PlSqlParser.REJECT, 0); }
		public ITerminalNode LIMIT() { return GetToken(PlSqlParser.LIMIT, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_logging_reject_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_logging_reject_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_logging_reject_partContext error_logging_reject_part() {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(Context, State);
		EnterRule(_localctx, 872, RULE_error_logging_reject_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6785; Match(REJECT);
			State = 6786; Match(LIMIT);
			State = 6789;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,948,Context) ) {
			case 1:
				{
				State = 6787; Match(UNLIMITED);
				}
				break;
			case 2:
				{
				State = 6788; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dml_table_expression_clauseContext : ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return GetRuleContext<Table_collection_expressionContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return GetRuleContext<Subquery_restriction_clauseContext>(0);
		}
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public Sample_clauseContext sample_clause() {
			return GetRuleContext<Sample_clauseContext>(0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dml_table_expression_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDml_table_expression_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dml_table_expression_clauseContext dml_table_expression_clause() {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(Context, State);
		EnterRule(_localctx, 874, RULE_dml_table_expression_clause);
		int _la;
		try {
			State = 6803;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLE:
			case THE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6791; table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6792; Match(LEFT_PAREN);
				State = 6793; select_statement();
				State = 6795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 6794; subquery_restriction_clause();
					}
				}

				State = 6797; Match(RIGHT_PAREN);
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6799; tableview_name();
				State = 6801;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
				case 1:
					{
					State = 6800; sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_collection_expressionContext : ParserRuleContext {
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode THE() { return GetToken(PlSqlParser.THE, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS_SIGN() { return GetToken(PlSqlParser.PLUS_SIGN, 0); }
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_collection_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_collection_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_collection_expressionContext table_collection_expression() {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(Context, State);
		EnterRule(_localctx, 876, RULE_table_collection_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6805;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6818;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,953,Context) ) {
			case 1:
				{
				State = 6806; Match(LEFT_PAREN);
				State = 6807; subquery();
				State = 6808; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 6810; Match(LEFT_PAREN);
				State = 6811; expression();
				State = 6812; Match(RIGHT_PAREN);
				State = 6816;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,952,Context) ) {
				case 1:
					{
					State = 6813; Match(LEFT_PAREN);
					State = 6814; Match(PLUS_SIGN);
					State = 6815; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subquery_restriction_clauseContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode CHECK() { return GetToken(PlSqlParser.CHECK, 0); }
		public ITerminalNode OPTION() { return GetToken(PlSqlParser.OPTION, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return GetRuleContext<Constraint_nameContext>(0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery_restriction_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery_restriction_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subquery_restriction_clauseContext subquery_restriction_clause() {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(Context, State);
		EnterRule(_localctx, 878, RULE_subquery_restriction_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6820; Match(WITH);
			State = 6829;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				{
				State = 6821; Match(READ);
				State = 6822; Match(ONLY);
				}
				break;
			case CHECK:
				{
				State = 6823; Match(CHECK);
				State = 6824; Match(OPTION);
				State = 6827;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 6825; Match(CONSTRAINT);
					State = 6826; constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sample_clauseContext : ParserRuleContext {
		public ITerminalNode SAMPLE() { return GetToken(PlSqlParser.SAMPLE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode BLOCK() { return GetToken(PlSqlParser.BLOCK, 0); }
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public Seed_partContext seed_part() {
			return GetRuleContext<Seed_partContext>(0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sample_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSample_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sample_clauseContext sample_clause() {
		Sample_clauseContext _localctx = new Sample_clauseContext(Context, State);
		EnterRule(_localctx, 880, RULE_sample_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6831; Match(SAMPLE);
			State = 6833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BLOCK) {
				{
				State = 6832; Match(BLOCK);
				}
			}

			State = 6835; Match(LEFT_PAREN);
			State = 6836; expression();
			State = 6839;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6837; Match(COMMA);
				State = 6838; expression();
				}
			}

			State = 6841; Match(RIGHT_PAREN);
			State = 6843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,958,Context) ) {
			case 1:
				{
				State = 6842; seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Seed_partContext : ParserRuleContext {
		public ITerminalNode SEED() { return GetToken(PlSqlParser.SEED, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Seed_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seed_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeed_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Seed_partContext seed_part() {
		Seed_partContext _localctx = new Seed_partContext(Context, State);
		EnterRule(_localctx, 882, RULE_seed_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6845; Match(SEED);
			State = 6846; Match(LEFT_PAREN);
			State = 6847; expression();
			State = 6848; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 884, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6850; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 886, RULE_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6852; expression();
			State = 6857;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,959,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6853; Match(COMMA);
					State = 6854; expression();
					}
					} 
				}
				State = 6859;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,959,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return GetRuleContext<Cursor_expressionContext>(0);
		}
		public Logical_expressionContext logical_expression() {
			return GetRuleContext<Logical_expressionContext>(0);
		}
		public ITerminalNode VARIABLE_SESSION() { return GetToken(PlSqlParser.VARIABLE_SESSION, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 888, RULE_expression);
		try {
			State = 6863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6860; cursor_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6861; logical_expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6862; Match(VARIABLE_SESSION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_expressionContext : ParserRuleContext {
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_expressionContext cursor_expression() {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(Context, State);
		EnterRule(_localctx, 890, RULE_cursor_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6865; Match(CURSOR);
			State = 6866; Match(LEFT_PAREN);
			State = 6867; subquery();
			State = 6868; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_expressionContext : ParserRuleContext {
		public Type_specContext type_spec1;
		public Multiset_expressionContext multiset_expression() {
			return GetRuleContext<Multiset_expressionContext>(0);
		}
		public ITerminalNode[] IS() { return GetTokens(PlSqlParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(PlSqlParser.IS, i);
		}
		public ITerminalNode[] NULL() { return GetTokens(PlSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(PlSqlParser.NULL, i);
		}
		public ITerminalNode[] NAN() { return GetTokens(PlSqlParser.NAN); }
		public ITerminalNode NAN(int i) {
			return GetToken(PlSqlParser.NAN, i);
		}
		public ITerminalNode[] PRESENT() { return GetTokens(PlSqlParser.PRESENT); }
		public ITerminalNode PRESENT(int i) {
			return GetToken(PlSqlParser.PRESENT, i);
		}
		public ITerminalNode[] INFINITE() { return GetTokens(PlSqlParser.INFINITE); }
		public ITerminalNode INFINITE(int i) {
			return GetToken(PlSqlParser.INFINITE, i);
		}
		public ITerminalNode[] A_LETTER() { return GetTokens(PlSqlParser.A_LETTER); }
		public ITerminalNode A_LETTER(int i) {
			return GetToken(PlSqlParser.A_LETTER, i);
		}
		public ITerminalNode[] SET() { return GetTokens(PlSqlParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(PlSqlParser.SET, i);
		}
		public ITerminalNode[] EMPTY() { return GetTokens(PlSqlParser.EMPTY); }
		public ITerminalNode EMPTY(int i) {
			return GetToken(PlSqlParser.EMPTY, i);
		}
		public ITerminalNode[] OF() { return GetTokens(PlSqlParser.OF); }
		public ITerminalNode OF(int i) {
			return GetToken(PlSqlParser.OF, i);
		}
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode[] NOT() { return GetTokens(PlSqlParser.NOT); }
		public ITerminalNode NOT(int i) {
			return GetToken(PlSqlParser.NOT, i);
		}
		public Type_specContext[] type_spec() {
			return GetRuleContexts<Type_specContext>();
		}
		public Type_specContext type_spec(int i) {
			return GetRuleContext<Type_specContext>(i);
		}
		public ITerminalNode[] TYPE() { return GetTokens(PlSqlParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(PlSqlParser.TYPE, i);
		}
		public ITerminalNode[] ONLY() { return GetTokens(PlSqlParser.ONLY); }
		public ITerminalNode ONLY(int i) {
			return GetToken(PlSqlParser.ONLY, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Logical_expressionContext[] logical_expression() {
			return GetRuleContexts<Logical_expressionContext>();
		}
		public Logical_expressionContext logical_expression(int i) {
			return GetRuleContext<Logical_expressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(PlSqlParser.OR, 0); }
		public Logical_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_expressionContext logical_expression() {
		return logical_expression(0);
	}

	private Logical_expressionContext logical_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_expressionContext _localctx = new Logical_expressionContext(Context, _parentState);
		Logical_expressionContext _prevctx = _localctx;
		int _startState = 892;
		EnterRecursionRule(_localctx, 892, RULE_logical_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6910;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 6871; multiset_expression();
				State = 6905;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,966,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6872; Match(IS);
						State = 6874;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 6873; Match(NOT);
							}
						}

						State = 6901;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case NULL:
							{
							State = 6876; Match(NULL);
							}
							break;
						case NAN:
							{
							State = 6877; Match(NAN);
							}
							break;
						case PRESENT:
							{
							State = 6878; Match(PRESENT);
							}
							break;
						case INFINITE:
							{
							State = 6879; Match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							State = 6880; Match(A_LETTER);
							State = 6881; Match(SET);
							}
							break;
						case EMPTY:
							{
							State = 6882; Match(EMPTY);
							}
							break;
						case OF:
							{
							State = 6883; Match(OF);
							State = 6885;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==TYPE) {
								{
								State = 6884; Match(TYPE);
								}
							}

							State = 6887; Match(LEFT_PAREN);
							State = 6889;
							ErrorHandler.Sync(this);
							switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
							case 1:
								{
								State = 6888; Match(ONLY);
								}
								break;
							}
							State = 6891; _localctx.type_spec1 = type_spec();
							State = 6896;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 6892; Match(COMMA);
								State = 6893; type_spec();
								}
								}
								State = 6898;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							State = 6899; Match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					State = 6907;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,966,Context);
				}
				}
				break;
			case NOT:
				{
				State = 6908; Match(NOT);
				State = 6909; logical_expression(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6920;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,969,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6918;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
					case 1:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 6912;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6913; Match(AND);
						State = 6914; logical_expression(3);
						}
						break;
					case 2:
						{
						_localctx = new Logical_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expression);
						State = 6915;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6916; Match(OR);
						State = 6917; logical_expression(2);
						}
						break;
					}
					} 
				}
				State = 6922;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,969,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Multiset_expressionContext : ParserRuleContext {
		public IToken multiset_type;
		public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode SUBMULTISET() { return GetToken(PlSqlParser.SUBMULTISET, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiset_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiset_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiset_expressionContext multiset_expression() {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(Context, State);
		EnterRule(_localctx, 894, RULE_multiset_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6923; relational_expression(0);
			State = 6929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,971,Context) ) {
			case 1:
				{
				State = 6924;
				_localctx.multiset_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
					_localctx.multiset_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF) {
					{
					State = 6925; Match(OF);
					}
				}

				State = 6928; concatenation(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Relational_operatorContext op;
		public Compound_expressionContext compound_expression() {
			return GetRuleContext<Compound_expressionContext>(0);
		}
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public Relational_operatorContext relational_operator() {
			return GetRuleContext<Relational_operatorContext>(0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 896;
		EnterRecursionRule(_localctx, 896, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6932; compound_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6940;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,972,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					State = 6934;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 6935; _localctx.op = relational_operator();
					State = 6936; relational_expression(3);
					}
					} 
				}
				State = 6942;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,972,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Compound_expressionContext : ParserRuleContext {
		public ConcatenationContext concatenation1;
		public IToken like_type;
		public ConcatenationContext concatenation2;
		public ConcatenationContext concatenation3;
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return GetRuleContext<In_elementsContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return GetRuleContext<Between_elementsContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(PlSqlParser.NOT, 0); }
		public ITerminalNode LIKE() { return GetToken(PlSqlParser.LIKE, 0); }
		public ITerminalNode LIKEC() { return GetToken(PlSqlParser.LIKEC, 0); }
		public ITerminalNode LIKE2() { return GetToken(PlSqlParser.LIKE2, 0); }
		public ITerminalNode LIKE4() { return GetToken(PlSqlParser.LIKE4, 0); }
		public ITerminalNode ESCAPE() { return GetToken(PlSqlParser.ESCAPE, 0); }
		public Compound_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_expressionContext compound_expression() {
		Compound_expressionContext _localctx = new Compound_expressionContext(Context, State);
		EnterRule(_localctx, 898, RULE_compound_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6943; _localctx.concatenation1 = concatenation(0);
			State = 6959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,976,Context) ) {
			case 1:
				{
				State = 6945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6944; Match(NOT);
					}
				}

				State = 6957;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IN:
					{
					State = 6947; Match(IN);
					State = 6948; in_elements();
					}
					break;
				case BETWEEN:
					{
					State = 6949; Match(BETWEEN);
					State = 6950; between_elements();
					}
					break;
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIKE:
					{
					State = 6951;
					_localctx.like_type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (LIKE2 - 298)) | (1L << (LIKE4 - 298)) | (1L << (LIKEC - 298)) | (1L << (LIKE - 298)))) != 0)) ) {
						_localctx.like_type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6952; _localctx.concatenation2 = concatenation(0);
					State = 6955;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
					case 1:
						{
						State = 6953; Match(ESCAPE);
						State = 6954; _localctx.concatenation3 = concatenation(0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConcatenationContext : ParserRuleContext {
		public IToken op;
		public Model_expressionContext model_expression() {
			return GetRuleContext<Model_expressionContext>(0);
		}
		public ITerminalNode AT() { return GetToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return GetRuleContext<Interval_expressionContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public ITerminalNode SOLIDUS() { return GetToken(PlSqlParser.SOLIDUS, 0); }
		public ITerminalNode PLUS_SIGN() { return GetToken(PlSqlParser.PLUS_SIGN, 0); }
		public ITerminalNode MINUS_SIGN() { return GetToken(PlSqlParser.MINUS_SIGN, 0); }
		public ITerminalNode[] BAR() { return GetTokens(PlSqlParser.BAR); }
		public ITerminalNode BAR(int i) {
			return GetToken(PlSqlParser.BAR, i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_concatenation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConcatenationContext concatenation() {
		return concatenation(0);
	}

	private ConcatenationContext concatenation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConcatenationContext _localctx = new ConcatenationContext(Context, _parentState);
		ConcatenationContext _prevctx = _localctx;
		int _startState = 900;
		EnterRecursionRule(_localctx, 900, RULE_concatenation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6962; model_expression();
			State = 6971;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,978,Context) ) {
			case 1:
				{
				State = 6963; Match(AT);
				State = 6968;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LOCAL:
					{
					State = 6964; Match(LOCAL);
					}
					break;
				case TIME:
					{
					State = 6965; Match(TIME);
					State = 6966; Match(ZONE);
					State = 6967; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 6970; interval_expression();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6985;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,980,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6983;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
					case 1:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 6973;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6974;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6975; concatenation(4);
						}
						break;
					case 2:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 6976;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6977;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6978; concatenation(3);
						}
						break;
					case 3:
						{
						_localctx = new ConcatenationContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_concatenation);
						State = 6979;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6980; Match(BAR);
						State = 6981; Match(BAR);
						State = 6982; concatenation(2);
						}
						break;
					}
					} 
				}
				State = 6987;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,980,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_operatorContext : ParserRuleContext {
		public ITerminalNode NOT_EQUAL_OP() { return GetToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_operatorContext relational_operator() {
		Relational_operatorContext _localctx = new Relational_operatorContext(Context, State);
		EnterRule(_localctx, 902, RULE_relational_operator);
		int _la;
		try {
			State = 7002;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,983,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6988; Match(EQUALS_OP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6996;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NOT_EQUAL_OP:
					{
					State = 6989; Match(NOT_EQUAL_OP);
					}
					break;
				case LESS_THAN_OP:
					{
					State = 6990; Match(LESS_THAN_OP);
					State = 6991; Match(GREATER_THAN_OP);
					}
					break;
				case EXCLAMATION_OPERATOR_PART:
					{
					State = 6992; Match(EXCLAMATION_OPERATOR_PART);
					State = 6993; Match(EQUALS_OP);
					}
					break;
				case CARRET_OPERATOR_PART:
					{
					State = 6994; Match(CARRET_OPERATOR_PART);
					State = 6995; Match(EQUALS_OP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6998;
				_la = TokenStream.LA(1);
				if ( !(_la==GREATER_THAN_OP || _la==LESS_THAN_OP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS_OP) {
					{
					State = 6999; Match(EQUALS_OP);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Model_expression_elementContext model_expression_element() {
			return GetRuleContext<Model_expression_elementContext>(0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_expressionContext model_expression() {
		Model_expressionContext _localctx = new Model_expressionContext(Context, State);
		EnterRule(_localctx, 904, RULE_model_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7004; unary_expression();
			State = 7009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,984,Context) ) {
			case 1:
				{
				State = 7005; Match(LEFT_BRACKET);
				State = 7006; model_expression_element();
				State = 7007; Match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_elementsContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_elementsContext in_elements() {
		In_elementsContext _localctx = new In_elementsContext(Context, State);
		EnterRule(_localctx, 906, RULE_in_elements);
		int _la;
		try {
			State = 7029;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,986,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7011; Match(LEFT_PAREN);
				State = 7012; subquery();
				State = 7013; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7015; Match(LEFT_PAREN);
				State = 7016; concatenation(0);
				State = 7021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7017; Match(COMMA);
					State = 7018; concatenation(0);
					}
					}
					State = 7023;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7024; Match(RIGHT_PAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7026; constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7027; bind_variable();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7028; general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_elementsContext : ParserRuleContext {
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_elementsContext between_elements() {
		Between_elementsContext _localctx = new Between_elementsContext(Context, State);
		EnterRule(_localctx, 908, RULE_between_elements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7031; concatenation(0);
			State = 7032; Match(AND);
			State = 7033; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interval_expressionContext : ParserRuleContext {
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interval_expressionContext interval_expression() {
		Interval_expressionContext _localctx = new Interval_expressionContext(Context, State);
		EnterRule(_localctx, 910, RULE_interval_expression);
		int _la;
		try {
			State = 7059;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7035; Match(DAY);
				State = 7040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 7036; Match(LEFT_PAREN);
					State = 7037; concatenation(0);
					State = 7038; Match(RIGHT_PAREN);
					}
				}

				State = 7042; Match(TO);
				State = 7043; Match(SECOND);
				State = 7048;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,988,Context) ) {
				case 1:
					{
					State = 7044; Match(LEFT_PAREN);
					State = 7045; concatenation(0);
					State = 7046; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7050; Match(YEAR);
				State = 7055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 7051; Match(LEFT_PAREN);
					State = 7052; concatenation(0);
					State = 7053; Match(RIGHT_PAREN);
					}
				}

				State = 7057; Match(TO);
				State = 7058; Match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_expression_elementContext : ParserRuleContext {
		public ITerminalNode[] ANY() { return GetTokens(PlSqlParser.ANY); }
		public ITerminalNode ANY(int i) {
			return GetToken(PlSqlParser.ANY, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Single_column_for_loopContext[] single_column_for_loop() {
			return GetRuleContexts<Single_column_for_loopContext>();
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return GetRuleContext<Single_column_for_loopContext>(i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return GetRuleContext<Multi_column_for_loopContext>(0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_expression_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_expression_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_expression_elementContext model_expression_element() {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(Context, State);
		EnterRule(_localctx, 912, RULE_model_expression_element);
		int _la;
		try {
			State = 7084;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7063;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
				case 1:
					{
					State = 7061; Match(ANY);
					}
					break;
				case 2:
					{
					State = 7062; expression();
					}
					break;
				}
				State = 7072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7065; Match(COMMA);
					State = 7068;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,992,Context) ) {
					case 1:
						{
						State = 7066; Match(ANY);
						}
						break;
					case 2:
						{
						State = 7067; expression();
						}
						break;
					}
					}
					}
					State = 7074;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7075; single_column_for_loop();
				State = 7080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7076; Match(COMMA);
					State = 7077; single_column_for_loop();
					}
					}
					State = 7082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7083; multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_column_for_loopContext : ParserRuleContext {
		public ExpressionContext fromExpr;
		public ExpressionContext toExpr;
		public IToken action_type;
		public ExpressionContext action_expr;
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INCREMENT() { return GetToken(PlSqlParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(PlSqlParser.DECREMENT, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(PlSqlParser.LIKE, 0); }
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_column_for_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_column_for_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_column_for_loopContext single_column_for_loop() {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(Context, State);
		EnterRule(_localctx, 914, RULE_single_column_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7086; Match(FOR);
			State = 7087; column_name();
			State = 7105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
				{
				State = 7088; Match(IN);
				State = 7089; Match(LEFT_PAREN);
				State = 7091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
					{
					State = 7090; expressions();
					}
				}

				State = 7093; Match(RIGHT_PAREN);
				}
				break;
			case FROM:
			case LIKE:
				{
				State = 7096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE) {
					{
					State = 7094; Match(LIKE);
					State = 7095; expression();
					}
				}

				State = 7098; Match(FROM);
				State = 7099; _localctx.fromExpr = expression();
				State = 7100; Match(TO);
				State = 7101; _localctx.toExpr = expression();
				State = 7102;
				_localctx.action_type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DECREMENT || _la==INCREMENT) ) {
					_localctx.action_type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7103; _localctx.action_expr = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_column_for_loopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public Paren_column_listContext paren_column_list() {
			return GetRuleContext<Paren_column_listContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_column_for_loop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_column_for_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_column_for_loopContext multi_column_for_loop() {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(Context, State);
		EnterRule(_localctx, 916, RULE_multi_column_for_loop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7107; Match(FOR);
			State = 7108; paren_column_list();
			State = 7109; Match(IN);
			State = 7110; Match(LEFT_PAREN);
			State = 7117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
			case 1:
				{
				State = 7111; subquery();
				}
				break;
			case 2:
				{
				State = 7112; Match(LEFT_PAREN);
				State = 7114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
					{
					State = 7113; expressions();
					}
				}

				State = 7116; Match(RIGHT_PAREN);
				}
				break;
			}
			State = 7119; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode MINUS_SIGN() { return GetToken(PlSqlParser.MINUS_SIGN, 0); }
		public ITerminalNode PLUS_SIGN() { return GetToken(PlSqlParser.PLUS_SIGN, 0); }
		public ITerminalNode PRIOR() { return GetToken(PlSqlParser.PRIOR, 0); }
		public ITerminalNode CONNECT_BY_ROOT() { return GetToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public Standard_functionContext standard_function() {
			return GetRuleContext<Standard_functionContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(PlSqlParser.NEW, 0); }
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return GetRuleContext<Case_statementContext>(0);
		}
		public Quantified_expressionContext quantified_expression() {
			return GetRuleContext<Quantified_expressionContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 918, RULE_unary_expression);
		int _la;
		try {
			State = 7137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1001,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7121;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7122; unary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7123; Match(PRIOR);
				State = 7124; unary_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7125; Match(CONNECT_BY_ROOT);
				State = 7126; unary_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7127; standard_function();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7128; Match(NEW);
				State = 7129; unary_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7130; Match(DISTINCT);
				State = 7131; unary_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7132; Match(ALL);
				State = 7133; unary_expression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7134; case_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7135; quantified_expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7136; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_statementContext : ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return GetRuleContext<Searched_case_statementContext>(0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return GetRuleContext<Simple_case_statementContext>(0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_statementContext case_statement() {
		Case_statementContext _localctx = new Case_statementContext(Context, State);
		EnterRule(_localctx, 920, RULE_case_statement);
		try {
			State = 7141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7139; searched_case_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7140; simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_case_statementContext : ParserRuleContext {
		public IToken ck1;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode[] CASE() { return GetTokens(PlSqlParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(PlSqlParser.CASE, i);
		}
		public Label_nameContext[] label_name() {
			return GetRuleContexts<Label_nameContext>();
		}
		public Label_nameContext label_name(int i) {
			return GetRuleContext<Label_nameContext>(i);
		}
		public Simple_case_when_partContext[] simple_case_when_part() {
			return GetRuleContexts<Simple_case_when_partContext>();
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return GetRuleContext<Simple_case_when_partContext>(i);
		}
		public Case_else_partContext case_else_part() {
			return GetRuleContext<Case_else_partContext>(0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_case_statementContext simple_case_statement() {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(Context, State);
		EnterRule(_localctx, 922, RULE_simple_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 7143; label_name();
				}
			}

			State = 7146; _localctx.ck1 = Match(CASE);
			State = 7147; expression();
			State = 7149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7148; simple_case_when_part();
				}
				}
				State = 7151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 7154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 7153; case_else_part();
				}
			}

			State = 7156; Match(END);
			State = 7158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
			case 1:
				{
				State = 7157; Match(CASE);
				}
				break;
			}
			State = 7161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1007,Context) ) {
			case 1:
				{
				State = 7160; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_case_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_case_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_case_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_case_when_partContext simple_case_when_part() {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(Context, State);
		EnterRule(_localctx, 924, RULE_simple_case_when_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7163; Match(WHEN);
			State = 7164; expression();
			State = 7165; Match(THEN);
			State = 7168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1008,Context) ) {
			case 1:
				{
				State = 7166; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 7167; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_case_statementContext : ParserRuleContext {
		public IToken ck1;
		public ITerminalNode END() { return GetToken(PlSqlParser.END, 0); }
		public ITerminalNode[] CASE() { return GetTokens(PlSqlParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(PlSqlParser.CASE, i);
		}
		public Label_nameContext[] label_name() {
			return GetRuleContexts<Label_nameContext>();
		}
		public Label_nameContext label_name(int i) {
			return GetRuleContext<Label_nameContext>(i);
		}
		public Searched_case_when_partContext[] searched_case_when_part() {
			return GetRuleContexts<Searched_case_when_partContext>();
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return GetRuleContext<Searched_case_when_partContext>(i);
		}
		public Case_else_partContext case_else_part() {
			return GetRuleContext<Case_else_partContext>(0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_case_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_case_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_case_statementContext searched_case_statement() {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(Context, State);
		EnterRule(_localctx, 926, RULE_searched_case_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 7170; label_name();
				}
			}

			State = 7173; _localctx.ck1 = Match(CASE);
			State = 7175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7174; searched_case_when_part();
				}
				}
				State = 7177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 7180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 7179; case_else_part();
				}
			}

			State = 7182; Match(END);
			State = 7184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1012,Context) ) {
			case 1:
				{
				State = 7183; Match(CASE);
				}
				break;
			}
			State = 7187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1013,Context) ) {
			case 1:
				{
				State = 7186; label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Searched_case_when_partContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(PlSqlParser.WHEN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode THEN() { return GetToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searched_case_when_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearched_case_when_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Searched_case_when_partContext searched_case_when_part() {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(Context, State);
		EnterRule(_localctx, 928, RULE_searched_case_when_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7189; Match(WHEN);
			State = 7190; expression();
			State = 7191; Match(THEN);
			State = 7194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1014,Context) ) {
			case 1:
				{
				State = 7192; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 7193; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_else_partContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return GetRuleContext<Seq_of_statementsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_else_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_else_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_else_partContext case_else_part() {
		Case_else_partContext _localctx = new Case_else_partContext(Context, State);
		EnterRule(_localctx, 930, RULE_case_else_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7196; Match(ELSE);
			State = 7199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1015,Context) ) {
			case 1:
				{
				State = 7197; seq_of_statements();
				}
				break;
			case 2:
				{
				State = 7198; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public Outer_join_signContext outer_join_sign() {
			return GetRuleContext<Outer_join_signContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Subquery_operation_partContext[] subquery_operation_part() {
			return GetRuleContexts<Subquery_operation_partContext>();
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return GetRuleContext<Subquery_operation_partContext>(i);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 932, RULE_atom);
		try {
			int _alt;
			State = 7220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1017,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7201; table_element();
				State = 7202; outer_join_sign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7204; bind_variable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7205; constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7206; general_element();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7207; Match(LEFT_PAREN);
				State = 7208; subquery();
				State = 7209; Match(RIGHT_PAREN);
				State = 7213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1016,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7210; subquery_operation_part();
						}
						} 
					}
					State = 7215;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1016,Context);
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7216; Match(LEFT_PAREN);
				State = 7217; expressions();
				State = 7218; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Quantified_expressionContext : ParserRuleContext {
		public ITerminalNode SOME() { return GetToken(PlSqlParser.SOME, 0); }
		public ITerminalNode EXISTS() { return GetToken(PlSqlParser.EXISTS, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode ANY() { return GetToken(PlSqlParser.ANY, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantified_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantified_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Quantified_expressionContext quantified_expression() {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(Context, State);
		EnterRule(_localctx, 934, RULE_quantified_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7222;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1018,Context) ) {
			case 1:
				{
				State = 7223; Match(LEFT_PAREN);
				State = 7224; subquery();
				State = 7225; Match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				State = 7227; Match(LEFT_PAREN);
				State = 7228; expression();
				State = 7229; Match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Standard_functionContext : ParserRuleContext {
		public String_functionContext string_function() {
			return GetRuleContext<String_functionContext>(0);
		}
		public Numeric_function_wrapperContext numeric_function_wrapper() {
			return GetRuleContext<Numeric_function_wrapperContext>(0);
		}
		public Other_functionContext other_function() {
			return GetRuleContext<Other_functionContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Standard_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standard_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Standard_functionContext standard_function() {
		Standard_functionContext _localctx = new Standard_functionContext(Context, State);
		EnterRule(_localctx, 936, RULE_standard_function);
		try {
			int _alt;
			State = 7249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1021,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7233; string_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7234; numeric_function_wrapper();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7235; other_function();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7236; id_expression();
				State = 7237; Match(LEFT_PAREN);
				State = 7238; expression();
				State = 7243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1019,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7239; Match(COMMA);
						State = 7240; expression();
						}
						} 
					}
					State = 7245;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1019,Context);
				}
				State = 7247;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1020,Context) ) {
				case 1:
					{
					State = 7246; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_functionContext : ParserRuleContext {
		public StringContext string1;
		public StringContext string2;
		public ITerminalNode SUBSTR() { return GetToken(PlSqlParser.SUBSTR, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode TO_CHAR() { return GetToken(PlSqlParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public Standard_functionContext standard_function() {
			return GetRuleContext<Standard_functionContext>(0);
		}
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ITerminalNode DECODE() { return GetToken(PlSqlParser.DECODE, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode CHR() { return GetToken(PlSqlParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(PlSqlParser.NCHAR_CS, 0); }
		public ITerminalNode TRIM() { return GetToken(PlSqlParser.TRIM, 0); }
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode LEADING() { return GetToken(PlSqlParser.LEADING, 0); }
		public ITerminalNode TRAILING() { return GetToken(PlSqlParser.TRAILING, 0); }
		public ITerminalNode BOTH() { return GetToken(PlSqlParser.BOTH, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_functionContext string_function() {
		String_functionContext _localctx = new String_functionContext(Context, State);
		EnterRule(_localctx, 938, RULE_string_function);
		int _la;
		try {
			State = 7305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUBSTR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7251; Match(SUBSTR);
				State = 7252; Match(LEFT_PAREN);
				State = 7253; expression();
				State = 7254; Match(COMMA);
				State = 7255; expression();
				State = 7258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7256; Match(COMMA);
					State = 7257; expression();
					}
				}

				State = 7260; Match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7262; Match(TO_CHAR);
				State = 7263; Match(LEFT_PAREN);
				State = 7267;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1023,Context) ) {
				case 1:
					{
					State = 7264; table_element();
					}
					break;
				case 2:
					{
					State = 7265; standard_function();
					}
					break;
				case 3:
					{
					State = 7266; expression();
					}
					break;
				}
				State = 7271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1024,Context) ) {
				case 1:
					{
					State = 7269; Match(COMMA);
					State = 7270; _localctx.string1 = @string();
					}
					break;
				}
				State = 7275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7273; Match(COMMA);
					State = 7274; _localctx.string2 = @string();
					}
				}

				State = 7277; Match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7279; Match(DECODE);
				State = 7280; Match(LEFT_PAREN);
				State = 7281; expressions();
				State = 7282; Match(RIGHT_PAREN);
				}
				break;
			case CHR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7284; Match(CHR);
				State = 7285; Match(LEFT_PAREN);
				State = 7286; concatenation(0);
				State = 7287; Match(USING);
				State = 7288; Match(NCHAR_CS);
				State = 7289; Match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7291; Match(TRIM);
				State = 7292; Match(LEFT_PAREN);
				State = 7300;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1028,Context) ) {
				case 1:
					{
					State = 7294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						State = 7293;
						_la = TokenStream.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 7297;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						State = 7296; _localctx.string1 = @string();
						}
					}

					State = 7299; Match(FROM);
					}
					break;
				}
				State = 7302; concatenation(0);
				State = 7303; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_function_wrapperContext : ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return GetRuleContext<Numeric_functionContext>(0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return GetRuleContext<Single_column_for_loopContext>(0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return GetRuleContext<Multi_column_for_loopContext>(0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function_wrapper; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function_wrapper(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_function_wrapperContext numeric_function_wrapper() {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(Context, State);
		EnterRule(_localctx, 940, RULE_numeric_function_wrapper);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7307; numeric_function();
			State = 7310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1030,Context) ) {
			case 1:
				{
				State = 7308; single_column_for_loop();
				}
				break;
			case 2:
				{
				State = 7309; multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_functionContext : ParserRuleContext {
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode ROUND() { return GetToken(PlSqlParser.ROUND, 0); }
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode MAX() { return GetToken(PlSqlParser.MAX, 0); }
		public ITerminalNode LEAST() { return GetToken(PlSqlParser.LEAST, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode GREATEST() { return GetToken(PlSqlParser.GREATEST, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_functionContext numeric_function() {
		Numeric_functionContext _localctx = new Numeric_functionContext(Context, State);
		EnterRule(_localctx, 942, RULE_numeric_function);
		int _la;
		try {
			State = 7370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7312; Match(SUM);
				State = 7313; Match(LEFT_PAREN);
				State = 7315;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1031,Context) ) {
				case 1:
					{
					State = 7314;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7317; expression();
				State = 7318; Match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7320; Match(COUNT);
				State = 7321; Match(LEFT_PAREN);
				State = 7329;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASTERISK:
					{
					State = 7322; Match(ASTERISK);
					}
					break;
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TRUNC:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 7327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (NULL - 392)) | (1L << (NULLS - 392)) | (1L << (NUMBER - 392)) | (1L << (NUMERIC - 392)) | (1L << (NVARCHAR2 - 392)) | (1L << (OBJECT - 392)) | (1L << (OFF - 392)) | (1L << (OID - 392)) | (1L << (OLD - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPERATOR - 392)) | (1L << (ORADATA - 392)) | (1L << (ORDINALITY - 392)) | (1L << (OSERROR - 392)) | (1L << (OUTER - 392)) | (1L << (OUT - 392)) | (1L << (OVER - 392)) | (1L << (OVERRIDING - 392)) | (1L << (PACKAGE - 392)) | (1L << (PARALLEL_ENABLE - 392)) | (1L << (PARAMETERS - 392)) | (1L << (PARENT - 392)) | (1L << (PARTITION - 392)) | (1L << (PASSING - 392)) | (1L << (PASSWORD - 392)) | (1L << (PATH - 392)) | (1L << (PIPELINED - 392)) | (1L << (PLAN - 392)) | (1L << (PLS_INTEGER - 392)) | (1L << (POSITIVEN - 392)) | (1L << (POSITIVE - 392)) | (1L << (PRAGMA - 392)) | (1L << (PRECEDING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PRECISION - 456)) | (1L << (PRESENT - 456)) | (1L << (PRIOR - 456)) | (1L << (PRIVILEGE - 456)) | (1L << (PROGRAM - 456)) | (1L << (RAISE - 456)) | (1L << (RANGE - 456)) | (1L << (RAW - 456)) | (1L << (READ - 456)) | (1L << (REAL - 456)) | (1L << (RECORD - 456)) | (1L << (REFERENCE - 456)) | (1L << (REFERENCING - 456)) | (1L << (REF - 456)) | (1L << (REJECT - 456)) | (1L << (RELIES_ON - 456)) | (1L << (RENAME - 456)) | (1L << (REPLACE - 456)) | (1L << (RESPECT - 456)) | (1L << (RESTRICT_REFERENCES - 456)) | (1L << (RESULT_CACHE - 456)) | (1L << (RESULT - 456)) | (1L << (RETURNING - 456)) | (1L << (RETURN - 456)) | (1L << (REUSE - 456)) | (1L << (REVERSE - 456)) | (1L << (REVOKE - 456)) | (1L << (RIGHT - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROWID - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (RULES - 456)) | (1L << (SAMPLE - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SAVEPOINT - 520)) | (1L << (SAVE - 520)) | (1L << (SCHEMACHECK - 520)) | (1L << (SCHEMA - 520)) | (1L << (SCN - 520)) | (1L << (SECOND - 520)) | (1L << (SEED - 520)) | (1L << (SEGMENT - 520)) | (1L << (SELF - 520)) | (1L << (SEQUENTIAL - 520)) | (1L << (SERIALIZABLE - 520)) | (1L << (SERIALLY_REUSABLE - 520)) | (1L << (SERVERERROR - 520)) | (1L << (SESSIONTIMEZONE - 520)) | (1L << (SET - 520)) | (1L << (SETS - 520)) | (1L << (SETTINGS - 520)) | (1L << (SHOW - 520)) | (1L << (SHUTDOWN - 520)) | (1L << (SIBLINGS - 520)) | (1L << (SIGNTYPE - 520)) | (1L << (SIMPLE_INTEGER - 520)) | (1L << (SINGLE - 520)) | (1L << (SKIP_ - 520)) | (1L << (SMALLINT - 520)) | (1L << (SNAPSHOT - 520)) | (1L << (SOME - 520)) | (1L << (SPECIFICATION - 520)) | (1L << (SQLDATA - 520)) | (1L << (SQLERROR - 520)) | (1L << (STANDALONE - 520)) | (1L << (STARTUP - 520)) | (1L << (STATEMENT_ID - 520)) | (1L << (STATEMENT - 520)) | (1L << (STATIC - 520)) | (1L << (STATISTICS - 520)) | (1L << (STORE - 520)) | (1L << (STRING - 520)) | (1L << (SUBMULTISET - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBSTITUTABLE - 520)) | (1L << (SUBTYPE - 520)) | (1L << (SUCCESS - 520)) | (1L << (SUSPEND - 520)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUE - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TRUNC - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNIQUE - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (DECODE - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (NVL - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROUND - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TO_CHAR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (LEAST - 713)) | (1L << (GREATEST - 713)) | (1L << (TO_DATE - 713)) | (1L << (NATIONAL_CHAR_STRING_LIT - 713)) | (1L << (UNSIGNED_INTEGER - 713)) | (1L << (APPROXIMATE_NUM_LIT - 713)) | (1L << (CHAR_STRING - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (LEFT_PAREN - 713)) | (1L << (PLUS_SIGN - 713)) | (1L << (MINUS_SIGN - 713)) | (1L << (BINDVAR - 713)) | (1L << (COLON - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
						{
						State = 7324;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
						case 1:
							{
							State = 7323;
							_la = TokenStream.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
								ErrorHandler.ReportMatch(this);
							    Consume();
							}
							}
							break;
						}
						State = 7326; concatenation(0);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7331; Match(RIGHT_PAREN);
				State = 7333;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1035,Context) ) {
				case 1:
					{
					State = 7332; over_clause();
					}
					break;
				}
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7335; Match(ROUND);
				State = 7336; Match(LEFT_PAREN);
				State = 7337; expression();
				State = 7340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7338; Match(COMMA);
					State = 7339; Match(UNSIGNED_INTEGER);
					}
				}

				State = 7342; Match(RIGHT_PAREN);
				}
				break;
			case AVG:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7344; Match(AVG);
				State = 7345; Match(LEFT_PAREN);
				State = 7347;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1037,Context) ) {
				case 1:
					{
					State = 7346;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7349; expression();
				State = 7350; Match(RIGHT_PAREN);
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7352; Match(MAX);
				State = 7353; Match(LEFT_PAREN);
				State = 7355;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1038,Context) ) {
				case 1:
					{
					State = 7354;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7357; expression();
				State = 7358; Match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7360; Match(LEAST);
				State = 7361; Match(LEFT_PAREN);
				State = 7362; expressions();
				State = 7363; Match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7365; Match(GREATEST);
				State = 7366; Match(LEFT_PAREN);
				State = 7367; expressions();
				State = 7368; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class To_dateContext : ParserRuleContext {
		public StringContext string1;
		public ITerminalNode TO_DATE() { return GetToken(PlSqlParser.TO_DATE, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public To_dateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_to_date; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo_date(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public To_dateContext to_date() {
		To_dateContext _localctx = new To_dateContext(Context, State);
		EnterRule(_localctx, 944, RULE_to_date);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7372; Match(TO_DATE);
			State = 7373; Match(LEFT_PAREN);
			State = 7374; expression();
			State = 7377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 7375; Match(COMMA);
				State = 7376; _localctx.string1 = @string();
				}
			}

			State = 7379; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Other_functionContext : ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return GetRuleContext<Over_clause_keywordContext>(0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return GetRuleContext<Function_argument_analyticContext>(0);
		}
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return GetRuleContext<Function_argument_modelingContext>(0);
		}
		public Using_clauseContext using_clause() {
			return GetRuleContext<Using_clauseContext>(0);
		}
		public ITerminalNode NVL() { return GetToken(PlSqlParser.NVL, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public To_dateContext to_date() {
			return GetRuleContext<To_dateContext>(0);
		}
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public ITerminalNode DISTINCT() { return GetToken(PlSqlParser.DISTINCT, 0); }
		public ITerminalNode UNIQUE() { return GetToken(PlSqlParser.UNIQUE, 0); }
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode CAST() { return GetToken(PlSqlParser.CAST, 0); }
		public ITerminalNode XMLCAST() { return GetToken(PlSqlParser.XMLCAST, 0); }
		public ITerminalNode MULTISET() { return GetToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public ITerminalNode COALESCE() { return GetToken(PlSqlParser.COALESCE, 0); }
		public Table_elementContext table_element() {
			return GetRuleContext<Table_elementContext>(0);
		}
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return GetRuleContext<Collect_order_by_partContext>(0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return GetRuleContext<Within_or_over_clause_keywordContext>(0);
		}
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public Within_or_over_partContext[] within_or_over_part() {
			return GetRuleContexts<Within_or_over_partContext>();
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return GetRuleContext<Within_or_over_partContext>(i);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ITerminalNode PERCENT_ISOPEN() { return GetToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public ITerminalNode PERCENT_FOUND() { return GetToken(PlSqlParser.PERCENT_FOUND, 0); }
		public ITerminalNode PERCENT_NOTFOUND() { return GetToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public ITerminalNode PERCENT_ROWCOUNT() { return GetToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public ITerminalNode DECOMPOSE() { return GetToken(PlSqlParser.DECOMPOSE, 0); }
		public ITerminalNode CANONICAL() { return GetToken(PlSqlParser.CANONICAL, 0); }
		public ITerminalNode COMPATIBILITY() { return GetToken(PlSqlParser.COMPATIBILITY, 0); }
		public ITerminalNode EXTRACT() { return GetToken(PlSqlParser.EXTRACT, 0); }
		public ITerminalNode FROM() { return GetToken(PlSqlParser.FROM, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(PlSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return GetRuleContext<Respect_or_ignore_nullsContext>(0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return GetRuleContext<Standard_prediction_function_keywordContext>(0);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return GetRuleContext<Cost_matrix_clauseContext>(0);
		}
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode CHAR_CS() { return GetToken(PlSqlParser.CHAR_CS, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(PlSqlParser.NCHAR_CS, 0); }
		public ITerminalNode TREAT() { return GetToken(PlSqlParser.TREAT, 0); }
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode XMLAGG() { return GetToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public General_element_partContext general_element_part() {
			return GetRuleContext<General_element_partContext>(0);
		}
		public ITerminalNode XMLCOLATTVAL() { return GetToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public ITerminalNode XMLFOREST() { return GetToken(PlSqlParser.XMLFOREST, 0); }
		public Xml_multiuse_expression_elementContext[] xml_multiuse_expression_element() {
			return GetRuleContexts<Xml_multiuse_expression_elementContext>();
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return GetRuleContext<Xml_multiuse_expression_elementContext>(i);
		}
		public ITerminalNode XMLELEMENT() { return GetToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return GetRuleContext<Xml_attributes_clauseContext>(0);
		}
		public ITerminalNode ENTITYESCAPING() { return GetToken(PlSqlParser.ENTITYESCAPING, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode EVALNAME() { return GetToken(PlSqlParser.EVALNAME, 0); }
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public ITerminalNode XMLEXISTS() { return GetToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return GetRuleContext<Xml_passing_clauseContext>(0);
		}
		public ITerminalNode XMLPARSE() { return GetToken(PlSqlParser.XMLPARSE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(PlSqlParser.DOCUMENT, 0); }
		public ITerminalNode CONTENT() { return GetToken(PlSqlParser.CONTENT, 0); }
		public ITerminalNode WELLFORMED() { return GetToken(PlSqlParser.WELLFORMED, 0); }
		public ITerminalNode XMLPI() { return GetToken(PlSqlParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode XMLQUERY() { return GetToken(PlSqlParser.XMLQUERY, 0); }
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public ITerminalNode XMLROOT() { return GetToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return GetRuleContext<Xmlroot_param_version_partContext>(0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return GetRuleContext<Xmlroot_param_standalone_partContext>(0);
		}
		public ITerminalNode XMLSERIALIZE() { return GetToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return GetRuleContext<Xmlserialize_param_enconding_partContext>(0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return GetRuleContext<Xmlserialize_param_version_partContext>(0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return GetRuleContext<Xmlserialize_param_ident_partContext>(0);
		}
		public ITerminalNode DEFAULTS() { return GetToken(PlSqlParser.DEFAULTS, 0); }
		public ITerminalNode HIDE() { return GetToken(PlSqlParser.HIDE, 0); }
		public ITerminalNode SHOW() { return GetToken(PlSqlParser.SHOW, 0); }
		public ITerminalNode XMLTABLE() { return GetToken(PlSqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return GetRuleContext<Xml_namespaces_clauseContext>(0);
		}
		public ITerminalNode COLUMNS() { return GetToken(PlSqlParser.COLUMNS, 0); }
		public Xml_table_columnContext[] xml_table_column() {
			return GetRuleContexts<Xml_table_columnContext>();
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return GetRuleContext<Xml_table_columnContext>(i);
		}
		public ITerminalNode TRUNC() { return GetToken(PlSqlParser.TRUNC, 0); }
		public Other_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOther_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Other_functionContext other_function() {
		Other_functionContext _localctx = new Other_functionContext(Context, State);
		EnterRule(_localctx, 946, RULE_other_function);
		int _la;
		try {
			int _alt;
			State = 7711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1094,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7381; over_clause_keyword();
				State = 7382; function_argument_analytic();
				State = 7384;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1041,Context) ) {
				case 1:
					{
					State = 7383; over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7386; regular_id();
				State = 7387; function_argument_modeling();
				State = 7389;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1042,Context) ) {
				case 1:
					{
					State = 7388; using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7391; Match(NVL);
				State = 7392; Match(LEFT_PAREN);
				State = 7393; expression();
				State = 7394; Match(COMMA);
				State = 7395; expression();
				State = 7396; Match(RIGHT_PAREN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7398; to_date();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7399; Match(COUNT);
				State = 7400; Match(LEFT_PAREN);
				State = 7406;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASTERISK:
					{
					State = 7401; Match(ASTERISK);
					}
					break;
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TRUNC:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 7403;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
					case 1:
						{
						State = 7402;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					State = 7405; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7408; Match(RIGHT_PAREN);
				State = 7410;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1045,Context) ) {
				case 1:
					{
					State = 7409; over_clause();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7412;
				_la = TokenStream.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7413; Match(LEFT_PAREN);
				State = 7420;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1046,Context) ) {
				case 1:
					{
					State = 7414; Match(MULTISET);
					State = 7415; Match(LEFT_PAREN);
					State = 7416; subquery();
					State = 7417; Match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					State = 7419; concatenation(0);
					}
					break;
				}
				State = 7422; Match(AS);
				State = 7423; type_spec();
				State = 7424; Match(RIGHT_PAREN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7426; Match(COALESCE);
				State = 7427; Match(LEFT_PAREN);
				State = 7428; table_element();
				State = 7434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7429; Match(COMMA);
					State = 7432;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
					case PLUS_SIGN:
						{
						State = 7430; numeric();
						}
						break;
					case NATIONAL_CHAR_STRING_LIT:
					case CHAR_STRING:
						{
						State = 7431; @string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 7436; Match(RIGHT_PAREN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7438; Match(COLLECT);
				State = 7439; Match(LEFT_PAREN);
				State = 7441;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1049,Context) ) {
				case 1:
					{
					State = 7440;
					_la = TokenStream.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7443; concatenation(0);
				State = 7445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 7444; collect_order_by_part();
					}
				}

				State = 7447; Match(RIGHT_PAREN);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7449; within_or_over_clause_keyword();
				{
				State = 7450; function_arguments();
				State = 7452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEEP) {
					{
					State = 7451; keep_clause();
					}
				}

				}
				State = 7455;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7454; within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7457;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1052,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7459; cursor_name();
				State = 7460;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (PERCENT_FOUND - 439)) | (1L << (PERCENT_ISOPEN - 439)) | (1L << (PERCENT_NOTFOUND - 439)) | (1L << (PERCENT_ROWCOUNT - 439)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7462; Match(DECOMPOSE);
				State = 7463; Match(LEFT_PAREN);
				State = 7464; concatenation(0);
				State = 7466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					State = 7465;
					_la = TokenStream.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 7468; Match(RIGHT_PAREN);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7470; Match(EXTRACT);
				State = 7471; Match(LEFT_PAREN);
				State = 7472; regular_id();
				State = 7473; Match(FROM);
				State = 7474; concatenation(0);
				State = 7475; Match(RIGHT_PAREN);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7477;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7478; function_argument_analytic();
				State = 7480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					State = 7479; respect_or_ignore_nulls();
					}
				}

				State = 7482; over_clause();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7484; standard_prediction_function_keyword();
				State = 7485; Match(LEFT_PAREN);
				State = 7486; expressions();
				State = 7488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COST) {
					{
					State = 7487; cost_matrix_clause();
					}
				}

				State = 7491;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 7490; using_clause();
					}
				}

				State = 7493; Match(RIGHT_PAREN);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7495; Match(TRANSLATE);
				State = 7496; Match(LEFT_PAREN);
				State = 7497; expression();
				State = 7500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 7498; Match(USING);
					State = 7499;
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 7506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7502; Match(COMMA);
					State = 7503; expression();
					}
					}
					State = 7508;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7509; Match(RIGHT_PAREN);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7511; Match(TRANSLATE);
				State = 7512; Match(LEFT_PAREN);
				State = 7513; expression();
				State = 7514; Match(COMMA);
				State = 7515; @string();
				State = 7516; Match(COMMA);
				State = 7517; @string();
				State = 7518; Match(RIGHT_PAREN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7520; Match(TREAT);
				State = 7521; Match(LEFT_PAREN);
				State = 7522; expression();
				State = 7523; Match(AS);
				State = 7525;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1059,Context) ) {
				case 1:
					{
					State = 7524; Match(REF);
					}
					break;
				}
				State = 7527; type_spec();
				State = 7528; Match(RIGHT_PAREN);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7530; Match(XMLAGG);
				State = 7531; Match(LEFT_PAREN);
				State = 7532; expression();
				State = 7534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 7533; order_by_clause();
					}
				}

				State = 7536; Match(RIGHT_PAREN);
				State = 7539;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1061,Context) ) {
				case 1:
					{
					State = 7537; Match(PERIOD);
					State = 7538; general_element_part();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7541;
				_la = TokenStream.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7542; Match(LEFT_PAREN);
				State = 7547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7544;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7543; Match(COMMA);
						}
					}

					State = 7546; xml_multiuse_expression_element();
					}
					}
					State = 7549;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID );
				State = 7551; Match(RIGHT_PAREN);
				State = 7554;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
				case 1:
					{
					State = 7552; Match(PERIOD);
					State = 7553; general_element_part();
					}
					break;
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7556; Match(XMLELEMENT);
				State = 7557; Match(LEFT_PAREN);
				State = 7559;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1065,Context) ) {
				case 1:
					{
					State = 7558;
					_la = TokenStream.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7562;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1066,Context) ) {
				case 1:
					{
					State = 7561;
					_la = TokenStream.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7564; expression();
				State = 7567;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1067,Context) ) {
				case 1:
					{
					State = 7565; Match(COMMA);
					State = 7566; xml_attributes_clause();
					}
					break;
				}
				State = 7576;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7569; Match(COMMA);
					State = 7570; expression();
					State = 7572;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (NATIONAL_CHAR_STRING_LIT - 713)) | (1L << (CHAR_STRING - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
						{
						State = 7571; column_alias();
						}
					}

					}
					}
					State = 7578;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7579; Match(RIGHT_PAREN);
				State = 7582;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1070,Context) ) {
				case 1:
					{
					State = 7580; Match(PERIOD);
					State = 7581; general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7584; Match(XMLEXISTS);
				State = 7585; Match(LEFT_PAREN);
				State = 7586; expression();
				State = 7588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 7587; xml_passing_clause();
					}
				}

				State = 7590; Match(RIGHT_PAREN);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7592; Match(XMLPARSE);
				State = 7593; Match(LEFT_PAREN);
				State = 7594;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7595; concatenation(0);
				State = 7597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WELLFORMED) {
					{
					State = 7596; Match(WELLFORMED);
					}
				}

				State = 7599; Match(RIGHT_PAREN);
				State = 7602;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1073,Context) ) {
				case 1:
					{
					State = 7600; Match(PERIOD);
					State = 7601; general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7604; Match(XMLPI);
				State = 7605; Match(LEFT_PAREN);
				State = 7610;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAME:
					{
					State = 7606; Match(NAME);
					State = 7607; identifier();
					}
					break;
				case EVALNAME:
					{
					State = 7608; Match(EVALNAME);
					State = 7609; concatenation(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7612; Match(COMMA);
					State = 7613; concatenation(0);
					}
				}

				State = 7616; Match(RIGHT_PAREN);
				State = 7619;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1076,Context) ) {
				case 1:
					{
					State = 7617; Match(PERIOD);
					State = 7618; general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 7621; Match(XMLQUERY);
				State = 7622; Match(LEFT_PAREN);
				State = 7623; concatenation(0);
				State = 7625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 7624; xml_passing_clause();
					}
				}

				State = 7627; Match(RETURNING);
				State = 7628; Match(CONTENT);
				State = 7632;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NULL) {
					{
					State = 7629; Match(NULL);
					State = 7630; Match(ON);
					State = 7631; Match(EMPTY);
					}
				}

				State = 7634; Match(RIGHT_PAREN);
				State = 7637;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1079,Context) ) {
				case 1:
					{
					State = 7635; Match(PERIOD);
					State = 7636; general_element_part();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 7639; Match(XMLROOT);
				State = 7640; Match(LEFT_PAREN);
				State = 7641; concatenation(0);
				State = 7644;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1080,Context) ) {
				case 1:
					{
					State = 7642; Match(COMMA);
					State = 7643; xmlroot_param_version_part();
					}
					break;
				}
				State = 7648;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7646; Match(COMMA);
					State = 7647; xmlroot_param_standalone_part();
					}
				}

				State = 7650; Match(RIGHT_PAREN);
				State = 7653;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1082,Context) ) {
				case 1:
					{
					State = 7651; Match(PERIOD);
					State = 7652; general_element_part();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 7655; Match(XMLSERIALIZE);
				State = 7656; Match(LEFT_PAREN);
				State = 7657;
				_la = TokenStream.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7658; concatenation(0);
				State = 7661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 7659; Match(AS);
					State = 7660; type_spec();
					}
				}

				State = 7664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENCODING) {
					{
					State = 7663; xmlserialize_param_enconding_part();
					}
				}

				State = 7667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VERSION) {
					{
					State = 7666; xmlserialize_param_version_part();
					}
				}

				State = 7670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					State = 7669; xmlserialize_param_ident_part();
					}
				}

				State = 7674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					State = 7672;
					_la = TokenStream.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 7673; Match(DEFAULTS);
					}
				}

				State = 7676; Match(RIGHT_PAREN);
				State = 7679;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1088,Context) ) {
				case 1:
					{
					State = 7677; Match(PERIOD);
					State = 7678; general_element_part();
					}
					break;
				}
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 7681; Match(XMLTABLE);
				State = 7682; Match(LEFT_PAREN);
				State = 7684;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1089,Context) ) {
				case 1:
					{
					State = 7683; xml_namespaces_clause();
					}
					break;
				}
				State = 7686; concatenation(0);
				State = 7688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PASSING) {
					{
					State = 7687; xml_passing_clause();
					}
				}

				State = 7695;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMNS) {
					{
					State = 7690; Match(COLUMNS);
					State = 7691; xml_table_column();
					{
					State = 7692; Match(COMMA);
					State = 7693; xml_table_column();
					}
					}
				}

				State = 7697; Match(RIGHT_PAREN);
				State = 7700;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1092,Context) ) {
				case 1:
					{
					State = 7698; Match(PERIOD);
					State = 7699; general_element_part();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 7702; Match(TRUNC);
				State = 7703; Match(LEFT_PAREN);
				State = 7704; expression();
				State = 7707;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7705; Match(COMMA);
					State = 7706; @string();
					}
				}

				State = 7709; Match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clause_keywordContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode CORR() { return GetToken(PlSqlParser.CORR, 0); }
		public ITerminalNode LAG() { return GetToken(PlSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(PlSqlParser.LEAD, 0); }
		public ITerminalNode MAX() { return GetToken(PlSqlParser.MAX, 0); }
		public ITerminalNode MEDIAN() { return GetToken(PlSqlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(PlSqlParser.MIN, 0); }
		public ITerminalNode NTILE() { return GetToken(PlSqlParser.NTILE, 0); }
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(PlSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public ITerminalNode VARIANCE() { return GetToken(PlSqlParser.VARIANCE, 0); }
		public ITerminalNode REGR_() { return GetToken(PlSqlParser.REGR_, 0); }
		public ITerminalNode STDDEV() { return GetToken(PlSqlParser.STDDEV, 0); }
		public ITerminalNode VAR_() { return GetToken(PlSqlParser.VAR_, 0); }
		public ITerminalNode COVAR_() { return GetToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clause_keywordContext over_clause_keyword() {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(Context, State);
		EnterRule(_localctx, 948, RULE_over_clause_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7713;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (AVG - 711)) | (1L << (CORR - 711)) | (1L << (COVAR_ - 711)) | (1L << (LAG - 711)) | (1L << (LEAD - 711)) | (1L << (MAX - 711)) | (1L << (MEDIAN - 711)) | (1L << (MIN - 711)) | (1L << (NTILE - 711)) | (1L << (RATIO_TO_REPORT - 711)) | (1L << (REGR_ - 711)) | (1L << (ROW_NUMBER - 711)) | (1L << (SUM - 711)) | (1L << (STDDEV - 711)) | (1L << (VAR_ - 711)) | (1L << (VARIANCE - 711)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_or_over_clause_keywordContext : ParserRuleContext {
		public ITerminalNode CUME_DIST() { return GetToken(PlSqlParser.CUME_DIST, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(PlSqlParser.DENSE_RANK, 0); }
		public ITerminalNode LISTAGG() { return GetToken(PlSqlParser.LISTAGG, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(PlSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode RANK() { return GetToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_or_over_clause_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithin_or_over_clause_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(Context, State);
		EnterRule(_localctx, 950, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7715;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 704)) & ~0x3f) == 0 && ((1L << (_la - 704)) & ((1L << (CUME_DIST - 704)) | (1L << (DENSE_RANK - 704)) | (1L << (LISTAGG - 704)) | (1L << (PERCENT_RANK - 704)) | (1L << (PERCENTILE_CONT - 704)) | (1L << (PERCENTILE_DISC - 704)) | (1L << (RANK - 704)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Standard_prediction_function_keywordContext : ParserRuleContext {
		public ITerminalNode PREDICTION() { return GetToken(PlSqlParser.PREDICTION, 0); }
		public ITerminalNode PREDICTION_BOUNDS() { return GetToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public ITerminalNode PREDICTION_COST() { return GetToken(PlSqlParser.PREDICTION_COST, 0); }
		public ITerminalNode PREDICTION_DETAILS() { return GetToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public ITerminalNode PREDICTION_PROBABILITY() { return GetToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public ITerminalNode PREDICTION_SET() { return GetToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standard_prediction_function_keyword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStandard_prediction_function_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(Context, State);
		EnterRule(_localctx, 952, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7717;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 698)) & ~0x3f) == 0 && ((1L << (_la - 698)) & ((1L << (PREDICTION - 698)) | (1L << (PREDICTION_BOUNDS - 698)) | (1L << (PREDICTION_COST - 698)) | (1L << (PREDICTION_DETAILS - 698)) | (1L << (PREDICTION_PROBABILITY - 698)) | (1L << (PREDICTION_SET - 698)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Over_clauseContext : ParserRuleContext {
		public ITerminalNode OVER() { return GetToken(PlSqlParser.OVER, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return GetRuleContext<Query_partition_clauseContext>(0);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Windowing_clauseContext windowing_clause() {
			return GetRuleContext<Windowing_clauseContext>(0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_over_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOver_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Over_clauseContext over_clause() {
		Over_clauseContext _localctx = new Over_clauseContext(Context, State);
		EnterRule(_localctx, 954, RULE_over_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7719; Match(OVER);
			State = 7720; Match(LEFT_PAREN);
			State = 7722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 7721; query_partition_clause();
				}
			}

			State = 7728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 7724; order_by_clause();
				State = 7726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					State = 7725; windowing_clause();
					}
				}

				}
			}

			State = 7730; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_clauseContext : ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return GetRuleContext<Windowing_typeContext>(0);
		}
		public ITerminalNode BETWEEN() { return GetToken(PlSqlParser.BETWEEN, 0); }
		public Windowing_elementsContext[] windowing_elements() {
			return GetRuleContexts<Windowing_elementsContext>();
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return GetRuleContext<Windowing_elementsContext>(i);
		}
		public ITerminalNode AND() { return GetToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_clauseContext windowing_clause() {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(Context, State);
		EnterRule(_localctx, 956, RULE_windowing_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7732; windowing_type();
			State = 7739;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BETWEEN:
				{
				State = 7733; Match(BETWEEN);
				State = 7734; windowing_elements();
				State = 7735; Match(AND);
				State = 7736; windowing_elements();
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 7738; windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_typeContext : ParserRuleContext {
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_typeContext windowing_type() {
		Windowing_typeContext _localctx = new Windowing_typeContext(Context, State);
		EnterRule(_localctx, 958, RULE_windowing_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7741;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Windowing_elementsContext : ParserRuleContext {
		public ITerminalNode UNBOUNDED() { return GetToken(PlSqlParser.UNBOUNDED, 0); }
		public ITerminalNode PRECEDING() { return GetToken(PlSqlParser.PRECEDING, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public ITerminalNode FOLLOWING() { return GetToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowing_elements; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowing_elements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Windowing_elementsContext windowing_elements() {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(Context, State);
		EnterRule(_localctx, 960, RULE_windowing_elements);
		int _la;
		try {
			State = 7750;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1099,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7743; Match(UNBOUNDED);
				State = 7744; Match(PRECEDING);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7745; Match(CURRENT);
				State = 7746; Match(ROW);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7747; concatenation(0);
				State = 7748;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_clauseContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public Using_elementContext[] using_element() {
			return GetRuleContexts<Using_elementContext>();
		}
		public Using_elementContext using_element(int i) {
			return GetRuleContext<Using_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_clauseContext using_clause() {
		Using_clauseContext _localctx = new Using_clauseContext(Context, State);
		EnterRule(_localctx, 962, RULE_using_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7752; Match(USING);
			State = 7762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASTERISK:
				{
				State = 7753; Match(ASTERISK);
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case IN:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case COMMA:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 7758;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 7755;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 7754; Match(COMMA);
							}
						}

						State = 7757; using_element();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7760;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1101,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_elementContext : ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return GetRuleContext<Select_list_elementsContext>(0);
		}
		public ITerminalNode IN() { return GetToken(PlSqlParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_elementContext using_element() {
		Using_elementContext _localctx = new Using_elementContext(Context, State);
		EnterRule(_localctx, 964, RULE_using_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1104,Context) ) {
			case 1:
				{
				State = 7764; Match(IN);
				State = 7766;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1103,Context) ) {
				case 1:
					{
					State = 7765; Match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 7768; Match(OUT);
				}
				break;
			}
			State = 7771; select_list_elements();
			State = 7773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1105,Context) ) {
			case 1:
				{
				State = 7772; column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collect_order_by_partContext : ParserRuleContext {
		public ITerminalNode ORDER() { return GetToken(PlSqlParser.ORDER, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collect_order_by_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollect_order_by_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collect_order_by_partContext collect_order_by_part() {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(Context, State);
		EnterRule(_localctx, 966, RULE_collect_order_by_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7775; Match(ORDER);
			State = 7776; Match(BY);
			State = 7777; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Within_or_over_partContext : ParserRuleContext {
		public ITerminalNode WITHIN() { return GetToken(PlSqlParser.WITHIN, 0); }
		public ITerminalNode GROUP() { return GetToken(PlSqlParser.GROUP, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_within_or_over_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithin_or_over_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Within_or_over_partContext within_or_over_part() {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(Context, State);
		EnterRule(_localctx, 968, RULE_within_or_over_part);
		try {
			State = 7786;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITHIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7779; Match(WITHIN);
				State = 7780; Match(GROUP);
				State = 7781; Match(LEFT_PAREN);
				State = 7782; order_by_clause();
				State = 7783; Match(RIGHT_PAREN);
				}
				break;
			case OVER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7785; over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cost_matrix_clauseContext : ParserRuleContext {
		public ITerminalNode COST() { return GetToken(PlSqlParser.COST, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode VALUES() { return GetToken(PlSqlParser.VALUES, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public Cost_class_nameContext[] cost_class_name() {
			return GetRuleContexts<Cost_class_nameContext>();
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return GetRuleContext<Cost_class_nameContext>(i);
		}
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost_matrix_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost_matrix_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cost_matrix_clauseContext cost_matrix_clause() {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(Context, State);
		EnterRule(_localctx, 970, RULE_cost_matrix_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7788; Match(COST);
			State = 7810;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MODEL:
				{
				State = 7789; Match(MODEL);
				State = 7791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTO) {
					{
					State = 7790; Match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				State = 7793; Match(LEFT_PAREN);
				State = 7798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7795;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 7794; Match(COMMA);
						}
					}

					State = 7797; cost_class_name();
					}
					}
					State = 7800;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID );
				State = 7802; Match(RIGHT_PAREN);
				State = 7803; Match(VALUES);
				State = 7804; Match(LEFT_PAREN);
				State = 7806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
					{
					State = 7805; expressions();
					}
				}

				State = 7808; Match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_passing_clauseContext : ParserRuleContext {
		public ITerminalNode PASSING() { return GetToken(PlSqlParser.PASSING, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public ITerminalNode BY() { return GetToken(PlSqlParser.BY, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_passing_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_passing_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_passing_clauseContext xml_passing_clause() {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(Context, State);
		EnterRule(_localctx, 972, RULE_xml_passing_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7812; Match(PASSING);
			State = 7815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BY) {
				{
				State = 7813; Match(BY);
				State = 7814; Match(VALUE);
				}
			}

			State = 7817; expression();
			State = 7819;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (NATIONAL_CHAR_STRING_LIT - 713)) | (1L << (CHAR_STRING - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (INTRODUCER - 713)))) != 0) || _la==REGULAR_ID) {
				{
				State = 7818; column_alias();
				}
			}

			{
			State = 7821; Match(COMMA);
			State = 7822; expression();
			State = 7824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1114,Context) ) {
			case 1:
				{
				State = 7823; column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_attributes_clauseContext : ParserRuleContext {
		public ITerminalNode XMLATTRIBUTES() { return GetToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Xml_multiuse_expression_elementContext[] xml_multiuse_expression_element() {
			return GetRuleContexts<Xml_multiuse_expression_elementContext>();
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return GetRuleContext<Xml_multiuse_expression_elementContext>(i);
		}
		public ITerminalNode ENTITYESCAPING() { return GetToken(PlSqlParser.ENTITYESCAPING, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public ITerminalNode SCHEMACHECK() { return GetToken(PlSqlParser.SCHEMACHECK, 0); }
		public ITerminalNode NOSCHEMACHECK() { return GetToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_attributes_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_attributes_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_attributes_clauseContext xml_attributes_clause() {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(Context, State);
		EnterRule(_localctx, 974, RULE_xml_attributes_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7826; Match(XMLATTRIBUTES);
			State = 7827; Match(LEFT_PAREN);
			State = 7829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1115,Context) ) {
			case 1:
				{
				State = 7828;
				_la = TokenStream.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 7832;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1116,Context) ) {
			case 1:
				{
				State = 7831;
				_la = TokenStream.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 7838;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7834; Match(COMMA);
					}
				}

				State = 7837; xml_multiuse_expression_element();
				}
				}
				State = 7840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID );
			State = 7842; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_namespaces_clauseContext : ParserRuleContext {
		public ITerminalNode XMLNAMESPACES() { return GetToken(PlSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ConcatenationContext[] concatenation() {
			return GetRuleContexts<ConcatenationContext>();
		}
		public ConcatenationContext concatenation(int i) {
			return GetRuleContext<ConcatenationContext>(i);
		}
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return GetRuleContext<Xml_general_default_partContext>(0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_namespaces_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_namespaces_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_namespaces_clauseContext xml_namespaces_clause() {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(Context, State);
		EnterRule(_localctx, 976, RULE_xml_namespaces_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7844; Match(XMLNAMESPACES);
			State = 7845; Match(LEFT_PAREN);
			State = 7849;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1119,Context) ) {
			case 1:
				{
				State = 7846; concatenation(0);
				State = 7847; column_alias();
				}
				break;
			}
			State = 7857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7851; Match(COMMA);
				State = 7852; concatenation(0);
				State = 7853; column_alias();
				}
				}
				State = 7859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 7860; xml_general_default_part();
				}
			}

			State = 7863; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_table_columnContext : ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return GetRuleContext<Xml_column_nameContext>(0);
		}
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ITerminalNode ORDINALITY() { return GetToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return GetRuleContext<Type_specContext>(0);
		}
		public ITerminalNode PATH() { return GetToken(PlSqlParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return GetRuleContext<Xml_general_default_partContext>(0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_table_column; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_table_column(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_table_columnContext xml_table_column() {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(Context, State);
		EnterRule(_localctx, 978, RULE_xml_table_column);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7865; xml_column_name();
			State = 7876;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 7866; Match(FOR);
				State = 7867; Match(ORDINALITY);
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				State = 7868; type_spec();
				State = 7871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PATH) {
					{
					State = 7869; Match(PATH);
					State = 7870; concatenation(0);
					}
				}

				State = 7874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 7873; xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_general_default_partContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_general_default_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_general_default_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_general_default_partContext xml_general_default_part() {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(Context, State);
		EnterRule(_localctx, 980, RULE_xml_general_default_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7878; Match(DEFAULT);
			State = 7879; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_multiuse_expression_elementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode EVALNAME() { return GetToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_multiuse_expression_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_multiuse_expression_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_multiuse_expression_elementContext xml_multiuse_expression_element() {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(Context, State);
		EnterRule(_localctx, 982, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7881; expression();
			State = 7888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 7882; Match(AS);
				State = 7886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1125,Context) ) {
				case 1:
					{
					State = 7883; id_expression();
					}
					break;
				case 2:
					{
					State = 7884; Match(EVALNAME);
					State = 7885; concatenation(0);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlroot_param_version_partContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(PlSqlParser.VERSION, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlroot_param_version_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlroot_param_version_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlroot_param_version_partContext xmlroot_param_version_part() {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(Context, State);
		EnterRule(_localctx, 984, RULE_xmlroot_param_version_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7890; Match(VERSION);
			State = 7894;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1127,Context) ) {
			case 1:
				{
				State = 7891; Match(NO);
				State = 7892; Match(VALUE);
				}
				break;
			case 2:
				{
				State = 7893; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlroot_param_standalone_partContext : ParserRuleContext {
		public ITerminalNode STANDALONE() { return GetToken(PlSqlParser.STANDALONE, 0); }
		public ITerminalNode YES() { return GetToken(PlSqlParser.YES, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlroot_param_standalone_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlroot_param_standalone_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(Context, State);
		EnterRule(_localctx, 986, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7896; Match(STANDALONE);
			State = 7902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case YES:
				{
				State = 7897; Match(YES);
				}
				break;
			case NO:
				{
				State = 7898; Match(NO);
				State = 7900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 7899; Match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_enconding_partContext : ParserRuleContext {
		public ITerminalNode ENCODING() { return GetToken(PlSqlParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_enconding_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_enconding_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(Context, State);
		EnterRule(_localctx, 988, RULE_xmlserialize_param_enconding_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7904; Match(ENCODING);
			State = 7905; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_version_partContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(PlSqlParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_version_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_version_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(Context, State);
		EnterRule(_localctx, 990, RULE_xmlserialize_param_version_part);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7907; Match(VERSION);
			State = 7908; concatenation(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xmlserialize_param_ident_partContext : ParserRuleContext {
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode INDENT() { return GetToken(PlSqlParser.INDENT, 0); }
		public ITerminalNode SIZE() { return GetToken(PlSqlParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return GetRuleContext<ConcatenationContext>(0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlserialize_param_ident_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXmlserialize_param_ident_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(Context, State);
		EnterRule(_localctx, 992, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			State = 7918;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7910; Match(NO);
				State = 7911; Match(INDENT);
				}
				break;
			case INDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7912; Match(INDENT);
				State = 7916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SIZE) {
					{
					State = 7913; Match(SIZE);
					State = 7914; Match(EQUALS_OP);
					State = 7915; concatenation(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_plus_commandContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public ITerminalNode PROMPT() { return GetToken(PlSqlParser.PROMPT, 0); }
		public ITerminalNode SHOW() { return GetToken(PlSqlParser.SHOW, 0); }
		public ITerminalNode ERR() { return GetToken(PlSqlParser.ERR, 0); }
		public ITerminalNode ERRORS() { return GetToken(PlSqlParser.ERRORS, 0); }
		public ITerminalNode START_CMD() { return GetToken(PlSqlParser.START_CMD, 0); }
		public Sqlplus_whenever_commandContext sqlplus_whenever_command() {
			return GetRuleContext<Sqlplus_whenever_commandContext>(0);
		}
		public Sqlplus_set_commandContext sqlplus_set_command() {
			return GetRuleContext<Sqlplus_set_commandContext>(0);
		}
		public Sqlplus_execute_commandContext sqlplus_execute_command() {
			return GetRuleContext<Sqlplus_execute_commandContext>(0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_plus_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_plus_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_plus_commandContext sql_plus_command() {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(Context, State);
		EnterRule(_localctx, 994, RULE_sql_plus_command);
		int _la;
		try {
			State = 7929;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SOLIDUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7920; Match(SOLIDUS);
				}
				break;
			case EXIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7921; Match(EXIT);
				}
				break;
			case PROMPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7922; Match(PROMPT);
				}
				break;
			case SHOW:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7923; Match(SHOW);
				State = 7924;
				_la = TokenStream.LA(1);
				if ( !(_la==ERR || _la==ERRORS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case START_CMD:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7925; Match(START_CMD);
				}
				break;
			case WHENEVER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7926; sqlplus_whenever_command();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7927; sqlplus_set_command();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7928; sqlplus_execute_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlplus_execute_commandContext : ParserRuleContext {
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Sqlplus_execute_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlplus_execute_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlplus_execute_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlplus_execute_commandContext sqlplus_execute_command() {
		Sqlplus_execute_commandContext _localctx = new Sqlplus_execute_commandContext(Context, State);
		EnterRule(_localctx, 996, RULE_sqlplus_execute_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7931; Match(EXECUTE);
			State = 7932; function_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlplus_whenever_commandContext : ParserRuleContext {
		public ITerminalNode WHENEVER() { return GetToken(PlSqlParser.WHENEVER, 0); }
		public ITerminalNode SQLERROR() { return GetToken(PlSqlParser.SQLERROR, 0); }
		public ITerminalNode OSERROR() { return GetToken(PlSqlParser.OSERROR, 0); }
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public ITerminalNode CONTINUE() { return GetToken(PlSqlParser.CONTINUE, 0); }
		public ITerminalNode SUCCESS() { return GetToken(PlSqlParser.SUCCESS, 0); }
		public ITerminalNode FAILURE() { return GetToken(PlSqlParser.FAILURE, 0); }
		public ITerminalNode WARNING() { return GetToken(PlSqlParser.WARNING, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public Sqlplus_whenever_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlplus_whenever_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlplus_whenever_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlplus_whenever_commandContext sqlplus_whenever_command() {
		Sqlplus_whenever_commandContext _localctx = new Sqlplus_whenever_commandContext(Context, State);
		EnterRule(_localctx, 998, RULE_sqlplus_whenever_command);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7934; Match(WHENEVER);
			State = 7935;
			_la = TokenStream.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXIT:
				{
				State = 7936; Match(EXIT);
				State = 7937;
				_la = TokenStream.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7938;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case CONTINUE:
				{
				State = 7939; Match(CONTINUE);
				State = 7940;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentsContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 1000, RULE_function_arguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7943; Match(LEFT_PAREN);
			State = 7944; arguments();
			State = 7945; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 1002, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
				{
				State = 7947; argument();
				}
			}

			State = 7952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7950; Match(COMMA);
				State = 7951; argument();
				}
				}
				State = 7954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public ITerminalNode BIND_VAR() { return GetToken(PlSqlParser.BIND_VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 1004, RULE_argument);
		try {
			State = 7961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7956; regular_id();
				State = 7957; Match(BIND_VAR);
				State = 7958; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7960; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sqlplus_set_commandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Regular_idContext[] regular_id() {
			return GetRuleContexts<Regular_idContext>();
		}
		public Regular_idContext regular_id(int i) {
			return GetRuleContext<Regular_idContext>(i);
		}
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Sqlplus_set_commandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlplus_set_command; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlplus_set_command(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sqlplus_set_commandContext sqlplus_set_command() {
		Sqlplus_set_commandContext _localctx = new Sqlplus_set_commandContext(Context, State);
		EnterRule(_localctx, 1006, RULE_sqlplus_set_command);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7963; Match(SET);
			State = 7964; regular_id();
			State = 7970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1137,Context) ) {
			case 1:
				{
				State = 7965; Match(CHAR_STRING);
				}
				break;
			case 2:
				{
				State = 7966; Match(ON);
				}
				break;
			case 3:
				{
				State = 7967; Match(OFF);
				}
				break;
			case 4:
				{
				State = 7968; numeric();
				}
				break;
			case 5:
				{
				State = 7969; regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_extension_clauseContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode FOR() { return GetToken(PlSqlParser.FOR, 0); }
		public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_extension_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_extension_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_extension_clauseContext partition_extension_clause() {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(Context, State);
		EnterRule(_localctx, 1008, RULE_partition_extension_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7972;
			_la = TokenStream.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7974;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 7973; Match(FOR);
				}
			}

			State = 7976; Match(LEFT_PAREN);
			State = 7978;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
				{
				State = 7977; expressions();
				}
			}

			State = 7980; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode AS() { return GetToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 1010, RULE_column_alias);
		int _la;
		try {
			State = 7990;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 7982; Match(AS);
					}
				}

				State = 7987;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 7985; identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 7986; @string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7989; Match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 1012, RULE_table_alias);
		try {
			State = 7994;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7992; identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7993; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(PlSqlParser.WHERE, 0); }
		public ITerminalNode CURRENT() { return GetToken(PlSqlParser.CURRENT, 0); }
		public ITerminalNode OF() { return GetToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return GetRuleContext<Cursor_nameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 1014, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7996; Match(WHERE);
			State = 8001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT:
				{
				State = 7997; Match(CURRENT);
				State = 7998; Match(OF);
				State = 7999; cursor_name();
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TRUNC:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case VARIABLE_SESSION:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				State = 8000; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_clauseContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(PlSqlParser.INTO, 0); }
		public ITerminalNode BULK() { return GetToken(PlSqlParser.BULK, 0); }
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInto_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Into_clauseContext into_clause() {
		Into_clauseContext _localctx = new Into_clauseContext(Context, State);
		EnterRule(_localctx, 1016, RULE_into_clause);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BULK) {
				{
				State = 8003; Match(BULK);
				State = 8004; Match(COLLECT);
				}
			}

			State = 8007; Match(INTO);
			State = 8012;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8009;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 8008; Match(COMMA);
						}
					}

					State = 8011; variable_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8014;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1147,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Xml_column_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xml_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXml_column_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Xml_column_nameContext xml_column_name() {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(Context, State);
		EnterRule(_localctx, 1018, RULE_xml_column_name);
		try {
			State = 8018;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8016; identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8017; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Routine_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routine_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutine_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Routine_nameContext routine_name() {
		Routine_nameContext _localctx = new Routine_nameContext(Context, State);
		EnterRule(_localctx, 1020, RULE_routine_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8020; identifiers();
			State = 8023;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN) {
				{
				State = 8021; Match(AT_SIGN);
				State = 8022; link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndextypeContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndextypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indextype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndextype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndextypeContext indextype() {
		IndextypeContext _localctx = new IndextypeContext(Context, State);
		EnterRule(_localctx, 1022, RULE_indextype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8025; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grantee_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Identified_byContext identified_by() {
			return GetRuleContext<Identified_byContext>(0);
		}
		public Grantee_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantee_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantee_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grantee_nameContext grantee_name() {
		Grantee_nameContext _localctx = new Grantee_nameContext(Context, State);
		EnterRule(_localctx, 1024, RULE_grantee_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8027; id_expression();
			State = 8029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIED) {
				{
				State = 8028; identified_by();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Role_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public Role_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRole_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Role_nameContext role_name() {
		Role_nameContext _localctx = new Role_nameContext(Context, State);
		EnterRule(_localctx, 1026, RULE_role_name);
		try {
			State = 8033;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8031; id_expression();
				}
				break;
			case CONNECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8032; Match(CONNECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constraint_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constraint_nameContext constraint_name() {
		Constraint_nameContext _localctx = new Constraint_nameContext(Context, State);
		EnterRule(_localctx, 1028, RULE_constraint_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8035; identifiers();
			State = 8038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT_SIGN) {
				{
				State = 8036; Match(AT_SIGN);
				State = 8037; link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 1030, RULE_variable_name);
		int _la;
		try {
			State = 8050;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTRODUCER) {
					{
					State = 8040; Match(INTRODUCER);
					State = 8041; char_set_name();
					}
				}

				State = 8044; id_expression();
				State = 8047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERIOD) {
					{
					State = 8045; Match(PERIOD);
					State = 8046; id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8049; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cursor_nameContext : ParserRuleContext {
		public General_elementContext general_element() {
			return GetRuleContext<General_elementContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursor_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCursor_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cursor_nameContext cursor_name() {
		Cursor_nameContext _localctx = new Cursor_nameContext(Context, State);
		EnterRule(_localctx, 1032, RULE_cursor_name);
		try {
			State = 8054;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8052; general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8053; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Bind_variableContext bind_variable() {
			return GetRuleContext<Bind_variableContext>(0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Record_nameContext record_name() {
		Record_nameContext _localctx = new Record_nameContext(Context, State);
		EnterRule(_localctx, 1034, RULE_record_name);
		try {
			State = 8058;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8056; identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8057; bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Link_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_link_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLink_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Link_nameContext link_name() {
		Link_nameContext _localctx = new Link_nameContext(Context, State);
		EnterRule(_localctx, 1036, RULE_link_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8060; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tableview_nameContext : ParserRuleContext {
		public Table_fullnameContext table_fullname() {
			return GetRuleContext<Table_fullnameContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return GetRuleContext<Partition_extension_clauseContext>(0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableview_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableview_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tableview_nameContext tableview_name() {
		Tableview_nameContext _localctx = new Tableview_nameContext(Context, State);
		EnterRule(_localctx, 1038, RULE_tableview_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8062; table_fullname();
			State = 8066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1158,Context) ) {
			case 1:
				{
				State = 8063; Match(AT_SIGN);
				State = 8064; link_name();
				}
				break;
			case 2:
				{
				State = 8065; partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Element_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_nameContext element_name() {
		Element_nameContext _localctx = new Element_nameContext(Context, State);
		EnterRule(_localctx, 1040, RULE_element_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8068; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Flashback_archive_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Flashback_archive_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flashback_archive_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlashback_archive_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Flashback_archive_nameContext flashback_archive_name() {
		Flashback_archive_nameContext _localctx = new Flashback_archive_nameContext(Context, State);
		EnterRule(_localctx, 1042, RULE_flashback_archive_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8070; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Zonemap_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Zonemap_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zonemap_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZonemap_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Zonemap_nameContext zonemap_name() {
		Zonemap_nameContext _localctx = new Zonemap_nameContext(Context, State);
		EnterRule(_localctx, 1044, RULE_zonemap_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8072; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subpartition_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Subpartition_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartition_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartition_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Subpartition_nameContext subpartition_name() {
		Subpartition_nameContext _localctx = new Subpartition_nameContext(Context, State);
		EnterRule(_localctx, 1046, RULE_subpartition_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8074; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_item_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Lob_item_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_item_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_item_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_item_nameContext lob_item_name() {
		Lob_item_nameContext _localctx = new Lob_item_nameContext(Context, State);
		EnterRule(_localctx, 1048, RULE_lob_item_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8076; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dir_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Dir_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dir_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDir_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dir_object_nameContext dir_object_name() {
		Dir_object_nameContext _localctx = new Dir_object_nameContext(Context, State);
		EnterRule(_localctx, 1050, RULE_dir_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8078; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public User_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUser_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public User_object_nameContext user_object_name() {
		User_object_nameContext _localctx = new User_object_nameContext(Context, State);
		EnterRule(_localctx, 1052, RULE_user_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8080; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tablespace_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Tablespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespace_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tablespace_nameContext tablespace_name() {
		Tablespace_nameContext _localctx = new Tablespace_nameContext(Context, State);
		EnterRule(_localctx, 1054, RULE_tablespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8082; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Label_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Label_nameContext label_name() {
		Label_nameContext _localctx = new Label_nameContext(Context, State);
		EnterRule(_localctx, 1056, RULE_label_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8084; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partition_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partition_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartition_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partition_nameContext partition_name() {
		Partition_nameContext _localctx = new Partition_nameContext(Context, State);
		EnterRule(_localctx, 1058, RULE_partition_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8086; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_object_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_object_nameContext schema_object_name() {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(Context, State);
		EnterRule(_localctx, 1060, RULE_schema_object_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8088; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lob_segnameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Lob_segnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lob_segname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLob_segname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lob_segnameContext lob_segname() {
		Lob_segnameContext _localctx = new Lob_segnameContext(Context, State);
		EnterRule(_localctx, 1062, RULE_lob_segname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8090; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ilm_policy_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Ilm_policy_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ilm_policy_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIlm_policy_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ilm_policy_nameContext ilm_policy_name() {
		Ilm_policy_nameContext _localctx = new Ilm_policy_nameContext(Context, State);
		EnterRule(_localctx, 1064, RULE_ilm_policy_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8092; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Directory_nameContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Directory_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directory_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirectory_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Directory_nameContext directory_name() {
		Directory_nameContext _localctx = new Directory_nameContext(Context, State);
		EnterRule(_localctx, 1066, RULE_directory_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8094; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Full_identifierContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public Full_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_full_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFull_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Full_identifierContext full_identifier() {
		Full_identifierContext _localctx = new Full_identifierContext(Context, State);
		EnterRule(_localctx, 1068, RULE_full_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8096; identifier();
			State = 8099;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1159,Context) ) {
			case 1:
				{
				State = 8097; Match(PERIOD);
				State = 8098; id_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implementation_type_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementation_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementation_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implementation_type_nameContext implementation_type_name() {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(Context, State);
		EnterRule(_localctx, 1070, RULE_implementation_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8101; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Container_tableview_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Container_tableview_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_container_tableview_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContainer_tableview_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Container_tableview_nameContext container_tableview_name() {
		Container_tableview_nameContext _localctx = new Container_tableview_nameContext(Context, State);
		EnterRule(_localctx, 1072, RULE_container_tableview_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8103; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 1074, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8105; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedure_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_nameContext procedure_name() {
		Procedure_nameContext _localctx = new Procedure_nameContext(Context, State);
		EnterRule(_localctx, 1076, RULE_procedure_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8107; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Trigger_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trigger_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrigger_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Trigger_nameContext trigger_name() {
		Trigger_nameContext _localctx = new Trigger_nameContext(Context, State);
		EnterRule(_localctx, 1078, RULE_trigger_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8109; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_nameContext collection_name() {
		Collection_nameContext _localctx = new Collection_nameContext(Context, State);
		EnterRule(_localctx, 1080, RULE_collection_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8111; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 1082, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8113; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_fullnameContext : ParserRuleContext {
		public Full_identifierContext full_identifier() {
			return GetRuleContext<Full_identifierContext>(0);
		}
		public Table_fullnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_fullname; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_fullname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_fullnameContext table_fullname() {
		Table_fullnameContext _localctx = new Table_fullnameContext(Context, State);
		EnterRule(_localctx, 1084, RULE_table_fullname);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8115; full_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_object_nameContext : ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public User_object_nameContext[] user_object_name() {
			return GetRuleContexts<User_object_nameContext>();
		}
		public User_object_nameContext user_object_name(int i) {
			return GetRuleContext<User_object_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public ITerminalNode DIRECTORY() { return GetToken(PlSqlParser.DIRECTORY, 0); }
		public Dir_object_nameContext dir_object_name() {
			return GetRuleContext<Dir_object_nameContext>(0);
		}
		public ITerminalNode EDITION() { return GetToken(PlSqlParser.EDITION, 0); }
		public Schema_object_nameContext schema_object_name() {
			return GetRuleContext<Schema_object_nameContext>(0);
		}
		public ITerminalNode MINING() { return GetToken(PlSqlParser.MINING, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode SOURCE() { return GetToken(PlSqlParser.SOURCE, 0); }
		public ITerminalNode RESOURCE() { return GetToken(PlSqlParser.RESOURCE, 0); }
		public ITerminalNode SQL() { return GetToken(PlSqlParser.SQL, 0); }
		public ITerminalNode TRANSLATION() { return GetToken(PlSqlParser.TRANSLATION, 0); }
		public ITerminalNode PROFILE() { return GetToken(PlSqlParser.PROFILE, 0); }
		public Grant_object_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_object_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrant_object_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Grant_object_nameContext grant_object_name() {
		Grant_object_nameContext _localctx = new Grant_object_nameContext(Context, State);
		EnterRule(_localctx, 1086, RULE_grant_object_name);
		int _la;
		try {
			State = 8141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1162,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8117; tableview_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8118; Match(USER);
				State = 8123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 8120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 8119; Match(COMMA);
						}
					}

					State = 8122; user_object_name();
					}
					}
					State = 8125;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)) | (1L << (DELIMITED_ID - 713)) | (1L << (COMMA - 713)))) != 0) || _la==REGULAR_ID );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8127; Match(DIRECTORY);
				State = 8128; dir_object_name();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8129; Match(EDITION);
				State = 8130; schema_object_name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8131; Match(MINING);
				State = 8132; Match(MODEL);
				State = 8133; schema_object_name();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8134; Match(JAVA);
				State = 8135;
				_la = TokenStream.LA(1);
				if ( !(_la==RESOURCE || _la==SOURCE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8136; schema_object_name();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8137; Match(SQL);
				State = 8138; Match(TRANSLATION);
				State = 8139; Match(PROFILE);
				State = 8140; schema_object_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_listContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_listContext column_list() {
		Column_listContext _localctx = new Column_listContext(Context, State);
		EnterRule(_localctx, 1088, RULE_column_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8147;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 8143; Match(COMMA);
						}
					}

					State = 8146; column_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8149;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1164,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paren_column_listContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_listContext column_list() {
			return GetRuleContext<Column_listContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Paren_column_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paren_column_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen_column_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paren_column_listContext paren_column_list() {
		Paren_column_listContext _localctx = new Paren_column_listContext(Context, State);
		EnterRule(_localctx, 1090, RULE_paren_column_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8151; Match(LEFT_PAREN);
			State = 8152; column_list();
			State = 8153; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Keep_clauseContext : ParserRuleContext {
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public ITerminalNode LAST() { return GetToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return GetRuleContext<Over_clauseContext>(0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keep_clause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeep_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Keep_clauseContext keep_clause() {
		Keep_clauseContext _localctx = new Keep_clauseContext(Context, State);
		EnterRule(_localctx, 1092, RULE_keep_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8155; Match(KEEP);
			State = 8156; Match(LEFT_PAREN);
			State = 8157; Match(DENSE_RANK);
			State = 8158;
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8159; order_by_clause();
			State = 8160; Match(RIGHT_PAREN);
			State = 8162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1165,Context) ) {
			case 1:
				{
				State = 8161; over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_analyticContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Respect_or_ignore_nullsContext[] respect_or_ignore_nulls() {
			return GetRuleContexts<Respect_or_ignore_nullsContext>();
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return GetRuleContext<Respect_or_ignore_nullsContext>(i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_analytic; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_analytic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_analyticContext function_argument_analytic() {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(Context, State);
		EnterRule(_localctx, 1094, RULE_function_argument_analytic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8164; Match(LEFT_PAREN);
			State = 8174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID) {
				{
				{
				State = 8166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 8165; Match(COMMA);
					}
				}

				State = 8168; argument();
				State = 8170;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1167,Context) ) {
				case 1:
					{
					State = 8169; respect_or_ignore_nulls();
					}
					break;
				}
				}
				}
				State = 8176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8177; Match(RIGHT_PAREN);
			State = 8179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1169,Context) ) {
			case 1:
				{
				State = 8178; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argument_modelingContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		public ITerminalNode USING() { return GetToken(PlSqlParser.USING, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Tableview_nameContext tableview_name() {
			return GetRuleContext<Tableview_nameContext>(0);
		}
		public ITerminalNode ASTERISK() { return GetToken(PlSqlParser.ASTERISK, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(PlSqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(PlSqlParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		public ITerminalNode[] NULL() { return GetTokens(PlSqlParser.NULL); }
		public ITerminalNode NULL(int i) {
			return GetToken(PlSqlParser.NULL, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Column_aliasContext[] column_alias() {
			return GetRuleContexts<Column_aliasContext>();
		}
		public Column_aliasContext column_alias(int i) {
			return GetRuleContext<Column_aliasContext>(i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument_modeling; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument_modeling(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argument_modelingContext function_argument_modeling() {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(Context, State);
		EnterRule(_localctx, 1096, RULE_function_argument_modeling);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8181; Match(LEFT_PAREN);
			State = 8182; column_name();
			State = 8195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 8183; Match(COMMA);
				State = 8186;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case PLUS_SIGN:
					{
					State = 8184; numeric();
					}
					break;
				case NULL:
					{
					State = 8185; Match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 8188; Match(COMMA);
					State = 8191;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
					case PLUS_SIGN:
						{
						State = 8189; numeric();
						}
						break;
					case NULL:
						{
						State = 8190; Match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			State = 8197; Match(USING);
			State = 8214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1177,Context) ) {
			case 1:
				{
				State = 8198; tableview_name();
				State = 8199; Match(PERIOD);
				State = 8200; Match(ASTERISK);
				}
				break;
			case 2:
				{
				State = 8202; Match(ASTERISK);
				}
				break;
			case 3:
				{
				State = 8210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 8204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 8203; Match(COMMA);
						}
					}

					State = 8206; expression();
					State = 8208;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1175,Context) ) {
					case 1:
						{
						State = 8207; column_alias();
						}
						break;
					}
					}
					}
					State = 8212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COALESCE - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DISTINCT - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXISTS - 194)) | (1L << (EXIT - 194)) | (1L << (EXPLAIN - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FAILURE - 194)) | (1L << (FALSE - 194)) | (1L << (FINAL - 194)) | (1L << (FIRST - 194)) | (1L << (FIRST_VALUE - 194)) | (1L << (FLOAT - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FOLLOWS - 194)) | (1L << (FORALL - 194)) | (1L << (FORCE - 194)) | (1L << (FULL - 194)) | (1L << (FUNCTION - 194)) | (1L << (GROUPING - 194)) | (1L << (HASH - 194)) | (1L << (HIDE - 194)) | (1L << (HOUR - 194)) | (1L << (ID - 194)) | (1L << (IGNORE - 194)) | (1L << (IMMEDIATE - 194)) | (1L << (INCLUDE - 194)) | (1L << (INCLUDING - 194)) | (1L << (INCREMENT - 194)) | (1L << (INDENT - 194)) | (1L << (INDEXED - 194)) | (1L << (INDICATOR - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (INDICES - 258)) | (1L << (INFINITE - 258)) | (1L << (INLINE - 258)) | (1L << (INNER - 258)) | (1L << (INOUT - 258)) | (1L << (INSTANTIABLE - 258)) | (1L << (INSTEAD - 258)) | (1L << (INTEGER - 258)) | (1L << (INTERVAL - 258)) | (1L << (INT - 258)) | (1L << (INVALIDATE - 258)) | (1L << (ISOLATION - 258)) | (1L << (ITERATE - 258)) | (1L << (JAVA - 258)) | (1L << (JOIN - 258)) | (1L << (KEEP - 258)) | (1L << (KEY - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LAST - 258)) | (1L << (LAST_VALUE - 258)) | (1L << (LEADING - 258)) | (1L << (LEFT - 258)) | (1L << (LEVEL - 258)) | (1L << (LIBRARY - 258)) | (1L << (LIKE2 - 258)) | (1L << (LIKE4 - 258)) | (1L << (LIKEC - 258)) | (1L << (LIMIT - 258)) | (1L << (LINK - 258)) | (1L << (LIST - 258)) | (1L << (LOCAL - 258)) | (1L << (LOCKED - 258)) | (1L << (LOG - 258)) | (1L << (LOGOFF - 258)) | (1L << (LOGON - 258)) | (1L << (LONG - 258)) | (1L << (LOOP - 258)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (NULLS - 389)) | (1L << (NUMBER - 389)) | (1L << (NUMERIC - 389)) | (1L << (NVARCHAR2 - 389)) | (1L << (OBJECT - 389)) | (1L << (OFF - 389)) | (1L << (OID - 389)) | (1L << (OLD - 389)) | (1L << (ONLY - 389)) | (1L << (OPEN - 389)) | (1L << (OPERATOR - 389)) | (1L << (ORADATA - 389)) | (1L << (ORDINALITY - 389)) | (1L << (OSERROR - 389)) | (1L << (OUTER - 389)) | (1L << (OUT - 389)) | (1L << (OVER - 389)) | (1L << (OVERRIDING - 389)) | (1L << (PACKAGE - 389)) | (1L << (PARALLEL_ENABLE - 389)) | (1L << (PARAMETERS - 389)) | (1L << (PARENT - 389)) | (1L << (PARTITION - 389)) | (1L << (PASSING - 389)) | (1L << (PASSWORD - 389)) | (1L << (PATH - 389)) | (1L << (PIPELINED - 389)) | (1L << (PLAN - 389)) | (1L << (PLS_INTEGER - 389)) | (1L << (POSITIVEN - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (POSITIVE - 453)) | (1L << (PRAGMA - 453)) | (1L << (PRECEDING - 453)) | (1L << (PRECISION - 453)) | (1L << (PRESENT - 453)) | (1L << (PRIOR - 453)) | (1L << (PRIVILEGE - 453)) | (1L << (PROGRAM - 453)) | (1L << (RAISE - 453)) | (1L << (RANGE - 453)) | (1L << (RAW - 453)) | (1L << (READ - 453)) | (1L << (REAL - 453)) | (1L << (RECORD - 453)) | (1L << (REFERENCE - 453)) | (1L << (REFERENCING - 453)) | (1L << (REF - 453)) | (1L << (REJECT - 453)) | (1L << (RELIES_ON - 453)) | (1L << (RENAME - 453)) | (1L << (REPLACE - 453)) | (1L << (RESPECT - 453)) | (1L << (RESTRICT_REFERENCES - 453)) | (1L << (RESULT_CACHE - 453)) | (1L << (RESULT - 453)) | (1L << (RETURNING - 453)) | (1L << (RETURN - 453)) | (1L << (REUSE - 453)) | (1L << (REVERSE - 453)) | (1L << (REVOKE - 453)) | (1L << (RIGHT - 453)) | (1L << (ROLLBACK - 453)) | (1L << (ROLLUP - 453)) | (1L << (ROWID - 453)) | (1L << (ROW - 453)) | (1L << (ROWS - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RULES - 517)) | (1L << (SAMPLE - 517)) | (1L << (SAVEPOINT - 517)) | (1L << (SAVE - 517)) | (1L << (SCHEMACHECK - 517)) | (1L << (SCHEMA - 517)) | (1L << (SCN - 517)) | (1L << (SECOND - 517)) | (1L << (SEED - 517)) | (1L << (SEGMENT - 517)) | (1L << (SELF - 517)) | (1L << (SEQUENTIAL - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (SERIALLY_REUSABLE - 517)) | (1L << (SERVERERROR - 517)) | (1L << (SESSIONTIMEZONE - 517)) | (1L << (SET - 517)) | (1L << (SETS - 517)) | (1L << (SETTINGS - 517)) | (1L << (SHOW - 517)) | (1L << (SHUTDOWN - 517)) | (1L << (SIBLINGS - 517)) | (1L << (SIGNTYPE - 517)) | (1L << (SIMPLE_INTEGER - 517)) | (1L << (SINGLE - 517)) | (1L << (SKIP_ - 517)) | (1L << (SMALLINT - 517)) | (1L << (SNAPSHOT - 517)) | (1L << (SOME - 517)) | (1L << (SPECIFICATION - 517)) | (1L << (SQLDATA - 517)) | (1L << (SQLERROR - 517)) | (1L << (STANDALONE - 517)) | (1L << (STARTUP - 517)) | (1L << (STATEMENT_ID - 517)) | (1L << (STATEMENT - 517)) | (1L << (STATIC - 517)) | (1L << (STATISTICS - 517)) | (1L << (STORE - 517)) | (1L << (STRING - 517)) | (1L << (SUBMULTISET - 517)) | (1L << (SUBPARTITION - 517)) | (1L << (SUBSTITUTABLE - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUCCESS - 517)))) != 0) || ((((_la - 582)) & ~0x3f) == 0 && ((1L << (_la - 582)) & ((1L << (SUSPEND - 582)) | (1L << (SYSDATE - 582)) | (1L << (TEMPORARY - 582)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP - 582)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 582)) | (1L << (TIMESTAMP_UNCONSTRAINED - 582)) | (1L << (TIME - 582)) | (1L << (TIMEZONE_ABBR - 582)) | (1L << (TIMEZONE_HOUR - 582)) | (1L << (TIMEZONE_MINUTE - 582)) | (1L << (TIMEZONE_REGION - 582)) | (1L << (TRAILING - 582)) | (1L << (TRANSACTION - 582)) | (1L << (TRANSLATE - 582)) | (1L << (TREAT - 582)) | (1L << (TRIGGER - 582)) | (1L << (TRUE - 582)) | (1L << (TRUNCATE - 582)) | (1L << (TRUNC - 582)) | (1L << (TYPE - 582)) | (1L << (UNBOUNDED - 582)) | (1L << (UNDER - 582)) | (1L << (UNLIMITED - 582)) | (1L << (UNTIL - 582)) | (1L << (UPDATED - 582)) | (1L << (UPSERT - 582)) | (1L << (UROWID - 582)) | (1L << (USERS - 582)))) != 0) || ((((_la - 646)) & ~0x3f) == 0 && ((1L << (_la - 646)) & ((1L << (USER - 646)) | (1L << (USE - 646)) | (1L << (VALIDATE - 646)) | (1L << (VALUE - 646)) | (1L << (VARCHAR2 - 646)) | (1L << (VARCHAR - 646)) | (1L << (VARIABLE - 646)) | (1L << (VARRAY - 646)) | (1L << (VARYING - 646)) | (1L << (VERSIONS - 646)) | (1L << (VERSION - 646)) | (1L << (WAIT - 646)) | (1L << (WARNING - 646)) | (1L << (WELLFORMED - 646)) | (1L << (WHENEVER - 646)) | (1L << (WHILE - 646)) | (1L << (WITHIN - 646)) | (1L << (WORK - 646)) | (1L << (WRITE - 646)) | (1L << (XMLAGG - 646)) | (1L << (XMLATTRIBUTES - 646)) | (1L << (XMLCAST - 646)) | (1L << (XMLCOLATTVAL - 646)) | (1L << (XMLELEMENT - 646)) | (1L << (XMLEXISTS - 646)) | (1L << (XMLFOREST - 646)) | (1L << (XMLNAMESPACES - 646)) | (1L << (XMLPARSE - 646)) | (1L << (XMLPI - 646)) | (1L << (XMLQUERY - 646)) | (1L << (XMLROOT - 646)) | (1L << (XMLSERIALIZE - 646)) | (1L << (XMLTABLE - 646)) | (1L << (XMLTYPE - 646)) | (1L << (XML - 646)) | (1L << (YEAR - 646)) | (1L << (YES - 646)) | (1L << (YMINTERVAL_UNCONSTRAINED - 646)) | (1L << (ZONE - 646)) | (1L << (PREDICTION - 646)) | (1L << (PREDICTION_BOUNDS - 646)) | (1L << (PREDICTION_COST - 646)) | (1L << (PREDICTION_DETAILS - 646)) | (1L << (PREDICTION_PROBABILITY - 646)) | (1L << (PREDICTION_SET - 646)) | (1L << (CUME_DIST - 646)) | (1L << (DENSE_RANK - 646)) | (1L << (LISTAGG - 646)) | (1L << (PERCENT_RANK - 646)) | (1L << (PERCENTILE_CONT - 646)) | (1L << (PERCENTILE_DISC - 646)))) != 0) || ((((_la - 710)) & ~0x3f) == 0 && ((1L << (_la - 710)) & ((1L << (RANK - 710)) | (1L << (AVG - 710)) | (1L << (CORR - 710)) | (1L << (COVAR_ - 710)) | (1L << (DECODE - 710)) | (1L << (LAG - 710)) | (1L << (LEAD - 710)) | (1L << (MAX - 710)) | (1L << (MEDIAN - 710)) | (1L << (MIN - 710)) | (1L << (NTILE - 710)) | (1L << (NVL - 710)) | (1L << (RATIO_TO_REPORT - 710)) | (1L << (REGR_ - 710)) | (1L << (ROUND - 710)) | (1L << (ROW_NUMBER - 710)) | (1L << (SUBSTR - 710)) | (1L << (TO_CHAR - 710)) | (1L << (TRIM - 710)) | (1L << (SUM - 710)) | (1L << (STDDEV - 710)) | (1L << (VAR_ - 710)) | (1L << (VARIANCE - 710)) | (1L << (LEAST - 710)) | (1L << (GREATEST - 710)) | (1L << (TO_DATE - 710)) | (1L << (VARIABLE_SESSION - 710)) | (1L << (NATIONAL_CHAR_STRING_LIT - 710)) | (1L << (UNSIGNED_INTEGER - 710)) | (1L << (APPROXIMATE_NUM_LIT - 710)) | (1L << (CHAR_STRING - 710)) | (1L << (DELIMITED_ID - 710)) | (1L << (LEFT_PAREN - 710)) | (1L << (PLUS_SIGN - 710)) | (1L << (MINUS_SIGN - 710)) | (1L << (COMMA - 710)) | (1L << (BINDVAR - 710)) | (1L << (COLON - 710)) | (1L << (INTRODUCER - 710)))) != 0) || _la==REGULAR_ID );
				}
				break;
			}
			State = 8216; Match(RIGHT_PAREN);
			State = 8218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1178,Context) ) {
			case 1:
				{
				State = 8217; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Respect_or_ignore_nullsContext : ParserRuleContext {
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode RESPECT() { return GetToken(PlSqlParser.RESPECT, 0); }
		public ITerminalNode IGNORE() { return GetToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_respect_or_ignore_nulls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRespect_or_ignore_nulls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(Context, State);
		EnterRule(_localctx, 1098, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8220;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8221; Match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_specContext : ParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode PERCENT_ROWTYPE() { return GetToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public ITerminalNode PERCENT_TYPE() { return GetToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_specContext type_spec() {
		Type_specContext _localctx = new Type_specContext(Context, State);
		EnterRule(_localctx, 1100, RULE_type_spec);
		int _la;
		try {
			State = 8231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1181,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8223; datatype();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8225;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1179,Context) ) {
				case 1:
					{
					State = 8224; Match(REF);
					}
					break;
				}
				State = 8227; type_name();
				State = 8229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					State = 8228;
					_la = TokenStream.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return GetRuleContext<Native_datatype_elementContext>(0);
		}
		public Precision_partContext precision_part() {
			return GetRuleContext<Precision_partContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(PlSqlParser.WITH, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ITerminalNode CHARACTER() { return GetToken(PlSqlParser.CHARACTER, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(Context, State);
		EnterRule(_localctx, 1102, RULE_datatype);
		int _la;
		try {
			State = 8264;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHARACTER:
			case CHAR:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INTEGER:
			case INT:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR2:
			case VARCHAR:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8233; native_datatype_element();
				State = 8235;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1182,Context) ) {
				case 1:
					{
					State = 8234; precision_part();
					}
					break;
				}
				State = 8246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1184,Context) ) {
				case 1:
					{
					State = 8237; Match(WITH);
					State = 8239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LOCAL) {
						{
						State = 8238; Match(LOCAL);
						}
					}

					State = 8241; Match(TIME);
					State = 8242; Match(ZONE);
					}
					break;
				case 2:
					{
					State = 8243; Match(CHARACTER);
					State = 8244; Match(SET);
					State = 8245; char_set_name();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8248; Match(INTERVAL);
				State = 8249;
				_la = TokenStream.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT_PAREN) {
					{
					State = 8250; Match(LEFT_PAREN);
					State = 8251; expression();
					State = 8252; Match(RIGHT_PAREN);
					}
				}

				State = 8256; Match(TO);
				State = 8257;
				_la = TokenStream.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1186,Context) ) {
				case 1:
					{
					State = 8258; Match(LEFT_PAREN);
					State = 8259; expression();
					State = 8260; Match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Precision_partContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public NumericContext[] numeric() {
			return GetRuleContexts<NumericContext>();
		}
		public NumericContext numeric(int i) {
			return GetRuleContext<NumericContext>(i);
		}
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public ITerminalNode CHAR() { return GetToken(PlSqlParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecision_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Precision_partContext precision_part() {
		Precision_partContext _localctx = new Precision_partContext(Context, State);
		EnterRule(_localctx, 1104, RULE_precision_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8266; Match(LEFT_PAREN);
			State = 8267; numeric();
			State = 8270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 8268; Match(COMMA);
				State = 8269; numeric();
				}
			}

			State = 8273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				State = 8272;
				_la = TokenStream.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 8275; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Native_datatype_elementContext : ParserRuleContext {
		public ITerminalNode BINARY_INTEGER() { return GetToken(PlSqlParser.BINARY_INTEGER, 0); }
		public ITerminalNode PLS_INTEGER() { return GetToken(PlSqlParser.PLS_INTEGER, 0); }
		public ITerminalNode NATURAL() { return GetToken(PlSqlParser.NATURAL, 0); }
		public ITerminalNode BINARY_FLOAT() { return GetToken(PlSqlParser.BINARY_FLOAT, 0); }
		public ITerminalNode BINARY_DOUBLE() { return GetToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public ITerminalNode NATURALN() { return GetToken(PlSqlParser.NATURALN, 0); }
		public ITerminalNode POSITIVE() { return GetToken(PlSqlParser.POSITIVE, 0); }
		public ITerminalNode POSITIVEN() { return GetToken(PlSqlParser.POSITIVEN, 0); }
		public ITerminalNode SIGNTYPE() { return GetToken(PlSqlParser.SIGNTYPE, 0); }
		public ITerminalNode SIMPLE_INTEGER() { return GetToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public ITerminalNode NVARCHAR2() { return GetToken(PlSqlParser.NVARCHAR2, 0); }
		public ITerminalNode DEC() { return GetToken(PlSqlParser.DEC, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlSqlParser.INTEGER, 0); }
		public ITerminalNode INT() { return GetToken(PlSqlParser.INT, 0); }
		public ITerminalNode NUMERIC() { return GetToken(PlSqlParser.NUMERIC, 0); }
		public ITerminalNode SMALLINT() { return GetToken(PlSqlParser.SMALLINT, 0); }
		public ITerminalNode NUMBER() { return GetToken(PlSqlParser.NUMBER, 0); }
		public ITerminalNode DECIMAL() { return GetToken(PlSqlParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(PlSqlParser.DOUBLE, 0); }
		public ITerminalNode PRECISION() { return GetToken(PlSqlParser.PRECISION, 0); }
		public ITerminalNode FLOAT() { return GetToken(PlSqlParser.FLOAT, 0); }
		public ITerminalNode REAL() { return GetToken(PlSqlParser.REAL, 0); }
		public ITerminalNode NCHAR() { return GetToken(PlSqlParser.NCHAR, 0); }
		public ITerminalNode LONG() { return GetToken(PlSqlParser.LONG, 0); }
		public ITerminalNode RAW() { return GetToken(PlSqlParser.RAW, 0); }
		public ITerminalNode CHAR() { return GetToken(PlSqlParser.CHAR, 0); }
		public ITerminalNode CHARACTER() { return GetToken(PlSqlParser.CHARACTER, 0); }
		public ITerminalNode VARCHAR2() { return GetToken(PlSqlParser.VARCHAR2, 0); }
		public ITerminalNode VARCHAR() { return GetToken(PlSqlParser.VARCHAR, 0); }
		public ITerminalNode STRING() { return GetToken(PlSqlParser.STRING, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(PlSqlParser.BOOLEAN, 0); }
		public ITerminalNode DATE() { return GetToken(PlSqlParser.DATE, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode UROWID() { return GetToken(PlSqlParser.UROWID, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode HOUR() { return GetToken(PlSqlParser.HOUR, 0); }
		public ITerminalNode MINUTE() { return GetToken(PlSqlParser.MINUTE, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public ITerminalNode TIMEZONE_REGION() { return GetToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public ITerminalNode TIMEZONE_ABBR() { return GetToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMP_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public ITerminalNode YMINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode DSINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode BFILE() { return GetToken(PlSqlParser.BFILE, 0); }
		public ITerminalNode BLOB() { return GetToken(PlSqlParser.BLOB, 0); }
		public ITerminalNode CLOB() { return GetToken(PlSqlParser.CLOB, 0); }
		public ITerminalNode NCLOB() { return GetToken(PlSqlParser.NCLOB, 0); }
		public ITerminalNode MLSLABEL() { return GetToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_native_datatype_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNative_datatype_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Native_datatype_elementContext native_datatype_element() {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(Context, State);
		EnterRule(_localctx, 1106, RULE_native_datatype_element);
		try {
			State = 8337;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8277; Match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8278; Match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8279; Match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8280; Match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8281; Match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8282; Match(NATURALN);
				}
				break;
			case POSITIVE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8283; Match(POSITIVE);
				}
				break;
			case POSITIVEN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8284; Match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8285; Match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8286; Match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8287; Match(NVARCHAR2);
				}
				break;
			case DEC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8288; Match(DEC);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8289; Match(INTEGER);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8290; Match(INT);
				}
				break;
			case NUMERIC:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8291; Match(NUMERIC);
				}
				break;
			case SMALLINT:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8292; Match(SMALLINT);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8293; Match(NUMBER);
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8294; Match(DECIMAL);
				}
				break;
			case DOUBLE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8295; Match(DOUBLE);
				State = 8297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1190,Context) ) {
				case 1:
					{
					State = 8296; Match(PRECISION);
					}
					break;
				}
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8299; Match(FLOAT);
				}
				break;
			case REAL:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8300; Match(REAL);
				}
				break;
			case NCHAR:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8301; Match(NCHAR);
				}
				break;
			case LONG:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8302; Match(LONG);
				State = 8304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1191,Context) ) {
				case 1:
					{
					State = 8303; Match(RAW);
					}
					break;
				}
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8306; Match(CHAR);
				}
				break;
			case CHARACTER:
				EnterOuterAlt(_localctx, 25);
				{
				State = 8307; Match(CHARACTER);
				}
				break;
			case VARCHAR2:
				EnterOuterAlt(_localctx, 26);
				{
				State = 8308; Match(VARCHAR2);
				}
				break;
			case VARCHAR:
				EnterOuterAlt(_localctx, 27);
				{
				State = 8309; Match(VARCHAR);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 28);
				{
				State = 8310; Match(STRING);
				}
				break;
			case RAW:
				EnterOuterAlt(_localctx, 29);
				{
				State = 8311; Match(RAW);
				}
				break;
			case BOOLEAN:
				EnterOuterAlt(_localctx, 30);
				{
				State = 8312; Match(BOOLEAN);
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 31);
				{
				State = 8313; Match(DATE);
				}
				break;
			case ROWID:
				EnterOuterAlt(_localctx, 32);
				{
				State = 8314; Match(ROWID);
				}
				break;
			case UROWID:
				EnterOuterAlt(_localctx, 33);
				{
				State = 8315; Match(UROWID);
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 34);
				{
				State = 8316; Match(YEAR);
				}
				break;
			case MONTH:
				EnterOuterAlt(_localctx, 35);
				{
				State = 8317; Match(MONTH);
				}
				break;
			case DAY:
				EnterOuterAlt(_localctx, 36);
				{
				State = 8318; Match(DAY);
				}
				break;
			case HOUR:
				EnterOuterAlt(_localctx, 37);
				{
				State = 8319; Match(HOUR);
				}
				break;
			case MINUTE:
				EnterOuterAlt(_localctx, 38);
				{
				State = 8320; Match(MINUTE);
				}
				break;
			case SECOND:
				EnterOuterAlt(_localctx, 39);
				{
				State = 8321; Match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				EnterOuterAlt(_localctx, 40);
				{
				State = 8322; Match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				EnterOuterAlt(_localctx, 41);
				{
				State = 8323; Match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				EnterOuterAlt(_localctx, 42);
				{
				State = 8324; Match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				EnterOuterAlt(_localctx, 43);
				{
				State = 8325; Match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 44);
				{
				State = 8326; Match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 45);
				{
				State = 8327; Match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 46);
				{
				State = 8328; Match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 47);
				{
				State = 8329; Match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 48);
				{
				State = 8330; Match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				EnterOuterAlt(_localctx, 49);
				{
				State = 8331; Match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				EnterOuterAlt(_localctx, 50);
				{
				State = 8332; Match(BFILE);
				}
				break;
			case BLOB:
				EnterOuterAlt(_localctx, 51);
				{
				State = 8333; Match(BLOB);
				}
				break;
			case CLOB:
				EnterOuterAlt(_localctx, 52);
				{
				State = 8334; Match(CLOB);
				}
				break;
			case NCLOB:
				EnterOuterAlt(_localctx, 53);
				{
				State = 8335; Match(NCLOB);
				}
				break;
			case MLSLABEL:
				EnterOuterAlt(_localctx, 54);
				{
				State = 8336; Match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bind_variableContext : ParserRuleContext {
		public ITerminalNode[] BINDVAR() { return GetTokens(PlSqlParser.BINDVAR); }
		public ITerminalNode BINDVAR(int i) {
			return GetToken(PlSqlParser.BINDVAR, i);
		}
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public General_element_partContext[] general_element_part() {
			return GetRuleContexts<General_element_partContext>();
		}
		public General_element_partContext general_element_part(int i) {
			return GetRuleContext<General_element_partContext>(i);
		}
		public ITerminalNode INDICATOR() { return GetToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bind_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBind_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bind_variableContext bind_variable() {
		Bind_variableContext _localctx = new Bind_variableContext(Context, State);
		EnterRule(_localctx, 1108, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8342;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINDVAR:
				{
				State = 8339; Match(BINDVAR);
				}
				break;
			case COLON:
				{
				State = 8340; Match(COLON);
				State = 8341; Match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1196,Context) ) {
			case 1:
				{
				State = 8345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDICATOR) {
					{
					State = 8344; Match(INDICATOR);
					}
				}

				State = 8350;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINDVAR:
					{
					State = 8347; Match(BINDVAR);
					}
					break;
				case COLON:
					{
					State = 8348; Match(COLON);
					State = 8349; Match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 8358;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1197,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8354; Match(PERIOD);
					State = 8355; general_element_part();
					}
					} 
				}
				State = 8360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1197,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_elementContext : ParserRuleContext {
		public General_element_partContext[] general_element_part() {
			return GetRuleContexts<General_element_partContext>();
		}
		public General_element_partContext general_element_part(int i) {
			return GetRuleContext<General_element_partContext>(i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_elementContext general_element() {
		General_elementContext _localctx = new General_elementContext(Context, State);
		EnterRule(_localctx, 1110, RULE_general_element);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8361; general_element_part();
			State = 8366;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1198,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8362; Match(PERIOD);
					State = 8363; general_element_part();
					}
					} 
				}
				State = 8368;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1198,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_element_partContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Link_nameContext link_name() {
			return GetRuleContext<Link_nameContext>(0);
		}
		public Function_argumentsContext function_arguments() {
			return GetRuleContext<Function_argumentsContext>(0);
		}
		public Keep_clauseContext keep_clause() {
			return GetRuleContext<Keep_clauseContext>(0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_element_part; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_element_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_element_partContext general_element_part() {
		General_element_partContext _localctx = new General_element_partContext(Context, State);
		EnterRule(_localctx, 1112, RULE_general_element_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8371;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 8369; Match(INTRODUCER);
				State = 8370; char_set_name();
				}
			}

			State = 8373; id_expressions();
			State = 8376;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1200,Context) ) {
			case 1:
				{
				State = 8374; Match(AT_SIGN);
				State = 8375; link_name();
				}
				break;
			}
			State = 8379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1201,Context) ) {
			case 1:
				{
				State = 8378; function_arguments();
				}
				break;
			}
			State = 8382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1202,Context) ) {
			case 1:
				{
				State = 8381; keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_elementContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_elementContext table_element() {
		Table_elementContext _localctx = new Table_elementContext(Context, State);
		EnterRule(_localctx, 1114, RULE_table_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8386;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 8384; Match(INTRODUCER);
				State = 8385; char_set_name();
				}
			}

			State = 8388; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_privilegeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(PlSqlParser.PRIVILEGES, 0); }
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode FLASHBACK() { return GetToken(PlSqlParser.FLASHBACK, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public ITerminalNode INHERIT() { return GetToken(PlSqlParser.INHERIT, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode VIEW() { return GetToken(PlSqlParser.VIEW, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode REFRESH() { return GetToken(PlSqlParser.REFRESH, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode REWRITE() { return GetToken(PlSqlParser.REWRITE, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode REFERENCES() { return GetToken(PlSqlParser.REFERENCES, 0); }
		public ITerminalNode SELECT() { return GetToken(PlSqlParser.SELECT, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ITerminalNode SQL() { return GetToken(PlSqlParser.SQL, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public Object_privilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_privilege; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_privilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_privilegeContext object_privilege() {
		Object_privilegeContext _localctx = new Object_privilegeContext(Context, State);
		EnterRule(_localctx, 1116, RULE_object_privilege);
		int _la;
		try {
			State = 8423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8390; Match(ALL);
				State = 8392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 8391; Match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8394; Match(ALTER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8395; Match(DEBUG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8396; Match(DELETE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8397; Match(EXECUTE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8398; Match(FLASHBACK);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8399; Match(FLASHBACK);
				State = 8400; Match(ARCHIVE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8401; Match(INDEX);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8402; Match(INHERIT);
				State = 8403; Match(PRIVILEGES);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8404; Match(INSERT);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8405; Match(KEEP);
				State = 8406; Match(SEQUENCE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8407; Match(MERGE);
				State = 8408; Match(VIEW);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8409; Match(ON);
				State = 8410; Match(COMMIT);
				State = 8411; Match(REFRESH);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8412; Match(QUERY);
				State = 8413; Match(REWRITE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8414; Match(READ);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8415; Match(REFERENCES);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8416; Match(SELECT);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8417; Match(TRANSLATE);
				State = 8418; Match(SQL);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8419; Match(UNDER);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8420; Match(UPDATE);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8421; Match(USE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8422; Match(WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_privilegeContext : ParserRuleContext {
		public ITerminalNode ALL() { return GetToken(PlSqlParser.ALL, 0); }
		public ITerminalNode PRIVILEGES() { return GetToken(PlSqlParser.PRIVILEGES, 0); }
		public ITerminalNode ADVISOR() { return GetToken(PlSqlParser.ADVISOR, 0); }
		public ITerminalNode ADMINISTER() { return GetToken(PlSqlParser.ADMINISTER, 0); }
		public ITerminalNode SQL() { return GetToken(PlSqlParser.SQL, 0); }
		public ITerminalNode TUNING() { return GetToken(PlSqlParser.TUNING, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode ANY() { return GetToken(PlSqlParser.ANY, 0); }
		public ITerminalNode PROFILE() { return GetToken(PlSqlParser.PROFILE, 0); }
		public ITerminalNode ALTER() { return GetToken(PlSqlParser.ALTER, 0); }
		public ITerminalNode CREATE() { return GetToken(PlSqlParser.CREATE, 0); }
		public ITerminalNode DROP() { return GetToken(PlSqlParser.DROP, 0); }
		public ITerminalNode MANAGEMENT() { return GetToken(PlSqlParser.MANAGEMENT, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode CLUSTER() { return GetToken(PlSqlParser.CLUSTER, 0); }
		public ITerminalNode CONTEXT() { return GetToken(PlSqlParser.CONTEXT, 0); }
		public ITerminalNode EXEMPT() { return GetToken(PlSqlParser.EXEMPT, 0); }
		public ITerminalNode REDACTION() { return GetToken(PlSqlParser.REDACTION, 0); }
		public ITerminalNode POLICY() { return GetToken(PlSqlParser.POLICY, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode LINK() { return GetToken(PlSqlParser.LINK, 0); }
		public ITerminalNode PUBLIC() { return GetToken(PlSqlParser.PUBLIC, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public ITerminalNode CONNECT() { return GetToken(PlSqlParser.CONNECT, 0); }
		public ITerminalNode SESSION() { return GetToken(PlSqlParser.SESSION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(PlSqlParser.PROCEDURE, 0); }
		public ITerminalNode ANALYZE() { return GetToken(PlSqlParser.ANALYZE, 0); }
		public ITerminalNode DICTIONARY() { return GetToken(PlSqlParser.DICTIONARY, 0); }
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode DIRECTORY() { return GetToken(PlSqlParser.DIRECTORY, 0); }
		public ITerminalNode EDITION() { return GetToken(PlSqlParser.EDITION, 0); }
		public ITerminalNode FLASHBACK() { return GetToken(PlSqlParser.FLASHBACK, 0); }
		public ITerminalNode ARCHIVE() { return GetToken(PlSqlParser.ARCHIVE, 0); }
		public ITerminalNode TABLE() { return GetToken(PlSqlParser.TABLE, 0); }
		public ITerminalNode INDEX() { return GetToken(PlSqlParser.INDEX, 0); }
		public ITerminalNode INDEXTYPE() { return GetToken(PlSqlParser.INDEXTYPE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode JOB() { return GetToken(PlSqlParser.JOB, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode CLASS() { return GetToken(PlSqlParser.CLASS, 0); }
		public ITerminalNode PROGRAM() { return GetToken(PlSqlParser.PROGRAM, 0); }
		public ITerminalNode MANAGE() { return GetToken(PlSqlParser.MANAGE, 0); }
		public ITerminalNode SCHEDULER() { return GetToken(PlSqlParser.SCHEDULER, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public ITerminalNode LIBRARY() { return GetToken(PlSqlParser.LIBRARY, 0); }
		public ITerminalNode LOGMINING() { return GetToken(PlSqlParser.LOGMINING, 0); }
		public ITerminalNode MATERIALIZED() { return GetToken(PlSqlParser.MATERIALIZED, 0); }
		public ITerminalNode VIEW() { return GetToken(PlSqlParser.VIEW, 0); }
		public ITerminalNode QUERY() { return GetToken(PlSqlParser.QUERY, 0); }
		public ITerminalNode REWRITE() { return GetToken(PlSqlParser.REWRITE, 0); }
		public ITerminalNode GLOBAL() { return GetToken(PlSqlParser.GLOBAL, 0); }
		public ITerminalNode ON() { return GetToken(PlSqlParser.ON, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode REFRESH() { return GetToken(PlSqlParser.REFRESH, 0); }
		public ITerminalNode MINING() { return GetToken(PlSqlParser.MINING, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode SELECT() { return GetToken(PlSqlParser.SELECT, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode CUBE() { return GetToken(PlSqlParser.CUBE, 0); }
		public ITerminalNode UPDATE() { return GetToken(PlSqlParser.UPDATE, 0); }
		public ITerminalNode MEASURE() { return GetToken(PlSqlParser.MEASURE, 0); }
		public ITerminalNode FOLDER() { return GetToken(PlSqlParser.FOLDER, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode INSERT() { return GetToken(PlSqlParser.INSERT, 0); }
		public ITerminalNode BUILD() { return GetToken(PlSqlParser.BUILD, 0); }
		public ITerminalNode PROCESS() { return GetToken(PlSqlParser.PROCESS, 0); }
		public ITerminalNode OPERATOR() { return GetToken(PlSqlParser.OPERATOR, 0); }
		public ITerminalNode OUTLINE() { return GetToken(PlSqlParser.OUTLINE, 0); }
		public ITerminalNode PLUGGABLE() { return GetToken(PlSqlParser.PLUGGABLE, 0); }
		public ITerminalNode CONTAINER() { return GetToken(PlSqlParser.CONTAINER, 0); }
		public ITerminalNode ROLE() { return GetToken(PlSqlParser.ROLE, 0); }
		public ITerminalNode GRANT() { return GetToken(PlSqlParser.GRANT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(PlSqlParser.SEQUENCE, 0); }
		public ITerminalNode RESTRICTED() { return GetToken(PlSqlParser.RESTRICTED, 0); }
		public ITerminalNode RESOURCE() { return GetToken(PlSqlParser.RESOURCE, 0); }
		public ITerminalNode COST() { return GetToken(PlSqlParser.COST, 0); }
		public ITerminalNode TRANSLATION() { return GetToken(PlSqlParser.TRANSLATION, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ITerminalNode SYNONYM() { return GetToken(PlSqlParser.SYNONYM, 0); }
		public ITerminalNode BACKUP() { return GetToken(PlSqlParser.BACKUP, 0); }
		public ITerminalNode LOCK() { return GetToken(PlSqlParser.LOCK, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode TABLESPACE() { return GetToken(PlSqlParser.TABLESPACE, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode AUDIT() { return GetToken(PlSqlParser.AUDIT, 0); }
		public ITerminalNode BECOME() { return GetToken(PlSqlParser.BECOME, 0); }
		public ITerminalNode CHANGE() { return GetToken(PlSqlParser.CHANGE, 0); }
		public ITerminalNode NOTIFICATION() { return GetToken(PlSqlParser.NOTIFICATION, 0); }
		public ITerminalNode ACCESS() { return GetToken(PlSqlParser.ACCESS, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(PlSqlParser.TRANSACTION, 0); }
		public ITerminalNode PRIVILEGE() { return GetToken(PlSqlParser.PRIVILEGE, 0); }
		public ITerminalNode INHERIT() { return GetToken(PlSqlParser.INHERIT, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode DATE() { return GetToken(PlSqlParser.DATE, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode SYSGUID() { return GetToken(PlSqlParser.SYSGUID, 0); }
		public ITerminalNode PURGE() { return GetToken(PlSqlParser.PURGE, 0); }
		public ITerminalNode DBA_RECYCLEBIN() { return GetToken(PlSqlParser.DBA_RECYCLEBIN, 0); }
		public ITerminalNode RESUMABLE() { return GetToken(PlSqlParser.RESUMABLE, 0); }
		public ITerminalNode SYSBACKUP() { return GetToken(PlSqlParser.SYSBACKUP, 0); }
		public ITerminalNode SYSDBA() { return GetToken(PlSqlParser.SYSDBA, 0); }
		public ITerminalNode SYSDG() { return GetToken(PlSqlParser.SYSDG, 0); }
		public ITerminalNode SYSKM() { return GetToken(PlSqlParser.SYSKM, 0); }
		public ITerminalNode SYSOPER() { return GetToken(PlSqlParser.SYSOPER, 0); }
		public System_privilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system_privilege; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSystem_privilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public System_privilegeContext system_privilege() {
		System_privilegeContext _localctx = new System_privilegeContext(Context, State);
		EnterRule(_localctx, 1118, RULE_system_privilege);
		int _la;
		try {
			State = 8751;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1232,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8425; Match(ALL);
				State = 8426; Match(PRIVILEGES);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8427; Match(ADVISOR);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8428; Match(ADMINISTER);
				State = 8430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8429; Match(ANY);
					}
				}

				State = 8432; Match(SQL);
				State = 8433; Match(TUNING);
				State = 8434; Match(SET);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8435;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8436; Match(ANY);
				State = 8437; Match(SQL);
				State = 8438; Match(PROFILE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8439; Match(ADMINISTER);
				State = 8440; Match(SQL);
				State = 8441; Match(MANAGEMENT);
				State = 8442; Match(OBJECT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8443; Match(CREATE);
				State = 8445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8444; Match(ANY);
					}
				}

				State = 8447; Match(CLUSTER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8448;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8449; Match(ANY);
				State = 8450; Match(CLUSTER);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8451;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8452; Match(ANY);
				State = 8453; Match(CONTEXT);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8454; Match(EXEMPT);
				State = 8455; Match(REDACTION);
				State = 8456; Match(POLICY);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8457; Match(ALTER);
				State = 8458; Match(DATABASE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8459;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PUBLIC) {
					{
					State = 8460; Match(PUBLIC);
					}
				}

				State = 8463; Match(DATABASE);
				State = 8464; Match(LINK);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8465; Match(DROP);
				State = 8466; Match(PUBLIC);
				State = 8467; Match(DATABASE);
				State = 8468; Match(LINK);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8469; Match(DEBUG);
				State = 8470; Match(CONNECT);
				State = 8471; Match(SESSION);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8472; Match(DEBUG);
				State = 8473; Match(ANY);
				State = 8474; Match(PROCEDURE);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8475; Match(ANALYZE);
				State = 8476; Match(ANY);
				State = 8477; Match(DICTIONARY);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8478; Match(CREATE);
				State = 8480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8479; Match(ANY);
					}
				}

				State = 8482; Match(DIMENSION);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8483;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8484; Match(ANY);
				State = 8485; Match(DIMENSION);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8486;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8487; Match(ANY);
				State = 8488; Match(DIRECTORY);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8489;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8490; Match(ANY);
				State = 8491; Match(EDITION);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8492; Match(FLASHBACK);
				State = 8497;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ARCHIVE:
					{
					State = 8493; Match(ARCHIVE);
					State = 8494; Match(ADMINISTER);
					}
					break;
				case ANY:
					{
					State = 8495; Match(ANY);
					State = 8496; Match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8499;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8500; Match(ANY);
				State = 8501; Match(INDEX);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8502; Match(CREATE);
				State = 8504;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8503; Match(ANY);
					}
				}

				State = 8506; Match(INDEXTYPE);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8507;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8508; Match(ANY);
				State = 8509; Match(INDEXTYPE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8510; Match(CREATE);
				State = 8512;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY || _la==EXTERNAL) {
					{
					State = 8511;
					_la = TokenStream.LA(1);
					if ( !(_la==ANY || _la==EXTERNAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 8514; Match(JOB);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 8515; Match(EXECUTE);
				State = 8516; Match(ANY);
				State = 8517;
				_la = TokenStream.LA(1);
				if ( !(_la==CLASS || _la==PROGRAM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 8518; Match(MANAGE);
				State = 8519; Match(SCHEDULER);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 8520; Match(ADMINISTER);
				State = 8521; Match(KEY);
				State = 8522; Match(MANAGEMENT);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 8523; Match(CREATE);
				State = 8525;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8524; Match(ANY);
					}
				}

				State = 8527; Match(LIBRARY);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 8528;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8529; Match(ANY);
				State = 8530; Match(LIBRARY);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 8531; Match(LOGMINING);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 8532; Match(CREATE);
				State = 8534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8533; Match(ANY);
					}
				}

				State = 8536; Match(MATERIALIZED);
				State = 8537; Match(VIEW);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 8538;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8539; Match(ANY);
				State = 8540; Match(MATERIALIZED);
				State = 8541; Match(VIEW);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 8543;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL) {
					{
					State = 8542; Match(GLOBAL);
					}
				}

				State = 8545; Match(QUERY);
				State = 8546; Match(REWRITE);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 8547; Match(ON);
				State = 8548; Match(COMMIT);
				State = 8549; Match(REFRESH);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 8550; Match(CREATE);
				State = 8552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8551; Match(ANY);
					}
				}

				State = 8554; Match(MINING);
				State = 8555; Match(MODEL);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 8556;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==COMMENT || _la==DROP || _la==SELECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8557; Match(ANY);
				State = 8558; Match(MINING);
				State = 8559; Match(MODEL);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 8560; Match(CREATE);
				State = 8562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8561; Match(ANY);
					}
				}

				State = 8564; Match(CUBE);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 8565;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8566; Match(ANY);
				State = 8567; Match(CUBE);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 8568; Match(CREATE);
				State = 8570;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8569; Match(ANY);
					}
				}

				State = 8572; Match(MEASURE);
				State = 8573; Match(FOLDER);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 8574;
				_la = TokenStream.LA(1);
				if ( !(_la==DELETE || _la==DROP || _la==INSERT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8575; Match(ANY);
				State = 8576; Match(MEASURE);
				State = 8577; Match(FOLDER);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 8578; Match(CREATE);
				State = 8580;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8579; Match(ANY);
					}
				}

				State = 8582; Match(CUBE);
				State = 8583; Match(DIMENSION);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 8584;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DELETE || _la==DROP || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8585; Match(ANY);
				State = 8586; Match(CUBE);
				State = 8587; Match(DIMENSION);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 8588; Match(CREATE);
				State = 8590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8589; Match(ANY);
					}
				}

				State = 8592; Match(CUBE);
				State = 8593; Match(BUILD);
				State = 8594; Match(PROCESS);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 8595;
				_la = TokenStream.LA(1);
				if ( !(_la==DROP || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8596; Match(ANY);
				State = 8597; Match(CUBE);
				State = 8598; Match(BUILD);
				State = 8599; Match(PROCESS);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 8600; Match(CREATE);
				State = 8602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8601; Match(ANY);
					}
				}

				State = 8604; Match(OPERATOR);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 8605;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8606; Match(ANY);
				State = 8607; Match(OPERATOR);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 8608;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8609; Match(ANY);
				State = 8610; Match(OUTLINE);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 8611; Match(CREATE);
				State = 8612; Match(PLUGGABLE);
				State = 8613; Match(DATABASE);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 8614; Match(SET);
				State = 8615; Match(CONTAINER);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 8616; Match(CREATE);
				State = 8618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8617; Match(ANY);
					}
				}

				State = 8620; Match(PROCEDURE);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 8621;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8622; Match(ANY);
				State = 8623; Match(PROCEDURE);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 8624;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8625; Match(PROFILE);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 8626; Match(CREATE);
				State = 8627; Match(ROLE);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 8628;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==GRANT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8629; Match(ANY);
				State = 8630; Match(ROLE);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 8631;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8632; Match(ROLLBACK);
				State = 8633; Match(SEGMENT);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 8634; Match(CREATE);
				State = 8636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8635; Match(ANY);
					}
				}

				State = 8638; Match(SEQUENCE);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 8639;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==SELECT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8640; Match(ANY);
				State = 8641; Match(SEQUENCE);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 8642;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==RESTRICTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8643; Match(SESSION);
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 8644; Match(ALTER);
				State = 8645; Match(RESOURCE);
				State = 8646; Match(COST);
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 8647; Match(CREATE);
				State = 8649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8648; Match(ANY);
					}
				}

				State = 8651; Match(SQL);
				State = 8652; Match(TRANSLATION);
				State = 8653; Match(PROFILE);
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 8654;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==USE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8655; Match(ANY);
				State = 8656; Match(SQL);
				State = 8657; Match(TRANSLATION);
				State = 8658; Match(PROFILE);
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 8659; Match(TRANSLATE);
				State = 8660; Match(ANY);
				State = 8661; Match(SQL);
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 8662; Match(CREATE);
				State = 8664;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8663; Match(ANY);
					}
				}

				State = 8666; Match(SYNONYM);
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 8667; Match(DROP);
				State = 8668; Match(ANY);
				State = 8669; Match(SYNONYM);
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 8670;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8671; Match(PUBLIC);
				State = 8672; Match(SYNONYM);
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 8673; Match(CREATE);
				State = 8675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8674; Match(ANY);
					}
				}

				State = 8677; Match(TABLE);
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 8678;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==BACKUP || _la==COMMENT || _la==DELETE || _la==DROP || _la==INSERT || _la==LOCK || _la==READ || _la==SELECT || _la==UPDATE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8679; Match(ANY);
				State = 8680; Match(TABLE);
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 8681;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP || _la==MANAGE || _la==UNLIMITED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8682; Match(TABLESPACE);
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 8683; Match(CREATE);
				State = 8685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8684; Match(ANY);
					}
				}

				State = 8687; Match(TRIGGER);
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 8688;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8689; Match(ANY);
				State = 8690; Match(TRIGGER);
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 8691; Match(ADMINISTER);
				State = 8692; Match(DATABASE);
				State = 8693; Match(TRIGGER);
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 8694; Match(CREATE);
				State = 8696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8695; Match(ANY);
					}
				}

				State = 8698; Match(TYPE);
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 8699;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==DROP || _la==EXECUTE || _la==UNDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8700; Match(ANY);
				State = 8701; Match(TYPE);
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 8702;
				_la = TokenStream.LA(1);
				if ( !(_la==ALTER || _la==CREATE || _la==DROP) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8703; Match(USER);
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 8704; Match(CREATE);
				State = 8706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8705; Match(ANY);
					}
				}

				State = 8708; Match(VIEW);
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 8709;
				_la = TokenStream.LA(1);
				if ( !(_la==DROP || _la==MERGE || _la==UNDER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8710; Match(ANY);
				State = 8711; Match(VIEW);
				}
				break;
			case 77:
				EnterOuterAlt(_localctx, 77);
				{
				State = 8712;
				_la = TokenStream.LA(1);
				if ( !(_la==ANALYZE || _la==AUDIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8713; Match(ANY);
				}
				break;
			case 78:
				EnterOuterAlt(_localctx, 78);
				{
				State = 8714; Match(BECOME);
				State = 8715; Match(USER);
				}
				break;
			case 79:
				EnterOuterAlt(_localctx, 79);
				{
				State = 8716; Match(CHANGE);
				State = 8717; Match(NOTIFICATION);
				}
				break;
			case 80:
				EnterOuterAlt(_localctx, 80);
				{
				State = 8718; Match(EXEMPT);
				State = 8719; Match(ACCESS);
				State = 8720; Match(POLICY);
				}
				break;
			case 81:
				EnterOuterAlt(_localctx, 81);
				{
				State = 8721; Match(FORCE);
				State = 8723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ANY) {
					{
					State = 8722; Match(ANY);
					}
				}

				State = 8725; Match(TRANSACTION);
				}
				break;
			case 82:
				EnterOuterAlt(_localctx, 82);
				{
				State = 8726; Match(GRANT);
				State = 8727; Match(ANY);
				State = 8729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OBJECT) {
					{
					State = 8728; Match(OBJECT);
					}
				}

				State = 8731; Match(PRIVILEGE);
				}
				break;
			case 83:
				EnterOuterAlt(_localctx, 83);
				{
				State = 8732; Match(INHERIT);
				State = 8733; Match(ANY);
				State = 8734; Match(PRIVILEGES);
				}
				break;
			case 84:
				EnterOuterAlt(_localctx, 84);
				{
				State = 8735; Match(KEEP);
				State = 8736; Match(DATE);
				State = 8737; Match(TIME);
				}
				break;
			case 85:
				EnterOuterAlt(_localctx, 85);
				{
				State = 8738; Match(KEEP);
				State = 8739; Match(SYSGUID);
				}
				break;
			case 86:
				EnterOuterAlt(_localctx, 86);
				{
				State = 8740; Match(PURGE);
				State = 8741; Match(DBA_RECYCLEBIN);
				}
				break;
			case 87:
				EnterOuterAlt(_localctx, 87);
				{
				State = 8742; Match(RESUMABLE);
				}
				break;
			case 88:
				EnterOuterAlt(_localctx, 88);
				{
				State = 8743; Match(SELECT);
				State = 8744; Match(ANY);
				State = 8745;
				_la = TokenStream.LA(1);
				if ( !(_la==DICTIONARY || _la==TRANSACTION) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 89:
				EnterOuterAlt(_localctx, 89);
				{
				State = 8746; Match(SYSBACKUP);
				}
				break;
			case 90:
				EnterOuterAlt(_localctx, 90);
				{
				State = 8747; Match(SYSDBA);
				}
				break;
			case 91:
				EnterOuterAlt(_localctx, 91);
				{
				State = 8748; Match(SYSDG);
				}
				break;
			case 92:
				EnterOuterAlt(_localctx, 92);
				{
				State = 8749; Match(SYSKM);
				}
				break;
			case 93:
				EnterOuterAlt(_localctx, 93);
				{
				State = 8750; Match(SYSOPER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 1120, RULE_literal);
		try {
			State = 8755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8753; constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8754; function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_datetimeContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(PlSqlParser.DATE, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Literal_datetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_datetime; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_datetime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_datetimeContext literal_datetime() {
		Literal_datetimeContext _localctx = new Literal_datetimeContext(Context, State);
		EnterRule(_localctx, 1122, RULE_literal_datetime);
		try {
			State = 8760;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8757; Match(DATE);
				State = 8758; @string();
				}
				break;
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8759; function_call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public StringContext[] @string() {
			return GetRuleContexts<StringContext>();
		}
		public StringContext @string(int i) {
			return GetRuleContext<StringContext>(i);
		}
		public Bind_variableContext[] bind_variable() {
			return GetRuleContexts<Bind_variableContext>();
		}
		public Bind_variableContext bind_variable(int i) {
			return GetRuleContext<Bind_variableContext>(i);
		}
		public ITerminalNode AT() { return GetToken(PlSqlParser.AT, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode[] DAY() { return GetTokens(PlSqlParser.DAY); }
		public ITerminalNode DAY(int i) {
			return GetToken(PlSqlParser.DAY, i);
		}
		public ITerminalNode[] HOUR() { return GetTokens(PlSqlParser.HOUR); }
		public ITerminalNode HOUR(int i) {
			return GetToken(PlSqlParser.HOUR, i);
		}
		public ITerminalNode[] MINUTE() { return GetTokens(PlSqlParser.MINUTE); }
		public ITerminalNode MINUTE(int i) {
			return GetToken(PlSqlParser.MINUTE, i);
		}
		public ITerminalNode[] SECOND() { return GetTokens(PlSqlParser.SECOND); }
		public ITerminalNode SECOND(int i) {
			return GetToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return GetRuleContext<General_element_partContext>(0);
		}
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(PlSqlParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(PlSqlParser.LEFT_PAREN, i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(PlSqlParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(PlSqlParser.RIGHT_PAREN, i);
		}
		public ITerminalNode TO() { return GetToken(PlSqlParser.TO, 0); }
		public ITerminalNode[] UNSIGNED_INTEGER() { return GetTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public ITerminalNode UNSIGNED_INTEGER(int i) {
			return GetToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public ITerminalNode COMMA() { return GetToken(PlSqlParser.COMMA, 0); }
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public ITerminalNode DATE() { return GetToken(PlSqlParser.DATE, 0); }
		public ITerminalNode NULL() { return GetToken(PlSqlParser.NULL, 0); }
		public ITerminalNode TRUE() { return GetToken(PlSqlParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(PlSqlParser.FALSE, 0); }
		public ITerminalNode DBTIMEZONE() { return GetToken(PlSqlParser.DBTIMEZONE, 0); }
		public ITerminalNode SESSIONTIMEZONE() { return GetToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(PlSqlParser.MINVALUE, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode DEFAULT() { return GetToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 1124, RULE_constant);
		int _la;
		try {
			State = 8824;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TIMESTAMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8762; Match(TIMESTAMP);
				State = 8765;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 8763; @string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					State = 8764; bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8771;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1236,Context) ) {
				case 1:
					{
					State = 8767; Match(AT);
					State = 8768; Match(TIME);
					State = 8769; Match(ZONE);
					State = 8770; @string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8773; Match(INTERVAL);
				State = 8777;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					State = 8774; @string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					State = 8775; bind_variable();
					}
					break;
				case ACCOUNT:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case A_LETTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BUILD:
				case BULK:
				case BYTE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHARACTER:
				case CHAR:
				case CHAR_CS:
				case CHR:
				case C_LETTER:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID_ALL:
				case CORRUPT_XID:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATABASE:
				case DATA:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case ID:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INTEGER:
				case INTERVAL:
				case INT:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LINK:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINIMUM:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR_CS:
				case NCHAR:
				case NCLOB:
				case NESTED:
				case NEW:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NO:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case OPERATOR:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUTER:
				case OUT:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVEN:
				case POSITIVE:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIVILEGE:
				case PROGRAM:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REFERENCE:
				case REFERENCING:
				case REF:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT_CACHE:
				case RESULT:
				case RETURNING:
				case RETURN:
				case REUSE:
				case REVERSE:
				case REVOKE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROWID:
				case ROW:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVEPOINT:
				case SAVE:
				case SCHEMACHECK:
				case SCHEMA:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT_ID:
				case STATEMENT:
				case STATIC:
				case STATISTICS:
				case STORE:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case SYSDATE:
				case TEMPORARY:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIME:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USERS:
				case USER:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR2:
				case VARCHAR:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSIONS:
				case VERSION:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case XMLTYPE:
				case XML:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					State = 8776; general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8779;
				_la = TokenStream.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8793;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1241,Context) ) {
				case 1:
					{
					State = 8780; Match(LEFT_PAREN);
					State = 8783;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						State = 8781; Match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						State = 8782; bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 8790;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 8785; Match(COMMA);
						State = 8788;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							State = 8786; Match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							State = 8787; bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					State = 8792; Match(RIGHT_PAREN);
					}
					break;
				}
				State = 8810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1245,Context) ) {
				case 1:
					{
					State = 8795; Match(TO);
					State = 8808;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DAY:
						{
						State = 8796; Match(DAY);
						}
						break;
					case HOUR:
						{
						State = 8797; Match(HOUR);
						}
						break;
					case MINUTE:
						{
						State = 8798; Match(MINUTE);
						}
						break;
					case SECOND:
						{
						State = 8799; Match(SECOND);
						State = 8806;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1243,Context) ) {
						case 1:
							{
							State = 8800; Match(LEFT_PAREN);
							State = 8803;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								State = 8801; Match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								State = 8802; bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 8805; Match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case PLUS_SIGN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8812; numeric();
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8813; Match(DATE);
				State = 8814; @string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8815; @string();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8816; Match(NULL);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8817; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8818; Match(FALSE);
				}
				break;
			case DBTIMEZONE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8819; Match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8820; Match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8821; Match(MINVALUE);
				}
				break;
			case MAXVALUE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8822; Match(MAXVALUE);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8823; Match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public Id_expressionContext id_expression() {
			return GetRuleContext<Id_expressionContext>(0);
		}
		public ITerminalNode INTRODUCER() { return GetToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return GetRuleContext<Char_set_nameContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1126, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTRODUCER) {
				{
				State = 8826; Match(INTRODUCER);
				State = 8827; char_set_name();
				}
			}

			State = 8830; id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Synonym_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_synonym_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSynonym_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Synonym_nameContext synonym_name() {
		Synonym_nameContext _localctx = new Synonym_nameContext(Context, State);
		EnterRule(_localctx, 1128, RULE_synonym_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8832; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Package_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_package_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackage_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Package_nameContext package_name() {
		Package_nameContext _localctx = new Package_nameContext(Context, State);
		EnterRule(_localctx, 1130, RULE_package_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8834; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_nameContext parameter_name() {
		Parameter_nameContext _localctx = new Parameter_nameContext(Context, State);
		EnterRule(_localctx, 1132, RULE_parameter_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8836; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_model_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_model_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_model_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_model_nameContext reference_model_name() {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(Context, State);
		EnterRule(_localctx, 1134, RULE_reference_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8838; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cost_class_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cost_class_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCost_class_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cost_class_nameContext cost_class_name() {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(Context, State);
		EnterRule(_localctx, 1136, RULE_cost_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8840; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 1138, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8842; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Savepoint_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepoint_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepoint_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Savepoint_nameContext savepoint_name() {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(Context, State);
		EnterRule(_localctx, 1140, RULE_savepoint_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8844; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_segment_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_segment_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollback_segment_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_segment_nameContext rollback_segment_name() {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(Context, State);
		EnterRule(_localctx, 1142, RULE_rollback_segment_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8846; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_var_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_var_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_var_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_var_nameContext table_var_name() {
		Table_var_nameContext _localctx = new Table_var_nameContext(Context, State);
		EnterRule(_localctx, 1144, RULE_table_var_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8848; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Schema_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Schema_nameContext schema_name() {
		Schema_nameContext _localctx = new Schema_nameContext(Context, State);
		EnterRule(_localctx, 1146, RULE_schema_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8850; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Main_model_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_main_model_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMain_model_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Main_model_nameContext main_model_name() {
		Main_model_nameContext _localctx = new Main_model_nameContext(Context, State);
		EnterRule(_localctx, 1148, RULE_main_model_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8852; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_nameContext query_name() {
		Query_nameContext _localctx = new Query_nameContext(Context, State);
		EnterRule(_localctx, 1150, RULE_query_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8854; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Log_group_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Log_group_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log_group_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLog_group_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Log_group_nameContext log_group_name() {
		Log_group_nameContext _localctx = new Log_group_nameContext(Context, State);
		EnterRule(_localctx, 1152, RULE_log_group_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8856; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiersContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public IdentifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiers; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiersContext identifiers() {
		IdentifiersContext _localctx = new IdentifiersContext(Context, State);
		EnterRule(_localctx, 1154, RULE_identifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8858; identifier();
			State = 8863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PERIOD) {
				{
				{
				State = 8859; Match(PERIOD);
				State = 8860; id_expression();
				}
				}
				State = 8865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aggregate_function_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregate_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregate_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Aggregate_function_nameContext aggregate_function_name() {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(Context, State);
		EnterRule(_localctx, 1156, RULE_aggregate_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8866; identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitException_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exception_nameContext exception_name() {
		Exception_nameContext _localctx = new Exception_nameContext(Context, State);
		EnterRule(_localctx, 1158, RULE_exception_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8868; identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public IdentifiersContext identifiers() {
			return GetRuleContext<IdentifiersContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 1160, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8870; identifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_expressionContext : ParserRuleContext {
		public Regular_idContext regular_id() {
			return GetRuleContext<Regular_idContext>(0);
		}
		public ITerminalNode DELIMITED_ID() { return GetToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_expressionContext id_expression() {
		Id_expressionContext _localctx = new Id_expressionContext(Context, State);
		EnterRule(_localctx, 1162, RULE_id_expression);
		try {
			State = 8874;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case A_LETTER:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BUILD:
			case BULK:
			case BYTE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHARACTER:
			case CHAR:
			case CHAR_CS:
			case CHR:
			case C_LETTER:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID_ALL:
			case CORRUPT_XID:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATABASE:
			case DATA:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case ID:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INTEGER:
			case INTERVAL:
			case INT:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LINK:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINIMUM:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR_CS:
			case NCHAR:
			case NCLOB:
			case NESTED:
			case NEW:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NO:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case OPERATOR:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUTER:
			case OUT:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVEN:
			case POSITIVE:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIVILEGE:
			case PROGRAM:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REFERENCE:
			case REFERENCING:
			case REF:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT_CACHE:
			case RESULT:
			case RETURNING:
			case RETURN:
			case REUSE:
			case REVERSE:
			case REVOKE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROWID:
			case ROW:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVEPOINT:
			case SAVE:
			case SCHEMACHECK:
			case SCHEMA:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT_ID:
			case STATEMENT:
			case STATIC:
			case STATISTICS:
			case STORE:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case SYSDATE:
			case TEMPORARY:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIME:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USERS:
			case USER:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR2:
			case VARCHAR:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSIONS:
			case VERSION:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case XMLTYPE:
			case XML:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case REGULAR_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8872; regular_id();
				}
				break;
			case DELIMITED_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8873; Match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_expressionsContext : ParserRuleContext {
		public Id_expressionContext[] id_expression() {
			return GetRuleContexts<Id_expressionContext>();
		}
		public Id_expressionContext id_expression(int i) {
			return GetRuleContext<Id_expressionContext>(i);
		}
		public Id_expressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_expressions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_expressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_expressionsContext id_expressions() {
		Id_expressionsContext _localctx = new Id_expressionsContext(Context, State);
		EnterRule(_localctx, 1164, RULE_id_expressions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8876; id_expression();
			State = 8881;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1250,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8877; Match(PERIOD);
					State = 8878; id_expression();
					}
					} 
				}
				State = 8883;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1250,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 1166, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8884; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sequence_nameContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequence_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequence_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sequence_nameContext sequence_name() {
		Sequence_nameContext _localctx = new Sequence_nameContext(Context, State);
		EnterRule(_localctx, 1168, RULE_sequence_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8886; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Char_set_nameContext : ParserRuleContext {
		public Id_expressionsContext id_expressions() {
			return GetRuleContext<Id_expressionsContext>(0);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char_set_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar_set_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Char_set_nameContext char_set_name() {
		Char_set_nameContext _localctx = new Char_set_nameContext(Context, State);
		EnterRule(_localctx, 1170, RULE_char_set_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8888; id_expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Outer_join_signContext : ParserRuleContext {
		public ITerminalNode LEFT_PAREN() { return GetToken(PlSqlParser.LEFT_PAREN, 0); }
		public ITerminalNode PLUS_SIGN() { return GetToken(PlSqlParser.PLUS_SIGN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(PlSqlParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outer_join_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuter_join_sign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Outer_join_signContext outer_join_sign() {
		Outer_join_signContext _localctx = new Outer_join_signContext(Context, State);
		EnterRule(_localctx, 1172, RULE_outer_join_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8890; Match(LEFT_PAREN);
			State = 8891; Match(PLUS_SIGN);
			State = 8892; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regular_idContext : ParserRuleContext {
		public ITerminalNode REGULAR_ID() { return GetToken(PlSqlParser.REGULAR_ID, 0); }
		public ITerminalNode A_LETTER() { return GetToken(PlSqlParser.A_LETTER, 0); }
		public ITerminalNode ACCOUNT() { return GetToken(PlSqlParser.ACCOUNT, 0); }
		public ITerminalNode ADD() { return GetToken(PlSqlParser.ADD, 0); }
		public ITerminalNode AFTER() { return GetToken(PlSqlParser.AFTER, 0); }
		public ITerminalNode AGENT() { return GetToken(PlSqlParser.AGENT, 0); }
		public ITerminalNode AGGREGATE() { return GetToken(PlSqlParser.AGGREGATE, 0); }
		public ITerminalNode ANALYZE() { return GetToken(PlSqlParser.ANALYZE, 0); }
		public ITerminalNode ARRAY() { return GetToken(PlSqlParser.ARRAY, 0); }
		public ITerminalNode ASSOCIATE() { return GetToken(PlSqlParser.ASSOCIATE, 0); }
		public ITerminalNode AT() { return GetToken(PlSqlParser.AT, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(PlSqlParser.ATTRIBUTE, 0); }
		public ITerminalNode AUDIT() { return GetToken(PlSqlParser.AUDIT, 0); }
		public ITerminalNode AUTHID() { return GetToken(PlSqlParser.AUTHID, 0); }
		public ITerminalNode AUTO() { return GetToken(PlSqlParser.AUTO, 0); }
		public ITerminalNode AUTOMATIC() { return GetToken(PlSqlParser.AUTOMATIC, 0); }
		public ITerminalNode AUTONOMOUS_TRANSACTION() { return GetToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public ITerminalNode BATCH() { return GetToken(PlSqlParser.BATCH, 0); }
		public ITerminalNode BEFORE() { return GetToken(PlSqlParser.BEFORE, 0); }
		public ITerminalNode BFILE() { return GetToken(PlSqlParser.BFILE, 0); }
		public ITerminalNode BINARY_DOUBLE() { return GetToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public ITerminalNode BINARY_FLOAT() { return GetToken(PlSqlParser.BINARY_FLOAT, 0); }
		public ITerminalNode BINARY_INTEGER() { return GetToken(PlSqlParser.BINARY_INTEGER, 0); }
		public ITerminalNode BLOB() { return GetToken(PlSqlParser.BLOB, 0); }
		public ITerminalNode BLOCK() { return GetToken(PlSqlParser.BLOCK, 0); }
		public ITerminalNode BODY() { return GetToken(PlSqlParser.BODY, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(PlSqlParser.BOOLEAN, 0); }
		public ITerminalNode BOTH() { return GetToken(PlSqlParser.BOTH, 0); }
		public ITerminalNode BUILD() { return GetToken(PlSqlParser.BUILD, 0); }
		public ITerminalNode BULK() { return GetToken(PlSqlParser.BULK, 0); }
		public ITerminalNode BYTE() { return GetToken(PlSqlParser.BYTE, 0); }
		public ITerminalNode C_LETTER() { return GetToken(PlSqlParser.C_LETTER, 0); }
		public ITerminalNode CALL() { return GetToken(PlSqlParser.CALL, 0); }
		public ITerminalNode CANONICAL() { return GetToken(PlSqlParser.CANONICAL, 0); }
		public ITerminalNode CASCADE() { return GetToken(PlSqlParser.CASCADE, 0); }
		public ITerminalNode CAST() { return GetToken(PlSqlParser.CAST, 0); }
		public ITerminalNode CHAR() { return GetToken(PlSqlParser.CHAR, 0); }
		public ITerminalNode CHAR_CS() { return GetToken(PlSqlParser.CHAR_CS, 0); }
		public ITerminalNode CHARACTER() { return GetToken(PlSqlParser.CHARACTER, 0); }
		public ITerminalNode CHR() { return GetToken(PlSqlParser.CHR, 0); }
		public ITerminalNode CLOB() { return GetToken(PlSqlParser.CLOB, 0); }
		public ITerminalNode CLOSE() { return GetToken(PlSqlParser.CLOSE, 0); }
		public ITerminalNode CLUSTER() { return GetToken(PlSqlParser.CLUSTER, 0); }
		public ITerminalNode COLLECT() { return GetToken(PlSqlParser.COLLECT, 0); }
		public ITerminalNode COLUMNS() { return GetToken(PlSqlParser.COLUMNS, 0); }
		public ITerminalNode COMMENT() { return GetToken(PlSqlParser.COMMENT, 0); }
		public ITerminalNode COMMIT() { return GetToken(PlSqlParser.COMMIT, 0); }
		public ITerminalNode COMMITTED() { return GetToken(PlSqlParser.COMMITTED, 0); }
		public ITerminalNode COMPATIBILITY() { return GetToken(PlSqlParser.COMPATIBILITY, 0); }
		public ITerminalNode COMPILE() { return GetToken(PlSqlParser.COMPILE, 0); }
		public ITerminalNode COMPOUND() { return GetToken(PlSqlParser.COMPOUND, 0); }
		public ITerminalNode CONSTANT() { return GetToken(PlSqlParser.CONSTANT, 0); }
		public ITerminalNode CONSTRAINT() { return GetToken(PlSqlParser.CONSTRAINT, 0); }
		public ITerminalNode CONSTRAINTS() { return GetToken(PlSqlParser.CONSTRAINTS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(PlSqlParser.CONSTRUCTOR, 0); }
		public ITerminalNode CONTENT() { return GetToken(PlSqlParser.CONTENT, 0); }
		public ITerminalNode CONTEXT() { return GetToken(PlSqlParser.CONTEXT, 0); }
		public ITerminalNode CONTINUE() { return GetToken(PlSqlParser.CONTINUE, 0); }
		public ITerminalNode CONVERT() { return GetToken(PlSqlParser.CONVERT, 0); }
		public ITerminalNode CORRUPT_XID() { return GetToken(PlSqlParser.CORRUPT_XID, 0); }
		public ITerminalNode CORRUPT_XID_ALL() { return GetToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public ITerminalNode COST() { return GetToken(PlSqlParser.COST, 0); }
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public ITerminalNode CROSS() { return GetToken(PlSqlParser.CROSS, 0); }
		public ITerminalNode CUBE() { return GetToken(PlSqlParser.CUBE, 0); }
		public ITerminalNode CURRENT_USER() { return GetToken(PlSqlParser.CURRENT_USER, 0); }
		public ITerminalNode CURSOR() { return GetToken(PlSqlParser.CURSOR, 0); }
		public ITerminalNode CUSTOMDATUM() { return GetToken(PlSqlParser.CUSTOMDATUM, 0); }
		public ITerminalNode CYCLE() { return GetToken(PlSqlParser.CYCLE, 0); }
		public ITerminalNode DATA() { return GetToken(PlSqlParser.DATA, 0); }
		public ITerminalNode DATABASE() { return GetToken(PlSqlParser.DATABASE, 0); }
		public ITerminalNode DAY() { return GetToken(PlSqlParser.DAY, 0); }
		public ITerminalNode DB_ROLE_CHANGE() { return GetToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public ITerminalNode DBTIMEZONE() { return GetToken(PlSqlParser.DBTIMEZONE, 0); }
		public ITerminalNode DDL() { return GetToken(PlSqlParser.DDL, 0); }
		public ITerminalNode DEBUG() { return GetToken(PlSqlParser.DEBUG, 0); }
		public ITerminalNode DEC() { return GetToken(PlSqlParser.DEC, 0); }
		public ITerminalNode DECIMAL() { return GetToken(PlSqlParser.DECIMAL, 0); }
		public ITerminalNode DECOMPOSE() { return GetToken(PlSqlParser.DECOMPOSE, 0); }
		public ITerminalNode DECREMENT() { return GetToken(PlSqlParser.DECREMENT, 0); }
		public ITerminalNode DEFAULTS() { return GetToken(PlSqlParser.DEFAULTS, 0); }
		public ITerminalNode DEFERRED() { return GetToken(PlSqlParser.DEFERRED, 0); }
		public ITerminalNode DEFINER() { return GetToken(PlSqlParser.DEFINER, 0); }
		public ITerminalNode DELETE() { return GetToken(PlSqlParser.DELETE, 0); }
		public ITerminalNode DETERMINISTIC() { return GetToken(PlSqlParser.DETERMINISTIC, 0); }
		public ITerminalNode DIMENSION() { return GetToken(PlSqlParser.DIMENSION, 0); }
		public ITerminalNode DISABLE() { return GetToken(PlSqlParser.DISABLE, 0); }
		public ITerminalNode DISASSOCIATE() { return GetToken(PlSqlParser.DISASSOCIATE, 0); }
		public ITerminalNode DOCUMENT() { return GetToken(PlSqlParser.DOCUMENT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(PlSqlParser.DOUBLE, 0); }
		public ITerminalNode DSINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode EACH() { return GetToken(PlSqlParser.EACH, 0); }
		public ITerminalNode ELEMENT() { return GetToken(PlSqlParser.ELEMENT, 0); }
		public ITerminalNode EMPTY() { return GetToken(PlSqlParser.EMPTY, 0); }
		public ITerminalNode ENABLE() { return GetToken(PlSqlParser.ENABLE, 0); }
		public ITerminalNode ENCODING() { return GetToken(PlSqlParser.ENCODING, 0); }
		public ITerminalNode ENTITYESCAPING() { return GetToken(PlSqlParser.ENTITYESCAPING, 0); }
		public ITerminalNode ERR() { return GetToken(PlSqlParser.ERR, 0); }
		public ITerminalNode ERRORS() { return GetToken(PlSqlParser.ERRORS, 0); }
		public ITerminalNode ESCAPE() { return GetToken(PlSqlParser.ESCAPE, 0); }
		public ITerminalNode EVALNAME() { return GetToken(PlSqlParser.EVALNAME, 0); }
		public ITerminalNode EXCEPTION() { return GetToken(PlSqlParser.EXCEPTION, 0); }
		public ITerminalNode EXCEPTION_INIT() { return GetToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public ITerminalNode EXCEPTIONS() { return GetToken(PlSqlParser.EXCEPTIONS, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(PlSqlParser.EXCLUDE, 0); }
		public ITerminalNode EXECUTE() { return GetToken(PlSqlParser.EXECUTE, 0); }
		public ITerminalNode EXIT() { return GetToken(PlSqlParser.EXIT, 0); }
		public ITerminalNode EXPLAIN() { return GetToken(PlSqlParser.EXPLAIN, 0); }
		public ITerminalNode EXTERNAL() { return GetToken(PlSqlParser.EXTERNAL, 0); }
		public ITerminalNode EXTRACT() { return GetToken(PlSqlParser.EXTRACT, 0); }
		public ITerminalNode FAILURE() { return GetToken(PlSqlParser.FAILURE, 0); }
		public ITerminalNode FINAL() { return GetToken(PlSqlParser.FINAL, 0); }
		public ITerminalNode FIRST() { return GetToken(PlSqlParser.FIRST, 0); }
		public ITerminalNode FIRST_VALUE() { return GetToken(PlSqlParser.FIRST_VALUE, 0); }
		public ITerminalNode FLOAT() { return GetToken(PlSqlParser.FLOAT, 0); }
		public ITerminalNode FOLLOWING() { return GetToken(PlSqlParser.FOLLOWING, 0); }
		public ITerminalNode FOLLOWS() { return GetToken(PlSqlParser.FOLLOWS, 0); }
		public ITerminalNode FORALL() { return GetToken(PlSqlParser.FORALL, 0); }
		public ITerminalNode FORCE() { return GetToken(PlSqlParser.FORCE, 0); }
		public ITerminalNode FULL() { return GetToken(PlSqlParser.FULL, 0); }
		public ITerminalNode FUNCTION() { return GetToken(PlSqlParser.FUNCTION, 0); }
		public ITerminalNode GROUPING() { return GetToken(PlSqlParser.GROUPING, 0); }
		public ITerminalNode HASH() { return GetToken(PlSqlParser.HASH, 0); }
		public ITerminalNode HIDE() { return GetToken(PlSqlParser.HIDE, 0); }
		public ITerminalNode HOUR() { return GetToken(PlSqlParser.HOUR, 0); }
		public ITerminalNode ID() { return GetToken(PlSqlParser.ID, 0); }
		public ITerminalNode IGNORE() { return GetToken(PlSqlParser.IGNORE, 0); }
		public ITerminalNode IMMEDIATE() { return GetToken(PlSqlParser.IMMEDIATE, 0); }
		public ITerminalNode INCLUDE() { return GetToken(PlSqlParser.INCLUDE, 0); }
		public ITerminalNode INCLUDING() { return GetToken(PlSqlParser.INCLUDING, 0); }
		public ITerminalNode INCREMENT() { return GetToken(PlSqlParser.INCREMENT, 0); }
		public ITerminalNode INDENT() { return GetToken(PlSqlParser.INDENT, 0); }
		public ITerminalNode INDEXED() { return GetToken(PlSqlParser.INDEXED, 0); }
		public ITerminalNode INDICATOR() { return GetToken(PlSqlParser.INDICATOR, 0); }
		public ITerminalNode INDICES() { return GetToken(PlSqlParser.INDICES, 0); }
		public ITerminalNode INFINITE() { return GetToken(PlSqlParser.INFINITE, 0); }
		public ITerminalNode INLINE() { return GetToken(PlSqlParser.INLINE, 0); }
		public ITerminalNode INNER() { return GetToken(PlSqlParser.INNER, 0); }
		public ITerminalNode INOUT() { return GetToken(PlSqlParser.INOUT, 0); }
		public ITerminalNode INSTANTIABLE() { return GetToken(PlSqlParser.INSTANTIABLE, 0); }
		public ITerminalNode INSTEAD() { return GetToken(PlSqlParser.INSTEAD, 0); }
		public ITerminalNode INT() { return GetToken(PlSqlParser.INT, 0); }
		public ITerminalNode INTEGER() { return GetToken(PlSqlParser.INTEGER, 0); }
		public ITerminalNode INTERVAL() { return GetToken(PlSqlParser.INTERVAL, 0); }
		public ITerminalNode INVALIDATE() { return GetToken(PlSqlParser.INVALIDATE, 0); }
		public ITerminalNode ISOLATION() { return GetToken(PlSqlParser.ISOLATION, 0); }
		public ITerminalNode ITERATE() { return GetToken(PlSqlParser.ITERATE, 0); }
		public ITerminalNode JAVA() { return GetToken(PlSqlParser.JAVA, 0); }
		public ITerminalNode JOIN() { return GetToken(PlSqlParser.JOIN, 0); }
		public ITerminalNode KEEP() { return GetToken(PlSqlParser.KEEP, 0); }
		public ITerminalNode KEY() { return GetToken(PlSqlParser.KEY, 0); }
		public ITerminalNode LANGUAGE() { return GetToken(PlSqlParser.LANGUAGE, 0); }
		public ITerminalNode LAST() { return GetToken(PlSqlParser.LAST, 0); }
		public ITerminalNode LAST_VALUE() { return GetToken(PlSqlParser.LAST_VALUE, 0); }
		public ITerminalNode LEADING() { return GetToken(PlSqlParser.LEADING, 0); }
		public ITerminalNode LEFT() { return GetToken(PlSqlParser.LEFT, 0); }
		public ITerminalNode LEVEL() { return GetToken(PlSqlParser.LEVEL, 0); }
		public ITerminalNode LIBRARY() { return GetToken(PlSqlParser.LIBRARY, 0); }
		public ITerminalNode LIKE2() { return GetToken(PlSqlParser.LIKE2, 0); }
		public ITerminalNode LIKE4() { return GetToken(PlSqlParser.LIKE4, 0); }
		public ITerminalNode LIKEC() { return GetToken(PlSqlParser.LIKEC, 0); }
		public ITerminalNode LIMIT() { return GetToken(PlSqlParser.LIMIT, 0); }
		public ITerminalNode LINK() { return GetToken(PlSqlParser.LINK, 0); }
		public ITerminalNode LOCAL() { return GetToken(PlSqlParser.LOCAL, 0); }
		public ITerminalNode LOCKED() { return GetToken(PlSqlParser.LOCKED, 0); }
		public ITerminalNode LOG() { return GetToken(PlSqlParser.LOG, 0); }
		public ITerminalNode LOGOFF() { return GetToken(PlSqlParser.LOGOFF, 0); }
		public ITerminalNode LOGON() { return GetToken(PlSqlParser.LOGON, 0); }
		public ITerminalNode LONG() { return GetToken(PlSqlParser.LONG, 0); }
		public ITerminalNode LOOP() { return GetToken(PlSqlParser.LOOP, 0); }
		public ITerminalNode MAIN() { return GetToken(PlSqlParser.MAIN, 0); }
		public ITerminalNode MAP() { return GetToken(PlSqlParser.MAP, 0); }
		public ITerminalNode MATCHED() { return GetToken(PlSqlParser.MATCHED, 0); }
		public ITerminalNode MAXVALUE() { return GetToken(PlSqlParser.MAXVALUE, 0); }
		public ITerminalNode MEASURES() { return GetToken(PlSqlParser.MEASURES, 0); }
		public ITerminalNode MEMBER() { return GetToken(PlSqlParser.MEMBER, 0); }
		public ITerminalNode MERGE() { return GetToken(PlSqlParser.MERGE, 0); }
		public ITerminalNode MINIMUM() { return GetToken(PlSqlParser.MINIMUM, 0); }
		public ITerminalNode MINUTE() { return GetToken(PlSqlParser.MINUTE, 0); }
		public ITerminalNode MINVALUE() { return GetToken(PlSqlParser.MINVALUE, 0); }
		public ITerminalNode MLSLABEL() { return GetToken(PlSqlParser.MLSLABEL, 0); }
		public ITerminalNode MODEL() { return GetToken(PlSqlParser.MODEL, 0); }
		public ITerminalNode MODIFY() { return GetToken(PlSqlParser.MODIFY, 0); }
		public ITerminalNode MONTH() { return GetToken(PlSqlParser.MONTH, 0); }
		public ITerminalNode MULTISET() { return GetToken(PlSqlParser.MULTISET, 0); }
		public ITerminalNode NAME() { return GetToken(PlSqlParser.NAME, 0); }
		public ITerminalNode NAN() { return GetToken(PlSqlParser.NAN, 0); }
		public ITerminalNode NATURAL() { return GetToken(PlSqlParser.NATURAL, 0); }
		public ITerminalNode NATURALN() { return GetToken(PlSqlParser.NATURALN, 0); }
		public ITerminalNode NAV() { return GetToken(PlSqlParser.NAV, 0); }
		public ITerminalNode NCHAR() { return GetToken(PlSqlParser.NCHAR, 0); }
		public ITerminalNode NCHAR_CS() { return GetToken(PlSqlParser.NCHAR_CS, 0); }
		public ITerminalNode NCLOB() { return GetToken(PlSqlParser.NCLOB, 0); }
		public ITerminalNode NESTED() { return GetToken(PlSqlParser.NESTED, 0); }
		public ITerminalNode NEW() { return GetToken(PlSqlParser.NEW, 0); }
		public ITerminalNode NO() { return GetToken(PlSqlParser.NO, 0); }
		public ITerminalNode NOAUDIT() { return GetToken(PlSqlParser.NOAUDIT, 0); }
		public ITerminalNode NOCOPY() { return GetToken(PlSqlParser.NOCOPY, 0); }
		public ITerminalNode NOCYCLE() { return GetToken(PlSqlParser.NOCYCLE, 0); }
		public ITerminalNode NOENTITYESCAPING() { return GetToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public ITerminalNode NONE() { return GetToken(PlSqlParser.NONE, 0); }
		public ITerminalNode NOSCHEMACHECK() { return GetToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public ITerminalNode NULLS() { return GetToken(PlSqlParser.NULLS, 0); }
		public ITerminalNode NUMBER() { return GetToken(PlSqlParser.NUMBER, 0); }
		public ITerminalNode NUMERIC() { return GetToken(PlSqlParser.NUMERIC, 0); }
		public ITerminalNode NVARCHAR2() { return GetToken(PlSqlParser.NVARCHAR2, 0); }
		public ITerminalNode OBJECT() { return GetToken(PlSqlParser.OBJECT, 0); }
		public ITerminalNode OFF() { return GetToken(PlSqlParser.OFF, 0); }
		public ITerminalNode OID() { return GetToken(PlSqlParser.OID, 0); }
		public ITerminalNode OLD() { return GetToken(PlSqlParser.OLD, 0); }
		public ITerminalNode ONLY() { return GetToken(PlSqlParser.ONLY, 0); }
		public ITerminalNode OPEN() { return GetToken(PlSqlParser.OPEN, 0); }
		public ITerminalNode OPERATOR() { return GetToken(PlSqlParser.OPERATOR, 0); }
		public ITerminalNode ORADATA() { return GetToken(PlSqlParser.ORADATA, 0); }
		public ITerminalNode ORDINALITY() { return GetToken(PlSqlParser.ORDINALITY, 0); }
		public ITerminalNode OSERROR() { return GetToken(PlSqlParser.OSERROR, 0); }
		public ITerminalNode OUT() { return GetToken(PlSqlParser.OUT, 0); }
		public ITerminalNode OUTER() { return GetToken(PlSqlParser.OUTER, 0); }
		public ITerminalNode OVER() { return GetToken(PlSqlParser.OVER, 0); }
		public ITerminalNode OVERRIDING() { return GetToken(PlSqlParser.OVERRIDING, 0); }
		public ITerminalNode PACKAGE() { return GetToken(PlSqlParser.PACKAGE, 0); }
		public ITerminalNode PARALLEL_ENABLE() { return GetToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(PlSqlParser.PARAMETERS, 0); }
		public ITerminalNode PARENT() { return GetToken(PlSqlParser.PARENT, 0); }
		public ITerminalNode PARTITION() { return GetToken(PlSqlParser.PARTITION, 0); }
		public ITerminalNode PASSING() { return GetToken(PlSqlParser.PASSING, 0); }
		public ITerminalNode PASSWORD() { return GetToken(PlSqlParser.PASSWORD, 0); }
		public ITerminalNode PATH() { return GetToken(PlSqlParser.PATH, 0); }
		public ITerminalNode PIPELINED() { return GetToken(PlSqlParser.PIPELINED, 0); }
		public ITerminalNode PLAN() { return GetToken(PlSqlParser.PLAN, 0); }
		public ITerminalNode PLS_INTEGER() { return GetToken(PlSqlParser.PLS_INTEGER, 0); }
		public ITerminalNode POSITIVE() { return GetToken(PlSqlParser.POSITIVE, 0); }
		public ITerminalNode POSITIVEN() { return GetToken(PlSqlParser.POSITIVEN, 0); }
		public ITerminalNode PRAGMA() { return GetToken(PlSqlParser.PRAGMA, 0); }
		public ITerminalNode PRECEDING() { return GetToken(PlSqlParser.PRECEDING, 0); }
		public ITerminalNode PRECISION() { return GetToken(PlSqlParser.PRECISION, 0); }
		public ITerminalNode PRESENT() { return GetToken(PlSqlParser.PRESENT, 0); }
		public ITerminalNode PRIVILEGE() { return GetToken(PlSqlParser.PRIVILEGE, 0); }
		public ITerminalNode PROGRAM() { return GetToken(PlSqlParser.PROGRAM, 0); }
		public ITerminalNode RAISE() { return GetToken(PlSqlParser.RAISE, 0); }
		public ITerminalNode RANGE() { return GetToken(PlSqlParser.RANGE, 0); }
		public ITerminalNode RAW() { return GetToken(PlSqlParser.RAW, 0); }
		public ITerminalNode READ() { return GetToken(PlSqlParser.READ, 0); }
		public ITerminalNode REAL() { return GetToken(PlSqlParser.REAL, 0); }
		public ITerminalNode RECORD() { return GetToken(PlSqlParser.RECORD, 0); }
		public ITerminalNode REF() { return GetToken(PlSqlParser.REF, 0); }
		public ITerminalNode REFERENCE() { return GetToken(PlSqlParser.REFERENCE, 0); }
		public ITerminalNode REFERENCING() { return GetToken(PlSqlParser.REFERENCING, 0); }
		public ITerminalNode REJECT() { return GetToken(PlSqlParser.REJECT, 0); }
		public ITerminalNode RELIES_ON() { return GetToken(PlSqlParser.RELIES_ON, 0); }
		public ITerminalNode RENAME() { return GetToken(PlSqlParser.RENAME, 0); }
		public ITerminalNode REPLACE() { return GetToken(PlSqlParser.REPLACE, 0); }
		public ITerminalNode RESPECT() { return GetToken(PlSqlParser.RESPECT, 0); }
		public ITerminalNode RESTRICT_REFERENCES() { return GetToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public ITerminalNode RESULT() { return GetToken(PlSqlParser.RESULT, 0); }
		public ITerminalNode RESULT_CACHE() { return GetToken(PlSqlParser.RESULT_CACHE, 0); }
		public ITerminalNode RETURN() { return GetToken(PlSqlParser.RETURN, 0); }
		public ITerminalNode RETURNING() { return GetToken(PlSqlParser.RETURNING, 0); }
		public ITerminalNode REUSE() { return GetToken(PlSqlParser.REUSE, 0); }
		public ITerminalNode REVERSE() { return GetToken(PlSqlParser.REVERSE, 0); }
		public ITerminalNode REVOKE() { return GetToken(PlSqlParser.REVOKE, 0); }
		public ITerminalNode RIGHT() { return GetToken(PlSqlParser.RIGHT, 0); }
		public ITerminalNode ROLLBACK() { return GetToken(PlSqlParser.ROLLBACK, 0); }
		public ITerminalNode ROLLUP() { return GetToken(PlSqlParser.ROLLUP, 0); }
		public ITerminalNode ROW() { return GetToken(PlSqlParser.ROW, 0); }
		public ITerminalNode ROWID() { return GetToken(PlSqlParser.ROWID, 0); }
		public ITerminalNode ROWS() { return GetToken(PlSqlParser.ROWS, 0); }
		public ITerminalNode RULES() { return GetToken(PlSqlParser.RULES, 0); }
		public ITerminalNode SAMPLE() { return GetToken(PlSqlParser.SAMPLE, 0); }
		public ITerminalNode SAVE() { return GetToken(PlSqlParser.SAVE, 0); }
		public ITerminalNode SAVEPOINT() { return GetToken(PlSqlParser.SAVEPOINT, 0); }
		public ITerminalNode SCHEMA() { return GetToken(PlSqlParser.SCHEMA, 0); }
		public ITerminalNode SCHEMACHECK() { return GetToken(PlSqlParser.SCHEMACHECK, 0); }
		public ITerminalNode SCN() { return GetToken(PlSqlParser.SCN, 0); }
		public ITerminalNode SECOND() { return GetToken(PlSqlParser.SECOND, 0); }
		public ITerminalNode SEED() { return GetToken(PlSqlParser.SEED, 0); }
		public ITerminalNode SEGMENT() { return GetToken(PlSqlParser.SEGMENT, 0); }
		public ITerminalNode SELF() { return GetToken(PlSqlParser.SELF, 0); }
		public ITerminalNode SEQUENTIAL() { return GetToken(PlSqlParser.SEQUENTIAL, 0); }
		public ITerminalNode SERIALIZABLE() { return GetToken(PlSqlParser.SERIALIZABLE, 0); }
		public ITerminalNode SERIALLY_REUSABLE() { return GetToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public ITerminalNode SERVERERROR() { return GetToken(PlSqlParser.SERVERERROR, 0); }
		public ITerminalNode SESSIONTIMEZONE() { return GetToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public ITerminalNode SET() { return GetToken(PlSqlParser.SET, 0); }
		public ITerminalNode SETS() { return GetToken(PlSqlParser.SETS, 0); }
		public ITerminalNode SETTINGS() { return GetToken(PlSqlParser.SETTINGS, 0); }
		public ITerminalNode SHOW() { return GetToken(PlSqlParser.SHOW, 0); }
		public ITerminalNode SHUTDOWN() { return GetToken(PlSqlParser.SHUTDOWN, 0); }
		public ITerminalNode SIBLINGS() { return GetToken(PlSqlParser.SIBLINGS, 0); }
		public ITerminalNode SIGNTYPE() { return GetToken(PlSqlParser.SIGNTYPE, 0); }
		public ITerminalNode SIMPLE_INTEGER() { return GetToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public ITerminalNode SINGLE() { return GetToken(PlSqlParser.SINGLE, 0); }
		public ITerminalNode SKIP_() { return GetToken(PlSqlParser.SKIP_, 0); }
		public ITerminalNode SMALLINT() { return GetToken(PlSqlParser.SMALLINT, 0); }
		public ITerminalNode SNAPSHOT() { return GetToken(PlSqlParser.SNAPSHOT, 0); }
		public ITerminalNode SOME() { return GetToken(PlSqlParser.SOME, 0); }
		public ITerminalNode SPECIFICATION() { return GetToken(PlSqlParser.SPECIFICATION, 0); }
		public ITerminalNode SQLDATA() { return GetToken(PlSqlParser.SQLDATA, 0); }
		public ITerminalNode SQLERROR() { return GetToken(PlSqlParser.SQLERROR, 0); }
		public ITerminalNode STANDALONE() { return GetToken(PlSqlParser.STANDALONE, 0); }
		public ITerminalNode STARTUP() { return GetToken(PlSqlParser.STARTUP, 0); }
		public ITerminalNode STATEMENT() { return GetToken(PlSqlParser.STATEMENT, 0); }
		public ITerminalNode STATEMENT_ID() { return GetToken(PlSqlParser.STATEMENT_ID, 0); }
		public ITerminalNode STATIC() { return GetToken(PlSqlParser.STATIC, 0); }
		public ITerminalNode STATISTICS() { return GetToken(PlSqlParser.STATISTICS, 0); }
		public ITerminalNode STRING() { return GetToken(PlSqlParser.STRING, 0); }
		public ITerminalNode STORE() { return GetToken(PlSqlParser.STORE, 0); }
		public ITerminalNode SUBSTR() { return GetToken(PlSqlParser.SUBSTR, 0); }
		public ITerminalNode SUBMULTISET() { return GetToken(PlSqlParser.SUBMULTISET, 0); }
		public ITerminalNode SUBPARTITION() { return GetToken(PlSqlParser.SUBPARTITION, 0); }
		public ITerminalNode SUBSTITUTABLE() { return GetToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public ITerminalNode SUBTYPE() { return GetToken(PlSqlParser.SUBTYPE, 0); }
		public ITerminalNode SUCCESS() { return GetToken(PlSqlParser.SUCCESS, 0); }
		public ITerminalNode SUSPEND() { return GetToken(PlSqlParser.SUSPEND, 0); }
		public ITerminalNode SYSDATE() { return GetToken(PlSqlParser.SYSDATE, 0); }
		public ITerminalNode TEMPORARY() { return GetToken(PlSqlParser.TEMPORARY, 0); }
		public ITerminalNode TIME() { return GetToken(PlSqlParser.TIME, 0); }
		public ITerminalNode TIMESTAMP() { return GetToken(PlSqlParser.TIMESTAMP, 0); }
		public ITerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public ITerminalNode TIMESTAMP_UNCONSTRAINED() { return GetToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public ITerminalNode TIMEZONE_ABBR() { return GetToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public ITerminalNode TIMEZONE_HOUR() { return GetToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public ITerminalNode TIMEZONE_MINUTE() { return GetToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public ITerminalNode TIMEZONE_REGION() { return GetToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public ITerminalNode TRAILING() { return GetToken(PlSqlParser.TRAILING, 0); }
		public ITerminalNode TRANSACTION() { return GetToken(PlSqlParser.TRANSACTION, 0); }
		public ITerminalNode TRANSLATE() { return GetToken(PlSqlParser.TRANSLATE, 0); }
		public ITerminalNode TREAT() { return GetToken(PlSqlParser.TREAT, 0); }
		public ITerminalNode TRIGGER() { return GetToken(PlSqlParser.TRIGGER, 0); }
		public ITerminalNode TRIM() { return GetToken(PlSqlParser.TRIM, 0); }
		public ITerminalNode TRUNCATE() { return GetToken(PlSqlParser.TRUNCATE, 0); }
		public ITerminalNode TYPE() { return GetToken(PlSqlParser.TYPE, 0); }
		public ITerminalNode UNBOUNDED() { return GetToken(PlSqlParser.UNBOUNDED, 0); }
		public ITerminalNode UNDER() { return GetToken(PlSqlParser.UNDER, 0); }
		public ITerminalNode UNLIMITED() { return GetToken(PlSqlParser.UNLIMITED, 0); }
		public ITerminalNode UNTIL() { return GetToken(PlSqlParser.UNTIL, 0); }
		public ITerminalNode UPDATED() { return GetToken(PlSqlParser.UPDATED, 0); }
		public ITerminalNode UPSERT() { return GetToken(PlSqlParser.UPSERT, 0); }
		public ITerminalNode UROWID() { return GetToken(PlSqlParser.UROWID, 0); }
		public ITerminalNode USE() { return GetToken(PlSqlParser.USE, 0); }
		public ITerminalNode USER() { return GetToken(PlSqlParser.USER, 0); }
		public ITerminalNode USERS() { return GetToken(PlSqlParser.USERS, 0); }
		public ITerminalNode VALIDATE() { return GetToken(PlSqlParser.VALIDATE, 0); }
		public ITerminalNode VALUE() { return GetToken(PlSqlParser.VALUE, 0); }
		public ITerminalNode VARCHAR() { return GetToken(PlSqlParser.VARCHAR, 0); }
		public ITerminalNode VARCHAR2() { return GetToken(PlSqlParser.VARCHAR2, 0); }
		public ITerminalNode VARIABLE() { return GetToken(PlSqlParser.VARIABLE, 0); }
		public ITerminalNode VARRAY() { return GetToken(PlSqlParser.VARRAY, 0); }
		public ITerminalNode VARYING() { return GetToken(PlSqlParser.VARYING, 0); }
		public ITerminalNode VERSION() { return GetToken(PlSqlParser.VERSION, 0); }
		public ITerminalNode VERSIONS() { return GetToken(PlSqlParser.VERSIONS, 0); }
		public ITerminalNode WAIT() { return GetToken(PlSqlParser.WAIT, 0); }
		public ITerminalNode WARNING() { return GetToken(PlSqlParser.WARNING, 0); }
		public ITerminalNode WELLFORMED() { return GetToken(PlSqlParser.WELLFORMED, 0); }
		public ITerminalNode WHENEVER() { return GetToken(PlSqlParser.WHENEVER, 0); }
		public ITerminalNode WHILE() { return GetToken(PlSqlParser.WHILE, 0); }
		public ITerminalNode WITHIN() { return GetToken(PlSqlParser.WITHIN, 0); }
		public ITerminalNode WORK() { return GetToken(PlSqlParser.WORK, 0); }
		public ITerminalNode WRITE() { return GetToken(PlSqlParser.WRITE, 0); }
		public ITerminalNode XML() { return GetToken(PlSqlParser.XML, 0); }
		public ITerminalNode XMLAGG() { return GetToken(PlSqlParser.XMLAGG, 0); }
		public ITerminalNode XMLATTRIBUTES() { return GetToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public ITerminalNode XMLCAST() { return GetToken(PlSqlParser.XMLCAST, 0); }
		public ITerminalNode XMLCOLATTVAL() { return GetToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public ITerminalNode XMLELEMENT() { return GetToken(PlSqlParser.XMLELEMENT, 0); }
		public ITerminalNode XMLEXISTS() { return GetToken(PlSqlParser.XMLEXISTS, 0); }
		public ITerminalNode XMLFOREST() { return GetToken(PlSqlParser.XMLFOREST, 0); }
		public ITerminalNode XMLNAMESPACES() { return GetToken(PlSqlParser.XMLNAMESPACES, 0); }
		public ITerminalNode XMLPARSE() { return GetToken(PlSqlParser.XMLPARSE, 0); }
		public ITerminalNode XMLPI() { return GetToken(PlSqlParser.XMLPI, 0); }
		public ITerminalNode XMLQUERY() { return GetToken(PlSqlParser.XMLQUERY, 0); }
		public ITerminalNode XMLROOT() { return GetToken(PlSqlParser.XMLROOT, 0); }
		public ITerminalNode XMLSERIALIZE() { return GetToken(PlSqlParser.XMLSERIALIZE, 0); }
		public ITerminalNode XMLTABLE() { return GetToken(PlSqlParser.XMLTABLE, 0); }
		public ITerminalNode XMLTYPE() { return GetToken(PlSqlParser.XMLTYPE, 0); }
		public ITerminalNode YEAR() { return GetToken(PlSqlParser.YEAR, 0); }
		public ITerminalNode YES() { return GetToken(PlSqlParser.YES, 0); }
		public ITerminalNode YMINTERVAL_UNCONSTRAINED() { return GetToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public ITerminalNode ZONE() { return GetToken(PlSqlParser.ZONE, 0); }
		public ITerminalNode PREDICTION() { return GetToken(PlSqlParser.PREDICTION, 0); }
		public ITerminalNode PREDICTION_BOUNDS() { return GetToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public ITerminalNode PREDICTION_COST() { return GetToken(PlSqlParser.PREDICTION_COST, 0); }
		public ITerminalNode PREDICTION_DETAILS() { return GetToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public ITerminalNode PREDICTION_PROBABILITY() { return GetToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public ITerminalNode PREDICTION_SET() { return GetToken(PlSqlParser.PREDICTION_SET, 0); }
		public ITerminalNode CUME_DIST() { return GetToken(PlSqlParser.CUME_DIST, 0); }
		public ITerminalNode DENSE_RANK() { return GetToken(PlSqlParser.DENSE_RANK, 0); }
		public ITerminalNode LIST() { return GetToken(PlSqlParser.LIST, 0); }
		public ITerminalNode LISTAGG() { return GetToken(PlSqlParser.LISTAGG, 0); }
		public ITerminalNode PERCENT_RANK() { return GetToken(PlSqlParser.PERCENT_RANK, 0); }
		public ITerminalNode PERCENTILE_CONT() { return GetToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public ITerminalNode PERCENTILE_DISC() { return GetToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public ITerminalNode RANK() { return GetToken(PlSqlParser.RANK, 0); }
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode CORR() { return GetToken(PlSqlParser.CORR, 0); }
		public ITerminalNode LAG() { return GetToken(PlSqlParser.LAG, 0); }
		public ITerminalNode LEAD() { return GetToken(PlSqlParser.LEAD, 0); }
		public ITerminalNode MAX() { return GetToken(PlSqlParser.MAX, 0); }
		public ITerminalNode MEDIAN() { return GetToken(PlSqlParser.MEDIAN, 0); }
		public ITerminalNode MIN() { return GetToken(PlSqlParser.MIN, 0); }
		public ITerminalNode NTILE() { return GetToken(PlSqlParser.NTILE, 0); }
		public ITerminalNode RATIO_TO_REPORT() { return GetToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public ITerminalNode ROW_NUMBER() { return GetToken(PlSqlParser.ROW_NUMBER, 0); }
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public ITerminalNode VARIANCE() { return GetToken(PlSqlParser.VARIANCE, 0); }
		public ITerminalNode REGR_() { return GetToken(PlSqlParser.REGR_, 0); }
		public ITerminalNode STDDEV() { return GetToken(PlSqlParser.STDDEV, 0); }
		public ITerminalNode VAR_() { return GetToken(PlSqlParser.VAR_, 0); }
		public ITerminalNode COVAR_() { return GetToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regular_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegular_id(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regular_idContext regular_id() {
		Regular_idContext _localctx = new Regular_idContext(Context, State);
		EnterRule(_localctx, 1174, RULE_regular_id);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8894;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << A_LETTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BUILD) | (1L << BULK) | (1L << BYTE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CALL - 64)) | (1L << (CANONICAL - 64)) | (1L << (CASCADE - 64)) | (1L << (CAST - 64)) | (1L << (CHARACTER - 64)) | (1L << (CHAR - 64)) | (1L << (CHAR_CS - 64)) | (1L << (CHR - 64)) | (1L << (C_LETTER - 64)) | (1L << (CLOB - 64)) | (1L << (CLOSE - 64)) | (1L << (CLUSTER - 64)) | (1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATABASE - 64)) | (1L << (DATA - 64)) | (1L << (DAY - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DB_ROLE_CHANGE - 129)) | (1L << (DBTIMEZONE - 129)) | (1L << (DDL - 129)) | (1L << (DEBUG - 129)) | (1L << (DEC - 129)) | (1L << (DECIMAL - 129)) | (1L << (DECOMPOSE - 129)) | (1L << (DECREMENT - 129)) | (1L << (DEFAULTS - 129)) | (1L << (DEFERRED - 129)) | (1L << (DEFINER - 129)) | (1L << (DELETE - 129)) | (1L << (DETERMINISTIC - 129)) | (1L << (DIMENSION - 129)) | (1L << (DISABLE - 129)) | (1L << (DISASSOCIATE - 129)) | (1L << (DOCUMENT - 129)) | (1L << (DOUBLE - 129)) | (1L << (DSINTERVAL_UNCONSTRAINED - 129)) | (1L << (EACH - 129)) | (1L << (ELEMENT - 129)) | (1L << (EMPTY - 129)) | (1L << (ENABLE - 129)) | (1L << (ENCODING - 129)) | (1L << (ENTITYESCAPING - 129)) | (1L << (ERR - 129)) | (1L << (ERRORS - 129)) | (1L << (ESCAPE - 129)) | (1L << (EVALNAME - 129)) | (1L << (EXCEPTION - 129)) | (1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (EXIT - 195)) | (1L << (EXPLAIN - 195)) | (1L << (EXTERNAL - 195)) | (1L << (EXTRACT - 195)) | (1L << (FAILURE - 195)) | (1L << (FINAL - 195)) | (1L << (FIRST - 195)) | (1L << (FIRST_VALUE - 195)) | (1L << (FLOAT - 195)) | (1L << (FOLLOWING - 195)) | (1L << (FOLLOWS - 195)) | (1L << (FORALL - 195)) | (1L << (FORCE - 195)) | (1L << (FULL - 195)) | (1L << (FUNCTION - 195)) | (1L << (GROUPING - 195)) | (1L << (HASH - 195)) | (1L << (HIDE - 195)) | (1L << (HOUR - 195)) | (1L << (ID - 195)) | (1L << (IGNORE - 195)) | (1L << (IMMEDIATE - 195)) | (1L << (INCLUDE - 195)) | (1L << (INCLUDING - 195)) | (1L << (INCREMENT - 195)) | (1L << (INDENT - 195)) | (1L << (INDEXED - 195)) | (1L << (INDICATOR - 195)) | (1L << (INDICES - 195)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (INFINITE - 259)) | (1L << (INLINE - 259)) | (1L << (INNER - 259)) | (1L << (INOUT - 259)) | (1L << (INSTANTIABLE - 259)) | (1L << (INSTEAD - 259)) | (1L << (INTEGER - 259)) | (1L << (INTERVAL - 259)) | (1L << (INT - 259)) | (1L << (INVALIDATE - 259)) | (1L << (ISOLATION - 259)) | (1L << (ITERATE - 259)) | (1L << (JAVA - 259)) | (1L << (JOIN - 259)) | (1L << (KEEP - 259)) | (1L << (KEY - 259)) | (1L << (LANGUAGE - 259)) | (1L << (LAST - 259)) | (1L << (LAST_VALUE - 259)) | (1L << (LEADING - 259)) | (1L << (LEFT - 259)) | (1L << (LEVEL - 259)) | (1L << (LIBRARY - 259)) | (1L << (LIKE2 - 259)) | (1L << (LIKE4 - 259)) | (1L << (LIKEC - 259)) | (1L << (LIMIT - 259)) | (1L << (LINK - 259)) | (1L << (LIST - 259)) | (1L << (LOCAL - 259)) | (1L << (LOCKED - 259)) | (1L << (LOG - 259)) | (1L << (LOGOFF - 259)) | (1L << (LOGON - 259)) | (1L << (LONG - 259)) | (1L << (LOOP - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAIN - 323)) | (1L << (MAP - 323)) | (1L << (MATCHED - 323)) | (1L << (MAXVALUE - 323)) | (1L << (MEASURES - 323)) | (1L << (MEMBER - 323)) | (1L << (MERGE - 323)) | (1L << (MINIMUM - 323)) | (1L << (MINUTE - 323)) | (1L << (MINVALUE - 323)) | (1L << (MLSLABEL - 323)) | (1L << (MODEL - 323)) | (1L << (MODIFY - 323)) | (1L << (MONTH - 323)) | (1L << (MULTISET - 323)) | (1L << (NAME - 323)) | (1L << (NAN - 323)) | (1L << (NATURAL - 323)) | (1L << (NATURALN - 323)) | (1L << (NAV - 323)) | (1L << (NCHAR_CS - 323)) | (1L << (NCHAR - 323)) | (1L << (NCLOB - 323)) | (1L << (NESTED - 323)) | (1L << (NEW - 323)) | (1L << (NOAUDIT - 323)) | (1L << (NOCOPY - 323)) | (1L << (NOCYCLE - 323)) | (1L << (NOENTITYESCAPING - 323)) | (1L << (NONE - 323)) | (1L << (NO - 323)) | (1L << (NOSCHEMACHECK - 323)))) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & ((1L << (NULLS - 393)) | (1L << (NUMBER - 393)) | (1L << (NUMERIC - 393)) | (1L << (NVARCHAR2 - 393)) | (1L << (OBJECT - 393)) | (1L << (OFF - 393)) | (1L << (OID - 393)) | (1L << (OLD - 393)) | (1L << (ONLY - 393)) | (1L << (OPEN - 393)) | (1L << (OPERATOR - 393)) | (1L << (ORADATA - 393)) | (1L << (ORDINALITY - 393)) | (1L << (OSERROR - 393)) | (1L << (OUTER - 393)) | (1L << (OUT - 393)) | (1L << (OVER - 393)) | (1L << (OVERRIDING - 393)) | (1L << (PACKAGE - 393)) | (1L << (PARALLEL_ENABLE - 393)) | (1L << (PARAMETERS - 393)) | (1L << (PARENT - 393)) | (1L << (PARTITION - 393)) | (1L << (PASSING - 393)) | (1L << (PASSWORD - 393)) | (1L << (PATH - 393)) | (1L << (PIPELINED - 393)) | (1L << (PLAN - 393)) | (1L << (PLS_INTEGER - 393)) | (1L << (POSITIVEN - 393)) | (1L << (POSITIVE - 393)) | (1L << (PRAGMA - 393)) | (1L << (PRECEDING - 393)) | (1L << (PRECISION - 393)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (PRESENT - 457)) | (1L << (PRIVILEGE - 457)) | (1L << (PROGRAM - 457)) | (1L << (RAISE - 457)) | (1L << (RANGE - 457)) | (1L << (RAW - 457)) | (1L << (READ - 457)) | (1L << (REAL - 457)) | (1L << (RECORD - 457)) | (1L << (REFERENCE - 457)) | (1L << (REFERENCING - 457)) | (1L << (REF - 457)) | (1L << (REJECT - 457)) | (1L << (RELIES_ON - 457)) | (1L << (RENAME - 457)) | (1L << (REPLACE - 457)) | (1L << (RESPECT - 457)) | (1L << (RESTRICT_REFERENCES - 457)) | (1L << (RESULT_CACHE - 457)) | (1L << (RESULT - 457)) | (1L << (RETURNING - 457)) | (1L << (RETURN - 457)) | (1L << (REUSE - 457)) | (1L << (REVERSE - 457)) | (1L << (REVOKE - 457)) | (1L << (RIGHT - 457)) | (1L << (ROLLBACK - 457)) | (1L << (ROLLUP - 457)) | (1L << (ROWID - 457)) | (1L << (ROW - 457)) | (1L << (ROWS - 457)) | (1L << (RULES - 457)) | (1L << (SAMPLE - 457)) | (1L << (SAVEPOINT - 457)))) != 0) || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SAVE - 521)) | (1L << (SCHEMACHECK - 521)) | (1L << (SCHEMA - 521)) | (1L << (SCN - 521)) | (1L << (SECOND - 521)) | (1L << (SEED - 521)) | (1L << (SEGMENT - 521)) | (1L << (SELF - 521)) | (1L << (SEQUENTIAL - 521)) | (1L << (SERIALIZABLE - 521)) | (1L << (SERIALLY_REUSABLE - 521)) | (1L << (SERVERERROR - 521)) | (1L << (SESSIONTIMEZONE - 521)) | (1L << (SET - 521)) | (1L << (SETS - 521)) | (1L << (SETTINGS - 521)) | (1L << (SHOW - 521)) | (1L << (SHUTDOWN - 521)) | (1L << (SIBLINGS - 521)) | (1L << (SIGNTYPE - 521)) | (1L << (SIMPLE_INTEGER - 521)) | (1L << (SINGLE - 521)) | (1L << (SKIP_ - 521)) | (1L << (SMALLINT - 521)) | (1L << (SNAPSHOT - 521)) | (1L << (SOME - 521)) | (1L << (SPECIFICATION - 521)) | (1L << (SQLDATA - 521)) | (1L << (SQLERROR - 521)) | (1L << (STANDALONE - 521)) | (1L << (STARTUP - 521)) | (1L << (STATEMENT_ID - 521)) | (1L << (STATEMENT - 521)) | (1L << (STATIC - 521)) | (1L << (STATISTICS - 521)) | (1L << (STORE - 521)) | (1L << (STRING - 521)) | (1L << (SUBMULTISET - 521)) | (1L << (SUBPARTITION - 521)) | (1L << (SUBSTITUTABLE - 521)) | (1L << (SUBTYPE - 521)) | (1L << (SUCCESS - 521)) | (1L << (SUSPEND - 521)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (SYSDATE - 585)) | (1L << (TEMPORARY - 585)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP - 585)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 585)) | (1L << (TIMESTAMP_UNCONSTRAINED - 585)) | (1L << (TIME - 585)) | (1L << (TIMEZONE_ABBR - 585)) | (1L << (TIMEZONE_HOUR - 585)) | (1L << (TIMEZONE_MINUTE - 585)) | (1L << (TIMEZONE_REGION - 585)) | (1L << (TRAILING - 585)) | (1L << (TRANSACTION - 585)) | (1L << (TRANSLATE - 585)) | (1L << (TREAT - 585)) | (1L << (TRIGGER - 585)) | (1L << (TRUNCATE - 585)) | (1L << (TYPE - 585)) | (1L << (UNBOUNDED - 585)) | (1L << (UNDER - 585)) | (1L << (UNLIMITED - 585)) | (1L << (UNTIL - 585)) | (1L << (UPDATED - 585)) | (1L << (UPSERT - 585)) | (1L << (UROWID - 585)) | (1L << (USERS - 585)) | (1L << (USER - 585)) | (1L << (USE - 585)))) != 0) || ((((_la - 649)) & ~0x3f) == 0 && ((1L << (_la - 649)) & ((1L << (VALIDATE - 649)) | (1L << (VALUE - 649)) | (1L << (VARCHAR2 - 649)) | (1L << (VARCHAR - 649)) | (1L << (VARIABLE - 649)) | (1L << (VARRAY - 649)) | (1L << (VARYING - 649)) | (1L << (VERSIONS - 649)) | (1L << (VERSION - 649)) | (1L << (WAIT - 649)) | (1L << (WARNING - 649)) | (1L << (WELLFORMED - 649)) | (1L << (WHENEVER - 649)) | (1L << (WHILE - 649)) | (1L << (WITHIN - 649)) | (1L << (WORK - 649)) | (1L << (WRITE - 649)) | (1L << (XMLAGG - 649)) | (1L << (XMLATTRIBUTES - 649)) | (1L << (XMLCAST - 649)) | (1L << (XMLCOLATTVAL - 649)) | (1L << (XMLELEMENT - 649)) | (1L << (XMLEXISTS - 649)) | (1L << (XMLFOREST - 649)) | (1L << (XMLNAMESPACES - 649)) | (1L << (XMLPARSE - 649)) | (1L << (XMLPI - 649)) | (1L << (XMLQUERY - 649)) | (1L << (XMLROOT - 649)) | (1L << (XMLSERIALIZE - 649)) | (1L << (XMLTABLE - 649)) | (1L << (XMLTYPE - 649)) | (1L << (XML - 649)) | (1L << (YEAR - 649)) | (1L << (YES - 649)) | (1L << (YMINTERVAL_UNCONSTRAINED - 649)) | (1L << (ZONE - 649)) | (1L << (PREDICTION - 649)) | (1L << (PREDICTION_BOUNDS - 649)) | (1L << (PREDICTION_COST - 649)) | (1L << (PREDICTION_DETAILS - 649)) | (1L << (PREDICTION_PROBABILITY - 649)) | (1L << (PREDICTION_SET - 649)) | (1L << (CUME_DIST - 649)) | (1L << (DENSE_RANK - 649)) | (1L << (LISTAGG - 649)) | (1L << (PERCENT_RANK - 649)) | (1L << (PERCENTILE_CONT - 649)) | (1L << (PERCENTILE_DISC - 649)) | (1L << (RANK - 649)) | (1L << (AVG - 649)) | (1L << (CORR - 649)))) != 0) || ((((_la - 713)) & ~0x3f) == 0 && ((1L << (_la - 713)) & ((1L << (COVAR_ - 713)) | (1L << (LAG - 713)) | (1L << (LEAD - 713)) | (1L << (MAX - 713)) | (1L << (MEDIAN - 713)) | (1L << (MIN - 713)) | (1L << (NTILE - 713)) | (1L << (RATIO_TO_REPORT - 713)) | (1L << (REGR_ - 713)) | (1L << (ROW_NUMBER - 713)) | (1L << (SUBSTR - 713)) | (1L << (TRIM - 713)) | (1L << (SUM - 713)) | (1L << (STDDEV - 713)) | (1L << (VAR_ - 713)) | (1L << (VARIANCE - 713)))) != 0) || _la==REGULAR_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_function_nameContext : ParserRuleContext {
		public ITerminalNode CHR() { return GetToken(PlSqlParser.CHR, 0); }
		public ITerminalNode DECODE() { return GetToken(PlSqlParser.DECODE, 0); }
		public ITerminalNode SUBSTR() { return GetToken(PlSqlParser.SUBSTR, 0); }
		public ITerminalNode TO_CHAR() { return GetToken(PlSqlParser.TO_CHAR, 0); }
		public ITerminalNode TRIM() { return GetToken(PlSqlParser.TRIM, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_function_nameContext string_function_name() {
		String_function_nameContext _localctx = new String_function_nameContext(Context, State);
		EnterRule(_localctx, 1176, RULE_string_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8896;
			_la = TokenStream.LA(1);
			if ( !(_la==CHR || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (DECODE - 714)) | (1L << (SUBSTR - 714)) | (1L << (TO_CHAR - 714)) | (1L << (TRIM - 714)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_function_nameContext : ParserRuleContext {
		public ITerminalNode AVG() { return GetToken(PlSqlParser.AVG, 0); }
		public ITerminalNode COUNT() { return GetToken(PlSqlParser.COUNT, 0); }
		public ITerminalNode NVL() { return GetToken(PlSqlParser.NVL, 0); }
		public ITerminalNode ROUND() { return GetToken(PlSqlParser.ROUND, 0); }
		public ITerminalNode SUM() { return GetToken(PlSqlParser.SUM, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_function_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_function_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_function_nameContext numeric_function_name() {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(Context, State);
		EnterRule(_localctx, 1178, RULE_numeric_function_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8898;
			_la = TokenStream.LA(1);
			if ( !(_la==COUNT || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (AVG - 711)) | (1L << (NVL - 711)) | (1L << (ROUND - 711)) | (1L << (SUM - 711)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public NumericContext numeric() {
			return GetRuleContext<NumericContext>(0);
		}
		public Numeric_negativeContext numeric_negative() {
			return GetRuleContext<Numeric_negativeContext>(0);
		}
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 1180, RULE_integer);
		try {
			State = 8902;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case PLUS_SIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8900; numeric();
				}
				break;
			case MINUS_SIGN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8901; numeric_negative();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericContext : ParserRuleContext {
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public ITerminalNode PLUS_SIGN() { return GetToken(PlSqlParser.PLUS_SIGN, 0); }
		public ITerminalNode APPROXIMATE_NUM_LIT() { return GetToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericContext numeric() {
		NumericContext _localctx = new NumericContext(Context, State);
		EnterRule(_localctx, 1182, RULE_numeric);
		int _la;
		try {
			State = 8909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNSIGNED_INTEGER:
			case PLUS_SIGN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PLUS_SIGN) {
					{
					State = 8904; Match(PLUS_SIGN);
					}
				}

				State = 8907; Match(UNSIGNED_INTEGER);
				}
				break;
			case APPROXIMATE_NUM_LIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8908; Match(APPROXIMATE_NUM_LIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_negativeContext : ParserRuleContext {
		public ITerminalNode MINUS_SIGN() { return GetToken(PlSqlParser.MINUS_SIGN, 0); }
		public ITerminalNode UNSIGNED_INTEGER() { return GetToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_negative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_negative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_negativeContext numeric_negative() {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(Context, State);
		EnterRule(_localctx, 1184, RULE_numeric_negative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8911; Match(MINUS_SIGN);
			State = 8912; Match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(PlSqlParser.CHAR_STRING, 0); }
		public ITerminalNode NATIONAL_CHAR_STRING_LIT() { return GetToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlSqlParserVisitor<TResult> typedVisitor = visitor as IPlSqlParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 1186, RULE_string);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8914;
			_la = TokenStream.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 446: return logical_expression_sempred((Logical_expressionContext)_localctx, predIndex);
		case 448: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 450: return concatenation_sempred((ConcatenationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_expression_sempred(Logical_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}
	private bool concatenation_sempred(ConcatenationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x30D', '\x22D7', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x4', '\x17A', 
		'\t', '\x17A', '\x4', '\x17B', '\t', '\x17B', '\x4', '\x17C', '\t', '\x17C', 
		'\x4', '\x17D', '\t', '\x17D', '\x4', '\x17E', '\t', '\x17E', '\x4', '\x17F', 
		'\t', '\x17F', '\x4', '\x180', '\t', '\x180', '\x4', '\x181', '\t', '\x181', 
		'\x4', '\x182', '\t', '\x182', '\x4', '\x183', '\t', '\x183', '\x4', '\x184', 
		'\t', '\x184', '\x4', '\x185', '\t', '\x185', '\x4', '\x186', '\t', '\x186', 
		'\x4', '\x187', '\t', '\x187', '\x4', '\x188', '\t', '\x188', '\x4', '\x189', 
		'\t', '\x189', '\x4', '\x18A', '\t', '\x18A', '\x4', '\x18B', '\t', '\x18B', 
		'\x4', '\x18C', '\t', '\x18C', '\x4', '\x18D', '\t', '\x18D', '\x4', '\x18E', 
		'\t', '\x18E', '\x4', '\x18F', '\t', '\x18F', '\x4', '\x190', '\t', '\x190', 
		'\x4', '\x191', '\t', '\x191', '\x4', '\x192', '\t', '\x192', '\x4', '\x193', 
		'\t', '\x193', '\x4', '\x194', '\t', '\x194', '\x4', '\x195', '\t', '\x195', 
		'\x4', '\x196', '\t', '\x196', '\x4', '\x197', '\t', '\x197', '\x4', '\x198', 
		'\t', '\x198', '\x4', '\x199', '\t', '\x199', '\x4', '\x19A', '\t', '\x19A', 
		'\x4', '\x19B', '\t', '\x19B', '\x4', '\x19C', '\t', '\x19C', '\x4', '\x19D', 
		'\t', '\x19D', '\x4', '\x19E', '\t', '\x19E', '\x4', '\x19F', '\t', '\x19F', 
		'\x4', '\x1A0', '\t', '\x1A0', '\x4', '\x1A1', '\t', '\x1A1', '\x4', '\x1A2', 
		'\t', '\x1A2', '\x4', '\x1A3', '\t', '\x1A3', '\x4', '\x1A4', '\t', '\x1A4', 
		'\x4', '\x1A5', '\t', '\x1A5', '\x4', '\x1A6', '\t', '\x1A6', '\x4', '\x1A7', 
		'\t', '\x1A7', '\x4', '\x1A8', '\t', '\x1A8', '\x4', '\x1A9', '\t', '\x1A9', 
		'\x4', '\x1AA', '\t', '\x1AA', '\x4', '\x1AB', '\t', '\x1AB', '\x4', '\x1AC', 
		'\t', '\x1AC', '\x4', '\x1AD', '\t', '\x1AD', '\x4', '\x1AE', '\t', '\x1AE', 
		'\x4', '\x1AF', '\t', '\x1AF', '\x4', '\x1B0', '\t', '\x1B0', '\x4', '\x1B1', 
		'\t', '\x1B1', '\x4', '\x1B2', '\t', '\x1B2', '\x4', '\x1B3', '\t', '\x1B3', 
		'\x4', '\x1B4', '\t', '\x1B4', '\x4', '\x1B5', '\t', '\x1B5', '\x4', '\x1B6', 
		'\t', '\x1B6', '\x4', '\x1B7', '\t', '\x1B7', '\x4', '\x1B8', '\t', '\x1B8', 
		'\x4', '\x1B9', '\t', '\x1B9', '\x4', '\x1BA', '\t', '\x1BA', '\x4', '\x1BB', 
		'\t', '\x1BB', '\x4', '\x1BC', '\t', '\x1BC', '\x4', '\x1BD', '\t', '\x1BD', 
		'\x4', '\x1BE', '\t', '\x1BE', '\x4', '\x1BF', '\t', '\x1BF', '\x4', '\x1C0', 
		'\t', '\x1C0', '\x4', '\x1C1', '\t', '\x1C1', '\x4', '\x1C2', '\t', '\x1C2', 
		'\x4', '\x1C3', '\t', '\x1C3', '\x4', '\x1C4', '\t', '\x1C4', '\x4', '\x1C5', 
		'\t', '\x1C5', '\x4', '\x1C6', '\t', '\x1C6', '\x4', '\x1C7', '\t', '\x1C7', 
		'\x4', '\x1C8', '\t', '\x1C8', '\x4', '\x1C9', '\t', '\x1C9', '\x4', '\x1CA', 
		'\t', '\x1CA', '\x4', '\x1CB', '\t', '\x1CB', '\x4', '\x1CC', '\t', '\x1CC', 
		'\x4', '\x1CD', '\t', '\x1CD', '\x4', '\x1CE', '\t', '\x1CE', '\x4', '\x1CF', 
		'\t', '\x1CF', '\x4', '\x1D0', '\t', '\x1D0', '\x4', '\x1D1', '\t', '\x1D1', 
		'\x4', '\x1D2', '\t', '\x1D2', '\x4', '\x1D3', '\t', '\x1D3', '\x4', '\x1D4', 
		'\t', '\x1D4', '\x4', '\x1D5', '\t', '\x1D5', '\x4', '\x1D6', '\t', '\x1D6', 
		'\x4', '\x1D7', '\t', '\x1D7', '\x4', '\x1D8', '\t', '\x1D8', '\x4', '\x1D9', 
		'\t', '\x1D9', '\x4', '\x1DA', '\t', '\x1DA', '\x4', '\x1DB', '\t', '\x1DB', 
		'\x4', '\x1DC', '\t', '\x1DC', '\x4', '\x1DD', '\t', '\x1DD', '\x4', '\x1DE', 
		'\t', '\x1DE', '\x4', '\x1DF', '\t', '\x1DF', '\x4', '\x1E0', '\t', '\x1E0', 
		'\x4', '\x1E1', '\t', '\x1E1', '\x4', '\x1E2', '\t', '\x1E2', '\x4', '\x1E3', 
		'\t', '\x1E3', '\x4', '\x1E4', '\t', '\x1E4', '\x4', '\x1E5', '\t', '\x1E5', 
		'\x4', '\x1E6', '\t', '\x1E6', '\x4', '\x1E7', '\t', '\x1E7', '\x4', '\x1E8', 
		'\t', '\x1E8', '\x4', '\x1E9', '\t', '\x1E9', '\x4', '\x1EA', '\t', '\x1EA', 
		'\x4', '\x1EB', '\t', '\x1EB', '\x4', '\x1EC', '\t', '\x1EC', '\x4', '\x1ED', 
		'\t', '\x1ED', '\x4', '\x1EE', '\t', '\x1EE', '\x4', '\x1EF', '\t', '\x1EF', 
		'\x4', '\x1F0', '\t', '\x1F0', '\x4', '\x1F1', '\t', '\x1F1', '\x4', '\x1F2', 
		'\t', '\x1F2', '\x4', '\x1F3', '\t', '\x1F3', '\x4', '\x1F4', '\t', '\x1F4', 
		'\x4', '\x1F5', '\t', '\x1F5', '\x4', '\x1F6', '\t', '\x1F6', '\x4', '\x1F7', 
		'\t', '\x1F7', '\x4', '\x1F8', '\t', '\x1F8', '\x4', '\x1F9', '\t', '\x1F9', 
		'\x4', '\x1FA', '\t', '\x1FA', '\x4', '\x1FB', '\t', '\x1FB', '\x4', '\x1FC', 
		'\t', '\x1FC', '\x4', '\x1FD', '\t', '\x1FD', '\x4', '\x1FE', '\t', '\x1FE', 
		'\x4', '\x1FF', '\t', '\x1FF', '\x4', '\x200', '\t', '\x200', '\x4', '\x201', 
		'\t', '\x201', '\x4', '\x202', '\t', '\x202', '\x4', '\x203', '\t', '\x203', 
		'\x4', '\x204', '\t', '\x204', '\x4', '\x205', '\t', '\x205', '\x4', '\x206', 
		'\t', '\x206', '\x4', '\x207', '\t', '\x207', '\x4', '\x208', '\t', '\x208', 
		'\x4', '\x209', '\t', '\x209', '\x4', '\x20A', '\t', '\x20A', '\x4', '\x20B', 
		'\t', '\x20B', '\x4', '\x20C', '\t', '\x20C', '\x4', '\x20D', '\t', '\x20D', 
		'\x4', '\x20E', '\t', '\x20E', '\x4', '\x20F', '\t', '\x20F', '\x4', '\x210', 
		'\t', '\x210', '\x4', '\x211', '\t', '\x211', '\x4', '\x212', '\t', '\x212', 
		'\x4', '\x213', '\t', '\x213', '\x4', '\x214', '\t', '\x214', '\x4', '\x215', 
		'\t', '\x215', '\x4', '\x216', '\t', '\x216', '\x4', '\x217', '\t', '\x217', 
		'\x4', '\x218', '\t', '\x218', '\x4', '\x219', '\t', '\x219', '\x4', '\x21A', 
		'\t', '\x21A', '\x4', '\x21B', '\t', '\x21B', '\x4', '\x21C', '\t', '\x21C', 
		'\x4', '\x21D', '\t', '\x21D', '\x4', '\x21E', '\t', '\x21E', '\x4', '\x21F', 
		'\t', '\x21F', '\x4', '\x220', '\t', '\x220', '\x4', '\x221', '\t', '\x221', 
		'\x4', '\x222', '\t', '\x222', '\x4', '\x223', '\t', '\x223', '\x4', '\x224', 
		'\t', '\x224', '\x4', '\x225', '\t', '\x225', '\x4', '\x226', '\t', '\x226', 
		'\x4', '\x227', '\t', '\x227', '\x4', '\x228', '\t', '\x228', '\x4', '\x229', 
		'\t', '\x229', '\x4', '\x22A', '\t', '\x22A', '\x4', '\x22B', '\t', '\x22B', 
		'\x4', '\x22C', '\t', '\x22C', '\x4', '\x22D', '\t', '\x22D', '\x4', '\x22E', 
		'\t', '\x22E', '\x4', '\x22F', '\t', '\x22F', '\x4', '\x230', '\t', '\x230', 
		'\x4', '\x231', '\t', '\x231', '\x4', '\x232', '\t', '\x232', '\x4', '\x233', 
		'\t', '\x233', '\x4', '\x234', '\t', '\x234', '\x4', '\x235', '\t', '\x235', 
		'\x4', '\x236', '\t', '\x236', '\x4', '\x237', '\t', '\x237', '\x4', '\x238', 
		'\t', '\x238', '\x4', '\x239', '\t', '\x239', '\x4', '\x23A', '\t', '\x23A', 
		'\x4', '\x23B', '\t', '\x23B', '\x4', '\x23C', '\t', '\x23C', '\x4', '\x23D', 
		'\t', '\x23D', '\x4', '\x23E', '\t', '\x23E', '\x4', '\x23F', '\t', '\x23F', 
		'\x4', '\x240', '\t', '\x240', '\x4', '\x241', '\t', '\x241', '\x4', '\x242', 
		'\t', '\x242', '\x4', '\x243', '\t', '\x243', '\x4', '\x244', '\t', '\x244', 
		'\x4', '\x245', '\t', '\x245', '\x4', '\x246', '\t', '\x246', '\x4', '\x247', 
		'\t', '\x247', '\x4', '\x248', '\t', '\x248', '\x4', '\x249', '\t', '\x249', 
		'\x4', '\x24A', '\t', '\x24A', '\x4', '\x24B', '\t', '\x24B', '\x4', '\x24C', 
		'\t', '\x24C', '\x4', '\x24D', '\t', '\x24D', '\x4', '\x24E', '\t', '\x24E', 
		'\x4', '\x24F', '\t', '\x24F', '\x4', '\x250', '\t', '\x250', '\x4', '\x251', 
		'\t', '\x251', '\x4', '\x252', '\t', '\x252', '\x4', '\x253', '\t', '\x253', 
		'\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x4A9', '\n', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '\x4AC', '\n', '\x2', '\a', '\x2', '\x4AE', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x4B1', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x4D9', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x4E5', '\n', '\x5', '\x3', '\x5', '\a', '\x5', '\x4E8', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '\x4EB', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x4EF', '\n', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x4F6', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x4FC', '\n', '\x6', '\x3', '\x6', '\x6', '\x6', '\x4FF', '\n', 
		'\x6', '\r', '\x6', '\xE', '\x6', '\x500', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x505', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x50D', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x510', '\v', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x513', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x517', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '\x51A', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x51E', '\n', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x523', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x529', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x532', '\n', '\b', 
		'\x3', '\b', '\x5', '\b', '\x535', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', '\x53B', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x542', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x545', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x551', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x556', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x560', '\n', '\r', 
		'\x3', '\r', '\x5', '\r', '\x563', '\n', '\r', '\x3', '\r', '\a', '\r', 
		'\x566', '\n', '\r', '\f', '\r', '\xE', '\r', '\x569', '\v', '\r', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\x56D', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x574', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x57A', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x57E', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\x582', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x585', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', '\x589', '\n', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x590', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x597', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\a', '\xF', '\x59C', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x59F', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x5A3', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x5A7', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x5B3', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\x5BB', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x5BE', '\v', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x5C2', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x5CC', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\x5CF', '\v', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\x5D3', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x5D8', '\n', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x5DB', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x5E8', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x5F4', '\n', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\x5F7', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x5FA', '\v', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x5FE', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x608', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x60B', '\v', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x60F', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\x617', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x61A', '\v', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x61D', '\n', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x621', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x624', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x628', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x62D', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', 
		'\x17', '\x637', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x63A', '\v', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x63E', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x642', '\n', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x645', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x5', '\x17', '\x64A', '\n', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x651', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x659', '\n', '\x18', '\f', 
		'\x18', '\xE', '\x18', '\x65C', '\v', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x660', '\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x663', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x667', '\n', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x66A', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x66F', '\n', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x5', '\x1A', '\x681', '\n', '\x1A', '\x3', '\x1A', '\a', '\x1A', 
		'\x684', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\x687', '\v', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x68B', '\n', '\x1A', '\x5', 
		'\x1A', '\x68D', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x694', '\n', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x69B', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x69E', 
		'\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x6A1', '\n', '\x1B', '\x3', 
		'\x1B', '\x5', '\x1B', '\x6A4', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\a', '\x1C', '\x6AD', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x6B0', 
		'\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x5', '\x1E', '\x6BB', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x6BF', '\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x6C2', 
		'\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x6CB', '\n', ' ', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x6D1', '\n', '!', 
		'\f', '!', '\xE', '!', '\x6D4', '\v', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x5', '!', '\x6DB', '\n', '!', '\x3', '!', 
		'\x5', '!', '\x6DE', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x5', '\"', '\x6E5', '\n', '\"', '\x3', '#', 
		'\x5', '#', '\x6E8', '\n', '#', '\x3', '#', '\x5', '#', '\x6EB', '\n', 
		'#', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x6F0', '\n', '$', 
		'\x3', '$', '\x6', '$', '\x6F3', '\n', '$', '\r', '$', '\xE', '$', '\x6F4', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x71E', '\n', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x5', '&', '\x73A', '\n', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\a', '\'', '\x73F', '\n', '\'', '\f', '\'', '\xE', '\'', 
		'\x742', '\v', '\'', '\x3', '\'', '\x3', '\'', '\x5', '\'', '\x746', '\n', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', 
		'(', '\x74D', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x6', '*', '\x756', '\n', '*', '\r', 
		'*', '\xE', '*', '\x757', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x5', ',', '\x760', '\n', ',', '\x3', ',', '\x3', 
		',', '\x5', ',', '\x764', '\n', ',', '\x3', ',', '\x3', ',', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x5', '-', '\x770', '\n', '-', '\x3', '-', '\x5', '-', '\x773', 
		'\n', '-', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', '.', '\x5', '.', 
		'\x779', '\n', '.', '\x3', '.', '\x5', '.', '\x77C', '\n', '.', '\x3', 
		'.', '\a', '.', '\x77F', '\n', '.', '\f', '.', '\xE', '.', '\x782', '\v', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x786', '\n', '.', '\x3', '/', 
		'\x3', '/', '\x5', '/', '\x78A', '\n', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x792', '\n', '/', 
		'\f', '/', '\xE', '/', '\x795', '\v', '/', '\x3', '/', '\x3', '/', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x79C', '\n', '\x30', 
		'\f', '\x30', '\xE', '\x30', '\x79F', '\v', '\x30', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x7A4', '\n', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\a', '\x32', '\x7AD', '\n', '\x32', '\f', '\x32', '\xE', 
		'\x32', '\x7B0', '\v', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x7B4', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x7B8', 
		'\n', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x7C0', '\n', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x5', '\x35', '\x7C8', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x5', '\x35', '\x7CD', '\n', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x7D0', '\n', '\x35', '\x5', '\x35', '\x7D2', '\n', '\x35', '\x3', 
		'\x36', '\x5', '\x36', '\x7D5', '\n', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x7DE', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x7E3', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x7EA', '\n', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x7ED', '\n', '\x38', '\x3', '\x39', 
		'\x5', '\x39', '\x7F0', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x7F4', '\n', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7F7', 
		'\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\a', '\x39', '\x7FD', '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x800', 
		'\v', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x804', '\n', 
		'\x39', '\x3', '\x39', '\a', '\x39', '\x807', '\n', '\x39', '\f', '\x39', 
		'\xE', '\x39', '\x80A', '\v', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x5', ':', '\x810', '\n', ':', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', 
		'<', '\x81A', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x6', '>', '\x828', '\n', '>', '\r', '>', '\xE', 
		'>', '\x829', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x5', '?', 
		'\x830', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x83A', 
		'\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\a', '\x42', '\x842', '\n', '\x42', '\f', 
		'\x42', '\xE', '\x42', '\x845', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x84B', '\n', '\x42', '\x3', 
		'\x42', '\x5', '\x42', '\x84E', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x5', '\x42', '\x853', '\n', '\x42', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', 
		'\x43', '\x85B', '\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x85E', '\v', 
		'\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x862', '\n', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x5', '\x43', '\x869', '\n', '\x43', '\x3', '\x43', '\x5', '\x43', '\x86C', 
		'\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x871', '\n', '\x43', '\x3', '\x44', '\x5', '\x44', '\x874', '\n', '\x44', 
		'\x3', '\x44', '\x5', '\x44', '\x877', '\n', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\a', '\x44', '\x886', '\n', '\x44', '\f', '\x44', 
		'\xE', '\x44', '\x889', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x88D', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x896', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x899', '\n', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x89E', '\n', 
		'\x44', '\x3', '\x45', '\x5', '\x45', '\x8A1', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', 
		'\x8A8', '\n', '\x46', '\x3', '\x46', '\x5', '\x46', '\x8AB', '\n', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x5', 'H', 
		'\x8B2', '\n', 'H', '\x3', 'H', '\x6', 'H', '\x8B5', '\n', 'H', '\r', 
		'H', '\xE', 'H', '\x8B6', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x8BB', 
		'\n', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x8C0', '\n', 
		'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x8C5', '\n', 'J', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\a', 'K', '\x8CD', '\n', 'K', '\f', 'K', '\xE', 'K', '\x8D0', '\v', 'K', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x8D5', '\n', 'K', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\a', 
		'L', '\x8DD', '\n', 'L', '\f', 'L', '\xE', 'L', '\x8E0', '\v', 'L', '\x3', 
		'L', '\x3', 'L', '\x5', 'L', '\x8E4', '\n', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x8EB', '\n', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x8F1', '\n', 'L', 
		'\x3', 'L', '\x3', 'L', '\x5', 'L', '\x8F5', '\n', 'L', '\x3', 'M', '\x5', 
		'M', '\x8F8', '\n', 'M', '\x3', 'M', '\x5', 'M', '\x8FB', '\n', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\a', 'M', '\x90A', '\n', 'M', '\f', 'M', '\xE', 'M', '\x90D', '\v', 
		'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x911', '\n', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', 
		'\x919', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\a', 
		'O', '\x925', '\n', 'O', '\f', 'O', '\xE', 'O', '\x928', '\v', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x92E', '\n', 'P', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x6', 'S', '\x93C', '\n', 'S', '\r', 'S', '\xE', 'S', '\x93D', '\x3', 
		'S', '\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\a', 
		'T', '\x946', '\n', 'T', '\f', 'T', '\xE', 'T', '\x949', '\v', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x951', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x5', 'U', '\x957', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x95C', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', 
		'\x5', 'U', '\x962', '\n', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 
		'U', '\x967', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x96B', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x5', 'V', '\x974', '\n', 'V', '\x3', 'V', '\x3', 
		'V', '\x5', 'V', '\x978', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', 
		'\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x6', 'X', '\x990', '\n', 'X', '\r', 'X', '\xE', 'X', '\x991', 
		'\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x6', 'Y', '\x9A4', '\n', 
		'Y', '\r', 'Y', '\xE', 'Y', '\x9A5', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x5', 'Y', '\x9AB', '\n', 'Y', '\x3', 'Y', '\x6', 'Y', '\x9AE', '\n', 
		'Y', '\r', 'Y', '\xE', 'Y', '\x9AF', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x5', 'Y', '\x9B5', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 
		'Z', '\x9BA', '\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x9C4', 
		'\n', '\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', '^', 
		'\x3', '^', '\x3', '^', '\x5', '^', '\x9CD', '\n', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x5', 
		'`', '\x9D6', '\n', '`', '\x3', '`', '\x6', '`', '\x9D9', '\n', '`', '\r', 
		'`', '\xE', '`', '\x9DA', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', 
		'\x9E0', '\n', '`', '\x3', '`', '\x6', '`', '\x9E3', '\n', '`', '\r', 
		'`', '\xE', '`', '\x9E4', '\a', '`', '\x9E7', '\n', '`', '\f', '`', '\xE', 
		'`', '\x9EA', '\v', '`', '\x5', '`', '\x9EC', '\n', '`', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x9F2', '\n', 
		'\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65', '\xA00', '\n', '\x65', 
		'\x3', '\x65', '\x6', '\x65', '\xA03', '\n', '\x65', '\r', '\x65', '\xE', 
		'\x65', '\xA04', '\x5', '\x65', '\xA07', '\n', '\x65', '\x3', '\x65', 
		'\x5', '\x65', '\xA0A', '\n', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\xA12', 
		'\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\xA1F', '\n', '\x66', '\x5', 
		'\x66', '\xA21', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', 
		'\xA25', '\n', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x5', '\x66', '\xA2D', '\n', '\x66', 
		'\x5', '\x66', '\xA2F', '\n', '\x66', '\x5', '\x66', '\xA31', '\n', '\x66', 
		'\x5', '\x66', '\xA33', '\n', '\x66', '\x3', 'g', '\x3', 'g', '\x5', 'g', 
		'\xA37', '\n', 'g', '\x3', 'g', '\x6', 'g', '\xA3A', '\n', 'g', '\r', 
		'g', '\xE', 'g', '\xA3B', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x3', 'h', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\xA46', '\n', 
		'h', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\xA51', '\n', 'j', 
		'\x5', 'j', '\xA53', '\n', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l', '\xA5D', 
		'\n', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'm', '\x5', 'm', '\xA62', '\n', 
		'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xA66', '\n', 'm', '\x3', 'm', 
		'\x3', 'm', '\x5', 'm', '\xA6A', '\n', 'm', '\x3', 'm', '\x3', 'm', '\x6', 
		'm', '\xA6E', '\n', 'm', '\r', 'm', '\xE', 'm', '\xA6F', '\x3', 'n', '\x5', 
		'n', '\xA73', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\xA77', 
		'\n', 'n', '\x6', 'n', '\xA79', '\n', 'n', '\r', 'n', '\xE', 'n', '\xA7A', 
		'\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', 
		'\xA82', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x6', 'n', '\xA87', 
		'\n', 'n', '\r', 'n', '\xE', 'n', '\xA88', '\x3', 'n', '\x3', 'n', '\x3', 
		'n', '\x5', 'n', '\xA8E', '\n', 'n', '\x3', 'o', '\x3', 'o', '\x5', 'o', 
		'\xA92', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 
		'o', '\xA98', '\n', 'o', '\x5', 'o', '\xA9A', '\n', 'o', '\x6', 'o', '\xA9C', 
		'\n', 'o', '\r', 'o', '\xE', 'o', '\xA9D', '\x3', 'o', '\x3', 'o', '\x5', 
		'o', '\xAA2', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\xAA6', 
		'\n', 'o', '\x3', 'o', '\x3', 'o', '\x6', 'o', '\xAAA', '\n', 'o', '\r', 
		'o', '\xE', 'o', '\xAAB', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', 
		'\xAB1', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\xAB6', 
		'\n', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\xABB', '\n', 
		'o', '\x3', 'o', '\x5', 'o', '\xABE', '\n', 'o', '\x3', 'o', '\x3', 'o', 
		'\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'q', '\x3', 'q', 
		'\x3', 'q', '\x5', 'q', '\xAC9', '\n', 'q', '\x3', 'q', '\x5', 'q', '\xACC', 
		'\n', 'q', '\x3', 'q', '\x5', 'q', '\xACF', '\n', 'q', '\x3', 'q', '\x3', 
		'q', '\x3', 'q', '\x5', 'q', '\xAD4', '\n', 'q', '\x3', 'q', '\x5', 'q', 
		'\xAD7', '\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\xADC', 
		'\n', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q', '\xAE1', '\n', 
		'q', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\xAE5', '\n', 'r', '\x3', 's', 
		'\x3', 's', '\x5', 's', '\xAE9', '\n', 's', '\x3', 's', '\x3', 's', '\x5', 
		's', '\xAED', '\n', 's', '\x3', 's', '\a', 's', '\xAF0', '\n', 's', '\f', 
		's', '\xE', 's', '\xAF3', '\v', 's', '\x3', 's', '\x5', 's', '\xAF6', 
		'\n', 's', '\x6', 's', '\xAF8', '\n', 's', '\r', 's', '\xE', 's', '\xAF9', 
		'\x3', 's', '\x3', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', 
		'\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\xB06', '\n', 
		't', '\x3', 't', '\x6', 't', '\xB09', '\n', 't', '\r', 't', '\xE', 't', 
		'\xB0A', '\x3', 't', '\x5', 't', '\xB0E', '\n', 't', '\x3', 't', '\x3', 
		't', '\x5', 't', '\xB12', '\n', 't', '\x3', 't', '\x3', 't', '\x5', 't', 
		'\xB16', '\n', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\xB1B', 
		'\n', 't', '\x6', 't', '\xB1D', '\n', 't', '\r', 't', '\xE', 't', '\xB1E', 
		'\x3', 't', '\x3', 't', '\a', 't', '\xB23', '\n', 't', '\f', 't', '\xE', 
		't', '\xB26', '\v', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', 
		'\x3', 'u', '\x3', 'v', '\x3', 'v', '\x5', 'v', '\xB2F', '\n', 'v', '\x3', 
		'v', '\x5', 'v', '\xB32', '\n', 'v', '\x3', 'v', '\x3', 'v', '\x3', 'v', 
		'\x3', 'v', '\x3', 'v', '\x3', 'v', '\x5', 'v', '\xB3A', '\n', 'v', '\x3', 
		'v', '\x5', 'v', '\xB3D', '\n', 'v', '\x3', 'w', '\x6', 'w', '\xB40', 
		'\n', 'w', '\r', 'w', '\xE', 'w', '\xB41', '\x3', 'w', '\x5', 'w', '\xB45', 
		'\n', 'w', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\xB49', '\n', 'x', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x5', 'x', '\xB4F', '\n', 'x', 
		'\x3', 'y', '\x5', 'y', '\xB52', '\n', 'y', '\x3', 'y', '\x3', 'y', '\x3', 
		'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x6', 
		'y', '\xB5C', '\n', 'y', '\r', 'y', '\xE', 'y', '\xB5D', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 
		'z', '\x5', 'z', '\xB68', '\n', 'z', '\x5', 'z', '\xB6A', '\n', 'z', '\x3', 
		'{', '\x3', '{', '\x5', '{', '\xB6E', '\n', '{', '\x3', '{', '\x6', '{', 
		'\xB71', '\n', '{', '\r', '{', '\xE', '{', '\xB72', '\x6', '{', '\xB75', 
		'\n', '{', '\r', '{', '\xE', '{', '\xB76', '\x3', '{', '\x3', '{', '\x3', 
		'{', '\x3', '{', '\x5', '{', '\xB7D', '\n', '{', '\x5', '{', '\xB7F', 
		'\n', '{', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\x5', '|', '\xB8E', '\n', '|', '\x5', '|', '\xB90', 
		'\n', '|', '\x3', '}', '\x3', '}', '\x5', '}', '\xB94', '\n', '}', '\x3', 
		'}', '\x3', '}', '\x5', '}', '\xB98', '\n', '}', '\x3', '}', '\x3', '}', 
		'\x6', '}', '\xB9C', '\n', '}', '\r', '}', '\xE', '}', '\xB9D', '\x3', 
		'}', '\x3', '}', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', '~', '\x3', 
		'~', '\x3', '~', '\x3', '~', '\x3', '~', '\a', '~', '\xBAA', '\n', '~', 
		'\f', '~', '\xE', '~', '\xBAD', '\v', '~', '\x3', '~', '\x3', '~', '\x5', 
		'~', '\xBB1', '\n', '~', '\x3', '\x7F', '\x6', '\x7F', '\xBB4', '\n', 
		'\x7F', '\r', '\x7F', '\xE', '\x7F', '\xBB5', '\x3', '\x7F', '\x3', '\x7F', 
		'\x6', '\x7F', '\xBBA', '\n', '\x7F', '\r', '\x7F', '\xE', '\x7F', '\xBBB', 
		'\x3', '\x80', '\x6', '\x80', '\xBBF', '\n', '\x80', '\r', '\x80', '\xE', 
		'\x80', '\xBC0', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', 
		'\x3', '\x80', '\x5', '\x80', '\xBC8', '\n', '\x80', '\x3', '\x80', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x3', '\x80', '\x5', 
		'\x80', '\xBD0', '\n', '\x80', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', 
		'\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', 
		'\xBD9', '\n', '\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\a', 
		'\x82', '\xBE3', '\n', '\x82', '\f', '\x82', '\xE', '\x82', '\xBE6', '\v', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\xBEA', '\n', '\x82', 
		'\x3', '\x82', '\x3', '\x82', '\x5', '\x82', '\xBEE', '\n', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', '\x82', '\x3', 
		'\x82', '\x3', '\x82', '\a', '\x82', '\xBF7', '\n', '\x82', '\f', '\x82', 
		'\xE', '\x82', '\xBFA', '\v', '\x82', '\x3', '\x82', '\x3', '\x82', '\x5', 
		'\x82', '\xBFE', '\n', '\x82', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', 
		'\x3', '\x83', '\x3', '\x83', '\x5', '\x83', '\xC05', '\n', '\x83', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x6', '\x84', '\xC0B', 
		'\n', '\x84', '\r', '\x84', '\xE', '\x84', '\xC0C', '\x5', '\x84', '\xC0F', 
		'\n', '\x84', '\x3', '\x84', '\x5', '\x84', '\xC12', '\n', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\xC17', '\n', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x6', '\x84', '\xC1B', '\n', '\x84', '\r', 
		'\x84', '\xE', '\x84', '\xC1C', '\x5', '\x84', '\xC1F', '\n', '\x84', 
		'\x3', '\x84', '\x5', '\x84', '\xC22', '\n', '\x84', '\a', '\x84', '\xC24', 
		'\n', '\x84', '\f', '\x84', '\xE', '\x84', '\xC27', '\v', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x6', '\x85', '\xC2F', '\n', '\x85', '\r', '\x85', '\xE', '\x85', 
		'\xC30', '\x5', '\x85', '\xC33', '\n', '\x85', '\x3', '\x85', '\x5', '\x85', 
		'\xC36', '\n', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x6', '\x85', '\xC3C', '\n', '\x85', '\r', '\x85', '\xE', '\x85', 
		'\xC3D', '\x5', '\x85', '\xC40', '\n', '\x85', '\x3', '\x85', '\x5', '\x85', 
		'\xC43', '\n', '\x85', '\a', '\x85', '\xC45', '\n', '\x85', '\f', '\x85', 
		'\xE', '\x85', '\xC48', '\v', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\a', '\x86', '\xC52', '\n', '\x86', '\f', '\x86', '\xE', '\x86', 
		'\xC55', '\v', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x5', '\x86', '\xC5C', '\n', '\x86', '\x3', '\x86', 
		'\x5', '\x86', '\xC5F', '\n', '\x86', '\x3', '\x86', '\x5', '\x86', '\xC62', 
		'\n', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', 
		'\xC67', '\n', '\x86', '\x3', '\x86', '\x5', '\x86', '\xC6A', '\n', '\x86', 
		'\x3', '\x86', '\x5', '\x86', '\xC6D', '\n', '\x86', '\a', '\x86', '\xC6F', 
		'\n', '\x86', '\f', '\x86', '\xE', '\x86', '\xC72', '\v', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x5', '\x86', '\xC76', '\n', '\x86', '\x3', '\x87', 
		'\x5', '\x87', '\xC79', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x6', '\x87', '\xC7F', '\n', '\x87', '\r', '\x87', 
		'\xE', '\x87', '\xC80', '\x5', '\x87', '\xC83', '\n', '\x87', '\x3', '\x87', 
		'\x5', '\x87', '\xC86', '\n', '\x87', '\x3', '\x87', '\x5', '\x87', '\xC89', 
		'\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x6', '\x87', '\xC8F', '\n', '\x87', '\r', '\x87', '\xE', '\x87', '\xC90', 
		'\x5', '\x87', '\xC93', '\n', '\x87', '\x3', '\x87', '\x5', '\x87', '\xC96', 
		'\n', '\x87', '\x3', '\x87', '\x5', '\x87', '\xC99', '\n', '\x87', '\a', 
		'\x87', '\xC9B', '\n', '\x87', '\f', '\x87', '\xE', '\x87', '\xC9E', '\v', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x88', '\x3', '\x88', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8B', '\x3', '\x8B', '\x5', '\x8B', '\xCAB', '\n', '\x8B', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', 
		'\x5', '\x8D', '\xCB3', '\n', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xCBE', '\n', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8D', '\x6', '\x8D', '\xCC3', '\n', '\x8D', '\r', 
		'\x8D', '\xE', '\x8D', '\xCC4', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', 
		'\x3', '\x8E', '\x5', '\x8E', '\xCCB', '\n', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x5', '\x8E', '\xCCF', '\n', '\x8E', '\x3', '\x8F', '\x3', '\x8F', 
		'\x5', '\x8F', '\xCD3', '\n', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', 
		'\x8F', '\x5', '\x8F', '\xCD8', '\n', '\x8F', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x5', '\x90', '\xCDE', '\n', '\x90', '\x3', 
		'\x91', '\x5', '\x91', '\xCE1', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', 
		'\xCE4', '\n', '\x91', '\x3', '\x91', '\x5', '\x91', '\xCE7', '\n', '\x91', 
		'\x3', '\x91', '\x5', '\x91', '\xCEA', '\n', '\x91', '\x5', '\x91', '\xCEC', 
		'\n', '\x91', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x5', '\x92', '\xCF3', '\n', '\x92', '\x5', '\x92', '\xCF5', 
		'\n', '\x92', '\x3', '\x92', '\x3', '\x92', '\x5', '\x92', '\xCF9', '\n', 
		'\x92', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', 
		'\x94', '\x5', '\x94', '\xD05', '\n', '\x94', '\x5', '\x94', '\xD07', 
		'\n', '\x94', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', '\xD0B', '\n', 
		'\x95', '\x3', '\x95', '\x3', '\x95', '\x5', '\x95', '\xD0F', '\n', '\x95', 
		'\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x5', '\x96', '\xD16', '\n', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\xD1E', 
		'\n', '\x96', '\x5', '\x96', '\xD20', '\n', '\x96', '\x3', '\x96', '\x5', 
		'\x96', '\xD23', '\n', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', 
		'\x5', '\x96', '\xD28', '\n', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', 
		'\x96', '\xD2C', '\n', '\x96', '\x3', '\x97', '\x3', '\x97', '\x5', '\x97', 
		'\xD30', '\n', '\x97', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\xD34', 
		'\n', '\x98', '\x3', '\x98', '\x5', '\x98', '\xD37', '\n', '\x98', '\x3', 
		'\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x5', '\x99', '\xD3D', 
		'\n', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xD46', '\n', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', 
		'\x9A', '\x5', '\x9A', '\xD4D', '\n', '\x9A', '\x3', '\x9A', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', '\xD53', '\n', '\x9A', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\xD59', 
		'\n', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\xD5C', '\n', '\x9B', '\x3', 
		'\x9B', '\x5', '\x9B', '\xD5F', '\n', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x5', '\x9B', '\xD64', '\n', '\x9B', '\x3', '\x9B', '\x5', 
		'\x9B', '\xD67', '\n', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\xD6A', 
		'\n', '\x9B', '\a', '\x9B', '\xD6C', '\n', '\x9B', '\f', '\x9B', '\xE', 
		'\x9B', '\xD6F', '\v', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\xD73', '\n', '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', 
		'\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x5', '\xA0', '\xD81', 
		'\n', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x5', '\xA1', '\xD85', '\n', 
		'\xA1', '\x3', '\xA1', '\x5', '\xA1', '\xD88', '\n', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x5', '\xA1', 
		'\xD8F', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xD93', 
		'\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\a', '\xA2', '\xD97', '\n', 
		'\xA2', '\f', '\xA2', '\xE', '\xA2', '\xD9A', '\v', '\xA2', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\xDA4', '\n', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA6', '\x3', '\xA6', '\x5', 
		'\xA6', '\xDB0', '\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', 
		'\x5', '\xA6', '\xDB5', '\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA7', '\x3', '\xA7', '\x5', '\xA7', '\xDBB', '\n', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', 
		'\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\a', '\xA7', 
		'\xDCC', '\n', '\xA7', '\f', '\xA7', '\xE', '\xA7', '\xDCF', '\v', '\xA7', 
		'\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA9', '\x3', '\xA9', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xDDD', '\n', '\xAA', '\x5', 
		'\xAA', '\xDDF', '\n', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xDEC', '\n', 
		'\xAD', '\x3', '\xAD', '\x5', '\xAD', '\xDEF', '\n', '\xAD', '\x3', '\xAD', 
		'\x5', '\xAD', '\xDF2', '\n', '\xAD', '\x3', '\xAE', '\x3', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', 
		'\xAF', '\xDFB', '\n', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\xDFE', 
		'\n', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\xE01', '\n', '\xAF', '\x3', 
		'\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x5', 
		'\xB1', '\xE08', '\n', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB2', 
		'\x3', '\xB2', '\x5', '\xB2', '\xE0E', '\n', '\xB2', '\x3', '\xB2', '\x3', 
		'\xB2', '\x3', '\xB3', '\x5', '\xB3', '\xE13', '\n', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\x5', '\xB3', '\xE17', '\n', '\xB3', '\x3', '\xB3', '\x5', 
		'\xB3', '\xE1A', '\n', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\xE1D', 
		'\n', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', 
		'\x5', '\xB4', '\xE23', '\n', '\xB4', '\x3', '\xB4', '\x6', '\xB4', '\xE26', 
		'\n', '\xB4', '\r', '\xB4', '\xE', '\xB4', '\xE27', '\x3', '\xB4', '\x5', 
		'\xB4', '\xE2B', '\n', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', '\xB4', 
		'\xE2F', '\n', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', '\xB4', '\xE33', 
		'\n', '\xB4', '\x3', '\xB4', '\x5', '\xB4', '\xE36', '\n', '\xB4', '\x3', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x5', 
		'\xB5', '\xE3D', '\n', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\xE40', 
		'\n', '\xB5', '\x5', '\xB5', '\xE42', '\n', '\xB5', '\x3', '\xB6', '\x3', 
		'\xB6', '\x3', '\xB6', '\x5', '\xB6', '\xE47', '\n', '\xB6', '\x3', '\xB7', 
		'\x3', '\xB7', '\a', '\xB7', '\xE4B', '\n', '\xB7', '\f', '\xB7', '\xE', 
		'\xB7', '\xE4E', '\v', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', 
		'\x5', '\xB8', '\xE53', '\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x5', '\xB9', '\xE5D', '\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x5', '\xB9', '\xE62', '\n', '\xB9', '\x3', '\xB9', '\x5', 
		'\xB9', '\xE65', '\n', '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\xE68', 
		'\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xBA', '\x3', '\xBA', 
		'\x3', '\xBA', '\a', '\xBA', '\xE6F', '\n', '\xBA', '\f', '\xBA', '\xE', 
		'\xBA', '\xE72', '\v', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x5', '\xBB', '\xE79', '\n', '\xBB', '\x3', 
		'\xBB', '\x5', '\xBB', '\xE7C', '\n', '\xBB', '\x3', '\xBC', '\x5', '\xBC', 
		'\xE7F', '\n', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\xE82', '\n', '\xBC', 
		'\x3', '\xBC', '\x5', '\xBC', '\xE85', '\n', '\xBC', '\x3', '\xBC', '\x5', 
		'\xBC', '\xE88', '\n', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\xE8B', 
		'\n', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x5', '\xBC', '\xE92', '\n', '\xBC', '\x3', '\xBC', '\x5', 
		'\xBC', '\xE95', '\n', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\xE98', 
		'\n', '\xBC', '\x3', '\xBC', '\a', '\xBC', '\xE9B', '\n', '\xBC', '\f', 
		'\xBC', '\xE', '\xBC', '\xE9E', '\v', '\xBC', '\x3', '\xBC', '\x5', '\xBC', 
		'\xEA1', '\n', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\xEA4', '\n', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\xEA8', '\n', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\xEAC', '\n', '\xBC', '\x3', '\xBD', 
		'\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\xEB1', '\n', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5', '\xBD', '\xEB6', '\n', '\xBD', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBF', 
		'\x3', '\xBF', '\x5', '\xBF', '\xEBE', '\n', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x5', '\xBF', '\xEC2', '\n', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC1', 
		'\x3', '\xC1', '\x5', '\xC1', '\xECC', '\n', '\xC1', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', 
		'\xC2', '\x3', '\xC2', '\x6', '\xC2', '\xED6', '\n', '\xC2', '\r', '\xC2', 
		'\xE', '\xC2', '\xED7', '\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', '\xEDC', 
		'\n', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC4', '\x3', '\xC4', 
		'\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', 
		'\x5', '\xC4', '\xEE7', '\n', '\xC4', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\xEF3', '\n', '\xC5', 
		'\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\xEF7', '\n', '\xC6', '\x3', 
		'\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x5', '\xC6', '\xEFF', '\n', '\xC6', '\x3', '\xC6', '\x5', '\xC6', 
		'\xF02', '\n', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', '\xF06', 
		'\n', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x5', '\xC6', 
		'\xF0B', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\xF14', 
		'\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\a', '\xC8', '\xF24', '\n', '\xC8', '\f', '\xC8', '\xE', '\xC8', '\xF27', 
		'\v', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\xF2B', '\n', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\xF30', 
		'\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x5', '\xC9', '\xF3C', '\n', '\xC9', '\x3', '\xCA', '\x3', 
		'\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\xF42', '\n', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\a', '\xCA', 
		'\xF48', '\n', '\xCA', '\f', '\xCA', '\xE', '\xCA', '\xF4B', '\v', '\xCA', 
		'\x3', '\xCA', '\x5', '\xCA', '\xF4E', '\n', '\xCA', '\x3', '\xCB', '\x3', 
		'\xCB', '\x5', '\xCB', '\xF52', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x5', '\xCB', '\xF56', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', 
		'\xCC', '\xF5F', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x5', '\xCC', '\xF64', '\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', 
		'\xCC', '\xF68', '\n', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\xF6B', 
		'\n', '\xCC', '\x5', '\xCC', '\xF6D', '\n', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\xF73', '\n', '\xCC', 
		'\x3', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\xF77', '\n', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x5', 
		'\xCD', '\xF7E', '\n', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\xF85', '\n', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x5', '\xCD', '\xF89', '\n', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x5', '\xCD', '\xF8D', '\n', '\xCD', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x5', '\xCE', '\xF96', '\n', '\xCE', '\x3', '\xCE', '\x3', '\xCE', 
		'\x3', '\xCE', '\x6', '\xCE', '\xF9B', '\n', '\xCE', '\r', '\xCE', '\xE', 
		'\xCE', '\xF9C', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\a', '\xCF', '\xFAF', '\n', '\xCF', '\f', 
		'\xCF', '\xE', '\xCF', '\xFB2', '\v', '\xCF', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x5', '\xCF', '\xFB9', '\n', 
		'\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x3', '\xD0', '\x5', '\xD0', '\xFC6', '\n', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x5', '\xD0', '\xFCA', '\n', '\xD0', '\x3', '\xD1', '\x3', 
		'\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', 
		'\xD1', '\x5', '\xD1', '\xFD3', '\n', '\xD1', '\x3', '\xD1', '\x3', '\xD1', 
		'\x3', '\xD1', '\a', '\xD1', '\xFD8', '\n', '\xD1', '\f', '\xD1', '\xE', 
		'\xD1', '\xFDB', '\v', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\a', '\xD2', '\xFE5', '\n', '\xD2', '\f', '\xD2', '\xE', '\xD2', '\xFE8', 
		'\v', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\a', '\xD2', 
		'\xFED', '\n', '\xD2', '\f', '\xD2', '\xE', '\xD2', '\xFF0', '\v', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\a', '\xD2', '\xFF5', '\n', 
		'\xD2', '\f', '\xD2', '\xE', '\xD2', '\xFF8', '\v', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x5', '\xD2', '\xFFD', '\n', '\xD2', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD3', '\a', '\xD3', '\x1007', '\n', '\xD3', 
		'\f', '\xD3', '\xE', '\xD3', '\x100A', '\v', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\a', '\xD3', '\x100F', '\n', '\xD3', '\f', '\xD3', 
		'\xE', '\xD3', '\x1012', '\v', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\a', '\xD3', '\x1017', '\n', '\xD3', '\f', '\xD3', '\xE', '\xD3', 
		'\x101A', '\v', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x5', 
		'\xD3', '\x101F', '\n', '\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', 
		'\x1023', '\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\x1027', 
		'\n', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\x102A', '\n', '\xD4', '\x3', 
		'\xD5', '\x3', '\xD5', '\x5', '\xD5', '\x102E', '\n', '\xD5', '\x3', '\xD5', 
		'\x3', '\xD5', '\x5', '\xD5', '\x1032', '\n', '\xD5', '\x3', '\xD5', '\x5', 
		'\xD5', '\x1035', '\n', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x5', '\xD6', 
		'\x1039', '\n', '\xD6', '\x3', '\xD6', '\x5', '\xD6', '\x103C', '\n', 
		'\xD6', '\x3', '\xD6', '\x5', '\xD6', '\x103F', '\n', '\xD6', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\a', '\xD7', '\x1049', '\n', '\xD7', '\f', 
		'\xD7', '\xE', '\xD7', '\x104C', '\v', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x5', '\xD7', '\x1050', '\n', '\xD7', '\x3', '\xD8', '\x5', '\xD8', '\x1053', 
		'\n', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x1056', '\n', '\xD8', '\x3', 
		'\xD8', '\x5', '\xD8', '\x1059', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', 
		'\x5', '\xD8', '\x105D', '\n', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x1060', 
		'\n', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x1063', '\n', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x1067', '\n', '\xD8', '\x5', '\xD8', 
		'\x1069', '\n', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\a', 
		'\xD8', '\x106E', '\n', '\xD8', '\f', '\xD8', '\xE', '\xD8', '\x1071', 
		'\v', '\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', 
		'\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\a', '\xD9', '\x107A', '\n', 
		'\xD9', '\f', '\xD9', '\xE', '\xD9', '\x107D', '\v', '\xD9', '\x3', '\xD9', 
		'\x5', '\xD9', '\x1080', '\n', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', 
		'\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\a', 
		'\xDA', '\x1089', '\n', '\xDA', '\f', '\xDA', '\xE', '\xDA', '\x108C', 
		'\v', '\xDA', '\x3', '\xDA', '\x5', '\xDA', '\x108F', '\n', '\xDA', '\x3', 
		'\xDA', '\x3', '\xDA', '\x5', '\xDA', '\x1093', '\n', '\xDA', '\x3', '\xDB', 
		'\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', 
		'\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', 
		'\x3', '\xDC', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\a', '\xDD', '\x10AD', '\n', 
		'\xDD', '\f', '\xDD', '\xE', '\xDD', '\x10B0', '\v', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\a', '\xDE', 
		'\x10BC', '\n', '\xDE', '\f', '\xDE', '\xE', '\xDE', '\x10BF', '\v', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\a', '\xDE', '\x10C4', '\n', 
		'\xDE', '\f', '\xDE', '\xE', '\xDE', '\x10C7', '\v', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\x3', '\xDE', '\a', '\xDE', '\x10CC', '\n', '\xDE', '\f', 
		'\xDE', '\xE', '\xDE', '\x10CF', '\v', '\xDE', '\x3', '\xDE', '\x3', '\xDE', 
		'\x3', '\xDE', '\x5', '\xDE', '\x10D4', '\n', '\xDE', '\x3', '\xDF', '\x3', 
		'\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', 
		'\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x10E0', 
		'\n', '\xDF', '\x3', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x10E4', '\n', 
		'\xDF', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', 
		'\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x6', '\xE0', '\x10EE', 
		'\n', '\xE0', '\r', '\xE0', '\xE', '\xE0', '\x10EF', '\x5', '\xE0', '\x10F2', 
		'\n', '\xE0', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', 
		'\x3', '\xE2', '\x5', '\xE2', '\x10F9', '\n', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x10FE', '\n', '\xE2', '\x3', '\xE2', 
		'\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', 
		'\x5', '\xE2', '\x1106', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', 
		'\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x110C', '\n', '\xE2', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', 
		'\x1113', '\n', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x1116', '\n', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x111A', '\n', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', 
		'\x6', '\xE3', '\x1126', '\n', '\xE3', '\r', '\xE3', '\xE', '\xE3', '\x1127', 
		'\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x112C', '\n', '\xE3', '\x3', 
		'\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE4', '\x3', 
		'\xE4', '\x5', '\xE4', '\x1134', '\n', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x5', '\xE4', '\x1138', '\n', '\xE4', '\x3', '\xE4', '\x6', '\xE4', '\x113B', 
		'\n', '\xE4', '\r', '\xE4', '\xE', '\xE4', '\x113C', '\x3', '\xE4', '\x5', 
		'\xE4', '\x1140', '\n', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', 
		'\x5', '\xE4', '\x1145', '\n', '\xE4', '\x5', '\xE4', '\x1147', '\n', 
		'\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\x114C', 
		'\n', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\x1150', '\n', 
		'\xE5', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\x1155', 
		'\n', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\x1159', '\n', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\x5', '\xE6', '\x1160', '\n', '\xE6', '\x3', '\xE7', '\x3', '\xE7', 
		'\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\a', '\xE7', '\x1167', '\n', 
		'\xE7', '\f', '\xE7', '\xE', '\xE7', '\x116A', '\v', '\xE7', '\x3', '\xE7', 
		'\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', 
		'\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x1174', '\n', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\a', '\xE7', '\x117A', 
		'\n', '\xE7', '\f', '\xE7', '\xE', '\xE7', '\x117D', '\v', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\x1188', 
		'\n', '\xE7', '\x5', '\xE7', '\x118A', '\n', '\xE7', '\x3', '\xE8', '\x3', 
		'\xE8', '\x6', '\xE8', '\x118E', '\n', '\xE8', '\r', '\xE8', '\xE', '\xE8', 
		'\x118F', '\x3', '\xE8', '\x5', '\xE8', '\x1193', '\n', '\xE8', '\x5', 
		'\xE8', '\x1195', '\n', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\x1198', 
		'\n', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', 
		'\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', 
		'\x3', '\xEA', '\x5', '\xEA', '\x11AE', '\n', '\xEA', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x5', '\xEA', '\x11B4', '\n', '\xEA', 
		'\x3', '\xEA', '\x5', '\xEA', '\x11B7', '\n', '\xEA', '\x3', '\xEB', '\x3', 
		'\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x5', 
		'\xEB', '\x11BF', '\n', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xED', 
		'\x3', '\xED', '\x5', '\xED', '\x11C5', '\n', '\xED', '\x3', '\xED', '\x5', 
		'\xED', '\x11C8', '\n', '\xED', '\x3', '\xEE', '\x5', '\xEE', '\x11CB', 
		'\n', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x11CF', '\n', 
		'\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x11D2', '\n', '\xEE', '\x3', '\xEE', 
		'\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x11D7', '\n', '\xEE', '\x3', 
		'\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x11DC', '\n', '\xEE', 
		'\x3', '\xEE', '\x5', '\xEE', '\x11DF', '\n', '\xEE', '\x3', '\xEE', '\x5', 
		'\xEE', '\x11E2', '\n', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x11E5', 
		'\n', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x11E9', '\n', 
		'\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x11EE', 
		'\n', '\xEE', '\x5', '\xEE', '\x11F0', '\n', '\xEE', '\x3', '\xEF', '\x3', 
		'\xEF', '\x5', '\xEF', '\x11F4', '\n', '\xEF', '\x3', '\xEF', '\x3', '\xEF', 
		'\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x5', '\xEF', 
		'\x11FC', '\n', '\xEF', '\x5', '\xEF', '\x11FE', '\n', '\xEF', '\x3', 
		'\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', 
		'\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x5', 
		'\xF0', '\x120A', '\n', '\xF0', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0', 
		'\x3', '\xF0', '\x3', '\xF0', '\x6', '\xF0', '\x1211', '\n', '\xF0', '\r', 
		'\xF0', '\xE', '\xF0', '\x1212', '\x3', '\xF0', '\x3', '\xF0', '\x3', 
		'\xF1', '\x5', '\xF1', '\x1218', '\n', '\xF1', '\x3', '\xF1', '\x5', '\xF1', 
		'\x121B', '\n', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF2', '\x3', 
		'\xF2', '\x3', '\xF2', '\x3', '\xF2', '\x5', '\xF2', '\x1223', '\n', '\xF2', 
		'\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', 
		'\x5', '\xF3', '\x122A', '\n', '\xF3', '\x3', '\xF4', '\x3', '\xF4', '\x5', 
		'\xF4', '\x122E', '\n', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\x5', '\xF4', 
		'\x1232', '\n', '\xF4', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', 
		'\xF5', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF7', '\x3', 
		'\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\a', 
		'\xF7', '\x1241', '\n', '\xF7', '\f', '\xF7', '\xE', '\xF7', '\x1244', 
		'\v', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF8', '\x3', '\xF8', 
		'\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', 
		'\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', '\x3', '\xF8', 
		'\x3', '\xF8', '\x5', '\xF8', '\x1255', '\n', '\xF8', '\x5', '\xF8', '\x1257', 
		'\n', '\xF8', '\x3', '\xF9', '\x3', '\xF9', '\x5', '\xF9', '\x125B', '\n', 
		'\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x5', '\xFA', '\x1267', '\n', '\xFA', '\x3', '\xFA', '\x3', '\xFA', 
		'\x5', '\xFA', '\x126B', '\n', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', 
		'\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x5', '\xFA', '\x1278', 
		'\n', '\xFA', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', 
		'\x5', '\xFB', '\x127E', '\n', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x1289', '\n', '\xFB', '\x3', '\xFB', 
		'\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', 
		'\x3', '\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x1293', '\n', '\xFB', '\x3', 
		'\xFB', '\x3', '\xFB', '\x5', '\xFB', '\x1297', '\n', '\xFB', '\x5', '\xFB', 
		'\x1299', '\n', '\xFB', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\x12B0', '\n', '\xFD', 
		'\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', 
		'\x6', '\xFD', '\x12B7', '\n', '\xFD', '\r', '\xFD', '\xE', '\xFD', '\x12B8', 
		'\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', 
		'\x12BF', '\n', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x12C2', '\n', 
		'\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x12C5', '\n', '\xFE', '\x3', '\xFE', 
		'\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x12CA', '\n', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x12D3', '\n', '\xFE', '\x5', '\xFE', 
		'\x12D5', '\n', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\x12DD', '\n', '\xFE', 
		'\x5', '\xFE', '\x12DF', '\n', '\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', 
		'\xFE', '\x12E3', '\n', '\xFE', '\x3', '\xFE', '\x6', '\xFE', '\x12E6', 
		'\n', '\xFE', '\r', '\xFE', '\xE', '\xFE', '\x12E7', '\x3', '\xFE', '\x5', 
		'\xFE', '\x12EB', '\n', '\xFE', '\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', 
		'\x12EF', '\n', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x12F2', '\n', 
		'\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x12F5', '\n', '\xFF', '\x3', '\xFF', 
		'\x3', '\xFF', '\x5', '\xFF', '\x12F9', '\n', '\xFF', '\x3', '\xFF', '\x3', 
		'\xFF', '\x3', '\xFF', '\x3', '\xFF', '\x5', '\xFF', '\x12FF', '\n', '\xFF', 
		'\x3', '\xFF', '\x5', '\xFF', '\x1302', '\n', '\xFF', '\x3', '\xFF', '\x5', 
		'\xFF', '\x1305', '\n', '\xFF', '\x3', '\xFF', '\a', '\xFF', '\x1308', 
		'\n', '\xFF', '\f', '\xFF', '\xE', '\xFF', '\x130B', '\v', '\xFF', '\x3', 
		'\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', 
		'\x3', '\x100', '\x3', '\x100', '\x5', '\x100', '\x1314', '\n', '\x100', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x5', 
		'\x101', '\x131A', '\n', '\x101', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\a', '\x102', 
		'\x1322', '\n', '\x102', '\f', '\x102', '\xE', '\x102', '\x1325', '\v', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', '\x1329', '\n', 
		'\x102', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', 
		'\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x6', 
		'\x103', '\x1333', '\n', '\x103', '\r', '\x103', '\xE', '\x103', '\x1334', 
		'\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x104', '\x3', 
		'\x104', '\x3', '\x104', '\x5', '\x104', '\x133D', '\n', '\x104', '\x3', 
		'\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', 
		'\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x5', '\x105', '\x1347', 
		'\n', '\x105', '\x3', '\x106', '\x3', '\x106', '\x3', '\x107', '\x3', 
		'\x107', '\x3', '\x107', '\x3', '\x107', '\x3', '\x107', '\x3', '\x107', 
		'\x5', '\x107', '\x1351', '\n', '\x107', '\x3', '\x108', '\x3', '\x108', 
		'\x3', '\x108', '\x3', '\x108', '\x5', '\x108', '\x1357', '\n', '\x108', 
		'\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x5', 
		'\x108', '\x135D', '\n', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x5', '\x108', '\x1362', '\n', '\x108', '\x3', '\x108', '\x3', 
		'\x108', '\x3', '\x108', '\x3', '\x108', '\x5', '\x108', '\x1368', '\n', 
		'\x108', '\x3', '\x108', '\x5', '\x108', '\x136B', '\n', '\x108', '\x3', 
		'\x109', '\x3', '\x109', '\x5', '\x109', '\x136F', '\n', '\x109', '\x3', 
		'\x109', '\x3', '\x109', '\x3', '\x109', '\x5', '\x109', '\x1374', '\n', 
		'\x109', '\x3', '\x109', '\x5', '\x109', '\x1377', '\n', '\x109', '\x3', 
		'\x109', '\x5', '\x109', '\x137A', '\n', '\x109', '\x3', '\x109', '\x5', 
		'\x109', '\x137D', '\n', '\x109', '\x3', '\x10A', '\x3', '\x10A', '\x3', 
		'\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', 
		'\x5', '\x10A', '\x1386', '\n', '\x10A', '\x3', '\x10A', '\x3', '\x10A', 
		'\x5', '\x10A', '\x138A', '\n', '\x10A', '\x5', '\x10A', '\x138C', '\n', 
		'\x10A', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', 
		'\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', 
		'\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', 
		'\x10B', '\x139F', '\n', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x13A6', '\n', 
		'\x10B', '\x5', '\x10B', '\x13A8', '\n', '\x10B', '\x3', '\x10C', '\x3', 
		'\x10C', '\x5', '\x10C', '\x13AC', '\n', '\x10C', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10E', 
		'\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', 
		'\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10E', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x13BF', '\n', '\x10F', 
		'\x3', '\x10F', '\x5', '\x10F', '\x13C2', '\n', '\x10F', '\x3', '\x10F', 
		'\x5', '\x10F', '\x13C5', '\n', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x13CB', '\n', '\x10F', 
		'\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x5', '\x10F', '\x13D2', '\n', '\x10F', '\x3', '\x10F', '\x3', 
		'\x10F', '\x3', '\x10F', '\x5', '\x10F', '\x13D7', '\n', '\x10F', '\x3', 
		'\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', 
		'\x3', '\x110', '\x3', '\x110', '\x3', '\x111', '\x3', '\x111', '\x3', 
		'\x111', '\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3', '\x111', 
		'\x5', '\x111', '\x13E7', '\n', '\x111', '\x3', '\x112', '\x3', '\x112', 
		'\x3', '\x112', '\x5', '\x112', '\x13EC', '\n', '\x112', '\x3', '\x112', 
		'\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\x5', '\x112', '\x13F2', 
		'\n', '\x112', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x5', '\x113', '\x13F9', '\n', '\x113', '\x3', 
		'\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x115', 
		'\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x116', '\x3', 
		'\x116', '\x3', '\x116', '\x3', '\x116', '\x3', '\x117', '\x3', '\x117', 
		'\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x5', '\x117', '\x140C', 
		'\n', '\x117', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', 
		'\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', '\x3', '\x118', 
		'\x5', '\x118', '\x1416', '\n', '\x118', '\x5', '\x118', '\x1418', '\n', 
		'\x118', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x5', '\x119', '\x141F', '\n', '\x119', '\x3', '\x11A', 
		'\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x3', 
		'\x11B', '\x3', '\x11B', '\x3', '\x11C', '\x3', '\x11C', '\x5', '\x11C', 
		'\x142A', '\n', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\x6', '\x11C', '\x1430', '\n', '\x11C', '\r', '\x11C', 
		'\xE', '\x11C', '\x1431', '\x5', '\x11C', '\x1434', '\n', '\x11C', '\x3', 
		'\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11D', '\x3', '\x11D', 
		'\x3', '\x11D', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\x3', 
		'\x11E', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x5', '\x11F', 
		'\x1443', '\n', '\x11F', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120', 
		'\x3', '\x120', '\x3', '\x121', '\x3', '\x121', '\x3', '\x121', '\x5', 
		'\x121', '\x144C', '\n', '\x121', '\x3', '\x121', '\x3', '\x121', '\x3', 
		'\x121', '\x5', '\x121', '\x1451', '\n', '\x121', '\x3', '\x121', '\x3', 
		'\x121', '\x5', '\x121', '\x1455', '\n', '\x121', '\x3', '\x121', '\x5', 
		'\x121', '\x1458', '\n', '\x121', '\x3', '\x122', '\x3', '\x122', '\x3', 
		'\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x123', 
		'\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\x5', '\x123', '\x1466', '\n', '\x123', '\x3', '\x123', '\x3', 
		'\x123', '\x3', '\x124', '\x3', '\x124', '\a', '\x124', '\x146C', '\n', 
		'\x124', '\f', '\x124', '\xE', '\x124', '\x146F', '\v', '\x124', '\x3', 
		'\x124', '\x5', '\x124', '\x1472', '\n', '\x124', '\x3', '\x124', '\x5', 
		'\x124', '\x1475', '\n', '\x124', '\x3', '\x125', '\x3', '\x125', '\x3', 
		'\x125', '\x3', '\x126', '\x6', '\x126', '\x147B', '\n', '\x126', '\r', 
		'\x126', '\xE', '\x126', '\x147C', '\x3', '\x127', '\x3', '\x127', '\x3', 
		'\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', 
		'\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x5', '\x127', '\x1489', 
		'\n', '\x127', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', '\x148D', 
		'\n', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x128', '\x5', 
		'\x128', '\x1492', '\n', '\x128', '\x3', '\x128', '\x5', '\x128', '\x1495', 
		'\n', '\x128', '\x3', '\x128', '\x3', '\x128', '\x3', '\x129', '\x3', 
		'\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x14A2', 
		'\n', '\x129', '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x14A6', 
		'\n', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x14AE', '\n', 
		'\x12A', '\x3', '\x12A', '\x6', '\x12A', '\x14B1', '\n', '\x12A', '\r', 
		'\x12A', '\xE', '\x12A', '\x14B2', '\x3', '\x12A', '\x3', '\x12A', '\x5', 
		'\x12A', '\x14B7', '\n', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', 
		'\x12A', '\x14BB', '\n', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x5', 
		'\x12A', '\x14BF', '\n', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', 
		'\x12B', '\x3', '\x12B', '\x5', '\x12B', '\x14C5', '\n', '\x12B', '\x3', 
		'\x12B', '\x5', '\x12B', '\x14C8', '\n', '\x12B', '\x3', '\x12B', '\x5', 
		'\x12B', '\x14CB', '\n', '\x12B', '\x3', '\x12C', '\x3', '\x12C', '\x3', 
		'\x12C', '\x3', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x5', '\x12D', '\x14E6', '\n', '\x12D', '\x3', '\x12D', '\x3', '\x12D', 
		'\x6', '\x12D', '\x14EA', '\n', '\x12D', '\r', '\x12D', '\xE', '\x12D', 
		'\x14EB', '\x3', '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x14F0', '\n', 
		'\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12E', '\x3', '\x12E', 
		'\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', 
		'\x12E', '\x5', '\x12E', '\x14FB', '\n', '\x12E', '\x3', '\x12E', '\x3', 
		'\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', 
		'\x5', '\x12F', '\x1503', '\n', '\x12F', '\x3', '\x130', '\x3', '\x130', 
		'\x3', '\x130', '\x3', '\x130', '\x5', '\x130', '\x1509', '\n', '\x130', 
		'\x3', '\x130', '\x3', '\x130', '\x5', '\x130', '\x150D', '\n', '\x130', 
		'\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', 
		'\x132', '\x3', '\x132', '\x3', '\x132', '\x5', '\x132', '\x1516', '\n', 
		'\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', 
		'\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x5', '\x132', '\x151F', 
		'\n', '\x132', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x5', 
		'\x133', '\x1524', '\n', '\x133', '\x3', '\x133', '\x6', '\x133', '\x1527', 
		'\n', '\x133', '\r', '\x133', '\xE', '\x133', '\x1528', '\x3', '\x133', 
		'\x3', '\x133', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x152F', 
		'\n', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1533', 
		'\n', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1536', '\n', '\x134', 
		'\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x135', '\x6', 
		'\x135', '\x153C', '\n', '\x135', '\r', '\x135', '\xE', '\x135', '\x153D', 
		'\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', '\x136', '\x3', 
		'\x136', '\x3', '\x136', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', 
		'\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', 
		'\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x5', '\x137', 
		'\x155A', '\n', '\x137', '\x3', '\x138', '\x6', '\x138', '\x155D', '\n', 
		'\x138', '\r', '\x138', '\xE', '\x138', '\x155E', '\x3', '\x139', '\x3', 
		'\x139', '\x5', '\x139', '\x1563', '\n', '\x139', '\x3', '\x139', '\x3', 
		'\x139', '\x3', '\x139', '\x3', '\x13A', '\x3', '\x13A', '\x5', '\x13A', 
		'\x156A', '\n', '\x13A', '\x3', '\x13A', '\x3', '\x13A', '\x5', '\x13A', 
		'\x156E', '\n', '\x13A', '\x3', '\x13B', '\x3', '\x13B', '\x5', '\x13B', 
		'\x1572', '\n', '\x13B', '\x3', '\x13B', '\x3', '\x13B', '\x5', '\x13B', 
		'\x1576', '\n', '\x13B', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', 
		'\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13D', '\a', '\x13D', '\x1580', '\n', '\x13D', '\f', '\x13D', '\xE', 
		'\x13D', '\x1583', '\v', '\x13D', '\x3', '\x13D', '\x5', '\x13D', '\x1586', 
		'\n', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', 
		'\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13F', '\x3', '\x13F', '\x3', '\x13F', '\x3', '\x140', '\x5', 
		'\x140', '\x1594', '\n', '\x140', '\x3', '\x140', '\x3', '\x140', '\x3', 
		'\x140', '\x3', '\x140', '\x5', '\x140', '\x159A', '\n', '\x140', '\x3', 
		'\x140', '\x3', '\x140', '\x3', '\x140', '\x3', '\x140', '\x3', '\x140', 
		'\x5', '\x140', '\x15A1', '\n', '\x140', '\x3', '\x141', '\x3', '\x141', 
		'\x3', '\x141', '\x5', '\x141', '\x15A6', '\n', '\x141', '\x3', '\x141', 
		'\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', 
		'\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x5', '\x141', 
		'\x15B1', '\n', '\x141', '\x3', '\x141', '\x5', '\x141', '\x15B4', '\n', 
		'\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', 
		'\x5', '\x141', '\x15BA', '\n', '\x141', '\x5', '\x141', '\x15BC', '\n', 
		'\x141', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', 
		'\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x5', '\x142', '\x15C5', 
		'\n', '\x142', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', 
		'\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', '\x3', '\x143', 
		'\x5', '\x143', '\x15CF', '\n', '\x143', '\x3', '\x143', '\x3', '\x143', 
		'\x3', '\x143', '\x5', '\x143', '\x15D4', '\n', '\x143', '\x3', '\x144', 
		'\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', 
		'\x145', '\x3', '\x145', '\x3', '\x146', '\x3', '\x146', '\x3', '\x147', 
		'\x3', '\x147', '\x3', '\x148', '\x3', '\x148', '\x5', '\x148', '\x15E3', 
		'\n', '\x148', '\x3', '\x149', '\x3', '\x149', '\x5', '\x149', '\x15E7', 
		'\n', '\x149', '\x3', '\x14A', '\x5', '\x14A', '\x15EA', '\n', '\x14A', 
		'\x3', '\x14A', '\x3', '\x14A', '\x5', '\x14A', '\x15EE', '\n', '\x14A', 
		'\x3', '\x14A', '\x5', '\x14A', '\x15F1', '\n', '\x14A', '\x3', '\x14B', 
		'\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', '\x3', '\x14C', 
		'\x6', '\x14C', '\x15FD', '\n', '\x14C', '\r', '\x14C', '\xE', '\x14C', 
		'\x15FE', '\x5', '\x14C', '\x1601', '\n', '\x14C', '\x3', '\x14C', '\x3', 
		'\x14C', '\x5', '\x14C', '\x1605', '\n', '\x14C', '\x3', '\x14D', '\x3', 
		'\x14D', '\x3', '\x14D', '\x3', '\x14D', '\a', '\x14D', '\x160B', '\n', 
		'\x14D', '\f', '\x14D', '\xE', '\x14D', '\x160E', '\v', '\x14D', '\x3', 
		'\x14D', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14E', '\x5', '\x14E', 
		'\x1614', '\n', '\x14E', '\x3', '\x14E', '\x6', '\x14E', '\x1617', '\n', 
		'\x14E', '\r', '\x14E', '\xE', '\x14E', '\x1618', '\x5', '\x14E', '\x161B', 
		'\n', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14F', '\x5', 
		'\x14F', '\x1620', '\n', '\x14F', '\x3', '\x14F', '\x6', '\x14F', '\x1623', 
		'\n', '\x14F', '\r', '\x14F', '\xE', '\x14F', '\x1624', '\x3', '\x14F', 
		'\x3', '\x14F', '\x3', '\x150', '\x3', '\x150', '\x3', '\x150', '\x3', 
		'\x150', '\x5', '\x150', '\x162D', '\n', '\x150', '\x3', '\x151', '\x3', 
		'\x151', '\x3', '\x151', '\x3', '\x151', '\x3', '\x151', '\x5', '\x151', 
		'\x1634', '\n', '\x151', '\x3', '\x151', '\x3', '\x151', '\x5', '\x151', 
		'\x1638', '\n', '\x151', '\x3', '\x151', '\x5', '\x151', '\x163B', '\n', 
		'\x151', '\x3', '\x152', '\x3', '\x152', '\x3', '\x152', '\x3', '\x153', 
		'\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', 
		'\x153', '\x5', '\x153', '\x1646', '\n', '\x153', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x5', '\x154', '\x164C', '\n', 
		'\x154', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x156', 
		'\x3', '\x156', '\x3', '\x156', '\x3', '\x156', '\x5', '\x156', '\x1655', 
		'\n', '\x156', '\x3', '\x156', '\x5', '\x156', '\x1658', '\n', '\x156', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x5', 
		'\x157', '\x165E', '\n', '\x157', '\x3', '\x157', '\x6', '\x157', '\x1661', 
		'\n', '\x157', '\r', '\x157', '\xE', '\x157', '\x1662', '\x3', '\x157', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x5', '\x157', '\x1669', 
		'\n', '\x157', '\x3', '\x157', '\x6', '\x157', '\x166C', '\n', '\x157', 
		'\r', '\x157', '\xE', '\x157', '\x166D', '\x5', '\x157', '\x1670', '\n', 
		'\x157', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', '\x3', '\x158', 
		'\x3', '\x158', '\x5', '\x158', '\x1677', '\n', '\x158', '\x3', '\x158', 
		'\x5', '\x158', '\x167A', '\n', '\x158', '\x3', '\x159', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x159', '\x3', '\x159', '\x5', '\x159', '\x1681', 
		'\n', '\x159', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', 
		'\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x5', '\x15A', '\x168C', '\n', '\x15A', '\x3', '\x15A', 
		'\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', '\x1692', 
		'\n', '\x15A', '\x3', '\x15A', '\x3', '\x15A', '\x5', '\x15A', '\x1696', 
		'\n', '\x15A', '\x3', '\x15B', '\x3', '\x15B', '\x3', '\x15B', '\x3', 
		'\x15B', '\x5', '\x15B', '\x169C', '\n', '\x15B', '\x3', '\x15B', '\x6', 
		'\x15B', '\x169F', '\n', '\x15B', '\r', '\x15B', '\xE', '\x15B', '\x16A0', 
		'\x5', '\x15B', '\x16A3', '\n', '\x15B', '\x3', '\x15B', '\x3', '\x15B', 
		'\x3', '\x15C', '\x3', '\x15C', '\x5', '\x15C', '\x16A9', '\n', '\x15C', 
		'\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', 
		'\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15C', 
		'\x5', '\x15C', '\x16B4', '\n', '\x15C', '\x5', '\x15C', '\x16B6', '\n', 
		'\x15C', '\x5', '\x15C', '\x16B8', '\n', '\x15C', '\x3', '\x15C', '\x5', 
		'\x15C', '\x16BB', '\n', '\x15C', '\x3', '\x15D', '\x3', '\x15D', '\x5', 
		'\x15D', '\x16BF', '\n', '\x15D', '\x3', '\x15D', '\x5', '\x15D', '\x16C2', 
		'\n', '\x15D', '\x3', '\x15E', '\x3', '\x15E', '\x5', '\x15E', '\x16C6', 
		'\n', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x5', '\x15E', '\x16CA', 
		'\n', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15E', '\x5', 
		'\x15E', '\x16CF', '\n', '\x15E', '\x3', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', 
		'\x3', '\x160', '\x3', '\x160', '\x5', '\x160', '\x16DA', '\n', '\x160', 
		'\x3', '\x160', '\x3', '\x160', '\x5', '\x160', '\x16DE', '\n', '\x160', 
		'\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', 
		'\x160', '\x3', '\x160', '\x5', '\x160', '\x16E6', '\n', '\x160', '\x3', 
		'\x161', '\x5', '\x161', '\x16E9', '\n', '\x161', '\x3', '\x161', '\x3', 
		'\x161', '\x3', '\x161', '\a', '\x161', '\x16EE', '\n', '\x161', '\f', 
		'\x161', '\xE', '\x161', '\x16F1', '\v', '\x161', '\x3', '\x162', '\x3', 
		'\x162', '\x5', '\x162', '\x16F5', '\n', '\x162', '\x3', '\x162', '\x6', 
		'\x162', '\x16F8', '\n', '\x162', '\r', '\x162', '\xE', '\x162', '\x16F9', 
		'\x3', '\x163', '\x3', '\x163', '\x5', '\x163', '\x16FE', '\n', '\x163', 
		'\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x3', '\x163', '\x5', 
		'\x163', '\x1704', '\n', '\x163', '\x3', '\x163', '\x3', '\x163', '\x5', 
		'\x163', '\x1708', '\n', '\x163', '\x3', '\x163', '\x5', '\x163', '\x170B', 
		'\n', '\x163', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x3', '\x164', '\x5', '\x164', '\x1713', '\n', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x1716', '\n', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x171A', '\n', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x171E', '\n', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x3', '\x164', '\x5', '\x164', '\x1723', '\n', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x1726', '\n', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x172A', '\n', '\x164', '\x3', 
		'\x164', '\x3', '\x164', '\x5', '\x164', '\x172E', '\n', '\x164', '\a', 
		'\x164', '\x1730', '\n', '\x164', '\f', '\x164', '\xE', '\x164', '\x1733', 
		'\v', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', '\x164', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', 
		'\x5', '\x166', '\x1746', '\n', '\x166', '\x3', '\x167', '\x3', '\x167', 
		'\x5', '\x167', '\x174A', '\n', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x5', '\x167', '\x174E', '\n', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\x1754', '\n', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\x1758', '\n', '\x168', 
		'\x3', '\x168', '\x6', '\x168', '\x175B', '\n', '\x168', '\r', '\x168', 
		'\xE', '\x168', '\x175C', '\x5', '\x168', '\x175F', '\n', '\x168', '\x3', 
		'\x168', '\x5', '\x168', '\x1762', '\n', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x5', '\x168', '\x1766', '\n', '\x168', '\x3', '\x168', '\x5', 
		'\x168', '\x1769', '\n', '\x168', '\x3', '\x168', '\x5', '\x168', '\x176C', 
		'\n', '\x168', '\x3', '\x168', '\x5', '\x168', '\x176F', '\n', '\x168', 
		'\x3', '\x169', '\x3', '\x169', '\x5', '\x169', '\x1773', '\n', '\x169', 
		'\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', '\x3', '\x16B', 
		'\x3', '\x16B', '\x5', '\x16B', '\x177F', '\n', '\x16B', '\x3', '\x16B', 
		'\x5', '\x16B', '\x1782', '\n', '\x16B', '\x3', '\x16C', '\x5', '\x16C', 
		'\x1785', '\n', '\x16C', '\x3', '\x16C', '\x6', '\x16C', '\x1788', '\n', 
		'\x16C', '\r', '\x16C', '\xE', '\x16C', '\x1789', '\x3', '\x16D', '\x3', 
		'\x16D', '\a', '\x16D', '\x178E', '\n', '\x16D', '\f', '\x16D', '\xE', 
		'\x16D', '\x1791', '\v', '\x16D', '\x3', '\x16D', '\x3', '\x16D', '\x5', 
		'\x16D', '\x1795', '\n', '\x16D', '\x3', '\x16E', '\x3', '\x16E', '\a', 
		'\x16E', '\x1799', '\n', '\x16E', '\f', '\x16E', '\xE', '\x16E', '\x179C', 
		'\v', '\x16E', '\x3', '\x16E', '\x5', '\x16E', '\x179F', '\n', '\x16E', 
		'\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x5', '\x16F', '\x17A4', 
		'\n', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\a', '\x16F', 
		'\x17A9', '\n', '\x16F', '\f', '\x16F', '\xE', '\x16F', '\x17AC', '\v', 
		'\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x5', '\x16F', 
		'\x17B1', '\n', '\x16F', '\x3', '\x16F', '\x3', '\x16F', '\x3', '\x16F', 
		'\x3', '\x16F', '\x3', '\x16F', '\x5', '\x16F', '\x17B8', '\n', '\x16F', 
		'\x3', '\x170', '\x5', '\x170', '\x17BB', '\n', '\x170', '\x3', '\x170', 
		'\x5', '\x170', '\x17BE', '\n', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x5', '\x170', '\x17C2', '\n', '\x170', '\x3', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\x5', '\x170', '\x17C7', '\n', '\x170', '\x3', '\x170', 
		'\x3', '\x170', '\a', '\x170', '\x17CB', '\n', '\x170', '\f', '\x170', 
		'\xE', '\x170', '\x17CE', '\v', '\x170', '\x3', '\x171', '\x3', '\x171', 
		'\x3', '\x171', '\x3', '\x172', '\x3', '\x172', '\x3', '\x172', '\x3', 
		'\x173', '\x3', '\x173', '\x5', '\x173', '\x17D8', '\n', '\x173', '\x3', 
		'\x174', '\x3', '\x174', '\x3', '\x174', '\x3', '\x174', '\x3', '\x174', 
		'\x5', '\x174', '\x17DF', '\n', '\x174', '\x3', '\x174', '\x3', '\x174', 
		'\x5', '\x174', '\x17E3', '\n', '\x174', '\x3', '\x175', '\x3', '\x175', 
		'\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', '\x175', '\x3', 
		'\x175', '\x3', '\x175', '\x5', '\x175', '\x17ED', '\n', '\x175', '\x3', 
		'\x176', '\x3', '\x176', '\x5', '\x176', '\x17F1', '\n', '\x176', '\x3', 
		'\x176', '\x3', '\x176', '\x5', '\x176', '\x17F5', '\n', '\x176', '\x3', 
		'\x176', '\x6', '\x176', '\x17F8', '\n', '\x176', '\r', '\x176', '\xE', 
		'\x176', '\x17F9', '\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x3', 
		'\x176', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', '\x3', '\x177', 
		'\x3', '\x177', '\x5', '\x177', '\x1805', '\n', '\x177', '\x3', '\x178', 
		'\x3', '\x178', '\x3', '\x178', '\x5', '\x178', '\x180A', '\n', '\x178', 
		'\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', '\x179', '\x5', 
		'\x179', '\x1810', '\n', '\x179', '\x3', '\x179', '\x6', '\x179', '\x1813', 
		'\n', '\x179', '\r', '\x179', '\xE', '\x179', '\x1814', '\x3', '\x179', 
		'\x5', '\x179', '\x1818', '\n', '\x179', '\x3', '\x179', '\x6', '\x179', 
		'\x181B', '\n', '\x179', '\r', '\x179', '\xE', '\x179', '\x181C', '\x5', 
		'\x179', '\x181F', '\n', '\x179', '\x3', '\x179', '\x3', '\x179', '\x3', 
		'\x17A', '\x3', '\x17A', '\x5', '\x17A', '\x1825', '\n', '\x17A', '\x3', 
		'\x17B', '\x3', '\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x182A', '\n', 
		'\x17B', '\x3', '\x17B', '\x5', '\x17B', '\x182D', '\n', '\x17B', '\x3', 
		'\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x5', '\x17C', '\x1832', '\n', 
		'\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x5', '\x17C', 
		'\x1837', '\n', '\x17C', '\x3', '\x17C', '\x3', '\x17C', '\x3', '\x17C', 
		'\x3', '\x17C', '\x3', '\x17D', '\x3', '\x17D', '\x3', '\x17D', '\x5', 
		'\x17D', '\x1840', '\n', '\x17D', '\x3', '\x17D', '\x6', '\x17D', '\x1843', 
		'\n', '\x17D', '\r', '\x17D', '\xE', '\x17D', '\x1844', '\x3', '\x17D', 
		'\x3', '\x17D', '\x3', '\x17E', '\x3', '\x17E', '\x5', '\x17E', '\x184B', 
		'\n', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', '\x17E', '\x3', 
		'\x17E', '\x5', '\x17E', '\x1851', '\n', '\x17E', '\x3', '\x17E', '\x6', 
		'\x17E', '\x1854', '\n', '\x17E', '\r', '\x17E', '\xE', '\x17E', '\x1855', 
		'\x3', '\x17E', '\x3', '\x17E', '\x5', '\x17E', '\x185A', '\n', '\x17E', 
		'\x5', '\x17E', '\x185C', '\n', '\x17E', '\x3', '\x17F', '\x3', '\x17F', 
		'\x3', '\x17F', '\x5', '\x17F', '\x1861', '\n', '\x17F', '\x3', '\x17F', 
		'\x3', '\x17F', '\x5', '\x17F', '\x1865', '\n', '\x17F', '\x3', '\x17F', 
		'\x3', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x5', '\x17F', '\x186B', 
		'\n', '\x17F', '\x3', '\x17F', '\x3', '\x17F', '\x5', '\x17F', '\x186F', 
		'\n', '\x17F', '\x3', '\x180', '\x3', '\x180', '\x3', '\x180', '\x3', 
		'\x180', '\x3', '\x181', '\x3', '\x181', '\x3', '\x181', '\x5', '\x181', 
		'\x1878', '\n', '\x181', '\x3', '\x181', '\x6', '\x181', '\x187B', '\n', 
		'\x181', '\r', '\x181', '\xE', '\x181', '\x187C', '\x3', '\x181', '\x5', 
		'\x181', '\x1880', '\n', '\x181', '\x3', '\x181', '\x3', '\x181', '\x3', 
		'\x181', '\x3', '\x181', '\x5', '\x181', '\x1886', '\n', '\x181', '\x3', 
		'\x181', '\x6', '\x181', '\x1889', '\n', '\x181', '\r', '\x181', '\xE', 
		'\x181', '\x188A', '\x5', '\x181', '\x188D', '\n', '\x181', '\x5', '\x181', 
		'\x188F', '\n', '\x181', '\x3', '\x182', '\x3', '\x182', '\x3', '\x182', 
		'\x5', '\x182', '\x1894', '\n', '\x182', '\x3', '\x183', '\x3', '\x183', 
		'\x3', '\x183', '\x5', '\x183', '\x1899', '\n', '\x183', '\x3', '\x183', 
		'\x6', '\x183', '\x189C', '\n', '\x183', '\r', '\x183', '\xE', '\x183', 
		'\x189D', '\x3', '\x183', '\x3', '\x183', '\x3', '\x184', '\x3', '\x184', 
		'\x3', '\x184', '\x3', '\x184', '\x5', '\x184', '\x18A6', '\n', '\x184', 
		'\x3', '\x184', '\x6', '\x184', '\x18A9', '\n', '\x184', '\r', '\x184', 
		'\xE', '\x184', '\x18AA', '\x3', '\x184', '\x3', '\x184', '\x3', '\x185', 
		'\x3', '\x185', '\x3', '\x185', '\x5', '\x185', '\x18B2', '\n', '\x185', 
		'\x3', '\x185', '\x3', '\x185', '\x5', '\x185', '\x18B6', '\n', '\x185', 
		'\x3', '\x186', '\x3', '\x186', '\x3', '\x186', '\x3', '\x187', '\x3', 
		'\x187', '\a', '\x187', '\x18BD', '\n', '\x187', '\f', '\x187', '\xE', 
		'\x187', '\x18C0', '\v', '\x187', '\x3', '\x187', '\x5', '\x187', '\x18C3', 
		'\n', '\x187', '\x3', '\x187', '\a', '\x187', '\x18C6', '\n', '\x187', 
		'\f', '\x187', '\xE', '\x187', '\x18C9', '\v', '\x187', '\x3', '\x187', 
		'\x3', '\x187', '\x3', '\x188', '\x3', '\x188', '\x3', '\x188', '\x3', 
		'\x188', '\x3', '\x188', '\x3', '\x188', '\x5', '\x188', '\x18D3', '\n', 
		'\x188', '\x5', '\x188', '\x18D5', '\n', '\x188', '\x3', '\x189', '\x3', 
		'\x189', '\x3', '\x189', '\x3', '\x189', '\x3', '\x18A', '\x3', '\x18A', 
		'\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', '\x18A', '\x3', 
		'\x18A', '\x3', '\x18A', '\a', '\x18A', '\x18E3', '\n', '\x18A', '\f', 
		'\x18A', '\xE', '\x18A', '\x18E6', '\v', '\x18A', '\x3', '\x18B', '\x3', 
		'\x18B', '\x5', '\x18B', '\x18EA', '\n', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18B', '\a', '\x18B', '\x18EE', '\n', '\x18B', '\f', '\x18B', '\xE', 
		'\x18B', '\x18F1', '\v', '\x18B', '\x3', '\x18B', '\x3', '\x18B', '\x3', 
		'\x18C', '\x5', '\x18C', '\x18F6', '\n', '\x18C', '\x3', '\x18C', '\x3', 
		'\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18C', '\x3', '\x18C', 
		'\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', '\x18D', '\x3', 
		'\x18E', '\x3', '\x18E', '\x5', '\x18E', '\x1904', '\n', '\x18E', '\x3', 
		'\x18E', '\x6', '\x18E', '\x1907', '\n', '\x18E', '\r', '\x18E', '\xE', 
		'\x18E', '\x1908', '\x3', '\x18E', '\x3', '\x18E', '\x3', '\x18F', '\x3', 
		'\x18F', '\x5', '\x18F', '\x190F', '\n', '\x18F', '\x3', '\x18F', '\x5', 
		'\x18F', '\x1912', '\n', '\x18F', '\x3', '\x190', '\x5', '\x190', '\x1915', 
		'\n', '\x190', '\x3', '\x190', '\x3', '\x190', '\x5', '\x190', '\x1919', 
		'\n', '\x190', '\x3', '\x190', '\a', '\x190', '\x191C', '\n', '\x190', 
		'\f', '\x190', '\xE', '\x190', '\x191F', '\v', '\x190', '\x3', '\x190', 
		'\x3', '\x190', '\x3', '\x191', '\x3', '\x191', '\x3', '\x191', '\x3', 
		'\x191', '\x5', '\x191', '\x1927', '\n', '\x191', '\x5', '\x191', '\x1929', 
		'\n', '\x191', '\x3', '\x191', '\x3', '\x191', '\x5', '\x191', '\x192D', 
		'\n', '\x191', '\x3', '\x191', '\x5', '\x191', '\x1930', '\n', '\x191', 
		'\x3', '\x192', '\x3', '\x192', '\x3', '\x192', '\x5', '\x192', '\x1935', 
		'\n', '\x192', '\x5', '\x192', '\x1937', '\n', '\x192', '\x3', '\x192', 
		'\x3', '\x192', '\x5', '\x192', '\x193B', '\n', '\x192', '\x3', '\x192', 
		'\x3', '\x192', '\x3', '\x192', '\x3', '\x193', '\x3', '\x193', '\x3', 
		'\x194', '\x3', '\x194', '\x3', '\x194', '\x3', '\x194', '\x3', '\x194', 
		'\x5', '\x194', '\x1947', '\n', '\x194', '\x3', '\x195', '\x3', '\x195', 
		'\x3', '\x195', '\x3', '\x195', '\x3', '\x195', '\x3', '\x196', '\x3', 
		'\x196', '\x5', '\x196', '\x1950', '\n', '\x196', '\x3', '\x196', '\x3', 
		'\x196', '\x5', '\x196', '\x1954', '\n', '\x196', '\x3', '\x196', '\x6', 
		'\x196', '\x1957', '\n', '\x196', '\r', '\x196', '\xE', '\x196', '\x1958', 
		'\x3', '\x197', '\x3', '\x197', '\x5', '\x197', '\x195D', '\n', '\x197', 
		'\x3', '\x197', '\x3', '\x197', '\x5', '\x197', '\x1961', '\n', '\x197', 
		'\x3', '\x198', '\x3', '\x198', '\x3', '\x198', '\x5', '\x198', '\x1966', 
		'\n', '\x198', '\x3', '\x198', '\x5', '\x198', '\x1969', '\n', '\x198', 
		'\x3', '\x199', '\x3', '\x199', '\x3', '\x199', '\x3', '\x19A', '\x3', 
		'\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x3', '\x19A', '\x5', '\x19A', 
		'\x1973', '\n', '\x19A', '\x3', '\x19B', '\x3', '\x19B', '\x3', '\x19B', 
		'\x3', '\x19B', '\x5', '\x19B', '\x1979', '\n', '\x19B', '\x3', '\x19B', 
		'\x5', '\x19B', '\x197C', '\n', '\x19B', '\x3', '\x19B', '\x5', '\x19B', 
		'\x197F', '\n', '\x19B', '\x3', '\x19C', '\x3', '\x19C', '\x5', '\x19C', 
		'\x1983', '\n', '\x19C', '\x3', '\x19C', '\x6', '\x19C', '\x1986', '\n', 
		'\x19C', '\r', '\x19C', '\xE', '\x19C', '\x1987', '\x3', '\x19C', '\x3', 
		'\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', '\x3', '\x19C', 
		'\x3', '\x19C', '\x5', '\x19C', '\x1991', '\n', '\x19C', '\x3', '\x19D', 
		'\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x3', 
		'\x19D', '\x3', '\x19D', '\x3', '\x19D', '\x5', '\x19D', '\x199B', '\n', 
		'\x19D', '\x3', '\x19E', '\x3', '\x19E', '\x5', '\x19E', '\x199F', '\n', 
		'\x19E', '\x3', '\x19E', '\x3', '\x19E', '\x5', '\x19E', '\x19A3', '\n', 
		'\x19E', '\x3', '\x19E', '\x5', '\x19E', '\x19A6', '\n', '\x19E', '\x3', 
		'\x19E', '\x5', '\x19E', '\x19A9', '\n', '\x19E', '\x3', '\x19F', '\x3', 
		'\x19F', '\x3', '\x19F', '\x5', '\x19F', '\x19AE', '\n', '\x19F', '\x3', 
		'\x1A0', '\x3', '\x1A0', '\x3', '\x1A0', '\x5', '\x1A0', '\x19B3', '\n', 
		'\x1A0', '\x3', '\x1A0', '\x5', '\x1A0', '\x19B6', '\n', '\x1A0', '\x3', 
		'\x1A0', '\x5', '\x1A0', '\x19B9', '\n', '\x1A0', '\x3', '\x1A1', '\x3', 
		'\x1A1', '\x6', '\x1A1', '\x19BD', '\n', '\x1A1', '\r', '\x1A1', '\xE', 
		'\x1A1', '\x19BE', '\x3', '\x1A1', '\x5', '\x1A1', '\x19C2', '\n', '\x1A1', 
		'\x3', '\x1A1', '\x3', '\x1A1', '\x3', '\x1A2', '\x3', '\x1A2', '\x5', 
		'\x1A2', '\x19C8', '\n', '\x1A2', '\x3', '\x1A2', '\x5', '\x1A2', '\x19CB', 
		'\n', '\x1A2', '\x3', '\x1A3', '\x5', '\x1A3', '\x19CE', '\n', '\x1A3', 
		'\x3', '\x1A3', '\x6', '\x1A3', '\x19D1', '\n', '\x1A3', '\r', '\x1A3', 
		'\xE', '\x1A3', '\x19D2', '\x3', '\x1A3', '\x5', '\x1A3', '\x19D6', '\n', 
		'\x1A3', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', '\x3', '\x1A4', 
		'\x6', '\x1A4', '\x19DC', '\n', '\x1A4', '\r', '\x1A4', '\xE', '\x1A4', 
		'\x19DD', '\x3', '\x1A5', '\x3', '\x1A5', '\x6', '\x1A5', '\x19E2', '\n', 
		'\x1A5', '\r', '\x1A5', '\xE', '\x1A5', '\x19E3', '\x3', '\x1A6', '\x3', 
		'\x1A6', '\x3', '\x1A6', '\x5', '\x1A6', '\x19E9', '\n', '\x1A6', '\x3', 
		'\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x5', '\x1A7', '\x19EE', '\n', 
		'\x1A7', '\x3', '\x1A7', '\x3', '\x1A7', '\x3', '\x1A8', '\x3', '\x1A8', 
		'\x3', '\x1A8', '\x3', '\x1A8', '\x5', '\x1A8', '\x19F6', '\n', '\x1A8', 
		'\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', 
		'\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x5', '\x1A8', 
		'\x1A00', '\n', '\x1A8', '\x3', '\x1A8', '\x3', '\x1A8', '\x5', '\x1A8', 
		'\x1A04', '\n', '\x1A8', '\x5', '\x1A8', '\x1A06', '\n', '\x1A8', '\x3', 
		'\x1A8', '\x5', '\x1A8', '\x1A09', '\n', '\x1A8', '\x3', '\x1A9', '\x3', 
		'\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', '\x3', '\x1A9', 
		'\x3', '\x1A9', '\x3', '\x1A9', '\a', '\x1A9', '\x1A13', '\n', '\x1A9', 
		'\f', '\x1A9', '\xE', '\x1A9', '\x1A16', '\v', '\x1A9', '\x3', '\x1A9', 
		'\x5', '\x1A9', '\x1A19', '\n', '\x1A9', '\x3', '\x1A9', '\x5', '\x1A9', 
		'\x1A1C', '\n', '\x1A9', '\x3', '\x1AA', '\x3', '\x1AA', '\x3', '\x1AA', 
		'\x3', '\x1AA', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', '\x1AB', '\x3', 
		'\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x5', '\x1AC', '\x1A2B', '\n', '\x1AC', '\x3', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x5', '\x1AC', '\x1A30', '\n', '\x1AC', 
		'\x3', '\x1AC', '\x3', '\x1AC', '\x5', '\x1AC', '\x1A34', '\n', '\x1AC', 
		'\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', '\x1AD', '\x3', 
		'\x1AD', '\x5', '\x1AD', '\x1A3B', '\n', '\x1AD', '\x3', '\x1AD', '\x5', 
		'\x1AD', '\x1A3E', '\n', '\x1AD', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', 
		'\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\a', '\x1AE', '\x1A45', '\n', 
		'\x1AE', '\f', '\x1AE', '\xE', '\x1AE', '\x1A48', '\v', '\x1AE', '\x3', 
		'\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x3', '\x1AE', '\x5', '\x1AE', 
		'\x1A4E', '\n', '\x1AE', '\x3', '\x1AF', '\x3', '\x1AF', '\x3', '\x1AF', 
		'\x5', '\x1AF', '\x1A53', '\n', '\x1AF', '\x3', '\x1B0', '\x3', '\x1B0', 
		'\x5', '\x1B0', '\x1A57', '\n', '\x1B0', '\x3', '\x1B1', '\x3', '\x1B1', 
		'\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x5', 
		'\x1B1', '\x1A5F', '\n', '\x1B1', '\x3', '\x1B1', '\x3', '\x1B1', '\x3', 
		'\x1B1', '\x3', '\x1B1', '\x5', '\x1B1', '\x1A65', '\n', '\x1B1', '\x3', 
		'\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', '\x3', '\x1B2', 
		'\x3', '\x1B2', '\x5', '\x1B2', '\x1A6D', '\n', '\x1B2', '\x3', '\x1B2', 
		'\x5', '\x1B2', '\x1A70', '\n', '\x1B2', '\x3', '\x1B3', '\x3', '\x1B3', 
		'\x3', '\x1B3', '\x3', '\x1B3', '\x3', '\x1B4', '\x3', '\x1B4', '\x3', 
		'\x1B4', '\x5', '\x1B4', '\x1A79', '\n', '\x1B4', '\x3', '\x1B4', '\x5', 
		'\x1B4', '\x1A7C', '\n', '\x1B4', '\x3', '\x1B4', '\x5', '\x1B4', '\x1A7F', 
		'\n', '\x1B4', '\x3', '\x1B5', '\x3', '\x1B5', '\x3', '\x1B5', '\x3', 
		'\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x3', '\x1B6', '\x5', '\x1B6', 
		'\x1A88', '\n', '\x1B6', '\x3', '\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', 
		'\x3', '\x1B7', '\x5', '\x1B7', '\x1A8E', '\n', '\x1B7', '\x3', '\x1B7', 
		'\x3', '\x1B7', '\x3', '\x1B7', '\x3', '\x1B7', '\x5', '\x1B7', '\x1A94', 
		'\n', '\x1B7', '\x5', '\x1B7', '\x1A96', '\n', '\x1B7', '\x3', '\x1B8', 
		'\x3', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x3', 
		'\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', '\x3', '\x1B8', 
		'\x3', '\x1B8', '\x5', '\x1B8', '\x1AA3', '\n', '\x1B8', '\x5', '\x1B8', 
		'\x1AA5', '\n', '\x1B8', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', 
		'\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x3', '\x1B9', '\x5', 
		'\x1B9', '\x1AAE', '\n', '\x1B9', '\x5', '\x1B9', '\x1AB0', '\n', '\x1B9', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x5', '\x1BA', '\x1AB4', '\n', '\x1BA', 
		'\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x5', 
		'\x1BA', '\x1ABA', '\n', '\x1BA', '\x3', '\x1BA', '\x3', '\x1BA', '\x5', 
		'\x1BA', '\x1ABE', '\n', '\x1BA', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', 
		'\x1BB', '\x3', '\x1BB', '\x3', '\x1BB', '\x3', '\x1BC', '\x3', '\x1BC', 
		'\x3', '\x1BD', '\x3', '\x1BD', '\x3', '\x1BD', '\a', '\x1BD', '\x1ACA', 
		'\n', '\x1BD', '\f', '\x1BD', '\xE', '\x1BD', '\x1ACD', '\v', '\x1BD', 
		'\x3', '\x1BE', '\x3', '\x1BE', '\x3', '\x1BE', '\x5', '\x1BE', '\x1AD2', 
		'\n', '\x1BE', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', '\x1BF', '\x3', 
		'\x1BF', '\x3', '\x1BF', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x5', '\x1C0', '\x1ADD', '\n', '\x1C0', '\x3', '\x1C0', 
		'\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x5', '\x1C0', 
		'\x1AE8', '\n', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x5', '\x1C0', 
		'\x1AEC', '\n', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\a', '\x1C0', '\x1AF1', '\n', '\x1C0', '\f', '\x1C0', '\xE', '\x1C0', 
		'\x1AF4', '\v', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x5', '\x1C0', 
		'\x1AF8', '\n', '\x1C0', '\a', '\x1C0', '\x1AFA', '\n', '\x1C0', '\f', 
		'\x1C0', '\xE', '\x1C0', '\x1AFD', '\v', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x5', '\x1C0', '\x1B01', '\n', '\x1C0', '\x3', '\x1C0', '\x3', 
		'\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', '\x3', '\x1C0', 
		'\a', '\x1C0', '\x1B09', '\n', '\x1C0', '\f', '\x1C0', '\xE', '\x1C0', 
		'\x1B0C', '\v', '\x1C0', '\x3', '\x1C1', '\x3', '\x1C1', '\x3', '\x1C1', 
		'\x5', '\x1C1', '\x1B11', '\n', '\x1C1', '\x3', '\x1C1', '\x5', '\x1C1', 
		'\x1B14', '\n', '\x1C1', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', 
		'\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\x3', '\x1C2', '\a', 
		'\x1C2', '\x1B1D', '\n', '\x1C2', '\f', '\x1C2', '\xE', '\x1C2', '\x1B20', 
		'\v', '\x1C2', '\x3', '\x1C3', '\x3', '\x1C3', '\x5', '\x1C3', '\x1B24', 
		'\n', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', 
		'\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', '\x3', '\x1C3', 
		'\x5', '\x1C3', '\x1B2E', '\n', '\x1C3', '\x5', '\x1C3', '\x1B30', '\n', 
		'\x1C3', '\x5', '\x1C3', '\x1B32', '\n', '\x1C3', '\x3', '\x1C4', '\x3', 
		'\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', 
		'\x3', '\x1C4', '\x5', '\x1C4', '\x1B3B', '\n', '\x1C4', '\x3', '\x1C4', 
		'\x5', '\x1C4', '\x1B3E', '\n', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', 
		'\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', 
		'\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\x3', '\x1C4', '\a', '\x1C4', 
		'\x1B4A', '\n', '\x1C4', '\f', '\x1C4', '\xE', '\x1C4', '\x1B4D', '\v', 
		'\x1C4', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', 
		'\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x5', 
		'\x1C5', '\x1B57', '\n', '\x1C5', '\x3', '\x1C5', '\x3', '\x1C5', '\x5', 
		'\x1C5', '\x1B5B', '\n', '\x1C5', '\x5', '\x1C5', '\x1B5D', '\n', '\x1C5', 
		'\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', '\x1C6', '\x3', 
		'\x1C6', '\x5', '\x1C6', '\x1B64', '\n', '\x1C6', '\x3', '\x1C7', '\x3', 
		'\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', 
		'\x3', '\x1C7', '\x3', '\x1C7', '\a', '\x1C7', '\x1B6E', '\n', '\x1C7', 
		'\f', '\x1C7', '\xE', '\x1C7', '\x1B71', '\v', '\x1C7', '\x3', '\x1C7', 
		'\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x3', '\x1C7', '\x5', 
		'\x1C7', '\x1B78', '\n', '\x1C7', '\x3', '\x1C8', '\x3', '\x1C8', '\x3', 
		'\x1C8', '\x3', '\x1C8', '\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', 
		'\x3', '\x1C9', '\x3', '\x1C9', '\x5', '\x1C9', '\x1B83', '\n', '\x1C9', 
		'\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x3', 
		'\x1C9', '\x3', '\x1C9', '\x5', '\x1C9', '\x1B8B', '\n', '\x1C9', '\x3', 
		'\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', 
		'\x5', '\x1C9', '\x1B92', '\n', '\x1C9', '\x3', '\x1C9', '\x3', '\x1C9', 
		'\x5', '\x1C9', '\x1B96', '\n', '\x1C9', '\x3', '\x1CA', '\x3', '\x1CA', 
		'\x5', '\x1CA', '\x1B9A', '\n', '\x1CA', '\x3', '\x1CA', '\x3', '\x1CA', 
		'\x3', '\x1CA', '\x5', '\x1CA', '\x1B9F', '\n', '\x1CA', '\a', '\x1CA', 
		'\x1BA1', '\n', '\x1CA', '\f', '\x1CA', '\xE', '\x1CA', '\x1BA4', '\v', 
		'\x1CA', '\x3', '\x1CA', '\x3', '\x1CA', '\x3', '\x1CA', '\a', '\x1CA', 
		'\x1BA9', '\n', '\x1CA', '\f', '\x1CA', '\xE', '\x1CA', '\x1BAC', '\v', 
		'\x1CA', '\x3', '\x1CA', '\x5', '\x1CA', '\x1BAF', '\n', '\x1CA', '\x3', 
		'\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', 
		'\x5', '\x1CB', '\x1BB6', '\n', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', 
		'\x3', '\x1CB', '\x5', '\x1CB', '\x1BBB', '\n', '\x1CB', '\x3', '\x1CB', 
		'\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', '\x1CB', '\x3', 
		'\x1CB', '\x3', '\x1CB', '\x5', '\x1CB', '\x1BC4', '\n', '\x1CB', '\x3', 
		'\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', '\x3', '\x1CC', 
		'\x3', '\x1CC', '\x3', '\x1CC', '\x5', '\x1CC', '\x1BCD', '\n', '\x1CC', 
		'\x3', '\x1CC', '\x5', '\x1CC', '\x1BD0', '\n', '\x1CC', '\x3', '\x1CC', 
		'\x3', '\x1CC', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', 
		'\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', 
		'\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', 
		'\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x3', '\x1CD', '\x5', '\x1CD', 
		'\x1BE4', '\n', '\x1CD', '\x3', '\x1CE', '\x3', '\x1CE', '\x5', '\x1CE', 
		'\x1BE8', '\n', '\x1CE', '\x3', '\x1CF', '\x5', '\x1CF', '\x1BEB', '\n', 
		'\x1CF', '\x3', '\x1CF', '\x3', '\x1CF', '\x3', '\x1CF', '\x6', '\x1CF', 
		'\x1BF0', '\n', '\x1CF', '\r', '\x1CF', '\xE', '\x1CF', '\x1BF1', '\x3', 
		'\x1CF', '\x5', '\x1CF', '\x1BF5', '\n', '\x1CF', '\x3', '\x1CF', '\x3', 
		'\x1CF', '\x5', '\x1CF', '\x1BF9', '\n', '\x1CF', '\x3', '\x1CF', '\x5', 
		'\x1CF', '\x1BFC', '\n', '\x1CF', '\x3', '\x1D0', '\x3', '\x1D0', '\x3', 
		'\x1D0', '\x3', '\x1D0', '\x3', '\x1D0', '\x5', '\x1D0', '\x1C03', '\n', 
		'\x1D0', '\x3', '\x1D1', '\x5', '\x1D1', '\x1C06', '\n', '\x1D1', '\x3', 
		'\x1D1', '\x3', '\x1D1', '\x6', '\x1D1', '\x1C0A', '\n', '\x1D1', '\r', 
		'\x1D1', '\xE', '\x1D1', '\x1C0B', '\x3', '\x1D1', '\x5', '\x1D1', '\x1C0F', 
		'\n', '\x1D1', '\x3', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1C13', 
		'\n', '\x1D1', '\x3', '\x1D1', '\x5', '\x1D1', '\x1C16', '\n', '\x1D1', 
		'\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', '\x1D2', '\x3', 
		'\x1D2', '\x5', '\x1D2', '\x1C1D', '\n', '\x1D2', '\x3', '\x1D3', '\x3', 
		'\x1D3', '\x3', '\x1D3', '\x5', '\x1D3', '\x1C22', '\n', '\x1D3', '\x3', 
		'\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', 
		'\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', 
		'\x1D4', '\a', '\x1D4', '\x1C2E', '\n', '\x1D4', '\f', '\x1D4', '\xE', 
		'\x1D4', '\x1C31', '\v', '\x1D4', '\x3', '\x1D4', '\x3', '\x1D4', '\x3', 
		'\x1D4', '\x3', '\x1D4', '\x5', '\x1D4', '\x1C37', '\n', '\x1D4', '\x3', 
		'\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', 
		'\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x3', '\x1D5', '\x5', 
		'\x1D5', '\x1C42', '\n', '\x1D5', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', 
		'\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', '\x3', '\x1D6', 
		'\x3', '\x1D6', '\a', '\x1D6', '\x1C4C', '\n', '\x1D6', '\f', '\x1D6', 
		'\xE', '\x1D6', '\x1C4F', '\v', '\x1D6', '\x3', '\x1D6', '\x5', '\x1D6', 
		'\x1C52', '\n', '\x1D6', '\x5', '\x1D6', '\x1C54', '\n', '\x1D6', '\x3', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1C5D', '\n', '\x1D7', 
		'\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1C66', '\n', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1C6A', '\n', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1C6E', '\n', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', 
		'\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', 
		'\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', 
		'\x1D7', '\x1C81', '\n', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1C84', 
		'\n', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1C87', '\n', '\x1D7', 
		'\x3', '\x1D7', '\x3', '\x1D7', '\x3', '\x1D7', '\x5', '\x1D7', '\x1C8C', 
		'\n', '\x1D7', '\x3', '\x1D8', '\x3', '\x1D8', '\x3', '\x1D8', '\x5', 
		'\x1D8', '\x1C91', '\n', '\x1D8', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', 
		'\x1D9', '\x5', '\x1D9', '\x1C96', '\n', '\x1D9', '\x3', '\x1D9', '\x3', 
		'\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', 
		'\x3', '\x1D9', '\x5', '\x1D9', '\x1C9F', '\n', '\x1D9', '\x3', '\x1D9', 
		'\x5', '\x1D9', '\x1CA2', '\n', '\x1D9', '\x5', '\x1D9', '\x1CA4', '\n', 
		'\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x5', '\x1D9', '\x1CA8', '\n', 
		'\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', 
		'\x3', '\x1D9', '\x5', '\x1D9', '\x1CAF', '\n', '\x1D9', '\x3', '\x1D9', 
		'\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x5', 
		'\x1D9', '\x1CB6', '\n', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', 
		'\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x5', '\x1D9', 
		'\x1CBE', '\n', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', 
		'\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', 
		'\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', '\x3', '\x1D9', 
		'\x3', '\x1D9', '\x5', '\x1D9', '\x1CCD', '\n', '\x1D9', '\x3', '\x1DA', 
		'\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x5', 
		'\x1DA', '\x1CD4', '\n', '\x1DA', '\x3', '\x1DA', '\x3', '\x1DA', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1CDB', '\n', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', 
		'\x1CE0', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x5', '\x1DB', '\x1CEE', '\n', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', 
		'\x1CF1', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', 
		'\x1CF5', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1CFF', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', 
		'\x1DB', '\x1D0B', '\n', '\x1DB', '\x5', '\x1DB', '\x1D0D', '\n', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1D14', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1D18', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', 
		'\x1D1F', '\n', '\x1DB', '\x3', '\x1DB', '\x6', '\x1DB', '\x1D22', '\n', 
		'\x1DB', '\r', '\x1DB', '\xE', '\x1DB', '\x1D23', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1D2D', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D3B', '\n', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D43', '\n', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1D46', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1D4F', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\a', '\x1DB', '\x1D53', '\n', '\x1DB', '\f', '\x1DB', 
		'\xE', '\x1DB', '\x1D56', '\v', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1D68', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1D71', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D76', '\n', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D7B', 
		'\n', '\x1DB', '\x3', '\x1DB', '\x6', '\x1DB', '\x1D7E', '\n', '\x1DB', 
		'\r', '\x1DB', '\xE', '\x1DB', '\x1D7F', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1D85', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D8A', '\n', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1D8D', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D92', '\n', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1D97', 
		'\n', '\x1DB', '\a', '\x1DB', '\x1D99', '\n', '\x1DB', '\f', '\x1DB', 
		'\xE', '\x1DB', '\x1D9C', '\v', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1DA1', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1DA7', 
		'\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', 
		'\x1DB0', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x5', '\x1DB', '\x1DB5', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', 
		'\x1DB', '\x1DBD', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', 
		'\x1DB', '\x1DC1', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1DC6', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1DCC', '\n', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1DD3', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1DD8', '\n', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1DDF', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x5', '\x1DB', '\x1DE3', '\n', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1DE8', '\n', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x5', '\x1DB', '\x1DF0', '\n', '\x1DB', '\x3', '\x1DB', 
		'\x5', '\x1DB', '\x1DF3', '\n', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', 
		'\x1DF6', '\n', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1DF9', '\n', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1DFD', '\n', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', 
		'\x1E02', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x5', '\x1DB', '\x1E07', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x5', '\x1DB', '\x1E0B', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', 
		'\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1E12', 
		'\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', 
		'\x1DB', '\x1E17', '\n', '\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x3', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1E1E', '\n', 
		'\x1DB', '\x3', '\x1DB', '\x3', '\x1DB', '\x5', '\x1DB', '\x1E22', '\n', 
		'\x1DB', '\x3', '\x1DC', '\x3', '\x1DC', '\x3', '\x1DD', '\x3', '\x1DD', 
		'\x3', '\x1DE', '\x3', '\x1DE', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', 
		'\x1DF', '\x5', '\x1DF', '\x1E2D', '\n', '\x1DF', '\x3', '\x1DF', '\x3', 
		'\x1DF', '\x5', '\x1DF', '\x1E31', '\n', '\x1DF', '\x5', '\x1DF', '\x1E33', 
		'\n', '\x1DF', '\x3', '\x1DF', '\x3', '\x1DF', '\x3', '\x1E0', '\x3', 
		'\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', '\x3', '\x1E0', 
		'\x3', '\x1E0', '\x5', '\x1E0', '\x1E3E', '\n', '\x1E0', '\x3', '\x1E1', 
		'\x3', '\x1E1', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', 
		'\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x3', '\x1E2', '\x5', '\x1E2', 
		'\x1E49', '\n', '\x1E2', '\x3', '\x1E3', '\x3', '\x1E3', '\x3', '\x1E3', 
		'\x5', '\x1E3', '\x1E4E', '\n', '\x1E3', '\x3', '\x1E3', '\x6', '\x1E3', 
		'\x1E51', '\n', '\x1E3', '\r', '\x1E3', '\xE', '\x1E3', '\x1E52', '\x5', 
		'\x1E3', '\x1E55', '\n', '\x1E3', '\x3', '\x1E4', '\x3', '\x1E4', '\x5', 
		'\x1E4', '\x1E59', '\n', '\x1E4', '\x3', '\x1E4', '\x5', '\x1E4', '\x1E5C', 
		'\n', '\x1E4', '\x3', '\x1E4', '\x3', '\x1E4', '\x5', '\x1E4', '\x1E60', 
		'\n', '\x1E4', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', '\x1E5', '\x3', 
		'\x1E5', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', 
		'\x3', '\x1E6', '\x3', '\x1E6', '\x3', '\x1E6', '\x5', '\x1E6', '\x1E6D', 
		'\n', '\x1E6', '\x3', '\x1E7', '\x3', '\x1E7', '\x3', '\x1E7', '\x5', 
		'\x1E7', '\x1E72', '\n', '\x1E7', '\x3', '\x1E7', '\x3', '\x1E7', '\x5', 
		'\x1E7', '\x1E76', '\n', '\x1E7', '\x3', '\x1E7', '\x6', '\x1E7', '\x1E79', 
		'\n', '\x1E7', '\r', '\x1E7', '\xE', '\x1E7', '\x1E7A', '\x3', '\x1E7', 
		'\x3', '\x1E7', '\x3', '\x1E7', '\x3', '\x1E7', '\x5', '\x1E7', '\x1E81', 
		'\n', '\x1E7', '\x3', '\x1E7', '\x3', '\x1E7', '\x5', '\x1E7', '\x1E85', 
		'\n', '\x1E7', '\x3', '\x1E8', '\x3', '\x1E8', '\x3', '\x1E8', '\x5', 
		'\x1E8', '\x1E8A', '\n', '\x1E8', '\x3', '\x1E8', '\x3', '\x1E8', '\x5', 
		'\x1E8', '\x1E8E', '\n', '\x1E8', '\x3', '\x1E8', '\x3', '\x1E8', '\x3', 
		'\x1E8', '\x5', '\x1E8', '\x1E93', '\n', '\x1E8', '\x3', '\x1E9', '\x3', 
		'\x1E9', '\x3', '\x1E9', '\x5', '\x1E9', '\x1E98', '\n', '\x1E9', '\x3', 
		'\x1E9', '\x5', '\x1E9', '\x1E9B', '\n', '\x1E9', '\x3', '\x1E9', '\x5', 
		'\x1E9', '\x1E9E', '\n', '\x1E9', '\x3', '\x1E9', '\x6', '\x1E9', '\x1EA1', 
		'\n', '\x1E9', '\r', '\x1E9', '\xE', '\x1E9', '\x1EA2', '\x3', '\x1E9', 
		'\x3', '\x1E9', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', 
		'\x1EA', '\x3', '\x1EA', '\x5', '\x1EA', '\x1EAC', '\n', '\x1EA', '\x3', 
		'\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', '\x3', '\x1EA', '\a', '\x1EA', 
		'\x1EB2', '\n', '\x1EA', '\f', '\x1EA', '\xE', '\x1EA', '\x1EB5', '\v', 
		'\x1EA', '\x3', '\x1EA', '\x5', '\x1EA', '\x1EB8', '\n', '\x1EA', '\x3', 
		'\x1EA', '\x3', '\x1EA', '\x3', '\x1EB', '\x3', '\x1EB', '\x3', '\x1EB', 
		'\x3', '\x1EB', '\x3', '\x1EB', '\x3', '\x1EB', '\x5', '\x1EB', '\x1EC2', 
		'\n', '\x1EB', '\x3', '\x1EB', '\x5', '\x1EB', '\x1EC5', '\n', '\x1EB', 
		'\x5', '\x1EB', '\x1EC7', '\n', '\x1EB', '\x3', '\x1EC', '\x3', '\x1EC', 
		'\x3', '\x1EC', '\x3', '\x1ED', '\x3', '\x1ED', '\x3', '\x1ED', '\x3', 
		'\x1ED', '\x3', '\x1ED', '\x5', '\x1ED', '\x1ED1', '\n', '\x1ED', '\x5', 
		'\x1ED', '\x1ED3', '\n', '\x1ED', '\x3', '\x1EE', '\x3', '\x1EE', '\x3', 
		'\x1EE', '\x3', '\x1EE', '\x5', '\x1EE', '\x1ED9', '\n', '\x1EE', '\x3', 
		'\x1EF', '\x3', '\x1EF', '\x3', '\x1EF', '\x3', '\x1EF', '\x5', '\x1EF', 
		'\x1EDF', '\n', '\x1EF', '\x5', '\x1EF', '\x1EE1', '\n', '\x1EF', '\x3', 
		'\x1F0', '\x3', '\x1F0', '\x3', '\x1F0', '\x3', '\x1F1', '\x3', '\x1F1', 
		'\x3', '\x1F1', '\x3', '\x1F2', '\x3', '\x1F2', '\x3', '\x1F2', '\x3', 
		'\x1F2', '\x3', '\x1F2', '\x3', '\x1F2', '\x5', '\x1F2', '\x1EEF', '\n', 
		'\x1F2', '\x5', '\x1F2', '\x1EF1', '\n', '\x1F2', '\x3', '\x1F3', '\x3', 
		'\x1F3', '\x3', '\x1F3', '\x3', '\x1F3', '\x3', '\x1F3', '\x3', '\x1F3', 
		'\x3', '\x1F3', '\x3', '\x1F3', '\x3', '\x1F3', '\x5', '\x1F3', '\x1EFC', 
		'\n', '\x1F3', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', '\x1F4', '\x3', 
		'\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', '\x3', '\x1F5', 
		'\x3', '\x1F5', '\x3', '\x1F5', '\x5', '\x1F5', '\x1F08', '\n', '\x1F5', 
		'\x3', '\x1F6', '\x3', '\x1F6', '\x3', '\x1F6', '\x3', '\x1F6', '\x3', 
		'\x1F7', '\x5', '\x1F7', '\x1F0F', '\n', '\x1F7', '\x3', '\x1F7', '\x3', 
		'\x1F7', '\x6', '\x1F7', '\x1F13', '\n', '\x1F7', '\r', '\x1F7', '\xE', 
		'\x1F7', '\x1F14', '\x3', '\x1F8', '\x3', '\x1F8', '\x3', '\x1F8', '\x3', 
		'\x1F8', '\x3', '\x1F8', '\x5', '\x1F8', '\x1F1C', '\n', '\x1F8', '\x3', 
		'\x1F9', '\x3', '\x1F9', '\x3', '\x1F9', '\x3', '\x1F9', '\x3', '\x1F9', 
		'\x3', '\x1F9', '\x3', '\x1F9', '\x5', '\x1F9', '\x1F25', '\n', '\x1F9', 
		'\x3', '\x1FA', '\x3', '\x1FA', '\x5', '\x1FA', '\x1F29', '\n', '\x1FA', 
		'\x3', '\x1FA', '\x3', '\x1FA', '\x5', '\x1FA', '\x1F2D', '\n', '\x1FA', 
		'\x3', '\x1FA', '\x3', '\x1FA', '\x3', '\x1FB', '\x5', '\x1FB', '\x1F32', 
		'\n', '\x1FB', '\x3', '\x1FB', '\x3', '\x1FB', '\x5', '\x1FB', '\x1F36', 
		'\n', '\x1FB', '\x3', '\x1FB', '\x5', '\x1FB', '\x1F39', '\n', '\x1FB', 
		'\x3', '\x1FC', '\x3', '\x1FC', '\x5', '\x1FC', '\x1F3D', '\n', '\x1FC', 
		'\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x3', '\x1FD', '\x3', 
		'\x1FD', '\x5', '\x1FD', '\x1F44', '\n', '\x1FD', '\x3', '\x1FE', '\x3', 
		'\x1FE', '\x5', '\x1FE', '\x1F48', '\n', '\x1FE', '\x3', '\x1FE', '\x3', 
		'\x1FE', '\x5', '\x1FE', '\x1F4C', '\n', '\x1FE', '\x3', '\x1FE', '\x6', 
		'\x1FE', '\x1F4F', '\n', '\x1FE', '\r', '\x1FE', '\xE', '\x1FE', '\x1F50', 
		'\x3', '\x1FF', '\x3', '\x1FF', '\x5', '\x1FF', '\x1F55', '\n', '\x1FF', 
		'\x3', '\x200', '\x3', '\x200', '\x3', '\x200', '\x5', '\x200', '\x1F5A', 
		'\n', '\x200', '\x3', '\x201', '\x3', '\x201', '\x3', '\x202', '\x3', 
		'\x202', '\x5', '\x202', '\x1F60', '\n', '\x202', '\x3', '\x203', '\x3', 
		'\x203', '\x5', '\x203', '\x1F64', '\n', '\x203', '\x3', '\x204', '\x3', 
		'\x204', '\x3', '\x204', '\x5', '\x204', '\x1F69', '\n', '\x204', '\x3', 
		'\x205', '\x3', '\x205', '\x5', '\x205', '\x1F6D', '\n', '\x205', '\x3', 
		'\x205', '\x3', '\x205', '\x3', '\x205', '\x5', '\x205', '\x1F72', '\n', 
		'\x205', '\x3', '\x205', '\x5', '\x205', '\x1F75', '\n', '\x205', '\x3', 
		'\x206', '\x3', '\x206', '\x5', '\x206', '\x1F79', '\n', '\x206', '\x3', 
		'\x207', '\x3', '\x207', '\x5', '\x207', '\x1F7D', '\n', '\x207', '\x3', 
		'\x208', '\x3', '\x208', '\x3', '\x209', '\x3', '\x209', '\x3', '\x209', 
		'\x3', '\x209', '\x5', '\x209', '\x1F85', '\n', '\x209', '\x3', '\x20A', 
		'\x3', '\x20A', '\x3', '\x20B', '\x3', '\x20B', '\x3', '\x20C', '\x3', 
		'\x20C', '\x3', '\x20D', '\x3', '\x20D', '\x3', '\x20E', '\x3', '\x20E', 
		'\x3', '\x20F', '\x3', '\x20F', '\x3', '\x210', '\x3', '\x210', '\x3', 
		'\x211', '\x3', '\x211', '\x3', '\x212', '\x3', '\x212', '\x3', '\x213', 
		'\x3', '\x213', '\x3', '\x214', '\x3', '\x214', '\x3', '\x215', '\x3', 
		'\x215', '\x3', '\x216', '\x3', '\x216', '\x3', '\x217', '\x3', '\x217', 
		'\x3', '\x218', '\x3', '\x218', '\x3', '\x218', '\x5', '\x218', '\x1FA6', 
		'\n', '\x218', '\x3', '\x219', '\x3', '\x219', '\x3', '\x21A', '\x3', 
		'\x21A', '\x3', '\x21B', '\x3', '\x21B', '\x3', '\x21C', '\x3', '\x21C', 
		'\x3', '\x21D', '\x3', '\x21D', '\x3', '\x21E', '\x3', '\x21E', '\x3', 
		'\x21F', '\x3', '\x21F', '\x3', '\x220', '\x3', '\x220', '\x3', '\x221', 
		'\x3', '\x221', '\x3', '\x221', '\x5', '\x221', '\x1FBB', '\n', '\x221', 
		'\x3', '\x221', '\x6', '\x221', '\x1FBE', '\n', '\x221', '\r', '\x221', 
		'\xE', '\x221', '\x1FBF', '\x3', '\x221', '\x3', '\x221', '\x3', '\x221', 
		'\x3', '\x221', '\x3', '\x221', '\x3', '\x221', '\x3', '\x221', '\x3', 
		'\x221', '\x3', '\x221', '\x3', '\x221', '\x3', '\x221', '\x3', '\x221', 
		'\x3', '\x221', '\x3', '\x221', '\x5', '\x221', '\x1FD0', '\n', '\x221', 
		'\x3', '\x222', '\x5', '\x222', '\x1FD3', '\n', '\x222', '\x3', '\x222', 
		'\x6', '\x222', '\x1FD6', '\n', '\x222', '\r', '\x222', '\xE', '\x222', 
		'\x1FD7', '\x3', '\x223', '\x3', '\x223', '\x3', '\x223', '\x3', '\x223', 
		'\x3', '\x224', '\x3', '\x224', '\x3', '\x224', '\x3', '\x224', '\x3', 
		'\x224', '\x3', '\x224', '\x3', '\x224', '\x5', '\x224', '\x1FE5', '\n', 
		'\x224', '\x3', '\x225', '\x3', '\x225', '\x5', '\x225', '\x1FE9', '\n', 
		'\x225', '\x3', '\x225', '\x3', '\x225', '\x5', '\x225', '\x1FED', '\n', 
		'\x225', '\a', '\x225', '\x1FEF', '\n', '\x225', '\f', '\x225', '\xE', 
		'\x225', '\x1FF2', '\v', '\x225', '\x3', '\x225', '\x3', '\x225', '\x5', 
		'\x225', '\x1FF6', '\n', '\x225', '\x3', '\x226', '\x3', '\x226', '\x3', 
		'\x226', '\x3', '\x226', '\x3', '\x226', '\x5', '\x226', '\x1FFD', '\n', 
		'\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x5', '\x226', 
		'\x2002', '\n', '\x226', '\x5', '\x226', '\x2004', '\n', '\x226', '\x5', 
		'\x226', '\x2006', '\n', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', 
		'\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', '\x3', '\x226', 
		'\x5', '\x226', '\x200F', '\n', '\x226', '\x3', '\x226', '\x3', '\x226', 
		'\x5', '\x226', '\x2013', '\n', '\x226', '\x6', '\x226', '\x2015', '\n', 
		'\x226', '\r', '\x226', '\xE', '\x226', '\x2016', '\x5', '\x226', '\x2019', 
		'\n', '\x226', '\x3', '\x226', '\x3', '\x226', '\x5', '\x226', '\x201D', 
		'\n', '\x226', '\x3', '\x227', '\x3', '\x227', '\x3', '\x227', '\x3', 
		'\x228', '\x3', '\x228', '\x5', '\x228', '\x2024', '\n', '\x228', '\x3', 
		'\x228', '\x3', '\x228', '\x5', '\x228', '\x2028', '\n', '\x228', '\x5', 
		'\x228', '\x202A', '\n', '\x228', '\x3', '\x229', '\x3', '\x229', '\x5', 
		'\x229', '\x202E', '\n', '\x229', '\x3', '\x229', '\x3', '\x229', '\x5', 
		'\x229', '\x2032', '\n', '\x229', '\x3', '\x229', '\x3', '\x229', '\x3', 
		'\x229', '\x3', '\x229', '\x3', '\x229', '\x5', '\x229', '\x2039', '\n', 
		'\x229', '\x3', '\x229', '\x3', '\x229', '\x3', '\x229', '\x3', '\x229', 
		'\x3', '\x229', '\x3', '\x229', '\x5', '\x229', '\x2041', '\n', '\x229', 
		'\x3', '\x229', '\x3', '\x229', '\x3', '\x229', '\x3', '\x229', '\x3', 
		'\x229', '\x3', '\x229', '\x5', '\x229', '\x2049', '\n', '\x229', '\x5', 
		'\x229', '\x204B', '\n', '\x229', '\x3', '\x22A', '\x3', '\x22A', '\x3', 
		'\x22A', '\x3', '\x22A', '\x5', '\x22A', '\x2051', '\n', '\x22A', '\x3', 
		'\x22A', '\x5', '\x22A', '\x2054', '\n', '\x22A', '\x3', '\x22A', '\x3', 
		'\x22A', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', 
		'\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', 
		'\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x5', '\x22B', '\x206C', '\n', 
		'\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x5', '\x22B', '\x2073', '\n', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', 
		'\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', 
		'\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', 
		'\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', 
		'\x3', '\x22B', '\x3', '\x22B', '\x3', '\x22B', '\x5', '\x22B', '\x2094', 
		'\n', '\x22B', '\x3', '\x22C', '\x3', '\x22C', '\x3', '\x22C', '\x5', 
		'\x22C', '\x2099', '\n', '\x22C', '\x3', '\x22C', '\x5', '\x22C', '\x209C', 
		'\n', '\x22C', '\x3', '\x22C', '\x3', '\x22C', '\x3', '\x22C', '\x5', 
		'\x22C', '\x20A1', '\n', '\x22C', '\x5', '\x22C', '\x20A3', '\n', '\x22C', 
		'\x3', '\x22C', '\x3', '\x22C', '\a', '\x22C', '\x20A7', '\n', '\x22C', 
		'\f', '\x22C', '\xE', '\x22C', '\x20AA', '\v', '\x22C', '\x3', '\x22D', 
		'\x3', '\x22D', '\x3', '\x22D', '\a', '\x22D', '\x20AF', '\n', '\x22D', 
		'\f', '\x22D', '\xE', '\x22D', '\x20B2', '\v', '\x22D', '\x3', '\x22E', 
		'\x3', '\x22E', '\x5', '\x22E', '\x20B6', '\n', '\x22E', '\x3', '\x22E', 
		'\x3', '\x22E', '\x3', '\x22E', '\x5', '\x22E', '\x20BB', '\n', '\x22E', 
		'\x3', '\x22E', '\x5', '\x22E', '\x20BE', '\n', '\x22E', '\x3', '\x22E', 
		'\x5', '\x22E', '\x20C1', '\n', '\x22E', '\x3', '\x22F', '\x3', '\x22F', 
		'\x5', '\x22F', '\x20C5', '\n', '\x22F', '\x3', '\x22F', '\x3', '\x22F', 
		'\x3', '\x230', '\x3', '\x230', '\x5', '\x230', '\x20CB', '\n', '\x230', 
		'\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', 
		'\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', 
		'\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', 
		'\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', 
		'\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', 
		'\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', '\x3', '\x230', 
		'\x3', '\x230', '\x3', '\x230', '\x5', '\x230', '\x20EA', '\n', '\x230', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x5', '\x231', '\x20F1', '\n', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', '\x2100', '\n', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x5', '\x231', '\x2110', '\n', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', '\x2123', '\n', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x5', '\x231', '\x2134', '\n', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x5', '\x231', '\x213B', '\n', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x5', '\x231', '\x2143', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x5', '\x231', '\x2150', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x5', '\x231', '\x2159', '\n', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x5', '\x231', '\x2162', '\n', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x5', '\x231', '\x216B', '\n', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', '\x2175', 
		'\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', '\x217D', '\n', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', 
		'\x231', '\x2187', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x5', '\x231', '\x2191', '\n', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x5', '\x231', '\x219D', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', '\x21AD', 
		'\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', 
		'\x21BF', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', 
		'\x21CC', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x5', '\x231', '\x21DB', '\n', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', 
		'\x21E6', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x5', '\x231', '\x21F0', '\n', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', '\x231', '\x21FB', 
		'\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x5', '\x231', '\x2205', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x5', 
		'\x231', '\x2216', '\n', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x5', '\x231', '\x221C', '\n', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', 
		'\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', '\x231', '\x3', 
		'\x231', '\x3', '\x231', '\x5', '\x231', '\x2232', '\n', '\x231', '\x3', 
		'\x232', '\x3', '\x232', '\x5', '\x232', '\x2236', '\n', '\x232', '\x3', 
		'\x233', '\x3', '\x233', '\x3', '\x233', '\x5', '\x233', '\x223B', '\n', 
		'\x233', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x5', '\x234', 
		'\x2240', '\n', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', 
		'\x3', '\x234', '\x5', '\x234', '\x2246', '\n', '\x234', '\x3', '\x234', 
		'\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x5', '\x234', '\x224C', 
		'\n', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', 
		'\x234', '\x5', '\x234', '\x2252', '\n', '\x234', '\x3', '\x234', '\x3', 
		'\x234', '\x3', '\x234', '\x5', '\x234', '\x2257', '\n', '\x234', '\x5', 
		'\x234', '\x2259', '\n', '\x234', '\x3', '\x234', '\x5', '\x234', '\x225C', 
		'\n', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', 
		'\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', 
		'\x5', '\x234', '\x2266', '\n', '\x234', '\x3', '\x234', '\x5', '\x234', 
		'\x2269', '\n', '\x234', '\x5', '\x234', '\x226B', '\n', '\x234', '\x5', 
		'\x234', '\x226D', '\n', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', 
		'\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', 
		'\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', '\x234', '\x3', 
		'\x234', '\x5', '\x234', '\x227B', '\n', '\x234', '\x3', '\x235', '\x3', 
		'\x235', '\x5', '\x235', '\x227F', '\n', '\x235', '\x3', '\x235', '\x3', 
		'\x235', '\x3', '\x236', '\x3', '\x236', '\x3', '\x237', '\x3', '\x237', 
		'\x3', '\x238', '\x3', '\x238', '\x3', '\x239', '\x3', '\x239', '\x3', 
		'\x23A', '\x3', '\x23A', '\x3', '\x23B', '\x3', '\x23B', '\x3', '\x23C', 
		'\x3', '\x23C', '\x3', '\x23D', '\x3', '\x23D', '\x3', '\x23E', '\x3', 
		'\x23E', '\x3', '\x23F', '\x3', '\x23F', '\x3', '\x240', '\x3', '\x240', 
		'\x3', '\x241', '\x3', '\x241', '\x3', '\x242', '\x3', '\x242', '\x3', 
		'\x243', '\x3', '\x243', '\x3', '\x243', '\a', '\x243', '\x22A0', '\n', 
		'\x243', '\f', '\x243', '\xE', '\x243', '\x22A3', '\v', '\x243', '\x3', 
		'\x244', '\x3', '\x244', '\x3', '\x245', '\x3', '\x245', '\x3', '\x246', 
		'\x3', '\x246', '\x3', '\x247', '\x3', '\x247', '\x5', '\x247', '\x22AD', 
		'\n', '\x247', '\x3', '\x248', '\x3', '\x248', '\x3', '\x248', '\a', '\x248', 
		'\x22B2', '\n', '\x248', '\f', '\x248', '\xE', '\x248', '\x22B5', '\v', 
		'\x248', '\x3', '\x249', '\x3', '\x249', '\x3', '\x24A', '\x3', '\x24A', 
		'\x3', '\x24B', '\x3', '\x24B', '\x3', '\x24C', '\x3', '\x24C', '\x3', 
		'\x24C', '\x3', '\x24C', '\x3', '\x24D', '\x3', '\x24D', '\x3', '\x24E', 
		'\x3', '\x24E', '\x3', '\x24F', '\x3', '\x24F', '\x3', '\x250', '\x3', 
		'\x250', '\x5', '\x250', '\x22C9', '\n', '\x250', '\x3', '\x251', '\x5', 
		'\x251', '\x22CC', '\n', '\x251', '\x3', '\x251', '\x3', '\x251', '\x5', 
		'\x251', '\x22D0', '\n', '\x251', '\x3', '\x252', '\x3', '\x252', '\x3', 
		'\x252', '\x3', '\x253', '\x3', '\x253', '\x3', '\x253', '\x2', '\x5', 
		'\x37E', '\x382', '\x386', '\x254', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', 
		'\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', 
		'\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', 
		'\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', 
		'\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', 
		'\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', 
		'\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', 
		'\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', '\x110', 
		'\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', '\x120', 
		'\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', '\x130', 
		'\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', '\x140', 
		'\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', '\x150', 
		'\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', '\x160', 
		'\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', '\x170', 
		'\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', '\x180', 
		'\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', '\x190', 
		'\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E', '\x1A0', 
		'\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', 
		'\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE', '\x1C0', 
		'\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE', '\x1D0', 
		'\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE', '\x1E0', 
		'\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE', '\x1F0', 
		'\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE', '\x200', 
		'\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E', '\x210', 
		'\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E', '\x220', 
		'\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E', '\x230', 
		'\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E', '\x240', 
		'\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E', '\x250', 
		'\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E', '\x260', 
		'\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', '\x26E', '\x270', 
		'\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', '\x27E', '\x280', 
		'\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', '\x28E', '\x290', 
		'\x292', '\x294', '\x296', '\x298', '\x29A', '\x29C', '\x29E', '\x2A0', 
		'\x2A2', '\x2A4', '\x2A6', '\x2A8', '\x2AA', '\x2AC', '\x2AE', '\x2B0', 
		'\x2B2', '\x2B4', '\x2B6', '\x2B8', '\x2BA', '\x2BC', '\x2BE', '\x2C0', 
		'\x2C2', '\x2C4', '\x2C6', '\x2C8', '\x2CA', '\x2CC', '\x2CE', '\x2D0', 
		'\x2D2', '\x2D4', '\x2D6', '\x2D8', '\x2DA', '\x2DC', '\x2DE', '\x2E0', 
		'\x2E2', '\x2E4', '\x2E6', '\x2E8', '\x2EA', '\x2EC', '\x2EE', '\x2F0', 
		'\x2F2', '\x2F4', '\x2F6', '\x2F8', '\x2FA', '\x2FC', '\x2FE', '\x300', 
		'\x302', '\x304', '\x306', '\x308', '\x30A', '\x30C', '\x30E', '\x310', 
		'\x312', '\x314', '\x316', '\x318', '\x31A', '\x31C', '\x31E', '\x320', 
		'\x322', '\x324', '\x326', '\x328', '\x32A', '\x32C', '\x32E', '\x330', 
		'\x332', '\x334', '\x336', '\x338', '\x33A', '\x33C', '\x33E', '\x340', 
		'\x342', '\x344', '\x346', '\x348', '\x34A', '\x34C', '\x34E', '\x350', 
		'\x352', '\x354', '\x356', '\x358', '\x35A', '\x35C', '\x35E', '\x360', 
		'\x362', '\x364', '\x366', '\x368', '\x36A', '\x36C', '\x36E', '\x370', 
		'\x372', '\x374', '\x376', '\x378', '\x37A', '\x37C', '\x37E', '\x380', 
		'\x382', '\x384', '\x386', '\x388', '\x38A', '\x38C', '\x38E', '\x390', 
		'\x392', '\x394', '\x396', '\x398', '\x39A', '\x39C', '\x39E', '\x3A0', 
		'\x3A2', '\x3A4', '\x3A6', '\x3A8', '\x3AA', '\x3AC', '\x3AE', '\x3B0', 
		'\x3B2', '\x3B4', '\x3B6', '\x3B8', '\x3BA', '\x3BC', '\x3BE', '\x3C0', 
		'\x3C2', '\x3C4', '\x3C6', '\x3C8', '\x3CA', '\x3CC', '\x3CE', '\x3D0', 
		'\x3D2', '\x3D4', '\x3D6', '\x3D8', '\x3DA', '\x3DC', '\x3DE', '\x3E0', 
		'\x3E2', '\x3E4', '\x3E6', '\x3E8', '\x3EA', '\x3EC', '\x3EE', '\x3F0', 
		'\x3F2', '\x3F4', '\x3F6', '\x3F8', '\x3FA', '\x3FC', '\x3FE', '\x400', 
		'\x402', '\x404', '\x406', '\x408', '\x40A', '\x40C', '\x40E', '\x410', 
		'\x412', '\x414', '\x416', '\x418', '\x41A', '\x41C', '\x41E', '\x420', 
		'\x422', '\x424', '\x426', '\x428', '\x42A', '\x42C', '\x42E', '\x430', 
		'\x432', '\x434', '\x436', '\x438', '\x43A', '\x43C', '\x43E', '\x440', 
		'\x442', '\x444', '\x446', '\x448', '\x44A', '\x44C', '\x44E', '\x450', 
		'\x452', '\x454', '\x456', '\x458', '\x45A', '\x45C', '\x45E', '\x460', 
		'\x462', '\x464', '\x466', '\x468', '\x46A', '\x46C', '\x46E', '\x470', 
		'\x472', '\x474', '\x476', '\x478', '\x47A', '\x47C', '\x47E', '\x480', 
		'\x482', '\x484', '\x486', '\x488', '\x48A', '\x48C', '\x48E', '\x490', 
		'\x492', '\x494', '\x496', '\x498', '\x49A', '\x49C', '\x49E', '\x4A0', 
		'\x4A2', '\x4A4', '\x2', '\x9F', '\x4', '\x2', '\x19', '\x19', '\x11A', 
		'\x11A', '\x4', '\x2', '\f', '\f', '\x1BF', '\x1BF', '\x5', '\x2', '\xEC', 
		'\xEC', '\x133', '\x133', '\x1DB', '\x1DB', '\x4', '\x2', 'T', 'T', '\x19E', 
		'\x19E', '\x5', '\x2', '\x38', '\x38', '\x1A9', '\x1A9', '\x233', '\x233', 
		'\x4', '\x2', '\x9B', '\x9B', '\xB0', '\xB0', '\x4', '\x2', '\n', '\n', 
		',', ',', '\x5', '\x2', '\x94', '\x94', '\x10F', '\x10F', '\x283', '\x283', 
		'\x5', '\x2', '\x16D', '\x16D', '\x194', '\x194', '\x1AD', '\x1AD', '\x4', 
		'\x2', '\xDA', '\xDA', '\x28B', '\x28B', '\x4', '\x2', '\x38', '\x38', 
		'\x233', '\x233', '\x4', '\x2', '\x5', '\x5', '\xA4', '\xA4', '\x5', '\x2', 
		'\x5', '\x5', '\xA4', '\xA4', '\x15F', '\x15F', '\x5', '\x2', 'z', 'z', 
		'\x19D', '\x19D', '\x234', '\x234', '\x4', '\x2', '\x149', '\x149', '\x19E', 
		'\x19E', '\x4', '\x2', '\x152', '\x152', '\x23C', '\x23C', '\x5', '\x2', 
		'\xD0', '\xD0', '\x110', '\x110', '\x1A8', '\x1A8', '\x4', '\x2', '{', 
		'{', '\x173', '\x173', '\x4', '\x2', '\x180', '\x180', '\x19E', '\x19E', 
		'\x4', '\x2', '\x121', '\x121', '\x177', '\x177', '\x4', '\x2', '\xE4', 
		'\xE4', '\x21D', '\x21D', '\x4', '\x2', '\xCA', '\xCA', '\xE5', '\xE5', 
		'\x4', '\x2', '\x8E', '\x8E', '\x257', '\x257', '\x4', '\x2', '\x13C', 
		'\x13C', '\x27E', '\x27E', '\x4', '\x2', '\x5', '\x5', '\x1EC', '\x1EC', 
		'\x4', '\x2', '\x6', '\x6', '\x93', '\x93', '\x4', '\x2', '\xE', '\xE', 
		'w', 'w', '\x4', '\x2', '\x119', '\x119', '\x298', '\x298', '\x5', '\x2', 
		'\xF4', '\xF4', '\xF6', '\xF6', '\x193', '\x193', '\x4', '\x2', '\x91', 
		'\x91', '\xFA', '\xFA', '\x4', '\x2', '\x182', '\x182', '\x1EB', '\x1EB', 
		'\x4', '\x2', '\x188', '\x188', '\x28B', '\x28B', '\x4', '\x2', '\x185', 
		'\x185', '\x230', '\x230', '\x4', '\x2', '\x191', '\x191', '\x198', '\x198', 
		'\x4', '\x2', ')', ')', '\x213', '\x213', '\x4', '\x2', '\x44', '\x44', 
		'\x1D8', '\x1D8', '\x4', '\x2', '\xF1', '\xF1', '\x144', '\x144', '\a', 
		'\x2', 't', 't', '\xF1', '\xF1', '\x144', '\x144', '\x151', '\x151', '\x17D', 
		'\x17D', '\x4', '\x2', '\b', '\b', '(', '(', '\x4', '\x2', '\x17', '\x17', 
		'\x1D8', '\x1D8', '\x4', '\x2', '\x281', '\x281', '\x286', '\x286', '\x4', 
		'\x2', '\xE1', '\xE1', '\x1AE', '\x1AE', '\x4', '\x2', '\x30', '\x30', 
		'\x22C', '\x22C', '\x4', '\x2', '\x190', '\x190', '\x196', '\x196', '\x5', 
		'\x2', '\xCF', '\xCF', '\x13D', '\x13D', '\x178', '\x178', '\x4', '\x2', 
		'#', '#', '\x148', '\x148', '\x4', '\x2', '\x2EA', '\x2EA', '\x30C', '\x30C', 
		'\x4', '\x2', '\xEB', '\xEB', '\x176', '\x176', '\x4', '\x2', '\x94', 
		'\x94', '\x1CC', '\x1CC', '\x4', '\x2', '\x41', '\x41', '\x170', '\x170', 
		'\x4', '\x2', '\x8E', '\x8E', '\xDA', '\xDA', '\x4', '\x2', '\x183', '\x183', 
		'\x203', '\x203', '\x4', '\x2', '\x115', '\x115', '\x131', '\x131', '\x4', 
		'\x2', '\x17E', '\x17E', '\x2B8', '\x2B8', '\x4', '\x2', '\x136', '\x136', 
		'\x253', '\x253', '\x4', '\x2', '\xF', '\xF', '\x9C', '\x9C', '\x4', '\x2', 
		'\x139', '\x139', '\x28D', '\x28D', '\x4', '\x2', '\x8D', '\x8D', '\x120', 
		'\x120', '\x5', '\x2', '\xF1', '\xF1', '\x144', '\x144', '\x151', '\x151', 
		'\x5', '\x2', '\x94', '\x94', '\x9B', '\x9B', '\xB0', '\xB0', '\x4', '\x2', 
		'\xE8', '\xE8', '\x215', '\x215', '\x5', '\x2', '\x80', '\x81', '\x160', 
		'\x161', '\x2B6', '\x2B7', '\x4', '\x2', '\x27D', '\x27D', '\x2E8', '\x2E8', 
		'\x5', '\x2', '\x8E', '\x8E', '\x121', '\x121', '\x1E1', '\x1E1', '\x5', 
		'\x2', '\x8E', '\x8E', '\x121', '\x121', '\x17D', '\x17D', '\x4', '\x2', 
		'\xA8', '\xA8', '\x17C', '\x17C', '\x4', '\x2', 'x', 'x', '\x92', '\x92', 
		'\x6', '\x2', '\x107', '\x107', '\x10E', '\x10E', '\x172', '\x172', '\x1A5', 
		'\x1A5', '\x4', '\x2', '\x8E', '\x8E', '\x2F7', '\x2F7', '\x3', '\x2', 
		'\xFF', '\x100', '\x3', '\x3', '\x300', '\x300', '\x3', '\x2', '\x300', 
		'\x300', '\x3', '\x2', '\x1F8', '\x1F9', '\x4', '\x2', '\x197', '\x197', 
		'\x2A4', '\x2A4', '\x3', '\x2', '\x65', '\x66', '\x4', '\x2', '\x189', 
		'\x189', '\x299', '\x299', '\x4', '\x2', '*', '*', '\xFA', '\xFA', '\x4', 
		'\x2', ';', ';', '\x95', '\x95', '\x5', '\x2', '\xE', '\xE', '\x9E', '\x9E', 
		'\x27C', '\x27C', '\x4', '\x2', 'u', 'u', '\x166', '\x166', '\x5', '\x2', 
		'\xE1', '\xE1', '\x127', '\x127', '\x1FE', '\x1FE', '\x4', '\x2', '\x20F', 
		'\x20F', '\x25E', '\x25E', '\x5', '\x2', '\x20F', '\x20F', '\x22E', '\x22E', 
		'\x25E', '\x25E', '\x4', '\x2', '\xC0', '\xC0', '\xFB', '\xFB', '\x4', 
		'\x2', 'v', 'v', '\x202', '\x202', '\x4', '\x2', '\xF8', '\xF8', '\x121', 
		'\x121', '\x4', '\x2', '\xE', '\xE', '\x282', '\x282', '\x4', '\x2', '%', 
		'%', '\x219', '\x219', '\x4', '\x2', '\x1A', '\x1A', '\x96', '\x96', '\x4', 
		'\x2', '\xD1', '\xD1', '\x124', '\x124', '\x4', '\x2', '\xE', '\xE', '\xD1', 
		'\xD1', '\x4', '\x2', '\x254', '\x254', '\x25A', '\x25A', '\x4', '\x2', 
		'\x152', '\x152', '\x241', '\x241', '\x3', '\x2', '\x12C', '\x12F', '\x4', 
		'\x2', '\x2F1', '\x2F1', '\x2F5', '\x2F5', '\x3', '\x2', '\x2F2', '\x2F3', 
		'\x3', '\x2', '\x2FD', '\x2FE', '\x4', '\x2', '\x8B', '\x8B', '\xFD', 
		'\xFD', '\x6', '\x2', '\xE', '\xE', '\x14', '\x14', '\xC4', '\xC4', '\x22F', 
		'\x22F', '\x5', '\x2', ':', ':', '\x126', '\x126', '\x26C', '\x26C', '\x4', 
		'\x2', '\xE', '\xE', '\x9E', '\x9E', '\x4', '\x2', 'G', 'G', '\x2A7', 
		'\x2A7', '\x4', '\x2', '\x9E', '\x9E', '\x27C', '\x27C', '\x3', '\x2', 
		'\x1B9', '\x1BC', '\x4', '\x2', '\x43', '\x43', ']', ']', '\x4', '\x2', 
		'\xD2', '\xD2', '\x125', '\x125', '\x4', '\x2', 'L', 'L', '\x169', '\x169', 
		'\x4', '\x2', '\x2A8', '\x2A8', '\x2AB', '\x2AB', '\x4', '\x2', '\xB6', 
		'\xB6', '\x175', '\x175', '\x4', '\x2', '\xBA', '\xBA', '\x164', '\x164', 
		'\x4', '\x2', 'j', 'j', '\xA2', '\xA2', '\x4', '\x2', '\xEF', '\xEF', 
		'\x224', '\x224', '\a', '\x2', '\x2C9', '\x2CB', '\x2CD', '\x2D2', '\x2D4', 
		'\x2D5', '\x2D7', '\x2D7', '\x2DB', '\x2DE', '\x3', '\x2', '\x2C2', '\x2C8', 
		'\x3', '\x2', '\x2BC', '\x2C1', '\x4', '\x2', '\x1DB', '\x1DB', '\x206', 
		'\x206', '\x4', '\x2', '\xD7', '\xD7', '\x1C9', '\x1C9', '\x4', '\x2', 
		'\x184', '\x184', '\x20D', '\x20D', '\x3', '\x2', '\xB7', '\xB8', '\x4', 
		'\x2', '\x1A2', '\x1A2', '\x235', '\x235', '\x5', '\x2', '\xCC', '\xCC', 
		'\x246', '\x246', '\x29A', '\x29A', '\x4', '\x2', '[', '[', '\x201', '\x201', 
		'\x5', '\x2', '[', '[', '\x17D', '\x17D', '\x201', '\x201', '\x4', '\x2', 
		'\x1AF', '\x1AF', '\x243', '\x243', '\x4', '\x2', '\x1F0', '\x1F0', '\x231', 
		'\x231', '\x4', '\x2', '\xF8', '\xF8', '\x1F1', '\x1F1', '\x3', '\x2', 
		'\x1BD', '\x1BE', '\x4', '\x2', '\x80', '\x80', '\x2B7', '\x2B7', '\x4', 
		'\x2', '\x160', '\x160', '\x212', '\x212', '\x4', '\x2', '@', '@', 'K', 
		'K', '\x5', '\x2', '\x10', '\x10', 'r', 'r', '\xA4', '\xA4', '\x4', '\x2', 
		'\x10', '\x10', '\xA4', '\xA4', '\x4', '\x2', 'r', 'r', '\xA4', '\xA4', 
		'\x4', '\x2', '\x10', '\x10', 'r', 'r', '\x5', '\x2', '\x10', '\x10', 
		'\xA4', '\xA4', '\xC2', '\xC2', '\x4', '\x2', '\x14', '\x14', '\xC9', 
		'\xC9', '\x4', '\x2', 'P', 'P', '\x1D5', '\x1D5', '\x6', '\x2', '\x10', 
		'\x10', 'Z', 'Z', '\xA4', '\xA4', '\x216', '\x216', '\x6', '\x2', '\x10', 
		'\x10', '\xA4', '\xA4', '\x216', '\x216', '\x283', '\x283', '\x5', '\x2', 
		'\x94', '\x94', '\xA4', '\xA4', '\x10F', '\x10F', '\b', '\x2', '\x10', 
		'\x10', '\x94', '\x94', '\xA4', '\xA4', '\x10F', '\x10F', '\x216', '\x216', 
		'\x283', '\x283', '\x4', '\x2', '\xA4', '\xA4', '\x283', '\x283', '\x5', 
		'\x2', '\x10', '\x10', '\xA4', '\xA4', '\xE7', '\xE7', '\x5', '\x2', '\x10', 
		'\x10', '\xA4', '\xA4', '\x216', '\x216', '\x5', '\x2', '\x10', '\x10', 
		'r', 'r', '\x1F2', '\x1F2', '\x5', '\x2', '\x10', '\x10', '\xA4', '\xA4', 
		'\x289', '\x289', '\f', '\x2', '\x10', '\x10', '\'', '\'', 'Z', 'Z', '\x94', 
		'\x94', '\xA4', '\xA4', '\x10F', '\x10F', '\x13C', '\x13C', '\x1DD', '\x1DD', 
		'\x216', '\x216', '\x283', '\x283', '\a', '\x2', '\x10', '\x10', 'r', 
		'r', '\xA4', '\xA4', '\x146', '\x146', '\x27D', '\x27D', '\x6', '\x2', 
		'\x10', '\x10', '\xA4', '\xA4', '\xC2', '\xC2', '\x278', '\x278', '\x5', 
		'\x2', '\xA4', '\xA4', '\x154', '\x154', '\x278', '\x278', '\x4', '\x2', 
		'\x12', '\x12', '\x1E', '\x1E', '\x4', '\x2', '\x98', '\x98', '\x26D', 
		'\x26D', '\b', '\x2', '\x80', '\x80', '\xF2', '\xF2', '\x159', '\x159', 
		'\x160', '\x160', '\x212', '\x212', '\x2B7', '\x2B7', '\xA9', '\x2', '\x4', 
		'\x5', '\n', '\r', '\x12', '\x12', '\x18', '\x18', '\x1B', '\x1E', '!', 
		'!', '#', '#', '%', '&', '*', '*', ',', ',', '/', '/', '\x32', '\x36', 
		'\x38', ':', '=', '>', '@', '@', '\x42', '\x43', '\x45', '\x45', 'G', 
		'G', 'J', 'L', 'N', 'N', 'Q', 'T', 'W', 'W', 'Y', '_', '\x64', 'g', 'j', 
		'q', 'u', 'v', 'x', '}', '\x80', '\x80', '\x83', '\x88', '\x8A', '\x8B', 
		'\x8F', '\x8F', '\x91', '\x92', '\x94', '\x94', '\x97', '\x97', '\x99', 
		'\x99', '\x9B', '\x9B', '\x9D', '\x9D', '\xA2', '\xA3', '\xA5', '\xA5', 
		'\xA7', '\xA7', '\xAC', '\xAC', '\xAF', '\xB1', '\xB6', '\xBA', '\xBD', 
		'\xC0', '\xC2', '\xC2', '\xC5', '\xC5', '\xC7', '\xC7', '\xC9', '\xC9', 
		'\xCB', '\xCC', '\xD0', '\xD2', '\xD5', '\xD5', '\xD7', '\xDA', '\xE1', 
		'\xE2', '\xE9', '\xE9', '\xEC', '\xEC', '\xEF', '\xEF', '\xF2', '\xF2', 
		'\xF6', '\xF6', '\xF8', '\xF8', '\xFA', '\xFF', '\x103', '\x105', '\x10B', 
		'\x10B', '\x10D', '\x10E', '\x110', '\x112', '\x114', '\x114', '\x116', 
		'\x116', '\x118', '\x118', '\x11B', '\x11D', '\x11F', '\x11F', '\x121', 
		'\x127', '\x129', '\x129', '\x12B', '\x12E', '\x130', '\x130', '\x132', 
		'\x133', '\x137', '\x137', '\x13A', '\x13A', '\x13E', '\x13E', '\x140', 
		'\x143', '\x145', '\x145', '\x149', '\x149', '\x14B', '\x14B', '\x14E', 
		'\x14E', '\x150', '\x150', '\x152', '\x152', '\x154', '\x154', '\x156', 
		'\x156', '\x159', '\x15C', '\x15F', '\x160', '\x163', '\x16D', '\x16F', 
		'\x16F', '\x172', '\x173', '\x175', '\x175', '\x17D', '\x17E', '\x184', 
		'\x184', '\x18B', '\x18F', '\x191', '\x191', '\x193', '\x194', '\x197', 
		'\x197', '\x199', '\x19A', '\x19D', '\x19D', '\x19F', '\x19F', '\x1A2', 
		'\x1A3', '\x1A5', '\x1A5', '\x1A7', '\x1AA', '\x1AC', '\x1AD', '\x1AF', 
		'\x1AF', '\x1B1', '\x1B3', '\x1BF', '\x1BF', '\x1C2', '\x1C3', '\x1C6', 
		'\x1CB', '\x1D0', '\x1D0', '\x1D5', '\x1D5', '\x1DA', '\x1DD', '\x1DF', 
		'\x1E0', '\x1E3', '\x1E3', '\x1E5', '\x1E6', '\x1E8', '\x1E8', '\x1EA', 
		'\x1EA', '\x1ED', '\x1EE', '\x1F1', '\x1F1', '\x1F3', '\x1F5', '\x1F8', 
		'\x1FC', '\x1FE', '\x1FE', '\x201', '\x202', '\x204', '\x207', '\x209', 
		'\x20B', '\x20D', '\x20F', '\x212', '\x212', '\x214', '\x215', '\x217', 
		'\x217', '\x219', '\x21C', '\x21E', '\x221', '\x224', '\x229', '\x22B', 
		'\x22B', '\x22D', '\x22F', '\x233', '\x235', '\x237', '\x237', '\x239', 
		'\x23D', '\x23F', '\x241', '\x243', '\x246', '\x248', '\x248', '\x24B', 
		'\x24B', '\x257', '\x257', '\x25D', '\x265', '\x26C', '\x26E', '\x270', 
		'\x271', '\x273', '\x273', '\x276', '\x278', '\x27D', '\x27D', '\x280', 
		'\x280', '\x282', '\x282', '\x284', '\x285', '\x287', '\x289', '\x28B', 
		'\x28B', '\x28D', '\x290', '\x292', '\x295', '\x299', '\x29C', '\x29F', 
		'\x2A0', '\x2A3', '\x2B0', '\x2B2', '\x2B5', '\x2B7', '\x2B9', '\x2BB', 
		'\x2CB', '\x2CD', '\x2D2', '\x2D4', '\x2D5', '\x2D7', '\x2D8', '\x2DA', 
		'\x2DE', '\x30C', '\x30C', '\x5', '\x2', 'N', 'N', '\x2CC', '\x2CC', '\x2D8', 
		'\x2DA', '\a', '\x2', 'q', 'q', '\x2C9', '\x2C9', '\x2D3', '\x2D3', '\x2D6', 
		'\x2D6', '\x2DB', '\x2DB', '\x4', '\x2', '\x2E3', '\x2E3', '\x2EA', '\x2EA', 
		'\x2', '\x27A7', '\x2', '\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4', '\x4D8', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x4DA', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\n', '\x4F2', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x526', '\x3', '\x2', '\x2', '\x2', '\xE', '\x52A', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x538', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x53C', '\x3', '\x2', '\x2', '\x2', '\x14', '\x548', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x18', '\x55A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x570', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x5B2', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x5B4', '\x3', '\x2', '\x2', '\x2', '\"', '\x5C5', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x5E7', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x5E9', '\x3', '\x2', '\x2', '\x2', '(', '\x5EE', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x601', '\x3', '\x2', '\x2', '\x2', ',', '\x630', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x64D', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x672', '\x3', '\x2', '\x2', '\x2', '\x32', '\x677', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x690', '\x3', '\x2', '\x2', '\x2', '\x36', '\x6A8', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x6B1', '\x3', '\x2', '\x2', '\x2', 
		':', '\x6BA', '\x3', '\x2', '\x2', '\x2', '<', '\x6C3', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x6C7', '\x3', '\x2', '\x2', '\x2', '@', '\x6CC', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x6E4', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x46', '\x6EC', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x71D', '\x3', '\x2', '\x2', '\x2', 'J', '\x739', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x73B', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x749', '\x3', '\x2', '\x2', '\x2', 'P', '\x74E', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x753', '\x3', '\x2', '\x2', '\x2', 'T', '\x759', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x75C', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x767', '\x3', '\x2', '\x2', '\x2', 'Z', '\x776', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x787', '\x3', '\x2', '\x2', '\x2', '^', '\x798', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x7A0', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x7A5', '\x3', '\x2', '\x2', '\x2', '\x64', '\x7B5', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x7B9', '\x3', '\x2', '\x2', '\x2', 'h', '\x7D1', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x7D4', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x7DA', '\x3', '\x2', '\x2', '\x2', 'n', '\x7E6', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x7EF', '\x3', '\x2', '\x2', '\x2', 'r', '\x80B', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x811', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x814', '\x3', '\x2', '\x2', '\x2', 'x', '\x81B', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x823', '\x3', '\x2', '\x2', '\x2', '|', '\x82F', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x831', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x835', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83B', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x854', '\x3', '\x2', '\x2', '\x2', '\x86', '\x873', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x8A0', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8AA', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8AC', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8B1', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8BF', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x8C1', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x8C6', '\x3', '\x2', '\x2', '\x2', '\x96', '\x8D6', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x8F7', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x91A', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x91E', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x92D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x92F', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x932', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x937', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x941', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x966', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x968', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x97B', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x983', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x9B4', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x9BB', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x9BF', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x9C5', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x9C9', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x9D1', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x9EB', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x9ED', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x9F3', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x9F6', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x9F9', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x9FC', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xA32', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xA34', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xA3F', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xA47', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xA52', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xA54', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xA59', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xA61', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\xA78', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xA8F', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\xAC1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xAC5', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xAE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xAE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xAFD', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xB27', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xB2E', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xB3F', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xB48', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xB5B', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xB5F', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xB7E', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xB80', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xB91', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xBA1', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xBB9', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xBCF', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\xBD8', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xBDA', '\x3', '\x2', '\x2', '\x2', '\x104', '\xBFF', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\xC06', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xC2A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\xC75', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\xC78', '\x3', '\x2', '\x2', '\x2', '\x10E', '\xCA1', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\xCA3', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\xCA5', '\x3', '\x2', '\x2', '\x2', '\x114', '\xCA8', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\xCAC', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\xCC2', '\x3', '\x2', '\x2', '\x2', '\x11A', '\xCCE', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\xCD7', '\x3', '\x2', '\x2', '\x2', '\x11E', '\xCDD', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\xCEB', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\xCF8', '\x3', '\x2', '\x2', '\x2', '\x124', '\xCFA', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\xCFD', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\xD0E', '\x3', '\x2', '\x2', '\x2', '\x12A', '\xD2B', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\xD2F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\xD36', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\xD3C', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\xD3E', '\x3', '\x2', '\x2', '\x2', '\x134', '\xD72', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\xD74', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\xD76', '\x3', '\x2', '\x2', '\x2', '\x13A', '\xD78', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\xD7A', '\x3', '\x2', '\x2', '\x2', '\x13E', '\xD80', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\xD82', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\xD90', '\x3', '\x2', '\x2', '\x2', '\x144', '\xD9B', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\xDA7', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\xDA9', '\x3', '\x2', '\x2', '\x2', '\x14A', '\xDAD', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\xDB8', '\x3', '\x2', '\x2', '\x2', '\x14E', '\xDD0', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\xDD3', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\xDD5', '\x3', '\x2', '\x2', '\x2', '\x154', '\xDE0', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\xDE5', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\xDE8', '\x3', '\x2', '\x2', '\x2', '\x15A', '\xDF3', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\xDF7', '\x3', '\x2', '\x2', '\x2', '\x15E', '\xE02', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\xE05', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\xE0B', '\x3', '\x2', '\x2', '\x2', '\x164', '\xE12', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\xE1E', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\xE37', '\x3', '\x2', '\x2', '\x2', '\x16A', '\xE43', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\xE48', '\x3', '\x2', '\x2', '\x2', '\x16E', '\xE4F', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\xE5C', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\xE6B', '\x3', '\x2', '\x2', '\x2', '\x174', '\xE7B', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\xE7E', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\xEB5', '\x3', '\x2', '\x2', '\x2', '\x17A', '\xEB7', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\xEBB', '\x3', '\x2', '\x2', '\x2', '\x17E', '\xEC5', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\xEC9', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\xEDB', '\x3', '\x2', '\x2', '\x2', '\x184', '\xEDD', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\xEE6', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\xEF2', '\x3', '\x2', '\x2', '\x2', '\x18A', '\xEF4', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\xF13', '\x3', '\x2', '\x2', '\x2', '\x18E', '\xF15', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\xF35', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\xF4D', '\x3', '\x2', '\x2', '\x2', '\x194', '\xF4F', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\xF59', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\xF76', '\x3', '\x2', '\x2', '\x2', '\x19A', '\xF8E', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\xFA0', '\x3', '\x2', '\x2', '\x2', '\x19E', '\xFBE', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\xFCB', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\xFDC', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\xFFE', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1020', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x102B', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1036', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC', '\x1040', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1052', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1072', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2', '\x1092', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\x1094', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x109A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8', '\x10A0', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x10B5', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x10D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE', '\x10E5', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x10F3', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x110B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C4', '\x110D', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\x1146', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1148', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA', '\x1151', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1161', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1197', '\x3', '\x2', 
		'\x2', '\x2', '\x1D0', '\x1199', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x11B6', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x11B8', '\x3', '\x2', 
		'\x2', '\x2', '\x1D6', '\x11C0', '\x3', '\x2', '\x2', '\x2', '\x1D8', 
		'\x11C7', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x11EF', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC', '\x11F1', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'\x11FF', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x121A', '\x3', '\x2', 
		'\x2', '\x2', '\x1E2', '\x1222', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1229', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x122D', '\x3', '\x2', 
		'\x2', '\x2', '\x1E8', '\x1233', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1237', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x123A', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE', '\x1256', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x125A', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1277', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4', '\x1298', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\x129A', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x129D', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA', '\x12BC', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x12EC', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x130C', '\x3', '\x2', 
		'\x2', '\x2', '\x200', '\x1315', '\x3', '\x2', '\x2', '\x2', '\x202', 
		'\x131B', '\x3', '\x2', '\x2', '\x2', '\x204', '\x132A', '\x3', '\x2', 
		'\x2', '\x2', '\x206', '\x1339', '\x3', '\x2', '\x2', '\x2', '\x208', 
		'\x133E', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x1348', '\x3', '\x2', 
		'\x2', '\x2', '\x20C', '\x134A', '\x3', '\x2', '\x2', '\x2', '\x20E', 
		'\x136A', '\x3', '\x2', '\x2', '\x2', '\x210', '\x136E', '\x3', '\x2', 
		'\x2', '\x2', '\x212', '\x138B', '\x3', '\x2', '\x2', '\x2', '\x214', 
		'\x13A7', '\x3', '\x2', '\x2', '\x2', '\x216', '\x13A9', '\x3', '\x2', 
		'\x2', '\x2', '\x218', '\x13AD', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x13B2', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x13BB', '\x3', '\x2', 
		'\x2', '\x2', '\x21E', '\x13D8', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x13DF', '\x3', '\x2', '\x2', '\x2', '\x222', '\x13E8', '\x3', '\x2', 
		'\x2', '\x2', '\x224', '\x13F3', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\x13FA', '\x3', '\x2', '\x2', '\x2', '\x228', '\x13FE', '\x3', '\x2', 
		'\x2', '\x2', '\x22A', '\x1402', '\x3', '\x2', '\x2', '\x2', '\x22C', 
		'\x1406', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x140D', '\x3', '\x2', 
		'\x2', '\x2', '\x230', '\x1419', '\x3', '\x2', '\x2', '\x2', '\x232', 
		'\x1420', '\x3', '\x2', '\x2', '\x2', '\x234', '\x1423', '\x3', '\x2', 
		'\x2', '\x2', '\x236', '\x1429', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x1438', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x143B', '\x3', '\x2', 
		'\x2', '\x2', '\x23C', '\x143F', '\x3', '\x2', '\x2', '\x2', '\x23E', 
		'\x1444', '\x3', '\x2', '\x2', '\x2', '\x240', '\x1448', '\x3', '\x2', 
		'\x2', '\x2', '\x242', '\x1459', '\x3', '\x2', '\x2', '\x2', '\x244', 
		'\x145F', '\x3', '\x2', '\x2', '\x2', '\x246', '\x1469', '\x3', '\x2', 
		'\x2', '\x2', '\x248', '\x1476', '\x3', '\x2', '\x2', '\x2', '\x24A', 
		'\x147A', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x1488', '\x3', '\x2', 
		'\x2', '\x2', '\x24E', '\x148A', '\x3', '\x2', '\x2', '\x2', '\x250', 
		'\x1498', '\x3', '\x2', '\x2', '\x2', '\x252', '\x14A9', '\x3', '\x2', 
		'\x2', '\x2', '\x254', '\x14C2', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x14CC', '\x3', '\x2', '\x2', '\x2', '\x258', '\x14D0', '\x3', '\x2', 
		'\x2', '\x2', '\x25A', '\x14F3', '\x3', '\x2', '\x2', '\x2', '\x25C', 
		'\x14FE', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x1504', '\x3', '\x2', 
		'\x2', '\x2', '\x260', '\x150E', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x1515', '\x3', '\x2', '\x2', '\x2', '\x264', '\x1520', '\x3', '\x2', 
		'\x2', '\x2', '\x266', '\x152C', '\x3', '\x2', '\x2', '\x2', '\x268', 
		'\x153B', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x153F', '\x3', '\x2', 
		'\x2', '\x2', '\x26C', '\x1559', '\x3', '\x2', '\x2', '\x2', '\x26E', 
		'\x155C', '\x3', '\x2', '\x2', '\x2', '\x270', '\x1562', '\x3', '\x2', 
		'\x2', '\x2', '\x272', '\x1567', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x156F', '\x3', '\x2', '\x2', '\x2', '\x276', '\x1577', '\x3', '\x2', 
		'\x2', '\x2', '\x278', '\x157A', '\x3', '\x2', '\x2', '\x2', '\x27A', 
		'\x158A', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x158F', '\x3', '\x2', 
		'\x2', '\x2', '\x27E', '\x1593', '\x3', '\x2', '\x2', '\x2', '\x280', 
		'\x15BB', '\x3', '\x2', '\x2', '\x2', '\x282', '\x15BD', '\x3', '\x2', 
		'\x2', '\x2', '\x284', '\x15D3', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x15D5', '\x3', '\x2', '\x2', '\x2', '\x288', '\x15DA', '\x3', '\x2', 
		'\x2', '\x2', '\x28A', '\x15DC', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x15DE', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x15E0', '\x3', '\x2', 
		'\x2', '\x2', '\x290', '\x15E4', '\x3', '\x2', '\x2', '\x2', '\x292', 
		'\x15E9', '\x3', '\x2', '\x2', '\x2', '\x294', '\x15F2', '\x3', '\x2', 
		'\x2', '\x2', '\x296', '\x15F8', '\x3', '\x2', '\x2', '\x2', '\x298', 
		'\x1606', '\x3', '\x2', '\x2', '\x2', '\x29A', '\x161A', '\x3', '\x2', 
		'\x2', '\x2', '\x29C', '\x161F', '\x3', '\x2', '\x2', '\x2', '\x29E', 
		'\x162C', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x162E', '\x3', '\x2', 
		'\x2', '\x2', '\x2A2', '\x163C', '\x3', '\x2', '\x2', '\x2', '\x2A4', 
		'\x1645', '\x3', '\x2', '\x2', '\x2', '\x2A6', '\x164B', '\x3', '\x2', 
		'\x2', '\x2', '\x2A8', '\x164D', '\x3', '\x2', '\x2', '\x2', '\x2AA', 
		'\x1650', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x1659', '\x3', '\x2', 
		'\x2', '\x2', '\x2AE', '\x1671', '\x3', '\x2', '\x2', '\x2', '\x2B0', 
		'\x1680', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x1682', '\x3', '\x2', 
		'\x2', '\x2', '\x2B4', '\x1697', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x16A6', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\x16BC', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA', '\x16C3', '\x3', '\x2', '\x2', '\x2', '\x2BC', 
		'\x16D0', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x16D3', '\x3', '\x2', 
		'\x2', '\x2', '\x2C0', '\x16E8', '\x3', '\x2', '\x2', '\x2', '\x2C2', 
		'\x16F2', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x16FB', '\x3', '\x2', 
		'\x2', '\x2', '\x2C6', '\x170C', '\x3', '\x2', '\x2', '\x2', '\x2C8', 
		'\x1737', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x1745', '\x3', '\x2', 
		'\x2', '\x2', '\x2CC', '\x174D', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x1751', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x1770', '\x3', '\x2', 
		'\x2', '\x2', '\x2D2', '\x1774', '\x3', '\x2', '\x2', '\x2', '\x2D4', 
		'\x1781', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x1787', '\x3', '\x2', 
		'\x2', '\x2', '\x2D8', '\x178B', '\x3', '\x2', '\x2', '\x2', '\x2DA', 
		'\x1796', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x17B7', '\x3', '\x2', 
		'\x2', '\x2', '\x2DE', '\x17BA', '\x3', '\x2', '\x2', '\x2', '\x2E0', 
		'\x17CF', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x17D2', '\x3', '\x2', 
		'\x2', '\x2', '\x2E4', '\x17D5', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x17D9', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x17EC', '\x3', '\x2', 
		'\x2', '\x2', '\x2EA', '\x17EE', '\x3', '\x2', '\x2', '\x2', '\x2EC', 
		'\x17FF', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x1806', '\x3', '\x2', 
		'\x2', '\x2', '\x2F0', '\x180B', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x1822', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x182C', '\x3', '\x2', 
		'\x2', '\x2', '\x2F6', '\x182E', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x183C', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x184A', '\x3', '\x2', 
		'\x2', '\x2', '\x2FC', '\x186E', '\x3', '\x2', '\x2', '\x2', '\x2FE', 
		'\x1870', '\x3', '\x2', '\x2', '\x2', '\x300', '\x188E', '\x3', '\x2', 
		'\x2', '\x2', '\x302', '\x1893', '\x3', '\x2', '\x2', '\x2', '\x304', 
		'\x1895', '\x3', '\x2', '\x2', '\x2', '\x306', '\x18A1', '\x3', '\x2', 
		'\x2', '\x2', '\x308', '\x18B5', '\x3', '\x2', '\x2', '\x2', '\x30A', 
		'\x18B7', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x18BA', '\x3', '\x2', 
		'\x2', '\x2', '\x30E', '\x18D4', '\x3', '\x2', '\x2', '\x2', '\x310', 
		'\x18D6', '\x3', '\x2', '\x2', '\x2', '\x312', '\x18DA', '\x3', '\x2', 
		'\x2', '\x2', '\x314', '\x18E9', '\x3', '\x2', '\x2', '\x2', '\x316', 
		'\x18F5', '\x3', '\x2', '\x2', '\x2', '\x318', '\x18FD', '\x3', '\x2', 
		'\x2', '\x2', '\x31A', '\x1901', '\x3', '\x2', '\x2', '\x2', '\x31C', 
		'\x190E', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x1914', '\x3', '\x2', 
		'\x2', '\x2', '\x320', '\x1922', '\x3', '\x2', '\x2', '\x2', '\x322', 
		'\x1936', '\x3', '\x2', '\x2', '\x2', '\x324', '\x193F', '\x3', '\x2', 
		'\x2', '\x2', '\x326', '\x1941', '\x3', '\x2', '\x2', '\x2', '\x328', 
		'\x1948', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x194D', '\x3', '\x2', 
		'\x2', '\x2', '\x32C', '\x195A', '\x3', '\x2', '\x2', '\x2', '\x32E', 
		'\x1962', '\x3', '\x2', '\x2', '\x2', '\x330', '\x196A', '\x3', '\x2', 
		'\x2', '\x2', '\x332', '\x1972', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x1974', '\x3', '\x2', '\x2', '\x2', '\x336', '\x1980', '\x3', '\x2', 
		'\x2', '\x2', '\x338', '\x199A', '\x3', '\x2', '\x2', '\x2', '\x33A', 
		'\x199C', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x19AA', '\x3', '\x2', 
		'\x2', '\x2', '\x33E', '\x19AF', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x19C1', '\x3', '\x2', '\x2', '\x2', '\x342', '\x19C5', '\x3', '\x2', 
		'\x2', '\x2', '\x344', '\x19CD', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\x19D7', '\x3', '\x2', '\x2', '\x2', '\x348', '\x19DF', '\x3', '\x2', 
		'\x2', '\x2', '\x34A', '\x19E5', '\x3', '\x2', '\x2', '\x2', '\x34C', 
		'\x19EA', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x19F1', '\x3', '\x2', 
		'\x2', '\x2', '\x350', '\x1A0A', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x1A1D', '\x3', '\x2', '\x2', '\x2', '\x354', '\x1A21', '\x3', '\x2', 
		'\x2', '\x2', '\x356', '\x1A24', '\x3', '\x2', '\x2', '\x2', '\x358', 
		'\x1A3A', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x1A3F', '\x3', '\x2', 
		'\x2', '\x2', '\x35C', '\x1A52', '\x3', '\x2', '\x2', '\x2', '\x35E', 
		'\x1A54', '\x3', '\x2', '\x2', '\x2', '\x360', '\x1A64', '\x3', '\x2', 
		'\x2', '\x2', '\x362', '\x1A6C', '\x3', '\x2', '\x2', '\x2', '\x364', 
		'\x1A71', '\x3', '\x2', '\x2', '\x2', '\x366', '\x1A75', '\x3', '\x2', 
		'\x2', '\x2', '\x368', '\x1A80', '\x3', '\x2', '\x2', '\x2', '\x36A', 
		'\x1A83', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x1A95', '\x3', '\x2', 
		'\x2', '\x2', '\x36E', '\x1A97', '\x3', '\x2', '\x2', '\x2', '\x370', 
		'\x1AA6', '\x3', '\x2', '\x2', '\x2', '\x372', '\x1AB1', '\x3', '\x2', 
		'\x2', '\x2', '\x374', '\x1ABF', '\x3', '\x2', '\x2', '\x2', '\x376', 
		'\x1AC4', '\x3', '\x2', '\x2', '\x2', '\x378', '\x1AC6', '\x3', '\x2', 
		'\x2', '\x2', '\x37A', '\x1AD1', '\x3', '\x2', '\x2', '\x2', '\x37C', 
		'\x1AD3', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x1B00', '\x3', '\x2', 
		'\x2', '\x2', '\x380', '\x1B0D', '\x3', '\x2', '\x2', '\x2', '\x382', 
		'\x1B15', '\x3', '\x2', '\x2', '\x2', '\x384', '\x1B21', '\x3', '\x2', 
		'\x2', '\x2', '\x386', '\x1B33', '\x3', '\x2', '\x2', '\x2', '\x388', 
		'\x1B5C', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x1B5E', '\x3', '\x2', 
		'\x2', '\x2', '\x38C', '\x1B77', '\x3', '\x2', '\x2', '\x2', '\x38E', 
		'\x1B79', '\x3', '\x2', '\x2', '\x2', '\x390', '\x1B95', '\x3', '\x2', 
		'\x2', '\x2', '\x392', '\x1BAE', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'\x1BB0', '\x3', '\x2', '\x2', '\x2', '\x396', '\x1BC5', '\x3', '\x2', 
		'\x2', '\x2', '\x398', '\x1BE3', '\x3', '\x2', '\x2', '\x2', '\x39A', 
		'\x1BE7', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x1BEA', '\x3', '\x2', 
		'\x2', '\x2', '\x39E', '\x1BFD', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x1C05', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x1C17', '\x3', '\x2', 
		'\x2', '\x2', '\x3A4', '\x1C1E', '\x3', '\x2', '\x2', '\x2', '\x3A6', 
		'\x1C36', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x1C38', '\x3', '\x2', 
		'\x2', '\x2', '\x3AA', '\x1C53', '\x3', '\x2', '\x2', '\x2', '\x3AC', 
		'\x1C8B', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x1C8D', '\x3', '\x2', 
		'\x2', '\x2', '\x3B0', '\x1CCC', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x1CCE', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x1E21', '\x3', '\x2', 
		'\x2', '\x2', '\x3B6', '\x1E23', '\x3', '\x2', '\x2', '\x2', '\x3B8', 
		'\x1E25', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x1E27', '\x3', '\x2', 
		'\x2', '\x2', '\x3BC', '\x1E29', '\x3', '\x2', '\x2', '\x2', '\x3BE', 
		'\x1E36', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x1E3F', '\x3', '\x2', 
		'\x2', '\x2', '\x3C2', '\x1E48', '\x3', '\x2', '\x2', '\x2', '\x3C4', 
		'\x1E4A', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x1E5B', '\x3', '\x2', 
		'\x2', '\x2', '\x3C8', '\x1E61', '\x3', '\x2', '\x2', '\x2', '\x3CA', 
		'\x1E6C', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x1E6E', '\x3', '\x2', 
		'\x2', '\x2', '\x3CE', '\x1E86', '\x3', '\x2', '\x2', '\x2', '\x3D0', 
		'\x1E94', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x1EA6', '\x3', '\x2', 
		'\x2', '\x2', '\x3D4', '\x1EBB', '\x3', '\x2', '\x2', '\x2', '\x3D6', 
		'\x1EC8', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x1ECB', '\x3', '\x2', 
		'\x2', '\x2', '\x3DA', '\x1ED4', '\x3', '\x2', '\x2', '\x2', '\x3DC', 
		'\x1EDA', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x1EE2', '\x3', '\x2', 
		'\x2', '\x2', '\x3E0', '\x1EE5', '\x3', '\x2', '\x2', '\x2', '\x3E2', 
		'\x1EF0', '\x3', '\x2', '\x2', '\x2', '\x3E4', '\x1EFB', '\x3', '\x2', 
		'\x2', '\x2', '\x3E6', '\x1EFD', '\x3', '\x2', '\x2', '\x2', '\x3E8', 
		'\x1F00', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x1F09', '\x3', '\x2', 
		'\x2', '\x2', '\x3EC', '\x1F0E', '\x3', '\x2', '\x2', '\x2', '\x3EE', 
		'\x1F1B', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x1F1D', '\x3', '\x2', 
		'\x2', '\x2', '\x3F2', '\x1F26', '\x3', '\x2', '\x2', '\x2', '\x3F4', 
		'\x1F38', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x1F3C', '\x3', '\x2', 
		'\x2', '\x2', '\x3F8', '\x1F3E', '\x3', '\x2', '\x2', '\x2', '\x3FA', 
		'\x1F47', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x1F54', '\x3', '\x2', 
		'\x2', '\x2', '\x3FE', '\x1F56', '\x3', '\x2', '\x2', '\x2', '\x400', 
		'\x1F5B', '\x3', '\x2', '\x2', '\x2', '\x402', '\x1F5D', '\x3', '\x2', 
		'\x2', '\x2', '\x404', '\x1F63', '\x3', '\x2', '\x2', '\x2', '\x406', 
		'\x1F65', '\x3', '\x2', '\x2', '\x2', '\x408', '\x1F74', '\x3', '\x2', 
		'\x2', '\x2', '\x40A', '\x1F78', '\x3', '\x2', '\x2', '\x2', '\x40C', 
		'\x1F7C', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x1F7E', '\x3', '\x2', 
		'\x2', '\x2', '\x410', '\x1F80', '\x3', '\x2', '\x2', '\x2', '\x412', 
		'\x1F86', '\x3', '\x2', '\x2', '\x2', '\x414', '\x1F88', '\x3', '\x2', 
		'\x2', '\x2', '\x416', '\x1F8A', '\x3', '\x2', '\x2', '\x2', '\x418', 
		'\x1F8C', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x1F8E', '\x3', '\x2', 
		'\x2', '\x2', '\x41C', '\x1F90', '\x3', '\x2', '\x2', '\x2', '\x41E', 
		'\x1F92', '\x3', '\x2', '\x2', '\x2', '\x420', '\x1F94', '\x3', '\x2', 
		'\x2', '\x2', '\x422', '\x1F96', '\x3', '\x2', '\x2', '\x2', '\x424', 
		'\x1F98', '\x3', '\x2', '\x2', '\x2', '\x426', '\x1F9A', '\x3', '\x2', 
		'\x2', '\x2', '\x428', '\x1F9C', '\x3', '\x2', '\x2', '\x2', '\x42A', 
		'\x1F9E', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x1FA0', '\x3', '\x2', 
		'\x2', '\x2', '\x42E', '\x1FA2', '\x3', '\x2', '\x2', '\x2', '\x430', 
		'\x1FA7', '\x3', '\x2', '\x2', '\x2', '\x432', '\x1FA9', '\x3', '\x2', 
		'\x2', '\x2', '\x434', '\x1FAB', '\x3', '\x2', '\x2', '\x2', '\x436', 
		'\x1FAD', '\x3', '\x2', '\x2', '\x2', '\x438', '\x1FAF', '\x3', '\x2', 
		'\x2', '\x2', '\x43A', '\x1FB1', '\x3', '\x2', '\x2', '\x2', '\x43C', 
		'\x1FB3', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x1FB5', '\x3', '\x2', 
		'\x2', '\x2', '\x440', '\x1FCF', '\x3', '\x2', '\x2', '\x2', '\x442', 
		'\x1FD5', '\x3', '\x2', '\x2', '\x2', '\x444', '\x1FD9', '\x3', '\x2', 
		'\x2', '\x2', '\x446', '\x1FDD', '\x3', '\x2', '\x2', '\x2', '\x448', 
		'\x1FE6', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x1FF7', '\x3', '\x2', 
		'\x2', '\x2', '\x44C', '\x201E', '\x3', '\x2', '\x2', '\x2', '\x44E', 
		'\x2029', '\x3', '\x2', '\x2', '\x2', '\x450', '\x204A', '\x3', '\x2', 
		'\x2', '\x2', '\x452', '\x204C', '\x3', '\x2', '\x2', '\x2', '\x454', 
		'\x2093', '\x3', '\x2', '\x2', '\x2', '\x456', '\x2098', '\x3', '\x2', 
		'\x2', '\x2', '\x458', '\x20AB', '\x3', '\x2', '\x2', '\x2', '\x45A', 
		'\x20B5', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x20C4', '\x3', '\x2', 
		'\x2', '\x2', '\x45E', '\x20E9', '\x3', '\x2', '\x2', '\x2', '\x460', 
		'\x2231', '\x3', '\x2', '\x2', '\x2', '\x462', '\x2235', '\x3', '\x2', 
		'\x2', '\x2', '\x464', '\x223A', '\x3', '\x2', '\x2', '\x2', '\x466', 
		'\x227A', '\x3', '\x2', '\x2', '\x2', '\x468', '\x227E', '\x3', '\x2', 
		'\x2', '\x2', '\x46A', '\x2282', '\x3', '\x2', '\x2', '\x2', '\x46C', 
		'\x2284', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x2286', '\x3', '\x2', 
		'\x2', '\x2', '\x470', '\x2288', '\x3', '\x2', '\x2', '\x2', '\x472', 
		'\x228A', '\x3', '\x2', '\x2', '\x2', '\x474', '\x228C', '\x3', '\x2', 
		'\x2', '\x2', '\x476', '\x228E', '\x3', '\x2', '\x2', '\x2', '\x478', 
		'\x2290', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x2292', '\x3', '\x2', 
		'\x2', '\x2', '\x47C', '\x2294', '\x3', '\x2', '\x2', '\x2', '\x47E', 
		'\x2296', '\x3', '\x2', '\x2', '\x2', '\x480', '\x2298', '\x3', '\x2', 
		'\x2', '\x2', '\x482', '\x229A', '\x3', '\x2', '\x2', '\x2', '\x484', 
		'\x229C', '\x3', '\x2', '\x2', '\x2', '\x486', '\x22A4', '\x3', '\x2', 
		'\x2', '\x2', '\x488', '\x22A6', '\x3', '\x2', '\x2', '\x2', '\x48A', 
		'\x22A8', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x22AC', '\x3', '\x2', 
		'\x2', '\x2', '\x48E', '\x22AE', '\x3', '\x2', '\x2', '\x2', '\x490', 
		'\x22B6', '\x3', '\x2', '\x2', '\x2', '\x492', '\x22B8', '\x3', '\x2', 
		'\x2', '\x2', '\x494', '\x22BA', '\x3', '\x2', '\x2', '\x2', '\x496', 
		'\x22BC', '\x3', '\x2', '\x2', '\x2', '\x498', '\x22C0', '\x3', '\x2', 
		'\x2', '\x2', '\x49A', '\x22C2', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x22C4', '\x3', '\x2', '\x2', '\x2', '\x49E', '\x22C8', '\x3', '\x2', 
		'\x2', '\x2', '\x4A0', '\x22CF', '\x3', '\x2', '\x2', '\x2', '\x4A2', 
		'\x22D1', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x22D4', '\x3', '\x2', 
		'\x2', '\x2', '\x4A6', '\x4A9', '\x5', '\x4', '\x3', '\x2', '\x4A7', '\x4A9', 
		'\x5', '\x3E4', '\x1F3', '\x2', '\x4A8', '\x4A6', '\x3', '\x2', '\x2', 
		'\x2', '\x4A8', '\x4A7', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4AB', 
		'\x3', '\x2', '\x2', '\x2', '\x4AA', '\x4AC', '\a', '\x300', '\x2', '\x2', 
		'\x4AB', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AC', '\x3', 
		'\x2', '\x2', '\x2', '\x4AC', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4AD', 
		'\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4B1', '\x3', '\x2', '\x2', 
		'\x2', '\x4AF', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B0', 
		'\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4B2', '\x3', '\x2', '\x2', '\x2', 
		'\x4B1', '\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B3', '\a', 
		'\x2', '\x2', '\x3', '\x4B3', '\x3', '\x3', '\x2', '\x2', '\x2', '\x4B4', 
		'\x4D9', '\x5', '\x2B0', '\x159', '\x2', '\x4B5', '\x4D9', '\x5', '\b', 
		'\x5', '\x2', '\x4B6', '\x4D9', '\x5', '\x18', '\r', '\x2', '\x4B7', '\x4D9', 
		'\x5', '(', '\x15', '\x2', '\x4B8', '\x4D9', '\x5', '\xA4', 'S', '\x2', 
		'\x4B9', '\x4D9', '\x5', '\x32', '\x1A', '\x2', '\x4BA', '\x4D9', '\x5', 
		'X', '-', '\x2', '\x4BB', '\x4D9', '\x5', '\x220', '\x111', '\x2', '\x4BC', 
		'\x4D9', '\x5', '\xAC', 'W', '\x2', '\x4BD', '\x4D9', '\x5', '\xB0', 'Y', 
		'\x2', '\x4BE', '\x4D9', '\x5', '\n', '\x6', '\x2', '\x4BF', '\x4D9', 
		'\x5', '.', '\x18', '\x2', '\x4C0', '\x4D9', '\x5', '\x1A', '\xE', '\x2', 
		'\x4C1', '\x4D9', '\x5', '\x1C', '\xF', '\x2', '\x4C2', '\x4D9', '\x5', 
		'\xAA', 'V', '\x2', '\x4C3', '\x4D9', '\x5', '\x16E', '\xB8', '\x2', '\x4C4', 
		'\x4D9', '\x5', '\x14A', '\xA6', '\x2', '\x4C5', '\x4D9', '\x5', '\xAE', 
		'X', '\x2', '\x4C6', '\x4D9', '\x5', '\xA6', 'T', '\x2', '\x4C7', '\x4D9', 
		'\x5', '\x34', '\x1B', '\x2', '\x4C8', '\x4D9', '\x5', 'l', '\x37', '\x2', 
		'\x4C9', '\x4D9', '\x5', '\x21C', '\x10F', '\x2', '\x4CA', '\x4D9', '\x5', 
		'\x6', '\x4', '\x2', '\x4CB', '\x4D9', '\x5', '\x16', '\f', '\x2', '\x4CC', 
		'\x4D9', '\x5', '&', '\x14', '\x2', '\x4CD', '\x4D9', '\x5', '\xA2', 'R', 
		'\x2', '\x4CE', '\x4D9', '\x5', '\x30', '\x19', '\x2', '\x4CF', '\x4D9', 
		'\x5', 'V', ',', '\x2', '\x4D0', '\x4D9', '\x5', '\x2A4', '\x153', '\x2', 
		'\x4D1', '\x4D9', '\x5', '\x218', '\x10D', '\x2', '\x4D2', '\x4D9', '\x5', 
		'\xD4', 'k', '\x2', '\x4D3', '\x4D9', '\x5', '\x21A', '\x10E', '\x2', 
		'\x4D4', '\x4D9', '\x5', '\x21E', '\x110', '\x2', '\x4D5', '\x4D9', '\x5', 
		'\x236', '\x11C', '\x2', '\x4D6', '\x4D9', '\x5', '\xDC', 'o', '\x2', 
		'\x4D7', '\x4D9', '\x5', '\xD6', 'l', '\x2', '\x4D8', '\x4B4', '\x3', 
		'\x2', '\x2', '\x2', '\x4D8', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4D8', 
		'\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4B7', '\x3', '\x2', '\x2', 
		'\x2', '\x4D8', '\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4B9', 
		'\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4BA', '\x3', '\x2', '\x2', '\x2', 
		'\x4D8', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4BC', '\x3', 
		'\x2', '\x2', '\x2', '\x4D8', '\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4D8', 
		'\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4BF', '\x3', '\x2', '\x2', 
		'\x2', '\x4D8', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4C1', 
		'\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4C2', '\x3', '\x2', '\x2', '\x2', 
		'\x4D8', '\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x4D8', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4D8', 
		'\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4C7', '\x3', '\x2', '\x2', 
		'\x2', '\x4D8', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4C9', 
		'\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4CA', '\x3', '\x2', '\x2', '\x2', 
		'\x4D8', '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4CC', '\x3', 
		'\x2', '\x2', '\x2', '\x4D8', '\x4CD', '\x3', '\x2', '\x2', '\x2', '\x4D8', 
		'\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4CF', '\x3', '\x2', '\x2', 
		'\x2', '\x4D8', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D1', 
		'\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D2', '\x3', '\x2', '\x2', '\x2', 
		'\x4D8', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D4', '\x3', 
		'\x2', '\x2', '\x2', '\x4D8', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D8', 
		'\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D7', '\x3', '\x2', '\x2', 
		'\x2', '\x4D9', '\x5', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4DB', '\a', 
		'\xA4', '\x2', '\x2', '\x4DB', '\x4DC', '\a', '\xE2', '\x2', '\x2', '\x4DC', 
		'\x4DD', '\x5', '\x434', '\x21B', '\x2', '\x4DD', '\x4DE', '\a', '\x300', 
		'\x2', '\x2', '\x4DE', '\a', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', 
		'\a', '\x10', '\x2', '\x2', '\x4E0', '\x4E1', '\a', '\xE2', '\x2', '\x2', 
		'\x4E1', '\x4E2', '\x5', '\x434', '\x21B', '\x2', '\x4E2', '\x4E4', '\a', 
		'^', '\x2', '\x2', '\x4E3', '\x4E5', '\a', '\x86', '\x2', '\x2', '\x4E4', 
		'\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', '\x3', '\x2', '\x2', 
		'\x2', '\x4E5', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E8', 
		'\x5', '\x23A', '\x11E', '\x2', '\x4E7', '\x4E6', '\x3', '\x2', '\x2', 
		'\x2', '\x4E8', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4E7', 
		'\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4EA', '\x3', '\x2', '\x2', '\x2', 
		'\x4EA', '\x4EE', '\x3', '\x2', '\x2', '\x2', '\x4EB', '\x4E9', '\x3', 
		'\x2', '\x2', '\x2', '\x4EC', '\x4ED', '\a', '\x1FA', '\x2', '\x2', '\x4ED', 
		'\x4EF', '\a', '\x221', '\x2', '\x2', '\x4EE', '\x4EC', '\x3', '\x2', 
		'\x2', '\x2', '\x4EE', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x4EF', '\x4F0', 
		'\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4F1', '\a', '\x300', '\x2', '\x2', 
		'\x4F1', '\t', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F5', '\a', 'r', 
		'\x2', '\x2', '\x4F3', '\x4F4', '\a', '\x1A1', '\x2', '\x2', '\x4F4', 
		'\x4F6', '\a', '\x1EE', '\x2', '\x2', '\x4F5', '\x4F3', '\x3', '\x2', 
		'\x2', '\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x4F7', 
		'\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4F8', '\a', '\xE2', '\x2', '\x2', 
		'\x4F8', '\x504', '\x5', '\x434', '\x21B', '\x2', '\x4F9', '\x4FE', '\a', 
		'\x2EE', '\x2', '\x2', '\x4FA', '\x4FC', '\a', '\x2F4', '\x2', '\x2', 
		'\x4FB', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\x3', 
		'\x2', '\x2', '\x2', '\x4FC', '\x4FD', '\x3', '\x2', '\x2', '\x2', '\x4FD', 
		'\x4FF', '\x5', '\x246', '\x124', '\x2', '\x4FE', '\x4FB', '\x3', '\x2', 
		'\x2', '\x2', '\x4FF', '\x500', '\x3', '\x2', '\x2', '\x2', '\x500', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\x500', '\x501', '\x3', '\x2', '\x2', '\x2', 
		'\x501', '\x502', '\x3', '\x2', '\x2', '\x2', '\x502', '\x503', '\a', 
		'\x2EF', '\x2', '\x2', '\x503', '\x505', '\x3', '\x2', '\x2', '\x2', '\x504', 
		'\x4F9', '\x3', '\x2', '\x2', '\x2', '\x504', '\x505', '\x3', '\x2', '\x2', 
		'\x2', '\x505', '\x506', '\x3', '\x2', '\x2', '\x2', '\x506', '\x507', 
		'\a', '\x1F9', '\x2', '\x2', '\x507', '\x50E', '\x5', '\x44E', '\x228', 
		'\x2', '\x508', '\x50D', '\x5', '\x238', '\x11D', '\x2', '\x509', '\x50D', 
		'\x5', '\f', '\a', '\x2', '\x50A', '\x50D', '\x5', '\x10', '\t', '\x2', 
		'\x50B', '\x50D', '\a', '\x97', '\x2', '\x2', '\x50C', '\x508', '\x3', 
		'\x2', '\x2', '\x2', '\x50C', '\x509', '\x3', '\x2', '\x2', '\x2', '\x50C', 
		'\x50A', '\x3', '\x2', '\x2', '\x2', '\x50C', '\x50B', '\x3', '\x2', '\x2', 
		'\x2', '\x50D', '\x510', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x50C', 
		'\x3', '\x2', '\x2', '\x2', '\x50E', '\x50F', '\x3', '\x2', '\x2', '\x2', 
		'\x50F', '\x522', '\x3', '\x2', '\x2', '\x2', '\x510', '\x50E', '\x3', 
		'\x2', '\x2', '\x2', '\x511', '\x513', '\a', '\x1BF', '\x2', '\x2', '\x512', 
		'\x511', '\x3', '\x2', '\x2', '\x2', '\x512', '\x513', '\x3', '\x2', '\x2', 
		'\x2', '\x513', '\x514', '\x3', '\x2', '\x2', '\x2', '\x514', '\x51D', 
		'\t', '\x2', '\x2', '\x2', '\x515', '\x517', '\a', '\x89', '\x2', '\x2', 
		'\x516', '\x515', '\x3', '\x2', '\x2', '\x2', '\x516', '\x517', '\x3', 
		'\x2', '\x2', '\x2', '\x517', '\x519', '\x3', '\x2', '\x2', '\x2', '\x518', 
		'\x51A', '\x5', '\x24A', '\x126', '\x2', '\x519', '\x518', '\x3', '\x2', 
		'\x2', '\x2', '\x519', '\x51A', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x51B', 
		'\x3', '\x2', '\x2', '\x2', '\x51B', '\x51E', '\x5', '\x296', '\x14C', 
		'\x2', '\x51C', '\x51E', '\x5', '\x23C', '\x11F', '\x2', '\x51D', '\x516', 
		'\x3', '\x2', '\x2', '\x2', '\x51D', '\x51C', '\x3', '\x2', '\x2', '\x2', 
		'\x51E', '\x523', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x520', '\t', 
		'\x3', '\x2', '\x2', '\x520', '\x521', '\a', '\x28A', '\x2', '\x2', '\x521', 
		'\x523', '\x5', '\x430', '\x219', '\x2', '\x522', '\x512', '\x3', '\x2', 
		'\x2', '\x2', '\x522', '\x51F', '\x3', '\x2', '\x2', '\x2', '\x523', '\x524', 
		'\x3', '\x2', '\x2', '\x2', '\x524', '\x525', '\a', '\x300', '\x2', '\x2', 
		'\x525', '\v', '\x3', '\x2', '\x2', '\x2', '\x526', '\x528', '\a', '\x1AA', 
		'\x2', '\x2', '\x527', '\x529', '\x5', '\xE', '\b', '\x2', '\x528', '\x527', 
		'\x3', '\x2', '\x2', '\x2', '\x528', '\x529', '\x3', '\x2', '\x2', '\x2', 
		'\x529', '\r', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x52B', '\a', '\x2EE', 
		'\x2', '\x2', '\x52B', '\x52C', '\a', '\x1AF', '\x2', '\x2', '\x52C', 
		'\x52D', '\x5', '\x37A', '\x1BE', '\x2', '\x52D', '\x531', '\a', '?', 
		'\x2', '\x2', '\x52E', '\x532', '\a', '\x14', '\x2', '\x2', '\x52F', '\x530', 
		'\t', '\x4', '\x2', '\x2', '\x530', '\x532', '\x5', '\x444', '\x223', 
		'\x2', '\x531', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x531', '\x52F', 
		'\x3', '\x2', '\x2', '\x2', '\x532', '\x534', '\x3', '\x2', '\x2', '\x2', 
		'\x533', '\x535', '\x5', '\x14', '\v', '\x2', '\x534', '\x533', '\x3', 
		'\x2', '\x2', '\x2', '\x534', '\x535', '\x3', '\x2', '\x2', '\x2', '\x535', 
		'\x536', '\x3', '\x2', '\x2', '\x2', '\x536', '\x537', '\a', '\x2EF', 
		'\x2', '\x2', '\x537', '\xF', '\x3', '\x2', '\x2', '\x2', '\x538', '\x53A', 
		'\a', '\x1F4', '\x2', '\x2', '\x539', '\x53B', '\x5', '\x12', '\n', '\x2', 
		'\x53A', '\x539', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x53B', '\x3', 
		'\x2', '\x2', '\x2', '\x53B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x53C', 
		'\x53D', '\a', '\x1EA', '\x2', '\x2', '\x53D', '\x53E', '\a', '\x2EE', 
		'\x2', '\x2', '\x53E', '\x543', '\x5', '\x410', '\x209', '\x2', '\x53F', 
		'\x540', '\a', '\x2F4', '\x2', '\x2', '\x540', '\x542', '\x5', '\x410', 
		'\x209', '\x2', '\x541', '\x53F', '\x3', '\x2', '\x2', '\x2', '\x542', 
		'\x545', '\x3', '\x2', '\x2', '\x2', '\x543', '\x541', '\x3', '\x2', '\x2', 
		'\x2', '\x543', '\x544', '\x3', '\x2', '\x2', '\x2', '\x544', '\x546', 
		'\x3', '\x2', '\x2', '\x2', '\x545', '\x543', '\x3', '\x2', '\x2', '\x2', 
		'\x546', '\x547', '\a', '\x2EF', '\x2', '\x2', '\x547', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x548', '\x549', '\t', '\x5', '\x2', '\x2', '\x549', 
		'\x54A', '\x5', '\x37A', '\x1BE', '\x2', '\x54A', '\x54B', '\a', '?', 
		'\x2', '\x2', '\x54B', '\x54C', '\x5', '\x444', '\x223', '\x2', '\x54C', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x54D', '\x54E', '\a', '\xA4', '\x2', 
		'\x2', '\x54E', '\x550', '\a', '\x1A9', '\x2', '\x2', '\x54F', '\x551', 
		'\a', '\x38', '\x2', '\x2', '\x550', '\x54F', '\x3', '\x2', '\x2', '\x2', 
		'\x550', '\x551', '\x3', '\x2', '\x2', '\x2', '\x551', '\x555', '\x3', 
		'\x2', '\x2', '\x2', '\x552', '\x553', '\x5', '\x426', '\x214', '\x2', 
		'\x553', '\x554', '\a', '\x2E7', '\x2', '\x2', '\x554', '\x556', '\x3', 
		'\x2', '\x2', '\x2', '\x555', '\x552', '\x3', '\x2', '\x2', '\x2', '\x555', 
		'\x556', '\x3', '\x2', '\x2', '\x2', '\x556', '\x557', '\x3', '\x2', '\x2', 
		'\x2', '\x557', '\x558', '\x5', '\x46C', '\x237', '\x2', '\x558', '\x559', 
		'\a', '\x300', '\x2', '\x2', '\x559', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x55A', '\x55B', '\a', '\x10', '\x2', '\x2', '\x55B', '\x55C', '\a', 
		'\x1A9', '\x2', '\x2', '\x55C', '\x55D', '\x5', '\x46C', '\x237', '\x2', 
		'\x55D', '\x55F', '\a', '^', '\x2', '\x2', '\x55E', '\x560', '\a', '\x86', 
		'\x2', '\x2', '\x55F', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', 
		'\x3', '\x2', '\x2', '\x2', '\x560', '\x562', '\x3', '\x2', '\x2', '\x2', 
		'\x561', '\x563', '\t', '\x6', '\x2', '\x2', '\x562', '\x561', '\x3', 
		'\x2', '\x2', '\x2', '\x562', '\x563', '\x3', '\x2', '\x2', '\x2', '\x563', 
		'\x567', '\x3', '\x2', '\x2', '\x2', '\x564', '\x566', '\x5', '\x23A', 
		'\x11E', '\x2', '\x565', '\x564', '\x3', '\x2', '\x2', '\x2', '\x566', 
		'\x569', '\x3', '\x2', '\x2', '\x2', '\x567', '\x565', '\x3', '\x2', '\x2', 
		'\x2', '\x567', '\x568', '\x3', '\x2', '\x2', '\x2', '\x568', '\x56C', 
		'\x3', '\x2', '\x2', '\x2', '\x569', '\x567', '\x3', '\x2', '\x2', '\x2', 
		'\x56A', '\x56B', '\a', '\x1FA', '\x2', '\x2', '\x56B', '\x56D', '\a', 
		'\x221', '\x2', '\x2', '\x56C', '\x56A', '\x3', '\x2', '\x2', '\x2', '\x56C', 
		'\x56D', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56E', '\x3', '\x2', '\x2', 
		'\x2', '\x56E', '\x56F', '\a', '\x300', '\x2', '\x2', '\x56F', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x570', '\x573', '\a', 'r', '\x2', '\x2', 
		'\x571', '\x572', '\a', '\x1A1', '\x2', '\x2', '\x572', '\x574', '\a', 
		'\x1EE', '\x2', '\x2', '\x573', '\x571', '\x3', '\x2', '\x2', '\x2', '\x573', 
		'\x574', '\x3', '\x2', '\x2', '\x2', '\x574', '\x575', '\x3', '\x2', '\x2', 
		'\x2', '\x575', '\x579', '\a', '\x1A9', '\x2', '\x2', '\x576', '\x577', 
		'\x5', '\x426', '\x214', '\x2', '\x577', '\x578', '\a', '\x2E7', '\x2', 
		'\x2', '\x578', '\x57A', '\x3', '\x2', '\x2', '\x2', '\x579', '\x576', 
		'\x3', '\x2', '\x2', '\x2', '\x579', '\x57A', '\x3', '\x2', '\x2', '\x2', 
		'\x57A', '\x57B', '\x3', '\x2', '\x2', '\x2', '\x57B', '\x57D', '\x5', 
		'\x46C', '\x237', '\x2', '\x57C', '\x57E', '\x5', '\x238', '\x11D', '\x2', 
		'\x57D', '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57D', '\x57E', '\x3', 
		'\x2', '\x2', '\x2', '\x57E', '\x57F', '\x3', '\x2', '\x2', '\x2', '\x57F', 
		'\x583', '\t', '\x2', '\x2', '\x2', '\x580', '\x582', '\x5', '\x1E', '\x10', 
		'\x2', '\x581', '\x580', '\x3', '\x2', '\x2', '\x2', '\x582', '\x585', 
		'\x3', '\x2', '\x2', '\x2', '\x583', '\x581', '\x3', '\x2', '\x2', '\x2', 
		'\x583', '\x584', '\x3', '\x2', '\x2', '\x2', '\x584', '\x586', '\x3', 
		'\x2', '\x2', '\x2', '\x585', '\x583', '\x3', '\x2', '\x2', '\x2', '\x586', 
		'\x588', '\a', '\xB4', '\x2', '\x2', '\x587', '\x589', '\x5', '\x46C', 
		'\x237', '\x2', '\x588', '\x587', '\x3', '\x2', '\x2', '\x2', '\x588', 
		'\x589', '\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\x3', '\x2', '\x2', 
		'\x2', '\x58A', '\x58B', '\a', '\x300', '\x2', '\x2', '\x58B', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x58C', '\x58F', '\a', 'r', '\x2', '\x2', 
		'\x58D', '\x58E', '\a', '\x1A1', '\x2', '\x2', '\x58E', '\x590', '\a', 
		'\x1EE', '\x2', '\x2', '\x58F', '\x58D', '\x3', '\x2', '\x2', '\x2', '\x58F', 
		'\x590', '\x3', '\x2', '\x2', '\x2', '\x590', '\x591', '\x3', '\x2', '\x2', 
		'\x2', '\x591', '\x592', '\a', '\x1A9', '\x2', '\x2', '\x592', '\x596', 
		'\a', '\x38', '\x2', '\x2', '\x593', '\x594', '\x5', '\x426', '\x214', 
		'\x2', '\x594', '\x595', '\a', '\x2E7', '\x2', '\x2', '\x595', '\x597', 
		'\x3', '\x2', '\x2', '\x2', '\x596', '\x593', '\x3', '\x2', '\x2', '\x2', 
		'\x596', '\x597', '\x3', '\x2', '\x2', '\x2', '\x597', '\x598', '\x3', 
		'\x2', '\x2', '\x2', '\x598', '\x599', '\x5', '\x46C', '\x237', '\x2', 
		'\x599', '\x59D', '\t', '\x2', '\x2', '\x2', '\x59A', '\x59C', '\x5', 
		'$', '\x13', '\x2', '\x59B', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x59C', 
		'\x59F', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x59B', '\x3', '\x2', '\x2', 
		'\x2', '\x59D', '\x59E', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x5A2', 
		'\x3', '\x2', '\x2', '\x2', '\x59F', '\x59D', '\x3', '\x2', '\x2', '\x2', 
		'\x5A0', '\x5A1', '\a', '-', '\x2', '\x2', '\x5A1', '\x5A3', '\x5', '\x268', 
		'\x135', '\x2', '\x5A2', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x5A2', 
		'\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A4', '\x3', '\x2', '\x2', 
		'\x2', '\x5A4', '\x5A6', '\a', '\xB4', '\x2', '\x2', '\x5A5', '\x5A7', 
		'\x5', '\x46C', '\x237', '\x2', '\x5A6', '\x5A5', '\x3', '\x2', '\x2', 
		'\x2', '\x5A6', '\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A8', 
		'\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5A9', '\a', '\x300', '\x2', '\x2', 
		'\x5A9', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\x5B3', '\x5', 
		'\x24E', '\x128', '\x2', '\x5AB', '\x5B3', '\x5', '\x250', '\x129', '\x2', 
		'\x5AC', '\x5B3', '\x5', '\x252', '\x12A', '\x2', '\x5AD', '\x5B3', '\x5', 
		'\x256', '\x12C', '\x2', '\x5AE', '\x5B3', '\x5', '\x258', '\x12D', '\x2', 
		'\x5AF', '\x5B3', '\x5', '\x25A', '\x12E', '\x2', '\x5B0', '\x5B3', '\x5', 
		' ', '\x11', '\x2', '\x5B1', '\x5B3', '\x5', '\"', '\x12', '\x2', '\x5B2', 
		'\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5AB', '\x3', '\x2', '\x2', 
		'\x2', '\x5B2', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5AD', 
		'\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5AE', '\x3', '\x2', '\x2', '\x2', 
		'\x5B2', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\x5B2', '\x5B0', '\x3', 
		'\x2', '\x2', '\x2', '\x5B2', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\x5B3', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B5', '\a', '\x1D2', '\x2', 
		'\x2', '\x5B5', '\x5C1', '\x5', '\x468', '\x235', '\x2', '\x5B6', '\x5B7', 
		'\a', '\x2EE', '\x2', '\x2', '\x5B7', '\x5BC', '\x5', '\x246', '\x124', 
		'\x2', '\x5B8', '\x5B9', '\a', '\x2F4', '\x2', '\x2', '\x5B9', '\x5BB', 
		'\x5', '\x246', '\x124', '\x2', '\x5BA', '\x5B8', '\x3', '\x2', '\x2', 
		'\x2', '\x5BB', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BA', 
		'\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BD', '\x3', '\x2', '\x2', '\x2', 
		'\x5BD', '\x5BF', '\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5BC', '\x3', 
		'\x2', '\x2', '\x2', '\x5BF', '\x5C0', '\a', '\x2EF', '\x2', '\x2', '\x5C0', 
		'\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5B6', '\x3', '\x2', '\x2', 
		'\x2', '\x5C1', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C3', 
		'\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C4', '\a', '\x300', '\x2', '\x2', 
		'\x5C4', '!', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\a', '\xE2', 
		'\x2', '\x2', '\x5C6', '\x5D2', '\x5', '\x468', '\x235', '\x2', '\x5C7', 
		'\x5C8', '\a', '\x2EE', '\x2', '\x2', '\x5C8', '\x5CD', '\x5', '\x246', 
		'\x124', '\x2', '\x5C9', '\x5CA', '\a', '\x2F4', '\x2', '\x2', '\x5CA', 
		'\x5CC', '\x5', '\x246', '\x124', '\x2', '\x5CB', '\x5C9', '\x3', '\x2', 
		'\x2', '\x2', '\x5CC', '\x5CF', '\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CB', 
		'\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CE', '\x3', '\x2', '\x2', '\x2', 
		'\x5CE', '\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5CD', '\x3', 
		'\x2', '\x2', '\x2', '\x5D0', '\x5D1', '\a', '\x2EF', '\x2', '\x2', '\x5D1', 
		'\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x5C7', '\x3', '\x2', '\x2', 
		'\x2', '\x5D2', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5D3', '\x5D4', 
		'\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D5', '\a', '\x1F9', '\x2', '\x2', 
		'\x5D5', '\x5D7', '\x5', '\x44E', '\x228', '\x2', '\x5D6', '\x5D8', '\a', 
		'\x97', '\x2', '\x2', '\x5D7', '\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D7', 
		'\x5D8', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5DA', '\x3', '\x2', '\x2', 
		'\x2', '\x5D9', '\x5DB', '\a', '\x1F4', '\x2', '\x2', '\x5DA', '\x5D9', 
		'\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DB', '\x3', '\x2', '\x2', '\x2', 
		'\x5DB', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DD', '\a', 
		'\x300', '\x2', '\x2', '\x5DD', '#', '\x3', '\x2', '\x2', '\x2', '\x5DE', 
		'\x5E8', '\x5', '\x24E', '\x128', '\x2', '\x5DF', '\x5E8', '\x5', '\x250', 
		'\x129', '\x2', '\x5E0', '\x5E8', '\x5', '\x252', '\x12A', '\x2', '\x5E1', 
		'\x5E8', '\x5', '\x256', '\x12C', '\x2', '\x5E2', '\x5E8', '\x5', '\x25A', 
		'\x12E', '\x2', '\x5E3', '\x5E8', '\x5', ',', '\x17', '\x2', '\x5E4', 
		'\x5E8', '\x5', '*', '\x16', '\x2', '\x5E5', '\x5E8', '\x5', ' ', '\x11', 
		'\x2', '\x5E6', '\x5E8', '\x5', '\"', '\x12', '\x2', '\x5E7', '\x5DE', 
		'\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5DF', '\x3', '\x2', '\x2', '\x2', 
		'\x5E7', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E1', '\x3', 
		'\x2', '\x2', '\x2', '\x5E7', '\x5E2', '\x3', '\x2', '\x2', '\x2', '\x5E7', 
		'\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E4', '\x3', '\x2', '\x2', 
		'\x2', '\x5E7', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E6', 
		'\x3', '\x2', '\x2', '\x2', '\x5E8', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5EA', '\a', '\xA4', '\x2', '\x2', '\x5EA', '\x5EB', '\a', 
		'\x1D2', '\x2', '\x2', '\x5EB', '\x5EC', '\x5', '\x436', '\x21C', '\x2', 
		'\x5EC', '\x5ED', '\a', '\x300', '\x2', '\x2', '\x5ED', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x5EE', '\x5EF', '\a', '\x10', '\x2', '\x2', '\x5EF', '\x5F0', 
		'\a', '\x1D2', '\x2', '\x2', '\x5F0', '\x5F1', '\x5', '\x436', '\x21C', 
		'\x2', '\x5F1', '\x5F3', '\a', '^', '\x2', '\x2', '\x5F2', '\x5F4', '\a', 
		'\x86', '\x2', '\x2', '\x5F3', '\x5F2', '\x3', '\x2', '\x2', '\x2', '\x5F3', 
		'\x5F4', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F8', '\x3', '\x2', '\x2', 
		'\x2', '\x5F5', '\x5F7', '\x5', '\x23A', '\x11E', '\x2', '\x5F6', '\x5F5', 
		'\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5FA', '\x3', '\x2', '\x2', '\x2', 
		'\x5F8', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5F9', '\x3', 
		'\x2', '\x2', '\x2', '\x5F9', '\x5FD', '\x3', '\x2', '\x2', '\x2', '\x5FA', 
		'\x5F8', '\x3', '\x2', '\x2', '\x2', '\x5FB', '\x5FC', '\a', '\x1FA', 
		'\x2', '\x2', '\x5FC', '\x5FE', '\a', '\x221', '\x2', '\x2', '\x5FD', 
		'\x5FB', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FE', '\x3', '\x2', '\x2', 
		'\x2', '\x5FE', '\x5FF', '\x3', '\x2', '\x2', '\x2', '\x5FF', '\x600', 
		'\a', '\x300', '\x2', '\x2', '\x600', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x601', '\x602', '\a', '\xE2', '\x2', '\x2', '\x602', '\x60E', '\x5', 
		'\x434', '\x21B', '\x2', '\x603', '\x604', '\a', '\x2EE', '\x2', '\x2', 
		'\x604', '\x609', '\x5', '\x246', '\x124', '\x2', '\x605', '\x606', '\a', 
		'\x2F4', '\x2', '\x2', '\x606', '\x608', '\x5', '\x246', '\x124', '\x2', 
		'\x607', '\x605', '\x3', '\x2', '\x2', '\x2', '\x608', '\x60B', '\x3', 
		'\x2', '\x2', '\x2', '\x609', '\x607', '\x3', '\x2', '\x2', '\x2', '\x609', 
		'\x60A', '\x3', '\x2', '\x2', '\x2', '\x60A', '\x60C', '\x3', '\x2', '\x2', 
		'\x2', '\x60B', '\x609', '\x3', '\x2', '\x2', '\x2', '\x60C', '\x60D', 
		'\a', '\x2EF', '\x2', '\x2', '\x60D', '\x60F', '\x3', '\x2', '\x2', '\x2', 
		'\x60E', '\x603', '\x3', '\x2', '\x2', '\x2', '\x60E', '\x60F', '\x3', 
		'\x2', '\x2', '\x2', '\x60F', '\x610', '\x3', '\x2', '\x2', '\x2', '\x610', 
		'\x611', '\a', '\x1F9', '\x2', '\x2', '\x611', '\x618', '\x5', '\x44E', 
		'\x228', '\x2', '\x612', '\x617', '\x5', '\x238', '\x11D', '\x2', '\x613', 
		'\x617', '\x5', '\f', '\a', '\x2', '\x614', '\x617', '\x5', '\x10', '\t', 
		'\x2', '\x615', '\x617', '\a', '\x97', '\x2', '\x2', '\x616', '\x612', 
		'\x3', '\x2', '\x2', '\x2', '\x616', '\x613', '\x3', '\x2', '\x2', '\x2', 
		'\x616', '\x614', '\x3', '\x2', '\x2', '\x2', '\x616', '\x615', '\x3', 
		'\x2', '\x2', '\x2', '\x617', '\x61A', '\x3', '\x2', '\x2', '\x2', '\x618', 
		'\x616', '\x3', '\x2', '\x2', '\x2', '\x618', '\x619', '\x3', '\x2', '\x2', 
		'\x2', '\x619', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x61A', '\x618', 
		'\x3', '\x2', '\x2', '\x2', '\x61B', '\x61D', '\a', '\x1BF', '\x2', '\x2', 
		'\x61C', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x61C', '\x61D', '\x3', 
		'\x2', '\x2', '\x2', '\x61D', '\x61E', '\x3', '\x2', '\x2', '\x2', '\x61E', 
		'\x627', '\t', '\x2', '\x2', '\x2', '\x61F', '\x621', '\a', '\x89', '\x2', 
		'\x2', '\x620', '\x61F', '\x3', '\x2', '\x2', '\x2', '\x620', '\x621', 
		'\x3', '\x2', '\x2', '\x2', '\x621', '\x623', '\x3', '\x2', '\x2', '\x2', 
		'\x622', '\x624', '\x5', '\x24A', '\x126', '\x2', '\x623', '\x622', '\x3', 
		'\x2', '\x2', '\x2', '\x623', '\x624', '\x3', '\x2', '\x2', '\x2', '\x624', 
		'\x625', '\x3', '\x2', '\x2', '\x2', '\x625', '\x628', '\x5', '\x296', 
		'\x14C', '\x2', '\x626', '\x628', '\x5', '\x23C', '\x11F', '\x2', '\x627', 
		'\x620', '\x3', '\x2', '\x2', '\x2', '\x627', '\x626', '\x3', '\x2', '\x2', 
		'\x2', '\x628', '\x62D', '\x3', '\x2', '\x2', '\x2', '\x629', '\x62A', 
		'\t', '\x3', '\x2', '\x2', '\x62A', '\x62B', '\a', '\x28A', '\x2', '\x2', 
		'\x62B', '\x62D', '\x5', '\x430', '\x219', '\x2', '\x62C', '\x61C', '\x3', 
		'\x2', '\x2', '\x2', '\x62C', '\x629', '\x3', '\x2', '\x2', '\x2', '\x62D', 
		'\x62E', '\x3', '\x2', '\x2', '\x2', '\x62E', '\x62F', '\a', '\x300', 
		'\x2', '\x2', '\x62F', '+', '\x3', '\x2', '\x2', '\x2', '\x630', '\x631', 
		'\a', '\x1D2', '\x2', '\x2', '\x631', '\x63D', '\x5', '\x436', '\x21C', 
		'\x2', '\x632', '\x633', '\a', '\x2EE', '\x2', '\x2', '\x633', '\x638', 
		'\x5', '\x246', '\x124', '\x2', '\x634', '\x635', '\a', '\x2F4', '\x2', 
		'\x2', '\x635', '\x637', '\x5', '\x246', '\x124', '\x2', '\x636', '\x634', 
		'\x3', '\x2', '\x2', '\x2', '\x637', '\x63A', '\x3', '\x2', '\x2', '\x2', 
		'\x638', '\x636', '\x3', '\x2', '\x2', '\x2', '\x638', '\x639', '\x3', 
		'\x2', '\x2', '\x2', '\x639', '\x63B', '\x3', '\x2', '\x2', '\x2', '\x63A', 
		'\x638', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x63C', '\a', '\x2EF', 
		'\x2', '\x2', '\x63C', '\x63E', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x632', 
		'\x3', '\x2', '\x2', '\x2', '\x63D', '\x63E', '\x3', '\x2', '\x2', '\x2', 
		'\x63E', '\x63F', '\x3', '\x2', '\x2', '\x2', '\x63F', '\x649', '\t', 
		'\x2', '\x2', '\x2', '\x640', '\x642', '\a', '\x89', '\x2', '\x2', '\x641', 
		'\x640', '\x3', '\x2', '\x2', '\x2', '\x641', '\x642', '\x3', '\x2', '\x2', 
		'\x2', '\x642', '\x644', '\x3', '\x2', '\x2', '\x2', '\x643', '\x645', 
		'\x5', '\x24A', '\x126', '\x2', '\x644', '\x643', '\x3', '\x2', '\x2', 
		'\x2', '\x644', '\x645', '\x3', '\x2', '\x2', '\x2', '\x645', '\x646', 
		'\x3', '\x2', '\x2', '\x2', '\x646', '\x64A', '\x5', '\x296', '\x14C', 
		'\x2', '\x647', '\x64A', '\x5', '\x23C', '\x11F', '\x2', '\x648', '\x64A', 
		'\a', '\xC9', '\x2', '\x2', '\x649', '\x641', '\x3', '\x2', '\x2', '\x2', 
		'\x649', '\x647', '\x3', '\x2', '\x2', '\x2', '\x649', '\x648', '\x3', 
		'\x2', '\x2', '\x2', '\x64A', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x64B', 
		'\x64C', '\a', '\x300', '\x2', '\x2', '\x64C', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x64D', '\x650', '\a', 'r', '\x2', '\x2', '\x64E', '\x64F', '\a', 
		'\x1A1', '\x2', '\x2', '\x64F', '\x651', '\a', '\x1EE', '\x2', '\x2', 
		'\x650', '\x64E', '\x3', '\x2', '\x2', '\x2', '\x650', '\x651', '\x3', 
		'\x2', '\x2', '\x2', '\x651', '\x652', '\x3', '\x2', '\x2', '\x2', '\x652', 
		'\x653', '\a', '\x1D2', '\x2', '\x2', '\x653', '\x65F', '\x5', '\x436', 
		'\x21C', '\x2', '\x654', '\x655', '\a', '\x2EE', '\x2', '\x2', '\x655', 
		'\x65A', '\x5', '\x246', '\x124', '\x2', '\x656', '\x657', '\a', '\x2F4', 
		'\x2', '\x2', '\x657', '\x659', '\x5', '\x246', '\x124', '\x2', '\x658', 
		'\x656', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65C', '\x3', '\x2', '\x2', 
		'\x2', '\x65A', '\x658', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x65B', 
		'\x3', '\x2', '\x2', '\x2', '\x65B', '\x65D', '\x3', '\x2', '\x2', '\x2', 
		'\x65C', '\x65A', '\x3', '\x2', '\x2', '\x2', '\x65D', '\x65E', '\a', 
		'\x2EF', '\x2', '\x2', '\x65E', '\x660', '\x3', '\x2', '\x2', '\x2', '\x65F', 
		'\x654', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x660', '\x3', '\x2', '\x2', 
		'\x2', '\x660', '\x662', '\x3', '\x2', '\x2', '\x2', '\x661', '\x663', 
		'\x5', '\x238', '\x11D', '\x2', '\x662', '\x661', '\x3', '\x2', '\x2', 
		'\x2', '\x662', '\x663', '\x3', '\x2', '\x2', '\x2', '\x663', '\x664', 
		'\x3', '\x2', '\x2', '\x2', '\x664', '\x66E', '\t', '\x2', '\x2', '\x2', 
		'\x665', '\x667', '\a', '\x89', '\x2', '\x2', '\x666', '\x665', '\x3', 
		'\x2', '\x2', '\x2', '\x666', '\x667', '\x3', '\x2', '\x2', '\x2', '\x667', 
		'\x669', '\x3', '\x2', '\x2', '\x2', '\x668', '\x66A', '\x5', '\x24A', 
		'\x126', '\x2', '\x669', '\x668', '\x3', '\x2', '\x2', '\x2', '\x669', 
		'\x66A', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x66B', '\x3', '\x2', '\x2', 
		'\x2', '\x66B', '\x66F', '\x5', '\x296', '\x14C', '\x2', '\x66C', '\x66F', 
		'\x5', '\x23C', '\x11F', '\x2', '\x66D', '\x66F', '\a', '\xC9', '\x2', 
		'\x2', '\x66E', '\x666', '\x3', '\x2', '\x2', '\x2', '\x66E', '\x66C', 
		'\x3', '\x2', '\x2', '\x2', '\x66E', '\x66D', '\x3', '\x2', '\x2', '\x2', 
		'\x66F', '\x670', '\x3', '\x2', '\x2', '\x2', '\x670', '\x671', '\a', 
		'\x300', '\x2', '\x2', '\x671', '/', '\x3', '\x2', '\x2', '\x2', '\x672', 
		'\x673', '\a', '\xA4', '\x2', '\x2', '\x673', '\x674', '\a', '\x271', 
		'\x2', '\x2', '\x674', '\x675', '\x5', '\x438', '\x21D', '\x2', '\x675', 
		'\x676', '\a', '\x300', '\x2', '\x2', '\x676', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x677', '\x678', '\a', '\x10', '\x2', '\x2', '\x678', '\x679', 
		'\a', '\x271', '\x2', '\x2', '\x679', '\x68C', '\x5', '\x438', '\x21D', 
		'\x2', '\x67A', '\x68D', '\t', '\a', '\x2', '\x2', '\x67B', '\x67C', '\a', 
		'\x1ED', '\x2', '\x2', '\x67C', '\x67D', '\a', '\x26A', '\x2', '\x2', 
		'\x67D', '\x68D', '\x5', '\x438', '\x21D', '\x2', '\x67E', '\x680', '\a', 
		'^', '\x2', '\x2', '\x67F', '\x681', '\a', '\x86', '\x2', '\x2', '\x680', 
		'\x67F', '\x3', '\x2', '\x2', '\x2', '\x680', '\x681', '\x3', '\x2', '\x2', 
		'\x2', '\x681', '\x685', '\x3', '\x2', '\x2', '\x2', '\x682', '\x684', 
		'\x5', '\x23A', '\x11E', '\x2', '\x683', '\x682', '\x3', '\x2', '\x2', 
		'\x2', '\x684', '\x687', '\x3', '\x2', '\x2', '\x2', '\x685', '\x683', 
		'\x3', '\x2', '\x2', '\x2', '\x685', '\x686', '\x3', '\x2', '\x2', '\x2', 
		'\x686', '\x68A', '\x3', '\x2', '\x2', '\x2', '\x687', '\x685', '\x3', 
		'\x2', '\x2', '\x2', '\x688', '\x689', '\a', '\x1FA', '\x2', '\x2', '\x689', 
		'\x68B', '\a', '\x221', '\x2', '\x2', '\x68A', '\x688', '\x3', '\x2', 
		'\x2', '\x2', '\x68A', '\x68B', '\x3', '\x2', '\x2', '\x2', '\x68B', '\x68D', 
		'\x3', '\x2', '\x2', '\x2', '\x68C', '\x67A', '\x3', '\x2', '\x2', '\x2', 
		'\x68C', '\x67B', '\x3', '\x2', '\x2', '\x2', '\x68C', '\x67E', '\x3', 
		'\x2', '\x2', '\x2', '\x68D', '\x68E', '\x3', '\x2', '\x2', '\x2', '\x68E', 
		'\x68F', '\a', '\x300', '\x2', '\x2', '\x68F', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x690', '\x693', '\a', 'r', '\x2', '\x2', '\x691', '\x692', '\a', 
		'\x1A1', '\x2', '\x2', '\x692', '\x694', '\a', '\x1EE', '\x2', '\x2', 
		'\x693', '\x691', '\x3', '\x2', '\x2', '\x2', '\x693', '\x694', '\x3', 
		'\x2', '\x2', '\x2', '\x694', '\x695', '\x3', '\x2', '\x2', '\x2', '\x695', 
		'\x696', '\a', '\x271', '\x2', '\x2', '\x696', '\x69A', '\x5', '\x438', 
		'\x21D', '\x2', '\x697', '\x69B', '\x5', ':', '\x1E', '\x2', '\x698', 
		'\x69B', '\x5', '>', ' ', '\x2', '\x699', '\x69B', '\x5', '@', '!', '\x2', 
		'\x69A', '\x697', '\x3', '\x2', '\x2', '\x2', '\x69A', '\x698', '\x3', 
		'\x2', '\x2', '\x2', '\x69A', '\x699', '\x3', '\x2', '\x2', '\x2', '\x69B', 
		'\x69D', '\x3', '\x2', '\x2', '\x2', '\x69C', '\x69E', '\x5', '\x36', 
		'\x1C', '\x2', '\x69D', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69D', 
		'\x69E', '\x3', '\x2', '\x2', '\x2', '\x69E', '\x6A0', '\x3', '\x2', '\x2', 
		'\x2', '\x69F', '\x6A1', '\t', '\a', '\x2', '\x2', '\x6A0', '\x69F', '\x3', 
		'\x2', '\x2', '\x2', '\x6A0', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A1', 
		'\x6A3', '\x3', '\x2', '\x2', '\x2', '\x6A2', '\x6A4', '\x5', '\x38', 
		'\x1D', '\x2', '\x6A3', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6A3', 
		'\x6A4', '\x3', '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\x3', '\x2', '\x2', 
		'\x2', '\x6A5', '\x6A6', '\x5', '\x42', '\"', '\x2', '\x6A6', '\x6A7', 
		'\a', '\x300', '\x2', '\x2', '\x6A7', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x6A8', '\x6A9', '\a', '\xD8', '\x2', '\x2', '\x6A9', '\x6AE', '\x5', 
		'\x438', '\x21D', '\x2', '\x6AA', '\x6AB', '\a', '\x2F4', '\x2', '\x2', 
		'\x6AB', '\x6AD', '\x5', '\x438', '\x21D', '\x2', '\x6AC', '\x6AA', '\x3', 
		'\x2', '\x2', '\x2', '\x6AD', '\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6AE', 
		'\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6AF', '\x3', '\x2', '\x2', 
		'\x2', '\x6AF', '\x37', '\x3', '\x2', '\x2', '\x2', '\x6B0', '\x6AE', 
		'\x3', '\x2', '\x2', '\x2', '\x6B1', '\x6B2', '\a', '\x29D', '\x2', '\x2', 
		'\x6B2', '\x6B3', '\a', '\x2EE', '\x2', '\x2', '\x6B3', '\x6B4', '\x5', 
		'\x376', '\x1BC', '\x2', '\x6B4', '\x6B5', '\a', '\x2EF', '\x2', '\x2', 
		'\x6B5', '\x39', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6BB', '\a', ',', 
		'\x2', '\x2', '\x6B7', '\x6BB', '\a', '\n', '\x2', '\x2', '\x6B8', '\x6B9', 
		'\a', '\x111', '\x2', '\x2', '\x6B9', '\x6BB', '\a', '\x192', '\x2', '\x2', 
		'\x6BA', '\x6B6', '\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6B7', '\x3', 
		'\x2', '\x2', '\x2', '\x6BA', '\x6B8', '\x3', '\x2', '\x2', '\x2', '\x6BB', 
		'\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BE', '\x5', 'L', '\'', 
		'\x2', '\x6BD', '\x6BF', '\x5', 'R', '*', '\x2', '\x6BE', '\x6BD', '\x3', 
		'\x2', '\x2', '\x2', '\x6BE', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6BF', 
		'\x6C1', '\x3', '\x2', '\x2', '\x2', '\x6C0', '\x6C2', '\x5', '<', '\x1F', 
		'\x2', '\x6C1', '\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C2', 
		'\x3', '\x2', '\x2', '\x2', '\x6C2', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x6C3', '\x6C4', '\a', '\xDC', '\x2', '\x2', '\x6C4', '\x6C5', '\a', 
		'\xA7', '\x2', '\x2', '\x6C5', '\x6C6', '\a', '\x205', '\x2', '\x2', '\x6C6', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C8', '\a', '\xDC', '\x2', 
		'\x2', '\x6C8', '\x6CA', '\x5', 'L', '\'', '\x2', '\x6C9', '\x6CB', '\x5', 
		'R', '*', '\x2', '\x6CA', '\x6C9', '\x3', '\x2', '\x2', '\x2', '\x6CA', 
		'\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6CB', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x6CC', '\x6CD', '\t', '\b', '\x2', '\x2', '\x6CD', '\x6D2', '\x5', 
		'J', '&', '\x2', '\x6CE', '\x6CF', '\a', '\x1A1', '\x2', '\x2', '\x6CF', 
		'\x6D1', '\x5', 'J', '&', '\x2', '\x6D0', '\x6CE', '\x3', '\x2', '\x2', 
		'\x2', '\x6D1', '\x6D4', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6D0', 
		'\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6D3', '\x3', '\x2', '\x2', '\x2', 
		'\x6D3', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6D4', '\x6D2', '\x3', 
		'\x2', '\x2', '\x2', '\x6D5', '\x6DD', '\a', '\x198', '\x2', '\x2', '\x6D6', 
		'\x6DE', '\a', '|', '\x2', '\x2', '\x6D7', '\x6D8', '\x5', '\x47C', '\x23F', 
		'\x2', '\x6D8', '\x6D9', '\a', '\x2E7', '\x2', '\x2', '\x6D9', '\x6DB', 
		'\x3', '\x2', '\x2', '\x2', '\x6DA', '\x6D7', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6DC', '\x3', 
		'\x2', '\x2', '\x2', '\x6DC', '\x6DE', '\a', '\x20E', '\x2', '\x2', '\x6DD', 
		'\x6D6', '\x3', '\x2', '\x2', '\x2', '\x6DD', '\x6DA', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x41', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E0', 
		'\a', '_', '\x2', '\x2', '\x6E0', '\x6E5', '\a', '\x271', '\x2', '\x2', 
		'\x6E1', '\x6E2', '\a', '\x42', '\x2', '\x2', '\x6E2', '\x6E5', '\x5', 
		'\x468', '\x235', '\x2', '\x6E3', '\x6E5', '\x5', '\x29A', '\x14E', '\x2', 
		'\x6E4', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E1', '\x3', 
		'\x2', '\x2', '\x2', '\x6E4', '\x6E3', '\x3', '\x2', '\x2', '\x2', '\x6E5', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x6E6', '\x6E8', '\x5', '\x3EA', 
		'\x1F6', '\x2', '\x6E7', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x6E7', 
		'\x6E8', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6EA', '\x3', '\x2', '\x2', 
		'\x2', '\x6E9', '\x6EB', '\x5', '\x446', '\x224', '\x2', '\x6EA', '\x6E9', 
		'\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EB', '\x3', '\x2', '\x2', '\x2', 
		'\x6EB', '\x45', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6ED', '\a', '_', 
		'\x2', '\x2', '\x6ED', '\x6EF', '\a', '\x271', '\x2', '\x2', '\x6EE', 
		'\x6F0', '\x5', '\x24A', '\x126', '\x2', '\x6EF', '\x6EE', '\x3', '\x2', 
		'\x2', '\x2', '\x6EF', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6F2', 
		'\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F3', '\x5', 'H', '%', '\x2', 
		'\x6F2', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6F4', '\x3', 
		'\x2', '\x2', '\x2', '\x6F4', '\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F4', 
		'\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F6', '\x3', '\x2', '\x2', 
		'\x2', '\x6F6', '\x6F7', '\a', '\xB4', '\x2', '\x2', '\x6F7', '\x6F8', 
		'\x5', '\x438', '\x21D', '\x2', '\x6F8', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x6F9', '\x6FA', '\a', ',', '\x2', '\x2', '\x6FA', '\x6FB', '\a', '\x23B', 
		'\x2', '\x2', '\x6FB', '\x6FC', '\a', '\x11A', '\x2', '\x2', '\x6FC', 
		'\x6FD', '\x5', '\x29A', '\x14E', '\x2', '\x6FD', '\x6FE', '\a', ',', 
		'\x2', '\x2', '\x6FE', '\x6FF', '\a', '\x23B', '\x2', '\x2', '\x6FF', 
		'\x700', '\a', '\x300', '\x2', '\x2', '\x700', '\x71E', '\x3', '\x2', 
		'\x2', '\x2', '\x701', '\x702', '\a', ',', '\x2', '\x2', '\x702', '\x703', 
		'\a', '\xA7', '\x2', '\x2', '\x703', '\x704', '\a', '\x205', '\x2', '\x2', 
		'\x704', '\x705', '\a', '\x11A', '\x2', '\x2', '\x705', '\x706', '\x5', 
		'\x29A', '\x14E', '\x2', '\x706', '\x707', '\a', ',', '\x2', '\x2', '\x707', 
		'\x708', '\a', '\xA7', '\x2', '\x2', '\x708', '\x709', '\a', '\x205', 
		'\x2', '\x2', '\x709', '\x70A', '\a', '\x300', '\x2', '\x2', '\x70A', 
		'\x71E', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x70C', '\a', '\n', '\x2', 
		'\x2', '\x70C', '\x70D', '\a', '\x23B', '\x2', '\x2', '\x70D', '\x70E', 
		'\a', '\x11A', '\x2', '\x2', '\x70E', '\x70F', '\x5', '\x29A', '\x14E', 
		'\x2', '\x70F', '\x710', '\a', '\n', '\x2', '\x2', '\x710', '\x711', '\a', 
		'\x23B', '\x2', '\x2', '\x711', '\x712', '\a', '\x300', '\x2', '\x2', 
		'\x712', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x713', '\x714', '\a', 
		'\n', '\x2', '\x2', '\x714', '\x715', '\a', '\xA7', '\x2', '\x2', '\x715', 
		'\x716', '\a', '\x205', '\x2', '\x2', '\x716', '\x717', '\a', '\x11A', 
		'\x2', '\x2', '\x717', '\x718', '\x5', '\x29A', '\x14E', '\x2', '\x718', 
		'\x719', '\a', '\n', '\x2', '\x2', '\x719', '\x71A', '\a', '\xA7', '\x2', 
		'\x2', '\x71A', '\x71B', '\a', '\x205', '\x2', '\x2', '\x71B', '\x71C', 
		'\a', '\x300', '\x2', '\x2', '\x71C', '\x71E', '\x3', '\x2', '\x2', '\x2', 
		'\x71D', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x701', '\x3', 
		'\x2', '\x2', '\x2', '\x71D', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x71D', 
		'\x713', '\x3', '\x2', '\x2', '\x2', '\x71E', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x71F', '\x73A', '\a', '\x10', '\x2', '\x2', '\x720', '\x73A', 
		'\a', '\x12', '\x2', '\x2', '\x721', '\x722', '\a', '\x1B', '\x2', '\x2', 
		'\x722', '\x73A', '\a', '\x23D', '\x2', '\x2', '\x723', '\x73A', '\a', 
		'\x1E', '\x2', '\x2', '\x724', '\x73A', '\a', 'Z', '\x2', '\x2', '\x725', 
		'\x73A', '\a', 'r', '\x2', '\x2', '\x726', '\x727', '\a', '\x9D', '\x2', 
		'\x2', '\x727', '\x73A', '\a', '\x23D', '\x2', '\x2', '\x728', '\x73A', 
		'\a', '\xA4', '\x2', '\x2', '\x729', '\x73A', '\a', '\xE7', '\x2', '\x2', 
		'\x72A', '\x73A', '\a', '\x16F', '\x2', '\x2', '\x72B', '\x73A', '\a', 
		'\x1ED', '\x2', '\x2', '\x72C', '\x73A', '\a', '\x1FC', '\x2', '\x2', 
		'\x72D', '\x73A', '\a', '\x273', '\x2', '\x2', '\x72E', '\x73A', '\a', 
		'\x85', '\x2', '\x2', '\x72F', '\x73A', '\a', '\x239', '\x2', '\x2', '\x730', 
		'\x73A', '\a', '\x225', '\x2', '\x2', '\x731', '\x73A', '\a', '\x83', 
		'\x2', '\x2', '\x732', '\x73A', '\a', '\x141', '\x2', '\x2', '\x733', 
		'\x73A', '\a', '\x140', '\x2', '\x2', '\x734', '\x73A', '\a', '\x21C', 
		'\x2', '\x2', '\x735', '\x73A', '\a', '\x248', '\x2', '\x2', '\x736', 
		'\x73A', '\a', '|', '\x2', '\x2', '\x737', '\x73A', '\a', '\x20E', '\x2', 
		'\x2', '\x738', '\x73A', '\a', '\xD8', '\x2', '\x2', '\x739', '\x71F', 
		'\x3', '\x2', '\x2', '\x2', '\x739', '\x720', '\x3', '\x2', '\x2', '\x2', 
		'\x739', '\x721', '\x3', '\x2', '\x2', '\x2', '\x739', '\x723', '\x3', 
		'\x2', '\x2', '\x2', '\x739', '\x724', '\x3', '\x2', '\x2', '\x2', '\x739', 
		'\x725', '\x3', '\x2', '\x2', '\x2', '\x739', '\x726', '\x3', '\x2', '\x2', 
		'\x2', '\x739', '\x728', '\x3', '\x2', '\x2', '\x2', '\x739', '\x729', 
		'\x3', '\x2', '\x2', '\x2', '\x739', '\x72A', '\x3', '\x2', '\x2', '\x2', 
		'\x739', '\x72B', '\x3', '\x2', '\x2', '\x2', '\x739', '\x72C', '\x3', 
		'\x2', '\x2', '\x2', '\x739', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x739', 
		'\x72E', '\x3', '\x2', '\x2', '\x2', '\x739', '\x72F', '\x3', '\x2', '\x2', 
		'\x2', '\x739', '\x730', '\x3', '\x2', '\x2', '\x2', '\x739', '\x731', 
		'\x3', '\x2', '\x2', '\x2', '\x739', '\x732', '\x3', '\x2', '\x2', '\x2', 
		'\x739', '\x733', '\x3', '\x2', '\x2', '\x2', '\x739', '\x734', '\x3', 
		'\x2', '\x2', '\x2', '\x739', '\x735', '\x3', '\x2', '\x2', '\x2', '\x739', 
		'\x736', '\x3', '\x2', '\x2', '\x2', '\x739', '\x737', '\x3', '\x2', '\x2', 
		'\x2', '\x739', '\x738', '\x3', '\x2', '\x2', '\x2', '\x73A', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x73B', '\x740', '\x5', 'N', '(', '\x2', '\x73C', 
		'\x73D', '\a', '\x1A1', '\x2', '\x2', '\x73D', '\x73F', '\x5', 'N', '(', 
		'\x2', '\x73E', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x73F', '\x742', 
		'\x3', '\x2', '\x2', '\x2', '\x740', '\x73E', '\x3', '\x2', '\x2', '\x2', 
		'\x740', '\x741', '\x3', '\x2', '\x2', '\x2', '\x741', '\x743', '\x3', 
		'\x2', '\x2', '\x2', '\x742', '\x740', '\x3', '\x2', '\x2', '\x2', '\x743', 
		'\x745', '\a', '\x198', '\x2', '\x2', '\x744', '\x746', '\x5', 'P', ')', 
		'\x2', '\x745', '\x744', '\x3', '\x2', '\x2', '\x2', '\x745', '\x746', 
		'\x3', '\x2', '\x2', '\x2', '\x746', '\x747', '\x3', '\x2', '\x2', '\x2', 
		'\x747', '\x748', '\x5', '\x410', '\x209', '\x2', '\x748', 'M', '\x3', 
		'\x2', '\x2', '\x2', '\x749', '\x74C', '\t', '\t', '\x2', '\x2', '\x74A', 
		'\x74B', '\a', '\x192', '\x2', '\x2', '\x74B', '\x74D', '\x5', '\x442', 
		'\x222', '\x2', '\x74C', '\x74A', '\x3', '\x2', '\x2', '\x2', '\x74C', 
		'\x74D', '\x3', '\x2', '\x2', '\x2', '\x74D', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x74E', '\x74F', '\a', '\x16C', '\x2', '\x2', '\x74F', '\x750', 
		'\a', '\x254', '\x2', '\x2', '\x750', '\x751', '\x5', '\x410', '\x209', 
		'\x2', '\x751', '\x752', '\a', '\x192', '\x2', '\x2', '\x752', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x753', '\x755', '\a', '\x1E5', '\x2', '\x2', '\x754', 
		'\x756', '\x5', 'T', '+', '\x2', '\x755', '\x754', '\x3', '\x2', '\x2', 
		'\x2', '\x756', '\x757', '\x3', '\x2', '\x2', '\x2', '\x757', '\x755', 
		'\x3', '\x2', '\x2', '\x2', '\x757', '\x758', '\x3', '\x2', '\x2', '\x2', 
		'\x758', 'S', '\x3', '\x2', '\x2', '\x2', '\x759', '\x75A', '\t', '\n', 
		'\x2', '\x2', '\x75A', '\x75B', '\x5', '\x3F4', '\x1FB', '\x2', '\x75B', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x75C', '\x75D', '\a', '\xA4', '\x2', 
		'\x2', '\x75D', '\x75F', '\a', '\x276', '\x2', '\x2', '\x75E', '\x760', 
		'\a', '\x38', '\x2', '\x2', '\x75F', '\x75E', '\x3', '\x2', '\x2', '\x2', 
		'\x75F', '\x760', '\x3', '\x2', '\x2', '\x2', '\x760', '\x761', '\x3', 
		'\x2', '\x2', '\x2', '\x761', '\x763', '\x5', '\x490', '\x249', '\x2', 
		'\x762', '\x764', '\t', '\v', '\x2', '\x2', '\x763', '\x762', '\x3', '\x2', 
		'\x2', '\x2', '\x763', '\x764', '\x3', '\x2', '\x2', '\x2', '\x764', '\x765', 
		'\x3', '\x2', '\x2', '\x2', '\x765', '\x766', '\a', '\x300', '\x2', '\x2', 
		'\x766', 'W', '\x3', '\x2', '\x2', '\x2', '\x767', '\x768', '\a', '\x10', 
		'\x2', '\x2', '\x768', '\x769', '\a', '\x276', '\x2', '\x2', '\x769', 
		'\x76F', '\x5', '\x490', '\x249', '\x2', '\x76A', '\x770', '\x5', 'Z', 
		'.', '\x2', '\x76B', '\x770', '\x5', '\\', '/', '\x2', '\x76C', '\x770', 
		'\x5', '^', '\x30', '\x2', '\x76D', '\x770', '\x5', '\x66', '\x34', '\x2', 
		'\x76E', '\x770', '\x5', '\x88', '\x45', '\x2', '\x76F', '\x76A', '\x3', 
		'\x2', '\x2', '\x2', '\x76F', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x76F', 
		'\x76C', '\x3', '\x2', '\x2', '\x2', '\x76F', '\x76D', '\x3', '\x2', '\x2', 
		'\x2', '\x76F', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x770', '\x772', 
		'\x3', '\x2', '\x2', '\x2', '\x771', '\x773', '\x5', 'h', '\x35', '\x2', 
		'\x772', '\x771', '\x3', '\x2', '\x2', '\x2', '\x772', '\x773', '\x3', 
		'\x2', '\x2', '\x2', '\x773', '\x774', '\x3', '\x2', '\x2', '\x2', '\x774', 
		'\x775', '\a', '\x300', '\x2', '\x2', '\x775', 'Y', '\x3', '\x2', '\x2', 
		'\x2', '\x776', '\x778', '\a', '^', '\x2', '\x2', '\x777', '\x779', '\a', 
		'\x86', '\x2', '\x2', '\x778', '\x777', '\x3', '\x2', '\x2', '\x2', '\x778', 
		'\x779', '\x3', '\x2', '\x2', '\x2', '\x779', '\x77B', '\x3', '\x2', '\x2', 
		'\x2', '\x77A', '\x77C', '\t', '\f', '\x2', '\x2', '\x77B', '\x77A', '\x3', 
		'\x2', '\x2', '\x2', '\x77B', '\x77C', '\x3', '\x2', '\x2', '\x2', '\x77C', 
		'\x780', '\x3', '\x2', '\x2', '\x2', '\x77D', '\x77F', '\x5', '\x23A', 
		'\x11E', '\x2', '\x77E', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x77F', 
		'\x782', '\x3', '\x2', '\x2', '\x2', '\x780', '\x77E', '\x3', '\x2', '\x2', 
		'\x2', '\x780', '\x781', '\x3', '\x2', '\x2', '\x2', '\x781', '\x785', 
		'\x3', '\x2', '\x2', '\x2', '\x782', '\x780', '\x3', '\x2', '\x2', '\x2', 
		'\x783', '\x784', '\a', '\x1FA', '\x2', '\x2', '\x784', '\x786', '\a', 
		'\x221', '\x2', '\x2', '\x785', '\x783', '\x3', '\x2', '\x2', '\x2', '\x785', 
		'\x786', '\x3', '\x2', '\x2', '\x2', '\x786', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x787', '\x789', '\a', '\x1EE', '\x2', '\x2', '\x788', '\x78A', 
		'\x5', '\x238', '\x11D', '\x2', '\x789', '\x788', '\x3', '\x2', '\x2', 
		'\x2', '\x789', '\x78A', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x78B', 
		'\x3', '\x2', '\x2', '\x2', '\x78B', '\x78C', '\a', '\x19', '\x2', '\x2', 
		'\x78C', '\x78D', '\a', '\x18F', '\x2', '\x2', '\x78D', '\x78E', '\a', 
		'\x2EE', '\x2', '\x2', '\x78E', '\x793', '\x5', '\x8A', '\x46', '\x2', 
		'\x78F', '\x790', '\a', '\x2F4', '\x2', '\x2', '\x790', '\x792', '\x5', 
		'\x8A', '\x46', '\x2', '\x791', '\x78F', '\x3', '\x2', '\x2', '\x2', '\x792', 
		'\x795', '\x3', '\x2', '\x2', '\x2', '\x793', '\x791', '\x3', '\x2', '\x2', 
		'\x2', '\x793', '\x794', '\x3', '\x2', '\x2', '\x2', '\x794', '\x796', 
		'\x3', '\x2', '\x2', '\x2', '\x795', '\x793', '\x3', '\x2', '\x2', '\x2', 
		'\x796', '\x797', '\a', '\x2EF', '\x2', '\x2', '\x797', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x798', '\x79D', '\x5', '`', '\x31', '\x2', '\x799', '\x79A', 
		'\a', '\x2F4', '\x2', '\x2', '\x79A', '\x79C', '\x5', '`', '\x31', '\x2', 
		'\x79B', '\x799', '\x3', '\x2', '\x2', '\x2', '\x79C', '\x79F', '\x3', 
		'\x2', '\x2', '\x2', '\x79D', '\x79B', '\x3', '\x2', '\x2', '\x2', '\x79D', 
		'\x79E', '\x3', '\x2', '\x2', '\x2', '\x79E', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x79F', '\x79D', '\x3', '\x2', '\x2', '\x2', '\x7A0', '\x7A3', 
		'\t', '\r', '\x2', '\x2', '\x7A1', '\x7A4', '\x5', '\x9A', 'N', '\x2', 
		'\x7A2', '\x7A4', '\x5', '\x92', 'J', '\x2', '\x7A3', '\x7A1', '\x3', 
		'\x2', '\x2', '\x2', '\x7A3', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x7A4', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A6', '\t', '\xE', '\x2', 
		'\x2', '\x7A6', '\x7B3', '\a', '\x1D', '\x2', '\x2', '\x7A7', '\x7B4', 
		'\x5', '\x64', '\x33', '\x2', '\x7A8', '\x7A9', '\a', '\x2EE', '\x2', 
		'\x2', '\x7A9', '\x7AE', '\x5', '\x64', '\x33', '\x2', '\x7AA', '\x7AB', 
		'\a', '\x2F4', '\x2', '\x2', '\x7AB', '\x7AD', '\x5', '\x64', '\x33', 
		'\x2', '\x7AC', '\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7AD', '\x7B0', 
		'\x3', '\x2', '\x2', '\x2', '\x7AE', '\x7AC', '\x3', '\x2', '\x2', '\x2', 
		'\x7AE', '\x7AF', '\x3', '\x2', '\x2', '\x2', '\x7AF', '\x7B1', '\x3', 
		'\x2', '\x2', '\x2', '\x7B0', '\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7B1', 
		'\x7B2', '\a', '\x2EF', '\x2', '\x2', '\x7B2', '\x7B4', '\x3', '\x2', 
		'\x2', '\x2', '\x7B3', '\x7A7', '\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7A8', 
		'\x3', '\x2', '\x2', '\x2', '\x7B4', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x7B5', '\x7B7', '\x5', '\x474', '\x23B', '\x2', '\x7B6', '\x7B8', '\x5', 
		'\x44E', '\x228', '\x2', '\x7B7', '\x7B6', '\x3', '\x2', '\x2', '\x2', 
		'\x7B7', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7B8', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x7B9', '\x7BF', '\a', '\x15F', '\x2', '\x2', '\x7BA', 
		'\x7BB', '\a', '\x130', '\x2', '\x2', '\x7BB', '\x7C0', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x7BC', '\x7BD', '\a', '\xAC', '\x2', '\x2', '\x7BD', 
		'\x7BE', '\a', '\x276', '\x2', '\x2', '\x7BE', '\x7C0', '\x5', '\x44E', 
		'\x228', '\x2', '\x7BF', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7BF', 
		'\x7BC', '\x3', '\x2', '\x2', '\x2', '\x7C0', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x7C1', '\x7D2', '\a', '\x118', '\x2', '\x2', '\x7C2', '\x7CC', 
		'\a', '\x45', '\x2', '\x2', '\x7C3', '\x7C4', '\a', 'm', '\x2', '\x2', 
		'\x7C4', '\x7C5', '\a', '\x26A', '\x2', '\x2', '\x7C5', '\x7CD', '\a', 
		'\x244', '\x2', '\x2', '\x7C6', '\x7C8', '\a', '\x187', '\x2', '\x2', 
		'\x7C7', '\x7C6', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C8', '\x3', 
		'\x2', '\x2', '\x2', '\x7C8', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7C9', 
		'\x7CA', '\a', '\xFC', '\x2', '\x2', '\x7CA', '\x7CB', '\a', '\x254', 
		'\x2', '\x2', '\x7CB', '\x7CD', '\a', '}', '\x2', '\x2', '\x7CC', '\x7C3', 
		'\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7C7', '\x3', '\x2', '\x2', '\x2', 
		'\x7CC', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CD', '\x7CF', '\x3', 
		'\x2', '\x2', '\x2', '\x7CE', '\x7D0', '\x5', 'j', '\x36', '\x2', '\x7CF', 
		'\x7CE', '\x3', '\x2', '\x2', '\x2', '\x7CF', '\x7D0', '\x3', '\x2', '\x2', 
		'\x2', '\x7D0', '\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7C1', 
		'\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7C2', '\x3', '\x2', '\x2', '\x2', 
		'\x7D2', 'i', '\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7D5', '\a', '\xDA', 
		'\x2', '\x2', '\x7D4', '\x7D3', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7D5', 
		'\x3', '\x2', '\x2', '\x2', '\x7D5', '\x7D6', '\x3', '\x2', '\x2', '\x2', 
		'\x7D6', '\x7D7', '\a', '\xBF', '\x2', '\x2', '\x7D7', '\x7D8', '\a', 
		'\x117', '\x2', '\x2', '\x7D8', '\x7D9', '\x5', '\x410', '\x209', '\x2', 
		'\x7D9', 'k', '\x3', '\x2', '\x2', '\x2', '\x7DA', '\x7DD', '\a', 'r', 
		'\x2', '\x2', '\x7DB', '\x7DC', '\a', '\x1A1', '\x2', '\x2', '\x7DC', 
		'\x7DE', '\a', '\x1EE', '\x2', '\x2', '\x7DD', '\x7DB', '\x3', '\x2', 
		'\x2', '\x2', '\x7DD', '\x7DE', '\x3', '\x2', '\x2', '\x2', '\x7DE', '\x7DF', 
		'\x3', '\x2', '\x2', '\x2', '\x7DF', '\x7E2', '\a', '\x276', '\x2', '\x2', 
		'\x7E0', '\x7E3', '\x5', 'n', '\x38', '\x2', '\x7E1', '\x7E3', '\x5', 
		'z', '>', '\x2', '\x7E2', '\x7E0', '\x3', '\x2', '\x2', '\x2', '\x7E2', 
		'\x7E1', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E4', '\x3', '\x2', '\x2', 
		'\x2', '\x7E4', '\x7E5', '\a', '\x300', '\x2', '\x2', '\x7E5', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x7E6', '\x7E9', '\x5', '\x490', '\x249', '\x2', 
		'\x7E7', '\x7E8', '\a', '\x193', '\x2', '\x2', '\x7E8', '\x7EA', '\a', 
		'\x2EA', '\x2', '\x2', '\x7E9', '\x7E7', '\x3', '\x2', '\x2', '\x2', '\x7E9', 
		'\x7EA', '\x3', '\x2', '\x2', '\x2', '\x7EA', '\x7EC', '\x3', '\x2', '\x2', 
		'\x2', '\x7EB', '\x7ED', '\x5', 'p', '\x39', '\x2', '\x7EC', '\x7EB', 
		'\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7ED', '\x3', '\x2', '\x2', '\x2', 
		'\x7ED', 'o', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7F0', '\x5', '\x238', 
		'\x11D', '\x2', '\x7EF', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EF', 
		'\x7F0', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F3', '\x3', '\x2', '\x2', 
		'\x2', '\x7F1', '\x7F4', '\x5', 'r', ':', '\x2', '\x7F2', '\x7F4', '\x5', 
		't', ';', '\x2', '\x7F3', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F3', 
		'\x7F2', '\x3', '\x2', '\x2', '\x2', '\x7F4', '\x7F6', '\x3', '\x2', '\x2', 
		'\x2', '\x7F5', '\x7F7', '\x5', 'x', '=', '\x2', '\x7F6', '\x7F5', '\x3', 
		'\x2', '\x2', '\x2', '\x7F6', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F7', 
		'\x803', '\x3', '\x2', '\x2', '\x2', '\x7F8', '\x7F9', '\a', '\x2EE', 
		'\x2', '\x2', '\x7F9', '\x7FE', '\x5', '\x8A', '\x46', '\x2', '\x7FA', 
		'\x7FB', '\a', '\x2F4', '\x2', '\x2', '\x7FB', '\x7FD', '\x5', '\x8A', 
		'\x46', '\x2', '\x7FC', '\x7FA', '\x3', '\x2', '\x2', '\x2', '\x7FD', 
		'\x800', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7FC', '\x3', '\x2', '\x2', 
		'\x2', '\x7FE', '\x7FF', '\x3', '\x2', '\x2', '\x2', '\x7FF', '\x801', 
		'\x3', '\x2', '\x2', '\x2', '\x800', '\x7FE', '\x3', '\x2', '\x2', '\x2', 
		'\x801', '\x802', '\a', '\x2EF', '\x2', '\x2', '\x802', '\x804', '\x3', 
		'\x2', '\x2', '\x2', '\x803', '\x7F8', '\x3', '\x2', '\x2', '\x2', '\x803', 
		'\x804', '\x3', '\x2', '\x2', '\x2', '\x804', '\x808', '\x3', '\x2', '\x2', 
		'\x2', '\x805', '\x807', '\x5', '\x88', '\x45', '\x2', '\x806', '\x805', 
		'\x3', '\x2', '\x2', '\x2', '\x807', '\x80A', '\x3', '\x2', '\x2', '\x2', 
		'\x808', '\x806', '\x3', '\x2', '\x2', '\x2', '\x808', '\x809', '\x3', 
		'\x2', '\x2', '\x2', '\x809', 'q', '\x3', '\x2', '\x2', '\x2', '\x80A', 
		'\x808', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x80F', '\t', '\x2', '\x2', 
		'\x2', '\x80C', '\x810', '\a', '\x18F', '\x2', '\x2', '\x80D', '\x810', 
		'\x5', '\x262', '\x132', '\x2', '\x80E', '\x810', '\x5', 'v', '<', '\x2', 
		'\x80F', '\x80C', '\x3', '\x2', '\x2', '\x2', '\x80F', '\x80D', '\x3', 
		'\x2', '\x2', '\x2', '\x80F', '\x80E', '\x3', '\x2', '\x2', '\x2', '\x810', 
		's', '\x3', '\x2', '\x2', '\x2', '\x811', '\x812', '\a', '\x278', '\x2', 
		'\x2', '\x812', '\x813', '\x5', '\x44E', '\x228', '\x2', '\x813', 'u', 
		'\x3', '\x2', '\x2', '\x2', '\x814', '\x815', '\a', '\x254', '\x2', '\x2', 
		'\x815', '\x816', '\a', '\x192', '\x2', '\x2', '\x816', '\x819', '\x5', 
		'\x44E', '\x228', '\x2', '\x817', '\x818', '\a', '\x187', '\x2', '\x2', 
		'\x818', '\x81A', '\a', '\x18A', '\x2', '\x2', '\x819', '\x817', '\x3', 
		'\x2', '\x2', '\x2', '\x819', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x81A', 
		'w', '\x3', '\x2', '\x2', '\x2', '\x81B', '\x81C', '\a', '\xC9', '\x2', 
		'\x2', '\x81C', '\x81D', '\a', '\x164', '\x2', '\x2', '\x81D', '\x81E', 
		'\x5', '\x37A', '\x1BE', '\x2', '\x81E', '\x81F', '\a', '\x123', '\x2', 
		'\x2', '\x81F', '\x820', '\a', '\x11D', '\x2', '\x2', '\x820', '\x821', 
		'\a', '\x28A', '\x2', '\x2', '\x821', '\x822', '\t', '\xF', '\x2', '\x2', 
		'\x822', 'y', '\x3', '\x2', '\x2', '\x2', '\x823', '\x824', '\a', '\x38', 
		'\x2', '\x2', '\x824', '\x825', '\x5', '\x490', '\x249', '\x2', '\x825', 
		'\x827', '\t', '\x2', '\x2', '\x2', '\x826', '\x828', '\x5', '|', '?', 
		'\x2', '\x827', '\x826', '\x3', '\x2', '\x2', '\x2', '\x828', '\x829', 
		'\x3', '\x2', '\x2', '\x2', '\x829', '\x827', '\x3', '\x2', '\x2', '\x2', 
		'\x829', '\x82A', '\x3', '\x2', '\x2', '\x2', '\x82A', '\x82B', '\x3', 
		'\x2', '\x2', '\x2', '\x82B', '\x82C', '\a', '\xB4', '\x2', '\x2', '\x82C', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x830', '\x5', '~', '@', '\x2', 
		'\x82E', '\x830', '\x5', '\x80', '\x41', '\x2', '\x82F', '\x82D', '\x3', 
		'\x2', '\x2', '\x2', '\x82F', '\x82E', '\x3', '\x2', '\x2', '\x2', '\x830', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x831', '\x832', '\t', '\x10', '\x2', 
		'\x2', '\x832', '\x833', '\a', '\x152', '\x2', '\x2', '\x833', '\x834', 
		'\x5', '\x84', '\x43', '\x2', '\x834', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x835', '\x839', '\t', '\x11', '\x2', '\x2', '\x836', '\x83A', '\x5', 
		'\x82', '\x42', '\x2', '\x837', '\x83A', '\x5', '\x84', '\x43', '\x2', 
		'\x838', '\x83A', '\x5', '\x86', '\x44', '\x2', '\x839', '\x836', '\x3', 
		'\x2', '\x2', '\x2', '\x839', '\x837', '\x3', '\x2', '\x2', '\x2', '\x839', 
		'\x838', '\x3', '\x2', '\x2', '\x2', '\x83A', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x83B', '\x83C', '\a', '\x1D2', '\x2', '\x2', '\x83C', '\x83D', 
		'\x5', '\x436', '\x21C', '\x2', '\x83D', '\x83E', '\a', '\x2EE', '\x2', 
		'\x2', '\x83E', '\x843', '\x5', '\xA0', 'Q', '\x2', '\x83F', '\x840', 
		'\a', '\x2F4', '\x2', '\x2', '\x840', '\x842', '\x5', '\xA0', 'Q', '\x2', 
		'\x841', '\x83F', '\x3', '\x2', '\x2', '\x2', '\x842', '\x845', '\x3', 
		'\x2', '\x2', '\x2', '\x843', '\x841', '\x3', '\x2', '\x2', '\x2', '\x843', 
		'\x844', '\x3', '\x2', '\x2', '\x2', '\x844', '\x846', '\x3', '\x2', '\x2', 
		'\x2', '\x845', '\x843', '\x3', '\x2', '\x2', '\x2', '\x846', '\x847', 
		'\a', '\x2EF', '\x2', '\x2', '\x847', '\x852', '\t', '\x2', '\x2', '\x2', 
		'\x848', '\x853', '\x5', '\x23C', '\x11F', '\x2', '\x849', '\x84B', '\a', 
		'\x89', '\x2', '\x2', '\x84A', '\x849', '\x3', '\x2', '\x2', '\x2', '\x84A', 
		'\x84B', '\x3', '\x2', '\x2', '\x2', '\x84B', '\x84D', '\x3', '\x2', '\x2', 
		'\x2', '\x84C', '\x84E', '\x5', '\x24A', '\x126', '\x2', '\x84D', '\x84C', 
		'\x3', '\x2', '\x2', '\x2', '\x84D', '\x84E', '\x3', '\x2', '\x2', '\x2', 
		'\x84E', '\x84F', '\x3', '\x2', '\x2', '\x2', '\x84F', '\x850', '\x5', 
		'\x296', '\x14C', '\x2', '\x850', '\x851', '\a', '\x300', '\x2', '\x2', 
		'\x851', '\x853', '\x3', '\x2', '\x2', '\x2', '\x852', '\x848', '\x3', 
		'\x2', '\x2', '\x2', '\x852', '\x84A', '\x3', '\x2', '\x2', '\x2', '\x853', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x854', '\x855', '\a', '\xE2', '\x2', 
		'\x2', '\x855', '\x861', '\x5', '\x434', '\x21B', '\x2', '\x856', '\x857', 
		'\a', '\x2EE', '\x2', '\x2', '\x857', '\x85C', '\x5', '\xA0', 'Q', '\x2', 
		'\x858', '\x859', '\a', '\x2F4', '\x2', '\x2', '\x859', '\x85B', '\x5', 
		'\xA0', 'Q', '\x2', '\x85A', '\x858', '\x3', '\x2', '\x2', '\x2', '\x85B', 
		'\x85E', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x85A', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x85D', '\x3', '\x2', '\x2', '\x2', '\x85D', '\x85F', 
		'\x3', '\x2', '\x2', '\x2', '\x85E', '\x85C', '\x3', '\x2', '\x2', '\x2', 
		'\x85F', '\x860', '\a', '\x2EF', '\x2', '\x2', '\x860', '\x862', '\x3', 
		'\x2', '\x2', '\x2', '\x861', '\x856', '\x3', '\x2', '\x2', '\x2', '\x861', 
		'\x862', '\x3', '\x2', '\x2', '\x2', '\x862', '\x863', '\x3', '\x2', '\x2', 
		'\x2', '\x863', '\x864', '\a', '\x1F9', '\x2', '\x2', '\x864', '\x865', 
		'\x5', '\x44E', '\x228', '\x2', '\x865', '\x870', '\t', '\x2', '\x2', 
		'\x2', '\x866', '\x871', '\x5', '\x23C', '\x11F', '\x2', '\x867', '\x869', 
		'\a', '\x89', '\x2', '\x2', '\x868', '\x867', '\x3', '\x2', '\x2', '\x2', 
		'\x868', '\x869', '\x3', '\x2', '\x2', '\x2', '\x869', '\x86B', '\x3', 
		'\x2', '\x2', '\x2', '\x86A', '\x86C', '\x5', '\x24A', '\x126', '\x2', 
		'\x86B', '\x86A', '\x3', '\x2', '\x2', '\x2', '\x86B', '\x86C', '\x3', 
		'\x2', '\x2', '\x2', '\x86C', '\x86D', '\x3', '\x2', '\x2', '\x2', '\x86D', 
		'\x86E', '\x5', '\x296', '\x14C', '\x2', '\x86E', '\x86F', '\a', '\x300', 
		'\x2', '\x2', '\x86F', '\x871', '\x3', '\x2', '\x2', '\x2', '\x870', '\x866', 
		'\x3', '\x2', '\x2', '\x2', '\x870', '\x868', '\x3', '\x2', '\x2', '\x2', 
		'\x871', '\x85', '\x3', '\x2', '\x2', '\x2', '\x872', '\x874', '\a', '\xD0', 
		'\x2', '\x2', '\x873', '\x872', '\x3', '\x2', '\x2', '\x2', '\x873', '\x874', 
		'\x3', '\x2', '\x2', '\x2', '\x874', '\x876', '\x3', '\x2', '\x2', '\x2', 
		'\x875', '\x877', '\a', '\x110', '\x2', '\x2', '\x876', '\x875', '\x3', 
		'\x2', '\x2', '\x2', '\x876', '\x877', '\x3', '\x2', '\x2', '\x2', '\x877', 
		'\x878', '\x3', '\x2', '\x2', '\x2', '\x878', '\x879', '\a', 'g', '\x2', 
		'\x2', '\x879', '\x87A', '\a', '\xE2', '\x2', '\x2', '\x87A', '\x88C', 
		'\x5', '\x44E', '\x228', '\x2', '\x87B', '\x87C', '\a', '\x2EE', '\x2', 
		'\x2', '\x87C', '\x87D', '\a', '\x217', '\x2', '\x2', '\x87D', '\x87E', 
		'\a', '\x107', '\x2', '\x2', '\x87E', '\x87F', '\a', '\x1A5', '\x2', '\x2', 
		'\x87F', '\x880', '\x5', '\x44E', '\x228', '\x2', '\x880', '\x881', '\a', 
		'\x2F4', '\x2', '\x2', '\x881', '\x882', '\x3', '\x2', '\x2', '\x2', '\x882', 
		'\x887', '\x5', '\xA0', 'Q', '\x2', '\x883', '\x884', '\a', '\x2F4', '\x2', 
		'\x2', '\x884', '\x886', '\x5', '\xA0', 'Q', '\x2', '\x885', '\x883', 
		'\x3', '\x2', '\x2', '\x2', '\x886', '\x889', '\x3', '\x2', '\x2', '\x2', 
		'\x887', '\x885', '\x3', '\x2', '\x2', '\x2', '\x887', '\x888', '\x3', 
		'\x2', '\x2', '\x2', '\x888', '\x88A', '\x3', '\x2', '\x2', '\x2', '\x889', 
		'\x887', '\x3', '\x2', '\x2', '\x2', '\x88A', '\x88B', '\a', '\x2EF', 
		'\x2', '\x2', '\x88B', '\x88D', '\x3', '\x2', '\x2', '\x2', '\x88C', '\x87B', 
		'\x3', '\x2', '\x2', '\x2', '\x88C', '\x88D', '\x3', '\x2', '\x2', '\x2', 
		'\x88D', '\x88E', '\x3', '\x2', '\x2', '\x2', '\x88E', '\x88F', '\a', 
		'\x1F9', '\x2', '\x2', '\x88F', '\x890', '\a', '\x217', '\x2', '\x2', 
		'\x890', '\x891', '\a', '\x19', '\x2', '\x2', '\x891', '\x892', '\a', 
		'\x1F5', '\x2', '\x2', '\x892', '\x89D', '\t', '\x2', '\x2', '\x2', '\x893', 
		'\x89E', '\x5', '\x23C', '\x11F', '\x2', '\x894', '\x896', '\a', '\x89', 
		'\x2', '\x2', '\x895', '\x894', '\x3', '\x2', '\x2', '\x2', '\x895', '\x896', 
		'\x3', '\x2', '\x2', '\x2', '\x896', '\x898', '\x3', '\x2', '\x2', '\x2', 
		'\x897', '\x899', '\x5', '\x24A', '\x126', '\x2', '\x898', '\x897', '\x3', 
		'\x2', '\x2', '\x2', '\x898', '\x899', '\x3', '\x2', '\x2', '\x2', '\x899', 
		'\x89A', '\x3', '\x2', '\x2', '\x2', '\x89A', '\x89B', '\x5', '\x296', 
		'\x14C', '\x2', '\x89B', '\x89C', '\a', '\x300', '\x2', '\x2', '\x89C', 
		'\x89E', '\x3', '\x2', '\x2', '\x2', '\x89D', '\x893', '\x3', '\x2', '\x2', 
		'\x2', '\x89D', '\x895', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x89F', '\x8A1', '\a', '\x187', '\x2', '\x2', 
		'\x8A0', '\x89F', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A1', '\x3', 
		'\x2', '\x2', '\x2', '\x8A1', '\x8A2', '\x3', '\x2', '\x2', '\x2', '\x8A2', 
		'\x8A3', '\t', '\x12', '\x2', '\x2', '\x8A3', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8A4', '\x8A5', '\x5', '\x468', '\x235', '\x2', '\x8A5', '\x8A7', 
		'\x5', '\x44E', '\x228', '\x2', '\x8A6', '\x8A8', '\x5', '\x8C', 'G', 
		'\x2', '\x8A7', '\x8A6', '\x3', '\x2', '\x2', '\x2', '\x8A7', '\x8A8', 
		'\x3', '\x2', '\x2', '\x2', '\x8A8', '\x8AB', '\x3', '\x2', '\x2', '\x2', 
		'\x8A9', '\x8AB', '\x5', '\x8E', 'H', '\x2', '\x8AA', '\x8A4', '\x3', 
		'\x2', '\x2', '\x2', '\x8AA', '\x8A9', '\x3', '\x2', '\x2', '\x2', '\x8AB', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8AC', '\x8AD', '\a', '\xC9', '\x2', 
		'\x2', '\x8AD', '\x8AE', '\a', '\x164', '\x2', '\x2', '\x8AE', '\x8AF', 
		'\x5', '\x37A', '\x1BE', '\x2', '\x8AF', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8B0', '\x8B2', '\x5', '\x88', '\x45', '\x2', '\x8B1', '\x8B0', 
		'\x3', '\x2', '\x2', '\x2', '\x8B1', '\x8B2', '\x3', '\x2', '\x2', '\x2', 
		'\x8B2', '\x8B4', '\x3', '\x2', '\x2', '\x2', '\x8B3', '\x8B5', '\x5', 
		'\x90', 'I', '\x2', '\x8B4', '\x8B3', '\x3', '\x2', '\x2', '\x2', '\x8B5', 
		'\x8B6', '\x3', '\x2', '\x2', '\x2', '\x8B6', '\x8B4', '\x3', '\x2', '\x2', 
		'\x2', '\x8B6', '\x8B7', '\x3', '\x2', '\x2', '\x2', '\x8B7', '\x8BA', 
		'\x3', '\x2', '\x2', '\x2', '\x8B8', '\x8B9', '\a', '\x2F4', '\x2', '\x2', 
		'\x8B9', '\x8BB', '\x5', '\x9C', 'O', '\x2', '\x8BA', '\x8B8', '\x3', 
		'\x2', '\x2', '\x2', '\x8BA', '\x8BB', '\x3', '\x2', '\x2', '\x2', '\x8BB', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8C0', '\x5', '\x92', 'J', 
		'\x2', '\x8BD', '\x8C0', '\x5', '\x98', 'M', '\x2', '\x8BE', '\x8C0', 
		'\x5', '\x9A', 'N', '\x2', '\x8BF', '\x8BC', '\x3', '\x2', '\x2', '\x2', 
		'\x8BF', '\x8BD', '\x3', '\x2', '\x2', '\x2', '\x8BF', '\x8BE', '\x3', 
		'\x2', '\x2', '\x2', '\x8C0', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8C1', 
		'\x8C4', '\t', '\x11', '\x2', '\x2', '\x8C2', '\x8C5', '\x5', '\x94', 
		'K', '\x2', '\x8C3', '\x8C5', '\x5', '\x96', 'L', '\x2', '\x8C4', '\x8C2', 
		'\x3', '\x2', '\x2', '\x2', '\x8C4', '\x8C3', '\x3', '\x2', '\x2', '\x2', 
		'\x8C5', '\x93', '\x3', '\x2', '\x2', '\x2', '\x8C6', '\x8C7', '\a', '\x1D2', 
		'\x2', '\x2', '\x8C7', '\x8C8', '\x5', '\x436', '\x21C', '\x2', '\x8C8', 
		'\x8C9', '\a', '\x2EE', '\x2', '\x2', '\x8C9', '\x8CE', '\x5', '\xA0', 
		'Q', '\x2', '\x8CA', '\x8CB', '\a', '\x2F4', '\x2', '\x2', '\x8CB', '\x8CD', 
		'\x5', '\xA0', 'Q', '\x2', '\x8CC', '\x8CA', '\x3', '\x2', '\x2', '\x2', 
		'\x8CD', '\x8D0', '\x3', '\x2', '\x2', '\x2', '\x8CE', '\x8CC', '\x3', 
		'\x2', '\x2', '\x2', '\x8CE', '\x8CF', '\x3', '\x2', '\x2', '\x2', '\x8CF', 
		'\x8D1', '\x3', '\x2', '\x2', '\x2', '\x8D0', '\x8CE', '\x3', '\x2', '\x2', 
		'\x2', '\x8D1', '\x8D4', '\a', '\x2EF', '\x2', '\x2', '\x8D2', '\x8D3', 
		'\t', '\x2', '\x2', '\x2', '\x8D3', '\x8D5', '\x5', '\x23C', '\x11F', 
		'\x2', '\x8D4', '\x8D2', '\x3', '\x2', '\x2', '\x2', '\x8D4', '\x8D5', 
		'\x3', '\x2', '\x2', '\x2', '\x8D5', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x8D6', '\x8D7', '\a', '\xE2', '\x2', '\x2', '\x8D7', '\x8E3', '\x5', 
		'\x434', '\x21B', '\x2', '\x8D8', '\x8D9', '\a', '\x2EE', '\x2', '\x2', 
		'\x8D9', '\x8DE', '\x5', '\xA0', 'Q', '\x2', '\x8DA', '\x8DB', '\a', '\x2F4', 
		'\x2', '\x2', '\x8DB', '\x8DD', '\x5', '\xA0', 'Q', '\x2', '\x8DC', '\x8DA', 
		'\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8E0', '\x3', '\x2', '\x2', '\x2', 
		'\x8DE', '\x8DC', '\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8DF', '\x3', 
		'\x2', '\x2', '\x2', '\x8DF', '\x8E1', '\x3', '\x2', '\x2', '\x2', '\x8E0', 
		'\x8DE', '\x3', '\x2', '\x2', '\x2', '\x8E1', '\x8E2', '\a', '\x2EF', 
		'\x2', '\x2', '\x8E2', '\x8E4', '\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8D8', 
		'\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E4', '\x3', '\x2', '\x2', '\x2', 
		'\x8E4', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8EA', '\a', 
		'\x1F9', '\x2', '\x2', '\x8E6', '\x8EB', '\x5', '\x44E', '\x228', '\x2', 
		'\x8E7', '\x8E8', '\a', '\x217', '\x2', '\x2', '\x8E8', '\x8E9', '\a', 
		'\x19', '\x2', '\x2', '\x8E9', '\x8EB', '\a', '\x1F5', '\x2', '\x2', '\x8EA', 
		'\x8E6', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8E7', '\x3', '\x2', '\x2', 
		'\x2', '\x8EB', '\x8F4', '\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8ED', 
		'\t', '\x2', '\x2', '\x2', '\x8ED', '\x8F5', '\x5', '\x23C', '\x11F', 
		'\x2', '\x8EE', '\x8F0', '\a', '\xC9', '\x2', '\x2', '\x8EF', '\x8F1', 
		'\a', '\x290', '\x2', '\x2', '\x8F0', '\x8EF', '\x3', '\x2', '\x2', '\x2', 
		'\x8F0', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F2', '\x3', 
		'\x2', '\x2', '\x2', '\x8F2', '\x8F3', '\a', '\x164', '\x2', '\x2', '\x8F3', 
		'\x8F5', '\x5', '\x37A', '\x1BE', '\x2', '\x8F4', '\x8EC', '\x3', '\x2', 
		'\x2', '\x2', '\x8F4', '\x8EE', '\x3', '\x2', '\x2', '\x2', '\x8F4', '\x8F5', 
		'\x3', '\x2', '\x2', '\x2', '\x8F5', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x8F6', '\x8F8', '\a', '\xD0', '\x2', '\x2', '\x8F7', '\x8F6', '\x3', 
		'\x2', '\x2', '\x2', '\x8F7', '\x8F8', '\x3', '\x2', '\x2', '\x2', '\x8F8', 
		'\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8FB', '\a', '\x110', 
		'\x2', '\x2', '\x8FA', '\x8F9', '\x3', '\x2', '\x2', '\x2', '\x8FA', '\x8FB', 
		'\x3', '\x2', '\x2', '\x2', '\x8FB', '\x8FC', '\x3', '\x2', '\x2', '\x2', 
		'\x8FC', '\x8FD', '\a', 'g', '\x2', '\x2', '\x8FD', '\x8FE', '\a', '\xE2', 
		'\x2', '\x2', '\x8FE', '\x910', '\x5', '\x44E', '\x228', '\x2', '\x8FF', 
		'\x900', '\a', '\x2EE', '\x2', '\x2', '\x900', '\x901', '\a', '\x217', 
		'\x2', '\x2', '\x901', '\x902', '\a', '\x107', '\x2', '\x2', '\x902', 
		'\x903', '\a', '\x1A5', '\x2', '\x2', '\x903', '\x904', '\x5', '\x44E', 
		'\x228', '\x2', '\x904', '\x905', '\a', '\x2F4', '\x2', '\x2', '\x905', 
		'\x906', '\x3', '\x2', '\x2', '\x2', '\x906', '\x90B', '\x5', '\xA0', 
		'Q', '\x2', '\x907', '\x908', '\a', '\x2F4', '\x2', '\x2', '\x908', '\x90A', 
		'\x5', '\xA0', 'Q', '\x2', '\x909', '\x907', '\x3', '\x2', '\x2', '\x2', 
		'\x90A', '\x90D', '\x3', '\x2', '\x2', '\x2', '\x90B', '\x909', '\x3', 
		'\x2', '\x2', '\x2', '\x90B', '\x90C', '\x3', '\x2', '\x2', '\x2', '\x90C', 
		'\x90E', '\x3', '\x2', '\x2', '\x2', '\x90D', '\x90B', '\x3', '\x2', '\x2', 
		'\x2', '\x90E', '\x90F', '\a', '\x2EF', '\x2', '\x2', '\x90F', '\x911', 
		'\x3', '\x2', '\x2', '\x2', '\x910', '\x8FF', '\x3', '\x2', '\x2', '\x2', 
		'\x910', '\x911', '\x3', '\x2', '\x2', '\x2', '\x911', '\x912', '\x3', 
		'\x2', '\x2', '\x2', '\x912', '\x913', '\a', '\x1F9', '\x2', '\x2', '\x913', 
		'\x914', '\a', '\x217', '\x2', '\x2', '\x914', '\x915', '\a', '\x19', 
		'\x2', '\x2', '\x915', '\x918', '\a', '\x1F5', '\x2', '\x2', '\x916', 
		'\x917', '\t', '\x2', '\x2', '\x2', '\x917', '\x919', '\x5', '\x23C', 
		'\x11F', '\x2', '\x918', '\x916', '\x3', '\x2', '\x2', '\x2', '\x918', 
		'\x919', '\x3', '\x2', '\x2', '\x2', '\x919', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x91A', '\x91B', '\t', '\x10', '\x2', '\x2', '\x91B', '\x91C', 
		'\a', '\x152', '\x2', '\x2', '\x91C', '\x91D', '\x5', '\x96', 'L', '\x2', 
		'\x91D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x91E', '\x91F', '\a', '\x1C8', 
		'\x2', '\x2', '\x91F', '\x920', '\a', '\x1F3', '\x2', '\x2', '\x920', 
		'\x921', '\a', '\x2EE', '\x2', '\x2', '\x921', '\x926', '\x5', '\x9E', 
		'P', '\x2', '\x922', '\x923', '\a', '\x2F4', '\x2', '\x2', '\x923', '\x925', 
		'\x5', '\x9E', 'P', '\x2', '\x924', '\x922', '\x3', '\x2', '\x2', '\x2', 
		'\x925', '\x928', '\x3', '\x2', '\x2', '\x2', '\x926', '\x924', '\x3', 
		'\x2', '\x2', '\x2', '\x926', '\x927', '\x3', '\x2', '\x2', '\x2', '\x927', 
		'\x929', '\x3', '\x2', '\x2', '\x2', '\x928', '\x926', '\x3', '\x2', '\x2', 
		'\x2', '\x929', '\x92A', '\a', '\x2EF', '\x2', '\x2', '\x92A', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x92B', '\x92E', '\x5', '\x468', '\x235', 
		'\x2', '\x92C', '\x92E', '\a', '\x8E', '\x2', '\x2', '\x92D', '\x92B', 
		'\x3', '\x2', '\x2', '\x2', '\x92D', '\x92C', '\x3', '\x2', '\x2', '\x2', 
		'\x92E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x92F', '\x930', '\x5', 
		'\x46E', '\x238', '\x2', '\x930', '\x931', '\x5', '\x44E', '\x228', '\x2', 
		'\x931', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x932', '\x933', '\a', '\xA4', 
		'\x2', '\x2', '\x933', '\x934', '\a', '\x218', '\x2', '\x2', '\x934', 
		'\x935', '\x5', '\x492', '\x24A', '\x2', '\x935', '\x936', '\a', '\x300', 
		'\x2', '\x2', '\x936', '\xA3', '\x3', '\x2', '\x2', '\x2', '\x937', '\x938', 
		'\a', '\x10', '\x2', '\x2', '\x938', '\x939', '\a', '\x218', '\x2', '\x2', 
		'\x939', '\x93B', '\x5', '\x492', '\x24A', '\x2', '\x93A', '\x93C', '\x5', 
		'\xA8', 'U', '\x2', '\x93B', '\x93A', '\x3', '\x2', '\x2', '\x2', '\x93C', 
		'\x93D', '\x3', '\x2', '\x2', '\x2', '\x93D', '\x93B', '\x3', '\x2', '\x2', 
		'\x2', '\x93D', '\x93E', '\x3', '\x2', '\x2', '\x2', '\x93E', '\x93F', 
		'\x3', '\x2', '\x2', '\x2', '\x93F', '\x940', '\a', '\x300', '\x2', '\x2', 
		'\x940', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x941', '\x942', '\a', 'r', 
		'\x2', '\x2', '\x942', '\x943', '\a', '\x218', '\x2', '\x2', '\x943', 
		'\x947', '\x5', '\x492', '\x24A', '\x2', '\x944', '\x946', '\x5', '\xA8', 
		'U', '\x2', '\x945', '\x944', '\x3', '\x2', '\x2', '\x2', '\x946', '\x949', 
		'\x3', '\x2', '\x2', '\x2', '\x947', '\x945', '\x3', '\x2', '\x2', '\x2', 
		'\x947', '\x948', '\x3', '\x2', '\x2', '\x2', '\x948', '\x94A', '\x3', 
		'\x2', '\x2', '\x2', '\x949', '\x947', '\x3', '\x2', '\x2', '\x2', '\x94A', 
		'\x94B', '\a', '\x300', '\x2', '\x2', '\x94B', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x94C', '\x94D', '\a', '\xFD', '\x2', '\x2', '\x94D', '\x951', 
		'\a', '?', '\x2', '\x2', '\x94E', '\x94F', '\a', '\x238', '\x2', '\x2', 
		'\x94F', '\x951', '\a', '\x2A2', '\x2', '\x2', '\x950', '\x94C', '\x3', 
		'\x2', '\x2', '\x2', '\x950', '\x94E', '\x3', '\x2', '\x2', '\x2', '\x951', 
		'\x952', '\x3', '\x2', '\x2', '\x2', '\x952', '\x967', '\x5', '\x49E', 
		'\x250', '\x2', '\x953', '\x954', '\a', '\x14E', '\x2', '\x2', '\x954', 
		'\x957', '\x5', '\x49E', '\x250', '\x2', '\x955', '\x957', '\a', '\x17A', 
		'\x2', '\x2', '\x956', '\x953', '\x3', '\x2', '\x2', '\x2', '\x956', '\x955', 
		'\x3', '\x2', '\x2', '\x2', '\x957', '\x967', '\x3', '\x2', '\x2', '\x2', 
		'\x958', '\x959', '\a', '\x15A', '\x2', '\x2', '\x959', '\x95C', '\x5', 
		'\x49E', '\x250', '\x2', '\x95A', '\x95C', '\a', '\x17B', '\x2', '\x2', 
		'\x95B', '\x958', '\x3', '\x2', '\x2', '\x2', '\x95B', '\x95A', '\x3', 
		'\x2', '\x2', '\x2', '\x95C', '\x967', '\x3', '\x2', '\x2', '\x2', '\x95D', 
		'\x967', '\t', '\x13', '\x2', '\x2', '\x95E', '\x95F', '\a', '\x41', '\x2', 
		'\x2', '\x95F', '\x962', '\x5', '\x49E', '\x250', '\x2', '\x960', '\x962', 
		'\a', '\x170', '\x2', '\x2', '\x961', '\x95E', '\x3', '\x2', '\x2', '\x2', 
		'\x961', '\x960', '\x3', '\x2', '\x2', '\x2', '\x962', '\x967', '\x3', 
		'\x2', '\x2', '\x2', '\x963', '\x967', '\t', '\x14', '\x2', '\x2', '\x964', 
		'\x967', '\t', '\x15', '\x2', '\x2', '\x965', '\x967', '\t', '\x16', '\x2', 
		'\x2', '\x966', '\x950', '\x3', '\x2', '\x2', '\x2', '\x966', '\x956', 
		'\x3', '\x2', '\x2', '\x2', '\x966', '\x95B', '\x3', '\x2', '\x2', '\x2', 
		'\x966', '\x95D', '\x3', '\x2', '\x2', '\x2', '\x966', '\x961', '\x3', 
		'\x2', '\x2', '\x2', '\x966', '\x963', '\x3', '\x2', '\x2', '\x2', '\x966', 
		'\x964', '\x3', '\x2', '\x2', '\x2', '\x966', '\x965', '\x3', '\x2', '\x2', 
		'\x2', '\x967', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x968', '\x96A', 
		'\a', 'r', '\x2', '\x2', '\x969', '\x96B', '\a', '\x27C', '\x2', '\x2', 
		'\x96A', '\x969', '\x3', '\x2', '\x2', '\x2', '\x96A', '\x96B', '\x3', 
		'\x2', '\x2', '\x2', '\x96B', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x96C', 
		'\x96D', '\a', '\x100', '\x2', '\x2', '\x96D', '\x96E', '\x5', '\x43C', 
		'\x21F', '\x2', '\x96E', '\x96F', '\a', '\x198', '\x2', '\x2', '\x96F', 
		'\x970', '\x5', '\x410', '\x209', '\x2', '\x970', '\x973', '\x5', '\x444', 
		'\x223', '\x2', '\x971', '\x972', '\a', '\x252', '\x2', '\x2', '\x972', 
		'\x974', '\a', '\x30C', '\x2', '\x2', '\x973', '\x971', '\x3', '\x2', 
		'\x2', '\x2', '\x973', '\x974', '\x3', '\x2', '\x2', '\x2', '\x974', '\x977', 
		'\x3', '\x2', '\x2', '\x2', '\x975', '\x976', '\a', '\x61', '\x2', '\x2', 
		'\x976', '\x978', '\a', '\x23D', '\x2', '\x2', '\x977', '\x975', '\x3', 
		'\x2', '\x2', '\x2', '\x977', '\x978', '\x3', '\x2', '\x2', '\x2', '\x978', 
		'\x979', '\x3', '\x2', '\x2', '\x2', '\x979', '\x97A', '\a', '\x300', 
		'\x2', '\x2', '\x97A', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x97B', '\x97C', 
		'\a', '\x10', '\x2', '\x2', '\x97C', '\x97D', '\a', '\x100', '\x2', '\x2', 
		'\x97D', '\x97E', '\x5', '\x43C', '\x21F', '\x2', '\x97E', '\x97F', '\a', 
		'\x1ED', '\x2', '\x2', '\x97F', '\x980', '\a', '\x26A', '\x2', '\x2', 
		'\x980', '\x981', '\x5', '\x43C', '\x21F', '\x2', '\x981', '\x982', '\a', 
		'\x300', '\x2', '\x2', '\x982', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x983', 
		'\x984', '\a', 'r', '\x2', '\x2', '\x984', '\x985', '\a', '\x288', '\x2', 
		'\x2', '\x985', '\x98F', '\x5', '\x41E', '\x210', '\x2', '\x986', '\x990', 
		'\x5', '\xB4', '[', '\x2', '\x987', '\x990', '\x5', '\xB6', '\\', '\x2', 
		'\x988', '\x990', '\x5', '\xB8', ']', '\x2', '\x989', '\x990', '\x5', 
		'\xBA', '^', '\x2', '\x98A', '\x990', '\x5', '\xBC', '_', '\x2', '\x98B', 
		'\x990', '\x5', '\xC2', '\x62', '\x2', '\x98C', '\x990', '\x5', '\xC4', 
		'\x63', '\x2', '\x98D', '\x990', '\x5', '\xC6', '\x64', '\x2', '\x98E', 
		'\x990', '\x5', '\xDE', 'p', '\x2', '\x98F', '\x986', '\x3', '\x2', '\x2', 
		'\x2', '\x98F', '\x987', '\x3', '\x2', '\x2', '\x2', '\x98F', '\x988', 
		'\x3', '\x2', '\x2', '\x2', '\x98F', '\x989', '\x3', '\x2', '\x2', '\x2', 
		'\x98F', '\x98A', '\x3', '\x2', '\x2', '\x2', '\x98F', '\x98B', '\x3', 
		'\x2', '\x2', '\x2', '\x98F', '\x98C', '\x3', '\x2', '\x2', '\x2', '\x98F', 
		'\x98D', '\x3', '\x2', '\x2', '\x2', '\x98F', '\x98E', '\x3', '\x2', '\x2', 
		'\x2', '\x990', '\x991', '\x3', '\x2', '\x2', '\x2', '\x991', '\x98F', 
		'\x3', '\x2', '\x2', '\x2', '\x991', '\x992', '\x3', '\x2', '\x2', '\x2', 
		'\x992', '\x993', '\x3', '\x2', '\x2', '\x2', '\x993', '\x994', '\a', 
		'\x300', '\x2', '\x2', '\x994', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x995', 
		'\x996', '\a', '\x10', '\x2', '\x2', '\x996', '\x997', '\a', '\x288', 
		'\x2', '\x2', '\x997', '\x9A3', '\x5', '\x41E', '\x210', '\x2', '\x998', 
		'\x9A4', '\x5', '\xB2', 'Z', '\x2', '\x999', '\x9A4', '\x5', '\xB6', '\\', 
		'\x2', '\x99A', '\x9A4', '\x5', '\xB8', ']', '\x2', '\x99B', '\x9A4', 
		'\x5', '\xBA', '^', '\x2', '\x99C', '\x9A4', '\x5', '\xBC', '_', '\x2', 
		'\x99D', '\x9A4', '\x5', '\xC0', '\x61', '\x2', '\x99E', '\x9A4', '\x5', 
		'\xC2', '\x62', '\x2', '\x99F', '\x9A4', '\x5', '\xC4', '\x63', '\x2', 
		'\x9A0', '\x9A4', '\x5', '\xC8', '\x65', '\x2', '\x9A1', '\x9A4', '\x5', 
		'\xDE', 'p', '\x2', '\x9A2', '\x9A4', '\x5', '\xD2', 'j', '\x2', '\x9A3', 
		'\x998', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x999', '\x3', '\x2', '\x2', 
		'\x2', '\x9A3', '\x99A', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x99B', 
		'\x3', '\x2', '\x2', '\x2', '\x9A3', '\x99C', '\x3', '\x2', '\x2', '\x2', 
		'\x9A3', '\x99D', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x99E', '\x3', 
		'\x2', '\x2', '\x2', '\x9A3', '\x99F', '\x3', '\x2', '\x2', '\x2', '\x9A3', 
		'\x9A0', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x9A1', '\x3', '\x2', '\x2', 
		'\x2', '\x9A3', '\x9A2', '\x3', '\x2', '\x2', '\x2', '\x9A4', '\x9A5', 
		'\x3', '\x2', '\x2', '\x2', '\x9A5', '\x9A3', '\x3', '\x2', '\x2', '\x2', 
		'\x9A5', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A6', '\x9A7', '\x3', 
		'\x2', '\x2', '\x2', '\x9A7', '\x9A8', '\a', '\x300', '\x2', '\x2', '\x9A8', 
		'\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9A9', '\x9AB', '\a', '\x2F4', 
		'\x2', '\x2', '\x9AA', '\x9A9', '\x3', '\x2', '\x2', '\x2', '\x9AA', '\x9AB', 
		'\x3', '\x2', '\x2', '\x2', '\x9AB', '\x9AC', '\x3', '\x2', '\x2', '\x2', 
		'\x9AC', '\x9AE', '\x5', '\x41E', '\x210', '\x2', '\x9AD', '\x9AA', '\x3', 
		'\x2', '\x2', '\x2', '\x9AE', '\x9AF', '\x3', '\x2', '\x2', '\x2', '\x9AF', 
		'\x9AD', '\x3', '\x2', '\x2', '\x2', '\x9AF', '\x9B0', '\x3', '\x2', '\x2', 
		'\x2', '\x9B0', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x9B1', '\x9B2', 
		'\x5', '\xCA', '\x66', '\x2', '\x9B2', '\x9B3', '\a', '\x300', '\x2', 
		'\x2', '\x9B3', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9B4', '\x995', 
		'\x3', '\x2', '\x2', '\x2', '\x9B4', '\x9AD', '\x3', '\x2', '\x2', '\x2', 
		'\x9B5', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x9B6', '\x9B9', '\x5', 
		'\xB4', '[', '\x2', '\x9B7', '\x9B8', '\a', '\x1EE', '\x2', '\x2', '\x9B8', 
		'\x9BA', '\x5', '\x48C', '\x247', '\x2', '\x9B9', '\x9B7', '\x3', '\x2', 
		'\x2', '\x2', '\x9B9', '\x9BA', '\x3', '\x2', '\x2', '\x2', '\x9BA', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\x9BB', '\x9BC', '\a', '\xF3', '\x2', '\x2', 
		'\x9BC', '\x9BD', '\a', '?', '\x2', '\x2', '\x9BD', '\x9BE', '\x5', '\x48C', 
		'\x247', '\x2', '\x9BE', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x9BF', 
		'\x9C0', '\a', '\xF3', '\x2', '\x2', '\x9C0', '\x9C3', '\t', '\x17', '\x2', 
		'\x2', '\x9C1', '\x9C2', '\a', '\x19', '\x2', '\x2', '\x9C2', '\x9C4', 
		'\x5', '\x4A4', '\x253', '\x2', '\x9C3', '\x9C1', '\x3', '\x2', '\x2', 
		'\x2', '\x9C3', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x9C4', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x9C5', '\x9C6', '\t', '\x18', '\x2', '\x2', 
		'\x9C6', '\x9C7', '\a', '\x252', '\x2', '\x2', '\x9C7', '\x9C8', '\x5', 
		'\x48C', '\x247', '\x2', '\x9C8', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\x9C9', '\x9CC', '\a', '\x1D9', '\x2', '\x2', '\x9CA', '\x9CD', '\x5', 
		'\x216', '\x10C', '\x2', '\x9CB', '\x9CD', '\a', '\x27D', '\x2', '\x2', 
		'\x9CC', '\x9CA', '\x3', '\x2', '\x2', '\x2', '\x9CC', '\x9CB', '\x3', 
		'\x2', '\x2', '\x2', '\x9CD', '\x9CE', '\x3', '\x2', '\x2', '\x2', '\x9CE', 
		'\x9CF', '\a', '\x198', '\x2', '\x2', '\x9CF', '\x9D0', '\x5', '\x48C', 
		'\x247', '\x2', '\x9D0', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x9D1', 
		'\x9D2', '\a', '\x1D4', '\x2', '\x2', '\x9D2', '\x9D3', '\x5', '\x48C', 
		'\x247', '\x2', '\x9D3', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x9D4', 
		'\x9D6', '\a', '\x2F4', '\x2', '\x2', '\x9D5', '\x9D4', '\x3', '\x2', 
		'\x2', '\x2', '\x9D5', '\x9D6', '\x3', '\x2', '\x2', '\x2', '\x9D6', '\x9D7', 
		'\x3', '\x2', '\x2', '\x2', '\x9D7', '\x9D9', '\x5', '\x404', '\x203', 
		'\x2', '\x9D8', '\x9D5', '\x3', '\x2', '\x2', '\x2', '\x9D9', '\x9DA', 
		'\x3', '\x2', '\x2', '\x2', '\x9DA', '\x9D8', '\x3', '\x2', '\x2', '\x2', 
		'\x9DA', '\x9DB', '\x3', '\x2', '\x2', '\x2', '\x9DB', '\x9EC', '\x3', 
		'\x2', '\x2', '\x2', '\x9DC', '\x9E8', '\a', '\xE', '\x2', '\x2', '\x9DD', 
		'\x9E2', '\a', '\xBC', '\x2', '\x2', '\x9DE', '\x9E0', '\a', '\x2F4', 
		'\x2', '\x2', '\x9DF', '\x9DE', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9E0', 
		'\x3', '\x2', '\x2', '\x2', '\x9E0', '\x9E1', '\x3', '\x2', '\x2', '\x2', 
		'\x9E1', '\x9E3', '\x5', '\x404', '\x203', '\x2', '\x9E2', '\x9DF', '\x3', 
		'\x2', '\x2', '\x2', '\x9E3', '\x9E4', '\x3', '\x2', '\x2', '\x2', '\x9E4', 
		'\x9E2', '\x3', '\x2', '\x2', '\x2', '\x9E4', '\x9E5', '\x3', '\x2', '\x2', 
		'\x2', '\x9E5', '\x9E7', '\x3', '\x2', '\x2', '\x2', '\x9E6', '\x9DD', 
		'\x3', '\x2', '\x2', '\x2', '\x9E7', '\x9EA', '\x3', '\x2', '\x2', '\x2', 
		'\x9E8', '\x9E6', '\x3', '\x2', '\x2', '\x2', '\x9E8', '\x9E9', '\x3', 
		'\x2', '\x2', '\x2', '\x9E9', '\x9EC', '\x3', '\x2', '\x2', '\x2', '\x9EA', 
		'\x9E8', '\x3', '\x2', '\x2', '\x2', '\x9EB', '\x9D8', '\x3', '\x2', '\x2', 
		'\x2', '\x9EB', '\x9DC', '\x3', '\x2', '\x2', '\x2', '\x9EC', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x9ED', '\x9EE', '\a', '\x8E', '\x2', '\x2', 
		'\x9EE', '\x9F1', '\a', '\x1FF', '\x2', '\x2', '\x9EF', '\x9F2', '\a', 
		'\x17D', '\x2', '\x2', '\x9F0', '\x9F2', '\x5', '\xBE', '`', '\x2', '\x9F1', 
		'\x9EF', '\x3', '\x2', '\x2', '\x2', '\x9F1', '\x9F0', '\x3', '\x2', '\x2', 
		'\x2', '\x9F2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x9F3', '\x9F4', 
		'\a', '\x1B2', '\x2', '\x2', '\x9F4', '\x9F5', '\a', '\xC6', '\x2', '\x2', 
		'\x9F5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x9F6', '\x9F7', '\a', '\x4', 
		'\x2', '\x2', '\x9F7', '\x9F8', '\t', '\x19', '\x2', '\x2', '\x9F8', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x9F9', '\x9FA', '\a', '\xB0', '\x2', '\x2', 
		'\x9FA', '\x9FB', '\a', '\xAB', '\x2', '\x2', '\x9FB', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\x9FC', '\xA06', '\x5', '\xC6', '\x64', '\x2', '\x9FD', 
		'\xA02', '\a', '\xDC', '\x2', '\x2', '\x9FE', '\xA00', '\a', '\x2F4', 
		'\x2', '\x2', '\x9FF', '\x9FE', '\x3', '\x2', '\x2', '\x2', '\x9FF', '\xA00', 
		'\x3', '\x2', '\x2', '\x2', '\xA00', '\xA01', '\x3', '\x2', '\x2', '\x2', 
		'\xA01', '\xA03', '\x5', '\x498', '\x24D', '\x2', '\xA02', '\x9FF', '\x3', 
		'\x2', '\x2', '\x2', '\xA03', '\xA04', '\x3', '\x2', '\x2', '\x2', '\xA04', 
		'\xA02', '\x3', '\x2', '\x2', '\x2', '\xA04', '\xA05', '\x3', '\x2', '\x2', 
		'\x2', '\xA05', '\xA07', '\x3', '\x2', '\x2', '\x2', '\xA06', '\x9FD', 
		'\x3', '\x2', '\x2', '\x2', '\xA06', '\xA07', '\x3', '\x2', '\x2', '\x2', 
		'\xA07', '\xA09', '\x3', '\x2', '\x2', '\x2', '\xA08', '\xA0A', '\a', 
		'\xDA', '\x2', '\x2', '\xA09', '\xA08', '\x3', '\x2', '\x2', '\x2', '\xA09', 
		'\xA0A', '\x3', '\x2', '\x2', '\x2', '\xA0A', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xA0B', '\xA0C', '\a', '\x1FC', '\x2', '\x2', '\xA0C', '\xA0D', 
		'\a', '\x63', '\x2', '\x2', '\xA0D', '\xA11', '\a', '\x25B', '\x2', '\x2', 
		'\xA0E', '\xA0F', '\a', '\xB5', '\x2', '\x2', '\xA0F', '\xA12', '\a', 
		'\x287', '\x2', '\x2', '\xA10', '\xA12', '\x5', '\x41E', '\x210', '\x2', 
		'\xA11', '\xA0E', '\x3', '\x2', '\x2', '\x2', '\xA11', '\xA10', '\x3', 
		'\x2', '\x2', '\x2', '\xA12', '\xA33', '\x3', '\x2', '\x2', '\x2', '\xA13', 
		'\xA14', '\a', '\xE7', '\x2', '\x2', '\xA14', '\xA15', '\a', '\x63', '\x2', 
		'\x2', '\xA15', '\xA30', '\a', '\x25B', '\x2', '\x2', '\xA16', '\xA17', 
		'\a', '\xB5', '\x2', '\x2', '\xA17', '\xA31', '\a', '\x287', '\x2', '\x2', 
		'\xA18', '\xA20', '\x5', '\x41E', '\x210', '\x2', '\xA19', '\xA1E', '\a', 
		'\x2A2', '\x2', '\x2', '\xA1A', '\xA1B', '\a', '\x17E', '\x2', '\x2', 
		'\xA1B', '\xA1F', '\a', '\x200', '\x2', '\x2', '\xA1C', '\xA1D', '\a', 
		'\x1FF', '\x2', '\x2', '\xA1D', '\xA1F', '\x5', '\xBE', '`', '\x2', '\xA1E', 
		'\xA1A', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA1C', '\x3', '\x2', '\x2', 
		'\x2', '\xA1F', '\xA21', '\x3', '\x2', '\x2', '\x2', '\xA20', '\xA19', 
		'\x3', '\x2', '\x2', '\x2', '\xA20', '\xA21', '\x3', '\x2', '\x2', '\x2', 
		'\xA21', '\xA24', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA23', '\a', 
		' ', '\x2', '\x2', '\xA23', '\xA25', '\a', '\x1EF', '\x2', '\x2', '\xA24', 
		'\xA22', '\x3', '\x2', '\x2', '\x2', '\xA24', '\xA25', '\x3', '\x2', '\x2', 
		'\x2', '\xA25', '\xA2E', '\x3', '\x2', '\x2', '\x2', '\xA26', '\xA27', 
		'\a', '\x1F', '\x2', '\x2', '\xA27', '\xA2C', '\a', '\x28A', '\x2', '\x2', 
		'\xA28', '\xA2D', '\a', '\x1B2', '\x2', '\x2', '\xA29', '\xA2D', '\a', 
		'H', '\x2', '\x2', '\xA2A', '\xA2B', '\a', '\x9F', '\x2', '\x2', '\xA2B', 
		'\xA2D', '\a', '\x164', '\x2', '\x2', '\xA2C', '\xA28', '\x3', '\x2', 
		'\x2', '\x2', '\xA2C', '\xA29', '\x3', '\x2', '\x2', '\x2', '\xA2C', '\xA2A', 
		'\x3', '\x2', '\x2', '\x2', '\xA2D', '\xA2F', '\x3', '\x2', '\x2', '\x2', 
		'\xA2E', '\xA26', '\x3', '\x2', '\x2', '\x2', '\xA2E', '\xA2F', '\x3', 
		'\x2', '\x2', '\x2', '\xA2F', '\xA31', '\x3', '\x2', '\x2', '\x2', '\xA30', 
		'\xA16', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA18', '\x3', '\x2', '\x2', 
		'\x2', '\xA31', '\xA33', '\x3', '\x2', '\x2', '\x2', '\xA32', '\xA0B', 
		'\x3', '\x2', '\x2', '\x2', '\xA32', '\xA13', '\x3', '\x2', '\x2', '\x2', 
		'\xA33', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xA34', '\xA39', '\a', '\x2EE', 
		'\x2', '\x2', '\xA35', '\xA37', '\a', '\x2F4', '\x2', '\x2', '\xA36', 
		'\xA35', '\x3', '\x2', '\x2', '\x2', '\xA36', '\xA37', '\x3', '\x2', '\x2', 
		'\x2', '\xA37', '\xA38', '\x3', '\x2', '\x2', '\x2', '\xA38', '\xA3A', 
		'\x5', '\x48C', '\x247', '\x2', '\xA39', '\xA36', '\x3', '\x2', '\x2', 
		'\x2', '\xA3A', '\xA3B', '\x3', '\x2', '\x2', '\x2', '\xA3B', '\xA39', 
		'\x3', '\x2', '\x2', '\x2', '\xA3B', '\xA3C', '\x3', '\x2', '\x2', '\x2', 
		'\xA3C', '\xA3D', '\x3', '\x2', '\x2', '\x2', '\xA3D', '\xA3E', '\a', 
		'\x2EF', '\x2', '\x2', '\xA3E', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xA3F', 
		'\xA40', '\a', '\x21F', '\x2', '\x2', '\xA40', '\xA41', '\a', 'i', '\x2', 
		'\x2', '\xA41', '\xA45', '\a', '\x302', '\x2', '\x2', '\xA42', '\xA46', 
		'\a', '\xE', '\x2', '\x2', '\xA43', '\xA46', '\a', '\x8E', '\x2', '\x2', 
		'\xA44', '\xA46', '\x5', '\xCC', 'g', '\x2', '\xA45', '\xA42', '\x3', 
		'\x2', '\x2', '\x2', '\xA45', '\xA43', '\x3', '\x2', '\x2', '\x2', '\xA45', 
		'\xA44', '\x3', '\x2', '\x2', '\x2', '\xA46', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xA47', '\xA48', '\t', '\x1A', '\x2', '\x2', '\xA48', '\xA49', 
		'\a', 'i', '\x2', '\x2', '\xA49', '\xA4A', '\a', '\x302', '\x2', '\x2', 
		'\xA4A', '\xA4B', '\x5', '\xCC', 'g', '\x2', '\xA4B', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xA4C', '\xA53', '\x5', '\xCE', 'h', '\x2', '\xA4D', '\xA50', 
		'\x5', '\xD0', 'i', '\x2', '\xA4E', '\xA4F', '\a', '\xDC', '\x2', '\x2', 
		'\xA4F', '\xA51', '\x5', '\x432', '\x21A', '\x2', '\xA50', '\xA4E', '\x3', 
		'\x2', '\x2', '\x2', '\xA50', '\xA51', '\x3', '\x2', '\x2', '\x2', '\xA51', 
		'\xA53', '\x3', '\x2', '\x2', '\x2', '\xA52', '\xA4C', '\x3', '\x2', '\x2', 
		'\x2', '\xA52', '\xA4D', '\x3', '\x2', '\x2', '\x2', '\xA53', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xA54', '\xA55', '\a', '\xA4', '\x2', '\x2', 
		'\xA55', '\xA56', '\a', '\x100', '\x2', '\x2', '\xA56', '\xA57', '\x5', 
		'\x43C', '\x21F', '\x2', '\xA57', '\xA58', '\a', '\x300', '\x2', '\x2', 
		'\xA58', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xA59', '\xA5C', '\a', '\x1FC', 
		'\x2', '\x2', '\xA5A', '\xA5D', '\x5', '\xD8', 'm', '\x2', '\xA5B', '\xA5D', 
		'\x5', '\xDA', 'n', '\x2', '\xA5C', '\xA5A', '\x3', '\x2', '\x2', '\x2', 
		'\xA5C', '\xA5B', '\x3', '\x2', '\x2', '\x2', '\xA5D', '\xA5E', '\x3', 
		'\x2', '\x2', '\x2', '\xA5E', '\xA5F', '\a', '\x300', '\x2', '\x2', '\xA5F', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xA60', '\xA62', '\a', '\x2F4', '\x2', 
		'\x2', '\xA61', '\xA60', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA62', 
		'\x3', '\x2', '\x2', '\x2', '\xA62', '\xA65', '\x3', '\x2', '\x2', '\x2', 
		'\xA63', '\xA66', '\x5', '\x404', '\x203', '\x2', '\xA64', '\xA66', '\x5', 
		'\x460', '\x231', '\x2', '\xA65', '\xA63', '\x3', '\x2', '\x2', '\x2', 
		'\xA65', '\xA64', '\x3', '\x2', '\x2', '\x2', '\xA66', '\xA67', '\x3', 
		'\x2', '\x2', '\x2', '\xA67', '\xA6D', '\a', '\xE0', '\x2', '\x2', '\xA68', 
		'\xA6A', '\a', '\x2F4', '\x2', '\x2', '\xA69', '\xA68', '\x3', '\x2', 
		'\x2', '\x2', '\xA69', '\xA6A', '\x3', '\x2', '\x2', '\x2', '\xA6A', '\xA6B', 
		'\x3', '\x2', '\x2', '\x2', '\xA6B', '\xA6E', '\x5', '\x402', '\x202', 
		'\x2', '\xA6C', '\xA6E', '\a', '\x1D6', '\x2', '\x2', '\xA6D', '\xA69', 
		'\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA6C', '\x3', '\x2', '\x2', '\x2', 
		'\xA6E', '\xA6F', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA6D', '\x3', 
		'\x2', '\x2', '\x2', '\xA6F', '\xA70', '\x3', '\x2', '\x2', '\x2', '\xA70', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\xA71', '\xA73', '\a', '\x2F4', '\x2', 
		'\x2', '\xA72', '\xA71', '\x3', '\x2', '\x2', '\x2', '\xA72', '\xA73', 
		'\x3', '\x2', '\x2', '\x2', '\xA73', '\xA76', '\x3', '\x2', '\x2', '\x2', 
		'\xA74', '\xA77', '\x5', '\x404', '\x203', '\x2', '\xA75', '\xA77', '\x5', 
		'\x45E', '\x230', '\x2', '\xA76', '\xA74', '\x3', '\x2', '\x2', '\x2', 
		'\xA76', '\xA75', '\x3', '\x2', '\x2', '\x2', '\xA77', '\xA79', '\x3', 
		'\x2', '\x2', '\x2', '\xA78', '\xA72', '\x3', '\x2', '\x2', '\x2', '\xA79', 
		'\xA7A', '\x3', '\x2', '\x2', '\x2', '\xA7A', '\xA78', '\x3', '\x2', '\x2', 
		'\x2', '\xA7A', '\xA7B', '\x3', '\x2', '\x2', '\x2', '\xA7B', '\xA7C', 
		'\x3', '\x2', '\x2', '\x2', '\xA7C', '\xA7D', '\a', '\x198', '\x2', '\x2', 
		'\xA7D', '\xA7E', '\x5', '\x440', '\x221', '\x2', '\xA7E', '\xA7F', '\x3', 
		'\x2', '\x2', '\x2', '\xA7F', '\xA86', '\a', '\xE0', '\x2', '\x2', '\xA80', 
		'\xA82', '\a', '\x2F4', '\x2', '\x2', '\xA81', '\xA80', '\x3', '\x2', 
		'\x2', '\x2', '\xA81', '\xA82', '\x3', '\x2', '\x2', '\x2', '\xA82', '\xA83', 
		'\x3', '\x2', '\x2', '\x2', '\xA83', '\xA87', '\x5', '\x402', '\x202', 
		'\x2', '\xA84', '\xA87', '\a', '\x1D6', '\x2', '\x2', '\xA85', '\xA87', 
		'\x5', '\x404', '\x203', '\x2', '\xA86', '\xA81', '\x3', '\x2', '\x2', 
		'\x2', '\xA86', '\xA84', '\x3', '\x2', '\x2', '\x2', '\xA86', '\xA85', 
		'\x3', '\x2', '\x2', '\x2', '\xA87', '\xA88', '\x3', '\x2', '\x2', '\x2', 
		'\xA88', '\xA86', '\x3', '\x2', '\x2', '\x2', '\xA88', '\xA89', '\x3', 
		'\x2', '\x2', '\x2', '\xA89', '\xA8D', '\x3', '\x2', '\x2', '\x2', '\xA8A', 
		'\xA8B', '\a', '\x45', '\x2', '\x2', '\xA8B', '\xA8E', '\a', '\x66', '\x2', 
		'\x2', '\xA8C', '\xA8E', '\a', '\xDA', '\x2', '\x2', '\xA8D', '\xA8A', 
		'\x3', '\x2', '\x2', '\x2', '\xA8D', '\xA8C', '\x3', '\x2', '\x2', '\x2', 
		'\xA8D', '\xA8E', '\x3', '\x2', '\x2', '\x2', '\xA8E', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\xA8F', '\xA9B', '\a', '\xE7', '\x2', '\x2', '\xA90', 
		'\xA92', '\a', '\x2F4', '\x2', '\x2', '\xA91', '\xA90', '\x3', '\x2', 
		'\x2', '\x2', '\xA91', '\xA92', '\x3', '\x2', '\x2', '\x2', '\xA92', '\xA99', 
		'\x3', '\x2', '\x2', '\x2', '\xA93', '\xA9A', '\x5', '\x404', '\x203', 
		'\x2', '\xA94', '\xA9A', '\x5', '\x460', '\x231', '\x2', '\xA95', '\xA97', 
		'\x5', '\x45E', '\x230', '\x2', '\xA96', '\xA98', '\x5', '\x444', '\x223', 
		'\x2', '\xA97', '\xA96', '\x3', '\x2', '\x2', '\x2', '\xA97', '\xA98', 
		'\x3', '\x2', '\x2', '\x2', '\xA98', '\xA9A', '\x3', '\x2', '\x2', '\x2', 
		'\xA99', '\xA93', '\x3', '\x2', '\x2', '\x2', '\xA99', '\xA94', '\x3', 
		'\x2', '\x2', '\x2', '\xA99', '\xA95', '\x3', '\x2', '\x2', '\x2', '\xA9A', 
		'\xA9C', '\x3', '\x2', '\x2', '\x2', '\xA9B', '\xA91', '\x3', '\x2', '\x2', 
		'\x2', '\xA9C', '\xA9D', '\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA9B', 
		'\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA9E', '\xAA1', '\x3', '\x2', '\x2', '\x2', '\xA9F', '\xAA0', '\a', 
		'\x198', '\x2', '\x2', '\xAA0', '\xAA2', '\x5', '\x440', '\x221', '\x2', 
		'\xAA1', '\xA9F', '\x3', '\x2', '\x2', '\x2', '\xAA1', '\xAA2', '\x3', 
		'\x2', '\x2', '\x2', '\xAA2', '\xAA3', '\x3', '\x2', '\x2', '\x2', '\xAA3', 
		'\xAA9', '\a', '\x26A', '\x2', '\x2', '\xAA4', '\xAA6', '\a', '\x2F4', 
		'\x2', '\x2', '\xAA5', '\xAA4', '\x3', '\x2', '\x2', '\x2', '\xAA5', '\xAA6', 
		'\x3', '\x2', '\x2', '\x2', '\xAA6', '\xAA7', '\x3', '\x2', '\x2', '\x2', 
		'\xAA7', '\xAAA', '\x5', '\x402', '\x202', '\x2', '\xAA8', '\xAAA', '\a', 
		'\x1D6', '\x2', '\x2', '\xAA9', '\xAA5', '\x3', '\x2', '\x2', '\x2', '\xAA9', 
		'\xAA8', '\x3', '\x2', '\x2', '\x2', '\xAAA', '\xAAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAAB', '\xAA9', '\x3', '\x2', '\x2', '\x2', '\xAAB', '\xAAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAAC', '\xAB0', '\x3', '\x2', '\x2', '\x2', 
		'\xAAD', '\xAAE', '\a', '\x2A2', '\x2', '\x2', '\xAAE', '\xAAF', '\t', 
		'\x1B', '\x2', '\x2', '\xAAF', '\xAB1', '\a', '\x19C', '\x2', '\x2', '\xAB0', 
		'\xAAD', '\x3', '\x2', '\x2', '\x2', '\xAB0', '\xAB1', '\x3', '\x2', '\x2', 
		'\x2', '\xAB1', '\xAB5', '\x3', '\x2', '\x2', '\x2', '\xAB2', '\xAB3', 
		'\a', '\x2A2', '\x2', '\x2', '\xAB3', '\xAB4', '\a', '\xF0', '\x2', '\x2', 
		'\xAB4', '\xAB6', '\a', '\x19C', '\x2', '\x2', '\xAB5', '\xAB2', '\x3', 
		'\x2', '\x2', '\x2', '\xAB5', '\xAB6', '\x3', '\x2', '\x2', '\x2', '\xAB6', 
		'\xABA', '\x3', '\x2', '\x2', '\x2', '\xAB7', '\xAB8', '\a', '\x2A2', 
		'\x2', '\x2', '\xAB8', '\xAB9', '\a', '\xE7', '\x2', '\x2', '\xAB9', '\xABB', 
		'\a', '\x19C', '\x2', '\x2', '\xABA', '\xAB7', '\x3', '\x2', '\x2', '\x2', 
		'\xABA', '\xABB', '\x3', '\x2', '\x2', '\x2', '\xABB', '\xABD', '\x3', 
		'\x2', '\x2', '\x2', '\xABC', '\xABE', '\x5', '\xDE', 'p', '\x2', '\xABD', 
		'\xABC', '\x3', '\x2', '\x2', '\x2', '\xABD', '\xABE', '\x3', '\x2', '\x2', 
		'\x2', '\xABE', '\xABF', '\x3', '\x2', '\x2', '\x2', '\xABF', '\xAC0', 
		'\a', '\x300', '\x2', '\x2', '\xAC0', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xAC1', '\xAC2', '\a', 'h', '\x2', '\x2', '\xAC2', '\xAC3', '\a', '\x302', 
		'\x2', '\x2', '\xAC3', '\xAC4', '\t', '\x1C', '\x2', '\x2', '\xAC4', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xAC5', '\xAC8', '\a', 'r', '\x2', '\x2', 
		'\xAC6', '\xAC7', '\a', '\x1A1', '\x2', '\x2', '\xAC7', '\xAC9', '\a', 
		'\x1EE', '\x2', '\x2', '\xAC8', '\xAC6', '\x3', '\x2', '\x2', '\x2', '\xAC8', 
		'\xAC9', '\x3', '\x2', '\x2', '\x2', '\xAC9', '\xACE', '\x3', '\x2', '\x2', 
		'\x2', '\xACA', '\xACC', '\a', '\x17E', '\x2', '\x2', '\xACB', '\xACA', 
		'\x3', '\x2', '\x2', '\x2', '\xACB', '\xACC', '\x3', '\x2', '\x2', '\x2', 
		'\xACC', '\xACD', '\x3', '\x2', '\x2', '\x2', '\xACD', '\xACF', '\a', 
		'\xDA', '\x2', '\x2', '\xACE', '\xACB', '\x3', '\x2', '\x2', '\x2', '\xACE', 
		'\xACF', '\x3', '\x2', '\x2', '\x2', '\xACF', '\xAD6', '\x3', '\x2', '\x2', 
		'\x2', '\xAD0', '\xAD7', '\a', '\xAA', '\x2', '\x2', '\xAD1', '\xAD3', 
		'\a', '\xA8', '\x2', '\x2', '\xAD2', '\xAD4', '\a', '\xAA', '\x2', '\x2', 
		'\xAD3', '\xAD2', '\x3', '\x2', '\x2', '\x2', '\xAD3', '\xAD4', '\x3', 
		'\x2', '\x2', '\x2', '\xAD4', '\xAD7', '\x3', '\x2', '\x2', '\x2', '\xAD5', 
		'\xAD7', '\a', '\x174', '\x2', '\x2', '\xAD6', '\xAD0', '\x3', '\x2', 
		'\x2', '\x2', '\xAD6', '\xAD1', '\x3', '\x2', '\x2', '\x2', '\xAD6', '\xAD5', 
		'\x3', '\x2', '\x2', '\x2', '\xAD6', '\xAD7', '\x3', '\x2', '\x2', '\x2', 
		'\xAD7', '\xAD8', '\x3', '\x2', '\x2', '\x2', '\xAD8', '\xAD9', '\a', 
		'\x296', '\x2', '\x2', '\xAD9', '\xADB', '\x5', '\x410', '\x209', '\x2', 
		'\xADA', '\xADC', '\x5', '\xE2', 'r', '\x2', '\xADB', '\xADA', '\x3', 
		'\x2', '\x2', '\x2', '\xADB', '\xADC', '\x3', '\x2', '\x2', '\x2', '\xADC', 
		'\xADD', '\x3', '\x2', '\x2', '\x2', '\xADD', '\xADE', '\a', '\x19', '\x2', 
		'\x2', '\xADE', '\xAE0', '\x5', '\x16C', '\xB7', '\x2', '\xADF', '\xAE1', 
		'\x5', '\x370', '\x1B9', '\x2', '\xAE0', '\xADF', '\x3', '\x2', '\x2', 
		'\x2', '\xAE0', '\xAE1', '\x3', '\x2', '\x2', '\x2', '\xAE1', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xAE2', '\xAE5', '\x5', '\xE4', 's', '\x2', 
		'\xAE3', '\xAE5', '\x5', '\xE6', 't', '\x2', '\xAE4', '\xAE2', '\x3', 
		'\x2', '\x2', '\x2', '\xAE4', '\xAE3', '\x3', '\x2', '\x2', '\x2', '\xAE5', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xAE6', '\xAF7', '\a', '\x2EE', '\x2', 
		'\x2', '\xAE7', '\xAE9', '\a', '\x2F4', '\x2', '\x2', '\xAE8', '\xAE7', 
		'\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAE9', '\x3', '\x2', '\x2', '\x2', 
		'\xAE9', '\xAF5', '\x3', '\x2', '\x2', '\x2', '\xAEA', '\xAEC', '\x5', 
		'\x3F6', '\x1FC', '\x2', '\xAEB', '\xAED', '\t', '\x1D', '\x2', '\x2', 
		'\xAEC', '\xAEB', '\x3', '\x2', '\x2', '\x2', '\xAEC', '\xAED', '\x3', 
		'\x2', '\x2', '\x2', '\xAED', '\xAF1', '\x3', '\x2', '\x2', '\x2', '\xAEE', 
		'\xAF0', '\x5', '\xEA', 'v', '\x2', '\xAEF', '\xAEE', '\x3', '\x2', '\x2', 
		'\x2', '\xAF0', '\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAEF', 
		'\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAF2', '\x3', '\x2', '\x2', '\x2', 
		'\xAF2', '\xAF6', '\x3', '\x2', '\x2', '\x2', '\xAF3', '\xAF1', '\x3', 
		'\x2', '\x2', '\x2', '\xAF4', '\xAF6', '\x5', '\xEC', 'w', '\x2', '\xAF5', 
		'\xAEA', '\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAF4', '\x3', '\x2', '\x2', 
		'\x2', '\xAF6', '\xAF8', '\x3', '\x2', '\x2', '\x2', '\xAF7', '\xAE8', 
		'\x3', '\x2', '\x2', '\x2', '\xAF8', '\xAF9', '\x3', '\x2', '\x2', '\x2', 
		'\xAF9', '\xAF7', '\x3', '\x2', '\x2', '\x2', '\xAF9', '\xAFA', '\x3', 
		'\x2', '\x2', '\x2', '\xAFA', '\xAFB', '\x3', '\x2', '\x2', '\x2', '\xAFB', 
		'\xAFC', '\a', '\x2EF', '\x2', '\x2', '\xAFC', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xAFD', '\xAFE', '\a', '\x192', '\x2', '\x2', '\xAFE', '\xB11', 
		'\x5', '\x490', '\x249', '\x2', '\xAFF', '\xB00', '\a', '\x2A2', '\x2', 
		'\x2', '\xB00', '\xB01', '\a', '\x18F', '\x2', '\x2', '\xB01', '\xB0D', 
		'\t', '\x1E', '\x2', '\x2', '\xB02', '\xB0E', '\a', '\x8E', '\x2', '\x2', 
		'\xB03', '\xB08', '\a', '\x2EE', '\x2', '\x2', '\xB04', '\xB06', '\a', 
		'\x2F4', '\x2', '\x2', '\xB05', '\xB04', '\x3', '\x2', '\x2', '\x2', '\xB05', 
		'\xB06', '\x3', '\x2', '\x2', '\x2', '\xB06', '\xB07', '\x3', '\x2', '\x2', 
		'\x2', '\xB07', '\xB09', '\a', '\x30C', '\x2', '\x2', '\xB08', '\xB05', 
		'\x3', '\x2', '\x2', '\x2', '\xB09', '\xB0A', '\x3', '\x2', '\x2', '\x2', 
		'\xB0A', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB0A', '\xB0B', '\x3', 
		'\x2', '\x2', '\x2', '\xB0B', '\xB0C', '\x3', '\x2', '\x2', '\x2', '\xB0C', 
		'\xB0E', '\a', '\x2EF', '\x2', '\x2', '\xB0D', '\xB02', '\x3', '\x2', 
		'\x2', '\x2', '\xB0D', '\xB03', '\x3', '\x2', '\x2', '\x2', '\xB0E', '\xB12', 
		'\x3', '\x2', '\x2', '\x2', '\xB0F', '\xB10', '\a', '\x278', '\x2', '\x2', 
		'\xB10', '\xB12', '\x5', '\x410', '\x209', '\x2', '\xB11', '\xAFF', '\x3', 
		'\x2', '\x2', '\x2', '\xB11', '\xB0F', '\x3', '\x2', '\x2', '\x2', '\xB12', 
		'\xB24', '\x3', '\x2', '\x2', '\x2', '\xB13', '\xB1C', '\a', '\x2EE', 
		'\x2', '\x2', '\xB14', '\xB16', '\a', '\x2F4', '\x2', '\x2', '\xB15', 
		'\xB14', '\x3', '\x2', '\x2', '\x2', '\xB15', '\xB16', '\x3', '\x2', '\x2', 
		'\x2', '\xB16', '\xB1A', '\x3', '\x2', '\x2', '\x2', '\xB17', '\xB1B', 
		'\x5', '\xEC', 'w', '\x2', '\xB18', '\xB19', '\a', '\x30C', '\x2', '\x2', 
		'\xB19', '\xB1B', '\x5', '\xEA', 'v', '\x2', '\xB1A', '\xB17', '\x3', 
		'\x2', '\x2', '\x2', '\xB1A', '\xB18', '\x3', '\x2', '\x2', '\x2', '\xB1B', 
		'\xB1D', '\x3', '\x2', '\x2', '\x2', '\xB1C', '\xB15', '\x3', '\x2', '\x2', 
		'\x2', '\xB1D', '\xB1E', '\x3', '\x2', '\x2', '\x2', '\xB1E', '\xB1C', 
		'\x3', '\x2', '\x2', '\x2', '\xB1E', '\xB1F', '\x3', '\x2', '\x2', '\x2', 
		'\xB1F', '\xB20', '\x3', '\x2', '\x2', '\x2', '\xB20', '\xB21', '\a', 
		'\x2EF', '\x2', '\x2', '\xB21', '\xB23', '\x3', '\x2', '\x2', '\x2', '\xB22', 
		'\xB13', '\x3', '\x2', '\x2', '\x2', '\xB23', '\xB26', '\x3', '\x2', '\x2', 
		'\x2', '\xB24', '\xB22', '\x3', '\x2', '\x2', '\x2', '\xB24', '\xB25', 
		'\x3', '\x2', '\x2', '\x2', '\xB25', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xB26', '\xB24', '\x3', '\x2', '\x2', '\x2', '\xB27', '\xB28', '\x5', 
		'\xEA', 'v', '\x2', '\xB28', '\xB29', '\x5', '\xEC', 'w', '\x2', '\xB29', 
		'\xB2A', '\x5', '\x212', '\x10A', '\x2', '\xB2A', '\xB2B', '\x5', '\x214', 
		'\x10B', '\x2', '\xB2B', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xB2C', 
		'\xB2D', '\a', '\x65', '\x2', '\x2', '\xB2D', '\xB2F', '\x5', '\x406', 
		'\x204', '\x2', '\xB2E', '\xB2C', '\x3', '\x2', '\x2', '\x2', '\xB2E', 
		'\xB2F', '\x3', '\x2', '\x2', '\x2', '\xB2F', '\xB39', '\x3', '\x2', '\x2', 
		'\x2', '\xB30', '\xB32', '\a', '\x187', '\x2', '\x2', '\xB31', '\xB30', 
		'\x3', '\x2', '\x2', '\x2', '\xB31', '\xB32', '\x3', '\x2', '\x2', '\x2', 
		'\xB32', '\xB33', '\x3', '\x2', '\x2', '\x2', '\xB33', '\xB3A', '\a', 
		'\x18A', '\x2', '\x2', '\xB34', '\xB3A', '\a', '\x27C', '\x2', '\x2', 
		'\xB35', '\xB36', '\a', '\x1CD', '\x2', '\x2', '\xB36', '\xB3A', '\a', 
		'\x122', '\x2', '\x2', '\xB37', '\xB3A', '\x5', '\x22E', '\x118', '\x2', 
		'\xB38', '\xB3A', '\x5', '\x224', '\x113', '\x2', '\xB39', '\xB31', '\x3', 
		'\x2', '\x2', '\x2', '\xB39', '\xB34', '\x3', '\x2', '\x2', '\x2', '\xB39', 
		'\xB35', '\x3', '\x2', '\x2', '\x2', '\xB39', '\xB37', '\x3', '\x2', '\x2', 
		'\x2', '\xB39', '\xB38', '\x3', '\x2', '\x2', '\x2', '\xB3A', '\xB3C', 
		'\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB3D', '\x5', '\xF0', 'y', '\x2', 
		'\xB3C', '\xB3B', '\x3', '\x2', '\x2', '\x2', '\xB3C', '\xB3D', '\x3', 
		'\x2', '\x2', '\x2', '\xB3D', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xB3E', 
		'\xB40', '\x5', '\xEE', 'x', '\x2', '\xB3F', '\xB3E', '\x3', '\x2', '\x2', 
		'\x2', '\xB40', '\xB41', '\x3', '\x2', '\x2', '\x2', '\xB41', '\xB3F', 
		'\x3', '\x2', '\x2', '\x2', '\xB41', '\xB42', '\x3', '\x2', '\x2', '\x2', 
		'\xB42', '\xB44', '\x3', '\x2', '\x2', '\x2', '\xB43', '\xB45', '\x5', 
		'\xF0', 'y', '\x2', '\xB44', '\xB43', '\x3', '\x2', '\x2', '\x2', '\xB44', 
		'\xB45', '\x3', '\x2', '\x2', '\x2', '\xB45', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xB46', '\xB47', '\a', '\x65', '\x2', '\x2', '\xB47', '\xB49', 
		'\x5', '\x406', '\x204', '\x2', '\xB48', '\xB46', '\x3', '\x2', '\x2', 
		'\x2', '\xB48', '\xB49', '\x3', '\x2', '\x2', '\x2', '\xB49', '\xB4E', 
		'\x3', '\x2', '\x2', '\x2', '\xB4A', '\xB4F', '\x5', '\x234', '\x11B', 
		'\x2', '\xB4B', '\xB4F', '\x5', '\x22C', '\x117', '\x2', '\xB4C', '\xB4F', 
		'\x5', '\x232', '\x11A', '\x2', '\xB4D', '\xB4F', '\x5', '\x224', '\x113', 
		'\x2', '\xB4E', '\xB4A', '\x3', '\x2', '\x2', '\x2', '\xB4E', '\xB4B', 
		'\x3', '\x2', '\x2', '\x2', '\xB4E', '\xB4C', '\x3', '\x2', '\x2', '\x2', 
		'\xB4E', '\xB4D', '\x3', '\x2', '\x2', '\x2', '\xB4F', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xB50', '\xB52', '\a', '\x187', '\x2', '\x2', '\xB51', 
		'\xB50', '\x3', '\x2', '\x2', '\x2', '\xB51', '\xB52', '\x3', '\x2', '\x2', 
		'\x2', '\xB52', '\xB53', '\x3', '\x2', '\x2', '\x2', '\xB53', '\xB5C', 
		'\a', '\x90', '\x2', '\x2', '\xB54', '\xB55', '\a', '\x109', '\x2', '\x2', 
		'\xB55', '\xB5C', '\t', '\x1F', '\x2', '\x2', '\xB56', '\xB5C', '\t', 
		' ', '\x2', '\x2', '\xB57', '\xB5C', '\x5', '\xF2', 'z', '\x2', '\xB58', 
		'\xB5C', '\t', '\a', '\x2', '\x2', '\xB59', '\xB5C', '\t', '!', '\x2', 
		'\x2', '\xB5A', '\xB5C', '\x5', '\x148', '\xA5', '\x2', '\xB5B', '\xB51', 
		'\x3', '\x2', '\x2', '\x2', '\xB5B', '\xB54', '\x3', '\x2', '\x2', '\x2', 
		'\xB5B', '\xB56', '\x3', '\x2', '\x2', '\x2', '\xB5B', '\xB57', '\x3', 
		'\x2', '\x2', '\x2', '\xB5B', '\xB58', '\x3', '\x2', '\x2', '\x2', '\xB5B', 
		'\xB59', '\x3', '\x2', '\x2', '\x2', '\xB5B', '\xB5A', '\x3', '\x2', '\x2', 
		'\x2', '\xB5C', '\xB5D', '\x3', '\x2', '\x2', '\x2', '\xB5D', '\xB5B', 
		'\x3', '\x2', '\x2', '\x2', '\xB5D', '\xB5E', '\x3', '\x2', '\x2', '\x2', 
		'\xB5E', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xB5F', '\xB60', '\a', '\x28A', 
		'\x2', '\x2', '\xB60', '\xB69', '\a', '\x100', '\x2', '\x2', '\xB61', 
		'\xB6A', '\x5', '\x43C', '\x21F', '\x2', '\xB62', '\xB63', '\a', '\x2EE', 
		'\x2', '\x2', '\xB63', '\xB64', '\x5', '\xAA', 'V', '\x2', '\xB64', '\xB65', 
		'\a', '\x2EF', '\x2', '\x2', '\xB65', '\xB6A', '\x3', '\x2', '\x2', '\x2', 
		'\xB66', '\xB68', '\x5', '\xF4', '{', '\x2', '\xB67', '\xB66', '\x3', 
		'\x2', '\x2', '\x2', '\xB67', '\xB68', '\x3', '\x2', '\x2', '\x2', '\xB68', 
		'\xB6A', '\x3', '\x2', '\x2', '\x2', '\xB69', '\xB61', '\x3', '\x2', '\x2', 
		'\x2', '\xB69', '\xB62', '\x3', '\x2', '\x2', '\x2', '\xB69', '\xB67', 
		'\x3', '\x2', '\x2', '\x2', '\xB6A', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xB6B', '\xB6E', '\x5', '\xF6', '|', '\x2', '\xB6C', '\xB6E', '\x5', 
		'\x104', '\x83', '\x2', '\xB6D', '\xB6B', '\x3', '\x2', '\x2', '\x2', 
		'\xB6D', '\xB6C', '\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB75', '\x3', 
		'\x2', '\x2', '\x2', '\xB6F', '\xB71', '\x5', '\xFE', '\x80', '\x2', '\xB70', 
		'\xB6F', '\x3', '\x2', '\x2', '\x2', '\xB71', '\xB72', '\x3', '\x2', '\x2', 
		'\x2', '\xB72', '\xB70', '\x3', '\x2', '\x2', '\x2', '\xB72', '\xB73', 
		'\x3', '\x2', '\x2', '\x2', '\xB73', '\xB75', '\x3', '\x2', '\x2', '\x2', 
		'\xB74', '\xB6D', '\x3', '\x2', '\x2', '\x2', '\xB74', '\xB70', '\x3', 
		'\x2', '\x2', '\x2', '\xB75', '\xB76', '\x3', '\x2', '\x2', '\x2', '\xB76', 
		'\xB74', '\x3', '\x2', '\x2', '\x2', '\xB76', '\xB77', '\x3', '\x2', '\x2', 
		'\x2', '\xB77', '\xB7F', '\x3', '\x2', '\x2', '\x2', '\xB78', '\xB79', 
		'\a', '\x102', '\x2', '\x2', '\xB79', '\xB7C', '\a', '\x11A', '\x2', '\x2', 
		'\xB7A', '\xB7D', '\x5', '\x140', '\xA1', '\x2', '\xB7B', '\xB7D', '\x5', 
		'\x110', '\x89', '\x2', '\xB7C', '\xB7A', '\x3', '\x2', '\x2', '\x2', 
		'\xB7C', '\xB7B', '\x3', '\x2', '\x2', '\x2', '\xB7D', '\xB7F', '\x3', 
		'\x2', '\x2', '\x2', '\xB7E', '\xB74', '\x3', '\x2', '\x2', '\x2', '\xB7E', 
		'\xB78', '\x3', '\x2', '\x2', '\x2', '\xB7F', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xB80', '\xB81', '\a', '\xE4', '\x2', '\x2', '\xB81', '\xB82', 
		'\a', '\x1AF', '\x2', '\x2', '\xB82', '\xB8F', '\a', '?', '\x2', '\x2', 
		'\xB83', '\xB84', '\a', '\x1DB', '\x2', '\x2', '\xB84', '\xB85', '\x5', 
		'\x444', '\x223', '\x2', '\xB85', '\xB86', '\a', '\x2EE', '\x2', '\x2', 
		'\xB86', '\xB87', '\x5', '\xFA', '~', '\x2', '\xB87', '\xB88', '\a', '\x2EF', 
		'\x2', '\x2', '\xB88', '\xB90', '\x3', '\x2', '\x2', '\x2', '\xB89', '\xB8A', 
		'\a', '\xEC', '\x2', '\x2', '\xB8A', '\xB8D', '\x5', '\x444', '\x223', 
		'\x2', '\xB8B', '\xB8E', '\x5', '\xF8', '}', '\x2', '\xB8C', '\xB8E', 
		'\x5', '\x102', '\x82', '\x2', '\xB8D', '\xB8B', '\x3', '\x2', '\x2', 
		'\x2', '\xB8D', '\xB8C', '\x3', '\x2', '\x2', '\x2', '\xB8E', '\xB90', 
		'\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB83', '\x3', '\x2', '\x2', '\x2', 
		'\xB8F', '\xB89', '\x3', '\x2', '\x2', '\x2', '\xB90', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xB91', '\xB9B', '\a', '\x2EE', '\x2', '\x2', '\xB92', 
		'\xB94', '\a', '\x2F4', '\x2', '\x2', '\xB93', '\xB92', '\x3', '\x2', 
		'\x2', '\x2', '\xB93', '\xB94', '\x3', '\x2', '\x2', '\x2', '\xB94', '\xB95', 
		'\x3', '\x2', '\x2', '\x2', '\xB95', '\xB97', '\x5', '\x112', '\x8A', 
		'\x2', '\xB96', '\xB98', '\x5', '\x116', '\x8C', '\x2', '\xB97', '\xB96', 
		'\x3', '\x2', '\x2', '\x2', '\xB97', '\xB98', '\x3', '\x2', '\x2', '\x2', 
		'\xB98', '\xB99', '\x3', '\x2', '\x2', '\x2', '\xB99', '\xB9A', '\x5', 
		'\x118', '\x8D', '\x2', '\xB9A', '\xB9C', '\x3', '\x2', '\x2', '\x2', 
		'\xB9B', '\xB93', '\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB9D', '\x3', 
		'\x2', '\x2', '\x2', '\xB9D', '\xB9B', '\x3', '\x2', '\x2', '\x2', '\xB9D', 
		'\xB9E', '\x3', '\x2', '\x2', '\x2', '\xB9E', '\xB9F', '\x3', '\x2', '\x2', 
		'\x2', '\xB9F', '\xBA0', '\a', '\x2EF', '\x2', '\x2', '\xBA0', '\xF9', 
		'\x3', '\x2', '\x2', '\x2', '\xBA1', '\xBA2', '\x5', '\x114', '\x8B', 
		'\x2', '\xBA2', '\xBA3', '\a', '\x28C', '\x2', '\x2', '\xBA3', '\xBA4', 
		'\a', '\x128', '\x2', '\x2', '\xBA4', '\xBA5', '\a', '\x258', '\x2', '\x2', 
		'\xBA5', '\xBA6', '\a', '\x2EE', '\x2', '\x2', '\xBA6', '\xBAB', '\x5', 
		'\x462', '\x232', '\x2', '\xBA7', '\xBA8', '\a', '\x2F4', '\x2', '\x2', 
		'\xBA8', '\xBAA', '\x5', '\x462', '\x232', '\x2', '\xBA9', '\xBA7', '\x3', 
		'\x2', '\x2', '\x2', '\xBAA', '\xBAD', '\x3', '\x2', '\x2', '\x2', '\xBAB', 
		'\xBA9', '\x3', '\x2', '\x2', '\x2', '\xBAB', '\xBAC', '\x3', '\x2', '\x2', 
		'\x2', '\xBAC', '\xBAE', '\x3', '\x2', '\x2', '\x2', '\xBAD', '\xBAB', 
		'\x3', '\x2', '\x2', '\x2', '\xBAE', '\xBB0', '\a', '\x2EF', '\x2', '\x2', 
		'\xBAF', '\xBB1', '\x5', '\xFC', '\x7F', '\x2', '\xBB0', '\xBAF', '\x3', 
		'\x2', '\x2', '\x2', '\xBB0', '\xBB1', '\x3', '\x2', '\x2', '\x2', '\xBB1', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xBB2', '\xBB4', '\x5', '\x100', 
		'\x81', '\x2', '\xBB3', '\xBB2', '\x3', '\x2', '\x2', '\x2', '\xBB4', 
		'\xBB5', '\x3', '\x2', '\x2', '\x2', '\xBB5', '\xBB3', '\x3', '\x2', '\x2', 
		'\x2', '\xBB5', '\xBB6', '\x3', '\x2', '\x2', '\x2', '\xBB6', '\xBBA', 
		'\x3', '\x2', '\x2', '\x2', '\xBB7', '\xBBA', '\x5', '\x1EA', '\xF6', 
		'\x2', '\xBB8', '\xBBA', '\x5', '\x150', '\xA9', '\x2', '\xBB9', '\xBB3', 
		'\x3', '\x2', '\x2', '\x2', '\xBB9', '\xBB7', '\x3', '\x2', '\x2', '\x2', 
		'\xBB9', '\xBB8', '\x3', '\x2', '\x2', '\x2', '\xBBA', '\xBBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBBB', '\xBB9', '\x3', '\x2', '\x2', '\x2', '\xBBB', 
		'\xBBC', '\x3', '\x2', '\x2', '\x2', '\xBBC', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\xBBD', '\xBBF', '\x5', '\x100', '\x81', '\x2', '\xBBE', '\xBBD', 
		'\x3', '\x2', '\x2', '\x2', '\xBBF', '\xBC0', '\x3', '\x2', '\x2', '\x2', 
		'\xBC0', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBC0', '\xBC1', '\x3', 
		'\x2', '\x2', '\x2', '\xBC1', '\xBD0', '\x3', '\x2', '\x2', '\x2', '\xBC2', 
		'\xBD0', '\x5', '\x150', '\xA9', '\x2', '\xBC3', '\xBD0', '\a', '\x196', 
		'\x2', '\x2', '\xBC4', '\xBC7', '\a', '\x252', '\x2', '\x2', '\xBC5', 
		'\xBC8', '\x5', '\x420', '\x211', '\x2', '\xBC6', '\xBC8', '\a', '\x8E', 
		'\x2', '\x2', '\xBC7', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBC7', '\xBC6', 
		'\x3', '\x2', '\x2', '\x2', '\xBC8', '\xBD0', '\x3', '\x2', '\x2', '\x2', 
		'\xBC9', '\xBD0', '\x5', '\x130', '\x99', '\x2', '\xBCA', '\xBD0', '\t', 
		'\"', '\x2', '\x2', '\xBCB', '\xBD0', '\a', '\x1FB', '\x2', '\x2', '\xBCC', 
		'\xBD0', '\t', '\x1D', '\x2', '\x2', '\xBCD', '\xBD0', '\x5', '\x13C', 
		'\x9F', '\x2', '\xBCE', '\xBD0', '\x5', '\x13E', '\xA0', '\x2', '\xBCF', 
		'\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBC2', '\x3', '\x2', '\x2', 
		'\x2', '\xBCF', '\xBC3', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBC4', 
		'\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBC9', '\x3', '\x2', '\x2', '\x2', 
		'\xBCF', '\xBCA', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBCB', '\x3', 
		'\x2', '\x2', '\x2', '\xBCF', '\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCF', 
		'\xBCD', '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBCE', '\x3', '\x2', '\x2', 
		'\x2', '\xBD0', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xBD1', '\xBD2', 
		'\a', '\x1B4', '\x2', '\x2', '\xBD2', '\xBD9', '\x5', '\x49E', '\x250', 
		'\x2', '\xBD3', '\xBD4', '\a', '\x1B7', '\x2', '\x2', '\xBD4', '\xBD9', 
		'\x5', '\x49E', '\x250', '\x2', '\xBD5', '\xBD6', '\a', '\x10A', '\x2', 
		'\x2', '\xBD6', '\xBD9', '\x5', '\x49E', '\x250', '\x2', '\xBD7', '\xBD9', 
		'\x5', '\x1F8', '\xFD', '\x2', '\xBD8', '\xBD1', '\x3', '\x2', '\x2', 
		'\x2', '\xBD8', '\xBD3', '\x3', '\x2', '\x2', '\x2', '\xBD8', '\xBD5', 
		'\x3', '\x2', '\x2', '\x2', '\xBD8', '\xBD7', '\x3', '\x2', '\x2', '\x2', 
		'\xBD9', '\x101', '\x3', '\x2', '\x2', '\x2', '\xBDA', '\xBDB', '\a', 
		'\x1B0', '\x2', '\x2', '\xBDB', '\xBE9', '\x5', '\x138', '\x9D', '\x2', 
		'\xBDC', '\xBDD', '\a', '\x23F', '\x2', '\x2', '\xBDD', '\xBDE', '\a', 
		'\x107', '\x2', '\x2', '\xBDE', '\xBDF', '\a', '\x2EE', '\x2', '\x2', 
		'\xBDF', '\xBE4', '\x5', '\x420', '\x211', '\x2', '\xBE0', '\xBE1', '\a', 
		'\x2F4', '\x2', '\x2', '\xBE1', '\xBE3', '\x5', '\x420', '\x211', '\x2', 
		'\xBE2', '\xBE0', '\x3', '\x2', '\x2', '\x2', '\xBE3', '\xBE6', '\x3', 
		'\x2', '\x2', '\x2', '\xBE4', '\xBE2', '\x3', '\x2', '\x2', '\x2', '\xBE4', 
		'\xBE5', '\x3', '\x2', '\x2', '\x2', '\xBE5', '\xBE7', '\x3', '\x2', '\x2', 
		'\x2', '\xBE6', '\xBE4', '\x3', '\x2', '\x2', '\x2', '\xBE7', '\xBE8', 
		'\a', '\x2EF', '\x2', '\x2', '\xBE8', '\xBEA', '\x3', '\x2', '\x2', '\x2', 
		'\xBE9', '\xBDC', '\x3', '\x2', '\x2', '\x2', '\xBE9', '\xBEA', '\x3', 
		'\x2', '\x2', '\x2', '\xBEA', '\xBED', '\x3', '\x2', '\x2', '\x2', '\xBEB', 
		'\xBEE', '\x5', '\x12A', '\x96', '\x2', '\xBEC', '\xBEE', '\x5', '\x12C', 
		'\x97', '\x2', '\xBED', '\xBEB', '\x3', '\x2', '\x2', '\x2', '\xBED', 
		'\xBEC', '\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEE', '\x3', '\x2', '\x2', 
		'\x2', '\xBEE', '\xBFD', '\x3', '\x2', '\x2', '\x2', '\xBEF', '\xBF0', 
		'\a', '\x1A6', '\x2', '\x2', '\xBF0', '\xBF1', '\a', '\x23F', '\x2', '\x2', 
		'\xBF1', '\xBF2', '\a', '\x107', '\x2', '\x2', '\xBF2', '\xBF3', '\a', 
		'\x2EE', '\x2', '\x2', '\xBF3', '\xBF8', '\x5', '\x420', '\x211', '\x2', 
		'\xBF4', '\xBF5', '\a', '\x2F4', '\x2', '\x2', '\xBF5', '\xBF7', '\x5', 
		'\x420', '\x211', '\x2', '\xBF6', '\xBF4', '\x3', '\x2', '\x2', '\x2', 
		'\xBF7', '\xBFA', '\x3', '\x2', '\x2', '\x2', '\xBF8', '\xBF6', '\x3', 
		'\x2', '\x2', '\x2', '\xBF8', '\xBF9', '\x3', '\x2', '\x2', '\x2', '\xBF9', 
		'\xBFB', '\x3', '\x2', '\x2', '\x2', '\xBFA', '\xBF8', '\x3', '\x2', '\x2', 
		'\x2', '\xBFB', '\xBFC', '\a', '\x2EF', '\x2', '\x2', '\xBFC', '\xBFE', 
		'\x3', '\x2', '\x2', '\x2', '\xBFD', '\xBEF', '\x3', '\x2', '\x2', '\x2', 
		'\xBFD', '\xBFE', '\x3', '\x2', '\x2', '\x2', '\xBFE', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\xBFF', '\xC04', '\a', '\x137', '\x2', '\x2', '\xC00', 
		'\xC05', '\x5', '\x106', '\x84', '\x2', '\xC01', '\xC05', '\x5', '\x108', 
		'\x85', '\x2', '\xC02', '\xC05', '\x5', '\x10A', '\x86', '\x2', '\xC03', 
		'\xC05', '\x5', '\x10C', '\x87', '\x2', '\xC04', '\xC00', '\x3', '\x2', 
		'\x2', '\x2', '\xC04', '\xC01', '\x3', '\x2', '\x2', '\x2', '\xC04', '\xC02', 
		'\x3', '\x2', '\x2', '\x2', '\xC04', '\xC03', '\x3', '\x2', '\x2', '\x2', 
		'\xC04', '\xC05', '\x3', '\x2', '\x2', '\x2', '\xC05', '\x105', '\x3', 
		'\x2', '\x2', '\x2', '\xC06', '\xC07', '\a', '\x2EE', '\x2', '\x2', '\xC07', 
		'\xC0E', '\x5', '\x114', '\x8B', '\x2', '\xC08', '\xC0B', '\x5', '\xFC', 
		'\x7F', '\x2', '\xC09', '\xC0B', '\x5', '\x12C', '\x97', '\x2', '\xC0A', 
		'\xC08', '\x3', '\x2', '\x2', '\x2', '\xC0A', '\xC09', '\x3', '\x2', '\x2', 
		'\x2', '\xC0B', '\xC0C', '\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC0A', 
		'\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC0D', '\x3', '\x2', '\x2', '\x2', 
		'\xC0D', '\xC0F', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0A', '\x3', 
		'\x2', '\x2', '\x2', '\xC0E', '\xC0F', '\x3', '\x2', '\x2', '\x2', '\xC0F', 
		'\xC11', '\x3', '\x2', '\x2', '\x2', '\xC10', '\xC12', '\a', '\x281', 
		'\x2', '\x2', '\xC11', '\xC10', '\x3', '\x2', '\x2', '\x2', '\xC11', '\xC12', 
		'\x3', '\x2', '\x2', '\x2', '\xC12', '\xC25', '\x3', '\x2', '\x2', '\x2', 
		'\xC13', '\xC14', '\a', '\x2F4', '\x2', '\x2', '\xC14', '\xC16', '\a', 
		'\x1AF', '\x2', '\x2', '\xC15', '\xC17', '\x5', '\x424', '\x213', '\x2', 
		'\xC16', '\xC15', '\x3', '\x2', '\x2', '\x2', '\xC16', '\xC17', '\x3', 
		'\x2', '\x2', '\x2', '\xC17', '\xC1E', '\x3', '\x2', '\x2', '\x2', '\xC18', 
		'\xC1B', '\x5', '\xFC', '\x7F', '\x2', '\xC19', '\xC1B', '\x5', '\x12C', 
		'\x97', '\x2', '\xC1A', '\xC18', '\x3', '\x2', '\x2', '\x2', '\xC1A', 
		'\xC19', '\x3', '\x2', '\x2', '\x2', '\xC1B', '\xC1C', '\x3', '\x2', '\x2', 
		'\x2', '\xC1C', '\xC1A', '\x3', '\x2', '\x2', '\x2', '\xC1C', '\xC1D', 
		'\x3', '\x2', '\x2', '\x2', '\xC1D', '\xC1F', '\x3', '\x2', '\x2', '\x2', 
		'\xC1E', '\xC1A', '\x3', '\x2', '\x2', '\x2', '\xC1E', '\xC1F', '\x3', 
		'\x2', '\x2', '\x2', '\xC1F', '\xC21', '\x3', '\x2', '\x2', '\x2', '\xC20', 
		'\xC22', '\a', '\x281', '\x2', '\x2', '\xC21', '\xC20', '\x3', '\x2', 
		'\x2', '\x2', '\xC21', '\xC22', '\x3', '\x2', '\x2', '\x2', '\xC22', '\xC24', 
		'\x3', '\x2', '\x2', '\x2', '\xC23', '\xC13', '\x3', '\x2', '\x2', '\x2', 
		'\xC24', '\xC27', '\x3', '\x2', '\x2', '\x2', '\xC25', '\xC23', '\x3', 
		'\x2', '\x2', '\x2', '\xC25', '\xC26', '\x3', '\x2', '\x2', '\x2', '\xC26', 
		'\xC28', '\x3', '\x2', '\x2', '\x2', '\xC27', '\xC25', '\x3', '\x2', '\x2', 
		'\x2', '\xC28', '\xC29', '\a', '\x2EF', '\x2', '\x2', '\xC29', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\xC2A', '\xC2B', '\a', '\x2EE', '\x2', '\x2', 
		'\xC2B', '\xC32', '\x5', '\x114', '\x8B', '\x2', '\xC2C', '\xC2F', '\x5', 
		'\xFC', '\x7F', '\x2', '\xC2D', '\xC2F', '\x5', '\x12C', '\x97', '\x2', 
		'\xC2E', '\xC2C', '\x3', '\x2', '\x2', '\x2', '\xC2E', '\xC2D', '\x3', 
		'\x2', '\x2', '\x2', '\xC2F', '\xC30', '\x3', '\x2', '\x2', '\x2', '\xC30', 
		'\xC2E', '\x3', '\x2', '\x2', '\x2', '\xC30', '\xC31', '\x3', '\x2', '\x2', 
		'\x2', '\xC31', '\xC33', '\x3', '\x2', '\x2', '\x2', '\xC32', '\xC2E', 
		'\x3', '\x2', '\x2', '\x2', '\xC32', '\xC33', '\x3', '\x2', '\x2', '\x2', 
		'\xC33', '\xC35', '\x3', '\x2', '\x2', '\x2', '\xC34', '\xC36', '\x5', 
		'\x136', '\x9C', '\x2', '\xC35', '\xC34', '\x3', '\x2', '\x2', '\x2', 
		'\xC35', '\xC36', '\x3', '\x2', '\x2', '\x2', '\xC36', '\xC46', '\x3', 
		'\x2', '\x2', '\x2', '\xC37', '\xC38', '\a', '\x2F4', '\x2', '\x2', '\xC38', 
		'\xC3F', '\x5', '\x114', '\x8B', '\x2', '\xC39', '\xC3C', '\x5', '\xFC', 
		'\x7F', '\x2', '\xC3A', '\xC3C', '\x5', '\x12C', '\x97', '\x2', '\xC3B', 
		'\xC39', '\x3', '\x2', '\x2', '\x2', '\xC3B', '\xC3A', '\x3', '\x2', '\x2', 
		'\x2', '\xC3C', '\xC3D', '\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC3B', 
		'\x3', '\x2', '\x2', '\x2', '\xC3D', '\xC3E', '\x3', '\x2', '\x2', '\x2', 
		'\xC3E', '\xC40', '\x3', '\x2', '\x2', '\x2', '\xC3F', '\xC3B', '\x3', 
		'\x2', '\x2', '\x2', '\xC3F', '\xC40', '\x3', '\x2', '\x2', '\x2', '\xC40', 
		'\xC42', '\x3', '\x2', '\x2', '\x2', '\xC41', '\xC43', '\x5', '\x136', 
		'\x9C', '\x2', '\xC42', '\xC41', '\x3', '\x2', '\x2', '\x2', '\xC42', 
		'\xC43', '\x3', '\x2', '\x2', '\x2', '\xC43', '\xC45', '\x3', '\x2', '\x2', 
		'\x2', '\xC44', '\xC37', '\x3', '\x2', '\x2', '\x2', '\xC45', '\xC48', 
		'\x3', '\x2', '\x2', '\x2', '\xC46', '\xC44', '\x3', '\x2', '\x2', '\x2', 
		'\xC46', '\xC47', '\x3', '\x2', '\x2', '\x2', '\xC47', '\xC49', '\x3', 
		'\x2', '\x2', '\x2', '\xC48', '\xC46', '\x3', '\x2', '\x2', '\x2', '\xC49', 
		'\xC4A', '\a', '\x2EF', '\x2', '\x2', '\xC4A', '\x109', '\x3', '\x2', 
		'\x2', '\x2', '\xC4B', '\xC4C', '\a', '\x23F', '\x2', '\x2', '\xC4C', 
		'\xC4D', '\a', '\x107', '\x2', '\x2', '\xC4D', '\xC4E', '\a', '\x2EE', 
		'\x2', '\x2', '\xC4E', '\xC53', '\x5', '\x420', '\x211', '\x2', '\xC4F', 
		'\xC50', '\a', '\x2F4', '\x2', '\x2', '\xC50', '\xC52', '\x5', '\x420', 
		'\x211', '\x2', '\xC51', '\xC4F', '\x3', '\x2', '\x2', '\x2', '\xC52', 
		'\xC55', '\x3', '\x2', '\x2', '\x2', '\xC53', '\xC51', '\x3', '\x2', '\x2', 
		'\x2', '\xC53', '\xC54', '\x3', '\x2', '\x2', '\x2', '\xC54', '\xC56', 
		'\x3', '\x2', '\x2', '\x2', '\xC55', '\xC53', '\x3', '\x2', '\x2', '\x2', 
		'\xC56', '\xC57', '\a', '\x2EF', '\x2', '\x2', '\xC57', '\xC76', '\x3', 
		'\x2', '\x2', '\x2', '\xC58', '\xC59', '\a', '\x2EE', '\x2', '\x2', '\xC59', 
		'\xC5B', '\x5', '\x114', '\x8B', '\x2', '\xC5A', '\xC5C', '\x5', '\x1EA', 
		'\xF6', '\x2', '\xC5B', '\xC5A', '\x3', '\x2', '\x2', '\x2', '\xC5B', 
		'\xC5C', '\x3', '\x2', '\x2', '\x2', '\xC5C', '\xC5E', '\x3', '\x2', '\x2', 
		'\x2', '\xC5D', '\xC5F', '\x5', '\x130', '\x99', '\x2', '\xC5E', '\xC5D', 
		'\x3', '\x2', '\x2', '\x2', '\xC5E', '\xC5F', '\x3', '\x2', '\x2', '\x2', 
		'\xC5F', '\xC61', '\x3', '\x2', '\x2', '\x2', '\xC60', '\xC62', '\x5', 
		'\x136', '\x9C', '\x2', '\xC61', '\xC60', '\x3', '\x2', '\x2', '\x2', 
		'\xC61', '\xC62', '\x3', '\x2', '\x2', '\x2', '\xC62', '\xC70', '\x3', 
		'\x2', '\x2', '\x2', '\xC63', '\xC64', '\a', '\x2F4', '\x2', '\x2', '\xC64', 
		'\xC66', '\x5', '\x114', '\x8B', '\x2', '\xC65', '\xC67', '\x5', '\x1EA', 
		'\xF6', '\x2', '\xC66', '\xC65', '\x3', '\x2', '\x2', '\x2', '\xC66', 
		'\xC67', '\x3', '\x2', '\x2', '\x2', '\xC67', '\xC69', '\x3', '\x2', '\x2', 
		'\x2', '\xC68', '\xC6A', '\x5', '\x130', '\x99', '\x2', '\xC69', '\xC68', 
		'\x3', '\x2', '\x2', '\x2', '\xC69', '\xC6A', '\x3', '\x2', '\x2', '\x2', 
		'\xC6A', '\xC6C', '\x3', '\x2', '\x2', '\x2', '\xC6B', '\xC6D', '\x5', 
		'\x136', '\x9C', '\x2', '\xC6C', '\xC6B', '\x3', '\x2', '\x2', '\x2', 
		'\xC6C', '\xC6D', '\x3', '\x2', '\x2', '\x2', '\xC6D', '\xC6F', '\x3', 
		'\x2', '\x2', '\x2', '\xC6E', '\xC63', '\x3', '\x2', '\x2', '\x2', '\xC6F', 
		'\xC72', '\x3', '\x2', '\x2', '\x2', '\xC70', '\xC6E', '\x3', '\x2', '\x2', 
		'\x2', '\xC70', '\xC71', '\x3', '\x2', '\x2', '\x2', '\xC71', '\xC73', 
		'\x3', '\x2', '\x2', '\x2', '\xC72', '\xC70', '\x3', '\x2', '\x2', '\x2', 
		'\xC73', '\xC74', '\a', '\x2EF', '\x2', '\x2', '\xC74', '\xC76', '\x3', 
		'\x2', '\x2', '\x2', '\xC75', '\xC4B', '\x3', '\x2', '\x2', '\x2', '\xC75', 
		'\xC58', '\x3', '\x2', '\x2', '\x2', '\xC76', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\xC77', '\xC79', '\x5', '\x1EC', '\xF7', '\x2', '\xC78', '\xC77', 
		'\x3', '\x2', '\x2', '\x2', '\xC78', '\xC79', '\x3', '\x2', '\x2', '\x2', 
		'\xC79', '\xC7A', '\x3', '\x2', '\x2', '\x2', '\xC7A', '\xC7B', '\a', 
		'\x2EE', '\x2', '\x2', '\xC7B', '\xC82', '\x5', '\x114', '\x8B', '\x2', 
		'\xC7C', '\xC7F', '\x5', '\xFC', '\x7F', '\x2', '\xC7D', '\xC7F', '\x5', 
		'\x130', '\x99', '\x2', '\xC7E', '\xC7C', '\x3', '\x2', '\x2', '\x2', 
		'\xC7E', '\xC7D', '\x3', '\x2', '\x2', '\x2', '\xC7F', '\xC80', '\x3', 
		'\x2', '\x2', '\x2', '\xC80', '\xC7E', '\x3', '\x2', '\x2', '\x2', '\xC80', 
		'\xC81', '\x3', '\x2', '\x2', '\x2', '\xC81', '\xC83', '\x3', '\x2', '\x2', 
		'\x2', '\xC82', '\xC7E', '\x3', '\x2', '\x2', '\x2', '\xC82', '\xC83', 
		'\x3', '\x2', '\x2', '\x2', '\xC83', '\xC85', '\x3', '\x2', '\x2', '\x2', 
		'\xC84', '\xC86', '\x5', '\x136', '\x9C', '\x2', '\xC85', '\xC84', '\x3', 
		'\x2', '\x2', '\x2', '\xC85', '\xC86', '\x3', '\x2', '\x2', '\x2', '\xC86', 
		'\xC88', '\x3', '\x2', '\x2', '\x2', '\xC87', '\xC89', '\x5', '\x134', 
		'\x9B', '\x2', '\xC88', '\xC87', '\x3', '\x2', '\x2', '\x2', '\xC88', 
		'\xC89', '\x3', '\x2', '\x2', '\x2', '\xC89', '\xC9C', '\x3', '\x2', '\x2', 
		'\x2', '\xC8A', '\xC8B', '\a', '\x2F4', '\x2', '\x2', '\xC8B', '\xC92', 
		'\x5', '\x114', '\x8B', '\x2', '\xC8C', '\xC8F', '\x5', '\xFC', '\x7F', 
		'\x2', '\xC8D', '\xC8F', '\x5', '\x130', '\x99', '\x2', '\xC8E', '\xC8C', 
		'\x3', '\x2', '\x2', '\x2', '\xC8E', '\xC8D', '\x3', '\x2', '\x2', '\x2', 
		'\xC8F', '\xC90', '\x3', '\x2', '\x2', '\x2', '\xC90', '\xC8E', '\x3', 
		'\x2', '\x2', '\x2', '\xC90', '\xC91', '\x3', '\x2', '\x2', '\x2', '\xC91', 
		'\xC93', '\x3', '\x2', '\x2', '\x2', '\xC92', '\xC8E', '\x3', '\x2', '\x2', 
		'\x2', '\xC92', '\xC93', '\x3', '\x2', '\x2', '\x2', '\xC93', '\xC95', 
		'\x3', '\x2', '\x2', '\x2', '\xC94', '\xC96', '\x5', '\x136', '\x9C', 
		'\x2', '\xC95', '\xC94', '\x3', '\x2', '\x2', '\x2', '\xC95', '\xC96', 
		'\x3', '\x2', '\x2', '\x2', '\xC96', '\xC98', '\x3', '\x2', '\x2', '\x2', 
		'\xC97', '\xC99', '\x5', '\x134', '\x9B', '\x2', '\xC98', '\xC97', '\x3', 
		'\x2', '\x2', '\x2', '\xC98', '\xC99', '\x3', '\x2', '\x2', '\x2', '\xC99', 
		'\xC9B', '\x3', '\x2', '\x2', '\x2', '\xC9A', '\xC8A', '\x3', '\x2', '\x2', 
		'\x2', '\xC9B', '\xC9E', '\x3', '\x2', '\x2', '\x2', '\xC9C', '\xC9A', 
		'\x3', '\x2', '\x2', '\x2', '\xC9C', '\xC9D', '\x3', '\x2', '\x2', '\x2', 
		'\xC9D', '\xC9F', '\x3', '\x2', '\x2', '\x2', '\xC9E', '\xC9C', '\x3', 
		'\x2', '\x2', '\x2', '\xC9F', '\xCA0', '\a', '\x2EF', '\x2', '\x2', '\xCA0', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\xCA1', '\xCA2', '\a', '\xAF', '\x2', 
		'\x2', '\xCA2', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xCA3', '\xCA4', 
		'\a', '\xAF', '\x2', '\x2', '\xCA4', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\xCA5', '\xCA6', '\a', '\x1AF', '\x2', '\x2', '\xCA6', '\xCA7', '\x5', 
		'\x424', '\x213', '\x2', '\xCA7', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\xCA8', '\xCAA', '\a', '\x1AF', '\x2', '\x2', '\xCA9', '\xCAB', '\x5', 
		'\x424', '\x213', '\x2', '\xCAA', '\xCA9', '\x3', '\x2', '\x2', '\x2', 
		'\xCAA', '\xCAB', '\x3', '\x2', '\x2', '\x2', '\xCAB', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\xCAC', '\xCAD', '\a', '\x101', '\x2', '\x2', '\xCAD', 
		'\xCAE', '\t', '#', '\x2', '\x2', '\xCAE', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\xCAF', '\xCC3', '\x5', '\x1EA', '\xF6', '\x2', '\xCB0', '\xCB2', 
		'\a', '\x1A6', '\x2', '\x2', '\xCB1', '\xCB3', '\x5', '\x1EA', '\xF6', 
		'\x2', '\xCB2', '\xCB1', '\x3', '\x2', '\x2', '\x2', '\xCB2', '\xCB3', 
		'\x3', '\x2', '\x2', '\x2', '\xCB3', '\xCC3', '\x3', '\x2', '\x2', '\x2', 
		'\xCB4', '\xCC3', '\x5', '\x12A', '\x96', '\x2', '\xCB5', '\xCC3', '\x5', 
		'\x12C', '\x97', '\x2', '\xCB6', '\xCC3', '\x5', '\x11E', '\x90', '\x2', 
		'\xCB7', '\xCC3', '\x5', '\x132', '\x9A', '\x2', '\xCB8', '\xCB9', '\a', 
		'\x292', '\x2', '\x2', '\xCB9', '\xCBA', '\x5', '\x13A', '\x9E', '\x2', 
		'\xCBA', '\xCBB', '\a', '\x23F', '\x2', '\x2', '\xCBB', '\xCBD', '\a', 
		'\x19', '\x2', '\x2', '\xCBC', '\xCBE', '\t', '$', '\x2', '\x2', '\xCBD', 
		'\xCBC', '\x3', '\x2', '\x2', '\x2', '\xCBD', '\xCBE', '\x3', '\x2', '\x2', 
		'\x2', '\xCBE', '\xCBF', '\x3', '\x2', '\x2', '\x2', '\xCBF', '\xCC0', 
		'\a', '\x135', '\x2', '\x2', '\xCC0', '\xCC1', '\x5', '\x428', '\x215', 
		'\x2', '\xCC1', '\xCC3', '\x3', '\x2', '\x2', '\x2', '\xCC2', '\xCAF', 
		'\x3', '\x2', '\x2', '\x2', '\xCC2', '\xCB0', '\x3', '\x2', '\x2', '\x2', 
		'\xCC2', '\xCB4', '\x3', '\x2', '\x2', '\x2', '\xCC2', '\xCB5', '\x3', 
		'\x2', '\x2', '\x2', '\xCC2', '\xCB6', '\x3', '\x2', '\x2', '\x2', '\xCC2', 
		'\xCB7', '\x3', '\x2', '\x2', '\x2', '\xCC2', '\xCB8', '\x3', '\x2', '\x2', 
		'\x2', '\xCC3', '\xCC4', '\x3', '\x2', '\x2', '\x2', '\xCC4', '\xCC2', 
		'\x3', '\x2', '\x2', '\x2', '\xCC4', '\xCC5', '\x3', '\x2', '\x2', '\x2', 
		'\xCC5', '\x119', '\x3', '\x2', '\x2', '\x2', '\xCC6', '\xCCA', '\a', 
		'\x10C', '\x2', '\x2', '\xCC7', '\xCC8', '\x5', '\x120', '\x91', '\x2', 
		'\xCC8', '\xCC9', '\x5', '\x11C', '\x8F', '\x2', '\xCC9', '\xCCB', '\x3', 
		'\x2', '\x2', '\x2', '\xCCA', '\xCC7', '\x3', '\x2', '\x2', '\x2', '\xCCA', 
		'\xCCB', '\x3', '\x2', '\x2', '\x2', '\xCCB', '\xCCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCCC', '\xCCD', '\a', '\x17E', '\x2', '\x2', '\xCCD', '\xCCF', 
		'\a', '\x10C', '\x2', '\x2', '\xCCE', '\xCC6', '\x3', '\x2', '\x2', '\x2', 
		'\xCCE', '\xCCC', '\x3', '\x2', '\x2', '\x2', '\xCCF', '\x11B', '\x3', 
		'\x2', '\x2', '\x2', '\xCD0', '\xCD2', '\a', '\x10C', '\x2', '\x2', '\xCD1', 
		'\xCD3', '\x5', '\x122', '\x92', '\x2', '\xCD2', '\xCD1', '\x3', '\x2', 
		'\x2', '\x2', '\xCD2', '\xCD3', '\x3', '\x2', '\x2', '\x2', '\xCD3', '\xCD4', 
		'\x3', '\x2', '\x2', '\x2', '\xCD4', '\xCD8', '\x5', '\x444', '\x223', 
		'\x2', '\xCD5', '\xCD6', '\a', '\x17E', '\x2', '\x2', '\xCD6', '\xCD8', 
		'\a', '\x10C', '\x2', '\x2', '\xCD7', '\xCD0', '\x3', '\x2', '\x2', '\x2', 
		'\xCD7', '\xCD5', '\x3', '\x2', '\x2', '\x2', '\xCD8', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\xCD9', '\xCDA', '\a', '\x10C', '\x2', '\x2', '\xCDA', 
		'\xCDE', '\x5', '\x120', '\x91', '\x2', '\xCDB', '\xCDC', '\a', '\x17E', 
		'\x2', '\x2', '\xCDC', '\xCDE', '\a', '\x10C', '\x2', '\x2', '\xCDD', 
		'\xCD9', '\x3', '\x2', '\x2', '\x2', '\xCDD', '\xCDB', '\x3', '\x2', '\x2', 
		'\x2', '\xCDE', '\x11F', '\x3', '\x2', '\x2', '\x2', '\xCDF', '\xCE1', 
		'\x5', '\x122', '\x92', '\x2', '\xCE0', '\xCDF', '\x3', '\x2', '\x2', 
		'\x2', '\xCE0', '\xCE1', '\x3', '\x2', '\x2', '\x2', '\xCE1', '\xCEC', 
		'\x3', '\x2', '\x2', '\x2', '\xCE2', '\xCE4', '\x5', '\x124', '\x93', 
		'\x2', '\xCE3', '\xCE2', '\x3', '\x2', '\x2', '\x2', '\xCE3', '\xCE4', 
		'\x3', '\x2', '\x2', '\x2', '\xCE4', '\xCEC', '\x3', '\x2', '\x2', '\x2', 
		'\xCE5', '\xCE7', '\x5', '\x126', '\x94', '\x2', '\xCE6', '\xCE5', '\x3', 
		'\x2', '\x2', '\x2', '\xCE6', '\xCE7', '\x3', '\x2', '\x2', '\x2', '\xCE7', 
		'\xCEC', '\x3', '\x2', '\x2', '\x2', '\xCE8', '\xCEA', '\x5', '\x128', 
		'\x95', '\x2', '\xCE9', '\xCE8', '\x3', '\x2', '\x2', '\x2', '\xCE9', 
		'\xCEA', '\x3', '\x2', '\x2', '\x2', '\xCEA', '\xCEC', '\x3', '\x2', '\x2', 
		'\x2', '\xCEB', '\xCE0', '\x3', '\x2', '\x2', '\x2', '\xCEB', '\xCE3', 
		'\x3', '\x2', '\x2', '\x2', '\xCEB', '\xCE6', '\x3', '\x2', '\x2', '\x2', 
		'\xCEB', '\xCE9', '\x3', '\x2', '\x2', '\x2', '\xCEC', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\xCED', '\xCEE', '\a', '\x153', '\x2', '\x2', '\xCEE', 
		'\xCF4', '\a', '\xDC', '\x2', '\x2', '\xCEF', '\xCF5', '\a', '\xA1', '\x2', 
		'\x2', '\xCF0', '\xCF2', '\t', '%', '\x2', '\x2', '\xCF1', '\xCF3', '\t', 
		'&', '\x2', '\x2', '\xCF2', '\xCF1', '\x3', '\x2', '\x2', '\x2', '\xCF2', 
		'\xCF3', '\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCF5', '\x3', '\x2', '\x2', 
		'\x2', '\xCF4', '\xCEF', '\x3', '\x2', '\x2', '\x2', '\xCF4', '\xCF0', 
		'\x3', '\x2', '\x2', '\x2', '\xCF5', '\xCF9', '\x3', '\x2', '\x2', '\x2', 
		'\xCF6', '\xCF7', '\a', '\x17E', '\x2', '\x2', '\xCF7', '\xCF9', '\a', 
		'\x153', '\x2', '\x2', '\xCF8', '\xCED', '\x3', '\x2', '\x2', '\x2', '\xCF8', 
		'\xCF6', '\x3', '\x2', '\x2', '\x2', '\xCF9', '\x123', '\x3', '\x2', '\x2', 
		'\x2', '\xCFA', '\xCFB', '\a', '\x1CE', '\x2', '\x2', '\xCFB', '\xCFC', 
		'\t', '\'', '\x2', '\x2', '\xCFC', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\xCFD', '\xD06', '\a', '\xA0', '\x2', '\x2', '\xCFE', '\xD07', '\a', 
		'#', '\x2', '\x2', '\xCFF', '\xD04', '\a', '?', '\x2', '\x2', '\xD00', 
		'\xD01', '\a', '\x204', '\x2', '\x2', '\xD01', '\xD05', '\a', '\x1DB', 
		'\x2', '\x2', '\xD02', '\xD05', '\a', '\x1AF', '\x2', '\x2', '\xD03', 
		'\xD05', '\a', '\x243', '\x2', '\x2', '\xD04', '\xD00', '\x3', '\x2', 
		'\x2', '\x2', '\xD04', '\xD02', '\x3', '\x2', '\x2', '\x2', '\xD04', '\xD03', 
		'\x3', '\x2', '\x2', '\x2', '\xD05', '\xD07', '\x3', '\x2', '\x2', '\x2', 
		'\xD06', '\xCFE', '\x3', '\x2', '\x2', '\x2', '\xD06', '\xCFF', '\x3', 
		'\x2', '\x2', '\x2', '\xD06', '\xD07', '\x3', '\x2', '\x2', '\x2', '\xD07', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\xD08', '\xD0A', '\a', '\xA6', '\x2', 
		'\x2', '\xD09', '\xD0B', '\a', '\xE', '\x2', '\x2', '\xD0A', '\xD09', 
		'\x3', '\x2', '\x2', '\x2', '\xD0A', '\xD0B', '\x3', '\x2', '\x2', '\x2', 
		'\xD0B', '\xD0F', '\x3', '\x2', '\x2', '\x2', '\xD0C', '\xD0D', '\a', 
		'\x17E', '\x2', '\x2', '\xD0D', '\xD0F', '\a', '\xA6', '\x2', '\x2', '\xD0E', 
		'\xD08', '\x3', '\x2', '\x2', '\x2', '\xD0E', '\xD0C', '\x3', '\x2', '\x2', 
		'\x2', '\xD0F', '\x129', '\x3', '\x2', '\x2', '\x2', '\xD10', '\xD2C', 
		'\a', '`', '\x2', '\x2', '\xD11', '\xD12', '\a', '\x205', '\x2', '\x2', 
		'\xD12', '\xD13', '\a', '\x23F', '\x2', '\x2', '\xD13', '\xD15', '\a', 
		'`', '\x2', '\x2', '\xD14', '\xD16', '\t', '(', '\x2', '\x2', '\xD15', 
		'\xD14', '\x3', '\x2', '\x2', '\x2', '\xD15', '\xD16', '\x3', '\x2', '\x2', 
		'\x2', '\xD16', '\xD2C', '\x3', '\x2', '\x2', '\x2', '\xD17', '\xD18', 
		'\a', 'X', '\x2', '\x2', '\xD18', '\xD19', '\a', '\x23F', '\x2', '\x2', 
		'\xD19', '\xD1F', '\a', '`', '\x2', '\x2', '\xD1A', '\xD1B', '\a', '\xDC', 
		'\x2', '\x2', '\xD1B', '\xD1D', '\t', ')', '\x2', '\x2', '\xD1C', '\xD1E', 
		'\t', '&', '\x2', '\x2', '\xD1D', '\xD1C', '\x3', '\x2', '\x2', '\x2', 
		'\xD1D', '\xD1E', '\x3', '\x2', '\x2', '\x2', '\xD1E', '\xD20', '\x3', 
		'\x2', '\x2', '\x2', '\xD1F', '\xD1A', '\x3', '\x2', '\x2', '\x2', '\xD1F', 
		'\xD20', '\x3', '\x2', '\x2', '\x2', '\xD20', '\xD27', '\x3', '\x2', '\x2', 
		'\x2', '\xD21', '\xD23', '\a', '\x17E', '\x2', '\x2', '\xD22', '\xD21', 
		'\x3', '\x2', '\x2', '\x2', '\xD22', '\xD23', '\x3', '\x2', '\x2', '\x2', 
		'\xD23', '\xD24', '\x3', '\x2', '\x2', '\x2', '\xD24', '\xD25', '\a', 
		'\x205', '\x2', '\x2', '\xD25', '\xD26', '\a', '\x129', '\x2', '\x2', 
		'\xD26', '\xD28', '\a', '\x13B', '\x2', '\x2', '\xD27', '\xD22', '\x3', 
		'\x2', '\x2', '\x2', '\xD27', '\xD28', '\x3', '\x2', '\x2', '\x2', '\xD28', 
		'\xD2C', '\x3', '\x2', '\x2', '\x2', '\xD29', '\xD2A', '\a', '\x17E', 
		'\x2', '\x2', '\xD2A', '\xD2C', '\a', '`', '\x2', '\x2', '\xD2B', '\xD10', 
		'\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD11', '\x3', '\x2', '\x2', '\x2', 
		'\xD2B', '\xD17', '\x3', '\x2', '\x2', '\x2', '\xD2B', '\xD29', '\x3', 
		'\x2', '\x2', '\x2', '\xD2C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\xD2D', 
		'\xD30', '\x5', '\x12E', '\x98', '\x2', '\xD2E', '\xD30', '\x5', '\x130', 
		'\x99', '\x2', '\xD2F', '\xD2D', '\x3', '\x2', '\x2', '\x2', '\xD2F', 
		'\xD2E', '\x3', '\x2', '\x2', '\x2', '\xD30', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\xD31', '\xD33', '\a', '`', '\x2', '\x2', '\xD32', '\xD34', '\x5', 
		'\x49E', '\x250', '\x2', '\xD33', '\xD32', '\x3', '\x2', '\x2', '\x2', 
		'\xD33', '\xD34', '\x3', '\x2', '\x2', '\x2', '\xD34', '\xD37', '\x3', 
		'\x2', '\x2', '\x2', '\xD35', '\xD37', '\a', '\x171', '\x2', '\x2', '\xD36', 
		'\xD31', '\x3', '\x2', '\x2', '\x2', '\xD36', '\xD35', '\x3', '\x2', '\x2', 
		'\x2', '\xD37', '\x12F', '\x3', '\x2', '\x2', '\x2', '\xD38', '\xD39', 
		'\a', '`', '\x2', '\x2', '\xD39', '\xD3A', '\a', '\b', '\x2', '\x2', '\xD3A', 
		'\xD3D', '\a', '\x144', '\x2', '\x2', '\xD3B', '\xD3D', '\a', '\x171', 
		'\x2', '\x2', '\xD3C', '\xD38', '\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD3B', 
		'\x3', '\x2', '\x2', '\x2', '\xD3D', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\xD3E', '\xD3F', '\a', '\x135', '\x2', '\x2', '\xD3F', '\xD40', '\a', 
		'\x2EE', '\x2', '\x2', '\xD40', '\xD41', '\x5', '\x41A', '\x20E', '\x2', 
		'\xD41', '\xD42', '\a', '\x2EF', '\x2', '\x2', '\xD42', '\xD43', '\a', 
		'\x23F', '\x2', '\x2', '\xD43', '\xD45', '\a', '\x19', '\x2', '\x2', '\xD44', 
		'\xD46', '\t', '$', '\x2', '\x2', '\xD45', '\xD44', '\x3', '\x2', '\x2', 
		'\x2', '\xD45', '\xD46', '\x3', '\x2', '\x2', '\x2', '\xD46', '\xD52', 
		'\x3', '\x2', '\x2', '\x2', '\xD47', '\xD4C', '\x5', '\x428', '\x215', 
		'\x2', '\xD48', '\xD49', '\a', '\x2EE', '\x2', '\x2', '\xD49', '\xD4A', 
		'\x5', '\x1EA', '\xF6', '\x2', '\xD4A', '\xD4B', '\a', '\x2EF', '\x2', 
		'\x2', '\xD4B', '\xD4D', '\x3', '\x2', '\x2', '\x2', '\xD4C', '\xD48', 
		'\x3', '\x2', '\x2', '\x2', '\xD4C', '\xD4D', '\x3', '\x2', '\x2', '\x2', 
		'\xD4D', '\xD53', '\x3', '\x2', '\x2', '\x2', '\xD4E', '\xD4F', '\a', 
		'\x2EE', '\x2', '\x2', '\xD4F', '\xD50', '\x5', '\x1EA', '\xF6', '\x2', 
		'\xD50', '\xD51', '\a', '\x2EF', '\x2', '\x2', '\xD51', '\xD53', '\x3', 
		'\x2', '\x2', '\x2', '\xD52', '\xD47', '\x3', '\x2', '\x2', '\x2', '\xD52', 
		'\xD4E', '\x3', '\x2', '\x2', '\x2', '\xD52', '\xD53', '\x3', '\x2', '\x2', 
		'\x2', '\xD53', '\x133', '\x3', '\x2', '\x2', '\x2', '\xD54', '\xD73', 
		'\x5', '\x1EC', '\xF7', '\x2', '\xD55', '\xD56', '\a', '\x2EE', '\x2', 
		'\x2', '\xD56', '\xD58', '\x5', '\x114', '\x8B', '\x2', '\xD57', '\xD59', 
		'\x5', '\x1EA', '\xF6', '\x2', '\xD58', '\xD57', '\x3', '\x2', '\x2', 
		'\x2', '\xD58', '\xD59', '\x3', '\x2', '\x2', '\x2', '\xD59', '\xD5B', 
		'\x3', '\x2', '\x2', '\x2', '\xD5A', '\xD5C', '\x5', '\x130', '\x99', 
		'\x2', '\xD5B', '\xD5A', '\x3', '\x2', '\x2', '\x2', '\xD5B', '\xD5C', 
		'\x3', '\x2', '\x2', '\x2', '\xD5C', '\xD5E', '\x3', '\x2', '\x2', '\x2', 
		'\xD5D', '\xD5F', '\x5', '\x136', '\x9C', '\x2', '\xD5E', '\xD5D', '\x3', 
		'\x2', '\x2', '\x2', '\xD5E', '\xD5F', '\x3', '\x2', '\x2', '\x2', '\xD5F', 
		'\xD6D', '\x3', '\x2', '\x2', '\x2', '\xD60', '\xD61', '\a', '\x2F4', 
		'\x2', '\x2', '\xD61', '\xD63', '\x5', '\x114', '\x8B', '\x2', '\xD62', 
		'\xD64', '\x5', '\x1EA', '\xF6', '\x2', '\xD63', '\xD62', '\x3', '\x2', 
		'\x2', '\x2', '\xD63', '\xD64', '\x3', '\x2', '\x2', '\x2', '\xD64', '\xD66', 
		'\x3', '\x2', '\x2', '\x2', '\xD65', '\xD67', '\x5', '\x130', '\x99', 
		'\x2', '\xD66', '\xD65', '\x3', '\x2', '\x2', '\x2', '\xD66', '\xD67', 
		'\x3', '\x2', '\x2', '\x2', '\xD67', '\xD69', '\x3', '\x2', '\x2', '\x2', 
		'\xD68', '\xD6A', '\x5', '\x136', '\x9C', '\x2', '\xD69', '\xD68', '\x3', 
		'\x2', '\x2', '\x2', '\xD69', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD6A', 
		'\xD6C', '\x3', '\x2', '\x2', '\x2', '\xD6B', '\xD60', '\x3', '\x2', '\x2', 
		'\x2', '\xD6C', '\xD6F', '\x3', '\x2', '\x2', '\x2', '\xD6D', '\xD6B', 
		'\x3', '\x2', '\x2', '\x2', '\xD6D', '\xD6E', '\x3', '\x2', '\x2', '\x2', 
		'\xD6E', '\xD70', '\x3', '\x2', '\x2', '\x2', '\xD6F', '\xD6D', '\x3', 
		'\x2', '\x2', '\x2', '\xD70', '\xD71', '\a', '\x2EF', '\x2', '\x2', '\xD71', 
		'\xD73', '\x3', '\x2', '\x2', '\x2', '\xD72', '\xD54', '\x3', '\x2', '\x2', 
		'\x2', '\xD72', '\xD55', '\x3', '\x2', '\x2', '\x2', '\xD73', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\xD74', '\xD75', '\t', '*', '\x2', '\x2', 
		'\xD75', '\x137', '\x3', '\x2', '\x2', '\x2', '\xD76', '\xD77', '\a', 
		'\x2E8', '\x2', '\x2', '\xD77', '\x139', '\x3', '\x2', '\x2', '\x2', '\xD78', 
		'\xD79', '\a', '\x30C', '\x2', '\x2', '\xD79', '\x13B', '\x3', '\x2', 
		'\x2', '\x2', '\xD7A', '\xD7B', '\a', '\x101', '\x2', '\x2', '\xD7B', 
		'\xD7C', '\t', '+', '\x2', '\x2', '\xD7C', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\xD7D', '\xD81', '\a', '\x181', '\x2', '\x2', '\xD7E', '\xD7F', 
		'\a', '\x1AB', '\x2', '\x2', '\xD7F', '\xD81', '\x5', '\x49E', '\x250', 
		'\x2', '\xD80', '\xD7D', '\x3', '\x2', '\x2', '\x2', '\xD80', '\xD7E', 
		'\x3', '\x2', '\x2', '\x2', '\xD81', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\xD82', '\xD84', '\x5', '\x400', '\x201', '\x2', '\xD83', '\xD85', '\x5', 
		'\x142', '\xA2', '\x2', '\xD84', '\xD83', '\x3', '\x2', '\x2', '\x2', 
		'\xD84', '\xD85', '\x3', '\x2', '\x2', '\x2', '\xD85', '\xD87', '\x3', 
		'\x2', '\x2', '\x2', '\xD86', '\xD88', '\x5', '\x13E', '\xA0', '\x2', 
		'\xD87', '\xD86', '\x3', '\x2', '\x2', '\x2', '\xD87', '\xD88', '\x3', 
		'\x2', '\x2', '\x2', '\xD88', '\xD8E', '\x3', '\x2', '\x2', '\x2', '\xD89', 
		'\xD8A', '\a', '\x1AC', '\x2', '\x2', '\xD8A', '\xD8B', '\a', '\x2EE', 
		'\x2', '\x2', '\xD8B', '\xD8C', '\x5', '\x146', '\xA4', '\x2', '\xD8C', 
		'\xD8D', '\a', '\x2EF', '\x2', '\x2', '\xD8D', '\xD8F', '\x3', '\x2', 
		'\x2', '\x2', '\xD8E', '\xD89', '\x3', '\x2', '\x2', '\x2', '\xD8E', '\xD8F', 
		'\x3', '\x2', '\x2', '\x2', '\xD8F', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\xD90', '\xD92', '\a', '\x137', '\x2', '\x2', '\xD91', '\xD93', '\x5', 
		'\x144', '\xA3', '\x2', '\xD92', '\xD91', '\x3', '\x2', '\x2', '\x2', 
		'\xD92', '\xD93', '\x3', '\x2', '\x2', '\x2', '\xD93', '\xD98', '\x3', 
		'\x2', '\x2', '\x2', '\xD94', '\xD95', '\a', '\x2F4', '\x2', '\x2', '\xD95', 
		'\xD97', '\x5', '\x144', '\xA3', '\x2', '\xD96', '\xD94', '\x3', '\x2', 
		'\x2', '\x2', '\xD97', '\xD9A', '\x3', '\x2', '\x2', '\x2', '\xD98', '\xD96', 
		'\x3', '\x2', '\x2', '\x2', '\xD98', '\xD99', '\x3', '\x2', '\x2', '\x2', 
		'\xD99', '\x143', '\x3', '\x2', '\x2', '\x2', '\xD9A', '\xD98', '\x3', 
		'\x2', '\x2', '\x2', '\xD9B', '\xD9C', '\a', '\x2EE', '\x2', '\x2', '\xD9C', 
		'\xD9D', '\a', '\x1AF', '\x2', '\x2', '\xD9D', '\xDA3', '\x5', '\x424', 
		'\x213', '\x2', '\xD9E', '\xD9F', '\a', '\x1AC', '\x2', '\x2', '\xD9F', 
		'\xDA0', '\a', '\x2EE', '\x2', '\x2', '\xDA0', '\xDA1', '\x5', '\x146', 
		'\xA4', '\x2', '\xDA1', '\xDA2', '\a', '\x2EF', '\x2', '\x2', '\xDA2', 
		'\xDA4', '\x3', '\x2', '\x2', '\x2', '\xDA3', '\xD9E', '\x3', '\x2', '\x2', 
		'\x2', '\xDA3', '\xDA4', '\x3', '\x2', '\x2', '\x2', '\xDA4', '\xDA5', 
		'\x3', '\x2', '\x2', '\x2', '\xDA5', '\xDA6', '\a', '\x2EF', '\x2', '\x2', 
		'\xDA6', '\x145', '\x3', '\x2', '\x2', '\x2', '\xDA7', '\xDA8', '\a', 
		'\x2EA', '\x2', '\x2', '\xDA8', '\x147', '\x3', '\x2', '\x2', '\x2', '\xDA9', 
		'\xDAA', '\a', '\xBF', '\x2', '\x2', '\xDAA', '\xDAB', '\a', '\x117', 
		'\x2', '\x2', '\xDAB', '\xDAC', '\x5', '\x43E', '\x220', '\x2', '\xDAC', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\xDAD', '\xDAF', '\a', 'r', '\x2', 
		'\x2', '\xDAE', '\xDB0', '\t', ',', '\x2', '\x2', '\xDAF', '\xDAE', '\x3', 
		'\x2', '\x2', '\x2', '\xDAF', '\xDB0', '\x3', '\x2', '\x2', '\x2', '\xDB0', 
		'\xDB4', '\x3', '\x2', '\x2', '\x2', '\xDB1', '\xDB5', '\x5', '\x14C', 
		'\xA7', '\x2', '\xDB2', '\xDB5', '\x5', '\x158', '\xAD', '\x2', '\xDB3', 
		'\xDB5', '\x5', '\x15C', '\xAF', '\x2', '\xDB4', '\xDB1', '\x3', '\x2', 
		'\x2', '\x2', '\xDB4', '\xDB2', '\x3', '\x2', '\x2', '\x2', '\xDB4', '\xDB3', 
		'\x3', '\x2', '\x2', '\x2', '\xDB5', '\xDB6', '\x3', '\x2', '\x2', '\x2', 
		'\xDB6', '\xDB7', '\a', '\x300', '\x2', '\x2', '\xDB7', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\xDB8', '\xDBA', '\x5', '\x1EA', '\xF6', '\x2', 
		'\xDB9', '\xDBB', '\x5', '\x160', '\xB1', '\x2', '\xDBA', '\xDB9', '\x3', 
		'\x2', '\x2', '\x2', '\xDBA', '\xDBB', '\x3', '\x2', '\x2', '\x2', '\xDBB', 
		'\xDCD', '\x3', '\x2', '\x2', '\x2', '\xDBC', '\xDBD', '\a', '\x156', 
		'\x2', '\x2', '\xDBD', '\xDBE', '\a', '\xC8', '\x2', '\x2', '\xDBE', '\xDCC', 
		'\x5', '\x216', '\x10C', '\x2', '\xDBF', '\xDC0', '\a', '\x37', '\x2', 
		'\x2', '\xDC0', '\xDCC', '\x5', '\x216', '\x10C', '\x2', '\xDC1', '\xDCC', 
		'\x5', '\x150', '\xA9', '\x2', '\xDC2', '\xDC3', '\a', '\xDA', '\x2', 
		'\x2', '\xDC3', '\xDCC', '\a', '\x13D', '\x2', '\x2', '\xDC4', '\xDCC', 
		'\t', '-', '\x2', '\x2', '\xDC5', '\xDC6', '\a', '\xB3', '\x2', '\x2', 
		'\xDC6', '\xDCC', '\x5', '\x14E', '\xA8', '\x2', '\xDC7', '\xDCC', '\a', 
		'\x8E', '\x2', '\x2', '\xDC8', '\xDCC', '\x5', '\x152', '\xAA', '\x2', 
		'\xDC9', '\xDCC', '\x5', '\x154', '\xAB', '\x2', '\xDCA', '\xDCC', '\x5', 
		'\x156', '\xAC', '\x2', '\xDCB', '\xDBC', '\x3', '\x2', '\x2', '\x2', 
		'\xDCB', '\xDBF', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDC1', '\x3', 
		'\x2', '\x2', '\x2', '\xDCB', '\xDC2', '\x3', '\x2', '\x2', '\x2', '\xDCB', 
		'\xDC4', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDC5', '\x3', '\x2', '\x2', 
		'\x2', '\xDCB', '\xDC7', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDC8', 
		'\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDC9', '\x3', '\x2', '\x2', '\x2', 
		'\xDCB', '\xDCA', '\x3', '\x2', '\x2', '\x2', '\xDCC', '\xDCF', '\x3', 
		'\x2', '\x2', '\x2', '\xDCD', '\xDCB', '\x3', '\x2', '\x2', '\x2', '\xDCD', 
		'\xDCE', '\x3', '\x2', '\x2', '\x2', '\xDCE', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\xDCF', '\xDCD', '\x3', '\x2', '\x2', '\x2', '\xDD0', '\xDD1', 
		'\a', '\x28A', '\x2', '\x2', '\xDD1', '\xDD2', '\a', '\x2EA', '\x2', '\x2', 
		'\xDD2', '\x14F', '\x3', '\x2', '\x2', '\x2', '\xDD3', '\xDD4', '\t', 
		'.', '\x2', '\x2', '\xDD4', '\x151', '\x3', '\x2', '\x2', '\x2', '\xDD5', 
		'\xDD6', '\a', '\xC8', '\x2', '\x2', '\xDD6', '\xDD7', '\a', '\x147', 
		'\x2', '\x2', '\xDD7', '\xDDE', '\a', '\x137', '\x2', '\x2', '\xDD8', 
		'\xDDF', '\a', '\"', '\x2', '\x2', '\xDD9', '\xDDC', '\a', '\x27A', '\x2', 
		'\x2', '\xDDA', '\xDDB', '\a', '\x22A', '\x2', '\x2', '\xDDB', '\xDDD', 
		'\x5', '\x216', '\x10C', '\x2', '\xDDC', '\xDDA', '\x3', '\x2', '\x2', 
		'\x2', '\xDDC', '\xDDD', '\x3', '\x2', '\x2', '\x2', '\xDDD', '\xDDF', 
		'\x3', '\x2', '\x2', '\x2', '\xDDE', '\xDD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDDE', '\xDD9', '\x3', '\x2', '\x2', '\x2', '\xDDE', '\xDDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDDF', '\x153', '\x3', '\x2', '\x2', '\x2', '\xDE0', 
		'\xDE1', '\a', '\x215', '\x2', '\x2', '\xDE1', '\xDE2', '\a', '\x232', 
		'\x2', '\x2', '\xDE2', '\xDE3', '\a', '\x147', '\x2', '\x2', '\xDE3', 
		'\xDE4', '\t', '/', '\x2', '\x2', '\xDE4', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\xDE5', '\xDE6', '\a', '\xD3', '\x2', '\x2', '\xDE6', '\xDE7', 
		'\t', '#', '\x2', '\x2', '\xDE7', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\xDE8', '\xDE9', '\a', '\x257', '\x2', '\x2', '\xDE9', '\xDEB', '\x5', 
		'\x1EA', '\xF6', '\x2', '\xDEA', '\xDEC', '\x5', '\x162', '\xB2', '\x2', 
		'\xDEB', '\xDEA', '\x3', '\x2', '\x2', '\x2', '\xDEB', '\xDEC', '\x3', 
		'\x2', '\x2', '\x2', '\xDEC', '\xDEE', '\x3', '\x2', '\x2', '\x2', '\xDED', 
		'\xDEF', '\x5', '\x15A', '\xAE', '\x2', '\xDEE', '\xDED', '\x3', '\x2', 
		'\x2', '\x2', '\xDEE', '\xDEF', '\x3', '\x2', '\x2', '\x2', '\xDEF', '\xDF1', 
		'\x3', '\x2', '\x2', '\x2', '\xDF0', '\xDF2', '\x5', '\x152', '\xAA', 
		'\x2', '\xDF1', '\xDF0', '\x3', '\x2', '\x2', '\x2', '\xDF1', '\xDF2', 
		'\x3', '\x2', '\x2', '\x2', '\xDF2', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\xDF3', '\xDF4', '\a', '\x252', '\x2', '\x2', '\xDF4', '\xDF5', '\a', 
		'\xE8', '\x2', '\x2', '\xDF5', '\xDF6', '\t', '\x30', '\x2', '\x2', '\xDF6', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\xDF7', '\xDF8', '\a', '\x279', 
		'\x2', '\x2', '\xDF8', '\xDFA', '\x5', '\x1EA', '\xF6', '\x2', '\xDF9', 
		'\xDFB', '\x5', '\x160', '\xB1', '\x2', '\xDFA', '\xDF9', '\x3', '\x2', 
		'\x2', '\x2', '\xDFA', '\xDFB', '\x3', '\x2', '\x2', '\x2', '\xDFB', '\xDFD', 
		'\x3', '\x2', '\x2', '\x2', '\xDFC', '\xDFE', '\x5', '\x152', '\xAA', 
		'\x2', '\xDFD', '\xDFC', '\x3', '\x2', '\x2', '\x2', '\xDFD', '\xDFE', 
		'\x3', '\x2', '\x2', '\x2', '\xDFE', '\xE00', '\x3', '\x2', '\x2', '\x2', 
		'\xDFF', '\xE01', '\x5', '\x15E', '\xB0', '\x2', '\xE00', '\xDFF', '\x3', 
		'\x2', '\x2', '\x2', '\xE00', '\xE01', '\x3', '\x2', '\x2', '\x2', '\xE01', 
		'\x15D', '\x3', '\x2', '\x2', '\x2', '\xE02', '\xE03', '\a', '\x1F7', 
		'\x2', '\x2', '\xE03', '\xE04', '\t', '\x31', '\x2', '\x2', '\xE04', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\xE05', '\xE07', '\a', '~', '\x2', '\x2', 
		'\xE06', '\xE08', '\a', '\x2F4', '\x2', '\x2', '\xE07', '\xE06', '\x3', 
		'\x2', '\x2', '\x2', '\xE07', '\xE08', '\x3', '\x2', '\x2', '\x2', '\xE08', 
		'\xE09', '\x3', '\x2', '\x2', '\x2', '\xE09', '\xE0A', '\x5', '\x164', 
		'\xB3', '\x2', '\xE0A', '\x161', '\x3', '\x2', '\x2', '\x2', '\xE0B', 
		'\xE0D', '\a', '\x255', '\x2', '\x2', '\xE0C', '\xE0E', '\a', '\x2F4', 
		'\x2', '\x2', '\xE0D', '\xE0C', '\x3', '\x2', '\x2', '\x2', '\xE0D', '\xE0E', 
		'\x3', '\x2', '\x2', '\x2', '\xE0E', '\xE0F', '\x3', '\x2', '\x2', '\x2', 
		'\xE0F', '\xE10', '\x5', '\x164', '\xB3', '\x2', '\xE10', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\xE11', '\xE13', '\a', '\x2EA', '\x2', '\x2', '\xE12', 
		'\xE11', '\x3', '\x2', '\x2', '\x2', '\xE12', '\xE13', '\x3', '\x2', '\x2', 
		'\x2', '\xE13', '\xE16', '\x3', '\x2', '\x2', '\x2', '\xE14', '\xE15', 
		'\a', '\x22A', '\x2', '\x2', '\xE15', '\xE17', '\x5', '\x216', '\x10C', 
		'\x2', '\xE16', '\xE14', '\x3', '\x2', '\x2', '\x2', '\xE16', '\xE17', 
		'\x3', '\x2', '\x2', '\x2', '\xE17', '\xE19', '\x3', '\x2', '\x2', '\x2', 
		'\xE18', '\xE1A', '\a', '\x1FA', '\x2', '\x2', '\xE19', '\xE18', '\x3', 
		'\x2', '\x2', '\x2', '\xE19', '\xE1A', '\x3', '\x2', '\x2', '\x2', '\xE1A', 
		'\xE1C', '\x3', '\x2', '\x2', '\x2', '\xE1B', '\xE1D', '\x5', '\x168', 
		'\xB5', '\x2', '\xE1C', '\xE1B', '\x3', '\x2', '\x2', '\x2', '\xE1C', 
		'\xE1D', '\x3', '\x2', '\x2', '\x2', '\xE1D', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\xE1E', '\xE2A', '\a', '~', '\x2', '\x2', '\xE1F', '\xE2B', '\a', 
		'\x2EA', '\x2', '\x2', '\xE20', '\xE25', '\a', '\x2EE', '\x2', '\x2', 
		'\xE21', '\xE23', '\a', '\x2F4', '\x2', '\x2', '\xE22', '\xE21', '\x3', 
		'\x2', '\x2', '\x2', '\xE22', '\xE23', '\x3', '\x2', '\x2', '\x2', '\xE23', 
		'\xE24', '\x3', '\x2', '\x2', '\x2', '\xE24', '\xE26', '\a', '\x2EA', 
		'\x2', '\x2', '\xE25', '\xE22', '\x3', '\x2', '\x2', '\x2', '\xE26', '\xE27', 
		'\x3', '\x2', '\x2', '\x2', '\xE27', '\xE25', '\x3', '\x2', '\x2', '\x2', 
		'\xE27', '\xE28', '\x3', '\x2', '\x2', '\x2', '\xE28', '\xE29', '\x3', 
		'\x2', '\x2', '\x2', '\xE29', '\xE2B', '\a', '\x2EF', '\x2', '\x2', '\xE2A', 
		'\xE1F', '\x3', '\x2', '\x2', '\x2', '\xE2A', '\xE20', '\x3', '\x2', '\x2', 
		'\x2', '\xE2A', '\xE2B', '\x3', '\x2', '\x2', '\x2', '\xE2B', '\xE2E', 
		'\x3', '\x2', '\x2', '\x2', '\xE2C', '\xE2D', '\a', '\x22A', '\x2', '\x2', 
		'\xE2D', '\xE2F', '\x5', '\x216', '\x10C', '\x2', '\xE2E', '\xE2C', '\x3', 
		'\x2', '\x2', '\x2', '\xE2E', '\xE2F', '\x3', '\x2', '\x2', '\x2', '\xE2F', 
		'\xE32', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE31', '\a', '\x37', '\x2', 
		'\x2', '\xE31', '\xE33', '\x5', '\x216', '\x10C', '\x2', '\xE32', '\xE30', 
		'\x3', '\x2', '\x2', '\x2', '\xE32', '\xE33', '\x3', '\x2', '\x2', '\x2', 
		'\xE33', '\xE35', '\x3', '\x2', '\x2', '\x2', '\xE34', '\xE36', '\a', 
		'\x1FA', '\x2', '\x2', '\xE35', '\xE34', '\x3', '\x2', '\x2', '\x2', '\xE35', 
		'\xE36', '\x3', '\x2', '\x2', '\x2', '\xE36', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\xE37', '\xE41', '\a', '$', '\x2', '\x2', '\xE38', '\xE42', '\a', 
		'\x191', '\x2', '\x2', '\xE39', '\xE3C', '\a', '\x198', '\x2', '\x2', 
		'\xE3A', '\xE3B', '\a', '\x16E', '\x2', '\x2', '\xE3B', '\xE3D', '\x5', 
		'\x216', '\x10C', '\x2', '\xE3C', '\xE3A', '\x3', '\x2', '\x2', '\x2', 
		'\xE3C', '\xE3D', '\x3', '\x2', '\x2', '\x2', '\xE3D', '\xE3F', '\x3', 
		'\x2', '\x2', '\x2', '\xE3E', '\xE40', '\x5', '\x16A', '\xB6', '\x2', 
		'\xE3F', '\xE3E', '\x3', '\x2', '\x2', '\x2', '\xE3F', '\xE40', '\x3', 
		'\x2', '\x2', '\x2', '\xE40', '\xE42', '\x3', '\x2', '\x2', '\x2', '\xE41', 
		'\xE38', '\x3', '\x2', '\x2', '\x2', '\xE41', '\xE39', '\x3', '\x2', '\x2', 
		'\x2', '\xE42', '\x169', '\x3', '\x2', '\x2', '\x2', '\xE43', '\xE46', 
		'\a', '\x14D', '\x2', '\x2', '\xE44', '\xE47', '\a', '\x27D', '\x2', '\x2', 
		'\xE45', '\xE47', '\x5', '\x216', '\x10C', '\x2', '\xE46', '\xE44', '\x3', 
		'\x2', '\x2', '\x2', '\xE46', '\xE45', '\x3', '\x2', '\x2', '\x2', '\xE47', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\xE48', '\xE4C', '\x5', '\x2CA', 
		'\x166', '\x2', '\xE49', '\xE4B', '\x5', '\x2CC', '\x167', '\x2', '\xE4A', 
		'\xE49', '\x3', '\x2', '\x2', '\x2', '\xE4B', '\xE4E', '\x3', '\x2', '\x2', 
		'\x2', '\xE4C', '\xE4A', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE4D', 
		'\x3', '\x2', '\x2', '\x2', '\xE4D', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\xE4E', '\xE4C', '\x3', '\x2', '\x2', '\x2', '\xE4F', '\xE52', '\a', 
		'r', '\x2', '\x2', '\xE50', '\xE51', '\a', '\xE4', '\x2', '\x2', '\xE51', 
		'\xE53', '\a', '\x257', '\x2', '\x2', '\xE52', '\xE50', '\x3', '\x2', 
		'\x2', '\x2', '\xE52', '\xE53', '\x3', '\x2', '\x2', '\x2', '\xE53', '\xE54', 
		'\x3', '\x2', '\x2', '\x2', '\xE54', '\xE55', '\a', '\x254', '\x2', '\x2', 
		'\xE55', '\xE56', '\x5', '\x43E', '\x220', '\x2', '\xE56', '\xE57', '\x5', 
		'\x170', '\xB9', '\x2', '\xE57', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\xE58', '\xE59', '\a', '\x2EE', '\x2', '\x2', '\xE59', '\xE5A', '\x5', 
		'\x172', '\xBA', '\x2', '\xE5A', '\xE5B', '\a', '\x2EF', '\x2', '\x2', 
		'\xE5B', '\xE5D', '\x3', '\x2', '\x2', '\x2', '\xE5C', '\xE58', '\x3', 
		'\x2', '\x2', '\x2', '\xE5C', '\xE5D', '\x3', '\x2', '\x2', '\x2', '\xE5D', 
		'\xE64', '\x3', '\x2', '\x2', '\x2', '\xE5E', '\xE5F', '\a', '\x198', 
		'\x2', '\x2', '\xE5F', '\xE61', '\a', '[', '\x2', '\x2', '\xE60', '\xE62', 
		'\t', '\x32', '\x2', '\x2', '\xE61', '\xE60', '\x3', '\x2', '\x2', '\x2', 
		'\xE61', '\xE62', '\x3', '\x2', '\x2', '\x2', '\xE62', '\xE63', '\x3', 
		'\x2', '\x2', '\x2', '\xE63', '\xE65', '\a', '\x206', '\x2', '\x2', '\xE64', 
		'\xE5E', '\x3', '\x2', '\x2', '\x2', '\xE64', '\xE65', '\x3', '\x2', '\x2', 
		'\x2', '\xE65', '\xE67', '\x3', '\x2', '\x2', '\x2', '\xE66', '\xE68', 
		'\x5', '\x1DA', '\xEE', '\x2', '\xE67', '\xE66', '\x3', '\x2', '\x2', 
		'\x2', '\xE67', '\xE68', '\x3', '\x2', '\x2', '\x2', '\xE68', '\xE69', 
		'\x3', '\x2', '\x2', '\x2', '\xE69', '\xE6A', '\x5', '\x176', '\xBC', 
		'\x2', '\xE6A', '\x171', '\x3', '\x2', '\x2', '\x2', '\xE6B', '\xE70', 
		'\x5', '\x174', '\xBB', '\x2', '\xE6C', '\xE6D', '\a', '\x2F4', '\x2', 
		'\x2', '\xE6D', '\xE6F', '\x5', '\x174', '\xBB', '\x2', '\xE6E', '\xE6C', 
		'\x3', '\x2', '\x2', '\x2', '\xE6F', '\xE72', '\x3', '\x2', '\x2', '\x2', 
		'\xE70', '\xE6E', '\x3', '\x2', '\x2', '\x2', '\xE70', '\xE71', '\x3', 
		'\x2', '\x2', '\x2', '\xE71', '\x173', '\x3', '\x2', '\x2', '\x2', '\xE72', 
		'\xE70', '\x3', '\x2', '\x2', '\x2', '\xE73', '\xE7C', '\x5', '\x1FA', 
		'\xFE', '\x2', '\xE74', '\xE7C', '\x5', '\x1FC', '\xFF', '\x2', '\xE75', 
		'\xE7C', '\x5', '\x1FE', '\x100', '\x2', '\xE76', '\xE79', '\x5', '\xEC', 
		'w', '\x2', '\xE77', '\xE79', '\x5', '\x214', '\x10B', '\x2', '\xE78', 
		'\xE76', '\x3', '\x2', '\x2', '\x2', '\xE78', '\xE77', '\x3', '\x2', '\x2', 
		'\x2', '\xE79', '\xE7C', '\x3', '\x2', '\x2', '\x2', '\xE7A', '\xE7C', 
		'\x5', '\x200', '\x101', '\x2', '\xE7B', '\xE73', '\x3', '\x2', '\x2', 
		'\x2', '\xE7B', '\xE74', '\x3', '\x2', '\x2', '\x2', '\xE7B', '\xE75', 
		'\x3', '\x2', '\x2', '\x2', '\xE7B', '\xE78', '\x3', '\x2', '\x2', '\x2', 
		'\xE7B', '\xE7A', '\x3', '\x2', '\x2', '\x2', '\xE7C', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\xE7D', '\xE7F', '\x5', '\x192', '\xCA', '\x2', 
		'\xE7E', '\xE7D', '\x3', '\x2', '\x2', '\x2', '\xE7E', '\xE7F', '\x3', 
		'\x2', '\x2', '\x2', '\xE7F', '\xE81', '\x3', '\x2', '\x2', '\x2', '\xE80', 
		'\xE82', '\x5', '\x116', '\x8C', '\x2', '\xE81', '\xE80', '\x3', '\x2', 
		'\x2', '\x2', '\xE81', '\xE82', '\x3', '\x2', '\x2', '\x2', '\xE82', '\xE84', 
		'\x3', '\x2', '\x2', '\x2', '\xE83', '\xE85', '\x5', '\x18C', '\xC7', 
		'\x2', '\xE84', '\xE83', '\x3', '\x2', '\x2', '\x2', '\xE84', '\xE85', 
		'\x3', '\x2', '\x2', '\x2', '\xE85', '\xE87', '\x3', '\x2', '\x2', '\x2', 
		'\xE86', '\xE88', '\x5', '\x17C', '\xBF', '\x2', '\xE87', '\xE86', '\x3', 
		'\x2', '\x2', '\x2', '\xE87', '\xE88', '\x3', '\x2', '\x2', '\x2', '\xE88', 
		'\xE8A', '\x3', '\x2', '\x2', '\x2', '\xE89', '\xE8B', '\t', '\x33', '\x2', 
		'\x2', '\xE8A', '\xE89', '\x3', '\x2', '\x2', '\x2', '\xE8A', '\xE8B', 
		'\x3', '\x2', '\x2', '\x2', '\xE8B', '\xE91', '\x3', '\x2', '\x2', '\x2', 
		'\xE8C', '\xE8D', '\a', '\x1F4', '\x2', '\x2', '\xE8D', '\xE8E', '\a', 
		'\x2EE', '\x2', '\x2', '\xE8E', '\xE8F', '\a', '\x15D', '\x2', '\x2', 
		'\xE8F', '\xE90', '\t', '\x34', '\x2', '\x2', '\xE90', '\xE92', '\a', 
		'\x2EF', '\x2', '\x2', '\xE91', '\xE8C', '\x3', '\x2', '\x2', '\x2', '\xE91', 
		'\xE92', '\x3', '\x2', '\x2', '\x2', '\xE92', '\xE94', '\x3', '\x2', '\x2', 
		'\x2', '\xE93', '\xE95', '\x5', '\x13E', '\xA0', '\x2', '\xE94', '\xE93', 
		'\x3', '\x2', '\x2', '\x2', '\xE94', '\xE95', '\x3', '\x2', '\x2', '\x2', 
		'\xE95', '\xE97', '\x3', '\x2', '\x2', '\x2', '\xE96', '\xE98', '\t', 
		'\x35', '\x2', '\x2', '\xE97', '\xE96', '\x3', '\x2', '\x2', '\x2', '\xE97', 
		'\xE98', '\x3', '\x2', '\x2', '\x2', '\xE98', '\xE9C', '\x3', '\x2', '\x2', 
		'\x2', '\xE99', '\xE9B', '\x5', '\x18A', '\xC6', '\x2', '\xE9A', '\xE99', 
		'\x3', '\x2', '\x2', '\x2', '\xE9B', '\xE9E', '\x3', '\x2', '\x2', '\x2', 
		'\xE9C', '\xE9A', '\x3', '\x2', '\x2', '\x2', '\xE9C', '\xE9D', '\x3', 
		'\x2', '\x2', '\x2', '\xE9D', '\xEA0', '\x3', '\x2', '\x2', '\x2', '\xE9E', 
		'\xE9C', '\x3', '\x2', '\x2', '\x2', '\xE9F', '\xEA1', '\x5', '\x17A', 
		'\xBE', '\x2', '\xEA0', '\xE9F', '\x3', '\x2', '\x2', '\x2', '\xEA0', 
		'\xEA1', '\x3', '\x2', '\x2', '\x2', '\xEA1', '\xEA3', '\x3', '\x2', '\x2', 
		'\x2', '\xEA2', '\xEA4', '\x5', '\x178', '\xBD', '\x2', '\xEA3', '\xEA2', 
		'\x3', '\x2', '\x2', '\x2', '\xEA3', '\xEA4', '\x3', '\x2', '\x2', '\x2', 
		'\xEA4', '\xEA7', '\x3', '\x2', '\x2', '\x2', '\xEA5', '\xEA6', '\a', 
		'\x205', '\x2', '\x2', '\xEA6', '\xEA8', '\a', '\x16', '\x2', '\x2', '\xEA7', 
		'\xEA5', '\x3', '\x2', '\x2', '\x2', '\xEA7', '\xEA8', '\x3', '\x2', '\x2', 
		'\x2', '\xEA8', '\xEAB', '\x3', '\x2', '\x2', '\x2', '\xEA9', '\xEAA', 
		'\a', '\x19', '\x2', '\x2', '\xEAA', '\xEAC', '\x5', '\x16C', '\xB7', 
		'\x2', '\xEAB', '\xEA9', '\x3', '\x2', '\x2', '\x2', '\xEAB', '\xEAC', 
		'\x3', '\x2', '\x2', '\x2', '\xEAC', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\xEAD', '\xEAE', '\a', '\xD3', '\x2', '\x2', '\xEAE', '\xEB0', '\a', 
		'\x17', '\x2', '\x2', '\xEAF', '\xEB1', '\x5', '\x414', '\x20B', '\x2', 
		'\xEB0', '\xEAF', '\x3', '\x2', '\x2', '\x2', '\xEB0', '\xEB1', '\x3', 
		'\x2', '\x2', '\x2', '\xEB1', '\xEB6', '\x3', '\x2', '\x2', '\x2', '\xEB2', 
		'\xEB3', '\a', '\x17E', '\x2', '\x2', '\xEB3', '\xEB4', '\a', '\xD3', 
		'\x2', '\x2', '\xEB4', '\xEB6', '\a', '\x17', '\x2', '\x2', '\xEB5', '\xEAD', 
		'\x3', '\x2', '\x2', '\x2', '\xEB5', '\xEB2', '\x3', '\x2', '\x2', '\x2', 
		'\xEB6', '\x179', '\x3', '\x2', '\x2', '\x2', '\xEB7', '\xEB8', '\t', 
		'\a', '\x2', '\x2', '\xEB8', '\xEB9', '\a', '\x205', '\x2', '\x2', '\xEB9', 
		'\xEBA', '\a', '\x162', '\x2', '\x2', '\xEBA', '\x17B', '\x3', '\x2', 
		'\x2', '\x2', '\xEBB', '\xEBD', '\a', 'U', '\x2', '\x2', '\xEBC', '\xEBE', 
		'\x5', '\x17E', '\xC0', '\x2', '\xEBD', '\xEBC', '\x3', '\x2', '\x2', 
		'\x2', '\xEBD', '\xEBE', '\x3', '\x2', '\x2', '\x2', '\xEBE', '\xEBF', 
		'\x3', '\x2', '\x2', '\x2', '\xEBF', '\xEC1', '\x5', '\x180', '\xC1', 
		'\x2', '\xEC0', '\xEC2', '\x5', '\x186', '\xC4', '\x2', '\xEC1', '\xEC0', 
		'\x3', '\x2', '\x2', '\x2', '\xEC1', '\xEC2', '\x3', '\x2', '\x2', '\x2', 
		'\xEC2', '\xEC3', '\x3', '\x2', '\x2', '\x2', '\xEC3', '\xEC4', '\x5', 
		'\x188', '\xC5', '\x2', '\xEC4', '\x17D', '\x3', '\x2', '\x2', '\x2', 
		'\xEC5', '\xEC6', '\x5', '\x43E', '\x220', '\x2', '\xEC6', '\xEC7', '\a', 
		'\x11F', '\x2', '\x2', '\xEC7', '\xEC8', '\x5', '\x43E', '\x220', '\x2', 
		'\xEC8', '\x17F', '\x3', '\x2', '\x2', '\x2', '\xEC9', '\xECB', '\a', 
		'?', '\x2', '\x2', '\xECA', '\xECC', '\t', '\x36', '\x2', '\x2', '\xECB', 
		'\xECA', '\x3', '\x2', '\x2', '\x2', '\xECB', '\xECC', '\x3', '\x2', '\x2', 
		'\x2', '\xECC', '\xECD', '\x3', '\x2', '\x2', '\x2', '\xECD', '\xECE', 
		'\a', '\x19E', '\x2', '\x2', '\xECE', '\xECF', '\x5', '\x182', '\xC2', 
		'\x2', '\xECF', '\x181', '\x3', '\x2', '\x2', '\x2', '\xED0', '\xEDC', 
		'\x5', '\x184', '\xC3', '\x2', '\xED1', '\xED2', '\a', '\x2EE', '\x2', 
		'\x2', '\xED2', '\xED5', '\x5', '\x182', '\xC2', '\x2', '\xED3', '\xED4', 
		'\a', '\x2F4', '\x2', '\x2', '\xED4', '\xED6', '\x5', '\x182', '\xC2', 
		'\x2', '\xED5', '\xED3', '\x3', '\x2', '\x2', '\x2', '\xED6', '\xED7', 
		'\x3', '\x2', '\x2', '\x2', '\xED7', '\xED5', '\x3', '\x2', '\x2', '\x2', 
		'\xED7', '\xED8', '\x3', '\x2', '\x2', '\x2', '\xED8', '\xED9', '\x3', 
		'\x2', '\x2', '\x2', '\xED9', '\xEDA', '\a', '\x2EF', '\x2', '\x2', '\xEDA', 
		'\xEDC', '\x3', '\x2', '\x2', '\x2', '\xEDB', '\xED0', '\x3', '\x2', '\x2', 
		'\x2', '\xEDB', '\xED1', '\x3', '\x2', '\x2', '\x2', '\xEDC', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\xEDD', '\xEDE', '\x5', '\x444', '\x223', 
		'\x2', '\xEDE', '\x185', '\x3', '\x2', '\x2', '\x2', '\xEDF', '\xEE0', 
		'\t', '\x37', '\x2', '\x2', '\xEE0', '\xEE1', '\a', '\x198', '\x2', '\x2', 
		'\xEE1', '\xEE7', '\a', '\x134', '\x2', '\x2', '\xEE2', '\xEE3', '\t', 
		'\x37', '\x2', '\x2', '\xEE3', '\xEE4', '\a', '\x198', '\x2', '\x2', '\xEE4', 
		'\xEE5', '\a', '}', '\x2', '\x2', '\xEE5', '\xEE7', '\a', '\x162', '\x2', 
		'\x2', '\xEE6', '\xEDF', '\x3', '\x2', '\x2', '\x2', '\xEE6', '\xEE2', 
		'\x3', '\x2', '\x2', '\x2', '\xEE7', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\xEE8', '\xEE9', '\a', '\x2A2', '\x2', '\x2', '\xEE9', '\xEEA', '\a', 
		'\x14C', '\x2', '\x2', '\xEEA', '\xEEB', '\a', '\x2BA', '\x2', '\x2', 
		'\xEEB', '\xEEC', '\a', '\x2EE', '\x2', '\x2', '\xEEC', '\xEED', '\x5', 
		'\x416', '\x20C', '\x2', '\xEED', '\xEEE', '\a', '\x2EF', '\x2', '\x2', 
		'\xEEE', '\xEF3', '\x3', '\x2', '\x2', '\x2', '\xEEF', '\xEF0', '\a', 
		'\x2A1', '\x2', '\x2', '\xEF0', '\xEF1', '\a', '\x14C', '\x2', '\x2', 
		'\xEF1', '\xEF3', '\a', '\x2BA', '\x2', '\x2', '\xEF2', '\xEE8', '\x3', 
		'\x2', '\x2', '\x2', '\xEF2', '\xEEF', '\x3', '\x2', '\x2', '\x2', '\xEF3', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\xEF4', '\xEF6', '\t', '\a', '\x2', 
		'\x2', '\xEF5', '\xEF7', '\t', '!', '\x2', '\x2', '\xEF6', '\xEF5', '\x3', 
		'\x2', '\x2', '\x2', '\xEF6', '\xEF7', '\x3', '\x2', '\x2', '\x2', '\xEF7', 
		'\xEFE', '\x3', '\x2', '\x2', '\x2', '\xEF8', '\xEF9', '\a', '\x27C', 
		'\x2', '\x2', '\xEF9', '\xEFF', '\x5', '\x444', '\x223', '\x2', '\xEFA', 
		'\xEFB', '\a', '\x1CD', '\x2', '\x2', '\xEFB', '\xEFF', '\a', '\x122', 
		'\x2', '\x2', '\xEFC', '\xEFD', '\a', '\x65', '\x2', '\x2', '\xEFD', '\xEFF', 
		'\x5', '\x406', '\x204', '\x2', '\xEFE', '\xEF8', '\x3', '\x2', '\x2', 
		'\x2', '\xEFE', '\xEFA', '\x3', '\x2', '\x2', '\x2', '\xEFE', '\xEFC', 
		'\x3', '\x2', '\x2', '\x2', '\xEFF', '\xF01', '\x3', '\x2', '\x2', '\x2', 
		'\xF00', '\xF02', '\x5', '\xF2', 'z', '\x2', '\xF01', '\xF00', '\x3', 
		'\x2', '\x2', '\x2', '\xF01', '\xF02', '\x3', '\x2', '\x2', '\x2', '\xF02', 
		'\xF03', '\x3', '\x2', '\x2', '\x2', '\xF03', '\xF05', '\x5', '\x148', 
		'\xA5', '\x2', '\xF04', '\xF06', '\a', '\x45', '\x2', '\x2', '\xF05', 
		'\xF04', '\x3', '\x2', '\x2', '\x2', '\xF05', '\xF06', '\x3', '\x2', '\x2', 
		'\x2', '\xF06', '\xF0A', '\x3', '\x2', '\x2', '\x2', '\xF07', '\xF08', 
		'\a', '\x121', '\x2', '\x2', '\xF08', '\xF0B', '\a', '\x100', '\x2', '\x2', 
		'\xF09', '\xF0B', '\a', '\xA4', '\x2', '\x2', '\xF0A', '\xF07', '\x3', 
		'\x2', '\x2', '\x2', '\xF0A', '\xF09', '\x3', '\x2', '\x2', '\x2', '\xF0A', 
		'\xF0B', '\x3', '\x2', '\x2', '\x2', '\xF0B', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\xF0C', '\xF14', '\x5', '\x18E', '\xC8', '\x2', '\xF0D', '\xF14', 
		'\x5', '\x19A', '\xCE', '\x2', '\xF0E', '\xF14', '\x5', '\x190', '\xC9', 
		'\x2', '\xF0F', '\xF14', '\x5', '\x19C', '\xCF', '\x2', '\xF10', '\xF14', 
		'\x5', '\x1A0', '\xD1', '\x2', '\xF11', '\xF14', '\x5', '\x19E', '\xD0', 
		'\x2', '\xF12', '\xF14', '\x5', '\x1BC', '\xDF', '\x2', '\xF13', '\xF0C', 
		'\x3', '\x2', '\x2', '\x2', '\xF13', '\xF0D', '\x3', '\x2', '\x2', '\x2', 
		'\xF13', '\xF0E', '\x3', '\x2', '\x2', '\x2', '\xF13', '\xF0F', '\x3', 
		'\x2', '\x2', '\x2', '\xF13', '\xF10', '\x3', '\x2', '\x2', '\x2', '\xF13', 
		'\xF11', '\x3', '\x2', '\x2', '\x2', '\xF13', '\xF12', '\x3', '\x2', '\x2', 
		'\x2', '\xF14', '\x18D', '\x3', '\x2', '\x2', '\x2', '\xF15', '\xF16', 
		'\a', '\x1AF', '\x2', '\x2', '\xF16', '\xF17', '\a', '?', '\x2', '\x2', 
		'\xF17', '\xF18', '\a', '\x1DB', '\x2', '\x2', '\xF18', '\xF2A', '\x5', 
		'\x444', '\x223', '\x2', '\xF19', '\xF1A', '\a', '\x114', '\x2', '\x2', 
		'\xF1A', '\xF1B', '\a', '\x2EE', '\x2', '\x2', '\xF1B', '\xF1C', '\x5', 
		'\x37A', '\x1BE', '\x2', '\xF1C', '\xF1D', '\a', '\x2EF', '\x2', '\x2', 
		'\xF1D', '\xF1E', '\a', '\x23E', '\x2', '\x2', '\xF1E', '\xF1F', '\a', 
		'\x107', '\x2', '\x2', '\xF1F', '\xF20', '\a', '\x2EE', '\x2', '\x2', 
		'\xF20', '\xF25', '\x5', '\x420', '\x211', '\x2', '\xF21', '\xF22', '\a', 
		'\x2F4', '\x2', '\x2', '\xF22', '\xF24', '\x5', '\x420', '\x211', '\x2', 
		'\xF23', '\xF21', '\x3', '\x2', '\x2', '\x2', '\xF24', '\xF27', '\x3', 
		'\x2', '\x2', '\x2', '\xF25', '\xF23', '\x3', '\x2', '\x2', '\x2', '\xF25', 
		'\xF26', '\x3', '\x2', '\x2', '\x2', '\xF26', '\xF28', '\x3', '\x2', '\x2', 
		'\x2', '\xF27', '\xF25', '\x3', '\x2', '\x2', '\x2', '\xF28', '\xF29', 
		'\a', '\x2EF', '\x2', '\x2', '\xF29', '\xF2B', '\x3', '\x2', '\x2', '\x2', 
		'\xF2A', '\xF19', '\x3', '\x2', '\x2', '\x2', '\xF2A', '\xF2B', '\x3', 
		'\x2', '\x2', '\x2', '\xF2B', '\xF2C', '\x3', '\x2', '\x2', '\x2', '\xF2C', 
		'\xF2D', '\a', '\x2EE', '\x2', '\x2', '\xF2D', '\xF2F', '\a', '\x1AF', 
		'\x2', '\x2', '\xF2E', '\xF30', '\x5', '\x424', '\x213', '\x2', '\xF2F', 
		'\xF2E', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF30', '\x3', '\x2', '\x2', 
		'\x2', '\xF30', '\xF31', '\x3', '\x2', '\x2', '\x2', '\xF31', '\xF32', 
		'\x5', '\x1B0', '\xD9', '\x2', '\xF32', '\xF33', '\x5', '\x1AE', '\xD8', 
		'\x2', '\xF33', '\xF34', '\a', '\x2EF', '\x2', '\x2', '\xF34', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\xF35', '\xF36', '\a', '\x1AF', '\x2', '\x2', 
		'\xF36', '\xF37', '\a', '?', '\x2', '\x2', '\xF37', '\xF38', '\a', '\xEC', 
		'\x2', '\x2', '\xF38', '\xF3B', '\x5', '\x444', '\x223', '\x2', '\xF39', 
		'\xF3C', '\x5', '\xF8', '}', '\x2', '\xF3A', '\xF3C', '\x5', '\x138', 
		'\x9D', '\x2', '\xF3B', '\xF39', '\x3', '\x2', '\x2', '\x2', '\xF3B', 
		'\xF3A', '\x3', '\x2', '\x2', '\x2', '\xF3C', '\x191', '\x3', '\x2', '\x2', 
		'\x2', '\xF3D', '\xF4E', '\x5', '\x1C0', '\xE1', '\x2', '\xF3E', '\xF4E', 
		'\x5', '\x1C4', '\xE3', '\x2', '\xF3F', '\xF42', '\x5', '\x1C8', '\xE5', 
		'\x2', '\xF40', '\xF42', '\x5', '\x1CC', '\xE7', '\x2', '\xF41', '\xF3F', 
		'\x3', '\x2', '\x2', '\x2', '\xF41', '\xF40', '\x3', '\x2', '\x2', '\x2', 
		'\xF42', '\xF49', '\x3', '\x2', '\x2', '\x2', '\xF43', '\xF44', '\a', 
		'\x2EE', '\x2', '\x2', '\xF44', '\xF45', '\x5', '\x132', '\x9A', '\x2', 
		'\xF45', '\xF46', '\a', '\x2EF', '\x2', '\x2', '\xF46', '\xF48', '\x3', 
		'\x2', '\x2', '\x2', '\xF47', '\xF43', '\x3', '\x2', '\x2', '\x2', '\xF48', 
		'\xF4B', '\x3', '\x2', '\x2', '\x2', '\xF49', '\xF47', '\x3', '\x2', '\x2', 
		'\x2', '\xF49', '\xF4A', '\x3', '\x2', '\x2', '\x2', '\xF4A', '\xF4E', 
		'\x3', '\x2', '\x2', '\x2', '\xF4B', '\xF49', '\x3', '\x2', '\x2', '\x2', 
		'\xF4C', '\xF4E', '\x5', '\x194', '\xCB', '\x2', '\xF4D', '\xF3D', '\x3', 
		'\x2', '\x2', '\x2', '\xF4D', '\xF3E', '\x3', '\x2', '\x2', '\x2', '\xF4D', 
		'\xF41', '\x3', '\x2', '\x2', '\x2', '\xF4D', '\xF4C', '\x3', '\x2', '\x2', 
		'\x2', '\xF4E', '\x193', '\x3', '\x2', '\x2', '\x2', '\xF4F', '\xF51', 
		'\a', '\x2B4', '\x2', '\x2', '\xF50', '\xF52', '\a', 'X', '\x2', '\x2', 
		'\xF51', '\xF50', '\x3', '\x2', '\x2', '\x2', '\xF51', '\xF52', '\x3', 
		'\x2', '\x2', '\x2', '\xF52', '\xF53', '\x3', '\x2', '\x2', '\x2', '\xF53', 
		'\xF55', '\x5', '\x48A', '\x246', '\x2', '\xF54', '\xF56', '\x5', '\x196', 
		'\xCC', '\x2', '\xF55', '\xF54', '\x3', '\x2', '\x2', '\x2', '\xF55', 
		'\xF56', '\x3', '\x2', '\x2', '\x2', '\xF56', '\xF57', '\x3', '\x2', '\x2', 
		'\x2', '\xF57', '\xF58', '\x5', '\x198', '\xCD', '\x2', '\xF58', '\x195', 
		'\x3', '\x2', '\x2', '\x2', '\xF59', '\xF72', '\a', '\x23F', '\x2', '\x2', 
		'\xF5A', '\xF6C', '\a', '\x19', '\x2', '\x2', '\xF5B', '\xF5C', '\a', 
		'\x18F', '\x2', '\x2', '\xF5C', '\xF6D', '\a', '\x1E9', '\x2', '\x2', 
		'\xF5D', '\xF5F', '\t', '$', '\x2', '\x2', '\xF5E', '\xF5D', '\x3', '\x2', 
		'\x2', '\x2', '\xF5E', '\xF5F', '\x3', '\x2', '\x2', '\x2', '\xF5F', '\xF63', 
		'\x3', '\x2', '\x2', '\x2', '\xF60', '\xF64', '\a', 'R', '\x2', '\x2', 
		'\xF61', '\xF62', '\a', '\x31', '\x2', '\x2', '\xF62', '\xF64', '\a', 
		'\x2B5', '\x2', '\x2', '\xF63', '\xF60', '\x3', '\x2', '\x2', '\x2', '\xF63', 
		'\xF61', '\x3', '\x2', '\x2', '\x2', '\xF63', '\xF64', '\x3', '\x2', '\x2', 
		'\x2', '\xF64', '\xF6A', '\x3', '\x2', '\x2', '\x2', '\xF65', '\xF67', 
		'\x5', '\x428', '\x215', '\x2', '\xF66', '\xF68', '\x5', '\x1D0', '\xE9', 
		'\x2', '\xF67', '\xF66', '\x3', '\x2', '\x2', '\x2', '\xF67', '\xF68', 
		'\x3', '\x2', '\x2', '\x2', '\xF68', '\xF6B', '\x3', '\x2', '\x2', '\x2', 
		'\xF69', '\xF6B', '\x5', '\x1D0', '\xE9', '\x2', '\xF6A', '\xF65', '\x3', 
		'\x2', '\x2', '\x2', '\xF6A', '\xF69', '\x3', '\x2', '\x2', '\x2', '\xF6A', 
		'\xF6B', '\x3', '\x2', '\x2', '\x2', '\xF6B', '\xF6D', '\x3', '\x2', '\x2', 
		'\x2', '\xF6C', '\xF5B', '\x3', '\x2', '\x2', '\x2', '\xF6C', '\xF5E', 
		'\x3', '\x2', '\x2', '\x2', '\xF6D', '\xF73', '\x3', '\x2', '\x2', '\x2', 
		'\xF6E', '\xF6F', '\a', '\xE', '\x2', '\x2', '\xF6F', '\xF70', '\a', '\x291', 
		'\x2', '\x2', '\xF70', '\xF71', '\a', '\x19', '\x2', '\x2', '\xF71', '\xF73', 
		'\t', '\x38', '\x2', '\x2', '\xF72', '\xF5A', '\x3', '\x2', '\x2', '\x2', 
		'\xF72', '\xF6E', '\x3', '\x2', '\x2', '\x2', '\xF73', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\xF74', '\xF75', '\a', '\x2B1', '\x2', '\x2', '\xF75', 
		'\xF77', '\a', '\x2EA', '\x2', '\x2', '\xF76', '\xF74', '\x3', '\x2', 
		'\x2', '\x2', '\xF76', '\xF77', '\x3', '\x2', '\x2', '\x2', '\xF77', '\xF78', 
		'\x3', '\x2', '\x2', '\x2', '\xF78', '\xF7D', '\a', '\xAC', '\x2', '\x2', 
		'\xF79', '\xF7E', '\x5', '\x412', '\x20A', '\x2', '\xF7A', '\xF7B', '\a', 
		'\x2EA', '\x2', '\x2', '\xF7B', '\xF7C', '\a', '\x223', '\x2', '\x2', 
		'\xF7C', '\xF7E', '\x5', '\x412', '\x20A', '\x2', '\xF7D', '\xF79', '\x3', 
		'\x2', '\x2', '\x2', '\xF7D', '\xF7A', '\x3', '\x2', '\x2', '\x2', '\xF7E', 
		'\xF84', '\x3', '\x2', '\x2', '\x2', '\xF7F', '\xF80', '\a', '\x23F', 
		'\x2', '\x2', '\xF80', '\xF81', '\a', '\xE', '\x2', '\x2', '\xF81', '\xF82', 
		'\a', '\x291', '\x2', '\x2', '\xF82', '\xF83', '\a', '\x19', '\x2', '\x2', 
		'\xF83', '\xF85', '\t', '\x38', '\x2', '\x2', '\xF84', '\xF7F', '\x3', 
		'\x2', '\x2', '\x2', '\xF84', '\xF85', '\x3', '\x2', '\x2', '\x2', '\xF85', 
		'\xF88', '\x3', '\x2', '\x2', '\x2', '\xF86', '\xF87', '\t', '\x39', '\x2', 
		'\x2', '\xF87', '\xF89', '\a', '\x17F', '\x2', '\x2', '\xF88', '\xF86', 
		'\x3', '\x2', '\x2', '\x2', '\xF88', '\xF89', '\x3', '\x2', '\x2', '\x2', 
		'\xF89', '\xF8C', '\x3', '\x2', '\x2', '\x2', '\xF8A', '\xF8B', '\t', 
		'\x39', '\x2', '\x2', '\xF8B', '\xF8D', '\a', '\x15', '\x2', '\x2', '\xF8C', 
		'\xF8A', '\x3', '\x2', '\x2', '\x2', '\xF8C', '\xF8D', '\x3', '\x2', '\x2', 
		'\x2', '\xF8D', '\x199', '\x3', '\x2', '\x2', '\x2', '\xF8E', '\xF8F', 
		'\a', '\x1AF', '\x2', '\x2', '\xF8F', '\xF90', '\a', '?', '\x2', '\x2', 
		'\xF90', '\xF91', '\a', '\x133', '\x2', '\x2', '\xF91', '\xF92', '\x5', 
		'\x444', '\x223', '\x2', '\xF92', '\xF9A', '\a', '\x2EE', '\x2', '\x2', 
		'\xF93', '\xF95', '\a', '\x1AF', '\x2', '\x2', '\xF94', '\xF96', '\x5', 
		'\x424', '\x213', '\x2', '\xF95', '\xF94', '\x3', '\x2', '\x2', '\x2', 
		'\xF95', '\xF96', '\x3', '\x2', '\x2', '\x2', '\xF96', '\xF97', '\x3', 
		'\x2', '\x2', '\x2', '\xF97', '\xF98', '\x5', '\x1B2', '\xDA', '\x2', 
		'\xF98', '\xF99', '\x5', '\x1AE', '\xD8', '\x2', '\xF99', '\xF9B', '\x3', 
		'\x2', '\x2', '\x2', '\xF9A', '\xF93', '\x3', '\x2', '\x2', '\x2', '\xF9B', 
		'\xF9C', '\x3', '\x2', '\x2', '\x2', '\xF9C', '\xF9A', '\x3', '\x2', '\x2', 
		'\x2', '\xF9C', '\xF9D', '\x3', '\x2', '\x2', '\x2', '\xF9D', '\xF9E', 
		'\x3', '\x2', '\x2', '\x2', '\xF9E', '\xF9F', '\a', '\x2EF', '\x2', '\x2', 
		'\xF9F', '\x19B', '\x3', '\x2', '\x2', '\x2', '\xFA0', '\xFA1', '\a', 
		'\x1AF', '\x2', '\x2', '\xFA1', '\xFA2', '\a', '?', '\x2', '\x2', '\xFA2', 
		'\xFA3', '\a', '\x1DB', '\x2', '\x2', '\xFA3', '\xFA4', '\x5', '\x444', 
		'\x223', '\x2', '\xFA4', '\xFA5', '\a', '\x114', '\x2', '\x2', '\xFA5', 
		'\xFA6', '\a', '\x2EE', '\x2', '\x2', '\xFA6', '\xFA7', '\x5', '\x37A', 
		'\x1BE', '\x2', '\xFA7', '\xFA8', '\a', '\x2EF', '\x2', '\x2', '\xFA8', 
		'\xFA9', '\a', '\x23F', '\x2', '\x2', '\xFA9', '\xFAA', '\a', '\x107', 
		'\x2', '\x2', '\xFAA', '\xFAB', '\a', '\x2EE', '\x2', '\x2', '\xFAB', 
		'\xFB0', '\x5', '\x420', '\x211', '\x2', '\xFAC', '\xFAD', '\a', '\x2F4', 
		'\x2', '\x2', '\xFAD', '\xFAF', '\x5', '\x420', '\x211', '\x2', '\xFAE', 
		'\xFAC', '\x3', '\x2', '\x2', '\x2', '\xFAF', '\xFB2', '\x3', '\x2', '\x2', 
		'\x2', '\xFB0', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xFB0', '\xFB1', 
		'\x3', '\x2', '\x2', '\x2', '\xFB1', '\xFB3', '\x3', '\x2', '\x2', '\x2', 
		'\xFB2', '\xFB0', '\x3', '\x2', '\x2', '\x2', '\xFB3', '\xFB4', '\a', 
		'\x2EF', '\x2', '\x2', '\xFB4', '\xFB8', '\x3', '\x2', '\x2', '\x2', '\xFB5', 
		'\xFB9', '\x5', '\x1B4', '\xDB', '\x2', '\xFB6', '\xFB9', '\x5', '\x1B6', 
		'\xDC', '\x2', '\xFB7', '\xFB9', '\x5', '\x1B8', '\xDD', '\x2', '\xFB8', 
		'\xFB5', '\x3', '\x2', '\x2', '\x2', '\xFB8', '\xFB6', '\x3', '\x2', '\x2', 
		'\x2', '\xFB8', '\xFB7', '\x3', '\x2', '\x2', '\x2', '\xFB9', '\xFBA', 
		'\x3', '\x2', '\x2', '\x2', '\xFBA', '\xFBB', '\a', '\x2EE', '\x2', '\x2', 
		'\xFBB', '\xFBC', '\x5', '\x1A2', '\xD2', '\x2', '\xFBC', '\xFBD', '\a', 
		'\x2EF', '\x2', '\x2', '\xFBD', '\x19D', '\x3', '\x2', '\x2', '\x2', '\xFBE', 
		'\xFBF', '\a', '\x1AF', '\x2', '\x2', '\xFBF', '\xFC0', '\a', '?', '\x2', 
		'\x2', '\xFC0', '\xFC1', '\a', '\xEC', '\x2', '\x2', '\xFC1', '\xFC5', 
		'\x5', '\x444', '\x223', '\x2', '\xFC2', '\xFC6', '\x5', '\x1B4', '\xDB', 
		'\x2', '\xFC3', '\xFC6', '\x5', '\x1B6', '\xDC', '\x2', '\xFC4', '\xFC6', 
		'\x5', '\x1B8', '\xDD', '\x2', '\xFC5', '\xFC2', '\x3', '\x2', '\x2', 
		'\x2', '\xFC5', '\xFC3', '\x3', '\x2', '\x2', '\x2', '\xFC5', '\xFC4', 
		'\x3', '\x2', '\x2', '\x2', '\xFC6', '\xFC9', '\x3', '\x2', '\x2', '\x2', 
		'\xFC7', '\xFCA', '\x5', '\xF8', '}', '\x2', '\xFC8', '\xFCA', '\x5', 
		'\x102', '\x82', '\x2', '\xFC9', '\xFC7', '\x3', '\x2', '\x2', '\x2', 
		'\xFC9', '\xFC8', '\x3', '\x2', '\x2', '\x2', '\xFCA', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\xFCB', '\xFCC', '\a', '\x1AF', '\x2', '\x2', '\xFCC', 
		'\xFCD', '\a', '?', '\x2', '\x2', '\xFCD', '\xFCE', '\a', '\x133', '\x2', 
		'\x2', '\xFCE', '\xFD2', '\x5', '\x444', '\x223', '\x2', '\xFCF', '\xFD3', 
		'\x5', '\x1B4', '\xDB', '\x2', '\xFD0', '\xFD3', '\x5', '\x1B6', '\xDC', 
		'\x2', '\xFD1', '\xFD3', '\x5', '\x1B8', '\xDD', '\x2', '\xFD2', '\xFCF', 
		'\x3', '\x2', '\x2', '\x2', '\xFD2', '\xFD0', '\x3', '\x2', '\x2', '\x2', 
		'\xFD2', '\xFD1', '\x3', '\x2', '\x2', '\x2', '\xFD3', '\xFD4', '\x3', 
		'\x2', '\x2', '\x2', '\xFD4', '\xFD9', '\x5', '\x1A4', '\xD3', '\x2', 
		'\xFD5', '\xFD6', '\a', '\x2F4', '\x2', '\x2', '\xFD6', '\xFD8', '\x5', 
		'\x1A4', '\xD3', '\x2', '\xFD7', '\xFD5', '\x3', '\x2', '\x2', '\x2', 
		'\xFD8', '\xFDB', '\x3', '\x2', '\x2', '\x2', '\xFD9', '\xFD7', '\x3', 
		'\x2', '\x2', '\x2', '\xFD9', '\xFDA', '\x3', '\x2', '\x2', '\x2', '\xFDA', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\xFDB', '\xFD9', '\x3', '\x2', '\x2', 
		'\x2', '\xFDC', '\xFDD', '\a', '\x1AF', '\x2', '\x2', '\xFDD', '\xFDE', 
		'\x5', '\x424', '\x213', '\x2', '\xFDE', '\xFDF', '\x5', '\x1B0', '\xD9', 
		'\x2', '\xFDF', '\xFFC', '\x5', '\x1AE', '\xD8', '\x2', '\xFE0', '\xFE1', 
		'\a', '\x2EE', '\x2', '\x2', '\xFE1', '\xFE6', '\x5', '\x1A6', '\xD4', 
		'\x2', '\xFE2', '\xFE3', '\a', '\x2F4', '\x2', '\x2', '\xFE3', '\xFE5', 
		'\x5', '\x1A6', '\xD4', '\x2', '\xFE4', '\xFE2', '\x3', '\x2', '\x2', 
		'\x2', '\xFE5', '\xFE8', '\x3', '\x2', '\x2', '\x2', '\xFE6', '\xFE4', 
		'\x3', '\x2', '\x2', '\x2', '\xFE6', '\xFE7', '\x3', '\x2', '\x2', '\x2', 
		'\xFE7', '\xFFD', '\x3', '\x2', '\x2', '\x2', '\xFE8', '\xFE6', '\x3', 
		'\x2', '\x2', '\x2', '\xFE9', '\xFEE', '\x5', '\x1A8', '\xD5', '\x2', 
		'\xFEA', '\xFEB', '\a', '\x2F4', '\x2', '\x2', '\xFEB', '\xFED', '\x5', 
		'\x1A8', '\xD5', '\x2', '\xFEC', '\xFEA', '\x3', '\x2', '\x2', '\x2', 
		'\xFED', '\xFF0', '\x3', '\x2', '\x2', '\x2', '\xFEE', '\xFEC', '\x3', 
		'\x2', '\x2', '\x2', '\xFEE', '\xFEF', '\x3', '\x2', '\x2', '\x2', '\xFEF', 
		'\xFFD', '\x3', '\x2', '\x2', '\x2', '\xFF0', '\xFEE', '\x3', '\x2', '\x2', 
		'\x2', '\xFF1', '\xFF6', '\x5', '\x1AA', '\xD6', '\x2', '\xFF2', '\xFF3', 
		'\a', '\x2F4', '\x2', '\x2', '\xFF3', '\xFF5', '\x5', '\x1AA', '\xD6', 
		'\x2', '\xFF4', '\xFF2', '\x3', '\x2', '\x2', '\x2', '\xFF5', '\xFF8', 
		'\x3', '\x2', '\x2', '\x2', '\xFF6', '\xFF4', '\x3', '\x2', '\x2', '\x2', 
		'\xFF6', '\xFF7', '\x3', '\x2', '\x2', '\x2', '\xFF7', '\xFF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFF8', '\xFF6', '\x3', '\x2', '\x2', '\x2', '\xFF9', 
		'\xFFA', '\a', '\x2EF', '\x2', '\x2', '\xFFA', '\xFFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFFB', '\xFFD', '\x5', '\x1AC', '\xD7', '\x2', '\xFFC', 
		'\xFE0', '\x3', '\x2', '\x2', '\x2', '\xFFC', '\xFE9', '\x3', '\x2', '\x2', 
		'\x2', '\xFFC', '\xFF1', '\x3', '\x2', '\x2', '\x2', '\xFFC', '\xFFB', 
		'\x3', '\x2', '\x2', '\x2', '\xFFC', '\xFFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFFD', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\xFFE', '\xFFF', '\a', 
		'\x1AF', '\x2', '\x2', '\xFFF', '\x1000', '\x5', '\x424', '\x213', '\x2', 
		'\x1000', '\x1001', '\x5', '\x1B2', '\xDA', '\x2', '\x1001', '\x101E', 
		'\x5', '\x1AE', '\xD8', '\x2', '\x1002', '\x1003', '\a', '\x2EE', '\x2', 
		'\x2', '\x1003', '\x1008', '\x5', '\x1A6', '\xD4', '\x2', '\x1004', '\x1005', 
		'\a', '\x2F4', '\x2', '\x2', '\x1005', '\x1007', '\x5', '\x1A6', '\xD4', 
		'\x2', '\x1006', '\x1004', '\x3', '\x2', '\x2', '\x2', '\x1007', '\x100A', 
		'\x3', '\x2', '\x2', '\x2', '\x1008', '\x1006', '\x3', '\x2', '\x2', '\x2', 
		'\x1008', '\x1009', '\x3', '\x2', '\x2', '\x2', '\x1009', '\x101F', '\x3', 
		'\x2', '\x2', '\x2', '\x100A', '\x1008', '\x3', '\x2', '\x2', '\x2', '\x100B', 
		'\x1010', '\x5', '\x1A8', '\xD5', '\x2', '\x100C', '\x100D', '\a', '\x2F4', 
		'\x2', '\x2', '\x100D', '\x100F', '\x5', '\x1A8', '\xD5', '\x2', '\x100E', 
		'\x100C', '\x3', '\x2', '\x2', '\x2', '\x100F', '\x1012', '\x3', '\x2', 
		'\x2', '\x2', '\x1010', '\x100E', '\x3', '\x2', '\x2', '\x2', '\x1010', 
		'\x1011', '\x3', '\x2', '\x2', '\x2', '\x1011', '\x101F', '\x3', '\x2', 
		'\x2', '\x2', '\x1012', '\x1010', '\x3', '\x2', '\x2', '\x2', '\x1013', 
		'\x1018', '\x5', '\x1AA', '\xD6', '\x2', '\x1014', '\x1015', '\a', '\x2F4', 
		'\x2', '\x2', '\x1015', '\x1017', '\x5', '\x1AA', '\xD6', '\x2', '\x1016', 
		'\x1014', '\x3', '\x2', '\x2', '\x2', '\x1017', '\x101A', '\x3', '\x2', 
		'\x2', '\x2', '\x1018', '\x1016', '\x3', '\x2', '\x2', '\x2', '\x1018', 
		'\x1019', '\x3', '\x2', '\x2', '\x2', '\x1019', '\x101B', '\x3', '\x2', 
		'\x2', '\x2', '\x101A', '\x1018', '\x3', '\x2', '\x2', '\x2', '\x101B', 
		'\x101C', '\a', '\x2EF', '\x2', '\x2', '\x101C', '\x101F', '\x3', '\x2', 
		'\x2', '\x2', '\x101D', '\x101F', '\x5', '\x1AC', '\xD7', '\x2', '\x101E', 
		'\x1002', '\x3', '\x2', '\x2', '\x2', '\x101E', '\x100B', '\x3', '\x2', 
		'\x2', '\x2', '\x101E', '\x1013', '\x3', '\x2', '\x2', '\x2', '\x101E', 
		'\x101D', '\x3', '\x2', '\x2', '\x2', '\x101E', '\x101F', '\x3', '\x2', 
		'\x2', '\x2', '\x101F', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1020', 
		'\x1022', '\a', '\x243', '\x2', '\x2', '\x1021', '\x1023', '\x5', '\x418', 
		'\x20D', '\x2', '\x1022', '\x1021', '\x3', '\x2', '\x2', '\x2', '\x1022', 
		'\x1023', '\x3', '\x2', '\x2', '\x2', '\x1023', '\x1024', '\x3', '\x2', 
		'\x2', '\x2', '\x1024', '\x1026', '\x5', '\x1B0', '\xD9', '\x2', '\x1025', 
		'\x1027', '\x5', '\x116', '\x8C', '\x2', '\x1026', '\x1025', '\x3', '\x2', 
		'\x2', '\x2', '\x1026', '\x1027', '\x3', '\x2', '\x2', '\x2', '\x1027', 
		'\x1029', '\x3', '\x2', '\x2', '\x2', '\x1028', '\x102A', '\x5', '\x118', 
		'\x8D', '\x2', '\x1029', '\x1028', '\x3', '\x2', '\x2', '\x2', '\x1029', 
		'\x102A', '\x3', '\x2', '\x2', '\x2', '\x102A', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', '\x102B', '\x102D', '\a', '\x243', '\x2', '\x2', '\x102C', 
		'\x102E', '\x5', '\x418', '\x20D', '\x2', '\x102D', '\x102C', '\x3', '\x2', 
		'\x2', '\x2', '\x102D', '\x102E', '\x3', '\x2', '\x2', '\x2', '\x102E', 
		'\x102F', '\x3', '\x2', '\x2', '\x2', '\x102F', '\x1031', '\x5', '\x1B2', 
		'\xDA', '\x2', '\x1030', '\x1032', '\x5', '\x116', '\x8C', '\x2', '\x1031', 
		'\x1030', '\x3', '\x2', '\x2', '\x2', '\x1031', '\x1032', '\x3', '\x2', 
		'\x2', '\x2', '\x1032', '\x1034', '\x3', '\x2', '\x2', '\x2', '\x1033', 
		'\x1035', '\x5', '\x118', '\x8D', '\x2', '\x1034', '\x1033', '\x3', '\x2', 
		'\x2', '\x2', '\x1034', '\x1035', '\x3', '\x2', '\x2', '\x2', '\x1035', 
		'\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1036', '\x1038', '\a', '\x243', 
		'\x2', '\x2', '\x1037', '\x1039', '\x5', '\x418', '\x20D', '\x2', '\x1038', 
		'\x1037', '\x3', '\x2', '\x2', '\x2', '\x1038', '\x1039', '\x3', '\x2', 
		'\x2', '\x2', '\x1039', '\x103B', '\x3', '\x2', '\x2', '\x2', '\x103A', 
		'\x103C', '\x5', '\x116', '\x8C', '\x2', '\x103B', '\x103A', '\x3', '\x2', 
		'\x2', '\x2', '\x103B', '\x103C', '\x3', '\x2', '\x2', '\x2', '\x103C', 
		'\x103E', '\x3', '\x2', '\x2', '\x2', '\x103D', '\x103F', '\x5', '\x118', 
		'\x8D', '\x2', '\x103E', '\x103D', '\x3', '\x2', '\x2', '\x2', '\x103E', 
		'\x103F', '\x3', '\x2', '\x2', '\x2', '\x103F', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', '\x1040', '\x1041', '\a', '\x243', '\x2', '\x2', '\x1041', 
		'\x104F', '\x5', '\x49E', '\x250', '\x2', '\x1042', '\x1043', '\a', '\x23F', 
		'\x2', '\x2', '\x1043', '\x1044', '\a', '\x107', '\x2', '\x2', '\x1044', 
		'\x1045', '\a', '\x2EE', '\x2', '\x2', '\x1045', '\x104A', '\x5', '\x420', 
		'\x211', '\x2', '\x1046', '\x1047', '\a', '\x2F4', '\x2', '\x2', '\x1047', 
		'\x1049', '\x5', '\x420', '\x211', '\x2', '\x1048', '\x1046', '\x3', '\x2', 
		'\x2', '\x2', '\x1049', '\x104C', '\x3', '\x2', '\x2', '\x2', '\x104A', 
		'\x1048', '\x3', '\x2', '\x2', '\x2', '\x104A', '\x104B', '\x3', '\x2', 
		'\x2', '\x2', '\x104B', '\x104D', '\x3', '\x2', '\x2', '\x2', '\x104C', 
		'\x104A', '\x3', '\x2', '\x2', '\x2', '\x104D', '\x104E', '\a', '\x2EF', 
		'\x2', '\x2', '\x104E', '\x1050', '\x3', '\x2', '\x2', '\x2', '\x104F', 
		'\x1042', '\x3', '\x2', '\x2', '\x2', '\x104F', '\x1050', '\x3', '\x2', 
		'\x2', '\x2', '\x1050', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1051', 
		'\x1053', '\x5', '\x1E8', '\xF5', '\x2', '\x1052', '\x1051', '\x3', '\x2', 
		'\x2', '\x2', '\x1052', '\x1053', '\x3', '\x2', '\x2', '\x2', '\x1053', 
		'\x1055', '\x3', '\x2', '\x2', '\x2', '\x1054', '\x1056', '\x5', '\x116', 
		'\x8C', '\x2', '\x1055', '\x1054', '\x3', '\x2', '\x2', '\x2', '\x1055', 
		'\x1056', '\x3', '\x2', '\x2', '\x2', '\x1056', '\x1058', '\x3', '\x2', 
		'\x2', '\x2', '\x1057', '\x1059', '\x5', '\xFC', '\x7F', '\x2', '\x1058', 
		'\x1057', '\x3', '\x2', '\x2', '\x2', '\x1058', '\x1059', '\x3', '\x2', 
		'\x2', '\x2', '\x1059', '\x105C', '\x3', '\x2', '\x2', '\x2', '\x105A', 
		'\x105D', '\x5', '\x12A', '\x96', '\x2', '\x105B', '\x105D', '\x5', '\x12E', 
		'\x98', '\x2', '\x105C', '\x105A', '\x3', '\x2', '\x2', '\x2', '\x105C', 
		'\x105B', '\x3', '\x2', '\x2', '\x2', '\x105C', '\x105D', '\x3', '\x2', 
		'\x2', '\x2', '\x105D', '\x105F', '\x3', '\x2', '\x2', '\x2', '\x105E', 
		'\x1060', '\x5', '\x11E', '\x90', '\x2', '\x105F', '\x105E', '\x3', '\x2', 
		'\x2', '\x2', '\x105F', '\x1060', '\x3', '\x2', '\x2', '\x2', '\x1060', 
		'\x1062', '\x3', '\x2', '\x2', '\x2', '\x1061', '\x1063', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x1062', '\x1061', '\x3', '\x2', '\x2', '\x2', '\x1062', 
		'\x1063', '\x3', '\x2', '\x2', '\x2', '\x1063', '\x1068', '\x3', '\x2', 
		'\x2', '\x2', '\x1064', '\x1066', '\a', '\x1A6', '\x2', '\x2', '\x1065', 
		'\x1067', '\x5', '\xFC', '\x7F', '\x2', '\x1066', '\x1065', '\x3', '\x2', 
		'\x2', '\x2', '\x1066', '\x1067', '\x3', '\x2', '\x2', '\x2', '\x1067', 
		'\x1069', '\x3', '\x2', '\x2', '\x2', '\x1068', '\x1064', '\x3', '\x2', 
		'\x2', '\x2', '\x1068', '\x1069', '\x3', '\x2', '\x2', '\x2', '\x1069', 
		'\x106F', '\x3', '\x2', '\x2', '\x2', '\x106A', '\x106E', '\x5', '\x1CC', 
		'\xE7', '\x2', '\x106B', '\x106E', '\x5', '\x1C8', '\xE5', '\x2', '\x106C', 
		'\x106E', '\x5', '\x1C4', '\xE3', '\x2', '\x106D', '\x106A', '\x3', '\x2', 
		'\x2', '\x2', '\x106D', '\x106B', '\x3', '\x2', '\x2', '\x2', '\x106D', 
		'\x106C', '\x3', '\x2', '\x2', '\x2', '\x106E', '\x1071', '\x3', '\x2', 
		'\x2', '\x2', '\x106F', '\x106D', '\x3', '\x2', '\x2', '\x2', '\x106F', 
		'\x1070', '\x3', '\x2', '\x2', '\x2', '\x1070', '\x1AF', '\x3', '\x2', 
		'\x2', '\x2', '\x1071', '\x106F', '\x3', '\x2', '\x2', '\x2', '\x1072', 
		'\x1073', '\a', '\x28C', '\x2', '\x2', '\x1073', '\x1074', '\a', '\x128', 
		'\x2', '\x2', '\x1074', '\x1075', '\a', '\x258', '\x2', '\x2', '\x1075', 
		'\x107F', '\a', '\x2EE', '\x2', '\x2', '\x1076', '\x107B', '\x5', '\x462', 
		'\x232', '\x2', '\x1077', '\x1078', '\a', '\x2F4', '\x2', '\x2', '\x1078', 
		'\x107A', '\x5', '\x462', '\x232', '\x2', '\x1079', '\x1077', '\x3', '\x2', 
		'\x2', '\x2', '\x107A', '\x107D', '\x3', '\x2', '\x2', '\x2', '\x107B', 
		'\x1079', '\x3', '\x2', '\x2', '\x2', '\x107B', '\x107C', '\x3', '\x2', 
		'\x2', '\x2', '\x107C', '\x1080', '\x3', '\x2', '\x2', '\x2', '\x107D', 
		'\x107B', '\x3', '\x2', '\x2', '\x2', '\x107E', '\x1080', '\a', '\x14E', 
		'\x2', '\x2', '\x107F', '\x1076', '\x3', '\x2', '\x2', '\x2', '\x107F', 
		'\x107E', '\x3', '\x2', '\x2', '\x2', '\x1080', '\x1081', '\x3', '\x2', 
		'\x2', '\x2', '\x1081', '\x1082', '\a', '\x2EF', '\x2', '\x2', '\x1082', 
		'\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1083', '\x1084', '\a', '\x28C', 
		'\x2', '\x2', '\x1084', '\x108E', '\a', '\x2EE', '\x2', '\x2', '\x1085', 
		'\x108A', '\x5', '\x462', '\x232', '\x2', '\x1086', '\x1087', '\a', '\x2F4', 
		'\x2', '\x2', '\x1087', '\x1089', '\x5', '\x462', '\x232', '\x2', '\x1088', 
		'\x1086', '\x3', '\x2', '\x2', '\x2', '\x1089', '\x108C', '\x3', '\x2', 
		'\x2', '\x2', '\x108A', '\x1088', '\x3', '\x2', '\x2', '\x2', '\x108A', 
		'\x108B', '\x3', '\x2', '\x2', '\x2', '\x108B', '\x108F', '\x3', '\x2', 
		'\x2', '\x2', '\x108C', '\x108A', '\x3', '\x2', '\x2', '\x2', '\x108D', 
		'\x108F', '\a', '\x18A', '\x2', '\x2', '\x108E', '\x1085', '\x3', '\x2', 
		'\x2', '\x2', '\x108E', '\x108D', '\x3', '\x2', '\x2', '\x2', '\x108F', 
		'\x1093', '\x3', '\x2', '\x2', '\x2', '\x1090', '\x1091', '\a', '\x8E', 
		'\x2', '\x2', '\x1091', '\x1093', '\a', '\x2EF', '\x2', '\x2', '\x1092', 
		'\x1083', '\x3', '\x2', '\x2', '\x2', '\x1092', '\x1090', '\x3', '\x2', 
		'\x2', '\x2', '\x1093', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1094', 
		'\x1095', '\a', '\x243', '\x2', '\x2', '\x1095', '\x1096', '\a', '?', 
		'\x2', '\x2', '\x1096', '\x1097', '\a', '\x1DB', '\x2', '\x2', '\x1097', 
		'\x1098', '\x5', '\x444', '\x223', '\x2', '\x1098', '\x1099', '\x5', '\x1BA', 
		'\xDE', '\x2', '\x1099', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x109A', 
		'\x109B', '\a', '\x243', '\x2', '\x2', '\x109B', '\x109C', '\a', '?', 
		'\x2', '\x2', '\x109C', '\x109D', '\a', '\x133', '\x2', '\x2', '\x109D', 
		'\x109E', '\x5', '\x444', '\x223', '\x2', '\x109E', '\x109F', '\x5', '\x1BA', 
		'\xDE', '\x2', '\x109F', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x10A0', 
		'\x10A1', '\a', '\x243', '\x2', '\x2', '\x10A1', '\x10A2', '\a', '?', 
		'\x2', '\x2', '\x10A2', '\x10A3', '\a', '\xEC', '\x2', '\x2', '\x10A3', 
		'\x10A4', '\x5', '\x444', '\x223', '\x2', '\x10A4', '\x10A5', '\a', '\x242', 
		'\x2', '\x2', '\x10A5', '\x10A6', '\x5', '\x49E', '\x250', '\x2', '\x10A6', 
		'\x10A7', '\a', '\x23F', '\x2', '\x2', '\x10A7', '\x10A8', '\a', '\x107', 
		'\x2', '\x2', '\x10A8', '\x10A9', '\a', '\x2EE', '\x2', '\x2', '\x10A9', 
		'\x10AE', '\x5', '\x420', '\x211', '\x2', '\x10AA', '\x10AB', '\a', '\x2F4', 
		'\x2', '\x2', '\x10AB', '\x10AD', '\x5', '\x420', '\x211', '\x2', '\x10AC', 
		'\x10AA', '\x3', '\x2', '\x2', '\x2', '\x10AD', '\x10B0', '\x3', '\x2', 
		'\x2', '\x2', '\x10AE', '\x10AC', '\x3', '\x2', '\x2', '\x2', '\x10AE', 
		'\x10AF', '\x3', '\x2', '\x2', '\x2', '\x10AF', '\x10B1', '\x3', '\x2', 
		'\x2', '\x2', '\x10B0', '\x10AE', '\x3', '\x2', '\x2', '\x2', '\x10B1', 
		'\x10B2', '\a', '\x2EF', '\x2', '\x2', '\x10B2', '\x10B3', '\x3', '\x2', 
		'\x2', '\x2', '\x10B3', '\x10B4', '\x5', '\x1BA', '\xDE', '\x2', '\x10B4', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x10B5', '\x10B6', '\a', '\x243', 
		'\x2', '\x2', '\x10B6', '\x10D3', '\a', '\x256', '\x2', '\x2', '\x10B7', 
		'\x10B8', '\a', '\x2EE', '\x2', '\x2', '\x10B8', '\x10BD', '\x5', '\x1A6', 
		'\xD4', '\x2', '\x10B9', '\x10BA', '\a', '\x2F4', '\x2', '\x2', '\x10BA', 
		'\x10BC', '\x5', '\x1A6', '\xD4', '\x2', '\x10BB', '\x10B9', '\x3', '\x2', 
		'\x2', '\x2', '\x10BC', '\x10BF', '\x3', '\x2', '\x2', '\x2', '\x10BD', 
		'\x10BB', '\x3', '\x2', '\x2', '\x2', '\x10BD', '\x10BE', '\x3', '\x2', 
		'\x2', '\x2', '\x10BE', '\x10D4', '\x3', '\x2', '\x2', '\x2', '\x10BF', 
		'\x10BD', '\x3', '\x2', '\x2', '\x2', '\x10C0', '\x10C5', '\x5', '\x1A8', 
		'\xD5', '\x2', '\x10C1', '\x10C2', '\a', '\x2F4', '\x2', '\x2', '\x10C2', 
		'\x10C4', '\x5', '\x1A8', '\xD5', '\x2', '\x10C3', '\x10C1', '\x3', '\x2', 
		'\x2', '\x2', '\x10C4', '\x10C7', '\x3', '\x2', '\x2', '\x2', '\x10C5', 
		'\x10C3', '\x3', '\x2', '\x2', '\x2', '\x10C5', '\x10C6', '\x3', '\x2', 
		'\x2', '\x2', '\x10C6', '\x10D4', '\x3', '\x2', '\x2', '\x2', '\x10C7', 
		'\x10C5', '\x3', '\x2', '\x2', '\x2', '\x10C8', '\x10CD', '\x5', '\x1AA', 
		'\xD6', '\x2', '\x10C9', '\x10CA', '\a', '\x2F4', '\x2', '\x2', '\x10CA', 
		'\x10CC', '\x5', '\x1AA', '\xD6', '\x2', '\x10CB', '\x10C9', '\x3', '\x2', 
		'\x2', '\x2', '\x10CC', '\x10CF', '\x3', '\x2', '\x2', '\x2', '\x10CD', 
		'\x10CB', '\x3', '\x2', '\x2', '\x2', '\x10CD', '\x10CE', '\x3', '\x2', 
		'\x2', '\x2', '\x10CE', '\x10D0', '\x3', '\x2', '\x2', '\x2', '\x10CF', 
		'\x10CD', '\x3', '\x2', '\x2', '\x2', '\x10D0', '\x10D1', '\a', '\x2EF', 
		'\x2', '\x2', '\x10D1', '\x10D4', '\x3', '\x2', '\x2', '\x2', '\x10D2', 
		'\x10D4', '\x5', '\x138', '\x9D', '\x2', '\x10D3', '\x10B7', '\x3', '\x2', 
		'\x2', '\x2', '\x10D3', '\x10C0', '\x3', '\x2', '\x2', '\x2', '\x10D3', 
		'\x10C8', '\x3', '\x2', '\x2', '\x2', '\x10D3', '\x10D2', '\x3', '\x2', 
		'\x2', '\x2', '\x10D4', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x10D5', 
		'\x10D6', '\a', '\x1AF', '\x2', '\x2', '\x10D6', '\x10D7', '\a', '?', 
		'\x2', '\x2', '\x10D7', '\x10D8', '\a', '\x1E3', '\x2', '\x2', '\x10D8', 
		'\x10D9', '\a', '\x2EE', '\x2', '\x2', '\x10D9', '\x10DA', '\x5', '\xE8', 
		'u', '\x2', '\x10DA', '\x10E3', '\a', '\x2EF', '\x2', '\x2', '\x10DB', 
		'\x10DC', '\a', '\x2EE', '\x2', '\x2', '\x10DC', '\x10DF', '\x5', '\x1BE', 
		'\xE0', '\x2', '\x10DD', '\x10DE', '\a', '\x2F4', '\x2', '\x2', '\x10DE', 
		'\x10E0', '\x5', '\x1BE', '\xE0', '\x2', '\x10DF', '\x10DD', '\x3', '\x2', 
		'\x2', '\x2', '\x10DF', '\x10E0', '\x3', '\x2', '\x2', '\x2', '\x10E0', 
		'\x10E1', '\x3', '\x2', '\x2', '\x2', '\x10E1', '\x10E2', '\a', '\x2EF', 
		'\x2', '\x2', '\x10E2', '\x10E4', '\x3', '\x2', '\x2', '\x2', '\x10E3', 
		'\x10DB', '\x3', '\x2', '\x2', '\x2', '\x10E3', '\x10E4', '\x3', '\x2', 
		'\x2', '\x2', '\x10E4', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x10E5', 
		'\x10E6', '\a', '\x1AF', '\x2', '\x2', '\x10E6', '\x10E7', '\a', '?', 
		'\x2', '\x2', '\x10E7', '\x10F1', '\a', '\x251', '\x2', '\x2', '\x10E8', 
		'\x10E9', '\a', '\x1B0', '\x2', '\x2', '\x10E9', '\x10F2', '\x5', '\x49E', 
		'\x250', '\x2', '\x10EA', '\x10ED', '\x5', '\x1BE', '\xE0', '\x2', '\x10EB', 
		'\x10EC', '\a', '\x2F4', '\x2', '\x2', '\x10EC', '\x10EE', '\x5', '\x1BE', 
		'\xE0', '\x2', '\x10ED', '\x10EB', '\x3', '\x2', '\x2', '\x2', '\x10EE', 
		'\x10EF', '\x3', '\x2', '\x2', '\x2', '\x10EF', '\x10ED', '\x3', '\x2', 
		'\x2', '\x2', '\x10EF', '\x10F0', '\x3', '\x2', '\x2', '\x2', '\x10F0', 
		'\x10F2', '\x3', '\x2', '\x2', '\x2', '\x10F1', '\x10E8', '\x3', '\x2', 
		'\x2', '\x2', '\x10F1', '\x10EA', '\x3', '\x2', '\x2', '\x2', '\x10F1', 
		'\x10F2', '\x3', '\x2', '\x2', '\x2', '\x10F2', '\x1BF', '\x3', '\x2', 
		'\x2', '\x2', '\x10F3', '\x10F4', '\a', 'X', '\x2', '\x2', '\x10F4', '\x10F5', 
		'\x5', '\x48A', '\x246', '\x2', '\x10F5', '\x10F6', '\x5', '\x1C2', '\xE2', 
		'\x2', '\x10F6', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x10F7', '\x10F9', 
		'\a', '\xAC', '\x2', '\x2', '\x10F8', '\x10F7', '\x3', '\x2', '\x2', '\x2', 
		'\x10F8', '\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10F9', '\x10FA', '\x3', 
		'\x2', '\x2', '\x2', '\x10FA', '\x10FB', '\a', '\x11A', '\x2', '\x2', 
		'\x10FB', '\x10FD', '\a', '\x192', '\x2', '\x2', '\x10FC', '\x10FE', '\a', 
		'\x276', '\x2', '\x2', '\x10FD', '\x10FC', '\x3', '\x2', '\x2', '\x2', 
		'\x10FD', '\x10FE', '\x3', '\x2', '\x2', '\x2', '\x10FE', '\x10FF', '\x3', 
		'\x2', '\x2', '\x2', '\x10FF', '\x1100', '\a', '\x2EE', '\x2', '\x2', 
		'\x1100', '\x1101', '\a', '\x197', '\x2', '\x2', '\x1101', '\x1102', '\x5', 
		'\x490', '\x249', '\x2', '\x1102', '\x1103', '\a', '\x2EF', '\x2', '\x2', 
		'\x1103', '\x110C', '\x3', '\x2', '\x2', '\x2', '\x1104', '\x1106', '\a', 
		'\x187', '\x2', '\x2', '\x1105', '\x1104', '\x3', '\x2', '\x2', '\x2', 
		'\x1105', '\x1106', '\x3', '\x2', '\x2', '\x2', '\x1106', '\x1107', '\x3', 
		'\x2', '\x2', '\x2', '\x1107', '\x1108', '\a', '\x244', '\x2', '\x2', 
		'\x1108', '\x1109', '\a', '\x1C', '\x2', '\x2', '\x1109', '\x110A', '\a', 
		'\xE', '\x2', '\x2', '\x110A', '\x110C', '\a', '\x12A', '\x2', '\x2', 
		'\x110B', '\x10F8', '\x3', '\x2', '\x2', '\x2', '\x110B', '\x1105', '\x3', 
		'\x2', '\x2', '\x2', '\x110C', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x110D', 
		'\x110E', '\a', '\x16C', '\x2', '\x2', '\x110E', '\x1112', '\a', '\x254', 
		'\x2', '\x2', '\x110F', '\x1113', '\x5', '\x43A', '\x21E', '\x2', '\x1110', 
		'\x1111', '\a', 'X', '\x2', '\x2', '\x1111', '\x1113', '\a', '\x28D', 
		'\x2', '\x2', '\x1112', '\x110F', '\x3', '\x2', '\x2', '\x2', '\x1112', 
		'\x1110', '\x3', '\x2', '\x2', '\x2', '\x1113', '\x1115', '\x3', '\x2', 
		'\x2', '\x2', '\x1114', '\x1116', '\x5', '\x1C2', '\xE2', '\x2', '\x1115', 
		'\x1114', '\x3', '\x2', '\x2', '\x2', '\x1115', '\x1116', '\x3', '\x2', 
		'\x2', '\x2', '\x1116', '\x1119', '\x3', '\x2', '\x2', '\x2', '\x1117', 
		'\x1118', '\a', '\x137', '\x2', '\x2', '\x1118', '\x111A', '\a', '\xE4', 
		'\x2', '\x2', '\x1119', '\x1117', '\x3', '\x2', '\x2', '\x2', '\x1119', 
		'\x111A', '\x3', '\x2', '\x2', '\x2', '\x111A', '\x111B', '\x3', '\x2', 
		'\x2', '\x2', '\x111B', '\x111C', '\a', '\x23F', '\x2', '\x2', '\x111C', 
		'\x111D', '\a', '\x19', '\x2', '\x2', '\x111D', '\x112B', '\x5', '\x43E', 
		'\x220', '\x2', '\x111E', '\x1125', '\a', '\x2EE', '\x2', '\x2', '\x111F', 
		'\x1120', '\a', '\x2EE', '\x2', '\x2', '\x1120', '\x1121', '\x5', '\x1C6', 
		'\xE4', '\x2', '\x1121', '\x1122', '\a', '\x2EF', '\x2', '\x2', '\x1122', 
		'\x1126', '\x3', '\x2', '\x2', '\x2', '\x1123', '\x1126', '\x5', '\x1DA', 
		'\xEE', '\x2', '\x1124', '\x1126', '\x5', '\x192', '\xCA', '\x2', '\x1125', 
		'\x111F', '\x3', '\x2', '\x2', '\x2', '\x1125', '\x1123', '\x3', '\x2', 
		'\x2', '\x2', '\x1125', '\x1124', '\x3', '\x2', '\x2', '\x2', '\x1126', 
		'\x1127', '\x3', '\x2', '\x2', '\x2', '\x1127', '\x1125', '\x3', '\x2', 
		'\x2', '\x2', '\x1127', '\x1128', '\x3', '\x2', '\x2', '\x2', '\x1128', 
		'\x1129', '\x3', '\x2', '\x2', '\x2', '\x1129', '\x112A', '\a', '\x2EF', 
		'\x2', '\x2', '\x112A', '\x112C', '\x3', '\x2', '\x2', '\x2', '\x112B', 
		'\x111E', '\x3', '\x2', '\x2', '\x2', '\x112B', '\x112C', '\x3', '\x2', 
		'\x2', '\x2', '\x112C', '\x112D', '\x3', '\x2', '\x2', '\x2', '\x112D', 
		'\x112E', '\a', '\x1F9', '\x2', '\x2', '\x112E', '\x112F', '\a', '\x19', 
		'\x2', '\x2', '\x112F', '\x1130', '\t', ':', '\x2', '\x2', '\x1130', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1131', '\x1134', '\x5', '\x48A', '\x246', 
		'\x2', '\x1132', '\x1134', '\x5', '\x474', '\x23B', '\x2', '\x1133', '\x1131', 
		'\x3', '\x2', '\x2', '\x2', '\x1133', '\x1132', '\x3', '\x2', '\x2', '\x2', 
		'\x1134', '\x1137', '\x3', '\x2', '\x2', '\x2', '\x1135', '\x1136', '\a', 
		'\x8E', '\x2', '\x2', '\x1136', '\x1138', '\x5', '\x37A', '\x1BE', '\x2', 
		'\x1137', '\x1135', '\x3', '\x2', '\x2', '\x2', '\x1137', '\x1138', '\x3', 
		'\x2', '\x2', '\x2', '\x1138', '\x113F', '\x3', '\x2', '\x2', '\x2', '\x1139', 
		'\x113B', '\x5', '\xEA', 'v', '\x2', '\x113A', '\x1139', '\x3', '\x2', 
		'\x2', '\x2', '\x113B', '\x113C', '\x3', '\x2', '\x2', '\x2', '\x113C', 
		'\x113A', '\x3', '\x2', '\x2', '\x2', '\x113C', '\x113D', '\x3', '\x2', 
		'\x2', '\x2', '\x113D', '\x1140', '\x3', '\x2', '\x2', '\x2', '\x113E', 
		'\x1140', '\x5', '\x212', '\x10A', '\x2', '\x113F', '\x113A', '\x3', '\x2', 
		'\x2', '\x2', '\x113F', '\x113E', '\x3', '\x2', '\x2', '\x2', '\x113F', 
		'\x1140', '\x3', '\x2', '\x2', '\x2', '\x1140', '\x1147', '\x3', '\x2', 
		'\x2', '\x2', '\x1141', '\x1145', '\x5', '\xEC', 'w', '\x2', '\x1142', 
		'\x1145', '\x5', '\x214', '\x10B', '\x2', '\x1143', '\x1145', '\x5', '\x200', 
		'\x101', '\x2', '\x1144', '\x1141', '\x3', '\x2', '\x2', '\x2', '\x1144', 
		'\x1142', '\x3', '\x2', '\x2', '\x2', '\x1144', '\x1143', '\x3', '\x2', 
		'\x2', '\x2', '\x1145', '\x1147', '\x3', '\x2', '\x2', '\x2', '\x1146', 
		'\x1133', '\x3', '\x2', '\x2', '\x2', '\x1146', '\x1144', '\x3', '\x2', 
		'\x2', '\x2', '\x1147', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1148', 
		'\x1149', '\a', '\x292', '\x2', '\x2', '\x1149', '\x114F', '\x5', '\x13A', 
		'\x9E', '\x2', '\x114A', '\x114C', '\x5', '\x1C2', '\xE2', '\x2', '\x114B', 
		'\x114A', '\x3', '\x2', '\x2', '\x2', '\x114B', '\x114C', '\x3', '\x2', 
		'\x2', '\x2', '\x114C', '\x114D', '\x3', '\x2', '\x2', '\x2', '\x114D', 
		'\x1150', '\x5', '\x1CA', '\xE6', '\x2', '\x114E', '\x1150', '\x5', '\x1C2', 
		'\xE2', '\x2', '\x114F', '\x114B', '\x3', '\x2', '\x2', '\x2', '\x114F', 
		'\x114E', '\x3', '\x2', '\x2', '\x2', '\x1150', '\x1C9', '\x3', '\x2', 
		'\x2', '\x2', '\x1151', '\x1152', '\a', '\x23F', '\x2', '\x2', '\x1152', 
		'\x1154', '\a', '\x19', '\x2', '\x2', '\x1153', '\x1155', '\t', '$', '\x2', 
		'\x2', '\x1154', '\x1153', '\x3', '\x2', '\x2', '\x2', '\x1154', '\x1155', 
		'\x3', '\x2', '\x2', '\x2', '\x1155', '\x1156', '\x3', '\x2', '\x2', '\x2', 
		'\x1156', '\x115F', '\a', '\x135', '\x2', '\x2', '\x1157', '\x1159', '\x5', 
		'\x428', '\x215', '\x2', '\x1158', '\x1157', '\x3', '\x2', '\x2', '\x2', 
		'\x1158', '\x1159', '\x3', '\x2', '\x2', '\x2', '\x1159', '\x115A', '\x3', 
		'\x2', '\x2', '\x2', '\x115A', '\x115B', '\a', '\x2EE', '\x2', '\x2', 
		'\x115B', '\x115C', '\x5', '\x1CE', '\xE8', '\x2', '\x115C', '\x115D', 
		'\a', '\x2EF', '\x2', '\x2', '\x115D', '\x1160', '\x3', '\x2', '\x2', 
		'\x2', '\x115E', '\x1160', '\x5', '\x1CE', '\xE8', '\x2', '\x115F', '\x1158', 
		'\x3', '\x2', '\x2', '\x2', '\x115F', '\x115E', '\x3', '\x2', '\x2', '\x2', 
		'\x1160', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1161', '\x1189', '\a', 
		'\x135', '\x2', '\x2', '\x1162', '\x1163', '\a', '\x2EE', '\x2', '\x2', 
		'\x1163', '\x1168', '\x5', '\x41A', '\x20E', '\x2', '\x1164', '\x1165', 
		'\a', '\x2F4', '\x2', '\x2', '\x1165', '\x1167', '\x5', '\x41A', '\x20E', 
		'\x2', '\x1166', '\x1164', '\x3', '\x2', '\x2', '\x2', '\x1167', '\x116A', 
		'\x3', '\x2', '\x2', '\x2', '\x1168', '\x1166', '\x3', '\x2', '\x2', '\x2', 
		'\x1168', '\x1169', '\x3', '\x2', '\x2', '\x2', '\x1169', '\x116B', '\x3', 
		'\x2', '\x2', '\x2', '\x116A', '\x1168', '\x3', '\x2', '\x2', '\x2', '\x116B', 
		'\x116C', '\a', '\x2EF', '\x2', '\x2', '\x116C', '\x116D', '\a', '\x23F', 
		'\x2', '\x2', '\x116D', '\x1173', '\a', '\x19', '\x2', '\x2', '\x116E', 
		'\x1174', '\t', '$', '\x2', '\x2', '\x116F', '\x1170', '\a', '\x2EE', 
		'\x2', '\x2', '\x1170', '\x1171', '\x5', '\x1CE', '\xE8', '\x2', '\x1171', 
		'\x1172', '\a', '\x2EF', '\x2', '\x2', '\x1172', '\x1174', '\x3', '\x2', 
		'\x2', '\x2', '\x1173', '\x116E', '\x3', '\x2', '\x2', '\x2', '\x1173', 
		'\x116F', '\x3', '\x2', '\x2', '\x2', '\x1174', '\x118A', '\x3', '\x2', 
		'\x2', '\x2', '\x1175', '\x1176', '\a', '\x2EE', '\x2', '\x2', '\x1176', 
		'\x117B', '\x5', '\x41A', '\x20E', '\x2', '\x1177', '\x1178', '\a', '\x2F4', 
		'\x2', '\x2', '\x1178', '\x117A', '\x5', '\x41A', '\x20E', '\x2', '\x1179', 
		'\x1177', '\x3', '\x2', '\x2', '\x2', '\x117A', '\x117D', '\x3', '\x2', 
		'\x2', '\x2', '\x117B', '\x1179', '\x3', '\x2', '\x2', '\x2', '\x117B', 
		'\x117C', '\x3', '\x2', '\x2', '\x2', '\x117C', '\x117E', '\x3', '\x2', 
		'\x2', '\x2', '\x117D', '\x117B', '\x3', '\x2', '\x2', '\x2', '\x117E', 
		'\x117F', '\a', '\x2EF', '\x2', '\x2', '\x117F', '\x1180', '\a', '\x23F', 
		'\x2', '\x2', '\x1180', '\x1187', '\a', '\x19', '\x2', '\x2', '\x1181', 
		'\x1188', '\t', '$', '\x2', '\x2', '\x1182', '\x1188', '\x5', '\x428', 
		'\x215', '\x2', '\x1183', '\x1184', '\a', '\x2EE', '\x2', '\x2', '\x1184', 
		'\x1185', '\x5', '\x1CE', '\xE8', '\x2', '\x1185', '\x1186', '\a', '\x2EF', 
		'\x2', '\x2', '\x1186', '\x1188', '\x3', '\x2', '\x2', '\x2', '\x1187', 
		'\x1181', '\x3', '\x2', '\x2', '\x2', '\x1187', '\x1182', '\x3', '\x2', 
		'\x2', '\x2', '\x1187', '\x1183', '\x3', '\x2', '\x2', '\x2', '\x1188', 
		'\x118A', '\x3', '\x2', '\x2', '\x2', '\x1189', '\x1162', '\x3', '\x2', 
		'\x2', '\x2', '\x1189', '\x1175', '\x3', '\x2', '\x2', '\x2', '\x118A', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x118B', '\x1195', '\x5', '\x1EA', 
		'\xF6', '\x2', '\x118C', '\x118E', '\x5', '\x1D2', '\xEA', '\x2', '\x118D', 
		'\x118C', '\x3', '\x2', '\x2', '\x2', '\x118E', '\x118F', '\x3', '\x2', 
		'\x2', '\x2', '\x118F', '\x118D', '\x3', '\x2', '\x2', '\x2', '\x118F', 
		'\x1190', '\x3', '\x2', '\x2', '\x2', '\x1190', '\x1192', '\x3', '\x2', 
		'\x2', '\x2', '\x1191', '\x1193', '\x5', '\x1F8', '\xFD', '\x2', '\x1192', 
		'\x1191', '\x3', '\x2', '\x2', '\x2', '\x1192', '\x1193', '\x3', '\x2', 
		'\x2', '\x2', '\x1193', '\x1195', '\x3', '\x2', '\x2', '\x2', '\x1194', 
		'\x118B', '\x3', '\x2', '\x2', '\x2', '\x1194', '\x118D', '\x3', '\x2', 
		'\x2', '\x2', '\x1195', '\x1198', '\x3', '\x2', '\x2', '\x2', '\x1196', 
		'\x1198', '\x5', '\x1F8', '\xFD', '\x2', '\x1197', '\x1194', '\x3', '\x2', 
		'\x2', '\x2', '\x1197', '\x1196', '\x3', '\x2', '\x2', '\x2', '\x1198', 
		'\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1199', '\x119A', '\a', '\x2EE', 
		'\x2', '\x2', '\x119A', '\x119B', '\x5', '\x1D2', '\xEA', '\x2', '\x119B', 
		'\x119C', '\a', '\x2EF', '\x2', '\x2', '\x119C', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '\x119D', '\x119E', '\t', '\a', '\x2', '\x2', '\x119E', 
		'\x119F', '\a', '\x23E', '\x2', '\x2', '\x119F', '\x11A0', '\a', '\x107', 
		'\x2', '\x2', '\x11A0', '\x11B7', '\a', '\x205', '\x2', '\x2', '\x11A1', 
		'\x11A2', '\a', 'O', '\x2', '\x2', '\x11A2', '\x11B7', '\x5', '\x49E', 
		'\x250', '\x2', '\x11A3', '\x11A4', '\a', '\x1B8', '\x2', '\x2', '\x11A4', 
		'\x11B7', '\x5', '\x49E', '\x250', '\x2', '\x11A5', '\x11A6', '\a', '\xDF', 
		'\x2', '\x2', '\x11A6', '\x11B7', '\x5', '\x49E', '\x250', '\x2', '\x11A7', 
		'\x11B7', '\x5', '\x1D4', '\xEB', '\x2', '\x11A8', '\x11B7', '\x5', '\x1D6', 
		'\xEC', '\x2', '\x11A9', '\x11B7', '\x5', '\x1D8', '\xED', '\x2', '\x11AA', 
		'\x11AB', '\a', '\xB2', '\x2', '\x2', '\x11AB', '\x11AE', '\x5', '\x210', 
		'\x109', '\x2', '\x11AC', '\x11AE', '\a', '\x8C', '\x2', '\x2', '\x11AD', 
		'\x11AA', '\x3', '\x2', '\x2', '\x2', '\x11AD', '\x11AC', '\x3', '\x2', 
		'\x2', '\x2', '\x11AE', '\x11B7', '\x3', '\x2', '\x2', '\x2', '\x11AF', 
		'\x11B4', '\a', '\x41', '\x2', '\x2', '\x11B0', '\x11B4', '\a', '\x170', 
		'\x2', '\x2', '\x11B1', '\x11B2', '\a', '\x41', '\x2', '\x2', '\x11B2', 
		'\x11B4', '\a', '\x1DE', '\x2', '\x2', '\x11B3', '\x11AF', '\x3', '\x2', 
		'\x2', '\x2', '\x11B3', '\x11B0', '\x3', '\x2', '\x2', '\x2', '\x11B3', 
		'\x11B1', '\x3', '\x2', '\x2', '\x2', '\x11B4', '\x11B5', '\x3', '\x2', 
		'\x2', '\x2', '\x11B5', '\x11B7', '\x5', '\x150', '\xA9', '\x2', '\x11B6', 
		'\x119D', '\x3', '\x2', '\x2', '\x2', '\x11B6', '\x11A1', '\x3', '\x2', 
		'\x2', '\x2', '\x11B6', '\x11A3', '\x3', '\x2', '\x2', '\x2', '\x11B6', 
		'\x11A5', '\x3', '\x2', '\x2', '\x2', '\x11B6', '\x11A7', '\x3', '\x2', 
		'\x2', '\x2', '\x11B6', '\x11A8', '\x3', '\x2', '\x2', '\x2', '\x11B6', 
		'\x11A9', '\x3', '\x2', '\x2', '\x2', '\x11B6', '\x11AD', '\x3', '\x2', 
		'\x2', '\x2', '\x11B6', '\x11B3', '\x3', '\x2', '\x2', '\x2', '\x11B7', 
		'\x1D3', '\x3', '\x2', '\x2', '\x2', '\x11B8', '\x11BE', '\a', '\x1F7', 
		'\x2', '\x2', '\x11B9', '\x11BF', '\a', '\x2CF', '\x2', '\x2', '\x11BA', 
		'\x11BB', '\a', '\x2D1', '\x2', '\x2', '\x11BB', '\x11BF', '\x5', '\x49E', 
		'\x250', '\x2', '\x11BC', '\x11BF', '\a', '#', '\x2', '\x2', '\x11BD', 
		'\x11BF', '\a', '\x17D', '\x2', '\x2', '\x11BE', '\x11B9', '\x3', '\x2', 
		'\x2', '\x2', '\x11BE', '\x11BA', '\x3', '\x2', '\x2', '\x2', '\x11BE', 
		'\x11BC', '\x3', '\x2', '\x2', '\x2', '\x11BE', '\x11BD', '\x3', '\x2', 
		'\x2', '\x2', '\x11BE', '\x11BF', '\x3', '\x2', '\x2', '\x2', '\x11BF', 
		'\x1D5', '\x3', '\x2', '\x2', '\x2', '\x11C0', '\x11C1', '\t', ';', '\x2', 
		'\x2', '\x11C1', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x11C2', '\x11C4', 
		'\a', '`', '\x2', '\x2', '\x11C3', '\x11C5', '\t', '<', '\x2', '\x2', 
		'\x11C4', '\x11C3', '\x3', '\x2', '\x2', '\x2', '\x11C4', '\x11C5', '\x3', 
		'\x2', '\x2', '\x2', '\x11C5', '\x11C8', '\x3', '\x2', '\x2', '\x2', '\x11C6', 
		'\x11C8', '\a', '\x171', '\x2', '\x2', '\x11C7', '\x11C2', '\x3', '\x2', 
		'\x2', '\x2', '\x11C7', '\x11C6', '\x3', '\x2', '\x2', '\x2', '\x11C8', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x11C9', '\x11CB', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x11CA', '\x11C9', '\x3', '\x2', '\x2', '\x2', '\x11CA', 
		'\x11CB', '\x3', '\x2', '\x2', '\x2', '\x11CB', '\x11CC', '\x3', '\x2', 
		'\x2', '\x2', '\x11CC', '\x11CE', '\x5', '\xFC', '\x7F', '\x2', '\x11CD', 
		'\x11CF', '\x5', '\x12A', '\x96', '\x2', '\x11CE', '\x11CD', '\x3', '\x2', 
		'\x2', '\x2', '\x11CE', '\x11CF', '\x3', '\x2', '\x2', '\x2', '\x11CF', 
		'\x11D1', '\x3', '\x2', '\x2', '\x2', '\x11D0', '\x11D2', '\x5', '\x11A', 
		'\x8E', '\x2', '\x11D1', '\x11D0', '\x3', '\x2', '\x2', '\x2', '\x11D1', 
		'\x11D2', '\x3', '\x2', '\x2', '\x2', '\x11D2', '\x11D3', '\x3', '\x2', 
		'\x2', '\x2', '\x11D3', '\x11D4', '\x5', '\x1EE', '\xF8', '\x2', '\x11D4', 
		'\x11F0', '\x3', '\x2', '\x2', '\x2', '\x11D5', '\x11D7', '\x5', '\x1E8', 
		'\xF5', '\x2', '\x11D6', '\x11D5', '\x3', '\x2', '\x2', '\x2', '\x11D6', 
		'\x11D7', '\x3', '\x2', '\x2', '\x2', '\x11D7', '\x11D8', '\x3', '\x2', 
		'\x2', '\x2', '\x11D8', '\x11ED', '\a', '\x1A0', '\x2', '\x2', '\x11D9', 
		'\x11DB', '\a', '\xEE', '\x2', '\x2', '\x11DA', '\x11DC', '\x5', '\xFC', 
		'\x7F', '\x2', '\x11DB', '\x11DA', '\x3', '\x2', '\x2', '\x2', '\x11DB', 
		'\x11DC', '\x3', '\x2', '\x2', '\x2', '\x11DC', '\x11DE', '\x3', '\x2', 
		'\x2', '\x2', '\x11DD', '\x11DF', '\x5', '\x12A', '\x96', '\x2', '\x11DE', 
		'\x11DD', '\x3', '\x2', '\x2', '\x2', '\x11DE', '\x11DF', '\x3', '\x2', 
		'\x2', '\x2', '\x11DF', '\x11E1', '\x3', '\x2', '\x2', '\x2', '\x11E0', 
		'\x11E2', '\x5', '\x11A', '\x8E', '\x2', '\x11E1', '\x11E0', '\x3', '\x2', 
		'\x2', '\x2', '\x11E1', '\x11E2', '\x3', '\x2', '\x2', '\x2', '\x11E2', 
		'\x11E4', '\x3', '\x2', '\x2', '\x2', '\x11E3', '\x11E5', '\x5', '\x1EE', 
		'\xF8', '\x2', '\x11E4', '\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11E4', 
		'\x11E5', '\x3', '\x2', '\x2', '\x2', '\x11E5', '\x11EE', '\x3', '\x2', 
		'\x2', '\x2', '\x11E6', '\x11E8', '\a', '\x100', '\x2', '\x2', '\x11E7', 
		'\x11E9', '\x5', '\xFC', '\x7F', '\x2', '\x11E8', '\x11E7', '\x3', '\x2', 
		'\x2', '\x2', '\x11E8', '\x11E9', '\x3', '\x2', '\x2', '\x2', '\x11E9', 
		'\x11EA', '\x3', '\x2', '\x2', '\x2', '\x11EA', '\x11EE', '\x5', '\x1E2', 
		'\xF2', '\x2', '\x11EB', '\x11EC', '\a', '\xC9', '\x2', '\x2', '\x11EC', 
		'\x11EE', '\x5', '\x1DC', '\xEF', '\x2', '\x11ED', '\x11D9', '\x3', '\x2', 
		'\x2', '\x2', '\x11ED', '\x11E6', '\x3', '\x2', '\x2', '\x2', '\x11ED', 
		'\x11EB', '\x3', '\x2', '\x2', '\x2', '\x11EE', '\x11F0', '\x3', '\x2', 
		'\x2', '\x2', '\x11EF', '\x11CA', '\x3', '\x2', '\x2', '\x2', '\x11EF', 
		'\x11D6', '\x3', '\x2', '\x2', '\x2', '\x11F0', '\x1DB', '\x3', '\x2', 
		'\x2', '\x2', '\x11F1', '\x11F3', '\a', '\x2EE', '\x2', '\x2', '\x11F2', 
		'\x11F4', '\a', '\x276', '\x2', '\x2', '\x11F3', '\x11F2', '\x3', '\x2', 
		'\x2', '\x2', '\x11F3', '\x11F4', '\x3', '\x2', '\x2', '\x2', '\x11F4', 
		'\x11F5', '\x3', '\x2', '\x2', '\x2', '\x11F5', '\x11F6', '\x5', '\x1DE', 
		'\xF0', '\x2', '\x11F6', '\x11FD', '\a', '\x2EF', '\x2', '\x2', '\x11F7', 
		'\x11F8', '\a', '\x1E8', '\x2', '\x2', '\x11F8', '\x11FB', '\a', '\x130', 
		'\x2', '\x2', '\x11F9', '\x11FC', '\x5', '\x49E', '\x250', '\x2', '\x11FA', 
		'\x11FC', '\a', '\x27D', '\x2', '\x2', '\x11FB', '\x11F9', '\x3', '\x2', 
		'\x2', '\x2', '\x11FB', '\x11FA', '\x3', '\x2', '\x2', '\x2', '\x11FC', 
		'\x11FE', '\x3', '\x2', '\x2', '\x2', '\x11FD', '\x11F7', '\x3', '\x2', 
		'\x2', '\x2', '\x11FD', '\x11FE', '\x3', '\x2', '\x2', '\x2', '\x11FE', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x11FF', '\x1200', '\a', '\x8E', 
		'\x2', '\x2', '\x1200', '\x1201', '\a', '\x9A', '\x2', '\x2', '\x1201', 
		'\x1202', '\x5', '\x42C', '\x217', '\x2', '\x1202', '\x1203', '\a', '\x3', 
		'\x2', '\x2', '\x1203', '\x1209', '\a', '\x1AC', '\x2', '\x2', '\x1204', 
		'\x1205', '\a', '\x2EE', '\x2', '\x2', '\x1205', '\x120A', '\a', '\x2EF', 
		'\x2', '\x2', '\x1206', '\x1207', '\a', '\x28A', '\x2', '\x2', '\x1207', 
		'\x1208', '\a', 'R', '\x2', '\x2', '\x1208', '\x120A', '\x5', '\x16C', 
		'\xB7', '\x2', '\x1209', '\x1204', '\x3', '\x2', '\x2', '\x2', '\x1209', 
		'\x1206', '\x3', '\x2', '\x2', '\x2', '\x120A', '\x120B', '\x3', '\x2', 
		'\x2', '\x2', '\x120B', '\x120C', '\a', '\x138', '\x2', '\x2', '\x120C', 
		'\x120D', '\a', '\x2EE', '\x2', '\x2', '\x120D', '\x1210', '\x5', '\x1E0', 
		'\xF1', '\x2', '\x120E', '\x120F', '\a', '\x2F4', '\x2', '\x2', '\x120F', 
		'\x1211', '\x5', '\x1E0', '\xF1', '\x2', '\x1210', '\x120E', '\x3', '\x2', 
		'\x2', '\x2', '\x1211', '\x1212', '\x3', '\x2', '\x2', '\x2', '\x1212', 
		'\x1210', '\x3', '\x2', '\x2', '\x2', '\x1212', '\x1213', '\x3', '\x2', 
		'\x2', '\x2', '\x1213', '\x1214', '\x3', '\x2', '\x2', '\x2', '\x1214', 
		'\x1215', '\a', '\x2EF', '\x2', '\x2', '\x1215', '\x1DF', '\x3', '\x2', 
		'\x2', '\x2', '\x1216', '\x1218', '\x5', '\x42C', '\x217', '\x2', '\x1217', 
		'\x1216', '\x3', '\x2', '\x2', '\x2', '\x1217', '\x1218', '\x3', '\x2', 
		'\x2', '\x2', '\x1218', '\x1219', '\x3', '\x2', '\x2', '\x2', '\x1219', 
		'\x121B', '\a', '\x2FF', '\x2', '\x2', '\x121A', '\x1217', '\x3', '\x2', 
		'\x2', '\x2', '\x121A', '\x121B', '\x3', '\x2', '\x2', '\x2', '\x121B', 
		'\x121C', '\x3', '\x2', '\x2', '\x2', '\x121C', '\x121D', '\a', '\x2EA', 
		'\x2', '\x2', '\x121D', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x121E', 
		'\x1223', '\x5', '\x1E4', '\xF3', '\x2', '\x121F', '\x1220', '\a', '\x1B6', 
		'\x2', '\x2', '\x1220', '\x1223', '\x5', '\x49E', '\x250', '\x2', '\x1221', 
		'\x1223', '\x5', '\x12E', '\x98', '\x2', '\x1222', '\x121E', '\x3', '\x2', 
		'\x2', '\x2', '\x1222', '\x121F', '\x3', '\x2', '\x2', '\x2', '\x1222', 
		'\x1221', '\x3', '\x2', '\x2', '\x2', '\x1222', '\x1223', '\x3', '\x2', 
		'\x2', '\x2', '\x1223', '\x1224', '\x3', '\x2', '\x2', '\x2', '\x1224', 
		'\x1225', '\x5', '\x1E6', '\xF4', '\x2', '\x1225', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', '\x1226', '\x1227', '\a', '\x14A', '\x2', '\x2', '\x1227', 
		'\x122A', '\a', '\x254', '\x2', '\x2', '\x1228', '\x122A', '\a', '\x179', 
		'\x2', '\x2', '\x1229', '\x1226', '\x3', '\x2', '\x2', '\x2', '\x1229', 
		'\x1228', '\x3', '\x2', '\x2', '\x2', '\x122A', '\x1E5', '\x3', '\x2', 
		'\x2', '\x2', '\x122B', '\x122C', '\a', '\xFC', '\x2', '\x2', '\x122C', 
		'\x122E', '\x5', '\x48A', '\x246', '\x2', '\x122D', '\x122B', '\x3', '\x2', 
		'\x2', '\x2', '\x122D', '\x122E', '\x3', '\x2', '\x2', '\x2', '\x122E', 
		'\x122F', '\x3', '\x2', '\x2', '\x2', '\x122F', '\x1231', '\a', '\x1A6', 
		'\x2', '\x2', '\x1230', '\x1232', '\x5', '\xFC', '\x7F', '\x2', '\x1231', 
		'\x1230', '\x3', '\x2', '\x2', '\x2', '\x1231', '\x1232', '\x3', '\x2', 
		'\x2', '\x2', '\x1232', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1233', 
		'\x1234', '\a', '\x215', '\x2', '\x2', '\x1234', '\x1235', '\a', 's', 
		'\x2', '\x2', '\x1235', '\x1236', '\t', '\x1F', '\x2', '\x2', '\x1236', 
		'\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1237', '\x1238', '\a', '\x252', 
		'\x2', '\x2', '\x1238', '\x1239', '\x5', '\x420', '\x211', '\x2', '\x1239', 
		'\x1EB', '\x3', '\x2', '\x2', '\x2', '\x123A', '\x123B', '\a', '\x23F', 
		'\x2', '\x2', '\x123B', '\x123C', '\a', '\x107', '\x2', '\x2', '\x123C', 
		'\x123D', '\a', '\x2EE', '\x2', '\x2', '\x123D', '\x1242', '\x5', '\x420', 
		'\x211', '\x2', '\x123E', '\x123F', '\a', '\x2F4', '\x2', '\x2', '\x123F', 
		'\x1241', '\x5', '\x420', '\x211', '\x2', '\x1240', '\x123E', '\x3', '\x2', 
		'\x2', '\x2', '\x1241', '\x1244', '\x3', '\x2', '\x2', '\x2', '\x1242', 
		'\x1240', '\x3', '\x2', '\x2', '\x2', '\x1242', '\x1243', '\x3', '\x2', 
		'\x2', '\x2', '\x1243', '\x1245', '\x3', '\x2', '\x2', '\x2', '\x1244', 
		'\x1242', '\x3', '\x2', '\x2', '\x2', '\x1245', '\x1246', '\a', '\x2EF', 
		'\x2', '\x2', '\x1246', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1247', 
		'\x1248', '\a', '\xF9', '\x2', '\x2', '\x1248', '\x1249', '\a', '\x5', 
		'\x2', '\x2', '\x1249', '\x124A', '\a', '\x1C5', '\x2', '\x2', '\x124A', 
		'\x1257', '\x5', '\x1F0', '\xF9', '\x2', '\x124B', '\x124C', '\t', '=', 
		'\x2', '\x2', '\x124C', '\x124D', '\a', '\x1C5', '\x2', '\x2', '\x124D', 
		'\x1257', '\x5', '\x42A', '\x216', '\x2', '\x124E', '\x124F', '\a', '\x94', 
		'\x2', '\x2', '\x124F', '\x1255', '\a', '\xE', '\x2', '\x2', '\x1250', 
		'\x1251', '\a', '\xB0', '\x2', '\x2', '\x1251', '\x1255', '\a', '\xE', 
		'\x2', '\x2', '\x1252', '\x1253', '\a', '\x9B', '\x2', '\x2', '\x1253', 
		'\x1255', '\a', '\xE', '\x2', '\x2', '\x1254', '\x124E', '\x3', '\x2', 
		'\x2', '\x2', '\x1254', '\x1250', '\x3', '\x2', '\x2', '\x2', '\x1254', 
		'\x1252', '\x3', '\x2', '\x2', '\x2', '\x1255', '\x1257', '\x3', '\x2', 
		'\x2', '\x2', '\x1256', '\x1247', '\x3', '\x2', '\x2', '\x2', '\x1256', 
		'\x124B', '\x3', '\x2', '\x2', '\x2', '\x1256', '\x1254', '\x3', '\x2', 
		'\x2', '\x2', '\x1257', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1258', 
		'\x125B', '\x5', '\x1F2', '\xFA', '\x2', '\x1259', '\x125B', '\x5', '\x1F4', 
		'\xFB', '\x2', '\x125A', '\x1258', '\x3', '\x2', '\x2', '\x2', '\x125A', 
		'\x1259', '\x3', '\x2', '\x2', '\x2', '\x125B', '\x1F1', '\x3', '\x2', 
		'\x2', '\x2', '\x125C', '\x125D', '\x5', '\x12A', '\x96', '\x2', '\x125D', 
		'\x126A', '\t', '>', '\x2', '\x2', '\x125E', '\x125F', '\a', '\n', '\x2', 
		'\x2', '\x125F', '\x1260', '\x5', '\x1F6', '\xFC', '\x2', '\x1260', '\x1266', 
		'\a', '\x192', '\x2', '\x2', '\x1261', '\x1262', '\a', '\x17E', '\x2', 
		'\x2', '\x1262', '\x1267', '\a', '\x3', '\x2', '\x2', '\x1263', '\x1264', 
		'\a', '\x17E', '\x2', '\x2', '\x1264', '\x1267', '\a', '\x15E', '\x2', 
		'\x2', '\x1265', '\x1267', '\a', 's', '\x2', '\x2', '\x1266', '\x1261', 
		'\x3', '\x2', '\x2', '\x2', '\x1266', '\x1263', '\x3', '\x2', '\x2', '\x2', 
		'\x1266', '\x1265', '\x3', '\x2', '\x2', '\x2', '\x1267', '\x126B', '\x3', 
		'\x2', '\x2', '\x2', '\x1268', '\x1269', '\a', '\x198', '\x2', '\x2', 
		'\x1269', '\x126B', '\x5', '\x434', '\x21B', '\x2', '\x126A', '\x125E', 
		'\x3', '\x2', '\x2', '\x2', '\x126A', '\x1268', '\x3', '\x2', '\x2', '\x2', 
		'\x126B', '\x1278', '\x3', '\x2', '\x2', '\x2', '\x126C', '\x126D', '\a', 
		'\x205', '\x2', '\x2', '\x126D', '\x126E', '\a', '\x23F', '\x2', '\x2', 
		'\x126E', '\x126F', '\a', '`', '\x2', '\x2', '\x126F', '\x1270', '\a', 
		'\b', '\x2', '\x2', '\x1270', '\x1271', '\a', '\x205', '\x2', '\x2', '\x1271', 
		'\x1272', '\a', '\n', '\x2', '\x2', '\x1272', '\x1273', '\x5', '\x1F6', 
		'\xFC', '\x2', '\x1273', '\x1274', '\a', '\x192', '\x2', '\x2', '\x1274', 
		'\x1275', '\a', '\x17E', '\x2', '\x2', '\x1275', '\x1276', '\a', '\x15E', 
		'\x2', '\x2', '\x1276', '\x1278', '\x3', '\x2', '\x2', '\x2', '\x1277', 
		'\x125C', '\x3', '\x2', '\x2', '\x2', '\x1277', '\x126C', '\x3', '\x2', 
		'\x2', '\x2', '\x1278', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1279', 
		'\x127A', '\a', '\x25C', '\x2', '\x2', '\x127A', '\x127B', '\a', '\x26A', 
		'\x2', '\x2', '\x127B', '\x127D', '\x5', '\x420', '\x211', '\x2', '\x127C', 
		'\x127E', '\t', '>', '\x2', '\x2', '\x127D', '\x127C', '\x3', '\x2', '\x2', 
		'\x2', '\x127D', '\x127E', '\x3', '\x2', '\x2', '\x2', '\x127E', '\x127F', 
		'\x3', '\x2', '\x2', '\x2', '\x127F', '\x1280', '\a', '\x198', '\x2', 
		'\x2', '\x1280', '\x1281', '\x5', '\x434', '\x21B', '\x2', '\x1281', '\x1299', 
		'\x3', '\x2', '\x2', '\x2', '\x1282', '\x1283', '\a', '\x25C', '\x2', 
		'\x2', '\x1283', '\x1284', '\a', '\x26A', '\x2', '\x2', '\x1284', '\x1285', 
		'\x5', '\x420', '\x211', '\x2', '\x1285', '\x1286', '\a', '\x1DD', '\x2', 
		'\x2', '\x1286', '\x1288', '\a', '\x197', '\x2', '\x2', '\x1287', '\x1289', 
		'\t', '>', '\x2', '\x2', '\x1288', '\x1287', '\x3', '\x2', '\x2', '\x2', 
		'\x1288', '\x1289', '\x3', '\x2', '\x2', '\x2', '\x1289', '\x1296', '\x3', 
		'\x2', '\x2', '\x2', '\x128A', '\x128B', '\a', '\n', '\x2', '\x2', '\x128B', 
		'\x128C', '\x5', '\x1F6', '\xFC', '\x2', '\x128C', '\x1292', '\a', '\x192', 
		'\x2', '\x2', '\x128D', '\x128E', '\a', '\x17E', '\x2', '\x2', '\x128E', 
		'\x1293', '\a', '\x3', '\x2', '\x2', '\x128F', '\x1290', '\a', '\x17E', 
		'\x2', '\x2', '\x1290', '\x1293', '\a', '\x15E', '\x2', '\x2', '\x1291', 
		'\x1293', '\a', 's', '\x2', '\x2', '\x1292', '\x128D', '\x3', '\x2', '\x2', 
		'\x2', '\x1292', '\x128F', '\x3', '\x2', '\x2', '\x2', '\x1292', '\x1291', 
		'\x3', '\x2', '\x2', '\x2', '\x1293', '\x1297', '\x3', '\x2', '\x2', '\x2', 
		'\x1294', '\x1295', '\a', '\x198', '\x2', '\x2', '\x1295', '\x1297', '\x5', 
		'\x434', '\x21B', '\x2', '\x1296', '\x128A', '\x3', '\x2', '\x2', '\x2', 
		'\x1296', '\x1294', '\x3', '\x2', '\x2', '\x2', '\x1297', '\x1299', '\x3', 
		'\x2', '\x2', '\x2', '\x1298', '\x1279', '\x3', '\x2', '\x2', '\x2', '\x1298', 
		'\x1282', '\x3', '\x2', '\x2', '\x2', '\x1299', '\x1F5', '\x3', '\x2', 
		'\x2', '\x2', '\x129A', '\x129B', '\x5', '\x49E', '\x250', '\x2', '\x129B', 
		'\x129C', '\t', '?', '\x2', '\x2', '\x129C', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x129D', '\x129E', '\a', '\x23E', '\x2', '\x2', '\x129E', '\x12B6', 
		'\a', '\x2EE', '\x2', '\x2', '\x129F', '\x12A0', '\a', '\x108', '\x2', 
		'\x2', '\x12A0', '\x12B7', '\x5', '\x216', '\x10C', '\x2', '\x12A1', '\x12A2', 
		'\a', '\x16E', '\x2', '\x2', '\x12A2', '\x12B7', '\x5', '\x216', '\x10C', 
		'\x2', '\x12A3', '\x12A4', '\a', '\x155', '\x2', '\x2', '\x12A4', '\x12B7', 
		'\t', '@', '\x2', '\x2', '\x12A5', '\x12A6', '\a', '\x1B5', '\x2', '\x2', 
		'\x12A6', '\x12B7', '\a', '\x2E8', '\x2', '\x2', '\x12A7', '\x12A8', '\a', 
		'\xDE', '\x2', '\x2', '\x12A8', '\x12B7', '\a', '\x2E8', '\x2', '\x2', 
		'\x12A9', '\x12AA', '\a', '\xDD', '\x2', '\x2', '\x12AA', '\x12AB', '\a', 
		'\xEA', '\x2', '\x2', '\x12AB', '\x12B7', '\a', '\x2E8', '\x2', '\x2', 
		'\x12AC', '\x12AF', '\a', '\x19B', '\x2', '\x2', '\x12AD', '\x12B0', '\x5', 
		'\x216', '\x10C', '\x2', '\x12AE', '\x12B0', '\a', '\x18A', '\x2', '\x2', 
		'\x12AF', '\x12AD', '\x3', '\x2', '\x2', '\x2', '\x12AF', '\x12AE', '\x3', 
		'\x2', '\x2', '\x2', '\x12B0', '\x12B7', '\x3', '\x2', '\x2', '\x2', '\x12B1', 
		'\x12B2', '\a', '<', '\x2', '\x2', '\x12B2', '\x12B7', '\t', '\x41', '\x2', 
		'\x2', '\x12B3', '\x12B4', '\a', '\xD4', '\x2', '\x2', '\x12B4', '\x12B7', 
		'\t', '\x42', '\x2', '\x2', '\x12B5', '\x12B7', '\a', '\xB2', '\x2', '\x2', 
		'\x12B6', '\x129F', '\x3', '\x2', '\x2', '\x2', '\x12B6', '\x12A1', '\x3', 
		'\x2', '\x2', '\x2', '\x12B6', '\x12A3', '\x3', '\x2', '\x2', '\x2', '\x12B6', 
		'\x12A5', '\x3', '\x2', '\x2', '\x2', '\x12B6', '\x12A7', '\x3', '\x2', 
		'\x2', '\x2', '\x12B6', '\x12A9', '\x3', '\x2', '\x2', '\x2', '\x12B6', 
		'\x12AC', '\x3', '\x2', '\x2', '\x2', '\x12B6', '\x12B1', '\x3', '\x2', 
		'\x2', '\x2', '\x12B6', '\x12B3', '\x3', '\x2', '\x2', '\x2', '\x12B6', 
		'\x12B5', '\x3', '\x2', '\x2', '\x2', '\x12B7', '\x12B8', '\x3', '\x2', 
		'\x2', '\x2', '\x12B8', '\x12B6', '\x3', '\x2', '\x2', '\x2', '\x12B8', 
		'\x12B9', '\x3', '\x2', '\x2', '\x2', '\x12B9', '\x12BA', '\x3', '\x2', 
		'\x2', '\x2', '\x12BA', '\x12BB', '\a', '\x2EF', '\x2', '\x2', '\x12BB', 
		'\x1F9', '\x3', '\x2', '\x2', '\x2', '\x12BC', '\x12BE', '\x5', '\x48A', 
		'\x246', '\x2', '\x12BD', '\x12BF', '\x5', '\x450', '\x229', '\x2', '\x12BE', 
		'\x12BD', '\x3', '\x2', '\x2', '\x2', '\x12BE', '\x12BF', '\x3', '\x2', 
		'\x2', '\x2', '\x12BF', '\x12C1', '\x3', '\x2', '\x2', '\x2', '\x12C0', 
		'\x12C2', '\a', '\x230', '\x2', '\x2', '\x12C1', '\x12C0', '\x3', '\x2', 
		'\x2', '\x2', '\x12C1', '\x12C2', '\x3', '\x2', '\x2', '\x2', '\x12C2', 
		'\x12C4', '\x3', '\x2', '\x2', '\x2', '\x12C3', '\x12C5', '\t', '\x1D', 
		'\x2', '\x2', '\x12C4', '\x12C3', '\x3', '\x2', '\x2', '\x2', '\x12C4', 
		'\x12C5', '\x3', '\x2', '\x2', '\x2', '\x12C5', '\x12DE', '\x3', '\x2', 
		'\x2', '\x2', '\x12C6', '\x12C9', '\a', '\x8E', '\x2', '\x2', '\x12C7', 
		'\x12C8', '\a', '\x198', '\x2', '\x2', '\x12C8', '\x12CA', '\a', '\x18A', 
		'\x2', '\x2', '\x12C9', '\x12C7', '\x3', '\x2', '\x2', '\x2', '\x12C9', 
		'\x12CA', '\x3', '\x2', '\x2', '\x2', '\x12CA', '\x12CB', '\x3', '\x2', 
		'\x2', '\x2', '\x12CB', '\x12DF', '\x5', '\x37A', '\x1BE', '\x2', '\x12CC', 
		'\x12D4', '\a', '\xE3', '\x2', '\x2', '\x12CD', '\x12D5', '\a', '\x11', 
		'\x2', '\x2', '\x12CE', '\x12CF', '\a', '?', '\x2', '\x2', '\x12CF', '\x12D2', 
		'\a', '\x8E', '\x2', '\x2', '\x12D0', '\x12D1', '\a', '\x198', '\x2', 
		'\x2', '\x12D1', '\x12D3', '\a', '\x18A', '\x2', '\x2', '\x12D2', '\x12D0', 
		'\x3', '\x2', '\x2', '\x2', '\x12D2', '\x12D3', '\x3', '\x2', '\x2', '\x2', 
		'\x12D3', '\x12D5', '\x3', '\x2', '\x2', '\x2', '\x12D4', '\x12CD', '\x3', 
		'\x2', '\x2', '\x2', '\x12D4', '\x12CE', '\x3', '\x2', '\x2', '\x2', '\x12D4', 
		'\x12D5', '\x3', '\x2', '\x2', '\x2', '\x12D5', '\x12D6', '\x3', '\x2', 
		'\x2', '\x2', '\x12D6', '\x12D7', '\a', '\x19', '\x2', '\x2', '\x12D7', 
		'\x12DC', '\a', '\xF5', '\x2', '\x2', '\x12D8', '\x12D9', '\a', '\x2EE', 
		'\x2', '\x2', '\x12D9', '\x12DA', '\x5', '\x20E', '\x108', '\x2', '\x12DA', 
		'\x12DB', '\a', '\x2EF', '\x2', '\x2', '\x12DB', '\x12DD', '\x3', '\x2', 
		'\x2', '\x2', '\x12DC', '\x12D8', '\x3', '\x2', '\x2', '\x2', '\x12DC', 
		'\x12DD', '\x3', '\x2', '\x2', '\x2', '\x12DD', '\x12DF', '\x3', '\x2', 
		'\x2', '\x2', '\x12DE', '\x12C6', '\x3', '\x2', '\x2', '\x2', '\x12DE', 
		'\x12CC', '\x3', '\x2', '\x2', '\x2', '\x12DE', '\x12DF', '\x3', '\x2', 
		'\x2', '\x2', '\x12DF', '\x12E2', '\x3', '\x2', '\x2', '\x2', '\x12E0', 
		'\x12E1', '\a', '\xB2', '\x2', '\x2', '\x12E1', '\x12E3', '\x5', '\x210', 
		'\x109', '\x2', '\x12E2', '\x12E0', '\x3', '\x2', '\x2', '\x2', '\x12E2', 
		'\x12E3', '\x3', '\x2', '\x2', '\x2', '\x12E3', '\x12EA', '\x3', '\x2', 
		'\x2', '\x2', '\x12E4', '\x12E6', '\x5', '\xEA', 'v', '\x2', '\x12E5', 
		'\x12E4', '\x3', '\x2', '\x2', '\x2', '\x12E6', '\x12E7', '\x3', '\x2', 
		'\x2', '\x2', '\x12E7', '\x12E5', '\x3', '\x2', '\x2', '\x2', '\x12E7', 
		'\x12E8', '\x3', '\x2', '\x2', '\x2', '\x12E8', '\x12EB', '\x3', '\x2', 
		'\x2', '\x2', '\x12E9', '\x12EB', '\x5', '\x212', '\x10A', '\x2', '\x12EA', 
		'\x12E5', '\x3', '\x2', '\x2', '\x2', '\x12EA', '\x12E9', '\x3', '\x2', 
		'\x2', '\x2', '\x12EA', '\x12EB', '\x3', '\x2', '\x2', '\x2', '\x12EB', 
		'\x1FB', '\x3', '\x2', '\x2', '\x2', '\x12EC', '\x12EE', '\x5', '\x48A', 
		'\x246', '\x2', '\x12ED', '\x12EF', '\x5', '\x450', '\x229', '\x2', '\x12EE', 
		'\x12ED', '\x3', '\x2', '\x2', '\x2', '\x12EE', '\x12EF', '\x3', '\x2', 
		'\x2', '\x2', '\x12EF', '\x12F1', '\x3', '\x2', '\x2', '\x2', '\x12F0', 
		'\x12F2', '\a', '\x230', '\x2', '\x2', '\x12F1', '\x12F0', '\x3', '\x2', 
		'\x2', '\x2', '\x12F1', '\x12F2', '\x3', '\x2', '\x2', '\x2', '\x12F2', 
		'\x12F4', '\x3', '\x2', '\x2', '\x2', '\x12F3', '\x12F5', '\t', '\x1D', 
		'\x2', '\x2', '\x12F4', '\x12F3', '\x3', '\x2', '\x2', '\x2', '\x12F4', 
		'\x12F5', '\x3', '\x2', '\x2', '\x2', '\x12F5', '\x12F8', '\x3', '\x2', 
		'\x2', '\x2', '\x12F6', '\x12F7', '\a', '\xE3', '\x2', '\x2', '\x12F7', 
		'\x12F9', '\a', '\x11', '\x2', '\x2', '\x12F8', '\x12F6', '\x3', '\x2', 
		'\x2', '\x2', '\x12F8', '\x12F9', '\x3', '\x2', '\x2', '\x2', '\x12F9', 
		'\x12FA', '\x3', '\x2', '\x2', '\x2', '\x12FA', '\x12FB', '\a', '\x19', 
		'\x2', '\x2', '\x12FB', '\x12FC', '\a', '\x2EE', '\x2', '\x2', '\x12FC', 
		'\x12FE', '\a', '\x2EF', '\x2', '\x2', '\x12FD', '\x12FF', '\a', '\x297', 
		'\x2', '\x2', '\x12FE', '\x12FD', '\x3', '\x2', '\x2', '\x2', '\x12FE', 
		'\x12FF', '\x3', '\x2', '\x2', '\x2', '\x12FF', '\x1301', '\x3', '\x2', 
		'\x2', '\x2', '\x1300', '\x1302', '\x5', '\x208', '\x105', '\x2', '\x1301', 
		'\x1300', '\x3', '\x2', '\x2', '\x2', '\x1301', '\x1302', '\x3', '\x2', 
		'\x2', '\x2', '\x1302', '\x1304', '\x3', '\x2', '\x2', '\x2', '\x1303', 
		'\x1305', '\x5', '\x20C', '\x107', '\x2', '\x1304', '\x1303', '\x3', '\x2', 
		'\x2', '\x2', '\x1304', '\x1305', '\x3', '\x2', '\x2', '\x2', '\x1305', 
		'\x1309', '\x3', '\x2', '\x2', '\x2', '\x1306', '\x1308', '\x5', '\xEA', 
		'v', '\x2', '\x1307', '\x1306', '\x3', '\x2', '\x2', '\x2', '\x1308', 
		'\x130B', '\x3', '\x2', '\x2', '\x2', '\x1309', '\x1307', '\x3', '\x2', 
		'\x2', '\x2', '\x1309', '\x130A', '\x3', '\x2', '\x2', '\x2', '\x130A', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x130B', '\x1309', '\x3', '\x2', 
		'\x2', '\x2', '\x130C', '\x130D', '\a', '\x2E7', '\x2', '\x2', '\x130D', 
		'\x130E', '\a', '\xDC', '\x2', '\x2', '\x130E', '\x1313', '\x5', '\x48A', 
		'\x246', '\x2', '\x130F', '\x1310', '\x5', '\x48A', '\x246', '\x2', '\x1310', 
		'\x1311', '\a', '\x2F4', '\x2', '\x2', '\x1311', '\x1312', '\x5', '\x48A', 
		'\x246', '\x2', '\x1312', '\x1314', '\x3', '\x2', '\x2', '\x2', '\x1313', 
		'\x130F', '\x3', '\x2', '\x2', '\x2', '\x1313', '\x1314', '\x3', '\x2', 
		'\x2', '\x2', '\x1314', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1315', 
		'\x1316', '\a', '\x247', '\x2', '\x2', '\x1316', '\x1319', '\a', '\x13E', 
		'\x2', '\x2', '\x1317', '\x131A', '\x5', '\x202', '\x102', '\x2', '\x1318', 
		'\x131A', '\x5', '\x204', '\x103', '\x2', '\x1319', '\x1317', '\x3', '\x2', 
		'\x2', '\x2', '\x1319', '\x1318', '\x3', '\x2', '\x2', '\x2', '\x131A', 
		'\x201', '\x3', '\x2', '\x2', '\x2', '\x131B', '\x131C', '\a', '\xE8', 
		'\x2', '\x2', '\x131C', '\x131D', '\x5', '\x482', '\x242', '\x2', '\x131D', 
		'\x131E', '\a', '\x2EE', '\x2', '\x2', '\x131E', '\x1323', '\x5', '\x206', 
		'\x104', '\x2', '\x131F', '\x1320', '\a', '\x2F4', '\x2', '\x2', '\x1320', 
		'\x1322', '\x5', '\x206', '\x104', '\x2', '\x1321', '\x131F', '\x3', '\x2', 
		'\x2', '\x2', '\x1322', '\x1325', '\x3', '\x2', '\x2', '\x2', '\x1323', 
		'\x1321', '\x3', '\x2', '\x2', '\x2', '\x1323', '\x1324', '\x3', '\x2', 
		'\x2', '\x2', '\x1324', '\x1326', '\x3', '\x2', '\x2', '\x2', '\x1325', 
		'\x1323', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x1328', '\a', '\x2EF', 
		'\x2', '\x2', '\x1327', '\x1329', '\a', '\x11', '\x2', '\x2', '\x1328', 
		'\x1327', '\x3', '\x2', '\x2', '\x2', '\x1328', '\x1329', '\x3', '\x2', 
		'\x2', '\x2', '\x1329', '\x203', '\x3', '\x2', '\x2', '\x2', '\x132A', 
		'\x132B', '\a', '}', '\x2', '\x2', '\x132B', '\x1332', '\a', '\x2EE', 
		'\x2', '\x2', '\x132C', '\x1333', '\a', '\xE', '\x2', '\x2', '\x132D', 
		'\x132E', '\a', '\x1CD', '\x2', '\x2', '\x132E', '\x1333', '\a', '\x122', 
		'\x2', '\x2', '\x132F', '\x1333', '\a', '\x27C', '\x2', '\x2', '\x1330', 
		'\x1331', '\a', '\xDB', '\x2', '\x2', '\x1331', '\x1333', '\a', '\x122', 
		'\x2', '\x2', '\x1332', '\x132C', '\x3', '\x2', '\x2', '\x2', '\x1332', 
		'\x132D', '\x3', '\x2', '\x2', '\x2', '\x1332', '\x132F', '\x3', '\x2', 
		'\x2', '\x2', '\x1332', '\x1330', '\x3', '\x2', '\x2', '\x2', '\x1333', 
		'\x1334', '\x3', '\x2', '\x2', '\x2', '\x1334', '\x1332', '\x3', '\x2', 
		'\x2', '\x2', '\x1334', '\x1335', '\x3', '\x2', '\x2', '\x2', '\x1335', 
		'\x1336', '\x3', '\x2', '\x2', '\x2', '\x1336', '\x1337', '\a', '\x2EF', 
		'\x2', '\x2', '\x1337', '\x1338', '\a', 'Y', '\x2', '\x2', '\x1338', '\x205', 
		'\x3', '\x2', '\x2', '\x2', '\x1339', '\x133C', '\x5', '\x48A', '\x246', 
		'\x2', '\x133A', '\x133B', '\a', '\x17E', '\x2', '\x2', '\x133B', '\x133D', 
		'\a', '\x13E', '\x2', '\x2', '\x133C', '\x133A', '\x3', '\x2', '\x2', 
		'\x2', '\x133C', '\x133D', '\x3', '\x2', '\x2', '\x2', '\x133D', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x133E', '\x133F', '\a', '\xBB', '\x2', '\x2', 
		'\x133F', '\x1346', '\a', '\x28A', '\x2', '\x2', '\x1340', '\x1341', '\a', 
		'w', '\x2', '\x2', '\x1341', '\x1347', '\a', '\xA9', '\x2', '\x2', '\x1342', 
		'\x1343', '\a', '\xA9', '\x2', '\x2', '\x1343', '\x1347', '\x5', '\x20A', 
		'\x106', '\x2', '\x1344', '\x1345', '\a', '\x18A', '\x2', '\x2', '\x1345', 
		'\x1347', '\a', '\xA9', '\x2', '\x2', '\x1346', '\x1340', '\x3', '\x2', 
		'\x2', '\x2', '\x1346', '\x1342', '\x3', '\x2', '\x2', '\x2', '\x1346', 
		'\x1344', '\x3', '\x2', '\x2', '\x2', '\x1347', '\x209', '\x3', '\x2', 
		'\x2', '\x2', '\x1348', '\x1349', '\x5', '\x468', '\x235', '\x2', '\x1349', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x134A', '\x134B', '\a', '\x281', 
		'\x2', '\x2', '\x134B', '\x1350', '\a', ',', '\x2', '\x2', '\x134C', '\x134D', 
		'\a', 'w', '\x2', '\x2', '\x134D', '\x1351', '\a', '\xA9', '\x2', '\x2', 
		'\x134E', '\x134F', '\a', '\xA9', '\x2', '\x2', '\x134F', '\x1351', '\x5', 
		'\x20A', '\x106', '\x2', '\x1350', '\x134C', '\x3', '\x2', '\x2', '\x2', 
		'\x1350', '\x134E', '\x3', '\x2', '\x2', '\x2', '\x1351', '\x20D', '\x3', 
		'\x2', '\x2', '\x2', '\x1352', '\x1353', '\a', '\xFD', '\x2', '\x2', '\x1353', 
		'\x1357', '\a', '?', '\x2', '\x2', '\x1354', '\x1355', '\a', '\x238', 
		'\x2', '\x2', '\x1355', '\x1357', '\a', '\x2A2', '\x2', '\x2', '\x1356', 
		'\x1352', '\x3', '\x2', '\x2', '\x2', '\x1356', '\x1354', '\x3', '\x2', 
		'\x2', '\x2', '\x1357', '\x1358', '\x3', '\x2', '\x2', '\x2', '\x1358', 
		'\x136B', '\a', '\x2E8', '\x2', '\x2', '\x1359', '\x135A', '\a', '\x14E', 
		'\x2', '\x2', '\x135A', '\x135D', '\a', '\x2E8', '\x2', '\x2', '\x135B', 
		'\x135D', '\a', '\x17A', '\x2', '\x2', '\x135C', '\x1359', '\x3', '\x2', 
		'\x2', '\x2', '\x135C', '\x135B', '\x3', '\x2', '\x2', '\x2', '\x135D', 
		'\x136B', '\x3', '\x2', '\x2', '\x2', '\x135E', '\x135F', '\a', '\x15A', 
		'\x2', '\x2', '\x135F', '\x1362', '\a', '\x2E8', '\x2', '\x2', '\x1360', 
		'\x1362', '\a', '\x17B', '\x2', '\x2', '\x1361', '\x135E', '\x3', '\x2', 
		'\x2', '\x2', '\x1361', '\x1360', '\x3', '\x2', '\x2', '\x2', '\x1362', 
		'\x136B', '\x3', '\x2', '\x2', '\x2', '\x1363', '\x136B', '\t', '\x13', 
		'\x2', '\x2', '\x1364', '\x1365', '\a', '\x41', '\x2', '\x2', '\x1365', 
		'\x1368', '\a', '\x2E8', '\x2', '\x2', '\x1366', '\x1368', '\a', '\x170', 
		'\x2', '\x2', '\x1367', '\x1364', '\x3', '\x2', '\x2', '\x2', '\x1367', 
		'\x1366', '\x3', '\x2', '\x2', '\x2', '\x1368', '\x136B', '\x3', '\x2', 
		'\x2', '\x2', '\x1369', '\x136B', '\t', '\x14', '\x2', '\x2', '\x136A', 
		'\x1356', '\x3', '\x2', '\x2', '\x2', '\x136A', '\x135C', '\x3', '\x2', 
		'\x2', '\x2', '\x136A', '\x1361', '\x3', '\x2', '\x2', '\x2', '\x136A', 
		'\x1363', '\x3', '\x2', '\x2', '\x2', '\x136A', '\x1367', '\x3', '\x2', 
		'\x2', '\x2', '\x136A', '\x1369', '\x3', '\x2', '\x2', '\x2', '\x136B', 
		'\x20F', '\x3', '\x2', '\x2', '\x2', '\x136C', '\x136D', '\a', '\x28A', 
		'\x2', '\x2', '\x136D', '\x136F', '\a', '\x2EA', '\x2', '\x2', '\x136E', 
		'\x136C', '\x3', '\x2', '\x2', '\x2', '\x136E', '\x136F', '\x3', '\x2', 
		'\x2', '\x2', '\x136F', '\x1373', '\x3', '\x2', '\x2', '\x2', '\x1370', 
		'\x1371', '\a', '\xF3', '\x2', '\x2', '\x1371', '\x1372', '\a', '?', '\x2', 
		'\x2', '\x1372', '\x1374', '\a', '\x2EA', '\x2', '\x2', '\x1373', '\x1370', 
		'\x3', '\x2', '\x2', '\x2', '\x1373', '\x1374', '\x3', '\x2', '\x2', '\x2', 
		'\x1374', '\x1376', '\x3', '\x2', '\x2', '\x2', '\x1375', '\x1377', '\a', 
		'\x2EA', '\x2', '\x2', '\x1376', '\x1375', '\x3', '\x2', '\x2', '\x2', 
		'\x1376', '\x1377', '\x3', '\x2', '\x2', '\x2', '\x1377', '\x137C', '\x3', 
		'\x2', '\x2', '\x2', '\x1378', '\x137A', '\a', '\x17E', '\x2', '\x2', 
		'\x1379', '\x1378', '\x3', '\x2', '\x2', '\x2', '\x1379', '\x137A', '\x3', 
		'\x2', '\x2', '\x2', '\x137A', '\x137B', '\x3', '\x2', '\x2', '\x2', '\x137B', 
		'\x137D', '\a', '\x208', '\x2', '\x2', '\x137C', '\x1379', '\x3', '\x2', 
		'\x2', '\x2', '\x137C', '\x137D', '\x3', '\x2', '\x2', '\x2', '\x137D', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x137E', '\x137F', '\a', '\x210', 
		'\x2', '\x2', '\x137F', '\x1380', '\a', '\x11A', '\x2', '\x2', '\x1380', 
		'\x138C', '\x5', '\x43E', '\x220', '\x2', '\x1381', '\x1382', '\a', '\x2A2', 
		'\x2', '\x2', '\x1382', '\x138C', '\a', '\x204', '\x2', '\x2', '\x1383', 
		'\x1385', '\a', '\x65', '\x2', '\x2', '\x1384', '\x1386', '\x5', '\x406', 
		'\x204', '\x2', '\x1385', '\x1384', '\x3', '\x2', '\x2', '\x2', '\x1385', 
		'\x1386', '\x3', '\x2', '\x2', '\x2', '\x1386', '\x1387', '\x3', '\x2', 
		'\x2', '\x2', '\x1387', '\x1389', '\x5', '\x22E', '\x118', '\x2', '\x1388', 
		'\x138A', '\x5', '\xF0', 'y', '\x2', '\x1389', '\x1388', '\x3', '\x2', 
		'\x2', '\x2', '\x1389', '\x138A', '\x3', '\x2', '\x2', '\x2', '\x138A', 
		'\x138C', '\x3', '\x2', '\x2', '\x2', '\x138B', '\x137E', '\x3', '\x2', 
		'\x2', '\x2', '\x138B', '\x1381', '\x3', '\x2', '\x2', '\x2', '\x138B', 
		'\x1383', '\x3', '\x2', '\x2', '\x2', '\x138C', '\x213', '\x3', '\x2', 
		'\x2', '\x2', '\x138D', '\x138E', '\a', '\x210', '\x2', '\x2', '\x138E', 
		'\x138F', '\a', '\xDC', '\x2', '\x2', '\x138F', '\x1390', '\a', '\x2EE', 
		'\x2', '\x2', '\x1390', '\x1391', '\x5', '\x48A', '\x246', '\x2', '\x1391', 
		'\x1392', '\a', '\x2EF', '\x2', '\x2', '\x1392', '\x1393', '\a', '\x11A', 
		'\x2', '\x2', '\x1393', '\x1394', '\x5', '\x43E', '\x220', '\x2', '\x1394', 
		'\x13A8', '\x3', '\x2', '\x2', '\x2', '\x1395', '\x1396', '\a', '\x1E6', 
		'\x2', '\x2', '\x1396', '\x1397', '\a', '\x2EE', '\x2', '\x2', '\x1397', 
		'\x1398', '\x5', '\x48A', '\x246', '\x2', '\x1398', '\x1399', '\a', '\x2EF', 
		'\x2', '\x2', '\x1399', '\x139A', '\a', '\x2A2', '\x2', '\x2', '\x139A', 
		'\x139B', '\a', '\x204', '\x2', '\x2', '\x139B', '\x13A8', '\x3', '\x2', 
		'\x2', '\x2', '\x139C', '\x139E', '\a', '\x65', '\x2', '\x2', '\x139D', 
		'\x139F', '\x5', '\x406', '\x204', '\x2', '\x139E', '\x139D', '\x3', '\x2', 
		'\x2', '\x2', '\x139E', '\x139F', '\x3', '\x2', '\x2', '\x2', '\x139F', 
		'\x13A0', '\x3', '\x2', '\x2', '\x2', '\x13A0', '\x13A1', '\a', '\xDB', 
		'\x2', '\x2', '\x13A1', '\x13A2', '\a', '\x122', '\x2', '\x2', '\x13A2', 
		'\x13A3', '\x5', '\x444', '\x223', '\x2', '\x13A3', '\x13A5', '\x5', '\x22E', 
		'\x118', '\x2', '\x13A4', '\x13A6', '\x5', '\xF0', 'y', '\x2', '\x13A5', 
		'\x13A4', '\x3', '\x2', '\x2', '\x2', '\x13A5', '\x13A6', '\x3', '\x2', 
		'\x2', '\x2', '\x13A6', '\x13A8', '\x3', '\x2', '\x2', '\x2', '\x13A7', 
		'\x138D', '\x3', '\x2', '\x2', '\x2', '\x13A7', '\x1395', '\x3', '\x2', 
		'\x2', '\x2', '\x13A7', '\x139C', '\x3', '\x2', '\x2', '\x2', '\x13A8', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x13A9', '\x13AB', '\a', '\x2E8', 
		'\x2', '\x2', '\x13AA', '\x13AC', '\a', '\x30C', '\x2', '\x2', '\x13AB', 
		'\x13AA', '\x3', '\x2', '\x2', '\x2', '\x13AB', '\x13AC', '\x3', '\x2', 
		'\x2', '\x2', '\x13AC', '\x217', '\x3', '\x2', '\x2', '\x2', '\x13AD', 
		'\x13AE', '\a', '\xA4', '\x2', '\x2', '\x13AE', '\x13AF', '\a', '\x254', 
		'\x2', '\x2', '\x13AF', '\x13B0', '\x5', '\x410', '\x209', '\x2', '\x13B0', 
		'\x13B1', '\a', '\x300', '\x2', '\x2', '\x13B1', '\x219', '\x3', '\x2', 
		'\x2', '\x2', '\x13B2', '\x13B3', '\a', 'Z', '\x2', '\x2', '\x13B3', '\x13B4', 
		'\a', '\x198', '\x2', '\x2', '\x13B4', '\x13B5', '\a', 'X', '\x2', '\x2', 
		'\x13B5', '\x13B6', '\x5', '\x410', '\x209', '\x2', '\x13B6', '\x13B7', 
		'\a', '\x2E7', '\x2', '\x2', '\x13B7', '\x13B8', '\x5', '\x48A', '\x246', 
		'\x2', '\x13B8', '\x13B9', '\a', '\x11A', '\x2', '\x2', '\x13B9', '\x13BA', 
		'\x5', '\x4A4', '\x253', '\x2', '\x13BA', '\x21B', '\x3', '\x2', '\x2', 
		'\x2', '\x13BB', '\x13BE', '\a', 'r', '\x2', '\x2', '\x13BC', '\x13BD', 
		'\a', '\x1A1', '\x2', '\x2', '\x13BD', '\x13BF', '\a', '\x1EE', '\x2', 
		'\x2', '\x13BE', '\x13BC', '\x3', '\x2', '\x2', '\x2', '\x13BE', '\x13BF', 
		'\x3', '\x2', '\x2', '\x2', '\x13BF', '\x13C1', '\x3', '\x2', '\x2', '\x2', 
		'\x13C0', '\x13C2', '\t', '\x43', '\x2', '\x2', '\x13C1', '\x13C0', '\x3', 
		'\x2', '\x2', '\x2', '\x13C1', '\x13C2', '\x3', '\x2', '\x2', '\x2', '\x13C2', 
		'\x13C4', '\x3', '\x2', '\x2', '\x2', '\x13C3', '\x13C5', '\a', '\x1D6', 
		'\x2', '\x2', '\x13C4', '\x13C3', '\x3', '\x2', '\x2', '\x2', '\x13C4', 
		'\x13C5', '\x3', '\x2', '\x2', '\x2', '\x13C5', '\x13C6', '\x3', '\x2', 
		'\x2', '\x2', '\x13C6', '\x13CA', '\a', '\x249', '\x2', '\x2', '\x13C7', 
		'\x13C8', '\x5', '\x47C', '\x23F', '\x2', '\x13C8', '\x13C9', '\a', '\x2E7', 
		'\x2', '\x2', '\x13C9', '\x13CB', '\x3', '\x2', '\x2', '\x2', '\x13CA', 
		'\x13C7', '\x3', '\x2', '\x2', '\x2', '\x13CA', '\x13CB', '\x3', '\x2', 
		'\x2', '\x2', '\x13CB', '\x13CC', '\x3', '\x2', '\x2', '\x2', '\x13CC', 
		'\x13CD', '\x5', '\x46A', '\x236', '\x2', '\x13CD', '\x13D1', '\a', '\xDC', 
		'\x2', '\x2', '\x13CE', '\x13CF', '\x5', '\x47C', '\x23F', '\x2', '\x13CF', 
		'\x13D0', '\a', '\x2E7', '\x2', '\x2', '\x13D0', '\x13D2', '\x3', '\x2', 
		'\x2', '\x2', '\x13D1', '\x13CE', '\x3', '\x2', '\x2', '\x2', '\x13D1', 
		'\x13D2', '\x3', '\x2', '\x2', '\x2', '\x13D2', '\x13D3', '\x3', '\x2', 
		'\x2', '\x2', '\x13D3', '\x13D6', '\x5', '\x426', '\x214', '\x2', '\x13D4', 
		'\x13D5', '\a', '\x2F6', '\x2', '\x2', '\x13D5', '\x13D7', '\x5', '\x40E', 
		'\x208', '\x2', '\x13D6', '\x13D4', '\x3', '\x2', '\x2', '\x2', '\x13D6', 
		'\x13D7', '\x3', '\x2', '\x2', '\x2', '\x13D7', '\x21D', '\x3', '\x2', 
		'\x2', '\x2', '\x13D8', '\x13D9', '\a', 'Z', '\x2', '\x2', '\x13D9', '\x13DA', 
		'\a', '\x198', '\x2', '\x2', '\x13DA', '\x13DB', '\a', '\x254', '\x2', 
		'\x2', '\x13DB', '\x13DC', '\x5', '\x410', '\x209', '\x2', '\x13DC', '\x13DD', 
		'\a', '\x11A', '\x2', '\x2', '\x13DD', '\x13DE', '\x5', '\x4A4', '\x253', 
		'\x2', '\x13DE', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x13DF', '\x13E0', 
		'\a', '\x10', '\x2', '\x2', '\x13E0', '\x13E1', '\a', '\x254', '\x2', 
		'\x2', '\x13E1', '\x13E6', '\x5', '\x410', '\x209', '\x2', '\x13E2', '\x13E7', 
		'\x5', '\x222', '\x112', '\x2', '\x13E3', '\x13E7', '\x5', '\x226', '\x114', 
		'\x2', '\x13E4', '\x13E7', '\x5', '\x228', '\x115', '\x2', '\x13E5', '\x13E7', 
		'\x5', '\x22A', '\x116', '\x2', '\x13E6', '\x13E2', '\x3', '\x2', '\x2', 
		'\x2', '\x13E6', '\x13E3', '\x3', '\x2', '\x2', '\x2', '\x13E6', '\x13E4', 
		'\x3', '\x2', '\x2', '\x2', '\x13E6', '\x13E5', '\x3', '\x2', '\x2', '\x2', 
		'\x13E7', '\x221', '\x3', '\x2', '\x2', '\x2', '\x13E8', '\x13EB', '\a', 
		'\x5', '\x2', '\x2', '\x13E9', '\x13EA', '\a', '\x65', '\x2', '\x2', '\x13EA', 
		'\x13EC', '\x5', '\x406', '\x204', '\x2', '\x13EB', '\x13E9', '\x3', '\x2', 
		'\x2', '\x2', '\x13EB', '\x13EC', '\x3', '\x2', '\x2', '\x2', '\x13EC', 
		'\x13F1', '\x3', '\x2', '\x2', '\x2', '\x13ED', '\x13F2', '\x5', '\x234', 
		'\x11B', '\x2', '\x13EE', '\x13F2', '\x5', '\x22C', '\x117', '\x2', '\x13EF', 
		'\x13F2', '\x5', '\x232', '\x11A', '\x2', '\x13F0', '\x13F2', '\x5', '\x224', 
		'\x113', '\x2', '\x13F1', '\x13ED', '\x3', '\x2', '\x2', '\x2', '\x13F1', 
		'\x13EE', '\x3', '\x2', '\x2', '\x2', '\x13F1', '\x13EF', '\x3', '\x2', 
		'\x2', '\x2', '\x13F1', '\x13F0', '\x3', '\x2', '\x2', '\x2', '\x13F2', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x13F3', '\x13F4', '\a', 'M', '\x2', 
		'\x2', '\x13F4', '\x13F5', '\a', '\x2EE', '\x2', '\x2', '\x13F5', '\x13F6', 
		'\x5', '\x376', '\x1BC', '\x2', '\x13F6', '\x13F8', '\a', '\x2EF', '\x2', 
		'\x2', '\x13F7', '\x13F9', '\a', '\x9B', '\x2', '\x2', '\x13F8', '\x13F7', 
		'\x3', '\x2', '\x2', '\x2', '\x13F8', '\x13F9', '\x3', '\x2', '\x2', '\x2', 
		'\x13F9', '\x225', '\x3', '\x2', '\x2', '\x2', '\x13FA', '\x13FB', '\a', 
		'\xA4', '\x2', '\x2', '\x13FB', '\x13FC', '\a', '\x65', '\x2', '\x2', 
		'\x13FC', '\x13FD', '\x5', '\x406', '\x204', '\x2', '\x13FD', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x13FE', '\x13FF', '\a', '\xB0', '\x2', '\x2', 
		'\x13FF', '\x1400', '\a', '\x65', '\x2', '\x2', '\x1400', '\x1401', '\x5', 
		'\x406', '\x204', '\x2', '\x1401', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x1402', '\x1403', '\a', '\x9B', '\x2', '\x2', '\x1403', '\x1404', '\a', 
		'\x65', '\x2', '\x2', '\x1404', '\x1405', '\x5', '\x406', '\x204', '\x2', 
		'\x1405', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x1406', '\x1407', '\a', 
		'\xDB', '\x2', '\x2', '\x1407', '\x1408', '\a', '\x122', '\x2', '\x2', 
		'\x1408', '\x1409', '\x5', '\x444', '\x223', '\x2', '\x1409', '\x140B', 
		'\x5', '\x22E', '\x118', '\x2', '\x140A', '\x140C', '\x5', '\x230', '\x119', 
		'\x2', '\x140B', '\x140A', '\x3', '\x2', '\x2', '\x2', '\x140B', '\x140C', 
		'\x3', '\x2', '\x2', '\x2', '\x140C', '\x22D', '\x3', '\x2', '\x2', '\x2', 
		'\x140D', '\x140E', '\a', '\x1E4', '\x2', '\x2', '\x140E', '\x140F', '\x5', 
		'\x410', '\x209', '\x2', '\x140F', '\x1417', '\x5', '\x444', '\x223', 
		'\x2', '\x1410', '\x1411', '\a', '\x198', '\x2', '\x2', '\x1411', '\x1415', 
		'\a', '\x94', '\x2', '\x2', '\x1412', '\x1416', '\a', '\x45', '\x2', '\x2', 
		'\x1413', '\x1414', '\a', '\x21F', '\x2', '\x2', '\x1414', '\x1416', '\a', 
		'\x18A', '\x2', '\x2', '\x1415', '\x1412', '\x3', '\x2', '\x2', '\x2', 
		'\x1415', '\x1413', '\x3', '\x2', '\x2', '\x2', '\x1416', '\x1418', '\x3', 
		'\x2', '\x2', '\x2', '\x1417', '\x1410', '\x3', '\x2', '\x2', '\x2', '\x1417', 
		'\x1418', '\x3', '\x2', '\x2', '\x2', '\x1418', '\x22F', '\x3', '\x2', 
		'\x2', '\x2', '\x1419', '\x141A', '\a', '\x198', '\x2', '\x2', '\x141A', 
		'\x141E', '\a', '\x94', '\x2', '\x2', '\x141B', '\x141F', '\a', '\x45', 
		'\x2', '\x2', '\x141C', '\x141D', '\a', '\x21F', '\x2', '\x2', '\x141D', 
		'\x141F', '\a', '\x18A', '\x2', '\x2', '\x141E', '\x141B', '\x3', '\x2', 
		'\x2', '\x2', '\x141E', '\x141C', '\x3', '\x2', '\x2', '\x2', '\x141F', 
		'\x231', '\x3', '\x2', '\x2', '\x2', '\x1420', '\x1421', '\a', '\x27C', 
		'\x2', '\x2', '\x1421', '\x1422', '\x5', '\x444', '\x223', '\x2', '\x1422', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x1423', '\x1424', '\a', '\x1CD', 
		'\x2', '\x2', '\x1424', '\x1425', '\a', '\x122', '\x2', '\x2', '\x1425', 
		'\x1426', '\x5', '\x444', '\x223', '\x2', '\x1426', '\x235', '\x3', '\x2', 
		'\x2', '\x2', '\x1427', '\x1428', '\a', '\x89', '\x2', '\x2', '\x1428', 
		'\x142A', '\x5', '\x24A', '\x126', '\x2', '\x1429', '\x1427', '\x3', '\x2', 
		'\x2', '\x2', '\x1429', '\x142A', '\x3', '\x2', '\x2', '\x2', '\x142A', 
		'\x142B', '\x3', '\x2', '\x2', '\x2', '\x142B', '\x142C', '\a', '-', '\x2', 
		'\x2', '\x142C', '\x1433', '\x5', '\x268', '\x135', '\x2', '\x142D', '\x142F', 
		'\a', '\xBD', '\x2', '\x2', '\x142E', '\x1430', '\x5', '\x298', '\x14D', 
		'\x2', '\x142F', '\x142E', '\x3', '\x2', '\x2', '\x2', '\x1430', '\x1431', 
		'\x3', '\x2', '\x2', '\x2', '\x1431', '\x142F', '\x3', '\x2', '\x2', '\x2', 
		'\x1431', '\x1432', '\x3', '\x2', '\x2', '\x2', '\x1432', '\x1434', '\x3', 
		'\x2', '\x2', '\x2', '\x1433', '\x142D', '\x3', '\x2', '\x2', '\x2', '\x1433', 
		'\x1434', '\x3', '\x2', '\x2', '\x2', '\x1434', '\x1435', '\x3', '\x2', 
		'\x2', '\x2', '\x1435', '\x1436', '\a', '\xB4', '\x2', '\x2', '\x1436', 
		'\x1437', '\a', '\x300', '\x2', '\x2', '\x1437', '\x237', '\x3', '\x2', 
		'\x2', '\x2', '\x1438', '\x1439', '\a', '!', '\x2', '\x2', '\x1439', '\x143A', 
		'\t', '\x44', '\x2', '\x2', '\x143A', '\x239', '\x3', '\x2', '\x2', '\x2', 
		'\x143B', '\x143C', '\x5', '\x468', '\x235', '\x2', '\x143C', '\x143D', 
		'\a', '\x302', '\x2', '\x2', '\x143D', '\x143E', '\x5', '\x37A', '\x1BE', 
		'\x2', '\x143E', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x143F', '\x1442', 
		'\a', '\x123', '\x2', '\x2', '\x1440', '\x1443', '\x5', '\x23E', '\x120', 
		'\x2', '\x1441', '\x1443', '\x5', '\x240', '\x121', '\x2', '\x1442', '\x1440', 
		'\x3', '\x2', '\x2', '\x2', '\x1442', '\x1441', '\x3', '\x2', '\x2', '\x2', 
		'\x1443', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x1444', '\x1445', '\a', 
		'\x11D', '\x2', '\x2', '\x1445', '\x1446', '\a', '\x164', '\x2', '\x2', 
		'\x1446', '\x1447', '\a', '\x2EA', '\x2', '\x2', '\x1447', '\x23F', '\x3', 
		'\x2', '\x2', '\x2', '\x1448', '\x144B', '\a', 'Q', '\x2', '\x2', '\x1449', 
		'\x144A', '\a', '\x164', '\x2', '\x2', '\x144A', '\x144C', '\a', '\x2EA', 
		'\x2', '\x2', '\x144B', '\x1449', '\x3', '\x2', '\x2', '\x2', '\x144B', 
		'\x144C', '\x3', '\x2', '\x2', '\x2', '\x144C', '\x144D', '\x3', '\x2', 
		'\x2', '\x2', '\x144D', '\x144E', '\a', '\x12B', '\x2', '\x2', '\x144E', 
		'\x1450', '\x5', '\x468', '\x235', '\x2', '\x144F', '\x1451', '\x5', '\x242', 
		'\x122', '\x2', '\x1450', '\x144F', '\x3', '\x2', '\x2', '\x2', '\x1450', 
		'\x1451', '\x3', '\x2', '\x2', '\x2', '\x1451', '\x1454', '\x3', '\x2', 
		'\x2', '\x2', '\x1452', '\x1453', '\a', '\x2A2', '\x2', '\x2', '\x1453', 
		'\x1455', '\a', 'k', '\x2', '\x2', '\x1454', '\x1452', '\x3', '\x2', '\x2', 
		'\x2', '\x1454', '\x1455', '\x3', '\x2', '\x2', '\x2', '\x1455', '\x1457', 
		'\x3', '\x2', '\x2', '\x2', '\x1456', '\x1458', '\x5', '\x244', '\x123', 
		'\x2', '\x1457', '\x1456', '\x3', '\x2', '\x2', '\x2', '\x1457', '\x1458', 
		'\x3', '\x2', '\x2', '\x2', '\x1458', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x1459', '\x145A', '\a', '\v', '\x2', '\x2', '\x145A', '\x145B', '\a', 
		'\x107', '\x2', '\x2', '\x145B', '\x145C', '\a', '\x2EE', '\x2', '\x2', 
		'\x145C', '\x145D', '\x5', '\x378', '\x1BD', '\x2', '\x145D', '\x145E', 
		'\a', '\x2EF', '\x2', '\x2', '\x145E', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x145F', '\x1460', '\a', '\x1AC', '\x2', '\x2', '\x1460', '\x1465', '\a', 
		'\x2EE', '\x2', '\x2', '\x1461', '\x1466', '\x5', '\x378', '\x1BD', '\x2', 
		'\x1462', '\x1463', '\a', '\x2E7', '\x2', '\x2', '\x1463', '\x1464', '\a', 
		'\x2E7', '\x2', '\x2', '\x1464', '\x1466', '\a', '\x2E7', '\x2', '\x2', 
		'\x1465', '\x1461', '\x3', '\x2', '\x2', '\x2', '\x1465', '\x1462', '\x3', 
		'\x2', '\x2', '\x2', '\x1466', '\x1467', '\x3', '\x2', '\x2', '\x2', '\x1467', 
		'\x1468', '\a', '\x2EF', '\x2', '\x2', '\x1468', '\x245', '\x3', '\x2', 
		'\x2', '\x2', '\x1469', '\x146D', '\x5', '\x46E', '\x238', '\x2', '\x146A', 
		'\x146C', '\t', '\x45', '\x2', '\x2', '\x146B', '\x146A', '\x3', '\x2', 
		'\x2', '\x2', '\x146C', '\x146F', '\x3', '\x2', '\x2', '\x2', '\x146D', 
		'\x146B', '\x3', '\x2', '\x2', '\x2', '\x146D', '\x146E', '\x3', '\x2', 
		'\x2', '\x2', '\x146E', '\x1471', '\x3', '\x2', '\x2', '\x2', '\x146F', 
		'\x146D', '\x3', '\x2', '\x2', '\x2', '\x1470', '\x1472', '\x5', '\x44E', 
		'\x228', '\x2', '\x1471', '\x1470', '\x3', '\x2', '\x2', '\x2', '\x1471', 
		'\x1472', '\x3', '\x2', '\x2', '\x2', '\x1472', '\x1474', '\x3', '\x2', 
		'\x2', '\x2', '\x1473', '\x1475', '\x5', '\x248', '\x125', '\x2', '\x1474', 
		'\x1473', '\x3', '\x2', '\x2', '\x2', '\x1474', '\x1475', '\x3', '\x2', 
		'\x2', '\x2', '\x1475', '\x247', '\x3', '\x2', '\x2', '\x2', '\x1476', 
		'\x1477', '\t', '\x46', '\x2', '\x2', '\x1477', '\x1478', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1478', '\x249', '\x3', '\x2', '\x2', '\x2', '\x1479', 
		'\x147B', '\x5', '\x24C', '\x127', '\x2', '\x147A', '\x1479', '\x3', '\x2', 
		'\x2', '\x2', '\x147B', '\x147C', '\x3', '\x2', '\x2', '\x2', '\x147C', 
		'\x147A', '\x3', '\x2', '\x2', '\x2', '\x147C', '\x147D', '\x3', '\x2', 
		'\x2', '\x2', '\x147D', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x147E', 
		'\x1489', '\x5', '\x24E', '\x128', '\x2', '\x147F', '\x1489', '\x5', '\x250', 
		'\x129', '\x2', '\x1480', '\x1489', '\x5', '\x252', '\x12A', '\x2', '\x1481', 
		'\x1489', '\x5', '\x256', '\x12C', '\x2', '\x1482', '\x1489', '\x5', '\x258', 
		'\x12D', '\x2', '\x1483', '\x1489', '\x5', '\x25A', '\x12E', '\x2', '\x1484', 
		'\x1489', '\x5', ' ', '\x11', '\x2', '\x1485', '\x1489', '\x5', '\"', 
		'\x12', '\x2', '\x1486', '\x1489', '\x5', ',', '\x17', '\x2', '\x1487', 
		'\x1489', '\x5', '*', '\x16', '\x2', '\x1488', '\x147E', '\x3', '\x2', 
		'\x2', '\x2', '\x1488', '\x147F', '\x3', '\x2', '\x2', '\x2', '\x1488', 
		'\x1480', '\x3', '\x2', '\x2', '\x2', '\x1488', '\x1481', '\x3', '\x2', 
		'\x2', '\x2', '\x1488', '\x1482', '\x3', '\x2', '\x2', '\x2', '\x1488', 
		'\x1483', '\x3', '\x2', '\x2', '\x2', '\x1488', '\x1484', '\x3', '\x2', 
		'\x2', '\x2', '\x1488', '\x1485', '\x3', '\x2', '\x2', '\x2', '\x1488', 
		'\x1486', '\x3', '\x2', '\x2', '\x2', '\x1488', '\x1487', '\x3', '\x2', 
		'\x2', '\x2', '\x1489', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x148A', 
		'\x148C', '\x5', '\x468', '\x235', '\x2', '\x148B', '\x148D', '\a', '\x64', 
		'\x2', '\x2', '\x148C', '\x148B', '\x3', '\x2', '\x2', '\x2', '\x148C', 
		'\x148D', '\x3', '\x2', '\x2', '\x2', '\x148D', '\x148E', '\x3', '\x2', 
		'\x2', '\x2', '\x148E', '\x1491', '\x5', '\x44E', '\x228', '\x2', '\x148F', 
		'\x1490', '\a', '\x187', '\x2', '\x2', '\x1490', '\x1492', '\a', '\x18A', 
		'\x2', '\x2', '\x1491', '\x148F', '\x3', '\x2', '\x2', '\x2', '\x1491', 
		'\x1492', '\x3', '\x2', '\x2', '\x2', '\x1492', '\x1494', '\x3', '\x2', 
		'\x2', '\x2', '\x1493', '\x1495', '\x5', '\x248', '\x125', '\x2', '\x1494', 
		'\x1493', '\x3', '\x2', '\x2', '\x2', '\x1494', '\x1495', '\x3', '\x2', 
		'\x2', '\x2', '\x1495', '\x1496', '\x3', '\x2', '\x2', '\x2', '\x1496', 
		'\x1497', '\a', '\x300', '\x2', '\x2', '\x1497', '\x24F', '\x3', '\x2', 
		'\x2', '\x2', '\x1498', '\x1499', '\a', '\x245', '\x2', '\x2', '\x1499', 
		'\x149A', '\x5', '\x468', '\x235', '\x2', '\x149A', '\x149B', '\a', '\x11A', 
		'\x2', '\x2', '\x149B', '\x14A1', '\x5', '\x44E', '\x228', '\x2', '\x149C', 
		'\x149D', '\a', '\x1DB', '\x2', '\x2', '\x149D', '\x149E', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x149E', '\x149F', '\a', '\x2E6', '\x2', '\x2', '\x149F', 
		'\x14A0', '\x5', '\x37A', '\x1BE', '\x2', '\x14A0', '\x14A2', '\x3', '\x2', 
		'\x2', '\x2', '\x14A1', '\x149C', '\x3', '\x2', '\x2', '\x2', '\x14A1', 
		'\x14A2', '\x3', '\x2', '\x2', '\x2', '\x14A2', '\x14A5', '\x3', '\x2', 
		'\x2', '\x2', '\x14A3', '\x14A4', '\a', '\x187', '\x2', '\x2', '\x14A4', 
		'\x14A6', '\a', '\x18A', '\x2', '\x2', '\x14A5', '\x14A3', '\x3', '\x2', 
		'\x2', '\x2', '\x14A5', '\x14A6', '\x3', '\x2', '\x2', '\x2', '\x14A6', 
		'\x14A7', '\x3', '\x2', '\x2', '\x2', '\x14A7', '\x14A8', '\a', '\x300', 
		'\x2', '\x2', '\x14A8', '\x251', '\x3', '\x2', '\x2', '\x2', '\x14A9', 
		'\x14AA', '\a', 'y', '\x2', '\x2', '\x14AA', '\x14B6', '\x5', '\x468', 
		'\x235', '\x2', '\x14AB', '\x14B0', '\a', '\x2EE', '\x2', '\x2', '\x14AC', 
		'\x14AE', '\a', '\x2F4', '\x2', '\x2', '\x14AD', '\x14AC', '\x3', '\x2', 
		'\x2', '\x2', '\x14AD', '\x14AE', '\x3', '\x2', '\x2', '\x2', '\x14AE', 
		'\x14AF', '\x3', '\x2', '\x2', '\x2', '\x14AF', '\x14B1', '\x5', '\x254', 
		'\x12B', '\x2', '\x14B0', '\x14AD', '\x3', '\x2', '\x2', '\x2', '\x14B1', 
		'\x14B2', '\x3', '\x2', '\x2', '\x2', '\x14B2', '\x14B0', '\x3', '\x2', 
		'\x2', '\x2', '\x14B2', '\x14B3', '\x3', '\x2', '\x2', '\x2', '\x14B3', 
		'\x14B4', '\x3', '\x2', '\x2', '\x2', '\x14B4', '\x14B5', '\a', '\x2EF', 
		'\x2', '\x2', '\x14B5', '\x14B7', '\x3', '\x2', '\x2', '\x2', '\x14B6', 
		'\x14AB', '\x3', '\x2', '\x2', '\x2', '\x14B6', '\x14B7', '\x3', '\x2', 
		'\x2', '\x2', '\x14B7', '\x14BA', '\x3', '\x2', '\x2', '\x2', '\x14B8', 
		'\x14B9', '\a', '\x1F9', '\x2', '\x2', '\x14B9', '\x14BB', '\x5', '\x44E', 
		'\x228', '\x2', '\x14BA', '\x14B8', '\x3', '\x2', '\x2', '\x2', '\x14BA', 
		'\x14BB', '\x3', '\x2', '\x2', '\x2', '\x14BB', '\x14BE', '\x3', '\x2', 
		'\x2', '\x2', '\x14BC', '\x14BD', '\a', '\x11A', '\x2', '\x2', '\x14BD', 
		'\x14BF', '\x5', '\x2C0', '\x161', '\x2', '\x14BE', '\x14BC', '\x3', '\x2', 
		'\x2', '\x2', '\x14BE', '\x14BF', '\x3', '\x2', '\x2', '\x2', '\x14BF', 
		'\x14C0', '\x3', '\x2', '\x2', '\x2', '\x14C0', '\x14C1', '\a', '\x300', 
		'\x2', '\x2', '\x14C1', '\x253', '\x3', '\x2', '\x2', '\x2', '\x14C2', 
		'\x14C7', '\x5', '\x46E', '\x238', '\x2', '\x14C3', '\x14C5', '\a', '\x107', 
		'\x2', '\x2', '\x14C4', '\x14C3', '\x3', '\x2', '\x2', '\x2', '\x14C4', 
		'\x14C5', '\x3', '\x2', '\x2', '\x2', '\x14C5', '\x14C6', '\x3', '\x2', 
		'\x2', '\x2', '\x14C6', '\x14C8', '\x5', '\x44E', '\x228', '\x2', '\x14C7', 
		'\x14C4', '\x3', '\x2', '\x2', '\x2', '\x14C7', '\x14C8', '\x3', '\x2', 
		'\x2', '\x2', '\x14C8', '\x14CA', '\x3', '\x2', '\x2', '\x2', '\x14C9', 
		'\x14CB', '\x5', '\x248', '\x125', '\x2', '\x14CA', '\x14C9', '\x3', '\x2', 
		'\x2', '\x2', '\x14CA', '\x14CB', '\x3', '\x2', '\x2', '\x2', '\x14CB', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x14CC', '\x14CD', '\x5', '\x468', 
		'\x235', '\x2', '\x14CD', '\x14CE', '\a', '\xBD', '\x2', '\x2', '\x14CE', 
		'\x14CF', '\a', '\x300', '\x2', '\x2', '\x14CF', '\x257', '\x3', '\x2', 
		'\x2', '\x2', '\x14D0', '\x14EF', '\a', '\x1C8', '\x2', '\x2', '\x14D1', 
		'\x14F0', '\a', '\x21B', '\x2', '\x2', '\x14D2', '\x14F0', '\a', '&', 
		'\x2', '\x2', '\x14D3', '\x14D4', '\a', '\xBE', '\x2', '\x2', '\x14D4', 
		'\x14D5', '\a', '\x2EE', '\x2', '\x2', '\x14D5', '\x14D6', '\x5', '\x488', 
		'\x245', '\x2', '\x14D6', '\x14D7', '\a', '\x2F4', '\x2', '\x2', '\x14D7', 
		'\x14D8', '\x5', '\x4A2', '\x252', '\x2', '\x14D8', '\x14D9', '\a', '\x2EF', 
		'\x2', '\x2', '\x14D9', '\x14F0', '\x3', '\x2', '\x2', '\x2', '\x14DA', 
		'\x14DB', '\a', '\x10B', '\x2', '\x2', '\x14DB', '\x14DC', '\a', '\x2EE', 
		'\x2', '\x2', '\x14DC', '\x14DD', '\x5', '\x468', '\x235', '\x2', '\x14DD', 
		'\x14DE', '\a', '\x2F4', '\x2', '\x2', '\x14DE', '\x14DF', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x14DF', '\x14E0', '\a', '\x2EF', '\x2', '\x2', '\x14E0', 
		'\x14F0', '\x3', '\x2', '\x2', '\x2', '\x14E1', '\x14E2', '\a', '\x1F3', 
		'\x2', '\x2', '\x14E2', '\x14E5', '\a', '\x2EE', '\x2', '\x2', '\x14E3', 
		'\x14E6', '\x5', '\x468', '\x235', '\x2', '\x14E4', '\x14E6', '\a', '\x8E', 
		'\x2', '\x2', '\x14E5', '\x14E3', '\x3', '\x2', '\x2', '\x2', '\x14E5', 
		'\x14E4', '\x3', '\x2', '\x2', '\x2', '\x14E6', '\x14E9', '\x3', '\x2', 
		'\x2', '\x2', '\x14E7', '\x14E8', '\a', '\x2F4', '\x2', '\x2', '\x14E8', 
		'\x14EA', '\x5', '\x468', '\x235', '\x2', '\x14E9', '\x14E7', '\x3', '\x2', 
		'\x2', '\x2', '\x14EA', '\x14EB', '\x3', '\x2', '\x2', '\x2', '\x14EB', 
		'\x14E9', '\x3', '\x2', '\x2', '\x2', '\x14EB', '\x14EC', '\x3', '\x2', 
		'\x2', '\x2', '\x14EC', '\x14ED', '\x3', '\x2', '\x2', '\x2', '\x14ED', 
		'\x14EE', '\a', '\x2EF', '\x2', '\x2', '\x14EE', '\x14F0', '\x3', '\x2', 
		'\x2', '\x2', '\x14EF', '\x14D1', '\x3', '\x2', '\x2', '\x2', '\x14EF', 
		'\x14D2', '\x3', '\x2', '\x2', '\x2', '\x14EF', '\x14D3', '\x3', '\x2', 
		'\x2', '\x2', '\x14EF', '\x14DA', '\x3', '\x2', '\x2', '\x2', '\x14EF', 
		'\x14E1', '\x3', '\x2', '\x2', '\x2', '\x14F0', '\x14F1', '\x3', '\x2', 
		'\x2', '\x2', '\x14F1', '\x14F2', '\a', '\x300', '\x2', '\x2', '\x14F2', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x14F3', '\x14F4', '\a', '\x276', 
		'\x2', '\x2', '\x14F4', '\x14F5', '\x5', '\x468', '\x235', '\x2', '\x14F5', 
		'\x14FA', '\a', '\x11A', '\x2', '\x2', '\x14F6', '\x14FB', '\x5', '\x25E', 
		'\x130', '\x2', '\x14F7', '\x14FB', '\x5', '\x262', '\x132', '\x2', '\x14F8', 
		'\x14FB', '\x5', '\x264', '\x133', '\x2', '\x14F9', '\x14FB', '\x5', '\x25C', 
		'\x12F', '\x2', '\x14FA', '\x14F6', '\x3', '\x2', '\x2', '\x2', '\x14FA', 
		'\x14F7', '\x3', '\x2', '\x2', '\x2', '\x14FA', '\x14F8', '\x3', '\x2', 
		'\x2', '\x2', '\x14FA', '\x14F9', '\x3', '\x2', '\x2', '\x2', '\x14FB', 
		'\x14FC', '\x3', '\x2', '\x2', '\x2', '\x14FC', '\x14FD', '\a', '\x300', 
		'\x2', '\x2', '\x14FD', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x14FE', 
		'\x14FF', '\a', '\x1E6', '\x2', '\x2', '\x14FF', '\x1502', '\a', 'y', 
		'\x2', '\x2', '\x1500', '\x1501', '\a', '\x1F9', '\x2', '\x2', '\x1501', 
		'\x1503', '\x5', '\x44E', '\x228', '\x2', '\x1502', '\x1500', '\x3', '\x2', 
		'\x2', '\x2', '\x1502', '\x1503', '\x3', '\x2', '\x2', '\x2', '\x1503', 
		'\x25D', '\x3', '\x2', '\x2', '\x2', '\x1504', '\x1505', '\a', '\x254', 
		'\x2', '\x2', '\x1505', '\x1506', '\a', '\x192', '\x2', '\x2', '\x1506', 
		'\x1508', '\x5', '\x44E', '\x228', '\x2', '\x1507', '\x1509', '\x5', '\x260', 
		'\x131', '\x2', '\x1508', '\x1507', '\x3', '\x2', '\x2', '\x2', '\x1508', 
		'\x1509', '\x3', '\x2', '\x2', '\x2', '\x1509', '\x150C', '\x3', '\x2', 
		'\x2', '\x2', '\x150A', '\x150B', '\a', '\x187', '\x2', '\x2', '\x150B', 
		'\x150D', '\a', '\x18A', '\x2', '\x2', '\x150C', '\x150A', '\x3', '\x2', 
		'\x2', '\x2', '\x150C', '\x150D', '\x3', '\x2', '\x2', '\x2', '\x150D', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x150E', '\x150F', '\t', 'G', '\x2', 
		'\x2', '\x150F', '\x1510', '\a', '?', '\x2', '\x2', '\x1510', '\x1511', 
		'\x5', '\x44E', '\x228', '\x2', '\x1511', '\x261', '\x3', '\x2', '\x2', 
		'\x2', '\x1512', '\x1516', '\a', '\x292', '\x2', '\x2', '\x1513', '\x1514', 
		'\a', '\x293', '\x2', '\x2', '\x1514', '\x1516', '\a', '\x18', '\x2', 
		'\x2', '\x1515', '\x1512', '\x3', '\x2', '\x2', '\x2', '\x1515', '\x1513', 
		'\x3', '\x2', '\x2', '\x2', '\x1516', '\x1517', '\x3', '\x2', '\x2', '\x2', 
		'\x1517', '\x1518', '\a', '\x2EE', '\x2', '\x2', '\x1518', '\x1519', '\x5', 
		'\x37A', '\x1BE', '\x2', '\x1519', '\x151A', '\a', '\x2EF', '\x2', '\x2', 
		'\x151A', '\x151B', '\a', '\x192', '\x2', '\x2', '\x151B', '\x151E', '\x5', 
		'\x44E', '\x228', '\x2', '\x151C', '\x151D', '\a', '\x187', '\x2', '\x2', 
		'\x151D', '\x151F', '\a', '\x18A', '\x2', '\x2', '\x151E', '\x151C', '\x3', 
		'\x2', '\x2', '\x2', '\x151E', '\x151F', '\x3', '\x2', '\x2', '\x2', '\x151F', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x1520', '\x1521', '\a', '\x1E0', 
		'\x2', '\x2', '\x1521', '\x1526', '\a', '\x2EE', '\x2', '\x2', '\x1522', 
		'\x1524', '\a', '\x2F4', '\x2', '\x2', '\x1523', '\x1522', '\x3', '\x2', 
		'\x2', '\x2', '\x1523', '\x1524', '\x3', '\x2', '\x2', '\x2', '\x1524', 
		'\x1525', '\x3', '\x2', '\x2', '\x2', '\x1525', '\x1527', '\x5', '\x266', 
		'\x134', '\x2', '\x1526', '\x1523', '\x3', '\x2', '\x2', '\x2', '\x1527', 
		'\x1528', '\x3', '\x2', '\x2', '\x2', '\x1528', '\x1526', '\x3', '\x2', 
		'\x2', '\x2', '\x1528', '\x1529', '\x3', '\x2', '\x2', '\x2', '\x1529', 
		'\x152A', '\x3', '\x2', '\x2', '\x2', '\x152A', '\x152B', '\a', '\x2EF', 
		'\x2', '\x2', '\x152B', '\x265', '\x3', '\x2', '\x2', '\x2', '\x152C', 
		'\x152E', '\x5', '\x48A', '\x246', '\x2', '\x152D', '\x152F', '\x5', '\x44E', 
		'\x228', '\x2', '\x152E', '\x152D', '\x3', '\x2', '\x2', '\x2', '\x152E', 
		'\x152F', '\x3', '\x2', '\x2', '\x2', '\x152F', '\x1532', '\x3', '\x2', 
		'\x2', '\x2', '\x1530', '\x1531', '\a', '\x187', '\x2', '\x2', '\x1531', 
		'\x1533', '\a', '\x18A', '\x2', '\x2', '\x1532', '\x1530', '\x3', '\x2', 
		'\x2', '\x2', '\x1532', '\x1533', '\x3', '\x2', '\x2', '\x2', '\x1533', 
		'\x1535', '\x3', '\x2', '\x2', '\x2', '\x1534', '\x1536', '\x5', '\x248', 
		'\x125', '\x2', '\x1535', '\x1534', '\x3', '\x2', '\x2', '\x2', '\x1535', 
		'\x1536', '\x3', '\x2', '\x2', '\x2', '\x1536', '\x267', '\x3', '\x2', 
		'\x2', '\x2', '\x1537', '\x1538', '\x5', '\x26C', '\x137', '\x2', '\x1538', 
		'\x1539', '\t', 'H', '\x2', '\x2', '\x1539', '\x153C', '\x3', '\x2', '\x2', 
		'\x2', '\x153A', '\x153C', '\x5', '\x26A', '\x136', '\x2', '\x153B', '\x1537', 
		'\x3', '\x2', '\x2', '\x2', '\x153B', '\x153A', '\x3', '\x2', '\x2', '\x2', 
		'\x153C', '\x153D', '\x3', '\x2', '\x2', '\x2', '\x153D', '\x153B', '\x3', 
		'\x2', '\x2', '\x2', '\x153D', '\x153E', '\x3', '\x2', '\x2', '\x2', '\x153E', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x153F', '\x1540', '\a', '\x2FE', 
		'\x2', '\x2', '\x1540', '\x1541', '\a', '\x2FE', '\x2', '\x2', '\x1541', 
		'\x1542', '\x5', '\x422', '\x212', '\x2', '\x1542', '\x1543', '\a', '\x2FD', 
		'\x2', '\x2', '\x1543', '\x1544', '\a', '\x2FD', '\x2', '\x2', '\x1544', 
		'\x26B', '\x3', '\x2', '\x2', '\x2', '\x1545', '\x1546', '\a', 'r', '\x2', 
		'\x2', '\x1546', '\x155A', '\x5', '\x26E', '\x138', '\x2', '\x1547', '\x1548', 
		'\a', '\x273', '\x2', '\x2', '\x1548', '\x155A', '\x5', '\x26E', '\x138', 
		'\x2', '\x1549', '\x155A', '\x5', '\x296', '\x14C', '\x2', '\x154A', '\x155A', 
		'\x5', '\x29C', '\x14F', '\x2', '\x154B', '\x155A', '\x5', '\x270', '\x139', 
		'\x2', '\x154C', '\x155A', '\x5', '\x272', '\x13A', '\x2', '\x154D', '\x155A', 
		'\x5', '\x274', '\x13B', '\x2', '\x154E', '\x155A', '\x5', '\x276', '\x13C', 
		'\x2', '\x154F', '\x155A', '\x5', '\x278', '\x13D', '\x2', '\x1550', '\x155A', 
		'\x5', '\x27E', '\x140', '\x2', '\x1551', '\x155A', '\x5', '\x282', '\x142', 
		'\x2', '\x1552', '\x155A', '\x5', '\x28C', '\x147', '\x2', '\x1553', '\x155A', 
		'\x5', '\x28E', '\x148', '\x2', '\x1554', '\x155A', '\x5', '\x290', '\x149', 
		'\x2', '\x1555', '\x155A', '\x5', '\x39A', '\x1CE', '\x2', '\x1556', '\x155A', 
		'\x5', '\x29E', '\x150', '\x2', '\x1557', '\x155A', '\x5', '\x292', '\x14A', 
		'\x2', '\x1558', '\x155A', '\x5', '\x294', '\x14B', '\x2', '\x1559', '\x1545', 
		'\x3', '\x2', '\x2', '\x2', '\x1559', '\x1547', '\x3', '\x2', '\x2', '\x2', 
		'\x1559', '\x1549', '\x3', '\x2', '\x2', '\x2', '\x1559', '\x154A', '\x3', 
		'\x2', '\x2', '\x2', '\x1559', '\x154B', '\x3', '\x2', '\x2', '\x2', '\x1559', 
		'\x154C', '\x3', '\x2', '\x2', '\x2', '\x1559', '\x154D', '\x3', '\x2', 
		'\x2', '\x2', '\x1559', '\x154E', '\x3', '\x2', '\x2', '\x2', '\x1559', 
		'\x154F', '\x3', '\x2', '\x2', '\x2', '\x1559', '\x1550', '\x3', '\x2', 
		'\x2', '\x2', '\x1559', '\x1551', '\x3', '\x2', '\x2', '\x2', '\x1559', 
		'\x1552', '\x3', '\x2', '\x2', '\x2', '\x1559', '\x1553', '\x3', '\x2', 
		'\x2', '\x2', '\x1559', '\x1554', '\x3', '\x2', '\x2', '\x2', '\x1559', 
		'\x1555', '\x3', '\x2', '\x2', '\x2', '\x1559', '\x1556', '\x3', '\x2', 
		'\x2', '\x2', '\x1559', '\x1557', '\x3', '\x2', '\x2', '\x2', '\x1559', 
		'\x1558', '\x3', '\x2', '\x2', '\x2', '\x155A', '\x26D', '\x3', '\x2', 
		'\x2', '\x2', '\x155B', '\x155D', '\n', 'I', '\x2', '\x2', '\x155C', '\x155B', 
		'\x3', '\x2', '\x2', '\x2', '\x155D', '\x155E', '\x3', '\x2', '\x2', '\x2', 
		'\x155E', '\x155C', '\x3', '\x2', '\x2', '\x2', '\x155E', '\x155F', '\x3', 
		'\x2', '\x2', '\x2', '\x155F', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x1560', 
		'\x1563', '\x5', '\x458', '\x22D', '\x2', '\x1561', '\x1563', '\x5', '\x456', 
		'\x22C', '\x2', '\x1562', '\x1560', '\x3', '\x2', '\x2', '\x2', '\x1562', 
		'\x1561', '\x3', '\x2', '\x2', '\x2', '\x1563', '\x1564', '\x3', '\x2', 
		'\x2', '\x2', '\x1564', '\x1565', '\a', '\x2F7', '\x2', '\x2', '\x1565', 
		'\x1566', '\x5', '\x37A', '\x1BE', '\x2', '\x1566', '\x271', '\x3', '\x2', 
		'\x2', '\x2', '\x1567', '\x1569', '\a', 'l', '\x2', '\x2', '\x1568', '\x156A', 
		'\x5', '\x422', '\x212', '\x2', '\x1569', '\x1568', '\x3', '\x2', '\x2', 
		'\x2', '\x1569', '\x156A', '\x3', '\x2', '\x2', '\x2', '\x156A', '\x156D', 
		'\x3', '\x2', '\x2', '\x2', '\x156B', '\x156C', '\a', '\x29D', '\x2', 
		'\x2', '\x156C', '\x156E', '\x5', '\x376', '\x1BC', '\x2', '\x156D', '\x156B', 
		'\x3', '\x2', '\x2', '\x2', '\x156D', '\x156E', '\x3', '\x2', '\x2', '\x2', 
		'\x156E', '\x273', '\x3', '\x2', '\x2', '\x2', '\x156F', '\x1571', '\a', 
		'\xC5', '\x2', '\x2', '\x1570', '\x1572', '\x5', '\x422', '\x212', '\x2', 
		'\x1571', '\x1570', '\x3', '\x2', '\x2', '\x2', '\x1571', '\x1572', '\x3', 
		'\x2', '\x2', '\x2', '\x1572', '\x1575', '\x3', '\x2', '\x2', '\x2', '\x1573', 
		'\x1574', '\a', '\x29D', '\x2', '\x2', '\x1574', '\x1576', '\x5', '\x376', 
		'\x1BC', '\x2', '\x1575', '\x1573', '\x3', '\x2', '\x2', '\x2', '\x1575', 
		'\x1576', '\x3', '\x2', '\x2', '\x2', '\x1576', '\x275', '\x3', '\x2', 
		'\x2', '\x2', '\x1577', '\x1578', '\a', '\xE6', '\x2', '\x2', '\x1578', 
		'\x1579', '\x5', '\x422', '\x212', '\x2', '\x1579', '\x277', '\x3', '\x2', 
		'\x2', '\x2', '\x157A', '\x157B', '\a', '\xF7', '\x2', '\x2', '\x157B', 
		'\x157C', '\x5', '\x376', '\x1BC', '\x2', '\x157C', '\x157D', '\a', '\x259', 
		'\x2', '\x2', '\x157D', '\x1581', '\x5', '\x268', '\x135', '\x2', '\x157E', 
		'\x1580', '\x5', '\x27A', '\x13E', '\x2', '\x157F', '\x157E', '\x3', '\x2', 
		'\x2', '\x2', '\x1580', '\x1583', '\x3', '\x2', '\x2', '\x2', '\x1581', 
		'\x157F', '\x3', '\x2', '\x2', '\x2', '\x1581', '\x1582', '\x3', '\x2', 
		'\x2', '\x2', '\x1582', '\x1585', '\x3', '\x2', '\x2', '\x2', '\x1583', 
		'\x1581', '\x3', '\x2', '\x2', '\x2', '\x1584', '\x1586', '\x5', '\x27C', 
		'\x13F', '\x2', '\x1585', '\x1584', '\x3', '\x2', '\x2', '\x2', '\x1585', 
		'\x1586', '\x3', '\x2', '\x2', '\x2', '\x1586', '\x1587', '\x3', '\x2', 
		'\x2', '\x2', '\x1587', '\x1588', '\a', '\xB4', '\x2', '\x2', '\x1588', 
		'\x1589', '\a', '\xF7', '\x2', '\x2', '\x1589', '\x279', '\x3', '\x2', 
		'\x2', '\x2', '\x158A', '\x158B', '\a', '\xAE', '\x2', '\x2', '\x158B', 
		'\x158C', '\x5', '\x376', '\x1BC', '\x2', '\x158C', '\x158D', '\a', '\x259', 
		'\x2', '\x2', '\x158D', '\x158E', '\x5', '\x268', '\x135', '\x2', '\x158E', 
		'\x27B', '\x3', '\x2', '\x2', '\x2', '\x158F', '\x1590', '\a', '\xAD', 
		'\x2', '\x2', '\x1590', '\x1591', '\x5', '\x268', '\x135', '\x2', '\x1591', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x1592', '\x1594', '\x5', '\x26A', 
		'\x136', '\x2', '\x1593', '\x1592', '\x3', '\x2', '\x2', '\x2', '\x1593', 
		'\x1594', '\x3', '\x2', '\x2', '\x2', '\x1594', '\x1599', '\x3', '\x2', 
		'\x2', '\x2', '\x1595', '\x1596', '\a', '\x29F', '\x2', '\x2', '\x1596', 
		'\x159A', '\x5', '\x376', '\x1BC', '\x2', '\x1597', '\x1598', '\a', '\xDC', 
		'\x2', '\x2', '\x1598', '\x159A', '\x5', '\x280', '\x141', '\x2', '\x1599', 
		'\x1595', '\x3', '\x2', '\x2', '\x2', '\x1599', '\x1597', '\x3', '\x2', 
		'\x2', '\x2', '\x1599', '\x159A', '\x3', '\x2', '\x2', '\x2', '\x159A', 
		'\x159B', '\x3', '\x2', '\x2', '\x2', '\x159B', '\x159C', '\a', '\x143', 
		'\x2', '\x2', '\x159C', '\x159D', '\x5', '\x268', '\x135', '\x2', '\x159D', 
		'\x159E', '\a', '\xB4', '\x2', '\x2', '\x159E', '\x15A0', '\a', '\x143', 
		'\x2', '\x2', '\x159F', '\x15A1', '\x5', '\x422', '\x212', '\x2', '\x15A0', 
		'\x159F', '\x3', '\x2', '\x2', '\x2', '\x15A0', '\x15A1', '\x3', '\x2', 
		'\x2', '\x2', '\x15A1', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x15A2', 
		'\x15A3', '\x5', '\x43C', '\x21F', '\x2', '\x15A3', '\x15A5', '\a', '\x107', 
		'\x2', '\x2', '\x15A4', '\x15A6', '\a', '\x1FB', '\x2', '\x2', '\x15A5', 
		'\x15A4', '\x3', '\x2', '\x2', '\x2', '\x15A5', '\x15A6', '\x3', '\x2', 
		'\x2', '\x2', '\x15A6', '\x15A7', '\x3', '\x2', '\x2', '\x2', '\x15A7', 
		'\x15A8', '\x5', '\x288', '\x145', '\x2', '\x15A8', '\x15A9', '\a', '\x2E6', 
		'\x2', '\x2', '\x15A9', '\x15AA', '\x5', '\x28A', '\x146', '\x2', '\x15AA', 
		'\x15BC', '\x3', '\x2', '\x2', '\x2', '\x15AB', '\x15AC', '\x5', '\x40C', 
		'\x207', '\x2', '\x15AC', '\x15B9', '\a', '\x107', '\x2', '\x2', '\x15AD', 
		'\x15B3', '\x5', '\x40A', '\x206', '\x2', '\x15AE', '\x15B0', '\a', '\x2EE', 
		'\x2', '\x2', '\x15AF', '\x15B1', '\x5', '\x378', '\x1BD', '\x2', '\x15B0', 
		'\x15AF', '\x3', '\x2', '\x2', '\x2', '\x15B0', '\x15B1', '\x3', '\x2', 
		'\x2', '\x2', '\x15B1', '\x15B2', '\x3', '\x2', '\x2', '\x2', '\x15B2', 
		'\x15B4', '\a', '\x2EF', '\x2', '\x2', '\x15B3', '\x15AE', '\x3', '\x2', 
		'\x2', '\x2', '\x15B3', '\x15B4', '\x3', '\x2', '\x2', '\x2', '\x15B4', 
		'\x15BA', '\x3', '\x2', '\x2', '\x2', '\x15B5', '\x15B6', '\a', '\x2EE', 
		'\x2', '\x2', '\x15B6', '\x15B7', '\x5', '\x2C0', '\x161', '\x2', '\x15B7', 
		'\x15B8', '\a', '\x2EF', '\x2', '\x2', '\x15B8', '\x15BA', '\x3', '\x2', 
		'\x2', '\x2', '\x15B9', '\x15AD', '\x3', '\x2', '\x2', '\x2', '\x15B9', 
		'\x15B5', '\x3', '\x2', '\x2', '\x2', '\x15BA', '\x15BC', '\x3', '\x2', 
		'\x2', '\x2', '\x15BB', '\x15A2', '\x3', '\x2', '\x2', '\x2', '\x15BB', 
		'\x15AB', '\x3', '\x2', '\x2', '\x2', '\x15BC', '\x281', '\x3', '\x2', 
		'\x2', '\x2', '\x15BD', '\x15BE', '\a', '\xD9', '\x2', '\x2', '\x15BE', 
		'\x15BF', '\x5', '\x43C', '\x21F', '\x2', '\x15BF', '\x15C0', '\a', '\x107', 
		'\x2', '\x2', '\x15C0', '\x15C1', '\x5', '\x284', '\x143', '\x2', '\x15C1', 
		'\x15C4', '\x5', '\x29E', '\x150', '\x2', '\x15C2', '\x15C3', '\a', '\x20B', 
		'\x2', '\x2', '\x15C3', '\x15C5', '\a', '\xBF', '\x2', '\x2', '\x15C4', 
		'\x15C2', '\x3', '\x2', '\x2', '\x2', '\x15C4', '\x15C5', '\x3', '\x2', 
		'\x2', '\x2', '\x15C5', '\x283', '\x3', '\x2', '\x2', '\x2', '\x15C6', 
		'\x15C7', '\x5', '\x288', '\x145', '\x2', '\x15C7', '\x15C8', '\a', '\x2E6', 
		'\x2', '\x2', '\x15C8', '\x15C9', '\x5', '\x28A', '\x146', '\x2', '\x15C9', 
		'\x15D4', '\x3', '\x2', '\x2', '\x2', '\x15CA', '\x15CB', '\a', '\x104', 
		'\x2', '\x2', '\x15CB', '\x15CC', '\a', '\x192', '\x2', '\x2', '\x15CC', 
		'\x15CE', '\x5', '\x43A', '\x21E', '\x2', '\x15CD', '\x15CF', '\x5', '\x286', 
		'\x144', '\x2', '\x15CE', '\x15CD', '\x3', '\x2', '\x2', '\x2', '\x15CE', 
		'\x15CF', '\x3', '\x2', '\x2', '\x2', '\x15CF', '\x15D4', '\x3', '\x2', 
		'\x2', '\x2', '\x15D0', '\x15D1', '\a', '\x28C', '\x2', '\x2', '\x15D1', 
		'\x15D2', '\a', '\x192', '\x2', '\x2', '\x15D2', '\x15D4', '\x5', '\x43C', 
		'\x21F', '\x2', '\x15D3', '\x15C6', '\x3', '\x2', '\x2', '\x2', '\x15D3', 
		'\x15CA', '\x3', '\x2', '\x2', '\x2', '\x15D3', '\x15D0', '\x3', '\x2', 
		'\x2', '\x2', '\x15D4', '\x285', '\x3', '\x2', '\x2', '\x2', '\x15D5', 
		'\x15D6', '\a', '.', '\x2', '\x2', '\x15D6', '\x15D7', '\x5', '\x288', 
		'\x145', '\x2', '\x15D7', '\x15D8', '\a', '\x13', '\x2', '\x2', '\x15D8', 
		'\x15D9', '\x5', '\x28A', '\x146', '\x2', '\x15D9', '\x287', '\x3', '\x2', 
		'\x2', '\x2', '\x15DA', '\x15DB', '\x5', '\x386', '\x1C4', '\x2', '\x15DB', 
		'\x289', '\x3', '\x2', '\x2', '\x2', '\x15DC', '\x15DD', '\x5', '\x386', 
		'\x1C4', '\x2', '\x15DD', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x15DE', 
		'\x15DF', '\a', '\x18A', '\x2', '\x2', '\x15DF', '\x28D', '\x3', '\x2', 
		'\x2', '\x2', '\x15E0', '\x15E2', '\a', '\x1DA', '\x2', '\x2', '\x15E1', 
		'\x15E3', '\x5', '\x488', '\x245', '\x2', '\x15E2', '\x15E1', '\x3', '\x2', 
		'\x2', '\x2', '\x15E2', '\x15E3', '\x3', '\x2', '\x2', '\x2', '\x15E3', 
		'\x28F', '\x3', '\x2', '\x2', '\x2', '\x15E4', '\x15E6', '\a', '\x1F9', 
		'\x2', '\x2', '\x15E5', '\x15E7', '\x5', '\x37A', '\x1BE', '\x2', '\x15E6', 
		'\x15E5', '\x3', '\x2', '\x2', '\x2', '\x15E6', '\x15E7', '\x3', '\x2', 
		'\x2', '\x2', '\x15E7', '\x291', '\x3', '\x2', '\x2', '\x2', '\x15E8', 
		'\x15EA', '\a', '\x42', '\x2', '\x2', '\x15E9', '\x15E8', '\x3', '\x2', 
		'\x2', '\x2', '\x15E9', '\x15EA', '\x3', '\x2', '\x2', '\x2', '\x15EA', 
		'\x15EB', '\x3', '\x2', '\x2', '\x2', '\x15EB', '\x15ED', '\x5', '\x3FE', 
		'\x200', '\x2', '\x15EC', '\x15EE', '\x5', '\x3EA', '\x1F6', '\x2', '\x15ED', 
		'\x15EC', '\x3', '\x2', '\x2', '\x2', '\x15ED', '\x15EE', '\x3', '\x2', 
		'\x2', '\x2', '\x15EE', '\x15F0', '\x3', '\x2', '\x2', '\x2', '\x15EF', 
		'\x15F1', '\x5', '\x446', '\x224', '\x2', '\x15F0', '\x15EF', '\x3', '\x2', 
		'\x2', '\x2', '\x15F0', '\x15F1', '\x3', '\x2', '\x2', '\x2', '\x15F1', 
		'\x293', '\x3', '\x2', '\x2', '\x2', '\x15F2', '\x15F3', '\a', '\x1C0', 
		'\x2', '\x2', '\x15F3', '\x15F4', '\a', '\x205', '\x2', '\x2', '\x15F4', 
		'\x15F5', '\a', '\x2EE', '\x2', '\x2', '\x15F5', '\x15F6', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x15F6', '\x15F7', '\a', '\x2EF', '\x2', '\x2', '\x15F7', 
		'\x295', '\x3', '\x2', '\x2', '\x2', '\x15F8', '\x15F9', '\a', '-', '\x2', 
		'\x2', '\x15F9', '\x1600', '\x5', '\x268', '\x135', '\x2', '\x15FA', '\x15FC', 
		'\a', '\xBD', '\x2', '\x2', '\x15FB', '\x15FD', '\x5', '\x298', '\x14D', 
		'\x2', '\x15FC', '\x15FB', '\x3', '\x2', '\x2', '\x2', '\x15FD', '\x15FE', 
		'\x3', '\x2', '\x2', '\x2', '\x15FE', '\x15FC', '\x3', '\x2', '\x2', '\x2', 
		'\x15FE', '\x15FF', '\x3', '\x2', '\x2', '\x2', '\x15FF', '\x1601', '\x3', 
		'\x2', '\x2', '\x2', '\x1600', '\x15FA', '\x3', '\x2', '\x2', '\x2', '\x1600', 
		'\x1601', '\x3', '\x2', '\x2', '\x2', '\x1601', '\x1602', '\x3', '\x2', 
		'\x2', '\x2', '\x1602', '\x1604', '\a', '\xB4', '\x2', '\x2', '\x1603', 
		'\x1605', '\x5', '\x422', '\x212', '\x2', '\x1604', '\x1603', '\x3', '\x2', 
		'\x2', '\x2', '\x1604', '\x1605', '\x3', '\x2', '\x2', '\x2', '\x1605', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\x1606', '\x1607', '\a', '\x29D', 
		'\x2', '\x2', '\x1607', '\x160C', '\x5', '\x488', '\x245', '\x2', '\x1608', 
		'\x1609', '\a', '\x1A1', '\x2', '\x2', '\x1609', '\x160B', '\x5', '\x488', 
		'\x245', '\x2', '\x160A', '\x1608', '\x3', '\x2', '\x2', '\x2', '\x160B', 
		'\x160E', '\x3', '\x2', '\x2', '\x2', '\x160C', '\x160A', '\x3', '\x2', 
		'\x2', '\x2', '\x160C', '\x160D', '\x3', '\x2', '\x2', '\x2', '\x160D', 
		'\x160F', '\x3', '\x2', '\x2', '\x2', '\x160E', '\x160C', '\x3', '\x2', 
		'\x2', '\x2', '\x160F', '\x1610', '\a', '\x259', '\x2', '\x2', '\x1610', 
		'\x1611', '\x5', '\x268', '\x135', '\x2', '\x1611', '\x299', '\x3', '\x2', 
		'\x2', '\x2', '\x1612', '\x1614', '\a', '\x89', '\x2', '\x2', '\x1613', 
		'\x1612', '\x3', '\x2', '\x2', '\x2', '\x1613', '\x1614', '\x3', '\x2', 
		'\x2', '\x2', '\x1614', '\x1616', '\x3', '\x2', '\x2', '\x2', '\x1615', 
		'\x1617', '\x5', '\x24C', '\x127', '\x2', '\x1616', '\x1615', '\x3', '\x2', 
		'\x2', '\x2', '\x1617', '\x1618', '\x3', '\x2', '\x2', '\x2', '\x1618', 
		'\x1616', '\x3', '\x2', '\x2', '\x2', '\x1618', '\x1619', '\x3', '\x2', 
		'\x2', '\x2', '\x1619', '\x161B', '\x3', '\x2', '\x2', '\x2', '\x161A', 
		'\x1613', '\x3', '\x2', '\x2', '\x2', '\x161A', '\x161B', '\x3', '\x2', 
		'\x2', '\x2', '\x161B', '\x161C', '\x3', '\x2', '\x2', '\x2', '\x161C', 
		'\x161D', '\x5', '\x296', '\x14C', '\x2', '\x161D', '\x29B', '\x3', '\x2', 
		'\x2', '\x2', '\x161E', '\x1620', '\a', '\x89', '\x2', '\x2', '\x161F', 
		'\x161E', '\x3', '\x2', '\x2', '\x2', '\x161F', '\x1620', '\x3', '\x2', 
		'\x2', '\x2', '\x1620', '\x1622', '\x3', '\x2', '\x2', '\x2', '\x1621', 
		'\x1623', '\x5', '\x24C', '\x127', '\x2', '\x1622', '\x1621', '\x3', '\x2', 
		'\x2', '\x2', '\x1623', '\x1624', '\x3', '\x2', '\x2', '\x2', '\x1624', 
		'\x1622', '\x3', '\x2', '\x2', '\x2', '\x1624', '\x1625', '\x3', '\x2', 
		'\x2', '\x2', '\x1625', '\x1626', '\x3', '\x2', '\x2', '\x2', '\x1626', 
		'\x1627', '\x5', '\x296', '\x14C', '\x2', '\x1627', '\x29D', '\x3', '\x2', 
		'\x2', '\x2', '\x1628', '\x162D', '\x5', '\x2A0', '\x151', '\x2', '\x1629', 
		'\x162D', '\x5', '\x2A4', '\x153', '\x2', '\x162A', '\x162D', '\x5', '\x2A6', 
		'\x154', '\x2', '\x162B', '\x162D', '\x5', '\x2B0', '\x159', '\x2', '\x162C', 
		'\x1628', '\x3', '\x2', '\x2', '\x2', '\x162C', '\x1629', '\x3', '\x2', 
		'\x2', '\x2', '\x162C', '\x162A', '\x3', '\x2', '\x2', '\x2', '\x162C', 
		'\x162B', '\x3', '\x2', '\x2', '\x2', '\x162D', '\x29F', '\x3', '\x2', 
		'\x2', '\x2', '\x162E', '\x162F', '\a', '\xC2', '\x2', '\x2', '\x162F', 
		'\x1630', '\a', '\xFA', '\x2', '\x2', '\x1630', '\x163A', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1631', '\x1633', '\x5', '\x3FA', '\x1FE', '\x2', '\x1632', 
		'\x1634', '\x5', '\x3C4', '\x1E3', '\x2', '\x1633', '\x1632', '\x3', '\x2', 
		'\x2', '\x2', '\x1633', '\x1634', '\x3', '\x2', '\x2', '\x2', '\x1634', 
		'\x163B', '\x3', '\x2', '\x2', '\x2', '\x1635', '\x1637', '\x5', '\x3C4', 
		'\x1E3', '\x2', '\x1636', '\x1638', '\x5', '\x2A2', '\x152', '\x2', '\x1637', 
		'\x1636', '\x3', '\x2', '\x2', '\x2', '\x1637', '\x1638', '\x3', '\x2', 
		'\x2', '\x2', '\x1638', '\x163B', '\x3', '\x2', '\x2', '\x2', '\x1639', 
		'\x163B', '\x5', '\x2A2', '\x152', '\x2', '\x163A', '\x1631', '\x3', '\x2', 
		'\x2', '\x2', '\x163A', '\x1635', '\x3', '\x2', '\x2', '\x2', '\x163A', 
		'\x1639', '\x3', '\x2', '\x2', '\x2', '\x163A', '\x163B', '\x3', '\x2', 
		'\x2', '\x2', '\x163B', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x163C', 
		'\x163D', '\t', 'J', '\x2', '\x2', '\x163D', '\x163E', '\x5', '\x3FA', 
		'\x1FE', '\x2', '\x163E', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x163F', 
		'\x1646', '\x5', '\x34E', '\x1A8', '\x2', '\x1640', '\x1646', '\x5', '\x35A', 
		'\x1AE', '\x2', '\x1641', '\x1646', '\x5', '\x2C0', '\x161', '\x2', '\x1642', 
		'\x1646', '\x5', '\x334', '\x19B', '\x2', '\x1643', '\x1646', '\x5', '\x33A', 
		'\x19E', '\x2', '\x1644', '\x1646', '\x5', '\x33C', '\x19F', '\x2', '\x1645', 
		'\x163F', '\x3', '\x2', '\x2', '\x2', '\x1645', '\x1640', '\x3', '\x2', 
		'\x2', '\x2', '\x1645', '\x1641', '\x3', '\x2', '\x2', '\x2', '\x1645', 
		'\x1642', '\x3', '\x2', '\x2', '\x2', '\x1645', '\x1643', '\x3', '\x2', 
		'\x2', '\x2', '\x1645', '\x1644', '\x3', '\x2', '\x2', '\x2', '\x1646', 
		'\x2A5', '\x3', '\x2', '\x2', '\x2', '\x1647', '\x164C', '\x5', '\x2A8', 
		'\x155', '\x2', '\x1648', '\x164C', '\x5', '\x2AA', '\x156', '\x2', '\x1649', 
		'\x164C', '\x5', '\x2AC', '\x157', '\x2', '\x164A', '\x164C', '\x5', '\x2AE', 
		'\x158', '\x2', '\x164B', '\x1647', '\x3', '\x2', '\x2', '\x2', '\x164B', 
		'\x1648', '\x3', '\x2', '\x2', '\x2', '\x164B', '\x1649', '\x3', '\x2', 
		'\x2', '\x2', '\x164B', '\x164A', '\x3', '\x2', '\x2', '\x2', '\x164C', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x164D', '\x164E', '\a', 'S', '\x2', 
		'\x2', '\x164E', '\x164F', '\x5', '\x40A', '\x206', '\x2', '\x164F', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1650', '\x1651', '\a', '\x199', '\x2', 
		'\x2', '\x1651', '\x1657', '\x5', '\x40A', '\x206', '\x2', '\x1652', '\x1654', 
		'\a', '\x2EE', '\x2', '\x2', '\x1653', '\x1655', '\x5', '\x378', '\x1BD', 
		'\x2', '\x1654', '\x1653', '\x3', '\x2', '\x2', '\x2', '\x1654', '\x1655', 
		'\x3', '\x2', '\x2', '\x2', '\x1655', '\x1656', '\x3', '\x2', '\x2', '\x2', 
		'\x1656', '\x1658', '\a', '\x2EF', '\x2', '\x2', '\x1657', '\x1652', '\x3', 
		'\x2', '\x2', '\x2', '\x1657', '\x1658', '\x3', '\x2', '\x2', '\x2', '\x1658', 
		'\x2AB', '\x3', '\x2', '\x2', '\x2', '\x1659', '\x165A', '\a', '\xCE', 
		'\x2', '\x2', '\x165A', '\x166F', '\x5', '\x40A', '\x206', '\x2', '\x165B', 
		'\x1660', '\a', '\x117', '\x2', '\x2', '\x165C', '\x165E', '\a', '\x2F4', 
		'\x2', '\x2', '\x165D', '\x165C', '\x3', '\x2', '\x2', '\x2', '\x165D', 
		'\x165E', '\x3', '\x2', '\x2', '\x2', '\x165E', '\x165F', '\x3', '\x2', 
		'\x2', '\x2', '\x165F', '\x1661', '\x5', '\x408', '\x205', '\x2', '\x1660', 
		'\x165D', '\x3', '\x2', '\x2', '\x2', '\x1661', '\x1662', '\x3', '\x2', 
		'\x2', '\x2', '\x1662', '\x1660', '\x3', '\x2', '\x2', '\x2', '\x1662', 
		'\x1663', '\x3', '\x2', '\x2', '\x2', '\x1663', '\x1670', '\x3', '\x2', 
		'\x2', '\x2', '\x1664', '\x1665', '\a', '>', '\x2', '\x2', '\x1665', '\x1666', 
		'\a', 'W', '\x2', '\x2', '\x1666', '\x166B', '\a', '\x117', '\x2', '\x2', 
		'\x1667', '\x1669', '\a', '\x2F4', '\x2', '\x2', '\x1668', '\x1667', '\x3', 
		'\x2', '\x2', '\x2', '\x1668', '\x1669', '\x3', '\x2', '\x2', '\x2', '\x1669', 
		'\x166A', '\x3', '\x2', '\x2', '\x2', '\x166A', '\x166C', '\x5', '\x408', 
		'\x205', '\x2', '\x166B', '\x1668', '\x3', '\x2', '\x2', '\x2', '\x166C', 
		'\x166D', '\x3', '\x2', '\x2', '\x2', '\x166D', '\x166B', '\x3', '\x2', 
		'\x2', '\x2', '\x166D', '\x166E', '\x3', '\x2', '\x2', '\x2', '\x166E', 
		'\x1670', '\x3', '\x2', '\x2', '\x2', '\x166F', '\x165B', '\x3', '\x2', 
		'\x2', '\x2', '\x166F', '\x1664', '\x3', '\x2', '\x2', '\x2', '\x1670', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\x1671', '\x1672', '\a', '\x199', 
		'\x2', '\x2', '\x1672', '\x1673', '\x5', '\x408', '\x205', '\x2', '\x1673', 
		'\x1676', '\a', '\xDC', '\x2', '\x2', '\x1674', '\x1677', '\x5', '\x2C0', 
		'\x161', '\x2', '\x1675', '\x1677', '\x5', '\x37A', '\x1BE', '\x2', '\x1676', 
		'\x1674', '\x3', '\x2', '\x2', '\x2', '\x1676', '\x1675', '\x3', '\x2', 
		'\x2', '\x2', '\x1677', '\x1679', '\x3', '\x2', '\x2', '\x2', '\x1678', 
		'\x167A', '\x5', '\x3C4', '\x1E3', '\x2', '\x1679', '\x1678', '\x3', '\x2', 
		'\x2', '\x2', '\x1679', '\x167A', '\x3', '\x2', '\x2', '\x2', '\x167A', 
		'\x2AF', '\x3', '\x2', '\x2', '\x2', '\x167B', '\x1681', '\x5', '\x2B2', 
		'\x15A', '\x2', '\x167C', '\x1681', '\x5', '\x2B4', '\x15B', '\x2', '\x167D', 
		'\x1681', '\x5', '\x2B6', '\x15C', '\x2', '\x167E', '\x1681', '\x5', '\x2BA', 
		'\x15E', '\x2', '\x167F', '\x1681', '\x5', '\x2BC', '\x15F', '\x2', '\x1680', 
		'\x167B', '\x3', '\x2', '\x2', '\x2', '\x1680', '\x167C', '\x3', '\x2', 
		'\x2', '\x2', '\x1680', '\x167D', '\x3', '\x2', '\x2', '\x2', '\x1680', 
		'\x167E', '\x3', '\x2', '\x2', '\x2', '\x1680', '\x167F', '\x3', '\x2', 
		'\x2', '\x2', '\x1681', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x1682', 
		'\x1683', '\a', '\x21F', '\x2', '\x2', '\x1683', '\x1691', '\a', '\x26D', 
		'\x2', '\x2', '\x1684', '\x1685', '\a', '\x1DD', '\x2', '\x2', '\x1685', 
		'\x1692', '\t', 'K', '\x2', '\x2', '\x1686', '\x1687', '\a', '\x11B', 
		'\x2', '\x2', '\x1687', '\x168B', '\a', '\x129', '\x2', '\x2', '\x1688', 
		'\x168C', '\a', '\x21A', '\x2', '\x2', '\x1689', '\x168A', '\a', '\x1DD', 
		'\x2', '\x2', '\x168A', '\x168C', '\a', '\\', '\x2', '\x2', '\x168B', 
		'\x1688', '\x3', '\x2', '\x2', '\x2', '\x168B', '\x1689', '\x3', '\x2', 
		'\x2', '\x2', '\x168C', '\x1692', '\x3', '\x2', '\x2', '\x2', '\x168D', 
		'\x168E', '\a', '\x289', '\x2', '\x2', '\x168E', '\x168F', '\a', '\x201', 
		'\x2', '\x2', '\x168F', '\x1690', '\a', '\x215', '\x2', '\x2', '\x1690', 
		'\x1692', '\x5', '\x478', '\x23D', '\x2', '\x1691', '\x1684', '\x3', '\x2', 
		'\x2', '\x2', '\x1691', '\x1686', '\x3', '\x2', '\x2', '\x2', '\x1691', 
		'\x168D', '\x3', '\x2', '\x2', '\x2', '\x1691', '\x1692', '\x3', '\x2', 
		'\x2', '\x2', '\x1692', '\x1695', '\x3', '\x2', '\x2', '\x2', '\x1693', 
		'\x1694', '\a', '\x164', '\x2', '\x2', '\x1694', '\x1696', '\x5', '\x4A4', 
		'\x253', '\x2', '\x1695', '\x1693', '\x3', '\x2', '\x2', '\x2', '\x1695', 
		'\x1696', '\x3', '\x2', '\x2', '\x2', '\x1696', '\x2B3', '\x3', '\x2', 
		'\x2', '\x2', '\x1697', '\x1698', '\a', '\x21F', '\x2', '\x2', '\x1698', 
		'\x16A2', '\t', 'L', '\x2', '\x2', '\x1699', '\x16A3', '\a', '\xE', '\x2', 
		'\x2', '\x169A', '\x169C', '\a', '\x2F4', '\x2', '\x2', '\x169B', '\x169A', 
		'\x3', '\x2', '\x2', '\x2', '\x169B', '\x169C', '\x3', '\x2', '\x2', '\x2', 
		'\x169C', '\x169D', '\x3', '\x2', '\x2', '\x2', '\x169D', '\x169F', '\x5', 
		'\x406', '\x204', '\x2', '\x169E', '\x169B', '\x3', '\x2', '\x2', '\x2', 
		'\x169F', '\x16A0', '\x3', '\x2', '\x2', '\x2', '\x16A0', '\x169E', '\x3', 
		'\x2', '\x2', '\x2', '\x16A0', '\x16A1', '\x3', '\x2', '\x2', '\x2', '\x16A1', 
		'\x16A3', '\x3', '\x2', '\x2', '\x2', '\x16A2', '\x1699', '\x3', '\x2', 
		'\x2', '\x2', '\x16A2', '\x169E', '\x3', '\x2', '\x2', '\x2', '\x16A3', 
		'\x16A4', '\x3', '\x2', '\x2', '\x2', '\x16A4', '\x16A5', '\t', '\x1F', 
		'\x2', '\x2', '\x16A5', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x16A6', 
		'\x16A8', '\a', '[', '\x2', '\x2', '\x16A7', '\x16A9', '\a', '\x2A3', 
		'\x2', '\x2', '\x16A8', '\x16A7', '\x3', '\x2', '\x2', '\x2', '\x16A8', 
		'\x16A9', '\x3', '\x2', '\x2', '\x2', '\x16A9', '\x16B7', '\x3', '\x2', 
		'\x2', '\x2', '\x16AA', '\x16AB', '\a', 'Z', '\x2', '\x2', '\x16AB', '\x16B8', 
		'\x5', '\x37A', '\x1BE', '\x2', '\x16AC', '\x16B5', '\a', '\xDA', '\x2', 
		'\x2', '\x16AD', '\x16AE', '\a', 'o', '\x2', '\x2', '\x16AE', '\x16B6', 
		'\x5', '\x37A', '\x1BE', '\x2', '\x16AF', '\x16B6', '\a', 'n', '\x2', 
		'\x2', '\x16B0', '\x16B3', '\x5', '\x37A', '\x1BE', '\x2', '\x16B1', '\x16B2', 
		'\a', '\x2F4', '\x2', '\x2', '\x16B2', '\x16B4', '\x5', '\x37A', '\x1BE', 
		'\x2', '\x16B3', '\x16B1', '\x3', '\x2', '\x2', '\x2', '\x16B3', '\x16B4', 
		'\x3', '\x2', '\x2', '\x2', '\x16B4', '\x16B6', '\x3', '\x2', '\x2', '\x2', 
		'\x16B5', '\x16AD', '\x3', '\x2', '\x2', '\x2', '\x16B5', '\x16AF', '\x3', 
		'\x2', '\x2', '\x2', '\x16B5', '\x16B0', '\x3', '\x2', '\x2', '\x2', '\x16B6', 
		'\x16B8', '\x3', '\x2', '\x2', '\x2', '\x16B7', '\x16AA', '\x3', '\x2', 
		'\x2', '\x2', '\x16B7', '\x16AC', '\x3', '\x2', '\x2', '\x2', '\x16B7', 
		'\x16B8', '\x3', '\x2', '\x2', '\x2', '\x16B8', '\x16BA', '\x3', '\x2', 
		'\x2', '\x2', '\x16B9', '\x16BB', '\x5', '\x2B8', '\x15D', '\x2', '\x16BA', 
		'\x16B9', '\x3', '\x2', '\x2', '\x2', '\x16BA', '\x16BB', '\x3', '\x2', 
		'\x2', '\x2', '\x16BB', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x16BC', 
		'\x16BE', '\a', '\x2A4', '\x2', '\x2', '\x16BD', '\x16BF', '\t', 'M', 
		'\x2', '\x2', '\x16BE', '\x16BD', '\x3', '\x2', '\x2', '\x2', '\x16BE', 
		'\x16BF', '\x3', '\x2', '\x2', '\x2', '\x16BF', '\x16C1', '\x3', '\x2', 
		'\x2', '\x2', '\x16C0', '\x16C2', '\t', 'N', '\x2', '\x2', '\x16C1', '\x16C0', 
		'\x3', '\x2', '\x2', '\x2', '\x16C1', '\x16C2', '\x3', '\x2', '\x2', '\x2', 
		'\x16C2', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x16C3', '\x16C5', '\a', 
		'\x201', '\x2', '\x2', '\x16C4', '\x16C6', '\a', '\x2A3', '\x2', '\x2', 
		'\x16C5', '\x16C4', '\x3', '\x2', '\x2', '\x2', '\x16C5', '\x16C6', '\x3', 
		'\x2', '\x2', '\x2', '\x16C6', '\x16CE', '\x3', '\x2', '\x2', '\x2', '\x16C7', 
		'\x16C9', '\a', '\x26A', '\x2', '\x2', '\x16C8', '\x16CA', '\a', '\x20A', 
		'\x2', '\x2', '\x16C9', '\x16C8', '\x3', '\x2', '\x2', '\x2', '\x16C9', 
		'\x16CA', '\x3', '\x2', '\x2', '\x2', '\x16CA', '\x16CB', '\x3', '\x2', 
		'\x2', '\x2', '\x16CB', '\x16CF', '\x5', '\x476', '\x23C', '\x2', '\x16CC', 
		'\x16CD', '\a', '\xDA', '\x2', '\x2', '\x16CD', '\x16CF', '\x5', '\x4A4', 
		'\x253', '\x2', '\x16CE', '\x16C7', '\x3', '\x2', '\x2', '\x2', '\x16CE', 
		'\x16CC', '\x3', '\x2', '\x2', '\x2', '\x16CE', '\x16CF', '\x3', '\x2', 
		'\x2', '\x2', '\x16CF', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x16D0', 
		'\x16D1', '\a', '\x20A', '\x2', '\x2', '\x16D1', '\x16D2', '\x5', '\x476', 
		'\x23C', '\x2', '\x16D2', '\x2BD', '\x3', '\x2', '\x2', '\x2', '\x16D3', 
		'\x16D4', '\a', '\xC7', '\x2', '\x2', '\x16D4', '\x16D9', '\a', '\x1C2', 
		'\x2', '\x2', '\x16D5', '\x16D6', '\a', '\x21F', '\x2', '\x2', '\x16D6', 
		'\x16D7', '\a', '\x23A', '\x2', '\x2', '\x16D7', '\x16D8', '\a', '\x302', 
		'\x2', '\x2', '\x16D8', '\x16DA', '\x5', '\x4A4', '\x253', '\x2', '\x16D9', 
		'\x16D5', '\x3', '\x2', '\x2', '\x2', '\x16D9', '\x16DA', '\x3', '\x2', 
		'\x2', '\x2', '\x16DA', '\x16DD', '\x3', '\x2', '\x2', '\x2', '\x16DB', 
		'\x16DC', '\a', '\x117', '\x2', '\x2', '\x16DC', '\x16DE', '\x5', '\x410', 
		'\x209', '\x2', '\x16DD', '\x16DB', '\x3', '\x2', '\x2', '\x2', '\x16DD', 
		'\x16DE', '\x3', '\x2', '\x2', '\x2', '\x16DE', '\x16DF', '\x3', '\x2', 
		'\x2', '\x2', '\x16DF', '\x16E5', '\a', '\xDC', '\x2', '\x2', '\x16E0', 
		'\x16E6', '\x5', '\x2C0', '\x161', '\x2', '\x16E1', '\x16E6', '\x5', '\x334', 
		'\x19B', '\x2', '\x16E2', '\x16E6', '\x5', '\x33A', '\x19E', '\x2', '\x16E3', 
		'\x16E6', '\x5', '\x33C', '\x19F', '\x2', '\x16E4', '\x16E6', '\x5', '\x34E', 
		'\x1A8', '\x2', '\x16E5', '\x16E0', '\x3', '\x2', '\x2', '\x2', '\x16E5', 
		'\x16E1', '\x3', '\x2', '\x2', '\x2', '\x16E5', '\x16E2', '\x3', '\x2', 
		'\x2', '\x2', '\x16E5', '\x16E3', '\x3', '\x2', '\x2', '\x2', '\x16E5', 
		'\x16E4', '\x3', '\x2', '\x2', '\x2', '\x16E6', '\x2BF', '\x3', '\x2', 
		'\x2', '\x2', '\x16E7', '\x16E9', '\x5', '\x2C2', '\x162', '\x2', '\x16E8', 
		'\x16E7', '\x3', '\x2', '\x2', '\x2', '\x16E8', '\x16E9', '\x3', '\x2', 
		'\x2', '\x2', '\x16E9', '\x16EA', '\x3', '\x2', '\x2', '\x2', '\x16EA', 
		'\x16EF', '\x5', '\x16C', '\xB7', '\x2', '\x16EB', '\x16EE', '\x5', '\x32E', 
		'\x198', '\x2', '\x16EC', '\x16EE', '\x5', '\x32A', '\x196', '\x2', '\x16ED', 
		'\x16EB', '\x3', '\x2', '\x2', '\x2', '\x16ED', '\x16EC', '\x3', '\x2', 
		'\x2', '\x2', '\x16EE', '\x16F1', '\x3', '\x2', '\x2', '\x2', '\x16EF', 
		'\x16ED', '\x3', '\x2', '\x2', '\x2', '\x16EF', '\x16F0', '\x3', '\x2', 
		'\x2', '\x2', '\x16F0', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x16F1', 
		'\x16EF', '\x3', '\x2', '\x2', '\x2', '\x16F2', '\x16F7', '\a', '\x2A2', 
		'\x2', '\x2', '\x16F3', '\x16F5', '\a', '\x2F4', '\x2', '\x2', '\x16F4', 
		'\x16F3', '\x3', '\x2', '\x2', '\x2', '\x16F4', '\x16F5', '\x3', '\x2', 
		'\x2', '\x2', '\x16F5', '\x16F6', '\x3', '\x2', '\x2', '\x2', '\x16F6', 
		'\x16F8', '\x5', '\x2C4', '\x163', '\x2', '\x16F7', '\x16F4', '\x3', '\x2', 
		'\x2', '\x2', '\x16F8', '\x16F9', '\x3', '\x2', '\x2', '\x2', '\x16F9', 
		'\x16F7', '\x3', '\x2', '\x2', '\x2', '\x16F9', '\x16FA', '\x3', '\x2', 
		'\x2', '\x2', '\x16FA', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x16FB', 
		'\x16FD', '\x5', '\x480', '\x241', '\x2', '\x16FC', '\x16FE', '\x5', '\x444', 
		'\x223', '\x2', '\x16FD', '\x16FC', '\x3', '\x2', '\x2', '\x2', '\x16FD', 
		'\x16FE', '\x3', '\x2', '\x2', '\x2', '\x16FE', '\x16FF', '\x3', '\x2', 
		'\x2', '\x2', '\x16FF', '\x1700', '\a', '\x19', '\x2', '\x2', '\x1700', 
		'\x1701', '\a', '\x2EE', '\x2', '\x2', '\x1701', '\x1703', '\x5', '\x16C', 
		'\xB7', '\x2', '\x1702', '\x1704', '\x5', '\x32A', '\x196', '\x2', '\x1703', 
		'\x1702', '\x3', '\x2', '\x2', '\x2', '\x1703', '\x1704', '\x3', '\x2', 
		'\x2', '\x2', '\x1704', '\x1705', '\x3', '\x2', '\x2', '\x2', '\x1705', 
		'\x1707', '\a', '\x2EF', '\x2', '\x2', '\x1706', '\x1708', '\x5', '\x2C6', 
		'\x164', '\x2', '\x1707', '\x1706', '\x3', '\x2', '\x2', '\x2', '\x1707', 
		'\x1708', '\x3', '\x2', '\x2', '\x2', '\x1708', '\x170A', '\x3', '\x2', 
		'\x2', '\x2', '\x1709', '\x170B', '\x5', '\x2C8', '\x165', '\x2', '\x170A', 
		'\x1709', '\x3', '\x2', '\x2', '\x2', '\x170A', '\x170B', '\x3', '\x2', 
		'\x2', '\x2', '\x170B', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x170C', 
		'\x170D', '\a', '\x211', '\x2', '\x2', '\x170D', '\x170E', '\t', 'O', 
		'\x2', '\x2', '\x170E', '\x170F', '\a', '\xD1', '\x2', '\x2', '\x170F', 
		'\x1710', '\a', '?', '\x2', '\x2', '\x1710', '\x1712', '\x5', '\x48A', 
		'\x246', '\x2', '\x1711', '\x1713', '\a', '\x1A', '\x2', '\x2', '\x1712', 
		'\x1711', '\x3', '\x2', '\x2', '\x2', '\x1712', '\x1713', '\x3', '\x2', 
		'\x2', '\x2', '\x1713', '\x1715', '\x3', '\x2', '\x2', '\x2', '\x1714', 
		'\x1716', '\a', '\x96', '\x2', '\x2', '\x1715', '\x1714', '\x3', '\x2', 
		'\x2', '\x2', '\x1715', '\x1716', '\x3', '\x2', '\x2', '\x2', '\x1716', 
		'\x1719', '\x3', '\x2', '\x2', '\x2', '\x1717', '\x1718', '\a', '\x18B', 
		'\x2', '\x2', '\x1718', '\x171A', '\a', '\xD1', '\x2', '\x2', '\x1719', 
		'\x1717', '\x3', '\x2', '\x2', '\x2', '\x1719', '\x171A', '\x3', '\x2', 
		'\x2', '\x2', '\x171A', '\x171D', '\x3', '\x2', '\x2', '\x2', '\x171B', 
		'\x171C', '\a', '\x18B', '\x2', '\x2', '\x171C', '\x171E', '\a', '\x124', 
		'\x2', '\x2', '\x171D', '\x171B', '\x3', '\x2', '\x2', '\x2', '\x171D', 
		'\x171E', '\x3', '\x2', '\x2', '\x2', '\x171E', '\x1731', '\x3', '\x2', 
		'\x2', '\x2', '\x171F', '\x1720', '\a', '\x2F4', '\x2', '\x2', '\x1720', 
		'\x1722', '\x5', '\x48A', '\x246', '\x2', '\x1721', '\x1723', '\a', '\x1A', 
		'\x2', '\x2', '\x1722', '\x1721', '\x3', '\x2', '\x2', '\x2', '\x1722', 
		'\x1723', '\x3', '\x2', '\x2', '\x2', '\x1723', '\x1725', '\x3', '\x2', 
		'\x2', '\x2', '\x1724', '\x1726', '\a', '\x96', '\x2', '\x2', '\x1725', 
		'\x1724', '\x3', '\x2', '\x2', '\x2', '\x1725', '\x1726', '\x3', '\x2', 
		'\x2', '\x2', '\x1726', '\x1729', '\x3', '\x2', '\x2', '\x2', '\x1727', 
		'\x1728', '\a', '\x18B', '\x2', '\x2', '\x1728', '\x172A', '\a', '\xD1', 
		'\x2', '\x2', '\x1729', '\x1727', '\x3', '\x2', '\x2', '\x2', '\x1729', 
		'\x172A', '\x3', '\x2', '\x2', '\x2', '\x172A', '\x172D', '\x3', '\x2', 
		'\x2', '\x2', '\x172B', '\x172C', '\a', '\x18B', '\x2', '\x2', '\x172C', 
		'\x172E', '\a', '\x124', '\x2', '\x2', '\x172D', '\x172B', '\x3', '\x2', 
		'\x2', '\x2', '\x172D', '\x172E', '\x3', '\x2', '\x2', '\x2', '\x172E', 
		'\x1730', '\x3', '\x2', '\x2', '\x2', '\x172F', '\x171F', '\x3', '\x2', 
		'\x2', '\x2', '\x1730', '\x1733', '\x3', '\x2', '\x2', '\x2', '\x1731', 
		'\x172F', '\x3', '\x2', '\x2', '\x2', '\x1731', '\x1732', '\x3', '\x2', 
		'\x2', '\x2', '\x1732', '\x1734', '\x3', '\x2', '\x2', '\x2', '\x1733', 
		'\x1731', '\x3', '\x2', '\x2', '\x2', '\x1734', '\x1735', '\a', '\x21F', 
		'\x2', '\x2', '\x1735', '\x1736', '\x5', '\x48A', '\x246', '\x2', '\x1736', 
		'\x2C7', '\x3', '\x2', '\x2', '\x2', '\x1737', '\x1738', '\a', '{', '\x2', 
		'\x2', '\x1738', '\x1739', '\x5', '\x442', '\x222', '\x2', '\x1739', '\x173A', 
		'\a', '\x21F', '\x2', '\x2', '\x173A', '\x173B', '\x5', '\x48A', '\x246', 
		'\x2', '\x173B', '\x173C', '\a', '\x26A', '\x2', '\x2', '\x173C', '\x173D', 
		'\x5', '\x37A', '\x1BE', '\x2', '\x173D', '\x173E', '\a', '\x8E', '\x2', 
		'\x2', '\x173E', '\x173F', '\x5', '\x37A', '\x1BE', '\x2', '\x173F', '\x2C9', 
		'\x3', '\x2', '\x2', '\x2', '\x1740', '\x1746', '\x5', '\x2CE', '\x168', 
		'\x2', '\x1741', '\x1742', '\a', '\x2EE', '\x2', '\x2', '\x1742', '\x1743', 
		'\x5', '\x16C', '\xB7', '\x2', '\x1743', '\x1744', '\a', '\x2EF', '\x2', 
		'\x2', '\x1744', '\x1746', '\x3', '\x2', '\x2', '\x2', '\x1745', '\x1740', 
		'\x3', '\x2', '\x2', '\x2', '\x1745', '\x1741', '\x3', '\x2', '\x2', '\x2', 
		'\x1746', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x1747', '\x1749', '\a', 
		'\x27B', '\x2', '\x2', '\x1748', '\x174A', '\a', '\xE', '\x2', '\x2', 
		'\x1749', '\x1748', '\x3', '\x2', '\x2', '\x2', '\x1749', '\x174A', '\x3', 
		'\x2', '\x2', '\x2', '\x174A', '\x174E', '\x3', '\x2', '\x2', '\x2', '\x174B', 
		'\x174E', '\a', '\x113', '\x2', '\x2', '\x174C', '\x174E', '\a', '\x158', 
		'\x2', '\x2', '\x174D', '\x1747', '\x3', '\x2', '\x2', '\x2', '\x174D', 
		'\x174B', '\x3', '\x2', '\x2', '\x2', '\x174D', '\x174C', '\x3', '\x2', 
		'\x2', '\x2', '\x174E', '\x174F', '\x3', '\x2', '\x2', '\x2', '\x174F', 
		'\x1750', '\x5', '\x2CA', '\x166', '\x2', '\x1750', '\x2CD', '\x3', '\x2', 
		'\x2', '\x2', '\x1751', '\x1753', '\a', '\x216', '\x2', '\x2', '\x1752', 
		'\x1754', '\t', 'P', '\x2', '\x2', '\x1753', '\x1752', '\x3', '\x2', '\x2', 
		'\x2', '\x1753', '\x1754', '\x3', '\x2', '\x2', '\x2', '\x1754', '\x175E', 
		'\x3', '\x2', '\x2', '\x2', '\x1755', '\x175F', '\a', '\x2F1', '\x2', 
		'\x2', '\x1756', '\x1758', '\a', '\x2F4', '\x2', '\x2', '\x1757', '\x1756', 
		'\x3', '\x2', '\x2', '\x2', '\x1757', '\x1758', '\x3', '\x2', '\x2', '\x2', 
		'\x1758', '\x1759', '\x3', '\x2', '\x2', '\x2', '\x1759', '\x175B', '\x5', 
		'\x2D0', '\x169', '\x2', '\x175A', '\x1757', '\x3', '\x2', '\x2', '\x2', 
		'\x175B', '\x175C', '\x3', '\x2', '\x2', '\x2', '\x175C', '\x175A', '\x3', 
		'\x2', '\x2', '\x2', '\x175C', '\x175D', '\x3', '\x2', '\x2', '\x2', '\x175D', 
		'\x175F', '\x3', '\x2', '\x2', '\x2', '\x175E', '\x1755', '\x3', '\x2', 
		'\x2', '\x2', '\x175E', '\x175A', '\x3', '\x2', '\x2', '\x2', '\x175F', 
		'\x1761', '\x3', '\x2', '\x2', '\x2', '\x1760', '\x1762', '\x5', '\x3FA', 
		'\x1FE', '\x2', '\x1761', '\x1760', '\x3', '\x2', '\x2', '\x2', '\x1761', 
		'\x1762', '\x3', '\x2', '\x2', '\x2', '\x1762', '\x1763', '\x3', '\x2', 
		'\x2', '\x2', '\x1763', '\x1765', '\x5', '\x2D2', '\x16A', '\x2', '\x1764', 
		'\x1766', '\x5', '\x3F8', '\x1FD', '\x2', '\x1765', '\x1764', '\x3', '\x2', 
		'\x2', '\x2', '\x1765', '\x1766', '\x3', '\x2', '\x2', '\x2', '\x1766', 
		'\x1768', '\x3', '\x2', '\x2', '\x2', '\x1767', '\x1769', '\x5', '\x2FC', 
		'\x17F', '\x2', '\x1768', '\x1767', '\x3', '\x2', '\x2', '\x2', '\x1768', 
		'\x1769', '\x3', '\x2', '\x2', '\x2', '\x1769', '\x176B', '\x3', '\x2', 
		'\x2', '\x2', '\x176A', '\x176C', '\x5', '\x300', '\x181', '\x2', '\x176B', 
		'\x176A', '\x3', '\x2', '\x2', '\x2', '\x176B', '\x176C', '\x3', '\x2', 
		'\x2', '\x2', '\x176C', '\x176E', '\x3', '\x2', '\x2', '\x2', '\x176D', 
		'\x176F', '\x5', '\x30C', '\x187', '\x2', '\x176E', '\x176D', '\x3', '\x2', 
		'\x2', '\x2', '\x176E', '\x176F', '\x3', '\x2', '\x2', '\x2', '\x176F', 
		'\x2CF', '\x3', '\x2', '\x2', '\x2', '\x1770', '\x1772', '\x5', '\x2D4', 
		'\x16B', '\x2', '\x1771', '\x1773', '\x5', '\x3F4', '\x1FB', '\x2', '\x1772', 
		'\x1771', '\x3', '\x2', '\x2', '\x2', '\x1772', '\x1773', '\x3', '\x2', 
		'\x2', '\x2', '\x1773', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x1774', 
		'\x1775', '\a', '\xE0', '\x2', '\x2', '\x1775', '\x1776', '\x5', '\x2D6', 
		'\x16C', '\x2', '\x1776', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x1777', 
		'\x1778', '\x5', '\x410', '\x209', '\x2', '\x1778', '\x1779', '\a', '\x2E7', 
		'\x2', '\x2', '\x1779', '\x177A', '\a', '\x2F1', '\x2', '\x2', '\x177A', 
		'\x1782', '\x3', '\x2', '\x2', '\x2', '\x177B', '\x177C', '\x5', '\x498', 
		'\x24D', '\x2', '\x177C', '\x177D', '\a', '\x2E7', '\x2', '\x2', '\x177D', 
		'\x177F', '\x3', '\x2', '\x2', '\x2', '\x177E', '\x177B', '\x3', '\x2', 
		'\x2', '\x2', '\x177E', '\x177F', '\x3', '\x2', '\x2', '\x2', '\x177F', 
		'\x1780', '\x3', '\x2', '\x2', '\x2', '\x1780', '\x1782', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1781', '\x1777', '\x3', '\x2', '\x2', '\x2', '\x1781', 
		'\x177E', '\x3', '\x2', '\x2', '\x2', '\x1782', '\x2D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1783', '\x1785', '\a', '\x2F4', '\x2', '\x2', '\x1784', 
		'\x1783', '\x3', '\x2', '\x2', '\x2', '\x1784', '\x1785', '\x3', '\x2', 
		'\x2', '\x2', '\x1785', '\x1786', '\x3', '\x2', '\x2', '\x2', '\x1786', 
		'\x1788', '\x5', '\x2D8', '\x16D', '\x2', '\x1787', '\x1784', '\x3', '\x2', 
		'\x2', '\x2', '\x1788', '\x1789', '\x3', '\x2', '\x2', '\x2', '\x1789', 
		'\x1787', '\x3', '\x2', '\x2', '\x2', '\x1789', '\x178A', '\x3', '\x2', 
		'\x2', '\x2', '\x178A', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x178B', 
		'\x178F', '\x5', '\x2DA', '\x16E', '\x2', '\x178C', '\x178E', '\x5', '\x2DE', 
		'\x170', '\x2', '\x178D', '\x178C', '\x3', '\x2', '\x2', '\x2', '\x178E', 
		'\x1791', '\x3', '\x2', '\x2', '\x2', '\x178F', '\x178D', '\x3', '\x2', 
		'\x2', '\x2', '\x178F', '\x1790', '\x3', '\x2', '\x2', '\x2', '\x1790', 
		'\x1794', '\x3', '\x2', '\x2', '\x2', '\x1791', '\x178F', '\x3', '\x2', 
		'\x2', '\x2', '\x1792', '\x1795', '\x5', '\x2EA', '\x176', '\x2', '\x1793', 
		'\x1795', '\x5', '\x2F6', '\x17C', '\x2', '\x1794', '\x1792', '\x3', '\x2', 
		'\x2', '\x2', '\x1794', '\x1793', '\x3', '\x2', '\x2', '\x2', '\x1794', 
		'\x1795', '\x3', '\x2', '\x2', '\x2', '\x1795', '\x2D9', '\x3', '\x2', 
		'\x2', '\x2', '\x1796', '\x179A', '\x5', '\x2DC', '\x16F', '\x2', '\x1797', 
		'\x1799', '\x5', '\x2E8', '\x175', '\x2', '\x1798', '\x1797', '\x3', '\x2', 
		'\x2', '\x2', '\x1799', '\x179C', '\x3', '\x2', '\x2', '\x2', '\x179A', 
		'\x1798', '\x3', '\x2', '\x2', '\x2', '\x179A', '\x179B', '\x3', '\x2', 
		'\x2', '\x2', '\x179B', '\x179E', '\x3', '\x2', '\x2', '\x2', '\x179C', 
		'\x179A', '\x3', '\x2', '\x2', '\x2', '\x179D', '\x179F', '\x5', '\x3F6', 
		'\x1FC', '\x2', '\x179E', '\x179D', '\x3', '\x2', '\x2', '\x2', '\x179E', 
		'\x179F', '\x3', '\x2', '\x2', '\x2', '\x179F', '\x2DB', '\x3', '\x2', 
		'\x2', '\x2', '\x17A0', '\x17A3', '\x5', '\x36C', '\x1B7', '\x2', '\x17A1', 
		'\x17A4', '\x5', '\x2EA', '\x176', '\x2', '\x17A2', '\x17A4', '\x5', '\x2F6', 
		'\x17C', '\x2', '\x17A3', '\x17A1', '\x3', '\x2', '\x2', '\x2', '\x17A3', 
		'\x17A2', '\x3', '\x2', '\x2', '\x2', '\x17A3', '\x17A4', '\x3', '\x2', 
		'\x2', '\x2', '\x17A4', '\x17B8', '\x3', '\x2', '\x2', '\x2', '\x17A5', 
		'\x17A6', '\a', '\x2EE', '\x2', '\x2', '\x17A6', '\x17AA', '\x5', '\x2D8', 
		'\x16D', '\x2', '\x17A7', '\x17A9', '\x5', '\x2CC', '\x167', '\x2', '\x17A8', 
		'\x17A7', '\x3', '\x2', '\x2', '\x2', '\x17A9', '\x17AC', '\x3', '\x2', 
		'\x2', '\x2', '\x17AA', '\x17A8', '\x3', '\x2', '\x2', '\x2', '\x17AA', 
		'\x17AB', '\x3', '\x2', '\x2', '\x2', '\x17AB', '\x17AD', '\x3', '\x2', 
		'\x2', '\x2', '\x17AC', '\x17AA', '\x3', '\x2', '\x2', '\x2', '\x17AD', 
		'\x17B0', '\a', '\x2EF', '\x2', '\x2', '\x17AE', '\x17B1', '\x5', '\x2EA', 
		'\x176', '\x2', '\x17AF', '\x17B1', '\x5', '\x2F6', '\x17C', '\x2', '\x17B0', 
		'\x17AE', '\x3', '\x2', '\x2', '\x2', '\x17B0', '\x17AF', '\x3', '\x2', 
		'\x2', '\x2', '\x17B0', '\x17B1', '\x3', '\x2', '\x2', '\x2', '\x17B1', 
		'\x17B8', '\x3', '\x2', '\x2', '\x2', '\x17B2', '\x17B3', '\a', '\x197', 
		'\x2', '\x2', '\x17B3', '\x17B4', '\a', '\x2EE', '\x2', '\x2', '\x17B4', 
		'\x17B5', '\x5', '\x36C', '\x1B7', '\x2', '\x17B5', '\x17B6', '\a', '\x2EF', 
		'\x2', '\x2', '\x17B6', '\x17B8', '\x3', '\x2', '\x2', '\x2', '\x17B7', 
		'\x17A0', '\x3', '\x2', '\x2', '\x2', '\x17B7', '\x17A5', '\x3', '\x2', 
		'\x2', '\x2', '\x17B7', '\x17B2', '\x3', '\x2', '\x2', '\x2', '\x17B8', 
		'\x2DD', '\x3', '\x2', '\x2', '\x2', '\x17B9', '\x17BB', '\x5', '\x2E6', 
		'\x174', '\x2', '\x17BA', '\x17B9', '\x3', '\x2', '\x2', '\x2', '\x17BA', 
		'\x17BB', '\x3', '\x2', '\x2', '\x2', '\x17BB', '\x17BD', '\x3', '\x2', 
		'\x2', '\x2', '\x17BC', '\x17BE', '\t', 'Q', '\x2', '\x2', '\x17BD', '\x17BC', 
		'\x3', '\x2', '\x2', '\x2', '\x17BD', '\x17BE', '\x3', '\x2', '\x2', '\x2', 
		'\x17BE', '\x17C1', '\x3', '\x2', '\x2', '\x2', '\x17BF', '\x17C2', '\a', 
		'\x10D', '\x2', '\x2', '\x17C0', '\x17C2', '\x5', '\x2E4', '\x173', '\x2', 
		'\x17C1', '\x17BF', '\x3', '\x2', '\x2', '\x2', '\x17C1', '\x17C0', '\x3', 
		'\x2', '\x2', '\x2', '\x17C1', '\x17C2', '\x3', '\x2', '\x2', '\x2', '\x17C2', 
		'\x17C3', '\x3', '\x2', '\x2', '\x2', '\x17C3', '\x17C4', '\a', '\x11F', 
		'\x2', '\x2', '\x17C4', '\x17C6', '\x5', '\x2DA', '\x16E', '\x2', '\x17C5', 
		'\x17C7', '\x5', '\x2E6', '\x174', '\x2', '\x17C6', '\x17C5', '\x3', '\x2', 
		'\x2', '\x2', '\x17C6', '\x17C7', '\x3', '\x2', '\x2', '\x2', '\x17C7', 
		'\x17CC', '\x3', '\x2', '\x2', '\x2', '\x17C8', '\x17CB', '\x5', '\x2E0', 
		'\x171', '\x2', '\x17C9', '\x17CB', '\x5', '\x2E2', '\x172', '\x2', '\x17CA', 
		'\x17C8', '\x3', '\x2', '\x2', '\x2', '\x17CA', '\x17C9', '\x3', '\x2', 
		'\x2', '\x2', '\x17CB', '\x17CE', '\x3', '\x2', '\x2', '\x2', '\x17CC', 
		'\x17CA', '\x3', '\x2', '\x2', '\x2', '\x17CC', '\x17CD', '\x3', '\x2', 
		'\x2', '\x2', '\x17CD', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x17CE', 
		'\x17CC', '\x3', '\x2', '\x2', '\x2', '\x17CF', '\x17D0', '\a', '\x198', 
		'\x2', '\x2', '\x17D0', '\x17D1', '\x5', '\x376', '\x1BC', '\x2', '\x17D1', 
		'\x2E1', '\x3', '\x2', '\x2', '\x2', '\x17D2', '\x17D3', '\a', '\x28A', 
		'\x2', '\x2', '\x17D3', '\x17D4', '\x5', '\x444', '\x223', '\x2', '\x17D4', 
		'\x2E3', '\x3', '\x2', '\x2', '\x2', '\x17D5', '\x17D7', '\t', 'R', '\x2', 
		'\x2', '\x17D6', '\x17D8', '\a', '\x1A3', '\x2', '\x2', '\x17D7', '\x17D6', 
		'\x3', '\x2', '\x2', '\x2', '\x17D7', '\x17D8', '\x3', '\x2', '\x2', '\x2', 
		'\x17D8', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x17D9', '\x17DA', '\a', 
		'\x1AF', '\x2', '\x2', '\x17DA', '\x17E2', '\a', '?', '\x2', '\x2', '\x17DB', 
		'\x17DE', '\a', '\x2EE', '\x2', '\x2', '\x17DC', '\x17DF', '\x5', '\x16C', 
		'\xB7', '\x2', '\x17DD', '\x17DF', '\x5', '\x378', '\x1BD', '\x2', '\x17DE', 
		'\x17DC', '\x3', '\x2', '\x2', '\x2', '\x17DE', '\x17DD', '\x3', '\x2', 
		'\x2', '\x2', '\x17DE', '\x17DF', '\x3', '\x2', '\x2', '\x2', '\x17DF', 
		'\x17E0', '\x3', '\x2', '\x2', '\x2', '\x17E0', '\x17E3', '\a', '\x2EF', 
		'\x2', '\x2', '\x17E1', '\x17E3', '\x5', '\x378', '\x1BD', '\x2', '\x17E2', 
		'\x17DB', '\x3', '\x2', '\x2', '\x2', '\x17E2', '\x17E1', '\x3', '\x2', 
		'\x2', '\x2', '\x17E3', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x17E4', 
		'\x17E5', '\a', '\x294', '\x2', '\x2', '\x17E5', '\x17E6', '\a', '.', 
		'\x2', '\x2', '\x17E6', '\x17E7', '\t', 'S', '\x2', '\x2', '\x17E7', '\x17ED', 
		'\x5', '\x37A', '\x1BE', '\x2', '\x17E8', '\x17E9', '\a', '\x19', '\x2', 
		'\x2', '\x17E9', '\x17EA', '\a', '\x192', '\x2', '\x2', '\x17EA', '\x17EB', 
		'\t', 'T', '\x2', '\x2', '\x17EB', '\x17ED', '\x5', '\x37A', '\x1BE', 
		'\x2', '\x17EC', '\x17E4', '\x3', '\x2', '\x2', '\x2', '\x17EC', '\x17E8', 
		'\x3', '\x2', '\x2', '\x2', '\x17ED', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\x17EE', '\x17F0', '\a', '\x1C1', '\x2', '\x2', '\x17EF', '\x17F1', '\a', 
		'\x2B5', '\x2', '\x2', '\x17F0', '\x17EF', '\x3', '\x2', '\x2', '\x2', 
		'\x17F0', '\x17F1', '\x3', '\x2', '\x2', '\x2', '\x17F1', '\x17F2', '\x3', 
		'\x2', '\x2', '\x2', '\x17F2', '\x17F7', '\a', '\x2EE', '\x2', '\x2', 
		'\x17F3', '\x17F5', '\a', '\x2F4', '\x2', '\x2', '\x17F4', '\x17F3', '\x3', 
		'\x2', '\x2', '\x2', '\x17F4', '\x17F5', '\x3', '\x2', '\x2', '\x2', '\x17F5', 
		'\x17F6', '\x3', '\x2', '\x2', '\x2', '\x17F6', '\x17F8', '\x5', '\x2EC', 
		'\x177', '\x2', '\x17F7', '\x17F4', '\x3', '\x2', '\x2', '\x2', '\x17F8', 
		'\x17F9', '\x3', '\x2', '\x2', '\x2', '\x17F9', '\x17F7', '\x3', '\x2', 
		'\x2', '\x2', '\x17F9', '\x17FA', '\x3', '\x2', '\x2', '\x2', '\x17FA', 
		'\x17FB', '\x3', '\x2', '\x2', '\x2', '\x17FB', '\x17FC', '\x5', '\x2EE', 
		'\x178', '\x2', '\x17FC', '\x17FD', '\x5', '\x2F0', '\x179', '\x2', '\x17FD', 
		'\x17FE', '\a', '\x2EF', '\x2', '\x2', '\x17FE', '\x2EB', '\x3', '\x2', 
		'\x2', '\x2', '\x17FF', '\x1800', '\x5', '\x486', '\x244', '\x2', '\x1800', 
		'\x1801', '\a', '\x2EE', '\x2', '\x2', '\x1801', '\x1802', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1802', '\x1804', '\a', '\x2EF', '\x2', '\x2', '\x1803', 
		'\x1805', '\x5', '\x3F4', '\x1FB', '\x2', '\x1804', '\x1803', '\x3', '\x2', 
		'\x2', '\x2', '\x1804', '\x1805', '\x3', '\x2', '\x2', '\x2', '\x1805', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x1806', '\x1809', '\a', '\xDC', 
		'\x2', '\x2', '\x1807', '\x180A', '\x5', '\x48A', '\x246', '\x2', '\x1808', 
		'\x180A', '\x5', '\x444', '\x223', '\x2', '\x1809', '\x1807', '\x3', '\x2', 
		'\x2', '\x2', '\x1809', '\x1808', '\x3', '\x2', '\x2', '\x2', '\x180A', 
		'\x2EF', '\x3', '\x2', '\x2', '\x2', '\x180B', '\x180C', '\a', '\x107', 
		'\x2', '\x2', '\x180C', '\x181E', '\a', '\x2EE', '\x2', '\x2', '\x180D', 
		'\x181F', '\x5', '\x16C', '\xB7', '\x2', '\x180E', '\x1810', '\a', '\x2F4', 
		'\x2', '\x2', '\x180F', '\x180E', '\x3', '\x2', '\x2', '\x2', '\x180F', 
		'\x1810', '\x3', '\x2', '\x2', '\x2', '\x1810', '\x1811', '\x3', '\x2', 
		'\x2', '\x2', '\x1811', '\x1813', '\a', '\x14', '\x2', '\x2', '\x1812', 
		'\x180F', '\x3', '\x2', '\x2', '\x2', '\x1813', '\x1814', '\x3', '\x2', 
		'\x2', '\x2', '\x1814', '\x1812', '\x3', '\x2', '\x2', '\x2', '\x1814', 
		'\x1815', '\x3', '\x2', '\x2', '\x2', '\x1815', '\x181F', '\x3', '\x2', 
		'\x2', '\x2', '\x1816', '\x1818', '\a', '\x2F4', '\x2', '\x2', '\x1817', 
		'\x1816', '\x3', '\x2', '\x2', '\x2', '\x1817', '\x1818', '\x3', '\x2', 
		'\x2', '\x2', '\x1818', '\x1819', '\x3', '\x2', '\x2', '\x2', '\x1819', 
		'\x181B', '\x5', '\x2F2', '\x17A', '\x2', '\x181A', '\x1817', '\x3', '\x2', 
		'\x2', '\x2', '\x181B', '\x181C', '\x3', '\x2', '\x2', '\x2', '\x181C', 
		'\x181A', '\x3', '\x2', '\x2', '\x2', '\x181C', '\x181D', '\x3', '\x2', 
		'\x2', '\x2', '\x181D', '\x181F', '\x3', '\x2', '\x2', '\x2', '\x181E', 
		'\x180D', '\x3', '\x2', '\x2', '\x2', '\x181E', '\x1812', '\x3', '\x2', 
		'\x2', '\x2', '\x181E', '\x181A', '\x3', '\x2', '\x2', '\x2', '\x181F', 
		'\x1820', '\x3', '\x2', '\x2', '\x2', '\x1820', '\x1821', '\a', '\x2EF', 
		'\x2', '\x2', '\x1821', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x1822', 
		'\x1824', '\x5', '\x2F4', '\x17B', '\x2', '\x1823', '\x1825', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x1824', '\x1823', '\x3', '\x2', '\x2', '\x2', '\x1824', 
		'\x1825', '\x3', '\x2', '\x2', '\x2', '\x1825', '\x2F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1826', '\x182D', '\x5', '\x37A', '\x1BE', '\x2', '\x1827', 
		'\x1829', '\a', '\x2EE', '\x2', '\x2', '\x1828', '\x182A', '\x5', '\x378', 
		'\x1BD', '\x2', '\x1829', '\x1828', '\x3', '\x2', '\x2', '\x2', '\x1829', 
		'\x182A', '\x3', '\x2', '\x2', '\x2', '\x182A', '\x182B', '\x3', '\x2', 
		'\x2', '\x2', '\x182B', '\x182D', '\a', '\x2EF', '\x2', '\x2', '\x182C', 
		'\x1826', '\x3', '\x2', '\x2', '\x2', '\x182C', '\x1827', '\x3', '\x2', 
		'\x2', '\x2', '\x182D', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x182E', 
		'\x1831', '\a', '\x27F', '\x2', '\x2', '\x182F', '\x1830', '\t', 'U', 
		'\x2', '\x2', '\x1830', '\x1832', '\a', '\x18B', '\x2', '\x2', '\x1831', 
		'\x182F', '\x3', '\x2', '\x2', '\x2', '\x1831', '\x1832', '\x3', '\x2', 
		'\x2', '\x2', '\x1832', '\x1833', '\x3', '\x2', '\x2', '\x2', '\x1833', 
		'\x1836', '\a', '\x2EE', '\x2', '\x2', '\x1834', '\x1837', '\x5', '\x48A', 
		'\x246', '\x2', '\x1835', '\x1837', '\x5', '\x444', '\x223', '\x2', '\x1836', 
		'\x1834', '\x3', '\x2', '\x2', '\x2', '\x1836', '\x1835', '\x3', '\x2', 
		'\x2', '\x2', '\x1837', '\x1838', '\x3', '\x2', '\x2', '\x2', '\x1838', 
		'\x1839', '\x5', '\x2EE', '\x178', '\x2', '\x1839', '\x183A', '\x5', '\x2F8', 
		'\x17D', '\x2', '\x183A', '\x183B', '\a', '\x2EF', '\x2', '\x2', '\x183B', 
		'\x2F7', '\x3', '\x2', '\x2', '\x2', '\x183C', '\x183D', '\a', '\x107', 
		'\x2', '\x2', '\x183D', '\x1842', '\a', '\x2EE', '\x2', '\x2', '\x183E', 
		'\x1840', '\a', '\x2F4', '\x2', '\x2', '\x183F', '\x183E', '\x3', '\x2', 
		'\x2', '\x2', '\x183F', '\x1840', '\x3', '\x2', '\x2', '\x2', '\x1840', 
		'\x1841', '\x3', '\x2', '\x2', '\x2', '\x1841', '\x1843', '\x5', '\x2FA', 
		'\x17E', '\x2', '\x1842', '\x183F', '\x3', '\x2', '\x2', '\x2', '\x1843', 
		'\x1844', '\x3', '\x2', '\x2', '\x2', '\x1844', '\x1842', '\x3', '\x2', 
		'\x2', '\x2', '\x1844', '\x1845', '\x3', '\x2', '\x2', '\x2', '\x1845', 
		'\x1846', '\x3', '\x2', '\x2', '\x2', '\x1846', '\x1847', '\a', '\x2EF', 
		'\x2', '\x2', '\x1847', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x1848', 
		'\x184B', '\x5', '\x48A', '\x246', '\x2', '\x1849', '\x184B', '\x5', '\x444', 
		'\x223', '\x2', '\x184A', '\x1848', '\x3', '\x2', '\x2', '\x2', '\x184A', 
		'\x1849', '\x3', '\x2', '\x2', '\x2', '\x184B', '\x185B', '\x3', '\x2', 
		'\x2', '\x2', '\x184C', '\x1859', '\a', '\x19', '\x2', '\x2', '\x184D', 
		'\x185A', '\x5', '\x466', '\x234', '\x2', '\x184E', '\x1853', '\a', '\x2EE', 
		'\x2', '\x2', '\x184F', '\x1851', '\a', '\x2F4', '\x2', '\x2', '\x1850', 
		'\x184F', '\x3', '\x2', '\x2', '\x2', '\x1850', '\x1851', '\x3', '\x2', 
		'\x2', '\x2', '\x1851', '\x1852', '\x3', '\x2', '\x2', '\x2', '\x1852', 
		'\x1854', '\x5', '\x466', '\x234', '\x2', '\x1853', '\x1850', '\x3', '\x2', 
		'\x2', '\x2', '\x1854', '\x1855', '\x3', '\x2', '\x2', '\x2', '\x1855', 
		'\x1853', '\x3', '\x2', '\x2', '\x2', '\x1855', '\x1856', '\x3', '\x2', 
		'\x2', '\x2', '\x1856', '\x1857', '\x3', '\x2', '\x2', '\x2', '\x1857', 
		'\x1858', '\a', '\x2EF', '\x2', '\x2', '\x1858', '\x185A', '\x3', '\x2', 
		'\x2', '\x2', '\x1859', '\x184D', '\x3', '\x2', '\x2', '\x2', '\x1859', 
		'\x184E', '\x3', '\x2', '\x2', '\x2', '\x185A', '\x185C', '\x3', '\x2', 
		'\x2', '\x2', '\x185B', '\x184C', '\x3', '\x2', '\x2', '\x2', '\x185B', 
		'\x185C', '\x3', '\x2', '\x2', '\x2', '\x185C', '\x2FB', '\x3', '\x2', 
		'\x2', '\x2', '\x185D', '\x185E', '\a', '\x63', '\x2', '\x2', '\x185E', 
		'\x1860', '\a', '?', '\x2', '\x2', '\x185F', '\x1861', '\a', '\x173', 
		'\x2', '\x2', '\x1860', '\x185F', '\x3', '\x2', '\x2', '\x2', '\x1860', 
		'\x1861', '\x3', '\x2', '\x2', '\x2', '\x1861', '\x1862', '\x3', '\x2', 
		'\x2', '\x2', '\x1862', '\x1864', '\x5', '\x376', '\x1BC', '\x2', '\x1863', 
		'\x1865', '\x5', '\x2FE', '\x180', '\x2', '\x1864', '\x1863', '\x3', '\x2', 
		'\x2', '\x2', '\x1864', '\x1865', '\x3', '\x2', '\x2', '\x2', '\x1865', 
		'\x186F', '\x3', '\x2', '\x2', '\x2', '\x1866', '\x1867', '\x5', '\x2FE', 
		'\x180', '\x2', '\x1867', '\x1868', '\a', '\x63', '\x2', '\x2', '\x1868', 
		'\x186A', '\a', '?', '\x2', '\x2', '\x1869', '\x186B', '\a', '\x173', 
		'\x2', '\x2', '\x186A', '\x1869', '\x3', '\x2', '\x2', '\x2', '\x186A', 
		'\x186B', '\x3', '\x2', '\x2', '\x2', '\x186B', '\x186C', '\x3', '\x2', 
		'\x2', '\x2', '\x186C', '\x186D', '\x5', '\x376', '\x1BC', '\x2', '\x186D', 
		'\x186F', '\x3', '\x2', '\x2', '\x2', '\x186E', '\x185D', '\x3', '\x2', 
		'\x2', '\x2', '\x186E', '\x1866', '\x3', '\x2', '\x2', '\x2', '\x186F', 
		'\x2FD', '\x3', '\x2', '\x2', '\x2', '\x1870', '\x1871', '\a', '\x238', 
		'\x2', '\x2', '\x1871', '\x1872', '\a', '\x2A2', '\x2', '\x2', '\x1872', 
		'\x1873', '\x5', '\x376', '\x1BC', '\x2', '\x1873', '\x2FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1874', '\x1875', '\a', '\xE8', '\x2', '\x2', '\x1875', 
		'\x187A', '\a', '?', '\x2', '\x2', '\x1876', '\x1878', '\a', '\x2F4', 
		'\x2', '\x2', '\x1877', '\x1876', '\x3', '\x2', '\x2', '\x2', '\x1877', 
		'\x1878', '\x3', '\x2', '\x2', '\x2', '\x1878', '\x1879', '\x3', '\x2', 
		'\x2', '\x2', '\x1879', '\x187B', '\x5', '\x302', '\x182', '\x2', '\x187A', 
		'\x1877', '\x3', '\x2', '\x2', '\x2', '\x187B', '\x187C', '\x3', '\x2', 
		'\x2', '\x2', '\x187C', '\x187A', '\x3', '\x2', '\x2', '\x2', '\x187C', 
		'\x187D', '\x3', '\x2', '\x2', '\x2', '\x187D', '\x187F', '\x3', '\x2', 
		'\x2', '\x2', '\x187E', '\x1880', '\x5', '\x30A', '\x186', '\x2', '\x187F', 
		'\x187E', '\x3', '\x2', '\x2', '\x2', '\x187F', '\x1880', '\x3', '\x2', 
		'\x2', '\x2', '\x1880', '\x188F', '\x3', '\x2', '\x2', '\x2', '\x1881', 
		'\x188C', '\x5', '\x30A', '\x186', '\x2', '\x1882', '\x1883', '\a', '\xE8', 
		'\x2', '\x2', '\x1883', '\x1888', '\a', '?', '\x2', '\x2', '\x1884', '\x1886', 
		'\a', '\x2F4', '\x2', '\x2', '\x1885', '\x1884', '\x3', '\x2', '\x2', 
		'\x2', '\x1885', '\x1886', '\x3', '\x2', '\x2', '\x2', '\x1886', '\x1887', 
		'\x3', '\x2', '\x2', '\x2', '\x1887', '\x1889', '\x5', '\x302', '\x182', 
		'\x2', '\x1888', '\x1885', '\x3', '\x2', '\x2', '\x2', '\x1889', '\x188A', 
		'\x3', '\x2', '\x2', '\x2', '\x188A', '\x1888', '\x3', '\x2', '\x2', '\x2', 
		'\x188A', '\x188B', '\x3', '\x2', '\x2', '\x2', '\x188B', '\x188D', '\x3', 
		'\x2', '\x2', '\x2', '\x188C', '\x1882', '\x3', '\x2', '\x2', '\x2', '\x188C', 
		'\x188D', '\x3', '\x2', '\x2', '\x2', '\x188D', '\x188F', '\x3', '\x2', 
		'\x2', '\x2', '\x188E', '\x1874', '\x3', '\x2', '\x2', '\x2', '\x188E', 
		'\x1881', '\x3', '\x2', '\x2', '\x2', '\x188F', '\x301', '\x3', '\x2', 
		'\x2', '\x2', '\x1890', '\x1894', '\x5', '\x306', '\x184', '\x2', '\x1891', 
		'\x1894', '\x5', '\x304', '\x183', '\x2', '\x1892', '\x1894', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1893', '\x1890', '\x3', '\x2', '\x2', '\x2', '\x1893', 
		'\x1891', '\x3', '\x2', '\x2', '\x2', '\x1893', '\x1892', '\x3', '\x2', 
		'\x2', '\x2', '\x1894', '\x303', '\x3', '\x2', '\x2', '\x2', '\x1895', 
		'\x1896', '\t', 'V', '\x2', '\x2', '\x1896', '\x189B', '\a', '\x2EE', 
		'\x2', '\x2', '\x1897', '\x1899', '\a', '\x2F4', '\x2', '\x2', '\x1898', 
		'\x1897', '\x3', '\x2', '\x2', '\x2', '\x1898', '\x1899', '\x3', '\x2', 
		'\x2', '\x2', '\x1899', '\x189A', '\x3', '\x2', '\x2', '\x2', '\x189A', 
		'\x189C', '\x5', '\x308', '\x185', '\x2', '\x189B', '\x1898', '\x3', '\x2', 
		'\x2', '\x2', '\x189C', '\x189D', '\x3', '\x2', '\x2', '\x2', '\x189D', 
		'\x189B', '\x3', '\x2', '\x2', '\x2', '\x189D', '\x189E', '\x3', '\x2', 
		'\x2', '\x2', '\x189E', '\x189F', '\x3', '\x2', '\x2', '\x2', '\x189F', 
		'\x18A0', '\a', '\x2EF', '\x2', '\x2', '\x18A0', '\x305', '\x3', '\x2', 
		'\x2', '\x2', '\x18A1', '\x18A2', '\a', '\xE9', '\x2', '\x2', '\x18A2', 
		'\x18A3', '\a', '\x220', '\x2', '\x2', '\x18A3', '\x18A8', '\a', '\x2EE', 
		'\x2', '\x2', '\x18A4', '\x18A6', '\a', '\x2F4', '\x2', '\x2', '\x18A5', 
		'\x18A4', '\x3', '\x2', '\x2', '\x2', '\x18A5', '\x18A6', '\x3', '\x2', 
		'\x2', '\x2', '\x18A6', '\x18A7', '\x3', '\x2', '\x2', '\x2', '\x18A7', 
		'\x18A9', '\x5', '\x308', '\x185', '\x2', '\x18A8', '\x18A5', '\x3', '\x2', 
		'\x2', '\x2', '\x18A9', '\x18AA', '\x3', '\x2', '\x2', '\x2', '\x18AA', 
		'\x18A8', '\x3', '\x2', '\x2', '\x2', '\x18AA', '\x18AB', '\x3', '\x2', 
		'\x2', '\x2', '\x18AB', '\x18AC', '\x3', '\x2', '\x2', '\x2', '\x18AC', 
		'\x18AD', '\a', '\x2EF', '\x2', '\x2', '\x18AD', '\x307', '\x3', '\x2', 
		'\x2', '\x2', '\x18AE', '\x18B6', '\x5', '\x304', '\x183', '\x2', '\x18AF', 
		'\x18B1', '\a', '\x2EE', '\x2', '\x2', '\x18B0', '\x18B2', '\x5', '\x378', 
		'\x1BD', '\x2', '\x18B1', '\x18B0', '\x3', '\x2', '\x2', '\x2', '\x18B1', 
		'\x18B2', '\x3', '\x2', '\x2', '\x2', '\x18B2', '\x18B3', '\x3', '\x2', 
		'\x2', '\x2', '\x18B3', '\x18B6', '\a', '\x2EF', '\x2', '\x2', '\x18B4', 
		'\x18B6', '\x5', '\x37A', '\x1BE', '\x2', '\x18B5', '\x18AE', '\x3', '\x2', 
		'\x2', '\x2', '\x18B5', '\x18AF', '\x3', '\x2', '\x2', '\x2', '\x18B5', 
		'\x18B4', '\x3', '\x2', '\x2', '\x2', '\x18B6', '\x309', '\x3', '\x2', 
		'\x2', '\x2', '\x18B7', '\x18B8', '\a', '\xED', '\x2', '\x2', '\x18B8', 
		'\x18B9', '\x5', '\x376', '\x1BC', '\x2', '\x18B9', '\x30B', '\x3', '\x2', 
		'\x2', '\x2', '\x18BA', '\x18BE', '\a', '\x15C', '\x2', '\x2', '\x18BB', 
		'\x18BD', '\x5', '\x30E', '\x188', '\x2', '\x18BC', '\x18BB', '\x3', '\x2', 
		'\x2', '\x2', '\x18BD', '\x18C0', '\x3', '\x2', '\x2', '\x2', '\x18BE', 
		'\x18BC', '\x3', '\x2', '\x2', '\x2', '\x18BE', '\x18BF', '\x3', '\x2', 
		'\x2', '\x2', '\x18BF', '\x18C2', '\x3', '\x2', '\x2', '\x2', '\x18C0', 
		'\x18BE', '\x3', '\x2', '\x2', '\x2', '\x18C1', '\x18C3', '\x5', '\x310', 
		'\x189', '\x2', '\x18C2', '\x18C1', '\x3', '\x2', '\x2', '\x2', '\x18C2', 
		'\x18C3', '\x3', '\x2', '\x2', '\x2', '\x18C3', '\x18C7', '\x3', '\x2', 
		'\x2', '\x2', '\x18C4', '\x18C6', '\x5', '\x312', '\x18A', '\x2', '\x18C5', 
		'\x18C4', '\x3', '\x2', '\x2', '\x2', '\x18C6', '\x18C9', '\x3', '\x2', 
		'\x2', '\x2', '\x18C7', '\x18C5', '\x3', '\x2', '\x2', '\x2', '\x18C7', 
		'\x18C8', '\x3', '\x2', '\x2', '\x2', '\x18C8', '\x18CA', '\x3', '\x2', 
		'\x2', '\x2', '\x18C9', '\x18C7', '\x3', '\x2', '\x2', '\x2', '\x18CA', 
		'\x18CB', '\x5', '\x314', '\x18B', '\x2', '\x18CB', '\x30D', '\x3', '\x2', 
		'\x2', '\x2', '\x18CC', '\x18CD', '\t', 'W', '\x2', '\x2', '\x18CD', '\x18D5', 
		'\a', '\x168', '\x2', '\x2', '\x18CE', '\x18D2', '\a', '\x27C', '\x2', 
		'\x2', '\x18CF', '\x18D3', '\a', '\x99', '\x2', '\x2', '\x18D0', '\x18D1', 
		'\a', '\x229', '\x2', '\x2', '\x18D1', '\x18D3', '\a', '\x1E3', '\x2', 
		'\x2', '\x18D2', '\x18CF', '\x3', '\x2', '\x2', '\x2', '\x18D2', '\x18D0', 
		'\x3', '\x2', '\x2', '\x2', '\x18D3', '\x18D5', '\x3', '\x2', '\x2', '\x2', 
		'\x18D4', '\x18CC', '\x3', '\x2', '\x2', '\x2', '\x18D4', '\x18CE', '\x3', 
		'\x2', '\x2', '\x2', '\x18D5', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x18D6', 
		'\x18D7', '\a', '\x1F9', '\x2', '\x2', '\x18D7', '\x18D8', '\t', 'X', 
		'\x2', '\x2', '\x18D8', '\x18D9', '\a', '\x206', '\x2', '\x2', '\x18D9', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x18DA', '\x18DB', '\a', '\x1E3', 
		'\x2', '\x2', '\x18DB', '\x18DC', '\x5', '\x470', '\x239', '\x2', '\x18DC', 
		'\x18DD', '\a', '\x198', '\x2', '\x2', '\x18DD', '\x18DE', '\a', '\x2EE', 
		'\x2', '\x2', '\x18DE', '\x18DF', '\x5', '\x16C', '\xB7', '\x2', '\x18DF', 
		'\x18E0', '\a', '\x2EF', '\x2', '\x2', '\x18E0', '\x18E4', '\x5', '\x316', 
		'\x18C', '\x2', '\x18E1', '\x18E3', '\x5', '\x30E', '\x188', '\x2', '\x18E2', 
		'\x18E1', '\x3', '\x2', '\x2', '\x2', '\x18E3', '\x18E6', '\x3', '\x2', 
		'\x2', '\x2', '\x18E4', '\x18E2', '\x3', '\x2', '\x2', '\x2', '\x18E4', 
		'\x18E5', '\x3', '\x2', '\x2', '\x2', '\x18E5', '\x313', '\x3', '\x2', 
		'\x2', '\x2', '\x18E6', '\x18E4', '\x3', '\x2', '\x2', '\x2', '\x18E7', 
		'\x18E8', '\a', '\x145', '\x2', '\x2', '\x18E8', '\x18EA', '\x5', '\x47E', 
		'\x240', '\x2', '\x18E9', '\x18E7', '\x3', '\x2', '\x2', '\x2', '\x18E9', 
		'\x18EA', '\x3', '\x2', '\x2', '\x2', '\x18EA', '\x18EB', '\x3', '\x2', 
		'\x2', '\x2', '\x18EB', '\x18EF', '\x5', '\x316', '\x18C', '\x2', '\x18EC', 
		'\x18EE', '\x5', '\x30E', '\x188', '\x2', '\x18ED', '\x18EC', '\x3', '\x2', 
		'\x2', '\x2', '\x18EE', '\x18F1', '\x3', '\x2', '\x2', '\x2', '\x18EF', 
		'\x18ED', '\x3', '\x2', '\x2', '\x2', '\x18EF', '\x18F0', '\x3', '\x2', 
		'\x2', '\x2', '\x18F0', '\x18F2', '\x3', '\x2', '\x2', '\x2', '\x18F1', 
		'\x18EF', '\x3', '\x2', '\x2', '\x2', '\x18F2', '\x18F3', '\x5', '\x31E', 
		'\x190', '\x2', '\x18F3', '\x315', '\x3', '\x2', '\x2', '\x2', '\x18F4', 
		'\x18F6', '\x5', '\x318', '\x18D', '\x2', '\x18F5', '\x18F4', '\x3', '\x2', 
		'\x2', '\x2', '\x18F5', '\x18F6', '\x3', '\x2', '\x2', '\x2', '\x18F6', 
		'\x18F7', '\x3', '\x2', '\x2', '\x2', '\x18F7', '\x18F8', '\a', '\x99', 
		'\x2', '\x2', '\x18F8', '\x18F9', '\a', '?', '\x2', '\x2', '\x18F9', '\x18FA', 
		'\x5', '\x31A', '\x18E', '\x2', '\x18FA', '\x18FB', '\a', '\x150', '\x2', 
		'\x2', '\x18FB', '\x18FC', '\x5', '\x31A', '\x18E', '\x2', '\x18FC', '\x317', 
		'\x3', '\x2', '\x2', '\x2', '\x18FD', '\x18FE', '\a', '\x1AF', '\x2', 
		'\x2', '\x18FE', '\x18FF', '\a', '?', '\x2', '\x2', '\x18FF', '\x1900', 
		'\x5', '\x31A', '\x18E', '\x2', '\x1900', '\x319', '\x3', '\x2', '\x2', 
		'\x2', '\x1901', '\x1906', '\a', '\x2EE', '\x2', '\x2', '\x1902', '\x1904', 
		'\a', '\x2F4', '\x2', '\x2', '\x1903', '\x1902', '\x3', '\x2', '\x2', 
		'\x2', '\x1903', '\x1904', '\x3', '\x2', '\x2', '\x2', '\x1904', '\x1905', 
		'\x3', '\x2', '\x2', '\x2', '\x1905', '\x1907', '\x5', '\x31C', '\x18F', 
		'\x2', '\x1906', '\x1903', '\x3', '\x2', '\x2', '\x2', '\x1907', '\x1908', 
		'\x3', '\x2', '\x2', '\x2', '\x1908', '\x1906', '\x3', '\x2', '\x2', '\x2', 
		'\x1908', '\x1909', '\x3', '\x2', '\x2', '\x2', '\x1909', '\x190A', '\x3', 
		'\x2', '\x2', '\x2', '\x190A', '\x190B', '\a', '\x2EF', '\x2', '\x2', 
		'\x190B', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x190C', '\x190F', '\x5', 
		'\x37A', '\x1BE', '\x2', '\x190D', '\x190F', '\x5', '\x2CE', '\x168', 
		'\x2', '\x190E', '\x190C', '\x3', '\x2', '\x2', '\x2', '\x190E', '\x190D', 
		'\x3', '\x2', '\x2', '\x2', '\x190F', '\x1911', '\x3', '\x2', '\x2', '\x2', 
		'\x1910', '\x1912', '\x5', '\x3F4', '\x1FB', '\x2', '\x1911', '\x1910', 
		'\x3', '\x2', '\x2', '\x2', '\x1911', '\x1912', '\x3', '\x2', '\x2', '\x2', 
		'\x1912', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x1913', '\x1915', '\x5', 
		'\x320', '\x191', '\x2', '\x1914', '\x1913', '\x3', '\x2', '\x2', '\x2', 
		'\x1914', '\x1915', '\x3', '\x2', '\x2', '\x2', '\x1915', '\x1916', '\x3', 
		'\x2', '\x2', '\x2', '\x1916', '\x191D', '\a', '\x2EE', '\x2', '\x2', 
		'\x1917', '\x1919', '\a', '\x2F4', '\x2', '\x2', '\x1918', '\x1917', '\x3', 
		'\x2', '\x2', '\x2', '\x1918', '\x1919', '\x3', '\x2', '\x2', '\x2', '\x1919', 
		'\x191A', '\x3', '\x2', '\x2', '\x2', '\x191A', '\x191C', '\x5', '\x322', 
		'\x192', '\x2', '\x191B', '\x1918', '\x3', '\x2', '\x2', '\x2', '\x191C', 
		'\x191F', '\x3', '\x2', '\x2', '\x2', '\x191D', '\x191B', '\x3', '\x2', 
		'\x2', '\x2', '\x191D', '\x191E', '\x3', '\x2', '\x2', '\x2', '\x191E', 
		'\x1920', '\x3', '\x2', '\x2', '\x2', '\x191F', '\x191D', '\x3', '\x2', 
		'\x2', '\x2', '\x1920', '\x1921', '\a', '\x2EF', '\x2', '\x2', '\x1921', 
		'\x31F', '\x3', '\x2', '\x2', '\x2', '\x1922', '\x1928', '\a', '\x207', 
		'\x2', '\x2', '\x1923', '\x1929', '\a', '\x283', '\x2', '\x2', '\x1924', 
		'\x1926', '\a', '\x284', '\x2', '\x2', '\x1925', '\x1927', '\a', '\xE', 
		'\x2', '\x2', '\x1926', '\x1925', '\x3', '\x2', '\x2', '\x2', '\x1926', 
		'\x1927', '\x3', '\x2', '\x2', '\x2', '\x1927', '\x1929', '\x3', '\x2', 
		'\x2', '\x2', '\x1928', '\x1923', '\x3', '\x2', '\x2', '\x2', '\x1928', 
		'\x1924', '\x3', '\x2', '\x2', '\x2', '\x1928', '\x1929', '\x3', '\x2', 
		'\x2', '\x2', '\x1929', '\x192C', '\x3', '\x2', '\x2', '\x2', '\x192A', 
		'\x192B', '\t', 'Y', '\x2', '\x2', '\x192B', '\x192D', '\a', '\x19E', 
		'\x2', '\x2', '\x192C', '\x192A', '\x3', '\x2', '\x2', '\x2', '\x192C', 
		'\x192D', '\x3', '\x2', '\x2', '\x2', '\x192D', '\x192F', '\x3', '\x2', 
		'\x2', '\x2', '\x192E', '\x1930', '\x5', '\x326', '\x194', '\x2', '\x192F', 
		'\x192E', '\x3', '\x2', '\x2', '\x2', '\x192F', '\x1930', '\x3', '\x2', 
		'\x2', '\x2', '\x1930', '\x321', '\x3', '\x2', '\x2', '\x2', '\x1931', 
		'\x1937', '\a', '\x283', '\x2', '\x2', '\x1932', '\x1934', '\a', '\x284', 
		'\x2', '\x2', '\x1933', '\x1935', '\a', '\xE', '\x2', '\x2', '\x1934', 
		'\x1933', '\x3', '\x2', '\x2', '\x2', '\x1934', '\x1935', '\x3', '\x2', 
		'\x2', '\x2', '\x1935', '\x1937', '\x3', '\x2', '\x2', '\x2', '\x1936', 
		'\x1931', '\x3', '\x2', '\x2', '\x2', '\x1936', '\x1932', '\x3', '\x2', 
		'\x2', '\x2', '\x1936', '\x1937', '\x3', '\x2', '\x2', '\x2', '\x1937', 
		'\x1938', '\x3', '\x2', '\x2', '\x2', '\x1938', '\x193A', '\x5', '\x324', 
		'\x193', '\x2', '\x1939', '\x193B', '\x5', '\x32A', '\x196', '\x2', '\x193A', 
		'\x1939', '\x3', '\x2', '\x2', '\x2', '\x193A', '\x193B', '\x3', '\x2', 
		'\x2', '\x2', '\x193B', '\x193C', '\x3', '\x2', '\x2', '\x2', '\x193C', 
		'\x193D', '\a', '\x302', '\x2', '\x2', '\x193D', '\x193E', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x193E', '\x323', '\x3', '\x2', '\x2', '\x2', '\x193F', 
		'\x1940', '\x5', '\x38A', '\x1C6', '\x2', '\x1940', '\x325', '\x3', '\x2', 
		'\x2', '\x2', '\x1941', '\x1942', '\a', '\x11C', '\x2', '\x2', '\x1942', 
		'\x1943', '\a', '\x2EE', '\x2', '\x2', '\x1943', '\x1944', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1944', '\x1946', '\a', '\x2EF', '\x2', '\x2', '\x1945', 
		'\x1947', '\x5', '\x328', '\x195', '\x2', '\x1946', '\x1945', '\x3', '\x2', 
		'\x2', '\x2', '\x1946', '\x1947', '\x3', '\x2', '\x2', '\x2', '\x1947', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x1948', '\x1949', '\a', '\x280', 
		'\x2', '\x2', '\x1949', '\x194A', '\a', '\x2EE', '\x2', '\x2', '\x194A', 
		'\x194B', '\x5', '\x376', '\x1BC', '\x2', '\x194B', '\x194C', '\a', '\x2EF', 
		'\x2', '\x2', '\x194C', '\x329', '\x3', '\x2', '\x2', '\x2', '\x194D', 
		'\x194F', '\a', '\x19E', '\x2', '\x2', '\x194E', '\x1950', '\a', '\x226', 
		'\x2', '\x2', '\x194F', '\x194E', '\x3', '\x2', '\x2', '\x2', '\x194F', 
		'\x1950', '\x3', '\x2', '\x2', '\x2', '\x1950', '\x1951', '\x3', '\x2', 
		'\x2', '\x2', '\x1951', '\x1956', '\a', '?', '\x2', '\x2', '\x1952', '\x1954', 
		'\a', '\x2F4', '\x2', '\x2', '\x1953', '\x1952', '\x3', '\x2', '\x2', 
		'\x2', '\x1953', '\x1954', '\x3', '\x2', '\x2', '\x2', '\x1954', '\x1955', 
		'\x3', '\x2', '\x2', '\x2', '\x1955', '\x1957', '\x5', '\x32C', '\x197', 
		'\x2', '\x1956', '\x1953', '\x3', '\x2', '\x2', '\x2', '\x1957', '\x1958', 
		'\x3', '\x2', '\x2', '\x2', '\x1958', '\x1956', '\x3', '\x2', '\x2', '\x2', 
		'\x1958', '\x1959', '\x3', '\x2', '\x2', '\x2', '\x1959', '\x32B', '\x3', 
		'\x2', '\x2', '\x2', '\x195A', '\x195C', '\x5', '\x37A', '\x1BE', '\x2', 
		'\x195B', '\x195D', '\t', 'Z', '\x2', '\x2', '\x195C', '\x195B', '\x3', 
		'\x2', '\x2', '\x2', '\x195C', '\x195D', '\x3', '\x2', '\x2', '\x2', '\x195D', 
		'\x1960', '\x3', '\x2', '\x2', '\x2', '\x195E', '\x195F', '\a', '\x18B', 
		'\x2', '\x2', '\x195F', '\x1961', '\t', '[', '\x2', '\x2', '\x1960', '\x195E', 
		'\x3', '\x2', '\x2', '\x2', '\x1960', '\x1961', '\x3', '\x2', '\x2', '\x2', 
		'\x1961', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x1962', '\x1963', '\a', 
		'\xDC', '\x2', '\x2', '\x1963', '\x1965', '\a', '\x283', '\x2', '\x2', 
		'\x1964', '\x1966', '\x5', '\x330', '\x199', '\x2', '\x1965', '\x1964', 
		'\x3', '\x2', '\x2', '\x2', '\x1965', '\x1966', '\x3', '\x2', '\x2', '\x2', 
		'\x1966', '\x1968', '\x3', '\x2', '\x2', '\x2', '\x1967', '\x1969', '\x5', 
		'\x332', '\x19A', '\x2', '\x1968', '\x1967', '\x3', '\x2', '\x2', '\x2', 
		'\x1968', '\x1969', '\x3', '\x2', '\x2', '\x2', '\x1969', '\x32F', '\x3', 
		'\x2', '\x2', '\x2', '\x196A', '\x196B', '\a', '\x192', '\x2', '\x2', 
		'\x196B', '\x196C', '\x5', '\x442', '\x222', '\x2', '\x196C', '\x331', 
		'\x3', '\x2', '\x2', '\x2', '\x196D', '\x196E', '\a', '\x22B', '\x2', 
		'\x2', '\x196E', '\x1973', '\a', '\x13A', '\x2', '\x2', '\x196F', '\x1973', 
		'\a', '\x189', '\x2', '\x2', '\x1970', '\x1971', '\a', '\x299', '\x2', 
		'\x2', '\x1971', '\x1973', '\x5', '\x37A', '\x1BE', '\x2', '\x1972', '\x196D', 
		'\x3', '\x2', '\x2', '\x2', '\x1972', '\x196F', '\x3', '\x2', '\x2', '\x2', 
		'\x1972', '\x1970', '\x3', '\x2', '\x2', '\x2', '\x1973', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x1974', '\x1975', '\a', '\x283', '\x2', '\x2', 
		'\x1975', '\x1976', '\x5', '\x362', '\x1B2', '\x2', '\x1976', '\x1978', 
		'\x5', '\x336', '\x19C', '\x2', '\x1977', '\x1979', '\x5', '\x3F8', '\x1FD', 
		'\x2', '\x1978', '\x1977', '\x3', '\x2', '\x2', '\x2', '\x1978', '\x1979', 
		'\x3', '\x2', '\x2', '\x2', '\x1979', '\x197B', '\x3', '\x2', '\x2', '\x2', 
		'\x197A', '\x197C', '\x5', '\x364', '\x1B3', '\x2', '\x197B', '\x197A', 
		'\x3', '\x2', '\x2', '\x2', '\x197B', '\x197C', '\x3', '\x2', '\x2', '\x2', 
		'\x197C', '\x197E', '\x3', '\x2', '\x2', '\x2', '\x197D', '\x197F', '\x5', 
		'\x366', '\x1B4', '\x2', '\x197E', '\x197D', '\x3', '\x2', '\x2', '\x2', 
		'\x197E', '\x197F', '\x3', '\x2', '\x2', '\x2', '\x197F', '\x335', '\x3', 
		'\x2', '\x2', '\x2', '\x1980', '\x1990', '\a', '\x21F', '\x2', '\x2', 
		'\x1981', '\x1983', '\a', '\x2F4', '\x2', '\x2', '\x1982', '\x1981', '\x3', 
		'\x2', '\x2', '\x2', '\x1982', '\x1983', '\x3', '\x2', '\x2', '\x2', '\x1983', 
		'\x1984', '\x3', '\x2', '\x2', '\x2', '\x1984', '\x1986', '\x5', '\x338', 
		'\x19D', '\x2', '\x1985', '\x1982', '\x3', '\x2', '\x2', '\x2', '\x1986', 
		'\x1987', '\x3', '\x2', '\x2', '\x2', '\x1987', '\x1985', '\x3', '\x2', 
		'\x2', '\x2', '\x1987', '\x1988', '\x3', '\x2', '\x2', '\x2', '\x1988', 
		'\x1991', '\x3', '\x2', '\x2', '\x2', '\x1989', '\x198A', '\a', '\x28D', 
		'\x2', '\x2', '\x198A', '\x198B', '\a', '\x2EE', '\x2', '\x2', '\x198B', 
		'\x198C', '\x5', '\x468', '\x235', '\x2', '\x198C', '\x198D', '\a', '\x2EF', 
		'\x2', '\x2', '\x198D', '\x198E', '\a', '\x302', '\x2', '\x2', '\x198E', 
		'\x198F', '\x5', '\x37A', '\x1BE', '\x2', '\x198F', '\x1991', '\x3', '\x2', 
		'\x2', '\x2', '\x1990', '\x1985', '\x3', '\x2', '\x2', '\x2', '\x1990', 
		'\x1989', '\x3', '\x2', '\x2', '\x2', '\x1991', '\x337', '\x3', '\x2', 
		'\x2', '\x2', '\x1992', '\x1993', '\x5', '\x48A', '\x246', '\x2', '\x1993', 
		'\x1994', '\a', '\x302', '\x2', '\x2', '\x1994', '\x1995', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1995', '\x199B', '\x3', '\x2', '\x2', '\x2', '\x1996', 
		'\x1997', '\x5', '\x444', '\x223', '\x2', '\x1997', '\x1998', '\a', '\x302', 
		'\x2', '\x2', '\x1998', '\x1999', '\x5', '\x16C', '\xB7', '\x2', '\x1999', 
		'\x199B', '\x3', '\x2', '\x2', '\x2', '\x199A', '\x1992', '\x3', '\x2', 
		'\x2', '\x2', '\x199A', '\x1996', '\x3', '\x2', '\x2', '\x2', '\x199B', 
		'\x339', '\x3', '\x2', '\x2', '\x2', '\x199C', '\x199E', '\a', '\x94', 
		'\x2', '\x2', '\x199D', '\x199F', '\a', '\xE0', '\x2', '\x2', '\x199E', 
		'\x199D', '\x3', '\x2', '\x2', '\x2', '\x199E', '\x199F', '\x3', '\x2', 
		'\x2', '\x2', '\x199F', '\x19A0', '\x3', '\x2', '\x2', '\x2', '\x19A0', 
		'\x19A2', '\x5', '\x362', '\x1B2', '\x2', '\x19A1', '\x19A3', '\x5', '\x3F8', 
		'\x1FD', '\x2', '\x19A2', '\x19A1', '\x3', '\x2', '\x2', '\x2', '\x19A2', 
		'\x19A3', '\x3', '\x2', '\x2', '\x2', '\x19A3', '\x19A5', '\x3', '\x2', 
		'\x2', '\x2', '\x19A4', '\x19A6', '\x5', '\x364', '\x1B3', '\x2', '\x19A5', 
		'\x19A4', '\x3', '\x2', '\x2', '\x2', '\x19A5', '\x19A6', '\x3', '\x2', 
		'\x2', '\x2', '\x19A6', '\x19A8', '\x3', '\x2', '\x2', '\x2', '\x19A7', 
		'\x19A9', '\x5', '\x366', '\x1B4', '\x2', '\x19A8', '\x19A7', '\x3', '\x2', 
		'\x2', '\x2', '\x19A8', '\x19A9', '\x3', '\x2', '\x2', '\x2', '\x19A9', 
		'\x33B', '\x3', '\x2', '\x2', '\x2', '\x19AA', '\x19AD', '\a', '\x10F', 
		'\x2', '\x2', '\x19AB', '\x19AE', '\x5', '\x33E', '\x1A0', '\x2', '\x19AC', 
		'\x19AE', '\x5', '\x340', '\x1A1', '\x2', '\x19AD', '\x19AB', '\x3', '\x2', 
		'\x2', '\x2', '\x19AD', '\x19AC', '\x3', '\x2', '\x2', '\x2', '\x19AE', 
		'\x33D', '\x3', '\x2', '\x2', '\x2', '\x19AF', '\x19B5', '\x5', '\x34A', 
		'\x1A6', '\x2', '\x19B0', '\x19B2', '\x5', '\x34C', '\x1A7', '\x2', '\x19B1', 
		'\x19B3', '\x5', '\x364', '\x1B3', '\x2', '\x19B2', '\x19B1', '\x3', '\x2', 
		'\x2', '\x2', '\x19B2', '\x19B3', '\x3', '\x2', '\x2', '\x2', '\x19B3', 
		'\x19B6', '\x3', '\x2', '\x2', '\x2', '\x19B4', '\x19B6', '\x5', '\x2C0', 
		'\x161', '\x2', '\x19B5', '\x19B0', '\x3', '\x2', '\x2', '\x2', '\x19B5', 
		'\x19B4', '\x3', '\x2', '\x2', '\x2', '\x19B6', '\x19B8', '\x3', '\x2', 
		'\x2', '\x2', '\x19B7', '\x19B9', '\x5', '\x366', '\x1B4', '\x2', '\x19B8', 
		'\x19B7', '\x3', '\x2', '\x2', '\x2', '\x19B8', '\x19B9', '\x3', '\x2', 
		'\x2', '\x2', '\x19B9', '\x33F', '\x3', '\x2', '\x2', '\x2', '\x19BA', 
		'\x19BC', '\a', '\xE', '\x2', '\x2', '\x19BB', '\x19BD', '\x5', '\x342', 
		'\x1A2', '\x2', '\x19BC', '\x19BB', '\x3', '\x2', '\x2', '\x2', '\x19BD', 
		'\x19BE', '\x3', '\x2', '\x2', '\x2', '\x19BE', '\x19BC', '\x3', '\x2', 
		'\x2', '\x2', '\x19BE', '\x19BF', '\x3', '\x2', '\x2', '\x2', '\x19BF', 
		'\x19C2', '\x3', '\x2', '\x2', '\x2', '\x19C0', '\x19C2', '\x5', '\x344', 
		'\x1A3', '\x2', '\x19C1', '\x19BA', '\x3', '\x2', '\x2', '\x2', '\x19C1', 
		'\x19C0', '\x3', '\x2', '\x2', '\x2', '\x19C2', '\x19C3', '\x3', '\x2', 
		'\x2', '\x2', '\x19C3', '\x19C4', '\x5', '\x2C0', '\x161', '\x2', '\x19C4', 
		'\x341', '\x3', '\x2', '\x2', '\x2', '\x19C5', '\x19C7', '\x5', '\x34A', 
		'\x1A6', '\x2', '\x19C6', '\x19C8', '\x5', '\x34C', '\x1A7', '\x2', '\x19C7', 
		'\x19C6', '\x3', '\x2', '\x2', '\x2', '\x19C7', '\x19C8', '\x3', '\x2', 
		'\x2', '\x2', '\x19C8', '\x19CA', '\x3', '\x2', '\x2', '\x2', '\x19C9', 
		'\x19CB', '\x5', '\x366', '\x1B4', '\x2', '\x19CA', '\x19C9', '\x3', '\x2', 
		'\x2', '\x2', '\x19CA', '\x19CB', '\x3', '\x2', '\x2', '\x2', '\x19CB', 
		'\x343', '\x3', '\x2', '\x2', '\x2', '\x19CC', '\x19CE', '\t', '\\', '\x2', 
		'\x2', '\x19CD', '\x19CC', '\x3', '\x2', '\x2', '\x2', '\x19CD', '\x19CE', 
		'\x3', '\x2', '\x2', '\x2', '\x19CE', '\x19D0', '\x3', '\x2', '\x2', '\x2', 
		'\x19CF', '\x19D1', '\x5', '\x346', '\x1A4', '\x2', '\x19D0', '\x19CF', 
		'\x3', '\x2', '\x2', '\x2', '\x19D1', '\x19D2', '\x3', '\x2', '\x2', '\x2', 
		'\x19D2', '\x19D0', '\x3', '\x2', '\x2', '\x2', '\x19D2', '\x19D3', '\x3', 
		'\x2', '\x2', '\x2', '\x19D3', '\x19D5', '\x3', '\x2', '\x2', '\x2', '\x19D4', 
		'\x19D6', '\x5', '\x348', '\x1A5', '\x2', '\x19D5', '\x19D4', '\x3', '\x2', 
		'\x2', '\x2', '\x19D5', '\x19D6', '\x3', '\x2', '\x2', '\x2', '\x19D6', 
		'\x345', '\x3', '\x2', '\x2', '\x2', '\x19D7', '\x19D8', '\a', '\x29D', 
		'\x2', '\x2', '\x19D8', '\x19D9', '\x5', '\x376', '\x1BC', '\x2', '\x19D9', 
		'\x19DB', '\a', '\x259', '\x2', '\x2', '\x19DA', '\x19DC', '\x5', '\x342', 
		'\x1A2', '\x2', '\x19DB', '\x19DA', '\x3', '\x2', '\x2', '\x2', '\x19DC', 
		'\x19DD', '\x3', '\x2', '\x2', '\x2', '\x19DD', '\x19DB', '\x3', '\x2', 
		'\x2', '\x2', '\x19DD', '\x19DE', '\x3', '\x2', '\x2', '\x2', '\x19DE', 
		'\x347', '\x3', '\x2', '\x2', '\x2', '\x19DF', '\x19E1', '\a', '\xAD', 
		'\x2', '\x2', '\x19E0', '\x19E2', '\x5', '\x342', '\x1A2', '\x2', '\x19E1', 
		'\x19E0', '\x3', '\x2', '\x2', '\x2', '\x19E2', '\x19E3', '\x3', '\x2', 
		'\x2', '\x2', '\x19E3', '\x19E1', '\x3', '\x2', '\x2', '\x2', '\x19E3', 
		'\x19E4', '\x3', '\x2', '\x2', '\x2', '\x19E4', '\x349', '\x3', '\x2', 
		'\x2', '\x2', '\x19E5', '\x19E6', '\a', '\x117', '\x2', '\x2', '\x19E6', 
		'\x19E8', '\x5', '\x362', '\x1B2', '\x2', '\x19E7', '\x19E9', '\x5', '\x444', 
		'\x223', '\x2', '\x19E8', '\x19E7', '\x3', '\x2', '\x2', '\x2', '\x19E8', 
		'\x19E9', '\x3', '\x2', '\x2', '\x2', '\x19E9', '\x34B', '\x3', '\x2', 
		'\x2', '\x2', '\x19EA', '\x19EB', '\a', '\x28C', '\x2', '\x2', '\x19EB', 
		'\x19ED', '\a', '\x2EE', '\x2', '\x2', '\x19EC', '\x19EE', '\x5', '\x378', 
		'\x1BD', '\x2', '\x19ED', '\x19EC', '\x3', '\x2', '\x2', '\x2', '\x19ED', 
		'\x19EE', '\x3', '\x2', '\x2', '\x2', '\x19EE', '\x19EF', '\x3', '\x2', 
		'\x2', '\x2', '\x19EF', '\x19F0', '\a', '\x2EF', '\x2', '\x2', '\x19F0', 
		'\x34D', '\x3', '\x2', '\x2', '\x2', '\x19F1', '\x19F2', '\a', '\x154', 
		'\x2', '\x2', '\x19F2', '\x19F3', '\a', '\x117', '\x2', '\x2', '\x19F3', 
		'\x19F5', '\x5', '\x410', '\x209', '\x2', '\x19F4', '\x19F6', '\x5', '\x3F6', 
		'\x1FC', '\x2', '\x19F5', '\x19F4', '\x3', '\x2', '\x2', '\x2', '\x19F5', 
		'\x19F6', '\x3', '\x2', '\x2', '\x2', '\x19F6', '\x19F7', '\x3', '\x2', 
		'\x2', '\x2', '\x19F7', '\x19F8', '\a', '\x28A', '\x2', '\x2', '\x19F8', 
		'\x19F9', '\x5', '\x358', '\x1AD', '\x2', '\x19F9', '\x19FA', '\a', '\x198', 
		'\x2', '\x2', '\x19FA', '\x19FB', '\a', '\x2EE', '\x2', '\x2', '\x19FB', 
		'\x19FC', '\x5', '\x376', '\x1BC', '\x2', '\x19FC', '\x1A05', '\a', '\x2EF', 
		'\x2', '\x2', '\x19FD', '\x19FF', '\x5', '\x350', '\x1A9', '\x2', '\x19FE', 
		'\x1A00', '\x5', '\x356', '\x1AC', '\x2', '\x19FF', '\x19FE', '\x3', '\x2', 
		'\x2', '\x2', '\x19FF', '\x1A00', '\x3', '\x2', '\x2', '\x2', '\x1A00', 
		'\x1A06', '\x3', '\x2', '\x2', '\x2', '\x1A01', '\x1A03', '\x5', '\x356', 
		'\x1AC', '\x2', '\x1A02', '\x1A04', '\x5', '\x350', '\x1A9', '\x2', '\x1A03', 
		'\x1A02', '\x3', '\x2', '\x2', '\x2', '\x1A03', '\x1A04', '\x3', '\x2', 
		'\x2', '\x2', '\x1A04', '\x1A06', '\x3', '\x2', '\x2', '\x2', '\x1A05', 
		'\x19FD', '\x3', '\x2', '\x2', '\x2', '\x1A05', '\x1A01', '\x3', '\x2', 
		'\x2', '\x2', '\x1A05', '\x1A06', '\x3', '\x2', '\x2', '\x2', '\x1A06', 
		'\x1A08', '\x3', '\x2', '\x2', '\x2', '\x1A07', '\x1A09', '\x5', '\x366', 
		'\x1B4', '\x2', '\x1A08', '\x1A07', '\x3', '\x2', '\x2', '\x2', '\x1A08', 
		'\x1A09', '\x3', '\x2', '\x2', '\x2', '\x1A09', '\x34F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A0A', '\x1A0B', '\a', '\x29D', '\x2', '\x2', '\x1A0B', 
		'\x1A0C', '\a', '\x14B', '\x2', '\x2', '\x1A0C', '\x1A0D', '\a', '\x259', 
		'\x2', '\x2', '\x1A0D', '\x1A0E', '\a', '\x283', '\x2', '\x2', '\x1A0E', 
		'\x1A0F', '\a', '\x21F', '\x2', '\x2', '\x1A0F', '\x1A14', '\x5', '\x352', 
		'\x1AA', '\x2', '\x1A10', '\x1A11', '\a', '\x2F4', '\x2', '\x2', '\x1A11', 
		'\x1A13', '\x5', '\x352', '\x1AA', '\x2', '\x1A12', '\x1A10', '\x3', '\x2', 
		'\x2', '\x2', '\x1A13', '\x1A16', '\x3', '\x2', '\x2', '\x2', '\x1A14', 
		'\x1A12', '\x3', '\x2', '\x2', '\x2', '\x1A14', '\x1A15', '\x3', '\x2', 
		'\x2', '\x2', '\x1A15', '\x1A18', '\x3', '\x2', '\x2', '\x2', '\x1A16', 
		'\x1A14', '\x3', '\x2', '\x2', '\x2', '\x1A17', '\x1A19', '\x5', '\x3F8', 
		'\x1FD', '\x2', '\x1A18', '\x1A17', '\x3', '\x2', '\x2', '\x2', '\x1A18', 
		'\x1A19', '\x3', '\x2', '\x2', '\x2', '\x1A19', '\x1A1B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1A', '\x1A1C', '\x5', '\x354', '\x1AB', '\x2', '\x1A1B', 
		'\x1A1A', '\x3', '\x2', '\x2', '\x2', '\x1A1B', '\x1A1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A1C', '\x351', '\x3', '\x2', '\x2', '\x2', '\x1A1D', 
		'\x1A1E', '\x5', '\x48A', '\x246', '\x2', '\x1A1E', '\x1A1F', '\a', '\x302', 
		'\x2', '\x2', '\x1A1F', '\x1A20', '\x5', '\x37A', '\x1BE', '\x2', '\x1A20', 
		'\x353', '\x3', '\x2', '\x2', '\x2', '\x1A21', '\x1A22', '\a', '\x94', 
		'\x2', '\x2', '\x1A22', '\x1A23', '\x5', '\x3F8', '\x1FD', '\x2', '\x1A23', 
		'\x355', '\x3', '\x2', '\x2', '\x2', '\x1A24', '\x1A25', '\a', '\x29D', 
		'\x2', '\x2', '\x1A25', '\x1A26', '\a', '\x187', '\x2', '\x2', '\x1A26', 
		'\x1A27', '\a', '\x14B', '\x2', '\x2', '\x1A27', '\x1A28', '\a', '\x259', 
		'\x2', '\x2', '\x1A28', '\x1A2A', '\a', '\x10F', '\x2', '\x2', '\x1A29', 
		'\x1A2B', '\x5', '\x444', '\x223', '\x2', '\x1A2A', '\x1A29', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2A', '\x1A2B', '\x3', '\x2', '\x2', '\x2', '\x1A2B', 
		'\x1A2C', '\x3', '\x2', '\x2', '\x2', '\x1A2C', '\x1A2D', '\a', '\x28C', 
		'\x2', '\x2', '\x1A2D', '\x1A2F', '\a', '\x2EE', '\x2', '\x2', '\x1A2E', 
		'\x1A30', '\x5', '\x378', '\x1BD', '\x2', '\x1A2F', '\x1A2E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A2F', '\x1A30', '\x3', '\x2', '\x2', '\x2', '\x1A30', 
		'\x1A31', '\x3', '\x2', '\x2', '\x2', '\x1A31', '\x1A33', '\a', '\x2EF', 
		'\x2', '\x2', '\x1A32', '\x1A34', '\x5', '\x3F8', '\x1FD', '\x2', '\x1A33', 
		'\x1A32', '\x3', '\x2', '\x2', '\x2', '\x1A33', '\x1A34', '\x3', '\x2', 
		'\x2', '\x2', '\x1A34', '\x357', '\x3', '\x2', '\x2', '\x2', '\x1A35', 
		'\x1A3B', '\x5', '\x410', '\x209', '\x2', '\x1A36', '\x1A37', '\a', '\x2EE', 
		'\x2', '\x2', '\x1A37', '\x1A38', '\x5', '\x2C0', '\x161', '\x2', '\x1A38', 
		'\x1A39', '\a', '\x2EF', '\x2', '\x2', '\x1A39', '\x1A3B', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3A', '\x1A35', '\x3', '\x2', '\x2', '\x2', '\x1A3A', 
		'\x1A36', '\x3', '\x2', '\x2', '\x2', '\x1A3B', '\x1A3D', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3C', '\x1A3E', '\x5', '\x3F6', '\x1FC', '\x2', '\x1A3D', 
		'\x1A3C', '\x3', '\x2', '\x2', '\x2', '\x1A3D', '\x1A3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3E', '\x359', '\x3', '\x2', '\x2', '\x2', '\x1A3F', 
		'\x1A40', '\a', '\x13C', '\x2', '\x2', '\x1A40', '\x1A41', '\a', '\x254', 
		'\x2', '\x2', '\x1A41', '\x1A46', '\x5', '\x35E', '\x1B0', '\x2', '\x1A42', 
		'\x1A43', '\a', '\x2F4', '\x2', '\x2', '\x1A43', '\x1A45', '\x5', '\x35E', 
		'\x1B0', '\x2', '\x1A44', '\x1A42', '\x3', '\x2', '\x2', '\x2', '\x1A45', 
		'\x1A48', '\x3', '\x2', '\x2', '\x2', '\x1A46', '\x1A44', '\x3', '\x2', 
		'\x2', '\x2', '\x1A46', '\x1A47', '\x3', '\x2', '\x2', '\x2', '\x1A47', 
		'\x1A49', '\x3', '\x2', '\x2', '\x2', '\x1A48', '\x1A46', '\x3', '\x2', 
		'\x2', '\x2', '\x1A49', '\x1A4A', '\a', '\x107', '\x2', '\x2', '\x1A4A', 
		'\x1A4B', '\x5', '\x360', '\x1B1', '\x2', '\x1A4B', '\x1A4D', '\a', '\x15D', 
		'\x2', '\x2', '\x1A4C', '\x1A4E', '\x5', '\x35C', '\x1AF', '\x2', '\x1A4D', 
		'\x1A4C', '\x3', '\x2', '\x2', '\x2', '\x1A4D', '\x1A4E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A4E', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x1A4F', 
		'\x1A50', '\a', '\x299', '\x2', '\x2', '\x1A50', '\x1A53', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1A51', '\x1A53', '\a', '\x189', '\x2', '\x2', '\x1A52', 
		'\x1A4F', '\x3', '\x2', '\x2', '\x2', '\x1A52', '\x1A51', '\x3', '\x2', 
		'\x2', '\x2', '\x1A53', '\x35D', '\x3', '\x2', '\x2', '\x2', '\x1A54', 
		'\x1A56', '\x5', '\x410', '\x209', '\x2', '\x1A55', '\x1A57', '\x5', '\x3F2', 
		'\x1FA', '\x2', '\x1A56', '\x1A55', '\x3', '\x2', '\x2', '\x2', '\x1A56', 
		'\x1A57', '\x3', '\x2', '\x2', '\x2', '\x1A57', '\x35F', '\x3', '\x2', 
		'\x2', '\x2', '\x1A58', '\x1A59', '\a', '\x205', '\x2', '\x2', '\x1A59', 
		'\x1A65', '\a', '\x222', '\x2', '\x2', '\x1A5A', '\x1A5B', '\a', '\x205', 
		'\x2', '\x2', '\x1A5B', '\x1A65', '\a', '\xC1', '\x2', '\x2', '\x1A5C', 
		'\x1A5E', '\a', '\x222', '\x2', '\x2', '\x1A5D', '\x1A5F', '\a', '\x283', 
		'\x2', '\x2', '\x1A5E', '\x1A5D', '\x3', '\x2', '\x2', '\x2', '\x1A5E', 
		'\x1A5F', '\x3', '\x2', '\x2', '\x2', '\x1A5F', '\x1A65', '\x3', '\x2', 
		'\x2', '\x2', '\x1A60', '\x1A61', '\a', '\x222', '\x2', '\x2', '\x1A61', 
		'\x1A62', '\a', '\x205', '\x2', '\x2', '\x1A62', '\x1A65', '\a', '\xC1', 
		'\x2', '\x2', '\x1A63', '\x1A65', '\a', '\xC1', '\x2', '\x2', '\x1A64', 
		'\x1A58', '\x3', '\x2', '\x2', '\x2', '\x1A64', '\x1A5A', '\x3', '\x2', 
		'\x2', '\x2', '\x1A64', '\x1A5C', '\x3', '\x2', '\x2', '\x2', '\x1A64', 
		'\x1A60', '\x3', '\x2', '\x2', '\x2', '\x1A64', '\x1A63', '\x3', '\x2', 
		'\x2', '\x2', '\x1A65', '\x361', '\x3', '\x2', '\x2', '\x2', '\x1A66', 
		'\x1A6D', '\x5', '\x36C', '\x1B7', '\x2', '\x1A67', '\x1A68', '\a', '\x197', 
		'\x2', '\x2', '\x1A68', '\x1A69', '\a', '\x2EE', '\x2', '\x2', '\x1A69', 
		'\x1A6A', '\x5', '\x36C', '\x1B7', '\x2', '\x1A6A', '\x1A6B', '\a', '\x2EF', 
		'\x2', '\x2', '\x1A6B', '\x1A6D', '\x3', '\x2', '\x2', '\x2', '\x1A6C', 
		'\x1A66', '\x3', '\x2', '\x2', '\x2', '\x1A6C', '\x1A67', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6D', '\x1A6F', '\x3', '\x2', '\x2', '\x2', '\x1A6E', 
		'\x1A70', '\x5', '\x3F6', '\x1FC', '\x2', '\x1A6F', '\x1A6E', '\x3', '\x2', 
		'\x2', '\x2', '\x1A6F', '\x1A70', '\x3', '\x2', '\x2', '\x2', '\x1A70', 
		'\x363', '\x3', '\x2', '\x2', '\x2', '\x1A71', '\x1A72', '\t', 'J', '\x2', 
		'\x2', '\x1A72', '\x1A73', '\x5', '\x378', '\x1BD', '\x2', '\x1A73', '\x1A74', 
		'\x5', '\x3FA', '\x1FE', '\x2', '\x1A74', '\x365', '\x3', '\x2', '\x2', 
		'\x2', '\x1A75', '\x1A76', '\a', '\x13E', '\x2', '\x2', '\x1A76', '\x1A78', 
		'\a', '\xB8', '\x2', '\x2', '\x1A77', '\x1A79', '\x5', '\x368', '\x1B5', 
		'\x2', '\x1A78', '\x1A77', '\x3', '\x2', '\x2', '\x2', '\x1A78', '\x1A79', 
		'\x3', '\x2', '\x2', '\x2', '\x1A79', '\x1A7B', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7A', '\x1A7C', '\x5', '\x37A', '\x1BE', '\x2', '\x1A7B', '\x1A7A', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7B', '\x1A7C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7C', '\x1A7E', '\x3', '\x2', '\x2', '\x2', '\x1A7D', '\x1A7F', '\x5', 
		'\x36A', '\x1B6', '\x2', '\x1A7E', '\x1A7D', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7E', '\x1A7F', '\x3', '\x2', '\x2', '\x2', '\x1A7F', '\x367', '\x3', 
		'\x2', '\x2', '\x2', '\x1A80', '\x1A81', '\a', '\x117', '\x2', '\x2', 
		'\x1A81', '\x1A82', '\x5', '\x410', '\x209', '\x2', '\x1A82', '\x369', 
		'\x3', '\x2', '\x2', '\x2', '\x1A83', '\x1A84', '\a', '\x1E8', '\x2', 
		'\x2', '\x1A84', '\x1A87', '\a', '\x130', '\x2', '\x2', '\x1A85', '\x1A88', 
		'\a', '\x27D', '\x2', '\x2', '\x1A86', '\x1A88', '\x5', '\x37A', '\x1BE', 
		'\x2', '\x1A87', '\x1A85', '\x3', '\x2', '\x2', '\x2', '\x1A87', '\x1A86', 
		'\x3', '\x2', '\x2', '\x2', '\x1A88', '\x36B', '\x3', '\x2', '\x2', '\x2', 
		'\x1A89', '\x1A96', '\x5', '\x36E', '\x1B8', '\x2', '\x1A8A', '\x1A8B', 
		'\a', '\x2EE', '\x2', '\x2', '\x1A8B', '\x1A8D', '\x5', '\x2C0', '\x161', 
		'\x2', '\x1A8C', '\x1A8E', '\x5', '\x370', '\x1B9', '\x2', '\x1A8D', '\x1A8C', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8D', '\x1A8E', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8E', '\x1A8F', '\x3', '\x2', '\x2', '\x2', '\x1A8F', '\x1A90', '\a', 
		'\x2EF', '\x2', '\x2', '\x1A90', '\x1A96', '\x3', '\x2', '\x2', '\x2', 
		'\x1A91', '\x1A93', '\x5', '\x410', '\x209', '\x2', '\x1A92', '\x1A94', 
		'\x5', '\x372', '\x1BA', '\x2', '\x1A93', '\x1A92', '\x3', '\x2', '\x2', 
		'\x2', '\x1A93', '\x1A94', '\x3', '\x2', '\x2', '\x2', '\x1A94', '\x1A96', 
		'\x3', '\x2', '\x2', '\x2', '\x1A95', '\x1A89', '\x3', '\x2', '\x2', '\x2', 
		'\x1A95', '\x1A8A', '\x3', '\x2', '\x2', '\x2', '\x1A95', '\x1A91', '\x3', 
		'\x2', '\x2', '\x2', '\x1A96', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x1A97', 
		'\x1AA4', '\t', ']', '\x2', '\x2', '\x1A98', '\x1A99', '\a', '\x2EE', 
		'\x2', '\x2', '\x1A99', '\x1A9A', '\x5', '\x16C', '\xB7', '\x2', '\x1A9A', 
		'\x1A9B', '\a', '\x2EF', '\x2', '\x2', '\x1A9B', '\x1AA5', '\x3', '\x2', 
		'\x2', '\x2', '\x1A9C', '\x1A9D', '\a', '\x2EE', '\x2', '\x2', '\x1A9D', 
		'\x1A9E', '\x5', '\x37A', '\x1BE', '\x2', '\x1A9E', '\x1AA2', '\a', '\x2EF', 
		'\x2', '\x2', '\x1A9F', '\x1AA0', '\a', '\x2EE', '\x2', '\x2', '\x1AA0', 
		'\x1AA1', '\a', '\x2F2', '\x2', '\x2', '\x1AA1', '\x1AA3', '\a', '\x2EF', 
		'\x2', '\x2', '\x1AA2', '\x1A9F', '\x3', '\x2', '\x2', '\x2', '\x1AA2', 
		'\x1AA3', '\x3', '\x2', '\x2', '\x2', '\x1AA3', '\x1AA5', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA4', '\x1A98', '\x3', '\x2', '\x2', '\x2', '\x1AA4', 
		'\x1A9C', '\x3', '\x2', '\x2', '\x2', '\x1AA5', '\x36F', '\x3', '\x2', 
		'\x2', '\x2', '\x1AA6', '\x1AAF', '\a', '\x2A2', '\x2', '\x2', '\x1AA7', 
		'\x1AA8', '\a', '\x1DD', '\x2', '\x2', '\x1AA8', '\x1AB0', '\a', '\x197', 
		'\x2', '\x2', '\x1AA9', '\x1AAA', '\a', 'M', '\x2', '\x2', '\x1AAA', '\x1AAD', 
		'\a', '\x19C', '\x2', '\x2', '\x1AAB', '\x1AAC', '\a', '\x65', '\x2', 
		'\x2', '\x1AAC', '\x1AAE', '\x5', '\x406', '\x204', '\x2', '\x1AAD', '\x1AAB', 
		'\x3', '\x2', '\x2', '\x2', '\x1AAD', '\x1AAE', '\x3', '\x2', '\x2', '\x2', 
		'\x1AAE', '\x1AB0', '\x3', '\x2', '\x2', '\x2', '\x1AAF', '\x1AA7', '\x3', 
		'\x2', '\x2', '\x2', '\x1AAF', '\x1AA9', '\x3', '\x2', '\x2', '\x2', '\x1AB0', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x1AB1', '\x1AB3', '\a', '\x209', 
		'\x2', '\x2', '\x1AB2', '\x1AB4', '\a', '\x36', '\x2', '\x2', '\x1AB3', 
		'\x1AB2', '\x3', '\x2', '\x2', '\x2', '\x1AB3', '\x1AB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB4', '\x1AB5', '\x3', '\x2', '\x2', '\x2', '\x1AB5', 
		'\x1AB6', '\a', '\x2EE', '\x2', '\x2', '\x1AB6', '\x1AB9', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1AB7', '\x1AB8', '\a', '\x2F4', '\x2', '\x2', '\x1AB8', 
		'\x1ABA', '\x5', '\x37A', '\x1BE', '\x2', '\x1AB9', '\x1AB7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB9', '\x1ABA', '\x3', '\x2', '\x2', '\x2', '\x1ABA', 
		'\x1ABB', '\x3', '\x2', '\x2', '\x2', '\x1ABB', '\x1ABD', '\a', '\x2EF', 
		'\x2', '\x2', '\x1ABC', '\x1ABE', '\x5', '\x374', '\x1BB', '\x2', '\x1ABD', 
		'\x1ABC', '\x3', '\x2', '\x2', '\x2', '\x1ABD', '\x1ABE', '\x3', '\x2', 
		'\x2', '\x2', '\x1ABE', '\x373', '\x3', '\x2', '\x2', '\x2', '\x1ABF', 
		'\x1AC0', '\a', '\x214', '\x2', '\x2', '\x1AC0', '\x1AC1', '\a', '\x2EE', 
		'\x2', '\x2', '\x1AC1', '\x1AC2', '\x5', '\x37A', '\x1BE', '\x2', '\x1AC2', 
		'\x1AC3', '\a', '\x2EF', '\x2', '\x2', '\x1AC3', '\x375', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC4', '\x1AC5', '\x5', '\x37A', '\x1BE', '\x2', '\x1AC5', 
		'\x377', '\x3', '\x2', '\x2', '\x2', '\x1AC6', '\x1ACB', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1AC7', '\x1AC8', '\a', '\x2F4', '\x2', '\x2', '\x1AC8', 
		'\x1ACA', '\x5', '\x37A', '\x1BE', '\x2', '\x1AC9', '\x1AC7', '\x3', '\x2', 
		'\x2', '\x2', '\x1ACA', '\x1ACD', '\x3', '\x2', '\x2', '\x2', '\x1ACB', 
		'\x1AC9', '\x3', '\x2', '\x2', '\x2', '\x1ACB', '\x1ACC', '\x3', '\x2', 
		'\x2', '\x2', '\x1ACC', '\x379', '\x3', '\x2', '\x2', '\x2', '\x1ACD', 
		'\x1ACB', '\x3', '\x2', '\x2', '\x2', '\x1ACE', '\x1AD2', '\x5', '\x37C', 
		'\x1BF', '\x2', '\x1ACF', '\x1AD2', '\x5', '\x37E', '\x1C0', '\x2', '\x1AD0', 
		'\x1AD2', '\a', '\x2E2', '\x2', '\x2', '\x1AD1', '\x1ACE', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD1', '\x1ACF', '\x3', '\x2', '\x2', '\x2', '\x1AD1', 
		'\x1AD0', '\x3', '\x2', '\x2', '\x2', '\x1AD2', '\x37B', '\x3', '\x2', 
		'\x2', '\x2', '\x1AD3', '\x1AD4', '\a', 'y', '\x2', '\x2', '\x1AD4', '\x1AD5', 
		'\a', '\x2EE', '\x2', '\x2', '\x1AD5', '\x1AD6', '\x5', '\x16C', '\xB7', 
		'\x2', '\x1AD6', '\x1AD7', '\a', '\x2EF', '\x2', '\x2', '\x1AD7', '\x37D', 
		'\x3', '\x2', '\x2', '\x2', '\x1AD8', '\x1AD9', '\b', '\x1C0', '\x1', 
		'\x2', '\x1AD9', '\x1AFB', '\x5', '\x380', '\x1C1', '\x2', '\x1ADA', '\x1ADC', 
		'\a', '\x11A', '\x2', '\x2', '\x1ADB', '\x1ADD', '\a', '\x187', '\x2', 
		'\x2', '\x1ADC', '\x1ADB', '\x3', '\x2', '\x2', '\x2', '\x1ADC', '\x1ADD', 
		'\x3', '\x2', '\x2', '\x2', '\x1ADD', '\x1AF7', '\x3', '\x2', '\x2', '\x2', 
		'\x1ADE', '\x1AF8', '\a', '\x18A', '\x2', '\x2', '\x1ADF', '\x1AF8', '\a', 
		'\x165', '\x2', '\x2', '\x1AE0', '\x1AF8', '\a', '\x1CB', '\x2', '\x2', 
		'\x1AE1', '\x1AF8', '\a', '\x105', '\x2', '\x2', '\x1AE2', '\x1AE3', '\a', 
		'\r', '\x2', '\x2', '\x1AE3', '\x1AF8', '\a', '\x21F', '\x2', '\x2', '\x1AE4', 
		'\x1AF8', '\a', '\xAF', '\x2', '\x2', '\x1AE5', '\x1AE7', '\a', '\x192', 
		'\x2', '\x2', '\x1AE6', '\x1AE8', '\a', '\x276', '\x2', '\x2', '\x1AE7', 
		'\x1AE6', '\x3', '\x2', '\x2', '\x2', '\x1AE7', '\x1AE8', '\x3', '\x2', 
		'\x2', '\x2', '\x1AE8', '\x1AE9', '\x3', '\x2', '\x2', '\x2', '\x1AE9', 
		'\x1AEB', '\a', '\x2EE', '\x2', '\x2', '\x1AEA', '\x1AEC', '\a', '\x197', 
		'\x2', '\x2', '\x1AEB', '\x1AEA', '\x3', '\x2', '\x2', '\x2', '\x1AEB', 
		'\x1AEC', '\x3', '\x2', '\x2', '\x2', '\x1AEC', '\x1AED', '\x3', '\x2', 
		'\x2', '\x2', '\x1AED', '\x1AF2', '\x5', '\x44E', '\x228', '\x2', '\x1AEE', 
		'\x1AEF', '\a', '\x2F4', '\x2', '\x2', '\x1AEF', '\x1AF1', '\x5', '\x44E', 
		'\x228', '\x2', '\x1AF0', '\x1AEE', '\x3', '\x2', '\x2', '\x2', '\x1AF1', 
		'\x1AF4', '\x3', '\x2', '\x2', '\x2', '\x1AF2', '\x1AF0', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF2', '\x1AF3', '\x3', '\x2', '\x2', '\x2', '\x1AF3', 
		'\x1AF5', '\x3', '\x2', '\x2', '\x2', '\x1AF4', '\x1AF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF5', '\x1AF6', '\a', '\x2EF', '\x2', '\x2', '\x1AF6', 
		'\x1AF8', '\x3', '\x2', '\x2', '\x2', '\x1AF7', '\x1ADE', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF7', '\x1ADF', '\x3', '\x2', '\x2', '\x2', '\x1AF7', 
		'\x1AE0', '\x3', '\x2', '\x2', '\x2', '\x1AF7', '\x1AE1', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF7', '\x1AE2', '\x3', '\x2', '\x2', '\x2', '\x1AF7', 
		'\x1AE4', '\x3', '\x2', '\x2', '\x2', '\x1AF7', '\x1AE5', '\x3', '\x2', 
		'\x2', '\x2', '\x1AF8', '\x1AFA', '\x3', '\x2', '\x2', '\x2', '\x1AF9', 
		'\x1ADA', '\x3', '\x2', '\x2', '\x2', '\x1AFA', '\x1AFD', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFB', '\x1AF9', '\x3', '\x2', '\x2', '\x2', '\x1AFB', 
		'\x1AFC', '\x3', '\x2', '\x2', '\x2', '\x1AFC', '\x1B01', '\x3', '\x2', 
		'\x2', '\x2', '\x1AFD', '\x1AFB', '\x3', '\x2', '\x2', '\x2', '\x1AFE', 
		'\x1AFF', '\a', '\x187', '\x2', '\x2', '\x1AFF', '\x1B01', '\x5', '\x37E', 
		'\x1C0', '\x5', '\x1B00', '\x1AD8', '\x3', '\x2', '\x2', '\x2', '\x1B00', 
		'\x1AFE', '\x3', '\x2', '\x2', '\x2', '\x1B01', '\x1B0A', '\x3', '\x2', 
		'\x2', '\x2', '\x1B02', '\x1B03', '\f', '\x4', '\x2', '\x2', '\x1B03', 
		'\x1B04', '\a', '\x13', '\x2', '\x2', '\x1B04', '\x1B09', '\x5', '\x37E', 
		'\x1C0', '\x5', '\x1B05', '\x1B06', '\f', '\x3', '\x2', '\x2', '\x1B06', 
		'\x1B07', '\a', '\x1A1', '\x2', '\x2', '\x1B07', '\x1B09', '\x5', '\x37E', 
		'\x1C0', '\x4', '\x1B08', '\x1B02', '\x3', '\x2', '\x2', '\x2', '\x1B08', 
		'\x1B05', '\x3', '\x2', '\x2', '\x2', '\x1B09', '\x1B0C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0A', '\x1B08', '\x3', '\x2', '\x2', '\x2', '\x1B0A', 
		'\x1B0B', '\x3', '\x2', '\x2', '\x2', '\x1B0B', '\x37F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0C', '\x1B0A', '\x3', '\x2', '\x2', '\x2', '\x1B0D', 
		'\x1B13', '\x5', '\x382', '\x1C2', '\x2', '\x1B0E', '\x1B10', '\t', '^', 
		'\x2', '\x2', '\x1B0F', '\x1B11', '\a', '\x192', '\x2', '\x2', '\x1B10', 
		'\x1B0F', '\x3', '\x2', '\x2', '\x2', '\x1B10', '\x1B11', '\x3', '\x2', 
		'\x2', '\x2', '\x1B11', '\x1B12', '\x3', '\x2', '\x2', '\x2', '\x1B12', 
		'\x1B14', '\x5', '\x386', '\x1C4', '\x2', '\x1B13', '\x1B0E', '\x3', '\x2', 
		'\x2', '\x2', '\x1B13', '\x1B14', '\x3', '\x2', '\x2', '\x2', '\x1B14', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x1B15', '\x1B16', '\b', '\x1C2', 
		'\x1', '\x2', '\x1B16', '\x1B17', '\x5', '\x384', '\x1C3', '\x2', '\x1B17', 
		'\x1B1E', '\x3', '\x2', '\x2', '\x2', '\x1B18', '\x1B19', '\f', '\x4', 
		'\x2', '\x2', '\x1B19', '\x1B1A', '\x5', '\x388', '\x1C5', '\x2', '\x1B1A', 
		'\x1B1B', '\x5', '\x382', '\x1C2', '\x5', '\x1B1B', '\x1B1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1C', '\x1B18', '\x3', '\x2', '\x2', '\x2', '\x1B1D', 
		'\x1B20', '\x3', '\x2', '\x2', '\x2', '\x1B1E', '\x1B1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1E', '\x1B1F', '\x3', '\x2', '\x2', '\x2', '\x1B1F', 
		'\x383', '\x3', '\x2', '\x2', '\x2', '\x1B20', '\x1B1E', '\x3', '\x2', 
		'\x2', '\x2', '\x1B21', '\x1B31', '\x5', '\x386', '\x1C4', '\x2', '\x1B22', 
		'\x1B24', '\a', '\x187', '\x2', '\x2', '\x1B23', '\x1B22', '\x3', '\x2', 
		'\x2', '\x2', '\x1B23', '\x1B24', '\x3', '\x2', '\x2', '\x2', '\x1B24', 
		'\x1B2F', '\x3', '\x2', '\x2', '\x2', '\x1B25', '\x1B26', '\a', '\x107', 
		'\x2', '\x2', '\x1B26', '\x1B30', '\x5', '\x38C', '\x1C7', '\x2', '\x1B27', 
		'\x1B28', '\a', '.', '\x2', '\x2', '\x1B28', '\x1B30', '\x5', '\x38E', 
		'\x1C8', '\x2', '\x1B29', '\x1B2A', '\t', '_', '\x2', '\x2', '\x1B2A', 
		'\x1B2D', '\x5', '\x386', '\x1C4', '\x2', '\x1B2B', '\x1B2C', '\a', '\xB9', 
		'\x2', '\x2', '\x1B2C', '\x1B2E', '\x5', '\x386', '\x1C4', '\x2', '\x1B2D', 
		'\x1B2B', '\x3', '\x2', '\x2', '\x2', '\x1B2D', '\x1B2E', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2E', '\x1B30', '\x3', '\x2', '\x2', '\x2', '\x1B2F', 
		'\x1B25', '\x3', '\x2', '\x2', '\x2', '\x1B2F', '\x1B27', '\x3', '\x2', 
		'\x2', '\x2', '\x1B2F', '\x1B29', '\x3', '\x2', '\x2', '\x2', '\x1B30', 
		'\x1B32', '\x3', '\x2', '\x2', '\x2', '\x1B31', '\x1B23', '\x3', '\x2', 
		'\x2', '\x2', '\x1B31', '\x1B32', '\x3', '\x2', '\x2', '\x2', '\x1B32', 
		'\x385', '\x3', '\x2', '\x2', '\x2', '\x1B33', '\x1B34', '\b', '\x1C4', 
		'\x1', '\x2', '\x1B34', '\x1B3D', '\x5', '\x38A', '\x1C6', '\x2', '\x1B35', 
		'\x1B3A', '\a', '\x1C', '\x2', '\x2', '\x1B36', '\x1B3B', '\a', '\x137', 
		'\x2', '\x2', '\x1B37', '\x1B38', '\a', '\x261', '\x2', '\x2', '\x1B38', 
		'\x1B39', '\a', '\x2BB', '\x2', '\x2', '\x1B39', '\x1B3B', '\x5', '\x386', 
		'\x1C4', '\x2', '\x1B3A', '\x1B36', '\x3', '\x2', '\x2', '\x2', '\x1B3A', 
		'\x1B37', '\x3', '\x2', '\x2', '\x2', '\x1B3B', '\x1B3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3C', '\x1B3E', '\x5', '\x390', '\x1C9', '\x2', '\x1B3D', 
		'\x1B35', '\x3', '\x2', '\x2', '\x2', '\x1B3D', '\x1B3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1B3D', '\x1B3E', '\x3', '\x2', '\x2', '\x2', '\x1B3E', 
		'\x1B4B', '\x3', '\x2', '\x2', '\x2', '\x1B3F', '\x1B40', '\f', '\x5', 
		'\x2', '\x2', '\x1B40', '\x1B41', '\t', '`', '\x2', '\x2', '\x1B41', '\x1B4A', 
		'\x5', '\x386', '\x1C4', '\x6', '\x1B42', '\x1B43', '\f', '\x4', '\x2', 
		'\x2', '\x1B43', '\x1B44', '\t', '\x61', '\x2', '\x2', '\x1B44', '\x1B4A', 
		'\x5', '\x386', '\x1C4', '\x5', '\x1B45', '\x1B46', '\f', '\x3', '\x2', 
		'\x2', '\x1B46', '\x1B47', '\a', '\x301', '\x2', '\x2', '\x1B47', '\x1B48', 
		'\a', '\x301', '\x2', '\x2', '\x1B48', '\x1B4A', '\x5', '\x386', '\x1C4', 
		'\x4', '\x1B49', '\x1B3F', '\x3', '\x2', '\x2', '\x2', '\x1B49', '\x1B42', 
		'\x3', '\x2', '\x2', '\x2', '\x1B49', '\x1B45', '\x3', '\x2', '\x2', '\x2', 
		'\x1B4A', '\x1B4D', '\x3', '\x2', '\x2', '\x2', '\x1B4B', '\x1B49', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4B', '\x1B4C', '\x3', '\x2', '\x2', '\x2', '\x1B4C', 
		'\x387', '\x3', '\x2', '\x2', '\x2', '\x1B4D', '\x1B4B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4E', '\x1B5D', '\a', '\x302', '\x2', '\x2', '\x1B4F', 
		'\x1B57', '\a', '\x2F9', '\x2', '\x2', '\x1B50', '\x1B51', '\a', '\x2FE', 
		'\x2', '\x2', '\x1B51', '\x1B57', '\a', '\x2FD', '\x2', '\x2', '\x1B52', 
		'\x1B53', '\a', '\x2FC', '\x2', '\x2', '\x1B53', '\x1B57', '\a', '\x302', 
		'\x2', '\x2', '\x1B54', '\x1B55', '\a', '\x2FA', '\x2', '\x2', '\x1B55', 
		'\x1B57', '\a', '\x302', '\x2', '\x2', '\x1B56', '\x1B4F', '\x3', '\x2', 
		'\x2', '\x2', '\x1B56', '\x1B50', '\x3', '\x2', '\x2', '\x2', '\x1B56', 
		'\x1B52', '\x3', '\x2', '\x2', '\x2', '\x1B56', '\x1B54', '\x3', '\x2', 
		'\x2', '\x2', '\x1B57', '\x1B5D', '\x3', '\x2', '\x2', '\x2', '\x1B58', 
		'\x1B5A', '\t', '\x62', '\x2', '\x2', '\x1B59', '\x1B5B', '\a', '\x302', 
		'\x2', '\x2', '\x1B5A', '\x1B59', '\x3', '\x2', '\x2', '\x2', '\x1B5A', 
		'\x1B5B', '\x3', '\x2', '\x2', '\x2', '\x1B5B', '\x1B5D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5C', '\x1B4E', '\x3', '\x2', '\x2', '\x2', '\x1B5C', 
		'\x1B56', '\x3', '\x2', '\x2', '\x2', '\x1B5C', '\x1B58', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5D', '\x389', '\x3', '\x2', '\x2', '\x2', '\x1B5E', 
		'\x1B63', '\x5', '\x398', '\x1CD', '\x2', '\x1B5F', '\x1B60', '\a', '\x303', 
		'\x2', '\x2', '\x1B60', '\x1B61', '\x5', '\x392', '\x1CA', '\x2', '\x1B61', 
		'\x1B62', '\a', '\x304', '\x2', '\x2', '\x1B62', '\x1B64', '\x3', '\x2', 
		'\x2', '\x2', '\x1B63', '\x1B5F', '\x3', '\x2', '\x2', '\x2', '\x1B63', 
		'\x1B64', '\x3', '\x2', '\x2', '\x2', '\x1B64', '\x38B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B65', '\x1B66', '\a', '\x2EE', '\x2', '\x2', '\x1B66', 
		'\x1B67', '\x5', '\x16C', '\xB7', '\x2', '\x1B67', '\x1B68', '\a', '\x2EF', 
		'\x2', '\x2', '\x1B68', '\x1B78', '\x3', '\x2', '\x2', '\x2', '\x1B69', 
		'\x1B6A', '\a', '\x2EE', '\x2', '\x2', '\x1B6A', '\x1B6F', '\x5', '\x386', 
		'\x1C4', '\x2', '\x1B6B', '\x1B6C', '\a', '\x2F4', '\x2', '\x2', '\x1B6C', 
		'\x1B6E', '\x5', '\x386', '\x1C4', '\x2', '\x1B6D', '\x1B6B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B6E', '\x1B71', '\x3', '\x2', '\x2', '\x2', '\x1B6F', 
		'\x1B6D', '\x3', '\x2', '\x2', '\x2', '\x1B6F', '\x1B70', '\x3', '\x2', 
		'\x2', '\x2', '\x1B70', '\x1B72', '\x3', '\x2', '\x2', '\x2', '\x1B71', 
		'\x1B6F', '\x3', '\x2', '\x2', '\x2', '\x1B72', '\x1B73', '\a', '\x2EF', 
		'\x2', '\x2', '\x1B73', '\x1B78', '\x3', '\x2', '\x2', '\x2', '\x1B74', 
		'\x1B78', '\x5', '\x466', '\x234', '\x2', '\x1B75', '\x1B78', '\x5', '\x456', 
		'\x22C', '\x2', '\x1B76', '\x1B78', '\x5', '\x458', '\x22D', '\x2', '\x1B77', 
		'\x1B65', '\x3', '\x2', '\x2', '\x2', '\x1B77', '\x1B69', '\x3', '\x2', 
		'\x2', '\x2', '\x1B77', '\x1B74', '\x3', '\x2', '\x2', '\x2', '\x1B77', 
		'\x1B75', '\x3', '\x2', '\x2', '\x2', '\x1B77', '\x1B76', '\x3', '\x2', 
		'\x2', '\x2', '\x1B78', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x1B79', 
		'\x1B7A', '\x5', '\x386', '\x1C4', '\x2', '\x1B7A', '\x1B7B', '\a', '\x13', 
		'\x2', '\x2', '\x1B7B', '\x1B7C', '\x5', '\x386', '\x1C4', '\x2', '\x1B7C', 
		'\x38F', '\x3', '\x2', '\x2', '\x2', '\x1B7D', '\x1B82', '\a', '\x80', 
		'\x2', '\x2', '\x1B7E', '\x1B7F', '\a', '\x2EE', '\x2', '\x2', '\x1B7F', 
		'\x1B80', '\x5', '\x386', '\x1C4', '\x2', '\x1B80', '\x1B81', '\a', '\x2EF', 
		'\x2', '\x2', '\x1B81', '\x1B83', '\x3', '\x2', '\x2', '\x2', '\x1B82', 
		'\x1B7E', '\x3', '\x2', '\x2', '\x2', '\x1B82', '\x1B83', '\x3', '\x2', 
		'\x2', '\x2', '\x1B83', '\x1B84', '\x3', '\x2', '\x2', '\x2', '\x1B84', 
		'\x1B85', '\a', '\x26A', '\x2', '\x2', '\x1B85', '\x1B8A', '\a', '\x212', 
		'\x2', '\x2', '\x1B86', '\x1B87', '\a', '\x2EE', '\x2', '\x2', '\x1B87', 
		'\x1B88', '\x5', '\x386', '\x1C4', '\x2', '\x1B88', '\x1B89', '\a', '\x2EF', 
		'\x2', '\x2', '\x1B89', '\x1B8B', '\x3', '\x2', '\x2', '\x2', '\x1B8A', 
		'\x1B86', '\x3', '\x2', '\x2', '\x2', '\x1B8A', '\x1B8B', '\x3', '\x2', 
		'\x2', '\x2', '\x1B8B', '\x1B96', '\x3', '\x2', '\x2', '\x2', '\x1B8C', 
		'\x1B91', '\a', '\x2B7', '\x2', '\x2', '\x1B8D', '\x1B8E', '\a', '\x2EE', 
		'\x2', '\x2', '\x1B8E', '\x1B8F', '\x5', '\x386', '\x1C4', '\x2', '\x1B8F', 
		'\x1B90', '\a', '\x2EF', '\x2', '\x2', '\x1B90', '\x1B92', '\x3', '\x2', 
		'\x2', '\x2', '\x1B91', '\x1B8D', '\x3', '\x2', '\x2', '\x2', '\x1B91', 
		'\x1B92', '\x3', '\x2', '\x2', '\x2', '\x1B92', '\x1B93', '\x3', '\x2', 
		'\x2', '\x2', '\x1B93', '\x1B94', '\a', '\x26A', '\x2', '\x2', '\x1B94', 
		'\x1B96', '\a', '\x160', '\x2', '\x2', '\x1B95', '\x1B7D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B95', '\x1B8C', '\x3', '\x2', '\x2', '\x2', '\x1B96', 
		'\x391', '\x3', '\x2', '\x2', '\x2', '\x1B97', '\x1B9A', '\a', '\x14', 
		'\x2', '\x2', '\x1B98', '\x1B9A', '\x5', '\x37A', '\x1BE', '\x2', '\x1B99', 
		'\x1B97', '\x3', '\x2', '\x2', '\x2', '\x1B99', '\x1B98', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9A', '\x1BA2', '\x3', '\x2', '\x2', '\x2', '\x1B9B', 
		'\x1B9E', '\a', '\x2F4', '\x2', '\x2', '\x1B9C', '\x1B9F', '\a', '\x14', 
		'\x2', '\x2', '\x1B9D', '\x1B9F', '\x5', '\x37A', '\x1BE', '\x2', '\x1B9E', 
		'\x1B9C', '\x3', '\x2', '\x2', '\x2', '\x1B9E', '\x1B9D', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9F', '\x1BA1', '\x3', '\x2', '\x2', '\x2', '\x1BA0', 
		'\x1B9B', '\x3', '\x2', '\x2', '\x2', '\x1BA1', '\x1BA4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BA2', '\x1BA0', '\x3', '\x2', '\x2', '\x2', '\x1BA2', 
		'\x1BA3', '\x3', '\x2', '\x2', '\x2', '\x1BA3', '\x1BAF', '\x3', '\x2', 
		'\x2', '\x2', '\x1BA4', '\x1BA2', '\x3', '\x2', '\x2', '\x2', '\x1BA5', 
		'\x1BAA', '\x5', '\x394', '\x1CB', '\x2', '\x1BA6', '\x1BA7', '\a', '\x2F4', 
		'\x2', '\x2', '\x1BA7', '\x1BA9', '\x5', '\x394', '\x1CB', '\x2', '\x1BA8', 
		'\x1BA6', '\x3', '\x2', '\x2', '\x2', '\x1BA9', '\x1BAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1BAA', '\x1BA8', '\x3', '\x2', '\x2', '\x2', '\x1BAA', 
		'\x1BAB', '\x3', '\x2', '\x2', '\x2', '\x1BAB', '\x1BAF', '\x3', '\x2', 
		'\x2', '\x2', '\x1BAC', '\x1BAA', '\x3', '\x2', '\x2', '\x2', '\x1BAD', 
		'\x1BAF', '\x5', '\x396', '\x1CC', '\x2', '\x1BAE', '\x1B99', '\x3', '\x2', 
		'\x2', '\x2', '\x1BAE', '\x1BA5', '\x3', '\x2', '\x2', '\x2', '\x1BAE', 
		'\x1BAD', '\x3', '\x2', '\x2', '\x2', '\x1BAF', '\x393', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB0', '\x1BB1', '\a', '\xDC', '\x2', '\x2', '\x1BB1', 
		'\x1BC3', '\x5', '\x48A', '\x246', '\x2', '\x1BB2', '\x1BB3', '\a', '\x107', 
		'\x2', '\x2', '\x1BB3', '\x1BB5', '\a', '\x2EE', '\x2', '\x2', '\x1BB4', 
		'\x1BB6', '\x5', '\x378', '\x1BD', '\x2', '\x1BB5', '\x1BB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BB5', '\x1BB6', '\x3', '\x2', '\x2', '\x2', '\x1BB6', 
		'\x1BB7', '\x3', '\x2', '\x2', '\x2', '\x1BB7', '\x1BC4', '\a', '\x2EF', 
		'\x2', '\x2', '\x1BB8', '\x1BB9', '\a', '\x12F', '\x2', '\x2', '\x1BB9', 
		'\x1BBB', '\x5', '\x37A', '\x1BE', '\x2', '\x1BBA', '\x1BB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1BBA', '\x1BBB', '\x3', '\x2', '\x2', '\x2', '\x1BBB', 
		'\x1BBC', '\x3', '\x2', '\x2', '\x2', '\x1BBC', '\x1BBD', '\a', '\xE0', 
		'\x2', '\x2', '\x1BBD', '\x1BBE', '\x5', '\x37A', '\x1BE', '\x2', '\x1BBE', 
		'\x1BBF', '\a', '\x26A', '\x2', '\x2', '\x1BBF', '\x1BC0', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1BC0', '\x1BC1', '\t', '\x63', '\x2', '\x2', '\x1BC1', 
		'\x1BC2', '\x5', '\x37A', '\x1BE', '\x2', '\x1BC2', '\x1BC4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC3', '\x1BB2', '\x3', '\x2', '\x2', '\x2', '\x1BC3', 
		'\x1BBA', '\x3', '\x2', '\x2', '\x2', '\x1BC4', '\x395', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC5', '\x1BC6', '\a', '\xDC', '\x2', '\x2', '\x1BC6', 
		'\x1BC7', '\x5', '\x444', '\x223', '\x2', '\x1BC7', '\x1BC8', '\a', '\x107', 
		'\x2', '\x2', '\x1BC8', '\x1BCF', '\a', '\x2EE', '\x2', '\x2', '\x1BC9', 
		'\x1BD0', '\x5', '\x16C', '\xB7', '\x2', '\x1BCA', '\x1BCC', '\a', '\x2EE', 
		'\x2', '\x2', '\x1BCB', '\x1BCD', '\x5', '\x378', '\x1BD', '\x2', '\x1BCC', 
		'\x1BCB', '\x3', '\x2', '\x2', '\x2', '\x1BCC', '\x1BCD', '\x3', '\x2', 
		'\x2', '\x2', '\x1BCD', '\x1BCE', '\x3', '\x2', '\x2', '\x2', '\x1BCE', 
		'\x1BD0', '\a', '\x2EF', '\x2', '\x2', '\x1BCF', '\x1BC9', '\x3', '\x2', 
		'\x2', '\x2', '\x1BCF', '\x1BCA', '\x3', '\x2', '\x2', '\x2', '\x1BD0', 
		'\x1BD1', '\x3', '\x2', '\x2', '\x2', '\x1BD1', '\x1BD2', '\a', '\x2EF', 
		'\x2', '\x2', '\x1BD2', '\x397', '\x3', '\x2', '\x2', '\x2', '\x1BD3', 
		'\x1BD4', '\t', '\x61', '\x2', '\x2', '\x1BD4', '\x1BE4', '\x5', '\x398', 
		'\x1CD', '\x2', '\x1BD5', '\x1BD6', '\a', '\x1CF', '\x2', '\x2', '\x1BD6', 
		'\x1BE4', '\x5', '\x398', '\x1CD', '\x2', '\x1BD7', '\x1BD8', '\a', '\x62', 
		'\x2', '\x2', '\x1BD8', '\x1BE4', '\x5', '\x398', '\x1CD', '\x2', '\x1BD9', 
		'\x1BE4', '\x5', '\x3AA', '\x1D6', '\x2', '\x1BDA', '\x1BDB', '\a', '\x16D', 
		'\x2', '\x2', '\x1BDB', '\x1BE4', '\x5', '\x398', '\x1CD', '\x2', '\x1BDC', 
		'\x1BDD', '\a', '\x9E', '\x2', '\x2', '\x1BDD', '\x1BE4', '\x5', '\x398', 
		'\x1CD', '\x2', '\x1BDE', '\x1BDF', '\a', '\xE', '\x2', '\x2', '\x1BDF', 
		'\x1BE4', '\x5', '\x398', '\x1CD', '\x2', '\x1BE0', '\x1BE4', '\x5', '\x39A', 
		'\x1CE', '\x2', '\x1BE1', '\x1BE4', '\x5', '\x3A8', '\x1D5', '\x2', '\x1BE2', 
		'\x1BE4', '\x5', '\x3A6', '\x1D4', '\x2', '\x1BE3', '\x1BD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE3', '\x1BD5', '\x3', '\x2', '\x2', '\x2', '\x1BE3', 
		'\x1BD7', '\x3', '\x2', '\x2', '\x2', '\x1BE3', '\x1BD9', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE3', '\x1BDA', '\x3', '\x2', '\x2', '\x2', '\x1BE3', 
		'\x1BDC', '\x3', '\x2', '\x2', '\x2', '\x1BE3', '\x1BDE', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE3', '\x1BE0', '\x3', '\x2', '\x2', '\x2', '\x1BE3', 
		'\x1BE1', '\x3', '\x2', '\x2', '\x2', '\x1BE3', '\x1BE2', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE4', '\x399', '\x3', '\x2', '\x2', '\x2', '\x1BE5', 
		'\x1BE8', '\x5', '\x3A0', '\x1D1', '\x2', '\x1BE6', '\x1BE8', '\x5', '\x39C', 
		'\x1CF', '\x2', '\x1BE7', '\x1BE5', '\x3', '\x2', '\x2', '\x2', '\x1BE7', 
		'\x1BE6', '\x3', '\x2', '\x2', '\x2', '\x1BE8', '\x39B', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE9', '\x1BEB', '\x5', '\x422', '\x212', '\x2', '\x1BEA', 
		'\x1BE9', '\x3', '\x2', '\x2', '\x2', '\x1BEA', '\x1BEB', '\x3', '\x2', 
		'\x2', '\x2', '\x1BEB', '\x1BEC', '\x3', '\x2', '\x2', '\x2', '\x1BEC', 
		'\x1BED', '\a', '\x46', '\x2', '\x2', '\x1BED', '\x1BEF', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1BEE', '\x1BF0', '\x5', '\x39E', '\x1D0', '\x2', '\x1BEF', 
		'\x1BEE', '\x3', '\x2', '\x2', '\x2', '\x1BF0', '\x1BF1', '\x3', '\x2', 
		'\x2', '\x2', '\x1BF1', '\x1BEF', '\x3', '\x2', '\x2', '\x2', '\x1BF1', 
		'\x1BF2', '\x3', '\x2', '\x2', '\x2', '\x1BF2', '\x1BF4', '\x3', '\x2', 
		'\x2', '\x2', '\x1BF3', '\x1BF5', '\x5', '\x3A4', '\x1D3', '\x2', '\x1BF4', 
		'\x1BF3', '\x3', '\x2', '\x2', '\x2', '\x1BF4', '\x1BF5', '\x3', '\x2', 
		'\x2', '\x2', '\x1BF5', '\x1BF6', '\x3', '\x2', '\x2', '\x2', '\x1BF6', 
		'\x1BF8', '\a', '\xB4', '\x2', '\x2', '\x1BF7', '\x1BF9', '\a', '\x46', 
		'\x2', '\x2', '\x1BF8', '\x1BF7', '\x3', '\x2', '\x2', '\x2', '\x1BF8', 
		'\x1BF9', '\x3', '\x2', '\x2', '\x2', '\x1BF9', '\x1BFB', '\x3', '\x2', 
		'\x2', '\x2', '\x1BFA', '\x1BFC', '\x5', '\x422', '\x212', '\x2', '\x1BFB', 
		'\x1BFA', '\x3', '\x2', '\x2', '\x2', '\x1BFB', '\x1BFC', '\x3', '\x2', 
		'\x2', '\x2', '\x1BFC', '\x39D', '\x3', '\x2', '\x2', '\x2', '\x1BFD', 
		'\x1BFE', '\a', '\x29D', '\x2', '\x2', '\x1BFE', '\x1BFF', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1BFF', '\x1C02', '\a', '\x259', '\x2', '\x2', '\x1C00', 
		'\x1C03', '\x5', '\x268', '\x135', '\x2', '\x1C01', '\x1C03', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1C02', '\x1C00', '\x3', '\x2', '\x2', '\x2', '\x1C02', 
		'\x1C01', '\x3', '\x2', '\x2', '\x2', '\x1C03', '\x39F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C04', '\x1C06', '\x5', '\x422', '\x212', '\x2', '\x1C05', 
		'\x1C04', '\x3', '\x2', '\x2', '\x2', '\x1C05', '\x1C06', '\x3', '\x2', 
		'\x2', '\x2', '\x1C06', '\x1C07', '\x3', '\x2', '\x2', '\x2', '\x1C07', 
		'\x1C09', '\a', '\x46', '\x2', '\x2', '\x1C08', '\x1C0A', '\x5', '\x3A2', 
		'\x1D2', '\x2', '\x1C09', '\x1C08', '\x3', '\x2', '\x2', '\x2', '\x1C0A', 
		'\x1C0B', '\x3', '\x2', '\x2', '\x2', '\x1C0B', '\x1C09', '\x3', '\x2', 
		'\x2', '\x2', '\x1C0B', '\x1C0C', '\x3', '\x2', '\x2', '\x2', '\x1C0C', 
		'\x1C0E', '\x3', '\x2', '\x2', '\x2', '\x1C0D', '\x1C0F', '\x5', '\x3A4', 
		'\x1D3', '\x2', '\x1C0E', '\x1C0D', '\x3', '\x2', '\x2', '\x2', '\x1C0E', 
		'\x1C0F', '\x3', '\x2', '\x2', '\x2', '\x1C0F', '\x1C10', '\x3', '\x2', 
		'\x2', '\x2', '\x1C10', '\x1C12', '\a', '\xB4', '\x2', '\x2', '\x1C11', 
		'\x1C13', '\a', '\x46', '\x2', '\x2', '\x1C12', '\x1C11', '\x3', '\x2', 
		'\x2', '\x2', '\x1C12', '\x1C13', '\x3', '\x2', '\x2', '\x2', '\x1C13', 
		'\x1C15', '\x3', '\x2', '\x2', '\x2', '\x1C14', '\x1C16', '\x5', '\x422', 
		'\x212', '\x2', '\x1C15', '\x1C14', '\x3', '\x2', '\x2', '\x2', '\x1C15', 
		'\x1C16', '\x3', '\x2', '\x2', '\x2', '\x1C16', '\x3A1', '\x3', '\x2', 
		'\x2', '\x2', '\x1C17', '\x1C18', '\a', '\x29D', '\x2', '\x2', '\x1C18', 
		'\x1C19', '\x5', '\x37A', '\x1BE', '\x2', '\x1C19', '\x1C1C', '\a', '\x259', 
		'\x2', '\x2', '\x1C1A', '\x1C1D', '\x5', '\x268', '\x135', '\x2', '\x1C1B', 
		'\x1C1D', '\x5', '\x37A', '\x1BE', '\x2', '\x1C1C', '\x1C1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1C1C', '\x1C1B', '\x3', '\x2', '\x2', '\x2', '\x1C1D', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x1C1E', '\x1C21', '\a', '\xAD', 
		'\x2', '\x2', '\x1C1F', '\x1C22', '\x5', '\x268', '\x135', '\x2', '\x1C20', 
		'\x1C22', '\x5', '\x37A', '\x1BE', '\x2', '\x1C21', '\x1C1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C21', '\x1C20', '\x3', '\x2', '\x2', '\x2', '\x1C22', 
		'\x3A5', '\x3', '\x2', '\x2', '\x2', '\x1C23', '\x1C24', '\x5', '\x45C', 
		'\x22F', '\x2', '\x1C24', '\x1C25', '\x5', '\x496', '\x24C', '\x2', '\x1C25', 
		'\x1C37', '\x3', '\x2', '\x2', '\x2', '\x1C26', '\x1C37', '\x5', '\x456', 
		'\x22C', '\x2', '\x1C27', '\x1C37', '\x5', '\x466', '\x234', '\x2', '\x1C28', 
		'\x1C37', '\x5', '\x458', '\x22D', '\x2', '\x1C29', '\x1C2A', '\a', '\x2EE', 
		'\x2', '\x2', '\x1C2A', '\x1C2B', '\x5', '\x16C', '\xB7', '\x2', '\x1C2B', 
		'\x1C2F', '\a', '\x2EF', '\x2', '\x2', '\x1C2C', '\x1C2E', '\x5', '\x2CC', 
		'\x167', '\x2', '\x1C2D', '\x1C2C', '\x3', '\x2', '\x2', '\x2', '\x1C2E', 
		'\x1C31', '\x3', '\x2', '\x2', '\x2', '\x1C2F', '\x1C2D', '\x3', '\x2', 
		'\x2', '\x2', '\x1C2F', '\x1C30', '\x3', '\x2', '\x2', '\x2', '\x1C30', 
		'\x1C37', '\x3', '\x2', '\x2', '\x2', '\x1C31', '\x1C2F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C32', '\x1C33', '\a', '\x2EE', '\x2', '\x2', '\x1C33', 
		'\x1C34', '\x5', '\x378', '\x1BD', '\x2', '\x1C34', '\x1C35', '\a', '\x2EF', 
		'\x2', '\x2', '\x1C35', '\x1C37', '\x3', '\x2', '\x2', '\x2', '\x1C36', 
		'\x1C23', '\x3', '\x2', '\x2', '\x2', '\x1C36', '\x1C26', '\x3', '\x2', 
		'\x2', '\x2', '\x1C36', '\x1C27', '\x3', '\x2', '\x2', '\x2', '\x1C36', 
		'\x1C28', '\x3', '\x2', '\x2', '\x2', '\x1C36', '\x1C29', '\x3', '\x2', 
		'\x2', '\x2', '\x1C36', '\x1C32', '\x3', '\x2', '\x2', '\x2', '\x1C37', 
		'\x3A7', '\x3', '\x2', '\x2', '\x2', '\x1C38', '\x1C41', '\t', '\x64', 
		'\x2', '\x2', '\x1C39', '\x1C3A', '\a', '\x2EE', '\x2', '\x2', '\x1C3A', 
		'\x1C3B', '\x5', '\x16C', '\xB7', '\x2', '\x1C3B', '\x1C3C', '\a', '\x2EF', 
		'\x2', '\x2', '\x1C3C', '\x1C42', '\x3', '\x2', '\x2', '\x2', '\x1C3D', 
		'\x1C3E', '\a', '\x2EE', '\x2', '\x2', '\x1C3E', '\x1C3F', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1C3F', '\x1C40', '\a', '\x2EF', '\x2', '\x2', '\x1C40', 
		'\x1C42', '\x3', '\x2', '\x2', '\x2', '\x1C41', '\x1C39', '\x3', '\x2', 
		'\x2', '\x2', '\x1C41', '\x1C3D', '\x3', '\x2', '\x2', '\x2', '\x1C42', 
		'\x3A9', '\x3', '\x2', '\x2', '\x2', '\x1C43', '\x1C54', '\x5', '\x3AC', 
		'\x1D7', '\x2', '\x1C44', '\x1C54', '\x5', '\x3AE', '\x1D8', '\x2', '\x1C45', 
		'\x1C54', '\x5', '\x3B4', '\x1DB', '\x2', '\x1C46', '\x1C47', '\x5', '\x48C', 
		'\x247', '\x2', '\x1C47', '\x1C48', '\a', '\x2EE', '\x2', '\x2', '\x1C48', 
		'\x1C4D', '\x5', '\x37A', '\x1BE', '\x2', '\x1C49', '\x1C4A', '\a', '\x2F4', 
		'\x2', '\x2', '\x1C4A', '\x1C4C', '\x5', '\x37A', '\x1BE', '\x2', '\x1C4B', 
		'\x1C49', '\x3', '\x2', '\x2', '\x2', '\x1C4C', '\x1C4F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C4D', '\x1C4B', '\x3', '\x2', '\x2', '\x2', '\x1C4D', 
		'\x1C4E', '\x3', '\x2', '\x2', '\x2', '\x1C4E', '\x1C51', '\x3', '\x2', 
		'\x2', '\x2', '\x1C4F', '\x1C4D', '\x3', '\x2', '\x2', '\x2', '\x1C50', 
		'\x1C52', '\a', '\x2EF', '\x2', '\x2', '\x1C51', '\x1C50', '\x3', '\x2', 
		'\x2', '\x2', '\x1C51', '\x1C52', '\x3', '\x2', '\x2', '\x2', '\x1C52', 
		'\x1C54', '\x3', '\x2', '\x2', '\x2', '\x1C53', '\x1C43', '\x3', '\x2', 
		'\x2', '\x2', '\x1C53', '\x1C44', '\x3', '\x2', '\x2', '\x2', '\x1C53', 
		'\x1C45', '\x3', '\x2', '\x2', '\x2', '\x1C53', '\x1C46', '\x3', '\x2', 
		'\x2', '\x2', '\x1C54', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x1C55', 
		'\x1C56', '\a', '\x2D8', '\x2', '\x2', '\x1C56', '\x1C57', '\a', '\x2EE', 
		'\x2', '\x2', '\x1C57', '\x1C58', '\x5', '\x37A', '\x1BE', '\x2', '\x1C58', 
		'\x1C59', '\a', '\x2F4', '\x2', '\x2', '\x1C59', '\x1C5C', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1C5A', '\x1C5B', '\a', '\x2F4', '\x2', '\x2', '\x1C5B', 
		'\x1C5D', '\x5', '\x37A', '\x1BE', '\x2', '\x1C5C', '\x1C5A', '\x3', '\x2', 
		'\x2', '\x2', '\x1C5C', '\x1C5D', '\x3', '\x2', '\x2', '\x2', '\x1C5D', 
		'\x1C5E', '\x3', '\x2', '\x2', '\x2', '\x1C5E', '\x1C5F', '\a', '\x2EF', 
		'\x2', '\x2', '\x1C5F', '\x1C8C', '\x3', '\x2', '\x2', '\x2', '\x1C60', 
		'\x1C61', '\a', '\x2D9', '\x2', '\x2', '\x1C61', '\x1C65', '\a', '\x2EE', 
		'\x2', '\x2', '\x1C62', '\x1C66', '\x5', '\x45C', '\x22F', '\x2', '\x1C63', 
		'\x1C66', '\x5', '\x3AA', '\x1D6', '\x2', '\x1C64', '\x1C66', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1C65', '\x1C62', '\x3', '\x2', '\x2', '\x2', '\x1C65', 
		'\x1C63', '\x3', '\x2', '\x2', '\x2', '\x1C65', '\x1C64', '\x3', '\x2', 
		'\x2', '\x2', '\x1C66', '\x1C69', '\x3', '\x2', '\x2', '\x2', '\x1C67', 
		'\x1C68', '\a', '\x2F4', '\x2', '\x2', '\x1C68', '\x1C6A', '\x5', '\x4A4', 
		'\x253', '\x2', '\x1C69', '\x1C67', '\x3', '\x2', '\x2', '\x2', '\x1C69', 
		'\x1C6A', '\x3', '\x2', '\x2', '\x2', '\x1C6A', '\x1C6D', '\x3', '\x2', 
		'\x2', '\x2', '\x1C6B', '\x1C6C', '\a', '\x2F4', '\x2', '\x2', '\x1C6C', 
		'\x1C6E', '\x5', '\x4A4', '\x253', '\x2', '\x1C6D', '\x1C6B', '\x3', '\x2', 
		'\x2', '\x2', '\x1C6D', '\x1C6E', '\x3', '\x2', '\x2', '\x2', '\x1C6E', 
		'\x1C6F', '\x3', '\x2', '\x2', '\x2', '\x1C6F', '\x1C70', '\a', '\x2EF', 
		'\x2', '\x2', '\x1C70', '\x1C8C', '\x3', '\x2', '\x2', '\x2', '\x1C71', 
		'\x1C72', '\a', '\x2CC', '\x2', '\x2', '\x1C72', '\x1C73', '\a', '\x2EE', 
		'\x2', '\x2', '\x1C73', '\x1C74', '\x5', '\x378', '\x1BD', '\x2', '\x1C74', 
		'\x1C75', '\a', '\x2EF', '\x2', '\x2', '\x1C75', '\x1C8C', '\x3', '\x2', 
		'\x2', '\x2', '\x1C76', '\x1C77', '\a', 'N', '\x2', '\x2', '\x1C77', '\x1C78', 
		'\a', '\x2EE', '\x2', '\x2', '\x1C78', '\x1C79', '\x5', '\x386', '\x1C4', 
		'\x2', '\x1C79', '\x1C7A', '\a', '\x28A', '\x2', '\x2', '\x1C7A', '\x1C7B', 
		'\a', '\x169', '\x2', '\x2', '\x1C7B', '\x1C7C', '\a', '\x2EF', '\x2', 
		'\x2', '\x1C7C', '\x1C8C', '\x3', '\x2', '\x2', '\x2', '\x1C7D', '\x1C7E', 
		'\a', '\x2DA', '\x2', '\x2', '\x1C7E', '\x1C86', '\a', '\x2EE', '\x2', 
		'\x2', '\x1C7F', '\x1C81', '\t', '\x65', '\x2', '\x2', '\x1C80', '\x1C7F', 
		'\x3', '\x2', '\x2', '\x2', '\x1C80', '\x1C81', '\x3', '\x2', '\x2', '\x2', 
		'\x1C81', '\x1C83', '\x3', '\x2', '\x2', '\x2', '\x1C82', '\x1C84', '\x5', 
		'\x4A4', '\x253', '\x2', '\x1C83', '\x1C82', '\x3', '\x2', '\x2', '\x2', 
		'\x1C83', '\x1C84', '\x3', '\x2', '\x2', '\x2', '\x1C84', '\x1C85', '\x3', 
		'\x2', '\x2', '\x2', '\x1C85', '\x1C87', '\a', '\xE0', '\x2', '\x2', '\x1C86', 
		'\x1C80', '\x3', '\x2', '\x2', '\x2', '\x1C86', '\x1C87', '\x3', '\x2', 
		'\x2', '\x2', '\x1C87', '\x1C88', '\x3', '\x2', '\x2', '\x2', '\x1C88', 
		'\x1C89', '\x5', '\x386', '\x1C4', '\x2', '\x1C89', '\x1C8A', '\a', '\x2EF', 
		'\x2', '\x2', '\x1C8A', '\x1C8C', '\x3', '\x2', '\x2', '\x2', '\x1C8B', 
		'\x1C55', '\x3', '\x2', '\x2', '\x2', '\x1C8B', '\x1C60', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8B', '\x1C71', '\x3', '\x2', '\x2', '\x2', '\x1C8B', 
		'\x1C76', '\x3', '\x2', '\x2', '\x2', '\x1C8B', '\x1C7D', '\x3', '\x2', 
		'\x2', '\x2', '\x1C8C', '\x3AD', '\x3', '\x2', '\x2', '\x2', '\x1C8D', 
		'\x1C90', '\x5', '\x3B0', '\x1D9', '\x2', '\x1C8E', '\x1C91', '\x5', '\x394', 
		'\x1CB', '\x2', '\x1C8F', '\x1C91', '\x5', '\x396', '\x1CC', '\x2', '\x1C90', 
		'\x1C8E', '\x3', '\x2', '\x2', '\x2', '\x1C90', '\x1C8F', '\x3', '\x2', 
		'\x2', '\x2', '\x1C90', '\x1C91', '\x3', '\x2', '\x2', '\x2', '\x1C91', 
		'\x3AF', '\x3', '\x2', '\x2', '\x2', '\x1C92', '\x1C93', '\a', '\x2DB', 
		'\x2', '\x2', '\x1C93', '\x1C95', '\a', '\x2EE', '\x2', '\x2', '\x1C94', 
		'\x1C96', '\t', '\x66', '\x2', '\x2', '\x1C95', '\x1C94', '\x3', '\x2', 
		'\x2', '\x2', '\x1C95', '\x1C96', '\x3', '\x2', '\x2', '\x2', '\x1C96', 
		'\x1C97', '\x3', '\x2', '\x2', '\x2', '\x1C97', '\x1C98', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1C98', '\x1C99', '\a', '\x2EF', '\x2', '\x2', '\x1C99', 
		'\x1CCD', '\x3', '\x2', '\x2', '\x2', '\x1C9A', '\x1C9B', '\a', 'q', '\x2', 
		'\x2', '\x1C9B', '\x1CA3', '\a', '\x2EE', '\x2', '\x2', '\x1C9C', '\x1CA4', 
		'\a', '\x2F1', '\x2', '\x2', '\x1C9D', '\x1C9F', '\t', 'P', '\x2', '\x2', 
		'\x1C9E', '\x1C9D', '\x3', '\x2', '\x2', '\x2', '\x1C9E', '\x1C9F', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9F', '\x1CA0', '\x3', '\x2', '\x2', '\x2', '\x1CA0', 
		'\x1CA2', '\x5', '\x386', '\x1C4', '\x2', '\x1CA1', '\x1C9E', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA1', '\x1CA2', '\x3', '\x2', '\x2', '\x2', '\x1CA2', 
		'\x1CA4', '\x3', '\x2', '\x2', '\x2', '\x1CA3', '\x1C9C', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA3', '\x1CA1', '\x3', '\x2', '\x2', '\x2', '\x1CA4', 
		'\x1CA5', '\x3', '\x2', '\x2', '\x2', '\x1CA5', '\x1CA7', '\a', '\x2EF', 
		'\x2', '\x2', '\x1CA6', '\x1CA8', '\x5', '\x3BC', '\x1DF', '\x2', '\x1CA7', 
		'\x1CA6', '\x3', '\x2', '\x2', '\x2', '\x1CA7', '\x1CA8', '\x3', '\x2', 
		'\x2', '\x2', '\x1CA8', '\x1CCD', '\x3', '\x2', '\x2', '\x2', '\x1CA9', 
		'\x1CAA', '\a', '\x2D6', '\x2', '\x2', '\x1CAA', '\x1CAB', '\a', '\x2EE', 
		'\x2', '\x2', '\x1CAB', '\x1CAE', '\x5', '\x37A', '\x1BE', '\x2', '\x1CAC', 
		'\x1CAD', '\a', '\x2F4', '\x2', '\x2', '\x1CAD', '\x1CAF', '\a', '\x2E8', 
		'\x2', '\x2', '\x1CAE', '\x1CAC', '\x3', '\x2', '\x2', '\x2', '\x1CAE', 
		'\x1CAF', '\x3', '\x2', '\x2', '\x2', '\x1CAF', '\x1CB0', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB0', '\x1CB1', '\a', '\x2EF', '\x2', '\x2', '\x1CB1', 
		'\x1CCD', '\x3', '\x2', '\x2', '\x2', '\x1CB2', '\x1CB3', '\a', '\x2C9', 
		'\x2', '\x2', '\x1CB3', '\x1CB5', '\a', '\x2EE', '\x2', '\x2', '\x1CB4', 
		'\x1CB6', '\t', '\x66', '\x2', '\x2', '\x1CB5', '\x1CB4', '\x3', '\x2', 
		'\x2', '\x2', '\x1CB5', '\x1CB6', '\x3', '\x2', '\x2', '\x2', '\x1CB6', 
		'\x1CB7', '\x3', '\x2', '\x2', '\x2', '\x1CB7', '\x1CB8', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1CB8', '\x1CB9', '\a', '\x2EF', '\x2', '\x2', '\x1CB9', 
		'\x1CCD', '\x3', '\x2', '\x2', '\x2', '\x1CBA', '\x1CBB', '\a', '\x2CF', 
		'\x2', '\x2', '\x1CBB', '\x1CBD', '\a', '\x2EE', '\x2', '\x2', '\x1CBC', 
		'\x1CBE', '\t', '\x66', '\x2', '\x2', '\x1CBD', '\x1CBC', '\x3', '\x2', 
		'\x2', '\x2', '\x1CBD', '\x1CBE', '\x3', '\x2', '\x2', '\x2', '\x1CBE', 
		'\x1CBF', '\x3', '\x2', '\x2', '\x2', '\x1CBF', '\x1CC0', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1CC0', '\x1CC1', '\a', '\x2EF', '\x2', '\x2', '\x1CC1', 
		'\x1CCD', '\x3', '\x2', '\x2', '\x2', '\x1CC2', '\x1CC3', '\a', '\x2DF', 
		'\x2', '\x2', '\x1CC3', '\x1CC4', '\a', '\x2EE', '\x2', '\x2', '\x1CC4', 
		'\x1CC5', '\x5', '\x378', '\x1BD', '\x2', '\x1CC5', '\x1CC6', '\a', '\x2EF', 
		'\x2', '\x2', '\x1CC6', '\x1CCD', '\x3', '\x2', '\x2', '\x2', '\x1CC7', 
		'\x1CC8', '\a', '\x2E0', '\x2', '\x2', '\x1CC8', '\x1CC9', '\a', '\x2EE', 
		'\x2', '\x2', '\x1CC9', '\x1CCA', '\x5', '\x378', '\x1BD', '\x2', '\x1CCA', 
		'\x1CCB', '\a', '\x2EF', '\x2', '\x2', '\x1CCB', '\x1CCD', '\x3', '\x2', 
		'\x2', '\x2', '\x1CCC', '\x1C92', '\x3', '\x2', '\x2', '\x2', '\x1CCC', 
		'\x1C9A', '\x3', '\x2', '\x2', '\x2', '\x1CCC', '\x1CA9', '\x3', '\x2', 
		'\x2', '\x2', '\x1CCC', '\x1CB2', '\x3', '\x2', '\x2', '\x2', '\x1CCC', 
		'\x1CBA', '\x3', '\x2', '\x2', '\x2', '\x1CCC', '\x1CC2', '\x3', '\x2', 
		'\x2', '\x2', '\x1CCC', '\x1CC7', '\x3', '\x2', '\x2', '\x2', '\x1CCD', 
		'\x3B1', '\x3', '\x2', '\x2', '\x2', '\x1CCE', '\x1CCF', '\a', '\x2E1', 
		'\x2', '\x2', '\x1CCF', '\x1CD0', '\a', '\x2EE', '\x2', '\x2', '\x1CD0', 
		'\x1CD3', '\x5', '\x37A', '\x1BE', '\x2', '\x1CD1', '\x1CD2', '\a', '\x2F4', 
		'\x2', '\x2', '\x1CD2', '\x1CD4', '\x5', '\x4A4', '\x253', '\x2', '\x1CD3', 
		'\x1CD1', '\x3', '\x2', '\x2', '\x2', '\x1CD3', '\x1CD4', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD4', '\x1CD5', '\x3', '\x2', '\x2', '\x2', '\x1CD5', 
		'\x1CD6', '\a', '\x2EF', '\x2', '\x2', '\x1CD6', '\x3B3', '\x3', '\x2', 
		'\x2', '\x2', '\x1CD7', '\x1CD8', '\x5', '\x3B6', '\x1DC', '\x2', '\x1CD8', 
		'\x1CDA', '\x5', '\x448', '\x225', '\x2', '\x1CD9', '\x1CDB', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x1CDA', '\x1CD9', '\x3', '\x2', '\x2', '\x2', '\x1CDA', 
		'\x1CDB', '\x3', '\x2', '\x2', '\x2', '\x1CDB', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1CDC', '\x1CDD', '\x5', '\x498', '\x24D', '\x2', '\x1CDD', 
		'\x1CDF', '\x5', '\x44A', '\x226', '\x2', '\x1CDE', '\x1CE0', '\x5', '\x3C4', 
		'\x1E3', '\x2', '\x1CDF', '\x1CDE', '\x3', '\x2', '\x2', '\x2', '\x1CDF', 
		'\x1CE0', '\x3', '\x2', '\x2', '\x2', '\x1CE0', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1CE1', '\x1CE2', '\a', '\x2D3', '\x2', '\x2', '\x1CE2', 
		'\x1CE3', '\a', '\x2EE', '\x2', '\x2', '\x1CE3', '\x1CE4', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1CE4', '\x1CE5', '\a', '\x2F4', '\x2', '\x2', '\x1CE5', 
		'\x1CE6', '\x5', '\x37A', '\x1BE', '\x2', '\x1CE6', '\x1CE7', '\a', '\x2EF', 
		'\x2', '\x2', '\x1CE7', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1CE8', 
		'\x1E22', '\x5', '\x3B2', '\x1DA', '\x2', '\x1CE9', '\x1CEA', '\a', 'q', 
		'\x2', '\x2', '\x1CEA', '\x1CF0', '\a', '\x2EE', '\x2', '\x2', '\x1CEB', 
		'\x1CF1', '\a', '\x2F1', '\x2', '\x2', '\x1CEC', '\x1CEE', '\t', 'P', 
		'\x2', '\x2', '\x1CED', '\x1CEC', '\x3', '\x2', '\x2', '\x2', '\x1CED', 
		'\x1CEE', '\x3', '\x2', '\x2', '\x2', '\x1CEE', '\x1CEF', '\x3', '\x2', 
		'\x2', '\x2', '\x1CEF', '\x1CF1', '\x5', '\x386', '\x1C4', '\x2', '\x1CF0', 
		'\x1CEB', '\x3', '\x2', '\x2', '\x2', '\x1CF0', '\x1CED', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF1', '\x1CF2', '\x3', '\x2', '\x2', '\x2', '\x1CF2', 
		'\x1CF4', '\a', '\x2EF', '\x2', '\x2', '\x1CF3', '\x1CF5', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x1CF4', '\x1CF3', '\x3', '\x2', '\x2', '\x2', '\x1CF4', 
		'\x1CF5', '\x3', '\x2', '\x2', '\x2', '\x1CF5', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1CF6', '\x1CF7', '\t', 'g', '\x2', '\x2', '\x1CF7', '\x1CFE', 
		'\a', '\x2EE', '\x2', '\x2', '\x1CF8', '\x1CF9', '\a', '\x163', '\x2', 
		'\x2', '\x1CF9', '\x1CFA', '\a', '\x2EE', '\x2', '\x2', '\x1CFA', '\x1CFB', 
		'\x5', '\x16C', '\xB7', '\x2', '\x1CFB', '\x1CFC', '\a', '\x2EF', '\x2', 
		'\x2', '\x1CFC', '\x1CFF', '\x3', '\x2', '\x2', '\x2', '\x1CFD', '\x1CFF', 
		'\x5', '\x386', '\x1C4', '\x2', '\x1CFE', '\x1CF8', '\x3', '\x2', '\x2', 
		'\x2', '\x1CFE', '\x1CFD', '\x3', '\x2', '\x2', '\x2', '\x1CFF', '\x1D00', 
		'\x3', '\x2', '\x2', '\x2', '\x1D00', '\x1D01', '\a', '\x19', '\x2', '\x2', 
		'\x1D01', '\x1D02', '\x5', '\x44E', '\x228', '\x2', '\x1D02', '\x1D03', 
		'\a', '\x2EF', '\x2', '\x2', '\x1D03', '\x1E22', '\x3', '\x2', '\x2', 
		'\x2', '\x1D04', '\x1D05', '\a', 'V', '\x2', '\x2', '\x1D05', '\x1D06', 
		'\a', '\x2EE', '\x2', '\x2', '\x1D06', '\x1D0C', '\x5', '\x45C', '\x22F', 
		'\x2', '\x1D07', '\x1D0A', '\a', '\x2F4', '\x2', '\x2', '\x1D08', '\x1D0B', 
		'\x5', '\x4A0', '\x251', '\x2', '\x1D09', '\x1D0B', '\x5', '\x4A4', '\x253', 
		'\x2', '\x1D0A', '\x1D08', '\x3', '\x2', '\x2', '\x2', '\x1D0A', '\x1D09', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0B', '\x1D0D', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0C', '\x1D07', '\x3', '\x2', '\x2', '\x2', '\x1D0C', '\x1D0D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D0D', '\x1D0E', '\x3', '\x2', '\x2', '\x2', '\x1D0E', 
		'\x1D0F', '\a', '\x2EF', '\x2', '\x2', '\x1D0F', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1D10', '\x1D11', '\a', 'W', '\x2', '\x2', '\x1D11', '\x1D13', 
		'\a', '\x2EE', '\x2', '\x2', '\x1D12', '\x1D14', '\t', 'h', '\x2', '\x2', 
		'\x1D13', '\x1D12', '\x3', '\x2', '\x2', '\x2', '\x1D13', '\x1D14', '\x3', 
		'\x2', '\x2', '\x2', '\x1D14', '\x1D15', '\x3', '\x2', '\x2', '\x2', '\x1D15', 
		'\x1D17', '\x5', '\x386', '\x1C4', '\x2', '\x1D16', '\x1D18', '\x5', '\x3C8', 
		'\x1E5', '\x2', '\x1D17', '\x1D16', '\x3', '\x2', '\x2', '\x2', '\x1D17', 
		'\x1D18', '\x3', '\x2', '\x2', '\x2', '\x1D18', '\x1D19', '\x3', '\x2', 
		'\x2', '\x2', '\x1D19', '\x1D1A', '\a', '\x2EF', '\x2', '\x2', '\x1D1A', 
		'\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D1B', '\x1D1C', '\x5', '\x3B8', 
		'\x1DD', '\x2', '\x1D1C', '\x1D1E', '\x5', '\x3EA', '\x1F6', '\x2', '\x1D1D', 
		'\x1D1F', '\x5', '\x446', '\x224', '\x2', '\x1D1E', '\x1D1D', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1E', '\x1D1F', '\x3', '\x2', '\x2', '\x2', '\x1D1F', 
		'\x1D21', '\x3', '\x2', '\x2', '\x2', '\x1D20', '\x1D22', '\x5', '\x3CA', 
		'\x1E6', '\x2', '\x1D21', '\x1D20', '\x3', '\x2', '\x2', '\x2', '\x1D22', 
		'\x1D23', '\x3', '\x2', '\x2', '\x2', '\x1D23', '\x1D21', '\x3', '\x2', 
		'\x2', '\x2', '\x1D23', '\x1D24', '\x3', '\x2', '\x2', '\x2', '\x1D24', 
		'\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D25', '\x1D26', '\x5', '\x40A', 
		'\x206', '\x2', '\x1D26', '\x1D27', '\t', 'i', '\x2', '\x2', '\x1D27', 
		'\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D28', '\x1D29', '\a', '\x8A', 
		'\x2', '\x2', '\x1D29', '\x1D2A', '\a', '\x2EE', '\x2', '\x2', '\x1D2A', 
		'\x1D2C', '\x5', '\x386', '\x1C4', '\x2', '\x1D2B', '\x1D2D', '\t', 'j', 
		'\x2', '\x2', '\x1D2C', '\x1D2B', '\x3', '\x2', '\x2', '\x2', '\x1D2C', 
		'\x1D2D', '\x3', '\x2', '\x2', '\x2', '\x1D2D', '\x1D2E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D2E', '\x1D2F', '\a', '\x2EF', '\x2', '\x2', '\x1D2F', 
		'\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D30', '\x1D31', '\a', '\xCB', 
		'\x2', '\x2', '\x1D31', '\x1D32', '\a', '\x2EE', '\x2', '\x2', '\x1D32', 
		'\x1D33', '\x5', '\x498', '\x24D', '\x2', '\x1D33', '\x1D34', '\a', '\xE0', 
		'\x2', '\x2', '\x1D34', '\x1D35', '\x5', '\x386', '\x1C4', '\x2', '\x1D35', 
		'\x1D36', '\a', '\x2EF', '\x2', '\x2', '\x1D36', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1D37', '\x1D38', '\t', 'k', '\x2', '\x2', '\x1D38', '\x1D3A', 
		'\x5', '\x448', '\x225', '\x2', '\x1D39', '\x1D3B', '\x5', '\x44C', '\x227', 
		'\x2', '\x1D3A', '\x1D39', '\x3', '\x2', '\x2', '\x2', '\x1D3A', '\x1D3B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D3B', '\x1D3C', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3C', '\x1D3D', '\x5', '\x3BC', '\x1DF', '\x2', '\x1D3D', '\x1E22', 
		'\x3', '\x2', '\x2', '\x2', '\x1D3E', '\x1D3F', '\x5', '\x3BA', '\x1DE', 
		'\x2', '\x1D3F', '\x1D40', '\a', '\x2EE', '\x2', '\x2', '\x1D40', '\x1D42', 
		'\x5', '\x378', '\x1BD', '\x2', '\x1D41', '\x1D43', '\x5', '\x3CC', '\x1E7', 
		'\x2', '\x1D42', '\x1D41', '\x3', '\x2', '\x2', '\x2', '\x1D42', '\x1D43', 
		'\x3', '\x2', '\x2', '\x2', '\x1D43', '\x1D45', '\x3', '\x2', '\x2', '\x2', 
		'\x1D44', '\x1D46', '\x5', '\x3C4', '\x1E3', '\x2', '\x1D45', '\x1D44', 
		'\x3', '\x2', '\x2', '\x2', '\x1D45', '\x1D46', '\x3', '\x2', '\x2', '\x2', 
		'\x1D46', '\x1D47', '\x3', '\x2', '\x2', '\x2', '\x1D47', '\x1D48', '\a', 
		'\x2EF', '\x2', '\x2', '\x1D48', '\x1E22', '\x3', '\x2', '\x2', '\x2', 
		'\x1D49', '\x1D4A', '\a', '\x26E', '\x2', '\x2', '\x1D4A', '\x1D4B', '\a', 
		'\x2EE', '\x2', '\x2', '\x1D4B', '\x1D4E', '\x5', '\x37A', '\x1BE', '\x2', 
		'\x1D4C', '\x1D4D', '\a', '\x28A', '\x2', '\x2', '\x1D4D', '\x1D4F', '\t', 
		'l', '\x2', '\x2', '\x1D4E', '\x1D4C', '\x3', '\x2', '\x2', '\x2', '\x1D4E', 
		'\x1D4F', '\x3', '\x2', '\x2', '\x2', '\x1D4F', '\x1D54', '\x3', '\x2', 
		'\x2', '\x2', '\x1D50', '\x1D51', '\a', '\x2F4', '\x2', '\x2', '\x1D51', 
		'\x1D53', '\x5', '\x37A', '\x1BE', '\x2', '\x1D52', '\x1D50', '\x3', '\x2', 
		'\x2', '\x2', '\x1D53', '\x1D56', '\x3', '\x2', '\x2', '\x2', '\x1D54', 
		'\x1D52', '\x3', '\x2', '\x2', '\x2', '\x1D54', '\x1D55', '\x3', '\x2', 
		'\x2', '\x2', '\x1D55', '\x1D57', '\x3', '\x2', '\x2', '\x2', '\x1D56', 
		'\x1D54', '\x3', '\x2', '\x2', '\x2', '\x1D57', '\x1D58', '\a', '\x2EF', 
		'\x2', '\x2', '\x1D58', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D59', 
		'\x1D5A', '\a', '\x26E', '\x2', '\x2', '\x1D5A', '\x1D5B', '\a', '\x2EE', 
		'\x2', '\x2', '\x1D5B', '\x1D5C', '\x5', '\x37A', '\x1BE', '\x2', '\x1D5C', 
		'\x1D5D', '\a', '\x2F4', '\x2', '\x2', '\x1D5D', '\x1D5E', '\x5', '\x4A4', 
		'\x253', '\x2', '\x1D5E', '\x1D5F', '\a', '\x2F4', '\x2', '\x2', '\x1D5F', 
		'\x1D60', '\x5', '\x4A4', '\x253', '\x2', '\x1D60', '\x1D61', '\a', '\x2EF', 
		'\x2', '\x2', '\x1D61', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D62', 
		'\x1D63', '\a', '\x270', '\x2', '\x2', '\x1D63', '\x1D64', '\a', '\x2EE', 
		'\x2', '\x2', '\x1D64', '\x1D65', '\x5', '\x37A', '\x1BE', '\x2', '\x1D65', 
		'\x1D67', '\a', '\x19', '\x2', '\x2', '\x1D66', '\x1D68', '\a', '\x1E6', 
		'\x2', '\x2', '\x1D67', '\x1D66', '\x3', '\x2', '\x2', '\x2', '\x1D67', 
		'\x1D68', '\x3', '\x2', '\x2', '\x2', '\x1D68', '\x1D69', '\x3', '\x2', 
		'\x2', '\x2', '\x1D69', '\x1D6A', '\x5', '\x44E', '\x228', '\x2', '\x1D6A', 
		'\x1D6B', '\a', '\x2EF', '\x2', '\x2', '\x1D6B', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1D6C', '\x1D6D', '\a', '\x2A5', '\x2', '\x2', '\x1D6D', 
		'\x1D6E', '\a', '\x2EE', '\x2', '\x2', '\x1D6E', '\x1D70', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1D6F', '\x1D71', '\x5', '\x32A', '\x196', '\x2', '\x1D70', 
		'\x1D6F', '\x3', '\x2', '\x2', '\x2', '\x1D70', '\x1D71', '\x3', '\x2', 
		'\x2', '\x2', '\x1D71', '\x1D72', '\x3', '\x2', '\x2', '\x2', '\x1D72', 
		'\x1D75', '\a', '\x2EF', '\x2', '\x2', '\x1D73', '\x1D74', '\a', '\x2E7', 
		'\x2', '\x2', '\x1D74', '\x1D76', '\x5', '\x45A', '\x22E', '\x2', '\x1D75', 
		'\x1D73', '\x3', '\x2', '\x2', '\x2', '\x1D75', '\x1D76', '\x3', '\x2', 
		'\x2', '\x2', '\x1D76', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D77', 
		'\x1D78', '\t', 'm', '\x2', '\x2', '\x1D78', '\x1D7D', '\a', '\x2EE', 
		'\x2', '\x2', '\x1D79', '\x1D7B', '\a', '\x2F4', '\x2', '\x2', '\x1D7A', 
		'\x1D79', '\x3', '\x2', '\x2', '\x2', '\x1D7A', '\x1D7B', '\x3', '\x2', 
		'\x2', '\x2', '\x1D7B', '\x1D7C', '\x3', '\x2', '\x2', '\x2', '\x1D7C', 
		'\x1D7E', '\x5', '\x3D8', '\x1ED', '\x2', '\x1D7D', '\x1D7A', '\x3', '\x2', 
		'\x2', '\x2', '\x1D7E', '\x1D7F', '\x3', '\x2', '\x2', '\x2', '\x1D7F', 
		'\x1D7D', '\x3', '\x2', '\x2', '\x2', '\x1D7F', '\x1D80', '\x3', '\x2', 
		'\x2', '\x2', '\x1D80', '\x1D81', '\x3', '\x2', '\x2', '\x2', '\x1D81', 
		'\x1D84', '\a', '\x2EF', '\x2', '\x2', '\x1D82', '\x1D83', '\a', '\x2E7', 
		'\x2', '\x2', '\x1D83', '\x1D85', '\x5', '\x45A', '\x22E', '\x2', '\x1D84', 
		'\x1D82', '\x3', '\x2', '\x2', '\x2', '\x1D84', '\x1D85', '\x3', '\x2', 
		'\x2', '\x2', '\x1D85', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1D86', 
		'\x1D87', '\a', '\x2A9', '\x2', '\x2', '\x1D87', '\x1D89', '\a', '\x2EE', 
		'\x2', '\x2', '\x1D88', '\x1D8A', '\t', 'n', '\x2', '\x2', '\x1D89', '\x1D88', 
		'\x3', '\x2', '\x2', '\x2', '\x1D89', '\x1D8A', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8A', '\x1D8C', '\x3', '\x2', '\x2', '\x2', '\x1D8B', '\x1D8D', '\t', 
		'o', '\x2', '\x2', '\x1D8C', '\x1D8B', '\x3', '\x2', '\x2', '\x2', '\x1D8C', 
		'\x1D8D', '\x3', '\x2', '\x2', '\x2', '\x1D8D', '\x1D8E', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8E', '\x1D91', '\x5', '\x37A', '\x1BE', '\x2', '\x1D8F', 
		'\x1D90', '\a', '\x2F4', '\x2', '\x2', '\x1D90', '\x1D92', '\x5', '\x3D0', 
		'\x1E9', '\x2', '\x1D91', '\x1D8F', '\x3', '\x2', '\x2', '\x2', '\x1D91', 
		'\x1D92', '\x3', '\x2', '\x2', '\x2', '\x1D92', '\x1D9A', '\x3', '\x2', 
		'\x2', '\x2', '\x1D93', '\x1D94', '\a', '\x2F4', '\x2', '\x2', '\x1D94', 
		'\x1D96', '\x5', '\x37A', '\x1BE', '\x2', '\x1D95', '\x1D97', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x1D96', '\x1D95', '\x3', '\x2', '\x2', '\x2', '\x1D96', 
		'\x1D97', '\x3', '\x2', '\x2', '\x2', '\x1D97', '\x1D99', '\x3', '\x2', 
		'\x2', '\x2', '\x1D98', '\x1D93', '\x3', '\x2', '\x2', '\x2', '\x1D99', 
		'\x1D9C', '\x3', '\x2', '\x2', '\x2', '\x1D9A', '\x1D98', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9A', '\x1D9B', '\x3', '\x2', '\x2', '\x2', '\x1D9B', 
		'\x1D9D', '\x3', '\x2', '\x2', '\x2', '\x1D9C', '\x1D9A', '\x3', '\x2', 
		'\x2', '\x2', '\x1D9D', '\x1DA0', '\a', '\x2EF', '\x2', '\x2', '\x1D9E', 
		'\x1D9F', '\a', '\x2E7', '\x2', '\x2', '\x1D9F', '\x1DA1', '\x5', '\x45A', 
		'\x22E', '\x2', '\x1DA0', '\x1D9E', '\x3', '\x2', '\x2', '\x2', '\x1DA0', 
		'\x1DA1', '\x3', '\x2', '\x2', '\x2', '\x1DA1', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA2', '\x1DA3', '\a', '\x2AA', '\x2', '\x2', '\x1DA3', 
		'\x1DA4', '\a', '\x2EE', '\x2', '\x2', '\x1DA4', '\x1DA6', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1DA5', '\x1DA7', '\x5', '\x3CE', '\x1E8', '\x2', '\x1DA6', 
		'\x1DA5', '\x3', '\x2', '\x2', '\x2', '\x1DA6', '\x1DA7', '\x3', '\x2', 
		'\x2', '\x2', '\x1DA7', '\x1DA8', '\x3', '\x2', '\x2', '\x2', '\x1DA8', 
		'\x1DA9', '\a', '\x2EF', '\x2', '\x2', '\x1DA9', '\x1E22', '\x3', '\x2', 
		'\x2', '\x2', '\x1DAA', '\x1DAB', '\a', '\x2AD', '\x2', '\x2', '\x1DAB', 
		'\x1DAC', '\a', '\x2EE', '\x2', '\x2', '\x1DAC', '\x1DAD', '\t', 'p', 
		'\x2', '\x2', '\x1DAD', '\x1DAF', '\x5', '\x386', '\x1C4', '\x2', '\x1DAE', 
		'\x1DB0', '\a', '\x29B', '\x2', '\x2', '\x1DAF', '\x1DAE', '\x3', '\x2', 
		'\x2', '\x2', '\x1DAF', '\x1DB0', '\x3', '\x2', '\x2', '\x2', '\x1DB0', 
		'\x1DB1', '\x3', '\x2', '\x2', '\x2', '\x1DB1', '\x1DB4', '\a', '\x2EF', 
		'\x2', '\x2', '\x1DB2', '\x1DB3', '\a', '\x2E7', '\x2', '\x2', '\x1DB3', 
		'\x1DB5', '\x5', '\x45A', '\x22E', '\x2', '\x1DB4', '\x1DB2', '\x3', '\x2', 
		'\x2', '\x2', '\x1DB4', '\x1DB5', '\x3', '\x2', '\x2', '\x2', '\x1DB5', 
		'\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1DB6', '\x1DB7', '\a', '\x2AE', 
		'\x2', '\x2', '\x1DB7', '\x1DBC', '\a', '\x2EE', '\x2', '\x2', '\x1DB8', 
		'\x1DB9', '\a', '\x164', '\x2', '\x2', '\x1DB9', '\x1DBD', '\x5', '\x468', 
		'\x235', '\x2', '\x1DBA', '\x1DBB', '\a', '\xBA', '\x2', '\x2', '\x1DBB', 
		'\x1DBD', '\x5', '\x386', '\x1C4', '\x2', '\x1DBC', '\x1DB8', '\x3', '\x2', 
		'\x2', '\x2', '\x1DBC', '\x1DBA', '\x3', '\x2', '\x2', '\x2', '\x1DBD', 
		'\x1DC0', '\x3', '\x2', '\x2', '\x2', '\x1DBE', '\x1DBF', '\a', '\x2F4', 
		'\x2', '\x2', '\x1DBF', '\x1DC1', '\x5', '\x386', '\x1C4', '\x2', '\x1DC0', 
		'\x1DBE', '\x3', '\x2', '\x2', '\x2', '\x1DC0', '\x1DC1', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC1', '\x1DC2', '\x3', '\x2', '\x2', '\x2', '\x1DC2', 
		'\x1DC5', '\a', '\x2EF', '\x2', '\x2', '\x1DC3', '\x1DC4', '\a', '\x2E7', 
		'\x2', '\x2', '\x1DC4', '\x1DC6', '\x5', '\x45A', '\x22E', '\x2', '\x1DC5', 
		'\x1DC3', '\x3', '\x2', '\x2', '\x2', '\x1DC5', '\x1DC6', '\x3', '\x2', 
		'\x2', '\x2', '\x1DC6', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1DC7', 
		'\x1DC8', '\a', '\x2AF', '\x2', '\x2', '\x1DC8', '\x1DC9', '\a', '\x2EE', 
		'\x2', '\x2', '\x1DC9', '\x1DCB', '\x5', '\x386', '\x1C4', '\x2', '\x1DCA', 
		'\x1DCC', '\x5', '\x3CE', '\x1E8', '\x2', '\x1DCB', '\x1DCA', '\x3', '\x2', 
		'\x2', '\x2', '\x1DCB', '\x1DCC', '\x3', '\x2', '\x2', '\x2', '\x1DCC', 
		'\x1DCD', '\x3', '\x2', '\x2', '\x2', '\x1DCD', '\x1DCE', '\a', '\x1F8', 
		'\x2', '\x2', '\x1DCE', '\x1DD2', '\a', 'j', '\x2', '\x2', '\x1DCF', '\x1DD0', 
		'\a', '\x18A', '\x2', '\x2', '\x1DD0', '\x1DD1', '\a', '\x198', '\x2', 
		'\x2', '\x1DD1', '\x1DD3', '\a', '\xAF', '\x2', '\x2', '\x1DD2', '\x1DCF', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD2', '\x1DD3', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD3', '\x1DD4', '\x3', '\x2', '\x2', '\x2', '\x1DD4', '\x1DD7', '\a', 
		'\x2EF', '\x2', '\x2', '\x1DD5', '\x1DD6', '\a', '\x2E7', '\x2', '\x2', 
		'\x1DD6', '\x1DD8', '\x5', '\x45A', '\x22E', '\x2', '\x1DD7', '\x1DD5', 
		'\x3', '\x2', '\x2', '\x2', '\x1DD7', '\x1DD8', '\x3', '\x2', '\x2', '\x2', 
		'\x1DD8', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1DD9', '\x1DDA', '\a', 
		'\x2B0', '\x2', '\x2', '\x1DDA', '\x1DDB', '\a', '\x2EE', '\x2', '\x2', 
		'\x1DDB', '\x1DDE', '\x5', '\x386', '\x1C4', '\x2', '\x1DDC', '\x1DDD', 
		'\a', '\x2F4', '\x2', '\x2', '\x1DDD', '\x1DDF', '\x5', '\x3DA', '\x1EE', 
		'\x2', '\x1DDE', '\x1DDC', '\x3', '\x2', '\x2', '\x2', '\x1DDE', '\x1DDF', 
		'\x3', '\x2', '\x2', '\x2', '\x1DDF', '\x1DE2', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE0', '\x1DE1', '\a', '\x2F4', '\x2', '\x2', '\x1DE1', '\x1DE3', '\x5', 
		'\x3DC', '\x1EF', '\x2', '\x1DE2', '\x1DE0', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE2', '\x1DE3', '\x3', '\x2', '\x2', '\x2', '\x1DE3', '\x1DE4', '\x3', 
		'\x2', '\x2', '\x2', '\x1DE4', '\x1DE7', '\a', '\x2EF', '\x2', '\x2', 
		'\x1DE5', '\x1DE6', '\a', '\x2E7', '\x2', '\x2', '\x1DE6', '\x1DE8', '\x5', 
		'\x45A', '\x22E', '\x2', '\x1DE7', '\x1DE5', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE7', '\x1DE8', '\x3', '\x2', '\x2', '\x2', '\x1DE8', '\x1E22', '\x3', 
		'\x2', '\x2', '\x2', '\x1DE9', '\x1DEA', '\a', '\x2B2', '\x2', '\x2', 
		'\x1DEA', '\x1DEB', '\a', '\x2EE', '\x2', '\x2', '\x1DEB', '\x1DEC', '\t', 
		'p', '\x2', '\x2', '\x1DEC', '\x1DEF', '\x5', '\x386', '\x1C4', '\x2', 
		'\x1DED', '\x1DEE', '\a', '\x19', '\x2', '\x2', '\x1DEE', '\x1DF0', '\x5', 
		'\x44E', '\x228', '\x2', '\x1DEF', '\x1DED', '\x3', '\x2', '\x2', '\x2', 
		'\x1DEF', '\x1DF0', '\x3', '\x2', '\x2', '\x2', '\x1DF0', '\x1DF2', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF1', '\x1DF3', '\x5', '\x3DE', '\x1F0', '\x2', 
		'\x1DF2', '\x1DF1', '\x3', '\x2', '\x2', '\x2', '\x1DF2', '\x1DF3', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF3', '\x1DF5', '\x3', '\x2', '\x2', '\x2', '\x1DF4', 
		'\x1DF6', '\x5', '\x3E0', '\x1F1', '\x2', '\x1DF5', '\x1DF4', '\x3', '\x2', 
		'\x2', '\x2', '\x1DF5', '\x1DF6', '\x3', '\x2', '\x2', '\x2', '\x1DF6', 
		'\x1DF8', '\x3', '\x2', '\x2', '\x2', '\x1DF7', '\x1DF9', '\x5', '\x3E2', 
		'\x1F2', '\x2', '\x1DF8', '\x1DF7', '\x3', '\x2', '\x2', '\x2', '\x1DF8', 
		'\x1DF9', '\x3', '\x2', '\x2', '\x2', '\x1DF9', '\x1DFC', '\x3', '\x2', 
		'\x2', '\x2', '\x1DFA', '\x1DFB', '\t', 'q', '\x2', '\x2', '\x1DFB', '\x1DFD', 
		'\a', '\x8F', '\x2', '\x2', '\x1DFC', '\x1DFA', '\x3', '\x2', '\x2', '\x2', 
		'\x1DFC', '\x1DFD', '\x3', '\x2', '\x2', '\x2', '\x1DFD', '\x1DFE', '\x3', 
		'\x2', '\x2', '\x2', '\x1DFE', '\x1E01', '\a', '\x2EF', '\x2', '\x2', 
		'\x1DFF', '\x1E00', '\a', '\x2E7', '\x2', '\x2', '\x1E00', '\x1E02', '\x5', 
		'\x45A', '\x22E', '\x2', '\x1E01', '\x1DFF', '\x3', '\x2', '\x2', '\x2', 
		'\x1E01', '\x1E02', '\x3', '\x2', '\x2', '\x2', '\x1E02', '\x1E22', '\x3', 
		'\x2', '\x2', '\x2', '\x1E03', '\x1E04', '\a', '\x2B3', '\x2', '\x2', 
		'\x1E04', '\x1E06', '\a', '\x2EE', '\x2', '\x2', '\x1E05', '\x1E07', '\x5', 
		'\x3D2', '\x1EA', '\x2', '\x1E06', '\x1E05', '\x3', '\x2', '\x2', '\x2', 
		'\x1E06', '\x1E07', '\x3', '\x2', '\x2', '\x2', '\x1E07', '\x1E08', '\x3', 
		'\x2', '\x2', '\x2', '\x1E08', '\x1E0A', '\x5', '\x386', '\x1C4', '\x2', 
		'\x1E09', '\x1E0B', '\x5', '\x3CE', '\x1E8', '\x2', '\x1E0A', '\x1E09', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0A', '\x1E0B', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0B', '\x1E11', '\x3', '\x2', '\x2', '\x2', '\x1E0C', '\x1E0D', '\a', 
		'Y', '\x2', '\x2', '\x1E0D', '\x1E0E', '\x5', '\x3D4', '\x1EB', '\x2', 
		'\x1E0E', '\x1E0F', '\a', '\x2F4', '\x2', '\x2', '\x1E0F', '\x1E10', '\x5', 
		'\x3D4', '\x1EB', '\x2', '\x1E10', '\x1E12', '\x3', '\x2', '\x2', '\x2', 
		'\x1E11', '\x1E0C', '\x3', '\x2', '\x2', '\x2', '\x1E11', '\x1E12', '\x3', 
		'\x2', '\x2', '\x2', '\x1E12', '\x1E13', '\x3', '\x2', '\x2', '\x2', '\x1E13', 
		'\x1E16', '\a', '\x2EF', '\x2', '\x2', '\x1E14', '\x1E15', '\a', '\x2E7', 
		'\x2', '\x2', '\x1E15', '\x1E17', '\x5', '\x45A', '\x22E', '\x2', '\x1E16', 
		'\x1E14', '\x3', '\x2', '\x2', '\x2', '\x1E16', '\x1E17', '\x3', '\x2', 
		'\x2', '\x2', '\x1E17', '\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1E18', 
		'\x1E19', '\a', '\x274', '\x2', '\x2', '\x1E19', '\x1E1A', '\a', '\x2EE', 
		'\x2', '\x2', '\x1E1A', '\x1E1D', '\x5', '\x37A', '\x1BE', '\x2', '\x1E1B', 
		'\x1E1C', '\a', '\x2F4', '\x2', '\x2', '\x1E1C', '\x1E1E', '\x5', '\x4A4', 
		'\x253', '\x2', '\x1E1D', '\x1E1B', '\x3', '\x2', '\x2', '\x2', '\x1E1D', 
		'\x1E1E', '\x3', '\x2', '\x2', '\x2', '\x1E1E', '\x1E1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E1F', '\x1E20', '\a', '\x2EF', '\x2', '\x2', '\x1E20', 
		'\x1E22', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1CD7', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1CDC', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1CE1', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1CE8', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1CE9', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1CF6', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1D04', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1D10', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1D1B', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1D25', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1D28', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1D30', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1D37', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1D3E', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1D49', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1D59', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1D62', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1D6C', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1D77', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1D86', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1DA2', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1DAA', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1DB6', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1DC7', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1DD9', '\x3', '\x2', 
		'\x2', '\x2', '\x1E21', '\x1DE9', '\x3', '\x2', '\x2', '\x2', '\x1E21', 
		'\x1E03', '\x3', '\x2', '\x2', '\x2', '\x1E21', '\x1E18', '\x3', '\x2', 
		'\x2', '\x2', '\x1E22', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x1E23', 
		'\x1E24', '\t', 'r', '\x2', '\x2', '\x1E24', '\x3B7', '\x3', '\x2', '\x2', 
		'\x2', '\x1E25', '\x1E26', '\t', 's', '\x2', '\x2', '\x1E26', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1E27', '\x1E28', '\t', 't', '\x2', '\x2', 
		'\x1E28', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x1E29', '\x1E2A', '\a', 
		'\x1A7', '\x2', '\x2', '\x1E2A', '\x1E2C', '\a', '\x2EE', '\x2', '\x2', 
		'\x1E2B', '\x1E2D', '\x5', '\x2E6', '\x174', '\x2', '\x1E2C', '\x1E2B', 
		'\x3', '\x2', '\x2', '\x2', '\x1E2C', '\x1E2D', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2D', '\x1E32', '\x3', '\x2', '\x2', '\x2', '\x1E2E', '\x1E30', '\x5', 
		'\x32A', '\x196', '\x2', '\x1E2F', '\x1E31', '\x5', '\x3BE', '\x1E0', 
		'\x2', '\x1E30', '\x1E2F', '\x3', '\x2', '\x2', '\x2', '\x1E30', '\x1E31', 
		'\x3', '\x2', '\x2', '\x2', '\x1E31', '\x1E33', '\x3', '\x2', '\x2', '\x2', 
		'\x1E32', '\x1E2E', '\x3', '\x2', '\x2', '\x2', '\x1E32', '\x1E33', '\x3', 
		'\x2', '\x2', '\x2', '\x1E33', '\x1E34', '\x3', '\x2', '\x2', '\x2', '\x1E34', 
		'\x1E35', '\a', '\x2EF', '\x2', '\x2', '\x1E35', '\x3BD', '\x3', '\x2', 
		'\x2', '\x2', '\x1E36', '\x1E3D', '\x5', '\x3C0', '\x1E1', '\x2', '\x1E37', 
		'\x1E38', '\a', '.', '\x2', '\x2', '\x1E38', '\x1E39', '\x5', '\x3C2', 
		'\x1E2', '\x2', '\x1E39', '\x1E3A', '\a', '\x13', '\x2', '\x2', '\x1E3A', 
		'\x1E3B', '\x5', '\x3C2', '\x1E2', '\x2', '\x1E3B', '\x1E3E', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3C', '\x1E3E', '\x5', '\x3C2', '\x1E2', '\x2', '\x1E3D', 
		'\x1E37', '\x3', '\x2', '\x2', '\x2', '\x1E3D', '\x1E3C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3E', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x1E3F', 
		'\x1E40', '\t', 'u', '\x2', '\x2', '\x1E40', '\x3C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1E41', '\x1E42', '\a', '\x277', '\x2', '\x2', '\x1E42', '\x1E49', 
		'\a', '\x1C9', '\x2', '\x2', '\x1E43', '\x1E44', '\a', 'w', '\x2', '\x2', 
		'\x1E44', '\x1E49', '\a', '\x205', '\x2', '\x2', '\x1E45', '\x1E46', '\x5', 
		'\x386', '\x1C4', '\x2', '\x1E46', '\x1E47', '\t', 'v', '\x2', '\x2', 
		'\x1E47', '\x1E49', '\x3', '\x2', '\x2', '\x2', '\x1E48', '\x1E41', '\x3', 
		'\x2', '\x2', '\x2', '\x1E48', '\x1E43', '\x3', '\x2', '\x2', '\x2', '\x1E48', 
		'\x1E45', '\x3', '\x2', '\x2', '\x2', '\x1E49', '\x3C3', '\x3', '\x2', 
		'\x2', '\x2', '\x1E4A', '\x1E54', '\a', '\x28A', '\x2', '\x2', '\x1E4B', 
		'\x1E55', '\a', '\x2F1', '\x2', '\x2', '\x1E4C', '\x1E4E', '\a', '\x2F4', 
		'\x2', '\x2', '\x1E4D', '\x1E4C', '\x3', '\x2', '\x2', '\x2', '\x1E4D', 
		'\x1E4E', '\x3', '\x2', '\x2', '\x2', '\x1E4E', '\x1E4F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E4F', '\x1E51', '\x5', '\x3C6', '\x1E4', '\x2', '\x1E50', 
		'\x1E4D', '\x3', '\x2', '\x2', '\x2', '\x1E51', '\x1E52', '\x3', '\x2', 
		'\x2', '\x2', '\x1E52', '\x1E50', '\x3', '\x2', '\x2', '\x2', '\x1E52', 
		'\x1E53', '\x3', '\x2', '\x2', '\x2', '\x1E53', '\x1E55', '\x3', '\x2', 
		'\x2', '\x2', '\x1E54', '\x1E4B', '\x3', '\x2', '\x2', '\x2', '\x1E54', 
		'\x1E50', '\x3', '\x2', '\x2', '\x2', '\x1E55', '\x3C5', '\x3', '\x2', 
		'\x2', '\x2', '\x1E56', '\x1E58', '\a', '\x107', '\x2', '\x2', '\x1E57', 
		'\x1E59', '\a', '\x1A5', '\x2', '\x2', '\x1E58', '\x1E57', '\x3', '\x2', 
		'\x2', '\x2', '\x1E58', '\x1E59', '\x3', '\x2', '\x2', '\x2', '\x1E59', 
		'\x1E5C', '\x3', '\x2', '\x2', '\x2', '\x1E5A', '\x1E5C', '\a', '\x1A5', 
		'\x2', '\x2', '\x1E5B', '\x1E56', '\x3', '\x2', '\x2', '\x2', '\x1E5B', 
		'\x1E5A', '\x3', '\x2', '\x2', '\x2', '\x1E5B', '\x1E5C', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5C', '\x1E5D', '\x3', '\x2', '\x2', '\x2', '\x1E5D', 
		'\x1E5F', '\x5', '\x2D4', '\x16B', '\x2', '\x1E5E', '\x1E60', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x1E5F', '\x1E5E', '\x3', '\x2', '\x2', '\x2', '\x1E5F', 
		'\x1E60', '\x3', '\x2', '\x2', '\x2', '\x1E60', '\x3C7', '\x3', '\x2', 
		'\x2', '\x2', '\x1E61', '\x1E62', '\a', '\x19E', '\x2', '\x2', '\x1E62', 
		'\x1E63', '\a', '?', '\x2', '\x2', '\x1E63', '\x1E64', '\x5', '\x386', 
		'\x1C4', '\x2', '\x1E64', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x1E65', 
		'\x1E66', '\a', '\x2A0', '\x2', '\x2', '\x1E66', '\x1E67', '\a', '\xE8', 
		'\x2', '\x2', '\x1E67', '\x1E68', '\a', '\x2EE', '\x2', '\x2', '\x1E68', 
		'\x1E69', '\x5', '\x32A', '\x196', '\x2', '\x1E69', '\x1E6A', '\a', '\x2EF', 
		'\x2', '\x2', '\x1E6A', '\x1E6D', '\x3', '\x2', '\x2', '\x2', '\x1E6B', 
		'\x1E6D', '\x5', '\x3BC', '\x1DF', '\x2', '\x1E6C', '\x1E65', '\x3', '\x2', 
		'\x2', '\x2', '\x1E6C', '\x1E6B', '\x3', '\x2', '\x2', '\x2', '\x1E6D', 
		'\x3CB', '\x3', '\x2', '\x2', '\x2', '\x1E6E', '\x1E84', '\a', 'p', '\x2', 
		'\x2', '\x1E6F', '\x1E71', '\a', '\x15C', '\x2', '\x2', '\x1E70', '\x1E72', 
		'\a', '#', '\x2', '\x2', '\x1E71', '\x1E70', '\x3', '\x2', '\x2', '\x2', 
		'\x1E71', '\x1E72', '\x3', '\x2', '\x2', '\x2', '\x1E72', '\x1E85', '\x3', 
		'\x2', '\x2', '\x2', '\x1E73', '\x1E78', '\a', '\x2EE', '\x2', '\x2', 
		'\x1E74', '\x1E76', '\a', '\x2F4', '\x2', '\x2', '\x1E75', '\x1E74', '\x3', 
		'\x2', '\x2', '\x2', '\x1E75', '\x1E76', '\x3', '\x2', '\x2', '\x2', '\x1E76', 
		'\x1E77', '\x3', '\x2', '\x2', '\x2', '\x1E77', '\x1E79', '\x5', '\x472', 
		'\x23A', '\x2', '\x1E78', '\x1E75', '\x3', '\x2', '\x2', '\x2', '\x1E79', 
		'\x1E7A', '\x3', '\x2', '\x2', '\x2', '\x1E7A', '\x1E78', '\x3', '\x2', 
		'\x2', '\x2', '\x1E7A', '\x1E7B', '\x3', '\x2', '\x2', '\x2', '\x1E7B', 
		'\x1E7C', '\x3', '\x2', '\x2', '\x2', '\x1E7C', '\x1E7D', '\a', '\x2EF', 
		'\x2', '\x2', '\x1E7D', '\x1E7E', '\a', '\x28C', '\x2', '\x2', '\x1E7E', 
		'\x1E80', '\a', '\x2EE', '\x2', '\x2', '\x1E7F', '\x1E81', '\x5', '\x378', 
		'\x1BD', '\x2', '\x1E80', '\x1E7F', '\x3', '\x2', '\x2', '\x2', '\x1E80', 
		'\x1E81', '\x3', '\x2', '\x2', '\x2', '\x1E81', '\x1E82', '\x3', '\x2', 
		'\x2', '\x2', '\x1E82', '\x1E83', '\a', '\x2EF', '\x2', '\x2', '\x1E83', 
		'\x1E85', '\x3', '\x2', '\x2', '\x2', '\x1E84', '\x1E6F', '\x3', '\x2', 
		'\x2', '\x2', '\x1E84', '\x1E73', '\x3', '\x2', '\x2', '\x2', '\x1E85', 
		'\x3CD', '\x3', '\x2', '\x2', '\x2', '\x1E86', '\x1E89', '\a', '\x1B1', 
		'\x2', '\x2', '\x1E87', '\x1E88', '\a', '?', '\x2', '\x2', '\x1E88', '\x1E8A', 
		'\a', '\x28D', '\x2', '\x2', '\x1E89', '\x1E87', '\x3', '\x2', '\x2', 
		'\x2', '\x1E89', '\x1E8A', '\x3', '\x2', '\x2', '\x2', '\x1E8A', '\x1E8B', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8B', '\x1E8D', '\x5', '\x37A', '\x1BE', 
		'\x2', '\x1E8C', '\x1E8E', '\x5', '\x3F4', '\x1FB', '\x2', '\x1E8D', '\x1E8C', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8D', '\x1E8E', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8E', '\x1E8F', '\x3', '\x2', '\x2', '\x2', '\x1E8F', '\x1E90', '\a', 
		'\x2F4', '\x2', '\x2', '\x1E90', '\x1E92', '\x5', '\x37A', '\x1BE', '\x2', 
		'\x1E91', '\x1E93', '\x5', '\x3F4', '\x1FB', '\x2', '\x1E92', '\x1E91', 
		'\x3', '\x2', '\x2', '\x2', '\x1E92', '\x1E93', '\x3', '\x2', '\x2', '\x2', 
		'\x1E93', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x1E94', '\x1E95', '\a', 
		'\x2A6', '\x2', '\x2', '\x1E95', '\x1E97', '\a', '\x2EE', '\x2', '\x2', 
		'\x1E96', '\x1E98', '\t', 'n', '\x2', '\x2', '\x1E97', '\x1E96', '\x3', 
		'\x2', '\x2', '\x2', '\x1E97', '\x1E98', '\x3', '\x2', '\x2', '\x2', '\x1E98', 
		'\x1E9A', '\x3', '\x2', '\x2', '\x2', '\x1E99', '\x1E9B', '\t', 'w', '\x2', 
		'\x2', '\x1E9A', '\x1E99', '\x3', '\x2', '\x2', '\x2', '\x1E9A', '\x1E9B', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9B', '\x1EA0', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9C', '\x1E9E', '\a', '\x2F4', '\x2', '\x2', '\x1E9D', '\x1E9C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E9D', '\x1E9E', '\x3', '\x2', '\x2', '\x2', '\x1E9E', 
		'\x1E9F', '\x3', '\x2', '\x2', '\x2', '\x1E9F', '\x1EA1', '\x5', '\x3D8', 
		'\x1ED', '\x2', '\x1EA0', '\x1E9D', '\x3', '\x2', '\x2', '\x2', '\x1EA1', 
		'\x1EA2', '\x3', '\x2', '\x2', '\x2', '\x1EA2', '\x1EA0', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA2', '\x1EA3', '\x3', '\x2', '\x2', '\x2', '\x1EA3', 
		'\x1EA4', '\x3', '\x2', '\x2', '\x2', '\x1EA4', '\x1EA5', '\a', '\x2EF', 
		'\x2', '\x2', '\x1EA5', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x1EA6', 
		'\x1EA7', '\a', '\x2AC', '\x2', '\x2', '\x1EA7', '\x1EAB', '\a', '\x2EE', 
		'\x2', '\x2', '\x1EA8', '\x1EA9', '\x5', '\x386', '\x1C4', '\x2', '\x1EA9', 
		'\x1EAA', '\x5', '\x3F4', '\x1FB', '\x2', '\x1EAA', '\x1EAC', '\x3', '\x2', 
		'\x2', '\x2', '\x1EAB', '\x1EA8', '\x3', '\x2', '\x2', '\x2', '\x1EAB', 
		'\x1EAC', '\x3', '\x2', '\x2', '\x2', '\x1EAC', '\x1EB3', '\x3', '\x2', 
		'\x2', '\x2', '\x1EAD', '\x1EAE', '\a', '\x2F4', '\x2', '\x2', '\x1EAE', 
		'\x1EAF', '\x5', '\x386', '\x1C4', '\x2', '\x1EAF', '\x1EB0', '\x5', '\x3F4', 
		'\x1FB', '\x2', '\x1EB0', '\x1EB2', '\x3', '\x2', '\x2', '\x2', '\x1EB1', 
		'\x1EAD', '\x3', '\x2', '\x2', '\x2', '\x1EB2', '\x1EB5', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB3', '\x1EB1', '\x3', '\x2', '\x2', '\x2', '\x1EB3', 
		'\x1EB4', '\x3', '\x2', '\x2', '\x2', '\x1EB4', '\x1EB7', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB5', '\x1EB3', '\x3', '\x2', '\x2', '\x2', '\x1EB6', 
		'\x1EB8', '\x5', '\x3D6', '\x1EC', '\x2', '\x1EB7', '\x1EB6', '\x3', '\x2', 
		'\x2', '\x2', '\x1EB7', '\x1EB8', '\x3', '\x2', '\x2', '\x2', '\x1EB8', 
		'\x1EB9', '\x3', '\x2', '\x2', '\x2', '\x1EB9', '\x1EBA', '\a', '\x2EF', 
		'\x2', '\x2', '\x1EBA', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x1EBB', 
		'\x1EC6', '\x5', '\x3FC', '\x1FF', '\x2', '\x1EBC', '\x1EBD', '\a', '\xDC', 
		'\x2', '\x2', '\x1EBD', '\x1EC7', '\a', '\x19F', '\x2', '\x2', '\x1EBE', 
		'\x1EC1', '\x5', '\x44E', '\x228', '\x2', '\x1EBF', '\x1EC0', '\a', '\x1B3', 
		'\x2', '\x2', '\x1EC0', '\x1EC2', '\x5', '\x386', '\x1C4', '\x2', '\x1EC1', 
		'\x1EBF', '\x3', '\x2', '\x2', '\x2', '\x1EC1', '\x1EC2', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC2', '\x1EC4', '\x3', '\x2', '\x2', '\x2', '\x1EC3', 
		'\x1EC5', '\x5', '\x3D6', '\x1EC', '\x2', '\x1EC4', '\x1EC3', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC4', '\x1EC5', '\x3', '\x2', '\x2', '\x2', '\x1EC5', 
		'\x1EC7', '\x3', '\x2', '\x2', '\x2', '\x1EC6', '\x1EBC', '\x3', '\x2', 
		'\x2', '\x2', '\x1EC6', '\x1EBE', '\x3', '\x2', '\x2', '\x2', '\x1EC7', 
		'\x3D5', '\x3', '\x2', '\x2', '\x2', '\x1EC8', '\x1EC9', '\a', '\x8E', 
		'\x2', '\x2', '\x1EC9', '\x1ECA', '\x5', '\x386', '\x1C4', '\x2', '\x1ECA', 
		'\x3D7', '\x3', '\x2', '\x2', '\x2', '\x1ECB', '\x1ED2', '\x5', '\x37A', 
		'\x1BE', '\x2', '\x1ECC', '\x1ED0', '\a', '\x19', '\x2', '\x2', '\x1ECD', 
		'\x1ED1', '\x5', '\x48C', '\x247', '\x2', '\x1ECE', '\x1ECF', '\a', '\xBA', 
		'\x2', '\x2', '\x1ECF', '\x1ED1', '\x5', '\x386', '\x1C4', '\x2', '\x1ED0', 
		'\x1ECD', '\x3', '\x2', '\x2', '\x2', '\x1ED0', '\x1ECE', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED1', '\x1ED3', '\x3', '\x2', '\x2', '\x2', '\x1ED2', 
		'\x1ECC', '\x3', '\x2', '\x2', '\x2', '\x1ED2', '\x1ED3', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED3', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x1ED4', 
		'\x1ED8', '\a', '\x295', '\x2', '\x2', '\x1ED5', '\x1ED6', '\a', '\x17E', 
		'\x2', '\x2', '\x1ED6', '\x1ED9', '\a', '\x28D', '\x2', '\x2', '\x1ED7', 
		'\x1ED9', '\x5', '\x37A', '\x1BE', '\x2', '\x1ED8', '\x1ED5', '\x3', '\x2', 
		'\x2', '\x2', '\x1ED8', '\x1ED7', '\x3', '\x2', '\x2', '\x2', '\x1ED9', 
		'\x3DB', '\x3', '\x2', '\x2', '\x2', '\x1EDA', '\x1EE0', '\a', '\x237', 
		'\x2', '\x2', '\x1EDB', '\x1EE1', '\a', '\x2B8', '\x2', '\x2', '\x1EDC', 
		'\x1EDE', '\a', '\x17E', '\x2', '\x2', '\x1EDD', '\x1EDF', '\a', '\x28D', 
		'\x2', '\x2', '\x1EDE', '\x1EDD', '\x3', '\x2', '\x2', '\x2', '\x1EDE', 
		'\x1EDF', '\x3', '\x2', '\x2', '\x2', '\x1EDF', '\x1EE1', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE0', '\x1EDB', '\x3', '\x2', '\x2', '\x2', '\x1EE0', 
		'\x1EDC', '\x3', '\x2', '\x2', '\x2', '\x1EE1', '\x3DD', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE2', '\x1EE3', '\a', '\xB1', '\x2', '\x2', '\x1EE3', 
		'\x1EE4', '\x5', '\x386', '\x1C4', '\x2', '\x1EE4', '\x3DF', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE5', '\x1EE6', '\a', '\x295', '\x2', '\x2', '\x1EE6', 
		'\x1EE7', '\x5', '\x386', '\x1C4', '\x2', '\x1EE7', '\x3E1', '\x3', '\x2', 
		'\x2', '\x2', '\x1EE8', '\x1EE9', '\a', '\x17E', '\x2', '\x2', '\x1EE9', 
		'\x1EF1', '\a', '\xFE', '\x2', '\x2', '\x1EEA', '\x1EEE', '\a', '\xFE', 
		'\x2', '\x2', '\x1EEB', '\x1EEC', '\a', '\x22A', '\x2', '\x2', '\x1EEC', 
		'\x1EED', '\a', '\x302', '\x2', '\x2', '\x1EED', '\x1EEF', '\x5', '\x386', 
		'\x1C4', '\x2', '\x1EEE', '\x1EEB', '\x3', '\x2', '\x2', '\x2', '\x1EEE', 
		'\x1EEF', '\x3', '\x2', '\x2', '\x2', '\x1EEF', '\x1EF1', '\x3', '\x2', 
		'\x2', '\x2', '\x1EF0', '\x1EE8', '\x3', '\x2', '\x2', '\x2', '\x1EF0', 
		'\x1EEA', '\x3', '\x2', '\x2', '\x2', '\x1EF1', '\x3E3', '\x3', '\x2', 
		'\x2', '\x2', '\x1EF2', '\x1EFC', '\a', '\x2F5', '\x2', '\x2', '\x1EF3', 
		'\x1EFC', '\a', '\xC5', '\x2', '\x2', '\x1EF4', '\x1EFC', '\a', '\x30A', 
		'\x2', '\x2', '\x1EF5', '\x1EF6', '\a', '\x224', '\x2', '\x2', '\x1EF6', 
		'\x1EFC', '\t', 'x', '\x2', '\x2', '\x1EF7', '\x1EFC', '\a', '\x30B', 
		'\x2', '\x2', '\x1EF8', '\x1EFC', '\x5', '\x3E8', '\x1F5', '\x2', '\x1EF9', 
		'\x1EFC', '\x5', '\x3F0', '\x1F9', '\x2', '\x1EFA', '\x1EFC', '\x5', '\x3E6', 
		'\x1F4', '\x2', '\x1EFB', '\x1EF2', '\x3', '\x2', '\x2', '\x2', '\x1EFB', 
		'\x1EF3', '\x3', '\x2', '\x2', '\x2', '\x1EFB', '\x1EF4', '\x3', '\x2', 
		'\x2', '\x2', '\x1EFB', '\x1EF5', '\x3', '\x2', '\x2', '\x2', '\x1EFB', 
		'\x1EF7', '\x3', '\x2', '\x2', '\x2', '\x1EFB', '\x1EF8', '\x3', '\x2', 
		'\x2', '\x2', '\x1EFB', '\x1EF9', '\x3', '\x2', '\x2', '\x2', '\x1EFB', 
		'\x1EFA', '\x3', '\x2', '\x2', '\x2', '\x1EFC', '\x3E5', '\x3', '\x2', 
		'\x2', '\x2', '\x1EFD', '\x1EFE', '\a', '\xC2', '\x2', '\x2', '\x1EFE', 
		'\x1EFF', '\x5', '\x292', '\x14A', '\x2', '\x1EFF', '\x3E7', '\x3', '\x2', 
		'\x2', '\x2', '\x1F00', '\x1F01', '\a', '\x29C', '\x2', '\x2', '\x1F01', 
		'\x1F07', '\t', 'y', '\x2', '\x2', '\x1F02', '\x1F03', '\a', '\xC5', '\x2', 
		'\x2', '\x1F03', '\x1F04', '\t', 'z', '\x2', '\x2', '\x1F04', '\x1F08', 
		'\t', '{', '\x2', '\x2', '\x1F05', '\x1F06', '\a', 'l', '\x2', '\x2', 
		'\x1F06', '\x1F08', '\t', '|', '\x2', '\x2', '\x1F07', '\x1F02', '\x3', 
		'\x2', '\x2', '\x2', '\x1F07', '\x1F05', '\x3', '\x2', '\x2', '\x2', '\x1F08', 
		'\x3E9', '\x3', '\x2', '\x2', '\x2', '\x1F09', '\x1F0A', '\a', '\x2EE', 
		'\x2', '\x2', '\x1F0A', '\x1F0B', '\x5', '\x3EC', '\x1F7', '\x2', '\x1F0B', 
		'\x1F0C', '\a', '\x2EF', '\x2', '\x2', '\x1F0C', '\x3EB', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0D', '\x1F0F', '\x5', '\x3EE', '\x1F8', '\x2', '\x1F0E', 
		'\x1F0D', '\x3', '\x2', '\x2', '\x2', '\x1F0E', '\x1F0F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F0F', '\x1F12', '\x3', '\x2', '\x2', '\x2', '\x1F10', 
		'\x1F11', '\a', '\x2F4', '\x2', '\x2', '\x1F11', '\x1F13', '\x5', '\x3EE', 
		'\x1F8', '\x2', '\x1F12', '\x1F10', '\x3', '\x2', '\x2', '\x2', '\x1F13', 
		'\x1F14', '\x3', '\x2', '\x2', '\x2', '\x1F14', '\x1F12', '\x3', '\x2', 
		'\x2', '\x2', '\x1F14', '\x1F15', '\x3', '\x2', '\x2', '\x2', '\x1F15', 
		'\x3ED', '\x3', '\x2', '\x2', '\x2', '\x1F16', '\x1F17', '\x5', '\x498', 
		'\x24D', '\x2', '\x1F17', '\x1F18', '\a', '\x305', '\x2', '\x2', '\x1F18', 
		'\x1F19', '\x5', '\x37A', '\x1BE', '\x2', '\x1F19', '\x1F1C', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1A', '\x1F1C', '\x5', '\x37A', '\x1BE', '\x2', '\x1F1B', 
		'\x1F16', '\x3', '\x2', '\x2', '\x2', '\x1F1B', '\x1F1A', '\x3', '\x2', 
		'\x2', '\x2', '\x1F1C', '\x3EF', '\x3', '\x2', '\x2', '\x2', '\x1F1D', 
		'\x1F1E', '\a', '\x21F', '\x2', '\x2', '\x1F1E', '\x1F24', '\x5', '\x498', 
		'\x24D', '\x2', '\x1F1F', '\x1F25', '\a', '\x2EA', '\x2', '\x2', '\x1F20', 
		'\x1F25', '\a', '\x198', '\x2', '\x2', '\x1F21', '\x1F25', '\a', '\x191', 
		'\x2', '\x2', '\x1F22', '\x1F25', '\x5', '\x4A0', '\x251', '\x2', '\x1F23', 
		'\x1F25', '\x5', '\x498', '\x24D', '\x2', '\x1F24', '\x1F1F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F24', '\x1F20', '\x3', '\x2', '\x2', '\x2', '\x1F24', 
		'\x1F21', '\x3', '\x2', '\x2', '\x2', '\x1F24', '\x1F22', '\x3', '\x2', 
		'\x2', '\x2', '\x1F24', '\x1F23', '\x3', '\x2', '\x2', '\x2', '\x1F25', 
		'\x3F1', '\x3', '\x2', '\x2', '\x2', '\x1F26', '\x1F28', '\t', '}', '\x2', 
		'\x2', '\x1F27', '\x1F29', '\a', '\xDC', '\x2', '\x2', '\x1F28', '\x1F27', 
		'\x3', '\x2', '\x2', '\x2', '\x1F28', '\x1F29', '\x3', '\x2', '\x2', '\x2', 
		'\x1F29', '\x1F2A', '\x3', '\x2', '\x2', '\x2', '\x1F2A', '\x1F2C', '\a', 
		'\x2EE', '\x2', '\x2', '\x1F2B', '\x1F2D', '\x5', '\x378', '\x1BD', '\x2', 
		'\x1F2C', '\x1F2B', '\x3', '\x2', '\x2', '\x2', '\x1F2C', '\x1F2D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F2D', '\x1F2E', '\x3', '\x2', '\x2', '\x2', '\x1F2E', 
		'\x1F2F', '\a', '\x2EF', '\x2', '\x2', '\x1F2F', '\x3F3', '\x3', '\x2', 
		'\x2', '\x2', '\x1F30', '\x1F32', '\a', '\x19', '\x2', '\x2', '\x1F31', 
		'\x1F30', '\x3', '\x2', '\x2', '\x2', '\x1F31', '\x1F32', '\x3', '\x2', 
		'\x2', '\x2', '\x1F32', '\x1F35', '\x3', '\x2', '\x2', '\x2', '\x1F33', 
		'\x1F36', '\x5', '\x468', '\x235', '\x2', '\x1F34', '\x1F36', '\x5', '\x4A4', 
		'\x253', '\x2', '\x1F35', '\x1F33', '\x3', '\x2', '\x2', '\x2', '\x1F35', 
		'\x1F34', '\x3', '\x2', '\x2', '\x2', '\x1F36', '\x1F39', '\x3', '\x2', 
		'\x2', '\x2', '\x1F37', '\x1F39', '\a', '\x19', '\x2', '\x2', '\x1F38', 
		'\x1F31', '\x3', '\x2', '\x2', '\x2', '\x1F38', '\x1F37', '\x3', '\x2', 
		'\x2', '\x2', '\x1F39', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x1F3A', 
		'\x1F3D', '\x5', '\x468', '\x235', '\x2', '\x1F3B', '\x1F3D', '\x5', '\x4A4', 
		'\x253', '\x2', '\x1F3C', '\x1F3A', '\x3', '\x2', '\x2', '\x2', '\x1F3C', 
		'\x1F3B', '\x3', '\x2', '\x2', '\x2', '\x1F3D', '\x3F7', '\x3', '\x2', 
		'\x2', '\x2', '\x1F3E', '\x1F43', '\a', '\x29E', '\x2', '\x2', '\x1F3F', 
		'\x1F40', '\a', 'w', '\x2', '\x2', '\x1F40', '\x1F41', '\a', '\x192', 
		'\x2', '\x2', '\x1F41', '\x1F44', '\x5', '\x40A', '\x206', '\x2', '\x1F42', 
		'\x1F44', '\x5', '\x37A', '\x1BE', '\x2', '\x1F43', '\x1F3F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F43', '\x1F42', '\x3', '\x2', '\x2', '\x2', '\x1F44', 
		'\x3F9', '\x3', '\x2', '\x2', '\x2', '\x1F45', '\x1F46', '\a', '>', '\x2', 
		'\x2', '\x1F46', '\x1F48', '\a', 'W', '\x2', '\x2', '\x1F47', '\x1F45', 
		'\x3', '\x2', '\x2', '\x2', '\x1F47', '\x1F48', '\x3', '\x2', '\x2', '\x2', 
		'\x1F48', '\x1F49', '\x3', '\x2', '\x2', '\x2', '\x1F49', '\x1F4E', '\a', 
		'\x117', '\x2', '\x2', '\x1F4A', '\x1F4C', '\a', '\x2F4', '\x2', '\x2', 
		'\x1F4B', '\x1F4A', '\x3', '\x2', '\x2', '\x2', '\x1F4B', '\x1F4C', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4C', '\x1F4D', '\x3', '\x2', '\x2', '\x2', '\x1F4D', 
		'\x1F4F', '\x5', '\x408', '\x205', '\x2', '\x1F4E', '\x1F4B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F4F', '\x1F50', '\x3', '\x2', '\x2', '\x2', '\x1F50', 
		'\x1F4E', '\x3', '\x2', '\x2', '\x2', '\x1F50', '\x1F51', '\x3', '\x2', 
		'\x2', '\x2', '\x1F51', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x1F52', 
		'\x1F55', '\x5', '\x468', '\x235', '\x2', '\x1F53', '\x1F55', '\x5', '\x4A4', 
		'\x253', '\x2', '\x1F54', '\x1F52', '\x3', '\x2', '\x2', '\x2', '\x1F54', 
		'\x1F53', '\x3', '\x2', '\x2', '\x2', '\x1F55', '\x3FD', '\x3', '\x2', 
		'\x2', '\x2', '\x1F56', '\x1F59', '\x5', '\x484', '\x243', '\x2', '\x1F57', 
		'\x1F58', '\a', '\x2F6', '\x2', '\x2', '\x1F58', '\x1F5A', '\x5', '\x40E', 
		'\x208', '\x2', '\x1F59', '\x1F57', '\x3', '\x2', '\x2', '\x2', '\x1F59', 
		'\x1F5A', '\x3', '\x2', '\x2', '\x2', '\x1F5A', '\x3FF', '\x3', '\x2', 
		'\x2', '\x2', '\x1F5B', '\x1F5C', '\x5', '\x468', '\x235', '\x2', '\x1F5C', 
		'\x401', '\x3', '\x2', '\x2', '\x2', '\x1F5D', '\x1F5F', '\x5', '\x48C', 
		'\x247', '\x2', '\x1F5E', '\x1F60', '\x5', '\xB4', '[', '\x2', '\x1F5F', 
		'\x1F5E', '\x3', '\x2', '\x2', '\x2', '\x1F5F', '\x1F60', '\x3', '\x2', 
		'\x2', '\x2', '\x1F60', '\x403', '\x3', '\x2', '\x2', '\x2', '\x1F61', 
		'\x1F64', '\x5', '\x48C', '\x247', '\x2', '\x1F62', '\x1F64', '\a', '\x63', 
		'\x2', '\x2', '\x1F63', '\x1F61', '\x3', '\x2', '\x2', '\x2', '\x1F63', 
		'\x1F62', '\x3', '\x2', '\x2', '\x2', '\x1F64', '\x405', '\x3', '\x2', 
		'\x2', '\x2', '\x1F65', '\x1F68', '\x5', '\x484', '\x243', '\x2', '\x1F66', 
		'\x1F67', '\a', '\x2F6', '\x2', '\x2', '\x1F67', '\x1F69', '\x5', '\x40E', 
		'\x208', '\x2', '\x1F68', '\x1F66', '\x3', '\x2', '\x2', '\x2', '\x1F68', 
		'\x1F69', '\x3', '\x2', '\x2', '\x2', '\x1F69', '\x407', '\x3', '\x2', 
		'\x2', '\x2', '\x1F6A', '\x1F6B', '\a', '\x306', '\x2', '\x2', '\x1F6B', 
		'\x1F6D', '\x5', '\x494', '\x24B', '\x2', '\x1F6C', '\x1F6A', '\x3', '\x2', 
		'\x2', '\x2', '\x1F6C', '\x1F6D', '\x3', '\x2', '\x2', '\x2', '\x1F6D', 
		'\x1F6E', '\x3', '\x2', '\x2', '\x2', '\x1F6E', '\x1F71', '\x5', '\x48C', 
		'\x247', '\x2', '\x1F6F', '\x1F70', '\a', '\x2E7', '\x2', '\x2', '\x1F70', 
		'\x1F72', '\x5', '\x48C', '\x247', '\x2', '\x1F71', '\x1F6F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F71', '\x1F72', '\x3', '\x2', '\x2', '\x2', '\x1F72', 
		'\x1F75', '\x3', '\x2', '\x2', '\x2', '\x1F73', '\x1F75', '\x5', '\x456', 
		'\x22C', '\x2', '\x1F74', '\x1F6C', '\x3', '\x2', '\x2', '\x2', '\x1F74', 
		'\x1F73', '\x3', '\x2', '\x2', '\x2', '\x1F75', '\x409', '\x3', '\x2', 
		'\x2', '\x2', '\x1F76', '\x1F79', '\x5', '\x458', '\x22D', '\x2', '\x1F77', 
		'\x1F79', '\x5', '\x456', '\x22C', '\x2', '\x1F78', '\x1F76', '\x3', '\x2', 
		'\x2', '\x2', '\x1F78', '\x1F77', '\x3', '\x2', '\x2', '\x2', '\x1F79', 
		'\x40B', '\x3', '\x2', '\x2', '\x2', '\x1F7A', '\x1F7D', '\x5', '\x468', 
		'\x235', '\x2', '\x1F7B', '\x1F7D', '\x5', '\x456', '\x22C', '\x2', '\x1F7C', 
		'\x1F7A', '\x3', '\x2', '\x2', '\x2', '\x1F7C', '\x1F7B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F7D', '\x40D', '\x3', '\x2', '\x2', '\x2', '\x1F7E', 
		'\x1F7F', '\x5', '\x468', '\x235', '\x2', '\x1F7F', '\x40F', '\x3', '\x2', 
		'\x2', '\x2', '\x1F80', '\x1F84', '\x5', '\x43E', '\x220', '\x2', '\x1F81', 
		'\x1F82', '\a', '\x2F6', '\x2', '\x2', '\x1F82', '\x1F85', '\x5', '\x40E', 
		'\x208', '\x2', '\x1F83', '\x1F85', '\x5', '\x3F2', '\x1FA', '\x2', '\x1F84', 
		'\x1F81', '\x3', '\x2', '\x2', '\x2', '\x1F84', '\x1F83', '\x3', '\x2', 
		'\x2', '\x2', '\x1F84', '\x1F85', '\x3', '\x2', '\x2', '\x2', '\x1F85', 
		'\x411', '\x3', '\x2', '\x2', '\x2', '\x1F86', '\x1F87', '\x5', '\x48C', 
		'\x247', '\x2', '\x1F87', '\x413', '\x3', '\x2', '\x2', '\x2', '\x1F88', 
		'\x1F89', '\x5', '\x48C', '\x247', '\x2', '\x1F89', '\x415', '\x3', '\x2', 
		'\x2', '\x2', '\x1F8A', '\x1F8B', '\x5', '\x48C', '\x247', '\x2', '\x1F8B', 
		'\x417', '\x3', '\x2', '\x2', '\x2', '\x1F8C', '\x1F8D', '\x5', '\x48C', 
		'\x247', '\x2', '\x1F8D', '\x419', '\x3', '\x2', '\x2', '\x2', '\x1F8E', 
		'\x1F8F', '\x5', '\x48C', '\x247', '\x2', '\x1F8F', '\x41B', '\x3', '\x2', 
		'\x2', '\x2', '\x1F90', '\x1F91', '\x5', '\x48C', '\x247', '\x2', '\x1F91', 
		'\x41D', '\x3', '\x2', '\x2', '\x2', '\x1F92', '\x1F93', '\x5', '\x48C', 
		'\x247', '\x2', '\x1F93', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x1F94', 
		'\x1F95', '\x5', '\x48C', '\x247', '\x2', '\x1F95', '\x421', '\x3', '\x2', 
		'\x2', '\x2', '\x1F96', '\x1F97', '\x5', '\x48C', '\x247', '\x2', '\x1F97', 
		'\x423', '\x3', '\x2', '\x2', '\x2', '\x1F98', '\x1F99', '\x5', '\x48C', 
		'\x247', '\x2', '\x1F99', '\x425', '\x3', '\x2', '\x2', '\x2', '\x1F9A', 
		'\x1F9B', '\x5', '\x48C', '\x247', '\x2', '\x1F9B', '\x427', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9C', '\x1F9D', '\x5', '\x48C', '\x247', '\x2', '\x1F9D', 
		'\x429', '\x3', '\x2', '\x2', '\x2', '\x1F9E', '\x1F9F', '\x5', '\x48C', 
		'\x247', '\x2', '\x1F9F', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x1FA0', 
		'\x1FA1', '\x5', '\x48C', '\x247', '\x2', '\x1FA1', '\x42D', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA2', '\x1FA5', '\x5', '\x468', '\x235', '\x2', '\x1FA3', 
		'\x1FA4', '\a', '\x2E7', '\x2', '\x2', '\x1FA4', '\x1FA6', '\x5', '\x48C', 
		'\x247', '\x2', '\x1FA5', '\x1FA3', '\x3', '\x2', '\x2', '\x2', '\x1FA5', 
		'\x1FA6', '\x3', '\x2', '\x2', '\x2', '\x1FA6', '\x42F', '\x3', '\x2', 
		'\x2', '\x2', '\x1FA7', '\x1FA8', '\x5', '\x42E', '\x218', '\x2', '\x1FA8', 
		'\x431', '\x3', '\x2', '\x2', '\x2', '\x1FA9', '\x1FAA', '\x5', '\x42E', 
		'\x218', '\x2', '\x1FAA', '\x433', '\x3', '\x2', '\x2', '\x2', '\x1FAB', 
		'\x1FAC', '\x5', '\x42E', '\x218', '\x2', '\x1FAC', '\x435', '\x3', '\x2', 
		'\x2', '\x2', '\x1FAD', '\x1FAE', '\x5', '\x42E', '\x218', '\x2', '\x1FAE', 
		'\x437', '\x3', '\x2', '\x2', '\x2', '\x1FAF', '\x1FB0', '\x5', '\x42E', 
		'\x218', '\x2', '\x1FB0', '\x439', '\x3', '\x2', '\x2', '\x2', '\x1FB1', 
		'\x1FB2', '\x5', '\x42E', '\x218', '\x2', '\x1FB2', '\x43B', '\x3', '\x2', 
		'\x2', '\x2', '\x1FB3', '\x1FB4', '\x5', '\x42E', '\x218', '\x2', '\x1FB4', 
		'\x43D', '\x3', '\x2', '\x2', '\x2', '\x1FB5', '\x1FB6', '\x5', '\x42E', 
		'\x218', '\x2', '\x1FB6', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x1FB7', 
		'\x1FD0', '\x5', '\x410', '\x209', '\x2', '\x1FB8', '\x1FBD', '\a', '\x288', 
		'\x2', '\x2', '\x1FB9', '\x1FBB', '\a', '\x2F4', '\x2', '\x2', '\x1FBA', 
		'\x1FB9', '\x3', '\x2', '\x2', '\x2', '\x1FBA', '\x1FBB', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBB', '\x1FBC', '\x3', '\x2', '\x2', '\x2', '\x1FBC', 
		'\x1FBE', '\x5', '\x41E', '\x210', '\x2', '\x1FBD', '\x1FBA', '\x3', '\x2', 
		'\x2', '\x2', '\x1FBE', '\x1FBF', '\x3', '\x2', '\x2', '\x2', '\x1FBF', 
		'\x1FBD', '\x3', '\x2', '\x2', '\x2', '\x1FBF', '\x1FC0', '\x3', '\x2', 
		'\x2', '\x2', '\x1FC0', '\x1FD0', '\x3', '\x2', '\x2', '\x2', '\x1FC1', 
		'\x1FC2', '\a', '\x9A', '\x2', '\x2', '\x1FC2', '\x1FD0', '\x5', '\x41C', 
		'\x20F', '\x2', '\x1FC3', '\x1FC4', '\a', '\xA9', '\x2', '\x2', '\x1FC4', 
		'\x1FD0', '\x5', '\x426', '\x214', '\x2', '\x1FC5', '\x1FC6', '\a', '\x157', 
		'\x2', '\x2', '\x1FC6', '\x1FC7', '\a', '\x15C', '\x2', '\x2', '\x1FC7', 
		'\x1FD0', '\x5', '\x426', '\x214', '\x2', '\x1FC8', '\x1FC9', '\a', '\x11D', 
		'\x2', '\x2', '\x1FC9', '\x1FCA', '\t', '~', '\x2', '\x2', '\x1FCA', '\x1FD0', 
		'\x5', '\x426', '\x214', '\x2', '\x1FCB', '\x1FCC', '\a', '\x236', '\x2', 
		'\x2', '\x1FCC', '\x1FCD', '\a', '\x26F', '\x2', '\x2', '\x1FCD', '\x1FCE', 
		'\a', '\x1D4', '\x2', '\x2', '\x1FCE', '\x1FD0', '\x5', '\x426', '\x214', 
		'\x2', '\x1FCF', '\x1FB7', '\x3', '\x2', '\x2', '\x2', '\x1FCF', '\x1FB8', 
		'\x3', '\x2', '\x2', '\x2', '\x1FCF', '\x1FC1', '\x3', '\x2', '\x2', '\x2', 
		'\x1FCF', '\x1FC3', '\x3', '\x2', '\x2', '\x2', '\x1FCF', '\x1FC5', '\x3', 
		'\x2', '\x2', '\x2', '\x1FCF', '\x1FC8', '\x3', '\x2', '\x2', '\x2', '\x1FCF', 
		'\x1FCB', '\x3', '\x2', '\x2', '\x2', '\x1FD0', '\x441', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD1', '\x1FD3', '\a', '\x2F4', '\x2', '\x2', '\x1FD2', 
		'\x1FD1', '\x3', '\x2', '\x2', '\x2', '\x1FD2', '\x1FD3', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD3', '\x1FD4', '\x3', '\x2', '\x2', '\x2', '\x1FD4', 
		'\x1FD6', '\x5', '\x48A', '\x246', '\x2', '\x1FD5', '\x1FD2', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD6', '\x1FD7', '\x3', '\x2', '\x2', '\x2', '\x1FD7', 
		'\x1FD5', '\x3', '\x2', '\x2', '\x2', '\x1FD7', '\x1FD8', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD8', '\x443', '\x3', '\x2', '\x2', '\x2', '\x1FD9', 
		'\x1FDA', '\a', '\x2EE', '\x2', '\x2', '\x1FDA', '\x1FDB', '\x5', '\x442', 
		'\x222', '\x2', '\x1FDB', '\x1FDC', '\a', '\x2EF', '\x2', '\x2', '\x1FDC', 
		'\x445', '\x3', '\x2', '\x2', '\x2', '\x1FDD', '\x1FDE', '\a', '\x121', 
		'\x2', '\x2', '\x1FDE', '\x1FDF', '\a', '\x2EE', '\x2', '\x2', '\x1FDF', 
		'\x1FE0', '\a', '\x2C3', '\x2', '\x2', '\x1FE0', '\x1FE1', '\t', '[', 
		'\x2', '\x2', '\x1FE1', '\x1FE2', '\x5', '\x32A', '\x196', '\x2', '\x1FE2', 
		'\x1FE4', '\a', '\x2EF', '\x2', '\x2', '\x1FE3', '\x1FE5', '\x5', '\x3BC', 
		'\x1DF', '\x2', '\x1FE4', '\x1FE3', '\x3', '\x2', '\x2', '\x2', '\x1FE4', 
		'\x1FE5', '\x3', '\x2', '\x2', '\x2', '\x1FE5', '\x447', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE6', '\x1FF0', '\a', '\x2EE', '\x2', '\x2', '\x1FE7', 
		'\x1FE9', '\a', '\x2F4', '\x2', '\x2', '\x1FE8', '\x1FE7', '\x3', '\x2', 
		'\x2', '\x2', '\x1FE8', '\x1FE9', '\x3', '\x2', '\x2', '\x2', '\x1FE9', 
		'\x1FEA', '\x3', '\x2', '\x2', '\x2', '\x1FEA', '\x1FEC', '\x5', '\x3EE', 
		'\x1F8', '\x2', '\x1FEB', '\x1FED', '\x5', '\x44C', '\x227', '\x2', '\x1FEC', 
		'\x1FEB', '\x3', '\x2', '\x2', '\x2', '\x1FEC', '\x1FED', '\x3', '\x2', 
		'\x2', '\x2', '\x1FED', '\x1FEF', '\x3', '\x2', '\x2', '\x2', '\x1FEE', 
		'\x1FE8', '\x3', '\x2', '\x2', '\x2', '\x1FEF', '\x1FF2', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF0', '\x1FEE', '\x3', '\x2', '\x2', '\x2', '\x1FF0', 
		'\x1FF1', '\x3', '\x2', '\x2', '\x2', '\x1FF1', '\x1FF3', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF2', '\x1FF0', '\x3', '\x2', '\x2', '\x2', '\x1FF3', 
		'\x1FF5', '\a', '\x2EF', '\x2', '\x2', '\x1FF4', '\x1FF6', '\x5', '\x446', 
		'\x224', '\x2', '\x1FF5', '\x1FF4', '\x3', '\x2', '\x2', '\x2', '\x1FF5', 
		'\x1FF6', '\x3', '\x2', '\x2', '\x2', '\x1FF6', '\x449', '\x3', '\x2', 
		'\x2', '\x2', '\x1FF7', '\x1FF8', '\a', '\x2EE', '\x2', '\x2', '\x1FF8', 
		'\x2005', '\x5', '\x48A', '\x246', '\x2', '\x1FF9', '\x1FFC', '\a', '\x2F4', 
		'\x2', '\x2', '\x1FFA', '\x1FFD', '\x5', '\x4A0', '\x251', '\x2', '\x1FFB', 
		'\x1FFD', '\a', '\x18A', '\x2', '\x2', '\x1FFC', '\x1FFA', '\x3', '\x2', 
		'\x2', '\x2', '\x1FFC', '\x1FFB', '\x3', '\x2', '\x2', '\x2', '\x1FFD', 
		'\x2003', '\x3', '\x2', '\x2', '\x2', '\x1FFE', '\x2001', '\a', '\x2F4', 
		'\x2', '\x2', '\x1FFF', '\x2002', '\x5', '\x4A0', '\x251', '\x2', '\x2000', 
		'\x2002', '\a', '\x18A', '\x2', '\x2', '\x2001', '\x1FFF', '\x3', '\x2', 
		'\x2', '\x2', '\x2001', '\x2000', '\x3', '\x2', '\x2', '\x2', '\x2002', 
		'\x2004', '\x3', '\x2', '\x2', '\x2', '\x2003', '\x1FFE', '\x3', '\x2', 
		'\x2', '\x2', '\x2003', '\x2004', '\x3', '\x2', '\x2', '\x2', '\x2004', 
		'\x2006', '\x3', '\x2', '\x2', '\x2', '\x2005', '\x1FF9', '\x3', '\x2', 
		'\x2', '\x2', '\x2005', '\x2006', '\x3', '\x2', '\x2', '\x2', '\x2006', 
		'\x2007', '\x3', '\x2', '\x2', '\x2', '\x2007', '\x2018', '\a', '\x28A', 
		'\x2', '\x2', '\x2008', '\x2009', '\x5', '\x410', '\x209', '\x2', '\x2009', 
		'\x200A', '\a', '\x2E7', '\x2', '\x2', '\x200A', '\x200B', '\a', '\x2F1', 
		'\x2', '\x2', '\x200B', '\x2019', '\x3', '\x2', '\x2', '\x2', '\x200C', 
		'\x2019', '\a', '\x2F1', '\x2', '\x2', '\x200D', '\x200F', '\a', '\x2F4', 
		'\x2', '\x2', '\x200E', '\x200D', '\x3', '\x2', '\x2', '\x2', '\x200E', 
		'\x200F', '\x3', '\x2', '\x2', '\x2', '\x200F', '\x2010', '\x3', '\x2', 
		'\x2', '\x2', '\x2010', '\x2012', '\x5', '\x37A', '\x1BE', '\x2', '\x2011', 
		'\x2013', '\x5', '\x3F4', '\x1FB', '\x2', '\x2012', '\x2011', '\x3', '\x2', 
		'\x2', '\x2', '\x2012', '\x2013', '\x3', '\x2', '\x2', '\x2', '\x2013', 
		'\x2015', '\x3', '\x2', '\x2', '\x2', '\x2014', '\x200E', '\x3', '\x2', 
		'\x2', '\x2', '\x2015', '\x2016', '\x3', '\x2', '\x2', '\x2', '\x2016', 
		'\x2014', '\x3', '\x2', '\x2', '\x2', '\x2016', '\x2017', '\x3', '\x2', 
		'\x2', '\x2', '\x2017', '\x2019', '\x3', '\x2', '\x2', '\x2', '\x2018', 
		'\x2008', '\x3', '\x2', '\x2', '\x2', '\x2018', '\x200C', '\x3', '\x2', 
		'\x2', '\x2', '\x2018', '\x2014', '\x3', '\x2', '\x2', '\x2', '\x2019', 
		'\x201A', '\x3', '\x2', '\x2', '\x2', '\x201A', '\x201C', '\a', '\x2EF', 
		'\x2', '\x2', '\x201B', '\x201D', '\x5', '\x446', '\x224', '\x2', '\x201C', 
		'\x201B', '\x3', '\x2', '\x2', '\x2', '\x201C', '\x201D', '\x3', '\x2', 
		'\x2', '\x2', '\x201D', '\x44B', '\x3', '\x2', '\x2', '\x2', '\x201E', 
		'\x201F', '\t', '\x7F', '\x2', '\x2', '\x201F', '\x2020', '\a', '\x18B', 
		'\x2', '\x2', '\x2020', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x2021', 
		'\x202A', '\x5', '\x450', '\x229', '\x2', '\x2022', '\x2024', '\a', '\x1E6', 
		'\x2', '\x2', '\x2023', '\x2022', '\x3', '\x2', '\x2', '\x2', '\x2023', 
		'\x2024', '\x3', '\x2', '\x2', '\x2', '\x2024', '\x2025', '\x3', '\x2', 
		'\x2', '\x2', '\x2025', '\x2027', '\x5', '\x490', '\x249', '\x2', '\x2026', 
		'\x2028', '\t', '\x80', '\x2', '\x2', '\x2027', '\x2026', '\x3', '\x2', 
		'\x2', '\x2', '\x2027', '\x2028', '\x3', '\x2', '\x2', '\x2', '\x2028', 
		'\x202A', '\x3', '\x2', '\x2', '\x2', '\x2029', '\x2021', '\x3', '\x2', 
		'\x2', '\x2', '\x2029', '\x2023', '\x3', '\x2', '\x2', '\x2', '\x202A', 
		'\x44F', '\x3', '\x2', '\x2', '\x2', '\x202B', '\x202D', '\x5', '\x454', 
		'\x22B', '\x2', '\x202C', '\x202E', '\x5', '\x452', '\x22A', '\x2', '\x202D', 
		'\x202C', '\x3', '\x2', '\x2', '\x2', '\x202D', '\x202E', '\x3', '\x2', 
		'\x2', '\x2', '\x202E', '\x2038', '\x3', '\x2', '\x2', '\x2', '\x202F', 
		'\x2031', '\a', '\x2A2', '\x2', '\x2', '\x2030', '\x2032', '\a', '\x137', 
		'\x2', '\x2', '\x2031', '\x2030', '\x3', '\x2', '\x2', '\x2', '\x2031', 
		'\x2032', '\x3', '\x2', '\x2', '\x2', '\x2032', '\x2033', '\x3', '\x2', 
		'\x2', '\x2', '\x2033', '\x2034', '\a', '\x261', '\x2', '\x2', '\x2034', 
		'\x2039', '\a', '\x2BB', '\x2', '\x2', '\x2035', '\x2036', '\a', 'J', 
		'\x2', '\x2', '\x2036', '\x2037', '\a', '\x21F', '\x2', '\x2', '\x2037', 
		'\x2039', '\x5', '\x494', '\x24B', '\x2', '\x2038', '\x202F', '\x3', '\x2', 
		'\x2', '\x2', '\x2038', '\x2035', '\x3', '\x2', '\x2', '\x2', '\x2038', 
		'\x2039', '\x3', '\x2', '\x2', '\x2', '\x2039', '\x204B', '\x3', '\x2', 
		'\x2', '\x2', '\x203A', '\x203B', '\a', '\x114', '\x2', '\x2', '\x203B', 
		'\x2040', '\t', '\x81', '\x2', '\x2', '\x203C', '\x203D', '\a', '\x2EE', 
		'\x2', '\x2', '\x203D', '\x203E', '\x5', '\x37A', '\x1BE', '\x2', '\x203E', 
		'\x203F', '\a', '\x2EF', '\x2', '\x2', '\x203F', '\x2041', '\x3', '\x2', 
		'\x2', '\x2', '\x2040', '\x203C', '\x3', '\x2', '\x2', '\x2', '\x2040', 
		'\x2041', '\x3', '\x2', '\x2', '\x2', '\x2041', '\x2042', '\x3', '\x2', 
		'\x2', '\x2', '\x2042', '\x2043', '\a', '\x26A', '\x2', '\x2', '\x2043', 
		'\x2048', '\t', '\x82', '\x2', '\x2', '\x2044', '\x2045', '\a', '\x2EE', 
		'\x2', '\x2', '\x2045', '\x2046', '\x5', '\x37A', '\x1BE', '\x2', '\x2046', 
		'\x2047', '\a', '\x2EF', '\x2', '\x2', '\x2047', '\x2049', '\x3', '\x2', 
		'\x2', '\x2', '\x2048', '\x2044', '\x3', '\x2', '\x2', '\x2', '\x2048', 
		'\x2049', '\x3', '\x2', '\x2', '\x2', '\x2049', '\x204B', '\x3', '\x2', 
		'\x2', '\x2', '\x204A', '\x202B', '\x3', '\x2', '\x2', '\x2', '\x204A', 
		'\x203A', '\x3', '\x2', '\x2', '\x2', '\x204B', '\x451', '\x3', '\x2', 
		'\x2', '\x2', '\x204C', '\x204D', '\a', '\x2EE', '\x2', '\x2', '\x204D', 
		'\x2050', '\x5', '\x4A0', '\x251', '\x2', '\x204E', '\x204F', '\a', '\x2F4', 
		'\x2', '\x2', '\x204F', '\x2051', '\x5', '\x4A0', '\x251', '\x2', '\x2050', 
		'\x204E', '\x3', '\x2', '\x2', '\x2', '\x2050', '\x2051', '\x3', '\x2', 
		'\x2', '\x2', '\x2051', '\x2053', '\x3', '\x2', '\x2', '\x2', '\x2052', 
		'\x2054', '\t', '\x83', '\x2', '\x2', '\x2053', '\x2052', '\x3', '\x2', 
		'\x2', '\x2', '\x2053', '\x2054', '\x3', '\x2', '\x2', '\x2', '\x2054', 
		'\x2055', '\x3', '\x2', '\x2', '\x2', '\x2055', '\x2056', '\a', '\x2EF', 
		'\x2', '\x2', '\x2056', '\x453', '\x3', '\x2', '\x2', '\x2', '\x2057', 
		'\x2094', '\a', '\x34', '\x2', '\x2', '\x2058', '\x2094', '\a', '\x1C3', 
		'\x2', '\x2', '\x2059', '\x2094', '\a', '\x166', '\x2', '\x2', '\x205A', 
		'\x2094', '\a', '\x33', '\x2', '\x2', '\x205B', '\x2094', '\a', '\x32', 
		'\x2', '\x2', '\x205C', '\x2094', '\a', '\x167', '\x2', '\x2', '\x205D', 
		'\x2094', '\a', '\x1C7', '\x2', '\x2', '\x205E', '\x2094', '\a', '\x1C6', 
		'\x2', '\x2', '\x205F', '\x2094', '\a', '\x227', '\x2', '\x2', '\x2060', 
		'\x2094', '\a', '\x228', '\x2', '\x2', '\x2061', '\x2094', '\a', '\x18E', 
		'\x2', '\x2', '\x2062', '\x2094', '\a', '\x87', '\x2', '\x2', '\x2063', 
		'\x2094', '\a', '\x112', '\x2', '\x2', '\x2064', '\x2094', '\a', '\x116', 
		'\x2', '\x2', '\x2065', '\x2094', '\a', '\x18D', '\x2', '\x2', '\x2066', 
		'\x2094', '\a', '\x22D', '\x2', '\x2', '\x2067', '\x2094', '\a', '\x18C', 
		'\x2', '\x2', '\x2068', '\x2094', '\a', '\x88', '\x2', '\x2', '\x2069', 
		'\x206B', '\a', '\xA3', '\x2', '\x2', '\x206A', '\x206C', '\a', '\x1CA', 
		'\x2', '\x2', '\x206B', '\x206A', '\x3', '\x2', '\x2', '\x2', '\x206B', 
		'\x206C', '\x3', '\x2', '\x2', '\x2', '\x206C', '\x2094', '\x3', '\x2', 
		'\x2', '\x2', '\x206D', '\x2094', '\a', '\xD5', '\x2', '\x2', '\x206E', 
		'\x2094', '\a', '\x1DF', '\x2', '\x2', '\x206F', '\x2094', '\a', '\x16A', 
		'\x2', '\x2', '\x2070', '\x2072', '\a', '\x142', '\x2', '\x2', '\x2071', 
		'\x2073', '\a', '\x1DC', '\x2', '\x2', '\x2072', '\x2071', '\x3', '\x2', 
		'\x2', '\x2', '\x2072', '\x2073', '\x3', '\x2', '\x2', '\x2', '\x2073', 
		'\x2094', '\x3', '\x2', '\x2', '\x2', '\x2074', '\x2094', '\a', 'K', '\x2', 
		'\x2', '\x2075', '\x2094', '\a', 'J', '\x2', '\x2', '\x2076', '\x2094', 
		'\a', '\x28E', '\x2', '\x2', '\x2077', '\x2094', '\a', '\x28F', '\x2', 
		'\x2', '\x2078', '\x2094', '\a', '\x240', '\x2', '\x2', '\x2079', '\x2094', 
		'\a', '\x1DC', '\x2', '\x2', '\x207A', '\x2094', '\a', '\x39', '\x2', 
		'\x2', '\x207B', '\x2094', '\a', '\x7F', '\x2', '\x2', '\x207C', '\x2094', 
		'\a', '\x204', '\x2', '\x2', '\x207D', '\x2094', '\a', '\x285', '\x2', 
		'\x2', '\x207E', '\x2094', '\a', '\x2B7', '\x2', '\x2', '\x207F', '\x2094', 
		'\a', '\x160', '\x2', '\x2', '\x2080', '\x2094', '\a', '\x80', '\x2', 
		'\x2', '\x2081', '\x2094', '\a', '\xF2', '\x2', '\x2', '\x2082', '\x2094', 
		'\a', '\x159', '\x2', '\x2', '\x2083', '\x2094', '\a', '\x212', '\x2', 
		'\x2', '\x2084', '\x2094', '\a', '\x263', '\x2', '\x2', '\x2085', '\x2094', 
		'\a', '\x264', '\x2', '\x2', '\x2086', '\x2094', '\a', '\x265', '\x2', 
		'\x2', '\x2087', '\x2094', '\a', '\x262', '\x2', '\x2', '\x2088', '\x2094', 
		'\a', '\x25E', '\x2', '\x2', '\x2089', '\x2094', '\a', '\x260', '\x2', 
		'\x2', '\x208A', '\x2094', '\a', '\x25F', '\x2', '\x2', '\x208B', '\x2094', 
		'\a', '\x25D', '\x2', '\x2', '\x208C', '\x2094', '\a', '\x2B9', '\x2', 
		'\x2', '\x208D', '\x2094', '\a', '\xA5', '\x2', '\x2', '\x208E', '\x2094', 
		'\a', '/', '\x2', '\x2', '\x208F', '\x2094', '\a', '\x35', '\x2', '\x2', 
		'\x2090', '\x2094', '\a', 'R', '\x2', '\x2', '\x2091', '\x2094', '\a', 
		'\x16B', '\x2', '\x2', '\x2092', '\x2094', '\a', '\x15B', '\x2', '\x2', 
		'\x2093', '\x2057', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2058', '\x3', 
		'\x2', '\x2', '\x2', '\x2093', '\x2059', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x205A', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x205B', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x205C', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x205D', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x205E', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x205F', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2060', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2061', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2062', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2063', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2064', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2065', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2066', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2067', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2068', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2069', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x206D', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x206E', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x206F', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2070', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2074', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2075', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2076', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2077', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2078', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2079', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x207A', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x207B', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x207C', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x207D', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x207E', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x207F', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2080', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2081', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2082', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2083', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2084', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2085', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2086', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2087', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2088', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2089', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x208A', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x208B', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x208C', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x208D', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x208E', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x208F', '\x3', '\x2', '\x2', '\x2', '\x2093', 
		'\x2090', '\x3', '\x2', '\x2', '\x2', '\x2093', '\x2091', '\x3', '\x2', 
		'\x2', '\x2', '\x2093', '\x2092', '\x3', '\x2', '\x2', '\x2', '\x2094', 
		'\x455', '\x3', '\x2', '\x2', '\x2', '\x2095', '\x2099', '\a', '\x2F8', 
		'\x2', '\x2', '\x2096', '\x2097', '\a', '\x2FF', '\x2', '\x2', '\x2097', 
		'\x2099', '\a', '\x2E8', '\x2', '\x2', '\x2098', '\x2095', '\x3', '\x2', 
		'\x2', '\x2', '\x2098', '\x2096', '\x3', '\x2', '\x2', '\x2', '\x2099', 
		'\x20A2', '\x3', '\x2', '\x2', '\x2', '\x209A', '\x209C', '\a', '\x103', 
		'\x2', '\x2', '\x209B', '\x209A', '\x3', '\x2', '\x2', '\x2', '\x209B', 
		'\x209C', '\x3', '\x2', '\x2', '\x2', '\x209C', '\x20A0', '\x3', '\x2', 
		'\x2', '\x2', '\x209D', '\x20A1', '\a', '\x2F8', '\x2', '\x2', '\x209E', 
		'\x209F', '\a', '\x2FF', '\x2', '\x2', '\x209F', '\x20A1', '\a', '\x2E8', 
		'\x2', '\x2', '\x20A0', '\x209D', '\x3', '\x2', '\x2', '\x2', '\x20A0', 
		'\x209E', '\x3', '\x2', '\x2', '\x2', '\x20A1', '\x20A3', '\x3', '\x2', 
		'\x2', '\x2', '\x20A2', '\x209B', '\x3', '\x2', '\x2', '\x2', '\x20A2', 
		'\x20A3', '\x3', '\x2', '\x2', '\x2', '\x20A3', '\x20A8', '\x3', '\x2', 
		'\x2', '\x2', '\x20A4', '\x20A5', '\a', '\x2E7', '\x2', '\x2', '\x20A5', 
		'\x20A7', '\x5', '\x45A', '\x22E', '\x2', '\x20A6', '\x20A4', '\x3', '\x2', 
		'\x2', '\x2', '\x20A7', '\x20AA', '\x3', '\x2', '\x2', '\x2', '\x20A8', 
		'\x20A6', '\x3', '\x2', '\x2', '\x2', '\x20A8', '\x20A9', '\x3', '\x2', 
		'\x2', '\x2', '\x20A9', '\x457', '\x3', '\x2', '\x2', '\x2', '\x20AA', 
		'\x20A8', '\x3', '\x2', '\x2', '\x2', '\x20AB', '\x20B0', '\x5', '\x45A', 
		'\x22E', '\x2', '\x20AC', '\x20AD', '\a', '\x2E7', '\x2', '\x2', '\x20AD', 
		'\x20AF', '\x5', '\x45A', '\x22E', '\x2', '\x20AE', '\x20AC', '\x3', '\x2', 
		'\x2', '\x2', '\x20AF', '\x20B2', '\x3', '\x2', '\x2', '\x2', '\x20B0', 
		'\x20AE', '\x3', '\x2', '\x2', '\x2', '\x20B0', '\x20B1', '\x3', '\x2', 
		'\x2', '\x2', '\x20B1', '\x459', '\x3', '\x2', '\x2', '\x2', '\x20B2', 
		'\x20B0', '\x3', '\x2', '\x2', '\x2', '\x20B3', '\x20B4', '\a', '\x306', 
		'\x2', '\x2', '\x20B4', '\x20B6', '\x5', '\x494', '\x24B', '\x2', '\x20B5', 
		'\x20B3', '\x3', '\x2', '\x2', '\x2', '\x20B5', '\x20B6', '\x3', '\x2', 
		'\x2', '\x2', '\x20B6', '\x20B7', '\x3', '\x2', '\x2', '\x2', '\x20B7', 
		'\x20BA', '\x5', '\x48E', '\x248', '\x2', '\x20B8', '\x20B9', '\a', '\x2F6', 
		'\x2', '\x2', '\x20B9', '\x20BB', '\x5', '\x40E', '\x208', '\x2', '\x20BA', 
		'\x20B8', '\x3', '\x2', '\x2', '\x2', '\x20BA', '\x20BB', '\x3', '\x2', 
		'\x2', '\x2', '\x20BB', '\x20BD', '\x3', '\x2', '\x2', '\x2', '\x20BC', 
		'\x20BE', '\x5', '\x3EA', '\x1F6', '\x2', '\x20BD', '\x20BC', '\x3', '\x2', 
		'\x2', '\x2', '\x20BD', '\x20BE', '\x3', '\x2', '\x2', '\x2', '\x20BE', 
		'\x20C0', '\x3', '\x2', '\x2', '\x2', '\x20BF', '\x20C1', '\x5', '\x446', 
		'\x224', '\x2', '\x20C0', '\x20BF', '\x3', '\x2', '\x2', '\x2', '\x20C0', 
		'\x20C1', '\x3', '\x2', '\x2', '\x2', '\x20C1', '\x45B', '\x3', '\x2', 
		'\x2', '\x2', '\x20C2', '\x20C3', '\a', '\x306', '\x2', '\x2', '\x20C3', 
		'\x20C5', '\x5', '\x494', '\x24B', '\x2', '\x20C4', '\x20C2', '\x3', '\x2', 
		'\x2', '\x2', '\x20C4', '\x20C5', '\x3', '\x2', '\x2', '\x2', '\x20C5', 
		'\x20C6', '\x3', '\x2', '\x2', '\x2', '\x20C6', '\x20C7', '\x5', '\x48E', 
		'\x248', '\x2', '\x20C7', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x20C8', 
		'\x20CA', '\a', '\xE', '\x2', '\x2', '\x20C9', '\x20CB', '\a', '\x1D1', 
		'\x2', '\x2', '\x20CA', '\x20C9', '\x3', '\x2', '\x2', '\x2', '\x20CA', 
		'\x20CB', '\x3', '\x2', '\x2', '\x2', '\x20CB', '\x20EA', '\x3', '\x2', 
		'\x2', '\x2', '\x20CC', '\x20EA', '\a', '\x10', '\x2', '\x2', '\x20CD', 
		'\x20EA', '\a', '\x86', '\x2', '\x2', '\x20CE', '\x20EA', '\a', '\x94', 
		'\x2', '\x2', '\x20CF', '\x20EA', '\a', '\xC2', '\x2', '\x2', '\x20D0', 
		'\x20EA', '\a', '\xD3', '\x2', '\x2', '\x20D1', '\x20D2', '\a', '\xD3', 
		'\x2', '\x2', '\x20D2', '\x20EA', '\a', '\x17', '\x2', '\x2', '\x20D3', 
		'\x20EA', '\a', '\x100', '\x2', '\x2', '\x20D4', '\x20D5', '\a', '\x106', 
		'\x2', '\x2', '\x20D5', '\x20EA', '\a', '\x1D1', '\x2', '\x2', '\x20D6', 
		'\x20EA', '\a', '\x10F', '\x2', '\x2', '\x20D7', '\x20D8', '\a', '\x121', 
		'\x2', '\x2', '\x20D8', '\x20EA', '\a', '\x218', '\x2', '\x2', '\x20D9', 
		'\x20DA', '\a', '\x154', '\x2', '\x2', '\x20DA', '\x20EA', '\a', '\x296', 
		'\x2', '\x2', '\x20DB', '\x20DC', '\a', '\x198', '\x2', '\x2', '\x20DC', 
		'\x20DD', '\a', '[', '\x2', '\x2', '\x20DD', '\x20EA', '\a', '\x1E7', 
		'\x2', '\x2', '\x20DE', '\x20DF', '\a', '\x1D8', '\x2', '\x2', '\x20DF', 
		'\x20EA', '\a', '\x1FD', '\x2', '\x2', '\x20E0', '\x20EA', '\a', '\x1DD', 
		'\x2', '\x2', '\x20E1', '\x20EA', '\a', '\x1E4', '\x2', '\x2', '\x20E2', 
		'\x20EA', '\a', '\x216', '\x2', '\x2', '\x20E3', '\x20E4', '\a', '\x26E', 
		'\x2', '\x2', '\x20E4', '\x20EA', '\a', '\x236', '\x2', '\x2', '\x20E5', 
		'\x20EA', '\a', '\x278', '\x2', '\x2', '\x20E6', '\x20EA', '\a', '\x283', 
		'\x2', '\x2', '\x20E7', '\x20EA', '\a', '\x289', '\x2', '\x2', '\x20E8', 
		'\x20EA', '\a', '\x2A4', '\x2', '\x2', '\x20E9', '\x20C8', '\x3', '\x2', 
		'\x2', '\x2', '\x20E9', '\x20CC', '\x3', '\x2', '\x2', '\x2', '\x20E9', 
		'\x20CD', '\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20CE', '\x3', '\x2', 
		'\x2', '\x2', '\x20E9', '\x20CF', '\x3', '\x2', '\x2', '\x2', '\x20E9', 
		'\x20D0', '\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20D1', '\x3', '\x2', 
		'\x2', '\x2', '\x20E9', '\x20D3', '\x3', '\x2', '\x2', '\x2', '\x20E9', 
		'\x20D4', '\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20D6', '\x3', '\x2', 
		'\x2', '\x2', '\x20E9', '\x20D7', '\x3', '\x2', '\x2', '\x2', '\x20E9', 
		'\x20D9', '\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20DB', '\x3', '\x2', 
		'\x2', '\x2', '\x20E9', '\x20DE', '\x3', '\x2', '\x2', '\x2', '\x20E9', 
		'\x20E0', '\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20E1', '\x3', '\x2', 
		'\x2', '\x2', '\x20E9', '\x20E2', '\x3', '\x2', '\x2', '\x2', '\x20E9', 
		'\x20E3', '\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20E5', '\x3', '\x2', 
		'\x2', '\x2', '\x20E9', '\x20E6', '\x3', '\x2', '\x2', '\x2', '\x20E9', 
		'\x20E7', '\x3', '\x2', '\x2', '\x2', '\x20E9', '\x20E8', '\x3', '\x2', 
		'\x2', '\x2', '\x20EA', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x20EB', 
		'\x20EC', '\a', '\xE', '\x2', '\x2', '\x20EC', '\x2232', '\a', '\x1D1', 
		'\x2', '\x2', '\x20ED', '\x2232', '\a', '\t', '\x2', '\x2', '\x20EE', 
		'\x20F0', '\a', '\a', '\x2', '\x2', '\x20EF', '\x20F1', '\a', '\x14', 
		'\x2', '\x2', '\x20F0', '\x20EF', '\x3', '\x2', '\x2', '\x2', '\x20F0', 
		'\x20F1', '\x3', '\x2', '\x2', '\x2', '\x20F1', '\x20F2', '\x3', '\x2', 
		'\x2', '\x2', '\x20F2', '\x20F3', '\a', '\x236', '\x2', '\x2', '\x20F3', 
		'\x20F4', '\a', '\x275', '\x2', '\x2', '\x20F4', '\x2232', '\a', '\x21F', 
		'\x2', '\x2', '\x20F5', '\x20F6', '\t', '\x84', '\x2', '\x2', '\x20F6', 
		'\x20F7', '\a', '\x14', '\x2', '\x2', '\x20F7', '\x20F8', '\a', '\x236', 
		'\x2', '\x2', '\x20F8', '\x2232', '\a', '\x1D4', '\x2', '\x2', '\x20F9', 
		'\x20FA', '\a', '\a', '\x2', '\x2', '\x20FA', '\x20FB', '\a', '\x236', 
		'\x2', '\x2', '\x20FB', '\x20FC', '\a', '\x147', '\x2', '\x2', '\x20FC', 
		'\x2232', '\a', '\x18F', '\x2', '\x2', '\x20FD', '\x20FF', '\a', 'r', 
		'\x2', '\x2', '\x20FE', '\x2100', '\a', '\x14', '\x2', '\x2', '\x20FF', 
		'\x20FE', '\x3', '\x2', '\x2', '\x2', '\x20FF', '\x2100', '\x3', '\x2', 
		'\x2', '\x2', '\x2100', '\x2101', '\x3', '\x2', '\x2', '\x2', '\x2101', 
		'\x2232', '\a', 'T', '\x2', '\x2', '\x2102', '\x2103', '\t', '\x85', '\x2', 
		'\x2', '\x2103', '\x2104', '\a', '\x14', '\x2', '\x2', '\x2104', '\x2232', 
		'\a', 'T', '\x2', '\x2', '\x2105', '\x2106', '\t', '\x86', '\x2', '\x2', 
		'\x2106', '\x2107', '\a', '\x14', '\x2', '\x2', '\x2107', '\x2232', '\a', 
		'k', '\x2', '\x2', '\x2108', '\x2109', '\a', '\xC3', '\x2', '\x2', '\x2109', 
		'\x210A', '\a', '\x1E2', '\x2', '\x2', '\x210A', '\x2232', '\a', '\x1C5', 
		'\x2', '\x2', '\x210B', '\x210C', '\a', '\x10', '\x2', '\x2', '\x210C', 
		'\x2232', '\a', '|', '\x2', '\x2', '\x210D', '\x210F', '\t', '\x87', '\x2', 
		'\x2', '\x210E', '\x2110', '\a', '\x1D6', '\x2', '\x2', '\x210F', '\x210E', 
		'\x3', '\x2', '\x2', '\x2', '\x210F', '\x2110', '\x3', '\x2', '\x2', '\x2', 
		'\x2110', '\x2111', '\x3', '\x2', '\x2', '\x2', '\x2111', '\x2112', '\a', 
		'|', '\x2', '\x2', '\x2112', '\x2232', '\a', '\x132', '\x2', '\x2', '\x2113', 
		'\x2114', '\a', '\xA4', '\x2', '\x2', '\x2114', '\x2115', '\a', '\x1D6', 
		'\x2', '\x2', '\x2115', '\x2116', '\a', '|', '\x2', '\x2', '\x2116', '\x2232', 
		'\a', '\x132', '\x2', '\x2', '\x2117', '\x2118', '\a', '\x86', '\x2', 
		'\x2', '\x2118', '\x2119', '\a', '\x63', '\x2', '\x2', '\x2119', '\x2232', 
		'\a', '\x21D', '\x2', '\x2', '\x211A', '\x211B', '\a', '\x86', '\x2', 
		'\x2', '\x211B', '\x211C', '\a', '\x14', '\x2', '\x2', '\x211C', '\x2232', 
		'\a', '\x1D2', '\x2', '\x2', '\x211D', '\x211E', '\a', '\x12', '\x2', 
		'\x2', '\x211E', '\x211F', '\a', '\x14', '\x2', '\x2', '\x211F', '\x2232', 
		'\a', '\x98', '\x2', '\x2', '\x2120', '\x2122', '\a', 'r', '\x2', '\x2', 
		'\x2121', '\x2123', '\a', '\x14', '\x2', '\x2', '\x2122', '\x2121', '\x3', 
		'\x2', '\x2', '\x2', '\x2122', '\x2123', '\x3', '\x2', '\x2', '\x2', '\x2123', 
		'\x2124', '\x3', '\x2', '\x2', '\x2', '\x2124', '\x2232', '\a', '\x99', 
		'\x2', '\x2', '\x2125', '\x2126', '\t', '\x85', '\x2', '\x2', '\x2126', 
		'\x2127', '\a', '\x14', '\x2', '\x2', '\x2127', '\x2232', '\a', '\x99', 
		'\x2', '\x2', '\x2128', '\x2129', '\t', '\x86', '\x2', '\x2', '\x2129', 
		'\x212A', '\a', '\x14', '\x2', '\x2', '\x212A', '\x2232', '\a', '\x9A', 
		'\x2', '\x2', '\x212B', '\x212C', '\t', '\x86', '\x2', '\x2', '\x212C', 
		'\x212D', '\a', '\x14', '\x2', '\x2', '\x212D', '\x2232', '\a', '\xA9', 
		'\x2', '\x2', '\x212E', '\x2133', '\a', '\xD3', '\x2', '\x2', '\x212F', 
		'\x2130', '\a', '\x17', '\x2', '\x2', '\x2130', '\x2134', '\a', '\a', 
		'\x2', '\x2', '\x2131', '\x2132', '\a', '\x14', '\x2', '\x2', '\x2132', 
		'\x2134', '\a', '\x254', '\x2', '\x2', '\x2133', '\x212F', '\x3', '\x2', 
		'\x2', '\x2', '\x2133', '\x2131', '\x3', '\x2', '\x2', '\x2', '\x2134', 
		'\x2232', '\x3', '\x2', '\x2', '\x2', '\x2135', '\x2136', '\t', '\x84', 
		'\x2', '\x2', '\x2136', '\x2137', '\a', '\x14', '\x2', '\x2', '\x2137', 
		'\x2232', '\a', '\x100', '\x2', '\x2', '\x2138', '\x213A', '\a', 'r', 
		'\x2', '\x2', '\x2139', '\x213B', '\a', '\x14', '\x2', '\x2', '\x213A', 
		'\x2139', '\x3', '\x2', '\x2', '\x2', '\x213A', '\x213B', '\x3', '\x2', 
		'\x2', '\x2', '\x213B', '\x213C', '\x3', '\x2', '\x2', '\x2', '\x213C', 
		'\x2232', '\a', '\x102', '\x2', '\x2', '\x213D', '\x213E', '\t', '\x88', 
		'\x2', '\x2', '\x213E', '\x213F', '\a', '\x14', '\x2', '\x2', '\x213F', 
		'\x2232', '\a', '\x102', '\x2', '\x2', '\x2140', '\x2142', '\a', 'r', 
		'\x2', '\x2', '\x2141', '\x2143', '\t', '\x89', '\x2', '\x2', '\x2142', 
		'\x2141', '\x3', '\x2', '\x2', '\x2', '\x2142', '\x2143', '\x3', '\x2', 
		'\x2', '\x2', '\x2143', '\x2144', '\x3', '\x2', '\x2', '\x2', '\x2144', 
		'\x2232', '\a', '\x11E', '\x2', '\x2', '\x2145', '\x2146', '\a', '\xC2', 
		'\x2', '\x2', '\x2146', '\x2147', '\a', '\x14', '\x2', '\x2', '\x2147', 
		'\x2232', '\t', '\x8A', '\x2', '\x2', '\x2148', '\x2149', '\a', '\x146', 
		'\x2', '\x2', '\x2149', '\x2232', '\a', '\x20C', '\x2', '\x2', '\x214A', 
		'\x214B', '\a', '\a', '\x2', '\x2', '\x214B', '\x214C', '\a', '\x122', 
		'\x2', '\x2', '\x214C', '\x2232', '\a', '\x147', '\x2', '\x2', '\x214D', 
		'\x214F', '\a', 'r', '\x2', '\x2', '\x214E', '\x2150', '\a', '\x14', '\x2', 
		'\x2', '\x214F', '\x214E', '\x3', '\x2', '\x2', '\x2', '\x214F', '\x2150', 
		'\x3', '\x2', '\x2', '\x2', '\x2150', '\x2151', '\x3', '\x2', '\x2', '\x2', 
		'\x2151', '\x2232', '\a', '\x12B', '\x2', '\x2', '\x2152', '\x2153', '\t', 
		'\x88', '\x2', '\x2', '\x2153', '\x2154', '\a', '\x14', '\x2', '\x2', 
		'\x2154', '\x2232', '\a', '\x12B', '\x2', '\x2', '\x2155', '\x2232', '\a', 
		'\x13F', '\x2', '\x2', '\x2156', '\x2158', '\a', 'r', '\x2', '\x2', '\x2157', 
		'\x2159', '\a', '\x14', '\x2', '\x2', '\x2158', '\x2157', '\x3', '\x2', 
		'\x2', '\x2', '\x2158', '\x2159', '\x3', '\x2', '\x2', '\x2', '\x2159', 
		'\x215A', '\x3', '\x2', '\x2', '\x2', '\x215A', '\x215B', '\a', '\x14C', 
		'\x2', '\x2', '\x215B', '\x2232', '\a', '\x296', '\x2', '\x2', '\x215C', 
		'\x215D', '\t', '\x85', '\x2', '\x2', '\x215D', '\x215E', '\a', '\x14', 
		'\x2', '\x2', '\x215E', '\x215F', '\a', '\x14C', '\x2', '\x2', '\x215F', 
		'\x2232', '\a', '\x296', '\x2', '\x2', '\x2160', '\x2162', '\a', '\xE4', 
		'\x2', '\x2', '\x2161', '\x2160', '\x3', '\x2', '\x2', '\x2', '\x2161', 
		'\x2162', '\x3', '\x2', '\x2', '\x2', '\x2162', '\x2163', '\x3', '\x2', 
		'\x2', '\x2', '\x2163', '\x2164', '\a', '\x1D8', '\x2', '\x2', '\x2164', 
		'\x2232', '\a', '\x1FD', '\x2', '\x2', '\x2165', '\x2166', '\a', '\x198', 
		'\x2', '\x2', '\x2166', '\x2167', '\a', '[', '\x2', '\x2', '\x2167', '\x2232', 
		'\a', '\x1E7', '\x2', '\x2', '\x2168', '\x216A', '\a', 'r', '\x2', '\x2', 
		'\x2169', '\x216B', '\a', '\x14', '\x2', '\x2', '\x216A', '\x2169', '\x3', 
		'\x2', '\x2', '\x2', '\x216A', '\x216B', '\x3', '\x2', '\x2', '\x2', '\x216B', 
		'\x216C', '\x3', '\x2', '\x2', '\x2', '\x216C', '\x216D', '\a', '\x157', 
		'\x2', '\x2', '\x216D', '\x2232', '\a', '\x15C', '\x2', '\x2', '\x216E', 
		'\x216F', '\t', '\x8B', '\x2', '\x2', '\x216F', '\x2170', '\a', '\x14', 
		'\x2', '\x2', '\x2170', '\x2171', '\a', '\x157', '\x2', '\x2', '\x2171', 
		'\x2232', '\a', '\x15C', '\x2', '\x2', '\x2172', '\x2174', '\a', 'r', 
		'\x2', '\x2', '\x2173', '\x2175', '\a', '\x14', '\x2', '\x2', '\x2174', 
		'\x2173', '\x3', '\x2', '\x2', '\x2', '\x2174', '\x2175', '\x3', '\x2', 
		'\x2', '\x2', '\x2175', '\x2176', '\x3', '\x2', '\x2', '\x2', '\x2176', 
		'\x2232', '\a', 'v', '\x2', '\x2', '\x2177', '\x2178', '\t', '\x8C', '\x2', 
		'\x2', '\x2178', '\x2179', '\a', '\x14', '\x2', '\x2', '\x2179', '\x2232', 
		'\a', 'v', '\x2', '\x2', '\x217A', '\x217C', '\a', 'r', '\x2', '\x2', 
		'\x217B', '\x217D', '\a', '\x14', '\x2', '\x2', '\x217C', '\x217B', '\x3', 
		'\x2', '\x2', '\x2', '\x217C', '\x217D', '\x3', '\x2', '\x2', '\x2', '\x217D', 
		'\x217E', '\x3', '\x2', '\x2', '\x2', '\x217E', '\x217F', '\a', '\x14F', 
		'\x2', '\x2', '\x217F', '\x2232', '\a', '\xD6', '\x2', '\x2', '\x2180', 
		'\x2181', '\t', '\x8D', '\x2', '\x2', '\x2181', '\x2182', '\a', '\x14', 
		'\x2', '\x2', '\x2182', '\x2183', '\a', '\x14F', '\x2', '\x2', '\x2183', 
		'\x2232', '\a', '\xD6', '\x2', '\x2', '\x2184', '\x2186', '\a', 'r', '\x2', 
		'\x2', '\x2185', '\x2187', '\a', '\x14', '\x2', '\x2', '\x2186', '\x2185', 
		'\x3', '\x2', '\x2', '\x2', '\x2186', '\x2187', '\x3', '\x2', '\x2', '\x2', 
		'\x2187', '\x2188', '\x3', '\x2', '\x2', '\x2', '\x2188', '\x2189', '\a', 
		'v', '\x2', '\x2', '\x2189', '\x2232', '\a', '\x99', '\x2', '\x2', '\x218A', 
		'\x218B', '\t', '\x8E', '\x2', '\x2', '\x218B', '\x218C', '\a', '\x14', 
		'\x2', '\x2', '\x218C', '\x218D', '\a', 'v', '\x2', '\x2', '\x218D', '\x2232', 
		'\a', '\x99', '\x2', '\x2', '\x218E', '\x2190', '\a', 'r', '\x2', '\x2', 
		'\x218F', '\x2191', '\a', '\x14', '\x2', '\x2', '\x2190', '\x218F', '\x3', 
		'\x2', '\x2', '\x2', '\x2190', '\x2191', '\x3', '\x2', '\x2', '\x2', '\x2191', 
		'\x2192', '\x3', '\x2', '\x2', '\x2', '\x2192', '\x2193', '\a', 'v', '\x2', 
		'\x2', '\x2193', '\x2194', '\a', '=', '\x2', '\x2', '\x2194', '\x2232', 
		'\a', '\x1D3', '\x2', '\x2', '\x2195', '\x2196', '\t', '\x8F', '\x2', 
		'\x2', '\x2196', '\x2197', '\a', '\x14', '\x2', '\x2', '\x2197', '\x2198', 
		'\a', 'v', '\x2', '\x2', '\x2198', '\x2199', '\a', '=', '\x2', '\x2', 
		'\x2199', '\x2232', '\a', '\x1D3', '\x2', '\x2', '\x219A', '\x219C', '\a', 
		'r', '\x2', '\x2', '\x219B', '\x219D', '\a', '\x14', '\x2', '\x2', '\x219C', 
		'\x219B', '\x3', '\x2', '\x2', '\x2', '\x219C', '\x219D', '\x3', '\x2', 
		'\x2', '\x2', '\x219D', '\x219E', '\x3', '\x2', '\x2', '\x2', '\x219E', 
		'\x2232', '\a', '\x19A', '\x2', '\x2', '\x219F', '\x21A0', '\t', '\x88', 
		'\x2', '\x2', '\x21A0', '\x21A1', '\a', '\x14', '\x2', '\x2', '\x21A1', 
		'\x2232', '\a', '\x19A', '\x2', '\x2', '\x21A2', '\x21A3', '\t', '\x84', 
		'\x2', '\x2', '\x21A3', '\x21A4', '\a', '\x14', '\x2', '\x2', '\x21A4', 
		'\x2232', '\a', '\x1A4', '\x2', '\x2', '\x21A5', '\x21A6', '\a', 'r', 
		'\x2', '\x2', '\x21A6', '\x21A7', '\a', '\x1C4', '\x2', '\x2', '\x21A7', 
		'\x2232', '\a', '|', '\x2', '\x2', '\x21A8', '\x21A9', '\a', '\x21F', 
		'\x2', '\x2', '\x21A9', '\x2232', '\a', 'h', '\x2', '\x2', '\x21AA', '\x21AC', 
		'\a', 'r', '\x2', '\x2', '\x21AB', '\x21AD', '\a', '\x14', '\x2', '\x2', 
		'\x21AC', '\x21AB', '\x3', '\x2', '\x2', '\x2', '\x21AC', '\x21AD', '\x3', 
		'\x2', '\x2', '\x2', '\x21AD', '\x21AE', '\x3', '\x2', '\x2', '\x2', '\x21AE', 
		'\x2232', '\a', '\x1D2', '\x2', '\x2', '\x21AF', '\x21B0', '\t', '\x88', 
		'\x2', '\x2', '\x21B0', '\x21B1', '\a', '\x14', '\x2', '\x2', '\x21B1', 
		'\x2232', '\a', '\x1D2', '\x2', '\x2', '\x21B2', '\x21B3', '\t', '\x84', 
		'\x2', '\x2', '\x21B3', '\x2232', '\a', '\x1D4', '\x2', '\x2', '\x21B4', 
		'\x21B5', '\a', 'r', '\x2', '\x2', '\x21B5', '\x2232', '\a', '\x1FF', 
		'\x2', '\x2', '\x21B6', '\x21B7', '\t', '\x90', '\x2', '\x2', '\x21B7', 
		'\x21B8', '\a', '\x14', '\x2', '\x2', '\x21B8', '\x2232', '\a', '\x1FF', 
		'\x2', '\x2', '\x21B9', '\x21BA', '\t', '\x84', '\x2', '\x2', '\x21BA', 
		'\x21BB', '\a', '\x201', '\x2', '\x2', '\x21BB', '\x2232', '\a', '\x215', 
		'\x2', '\x2', '\x21BC', '\x21BE', '\a', 'r', '\x2', '\x2', '\x21BD', '\x21BF', 
		'\a', '\x14', '\x2', '\x2', '\x21BE', '\x21BD', '\x3', '\x2', '\x2', '\x2', 
		'\x21BE', '\x21BF', '\x3', '\x2', '\x2', '\x2', '\x21BF', '\x21C0', '\x3', 
		'\x2', '\x2', '\x2', '\x21C0', '\x2232', '\a', '\x218', '\x2', '\x2', 
		'\x21C1', '\x21C2', '\t', '\x91', '\x2', '\x2', '\x21C2', '\x21C3', '\a', 
		'\x14', '\x2', '\x2', '\x21C3', '\x2232', '\a', '\x218', '\x2', '\x2', 
		'\x21C4', '\x21C5', '\t', '\x92', '\x2', '\x2', '\x21C5', '\x2232', '\a', 
		'\x21D', '\x2', '\x2', '\x21C6', '\x21C7', '\a', '\x10', '\x2', '\x2', 
		'\x21C7', '\x21C8', '\a', '\x1F0', '\x2', '\x2', '\x21C8', '\x2232', '\a', 
		'p', '\x2', '\x2', '\x21C9', '\x21CB', '\a', 'r', '\x2', '\x2', '\x21CA', 
		'\x21CC', '\a', '\x14', '\x2', '\x2', '\x21CB', '\x21CA', '\x3', '\x2', 
		'\x2', '\x2', '\x21CB', '\x21CC', '\x3', '\x2', '\x2', '\x2', '\x21CC', 
		'\x21CD', '\x3', '\x2', '\x2', '\x2', '\x21CD', '\x21CE', '\a', '\x236', 
		'\x2', '\x2', '\x21CE', '\x21CF', '\a', '\x26F', '\x2', '\x2', '\x21CF', 
		'\x2232', '\a', '\x1D4', '\x2', '\x2', '\x21D0', '\x21D1', '\t', '\x93', 
		'\x2', '\x2', '\x21D1', '\x21D2', '\a', '\x14', '\x2', '\x2', '\x21D2', 
		'\x21D3', '\a', '\x236', '\x2', '\x2', '\x21D3', '\x21D4', '\a', '\x26F', 
		'\x2', '\x2', '\x21D4', '\x2232', '\a', '\x1D4', '\x2', '\x2', '\x21D5', 
		'\x21D6', '\a', '\x26E', '\x2', '\x2', '\x21D6', '\x21D7', '\a', '\x14', 
		'\x2', '\x2', '\x21D7', '\x2232', '\a', '\x236', '\x2', '\x2', '\x21D8', 
		'\x21DA', '\a', 'r', '\x2', '\x2', '\x21D9', '\x21DB', '\a', '\x14', '\x2', 
		'\x2', '\x21DA', '\x21D9', '\x3', '\x2', '\x2', '\x2', '\x21DA', '\x21DB', 
		'\x3', '\x2', '\x2', '\x2', '\x21DB', '\x21DC', '\x3', '\x2', '\x2', '\x2', 
		'\x21DC', '\x2232', '\a', '\x249', '\x2', '\x2', '\x21DD', '\x21DE', '\a', 
		'\xA4', '\x2', '\x2', '\x21DE', '\x21DF', '\a', '\x14', '\x2', '\x2', 
		'\x21DF', '\x2232', '\a', '\x249', '\x2', '\x2', '\x21E0', '\x21E1', '\t', 
		'\x86', '\x2', '\x2', '\x21E1', '\x21E2', '\a', '\x1D6', '\x2', '\x2', 
		'\x21E2', '\x2232', '\a', '\x249', '\x2', '\x2', '\x21E3', '\x21E5', '\a', 
		'r', '\x2', '\x2', '\x21E4', '\x21E6', '\a', '\x14', '\x2', '\x2', '\x21E5', 
		'\x21E4', '\x3', '\x2', '\x2', '\x2', '\x21E5', '\x21E6', '\x3', '\x2', 
		'\x2', '\x2', '\x21E6', '\x21E7', '\x3', '\x2', '\x2', '\x2', '\x21E7', 
		'\x2232', '\a', '\x254', '\x2', '\x2', '\x21E8', '\x21E9', '\t', '\x94', 
		'\x2', '\x2', '\x21E9', '\x21EA', '\a', '\x14', '\x2', '\x2', '\x21EA', 
		'\x2232', '\a', '\x254', '\x2', '\x2', '\x21EB', '\x21EC', '\t', '\x95', 
		'\x2', '\x2', '\x21EC', '\x2232', '\a', '\x252', '\x2', '\x2', '\x21ED', 
		'\x21EF', '\a', 'r', '\x2', '\x2', '\x21EE', '\x21F0', '\a', '\x14', '\x2', 
		'\x2', '\x21EF', '\x21EE', '\x3', '\x2', '\x2', '\x2', '\x21EF', '\x21F0', 
		'\x3', '\x2', '\x2', '\x2', '\x21F0', '\x21F1', '\x3', '\x2', '\x2', '\x2', 
		'\x21F1', '\x2232', '\a', '\x271', '\x2', '\x2', '\x21F2', '\x21F3', '\t', 
		'\x85', '\x2', '\x2', '\x21F3', '\x21F4', '\a', '\x14', '\x2', '\x2', 
		'\x21F4', '\x2232', '\a', '\x271', '\x2', '\x2', '\x21F5', '\x21F6', '\a', 
		'\a', '\x2', '\x2', '\x21F6', '\x21F7', '\a', '|', '\x2', '\x2', '\x21F7', 
		'\x2232', '\a', '\x271', '\x2', '\x2', '\x21F8', '\x21FA', '\a', 'r', 
		'\x2', '\x2', '\x21F9', '\x21FB', '\a', '\x14', '\x2', '\x2', '\x21FA', 
		'\x21F9', '\x3', '\x2', '\x2', '\x2', '\x21FA', '\x21FB', '\x3', '\x2', 
		'\x2', '\x2', '\x21FB', '\x21FC', '\x3', '\x2', '\x2', '\x2', '\x21FC', 
		'\x2232', '\a', '\x276', '\x2', '\x2', '\x21FD', '\x21FE', '\t', '\x96', 
		'\x2', '\x2', '\x21FE', '\x21FF', '\a', '\x14', '\x2', '\x2', '\x21FF', 
		'\x2232', '\a', '\x276', '\x2', '\x2', '\x2200', '\x2201', '\t', '\x84', 
		'\x2', '\x2', '\x2201', '\x2232', '\a', '\x288', '\x2', '\x2', '\x2202', 
		'\x2204', '\a', 'r', '\x2', '\x2', '\x2203', '\x2205', '\a', '\x14', '\x2', 
		'\x2', '\x2204', '\x2203', '\x3', '\x2', '\x2', '\x2', '\x2204', '\x2205', 
		'\x3', '\x2', '\x2', '\x2', '\x2205', '\x2206', '\x3', '\x2', '\x2', '\x2', 
		'\x2206', '\x2232', '\a', '\x296', '\x2', '\x2', '\x2207', '\x2208', '\t', 
		'\x97', '\x2', '\x2', '\x2208', '\x2209', '\a', '\x14', '\x2', '\x2', 
		'\x2209', '\x2232', '\a', '\x296', '\x2', '\x2', '\x220A', '\x220B', '\t', 
		'\x98', '\x2', '\x2', '\x220B', '\x2232', '\a', '\x14', '\x2', '\x2', 
		'\x220C', '\x220D', '\a', '+', '\x2', '\x2', '\x220D', '\x2232', '\a', 
		'\x288', '\x2', '\x2', '\x220E', '\x220F', '\a', 'I', '\x2', '\x2', '\x220F', 
		'\x2232', '\a', '\x186', '\x2', '\x2', '\x2210', '\x2211', '\a', '\xC3', 
		'\x2', '\x2', '\x2211', '\x2212', '\a', '\x3', '\x2', '\x2', '\x2212', 
		'\x2232', '\a', '\x1C5', '\x2', '\x2', '\x2213', '\x2215', '\a', '\xDA', 
		'\x2', '\x2', '\x2214', '\x2216', '\a', '\x14', '\x2', '\x2', '\x2215', 
		'\x2214', '\x3', '\x2', '\x2', '\x2', '\x2215', '\x2216', '\x3', '\x2', 
		'\x2', '\x2', '\x2216', '\x2217', '\x3', '\x2', '\x2', '\x2', '\x2217', 
		'\x2232', '\a', '\x26D', '\x2', '\x2', '\x2218', '\x2219', '\a', '\xE7', 
		'\x2', '\x2', '\x2219', '\x221B', '\a', '\x14', '\x2', '\x2', '\x221A', 
		'\x221C', '\a', '\x18F', '\x2', '\x2', '\x221B', '\x221A', '\x3', '\x2', 
		'\x2', '\x2', '\x221B', '\x221C', '\x3', '\x2', '\x2', '\x2', '\x221C', 
		'\x221D', '\x3', '\x2', '\x2', '\x2', '\x221D', '\x2232', '\a', '\x1D0', 
		'\x2', '\x2', '\x221E', '\x221F', '\a', '\x106', '\x2', '\x2', '\x221F', 
		'\x2220', '\a', '\x14', '\x2', '\x2', '\x2220', '\x2232', '\a', '\x1D1', 
		'\x2', '\x2', '\x2221', '\x2222', '\a', '\x121', '\x2', '\x2', '\x2222', 
		'\x2223', '\a', '\x7F', '\x2', '\x2', '\x2223', '\x2232', '\a', '\x261', 
		'\x2', '\x2', '\x2224', '\x2225', '\a', '\x121', '\x2', '\x2', '\x2225', 
		'\x2232', '\a', '\x24E', '\x2', '\x2', '\x2226', '\x2227', '\a', '\x1D7', 
		'\x2', '\x2', '\x2227', '\x2232', '\a', '\x82', '\x2', '\x2', '\x2228', 
		'\x2232', '\a', '\x1F6', '\x2', '\x2', '\x2229', '\x222A', '\a', '\x216', 
		'\x2', '\x2', '\x222A', '\x222B', '\a', '\x14', '\x2', '\x2', '\x222B', 
		'\x2232', '\t', '\x99', '\x2', '\x2', '\x222C', '\x2232', '\a', '\x24A', 
		'\x2', '\x2', '\x222D', '\x2232', '\a', '\x24C', '\x2', '\x2', '\x222E', 
		'\x2232', '\a', '\x24D', '\x2', '\x2', '\x222F', '\x2232', '\a', '\x24F', 
		'\x2', '\x2', '\x2230', '\x2232', '\a', '\x250', '\x2', '\x2', '\x2231', 
		'\x20EB', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x20ED', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x20EE', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x20F5', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x20F9', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x20FD', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2102', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2105', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2108', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x210B', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x210D', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2113', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2117', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x211A', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x211D', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2120', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2125', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2128', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x212B', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x212E', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2135', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2138', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x213D', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2140', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2145', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2148', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x214A', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x214D', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2152', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2155', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2156', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x215C', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2161', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2165', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2168', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x216E', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2172', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2177', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x217A', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2180', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2184', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x218A', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x218E', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2195', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x219A', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x219F', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21A2', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21A5', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21A8', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21AA', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21AF', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21B2', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21B4', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21B6', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21B9', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21BC', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21C1', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21C4', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21C6', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21C9', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21D0', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21D5', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21D8', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21DD', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21E0', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21E3', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21E8', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21EB', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21ED', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21F2', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x21F5', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x21F8', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x21FD', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2200', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2202', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2207', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x220A', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x220C', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x220E', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2210', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2213', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2218', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x221E', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2221', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2224', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x2226', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2228', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x2229', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x222C', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x222D', '\x3', '\x2', '\x2', '\x2', '\x2231', 
		'\x222E', '\x3', '\x2', '\x2', '\x2', '\x2231', '\x222F', '\x3', '\x2', 
		'\x2', '\x2', '\x2231', '\x2230', '\x3', '\x2', '\x2', '\x2', '\x2232', 
		'\x461', '\x3', '\x2', '\x2', '\x2', '\x2233', '\x2236', '\x5', '\x466', 
		'\x234', '\x2', '\x2234', '\x2236', '\x5', '\x292', '\x14A', '\x2', '\x2235', 
		'\x2233', '\x3', '\x2', '\x2', '\x2', '\x2235', '\x2234', '\x3', '\x2', 
		'\x2', '\x2', '\x2236', '\x463', '\x3', '\x2', '\x2', '\x2', '\x2237', 
		'\x2238', '\a', '\x7F', '\x2', '\x2', '\x2238', '\x223B', '\x5', '\x4A4', 
		'\x253', '\x2', '\x2239', '\x223B', '\x5', '\x292', '\x14A', '\x2', '\x223A', 
		'\x2237', '\x3', '\x2', '\x2', '\x2', '\x223A', '\x2239', '\x3', '\x2', 
		'\x2', '\x2', '\x223B', '\x465', '\x3', '\x2', '\x2', '\x2', '\x223C', 
		'\x223F', '\a', '\x25E', '\x2', '\x2', '\x223D', '\x2240', '\x5', '\x4A4', 
		'\x253', '\x2', '\x223E', '\x2240', '\x5', '\x456', '\x22C', '\x2', '\x223F', 
		'\x223D', '\x3', '\x2', '\x2', '\x2', '\x223F', '\x223E', '\x3', '\x2', 
		'\x2', '\x2', '\x2240', '\x2245', '\x3', '\x2', '\x2', '\x2', '\x2241', 
		'\x2242', '\a', '\x1C', '\x2', '\x2', '\x2242', '\x2243', '\a', '\x261', 
		'\x2', '\x2', '\x2243', '\x2244', '\a', '\x2BB', '\x2', '\x2', '\x2244', 
		'\x2246', '\x5', '\x4A4', '\x253', '\x2', '\x2245', '\x2241', '\x3', '\x2', 
		'\x2', '\x2', '\x2245', '\x2246', '\x3', '\x2', '\x2', '\x2', '\x2246', 
		'\x227B', '\x3', '\x2', '\x2', '\x2', '\x2247', '\x224B', '\a', '\x114', 
		'\x2', '\x2', '\x2248', '\x224C', '\x5', '\x4A4', '\x253', '\x2', '\x2249', 
		'\x224C', '\x5', '\x456', '\x22C', '\x2', '\x224A', '\x224C', '\x5', '\x45A', 
		'\x22E', '\x2', '\x224B', '\x2248', '\x3', '\x2', '\x2', '\x2', '\x224B', 
		'\x2249', '\x3', '\x2', '\x2', '\x2', '\x224B', '\x224A', '\x3', '\x2', 
		'\x2', '\x2', '\x224C', '\x224D', '\x3', '\x2', '\x2', '\x2', '\x224D', 
		'\x225B', '\t', '\x9A', '\x2', '\x2', '\x224E', '\x2251', '\a', '\x2EE', 
		'\x2', '\x2', '\x224F', '\x2252', '\a', '\x2E8', '\x2', '\x2', '\x2250', 
		'\x2252', '\x5', '\x456', '\x22C', '\x2', '\x2251', '\x224F', '\x3', '\x2', 
		'\x2', '\x2', '\x2251', '\x2250', '\x3', '\x2', '\x2', '\x2', '\x2252', 
		'\x2258', '\x3', '\x2', '\x2', '\x2', '\x2253', '\x2256', '\a', '\x2F4', 
		'\x2', '\x2', '\x2254', '\x2257', '\a', '\x2E8', '\x2', '\x2', '\x2255', 
		'\x2257', '\x5', '\x456', '\x22C', '\x2', '\x2256', '\x2254', '\x3', '\x2', 
		'\x2', '\x2', '\x2256', '\x2255', '\x3', '\x2', '\x2', '\x2', '\x2257', 
		'\x2259', '\x3', '\x2', '\x2', '\x2', '\x2258', '\x2253', '\x3', '\x2', 
		'\x2', '\x2', '\x2258', '\x2259', '\x3', '\x2', '\x2', '\x2', '\x2259', 
		'\x225A', '\x3', '\x2', '\x2', '\x2', '\x225A', '\x225C', '\a', '\x2EF', 
		'\x2', '\x2', '\x225B', '\x224E', '\x3', '\x2', '\x2', '\x2', '\x225B', 
		'\x225C', '\x3', '\x2', '\x2', '\x2', '\x225C', '\x226C', '\x3', '\x2', 
		'\x2', '\x2', '\x225D', '\x226A', '\a', '\x26A', '\x2', '\x2', '\x225E', 
		'\x226B', '\a', '\x80', '\x2', '\x2', '\x225F', '\x226B', '\a', '\xF2', 
		'\x2', '\x2', '\x2260', '\x226B', '\a', '\x159', '\x2', '\x2', '\x2261', 
		'\x2268', '\a', '\x212', '\x2', '\x2', '\x2262', '\x2265', '\a', '\x2EE', 
		'\x2', '\x2', '\x2263', '\x2266', '\a', '\x2E8', '\x2', '\x2', '\x2264', 
		'\x2266', '\x5', '\x456', '\x22C', '\x2', '\x2265', '\x2263', '\x3', '\x2', 
		'\x2', '\x2', '\x2265', '\x2264', '\x3', '\x2', '\x2', '\x2', '\x2266', 
		'\x2267', '\x3', '\x2', '\x2', '\x2', '\x2267', '\x2269', '\a', '\x2EF', 
		'\x2', '\x2', '\x2268', '\x2262', '\x3', '\x2', '\x2', '\x2', '\x2268', 
		'\x2269', '\x3', '\x2', '\x2', '\x2', '\x2269', '\x226B', '\x3', '\x2', 
		'\x2', '\x2', '\x226A', '\x225E', '\x3', '\x2', '\x2', '\x2', '\x226A', 
		'\x225F', '\x3', '\x2', '\x2', '\x2', '\x226A', '\x2260', '\x3', '\x2', 
		'\x2', '\x2', '\x226A', '\x2261', '\x3', '\x2', '\x2', '\x2', '\x226B', 
		'\x226D', '\x3', '\x2', '\x2', '\x2', '\x226C', '\x225D', '\x3', '\x2', 
		'\x2', '\x2', '\x226C', '\x226D', '\x3', '\x2', '\x2', '\x2', '\x226D', 
		'\x227B', '\x3', '\x2', '\x2', '\x2', '\x226E', '\x227B', '\x5', '\x4A0', 
		'\x251', '\x2', '\x226F', '\x2270', '\a', '\x7F', '\x2', '\x2', '\x2270', 
		'\x227B', '\x5', '\x4A4', '\x253', '\x2', '\x2271', '\x227B', '\x5', '\x4A4', 
		'\x253', '\x2', '\x2272', '\x227B', '\a', '\x18A', '\x2', '\x2', '\x2273', 
		'\x227B', '\a', '\x272', '\x2', '\x2', '\x2274', '\x227B', '\a', '\xCD', 
		'\x2', '\x2', '\x2275', '\x227B', '\a', '\x84', '\x2', '\x2', '\x2276', 
		'\x227B', '\a', '\x21E', '\x2', '\x2', '\x2277', '\x227B', '\a', '\x15A', 
		'\x2', '\x2', '\x2278', '\x227B', '\a', '\x14E', '\x2', '\x2', '\x2279', 
		'\x227B', '\a', '\x8E', '\x2', '\x2', '\x227A', '\x223C', '\x3', '\x2', 
		'\x2', '\x2', '\x227A', '\x2247', '\x3', '\x2', '\x2', '\x2', '\x227A', 
		'\x226E', '\x3', '\x2', '\x2', '\x2', '\x227A', '\x226F', '\x3', '\x2', 
		'\x2', '\x2', '\x227A', '\x2271', '\x3', '\x2', '\x2', '\x2', '\x227A', 
		'\x2272', '\x3', '\x2', '\x2', '\x2', '\x227A', '\x2273', '\x3', '\x2', 
		'\x2', '\x2', '\x227A', '\x2274', '\x3', '\x2', '\x2', '\x2', '\x227A', 
		'\x2275', '\x3', '\x2', '\x2', '\x2', '\x227A', '\x2276', '\x3', '\x2', 
		'\x2', '\x2', '\x227A', '\x2277', '\x3', '\x2', '\x2', '\x2', '\x227A', 
		'\x2278', '\x3', '\x2', '\x2', '\x2', '\x227A', '\x2279', '\x3', '\x2', 
		'\x2', '\x2', '\x227B', '\x467', '\x3', '\x2', '\x2', '\x2', '\x227C', 
		'\x227D', '\a', '\x306', '\x2', '\x2', '\x227D', '\x227F', '\x5', '\x494', 
		'\x24B', '\x2', '\x227E', '\x227C', '\x3', '\x2', '\x2', '\x2', '\x227E', 
		'\x227F', '\x3', '\x2', '\x2', '\x2', '\x227F', '\x2280', '\x3', '\x2', 
		'\x2', '\x2', '\x2280', '\x2281', '\x5', '\x48C', '\x247', '\x2', '\x2281', 
		'\x469', '\x3', '\x2', '\x2', '\x2', '\x2282', '\x2283', '\x5', '\x468', 
		'\x235', '\x2', '\x2283', '\x46B', '\x3', '\x2', '\x2', '\x2', '\x2284', 
		'\x2285', '\x5', '\x468', '\x235', '\x2', '\x2285', '\x46D', '\x3', '\x2', 
		'\x2', '\x2', '\x2286', '\x2287', '\x5', '\x468', '\x235', '\x2', '\x2287', 
		'\x46F', '\x3', '\x2', '\x2', '\x2', '\x2288', '\x2289', '\x5', '\x468', 
		'\x235', '\x2', '\x2289', '\x471', '\x3', '\x2', '\x2', '\x2', '\x228A', 
		'\x228B', '\x5', '\x468', '\x235', '\x2', '\x228B', '\x473', '\x3', '\x2', 
		'\x2', '\x2', '\x228C', '\x228D', '\x5', '\x468', '\x235', '\x2', '\x228D', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x228E', '\x228F', '\x5', '\x468', 
		'\x235', '\x2', '\x228F', '\x477', '\x3', '\x2', '\x2', '\x2', '\x2290', 
		'\x2291', '\x5', '\x468', '\x235', '\x2', '\x2291', '\x479', '\x3', '\x2', 
		'\x2', '\x2', '\x2292', '\x2293', '\x5', '\x468', '\x235', '\x2', '\x2293', 
		'\x47B', '\x3', '\x2', '\x2', '\x2', '\x2294', '\x2295', '\x5', '\x468', 
		'\x235', '\x2', '\x2295', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x2296', 
		'\x2297', '\x5', '\x468', '\x235', '\x2', '\x2297', '\x47F', '\x3', '\x2', 
		'\x2', '\x2', '\x2298', '\x2299', '\x5', '\x468', '\x235', '\x2', '\x2299', 
		'\x481', '\x3', '\x2', '\x2', '\x2', '\x229A', '\x229B', '\x5', '\x468', 
		'\x235', '\x2', '\x229B', '\x483', '\x3', '\x2', '\x2', '\x2', '\x229C', 
		'\x22A1', '\x5', '\x468', '\x235', '\x2', '\x229D', '\x229E', '\a', '\x2E7', 
		'\x2', '\x2', '\x229E', '\x22A0', '\x5', '\x48C', '\x247', '\x2', '\x229F', 
		'\x229D', '\x3', '\x2', '\x2', '\x2', '\x22A0', '\x22A3', '\x3', '\x2', 
		'\x2', '\x2', '\x22A1', '\x229F', '\x3', '\x2', '\x2', '\x2', '\x22A1', 
		'\x22A2', '\x3', '\x2', '\x2', '\x2', '\x22A2', '\x485', '\x3', '\x2', 
		'\x2', '\x2', '\x22A3', '\x22A1', '\x3', '\x2', '\x2', '\x2', '\x22A4', 
		'\x22A5', '\x5', '\x484', '\x243', '\x2', '\x22A5', '\x487', '\x3', '\x2', 
		'\x2', '\x2', '\x22A6', '\x22A7', '\x5', '\x484', '\x243', '\x2', '\x22A7', 
		'\x489', '\x3', '\x2', '\x2', '\x2', '\x22A8', '\x22A9', '\x5', '\x484', 
		'\x243', '\x2', '\x22A9', '\x48B', '\x3', '\x2', '\x2', '\x2', '\x22AA', 
		'\x22AD', '\x5', '\x498', '\x24D', '\x2', '\x22AB', '\x22AD', '\a', '\x2EB', 
		'\x2', '\x2', '\x22AC', '\x22AA', '\x3', '\x2', '\x2', '\x2', '\x22AC', 
		'\x22AB', '\x3', '\x2', '\x2', '\x2', '\x22AD', '\x48D', '\x3', '\x2', 
		'\x2', '\x2', '\x22AE', '\x22B3', '\x5', '\x48C', '\x247', '\x2', '\x22AF', 
		'\x22B0', '\a', '\x2E7', '\x2', '\x2', '\x22B0', '\x22B2', '\x5', '\x48C', 
		'\x247', '\x2', '\x22B1', '\x22AF', '\x3', '\x2', '\x2', '\x2', '\x22B2', 
		'\x22B5', '\x3', '\x2', '\x2', '\x2', '\x22B3', '\x22B1', '\x3', '\x2', 
		'\x2', '\x2', '\x22B3', '\x22B4', '\x3', '\x2', '\x2', '\x2', '\x22B4', 
		'\x48F', '\x3', '\x2', '\x2', '\x2', '\x22B5', '\x22B3', '\x3', '\x2', 
		'\x2', '\x2', '\x22B6', '\x22B7', '\x5', '\x48E', '\x248', '\x2', '\x22B7', 
		'\x491', '\x3', '\x2', '\x2', '\x2', '\x22B8', '\x22B9', '\x5', '\x48E', 
		'\x248', '\x2', '\x22B9', '\x493', '\x3', '\x2', '\x2', '\x2', '\x22BA', 
		'\x22BB', '\x5', '\x48E', '\x248', '\x2', '\x22BB', '\x495', '\x3', '\x2', 
		'\x2', '\x2', '\x22BC', '\x22BD', '\a', '\x2EE', '\x2', '\x2', '\x22BD', 
		'\x22BE', '\a', '\x2F2', '\x2', '\x2', '\x22BE', '\x22BF', '\a', '\x2EF', 
		'\x2', '\x2', '\x22BF', '\x497', '\x3', '\x2', '\x2', '\x2', '\x22C0', 
		'\x22C1', '\t', '\x9B', '\x2', '\x2', '\x22C1', '\x499', '\x3', '\x2', 
		'\x2', '\x2', '\x22C2', '\x22C3', '\t', '\x9C', '\x2', '\x2', '\x22C3', 
		'\x49B', '\x3', '\x2', '\x2', '\x2', '\x22C4', '\x22C5', '\t', '\x9D', 
		'\x2', '\x2', '\x22C5', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x22C6', 
		'\x22C9', '\x5', '\x4A0', '\x251', '\x2', '\x22C7', '\x22C9', '\x5', '\x4A2', 
		'\x252', '\x2', '\x22C8', '\x22C6', '\x3', '\x2', '\x2', '\x2', '\x22C8', 
		'\x22C7', '\x3', '\x2', '\x2', '\x2', '\x22C9', '\x49F', '\x3', '\x2', 
		'\x2', '\x2', '\x22CA', '\x22CC', '\a', '\x2F2', '\x2', '\x2', '\x22CB', 
		'\x22CA', '\x3', '\x2', '\x2', '\x2', '\x22CB', '\x22CC', '\x3', '\x2', 
		'\x2', '\x2', '\x22CC', '\x22CD', '\x3', '\x2', '\x2', '\x2', '\x22CD', 
		'\x22D0', '\a', '\x2E8', '\x2', '\x2', '\x22CE', '\x22D0', '\a', '\x2E9', 
		'\x2', '\x2', '\x22CF', '\x22CB', '\x3', '\x2', '\x2', '\x2', '\x22CF', 
		'\x22CE', '\x3', '\x2', '\x2', '\x2', '\x22D0', '\x4A1', '\x3', '\x2', 
		'\x2', '\x2', '\x22D1', '\x22D2', '\a', '\x2F3', '\x2', '\x2', '\x22D2', 
		'\x22D3', '\a', '\x2E8', '\x2', '\x2', '\x22D3', '\x4A3', '\x3', '\x2', 
		'\x2', '\x2', '\x22D4', '\x22D5', '\t', '\x9E', '\x2', '\x2', '\x22D5', 
		'\x4A5', '\x3', '\x2', '\x2', '\x2', '\x4E8', '\x4A8', '\x4AB', '\x4AF', 
		'\x4D8', '\x4E4', '\x4E9', '\x4EE', '\x4F5', '\x4FB', '\x500', '\x504', 
		'\x50C', '\x50E', '\x512', '\x516', '\x519', '\x51D', '\x522', '\x528', 
		'\x531', '\x534', '\x53A', '\x543', '\x550', '\x555', '\x55F', '\x562', 
		'\x567', '\x56C', '\x573', '\x579', '\x57D', '\x583', '\x588', '\x58F', 
		'\x596', '\x59D', '\x5A2', '\x5A6', '\x5B2', '\x5BC', '\x5C1', '\x5CD', 
		'\x5D2', '\x5D7', '\x5DA', '\x5E7', '\x5F3', '\x5F8', '\x5FD', '\x609', 
		'\x60E', '\x616', '\x618', '\x61C', '\x620', '\x623', '\x627', '\x62C', 
		'\x638', '\x63D', '\x641', '\x644', '\x649', '\x650', '\x65A', '\x65F', 
		'\x662', '\x666', '\x669', '\x66E', '\x680', '\x685', '\x68A', '\x68C', 
		'\x693', '\x69A', '\x69D', '\x6A0', '\x6A3', '\x6AE', '\x6BA', '\x6BE', 
		'\x6C1', '\x6CA', '\x6D2', '\x6DA', '\x6DD', '\x6E4', '\x6E7', '\x6EA', 
		'\x6EF', '\x6F4', '\x71D', '\x739', '\x740', '\x745', '\x74C', '\x757', 
		'\x75F', '\x763', '\x76F', '\x772', '\x778', '\x77B', '\x780', '\x785', 
		'\x789', '\x793', '\x79D', '\x7A3', '\x7AE', '\x7B3', '\x7B7', '\x7BF', 
		'\x7C7', '\x7CC', '\x7CF', '\x7D1', '\x7D4', '\x7DD', '\x7E2', '\x7E9', 
		'\x7EC', '\x7EF', '\x7F3', '\x7F6', '\x7FE', '\x803', '\x808', '\x80F', 
		'\x819', '\x829', '\x82F', '\x839', '\x843', '\x84A', '\x84D', '\x852', 
		'\x85C', '\x861', '\x868', '\x86B', '\x870', '\x873', '\x876', '\x887', 
		'\x88C', '\x895', '\x898', '\x89D', '\x8A0', '\x8A7', '\x8AA', '\x8B1', 
		'\x8B6', '\x8BA', '\x8BF', '\x8C4', '\x8CE', '\x8D4', '\x8DE', '\x8E3', 
		'\x8EA', '\x8F0', '\x8F4', '\x8F7', '\x8FA', '\x90B', '\x910', '\x918', 
		'\x926', '\x92D', '\x93D', '\x947', '\x950', '\x956', '\x95B', '\x961', 
		'\x966', '\x96A', '\x973', '\x977', '\x98F', '\x991', '\x9A3', '\x9A5', 
		'\x9AA', '\x9AF', '\x9B4', '\x9B9', '\x9C3', '\x9CC', '\x9D5', '\x9DA', 
		'\x9DF', '\x9E4', '\x9E8', '\x9EB', '\x9F1', '\x9FF', '\xA04', '\xA06', 
		'\xA09', '\xA11', '\xA1E', '\xA20', '\xA24', '\xA2C', '\xA2E', '\xA30', 
		'\xA32', '\xA36', '\xA3B', '\xA45', '\xA50', '\xA52', '\xA5C', '\xA61', 
		'\xA65', '\xA69', '\xA6D', '\xA6F', '\xA72', '\xA76', '\xA7A', '\xA81', 
		'\xA86', '\xA88', '\xA8D', '\xA91', '\xA97', '\xA99', '\xA9D', '\xAA1', 
		'\xAA5', '\xAA9', '\xAAB', '\xAB0', '\xAB5', '\xABA', '\xABD', '\xAC8', 
		'\xACB', '\xACE', '\xAD3', '\xAD6', '\xADB', '\xAE0', '\xAE4', '\xAE8', 
		'\xAEC', '\xAF1', '\xAF5', '\xAF9', '\xB05', '\xB0A', '\xB0D', '\xB11', 
		'\xB15', '\xB1A', '\xB1E', '\xB24', '\xB2E', '\xB31', '\xB39', '\xB3C', 
		'\xB41', '\xB44', '\xB48', '\xB4E', '\xB51', '\xB5B', '\xB5D', '\xB67', 
		'\xB69', '\xB6D', '\xB72', '\xB74', '\xB76', '\xB7C', '\xB7E', '\xB8D', 
		'\xB8F', '\xB93', '\xB97', '\xB9D', '\xBAB', '\xBB0', '\xBB5', '\xBB9', 
		'\xBBB', '\xBC0', '\xBC7', '\xBCF', '\xBD8', '\xBE4', '\xBE9', '\xBED', 
		'\xBF8', '\xBFD', '\xC04', '\xC0A', '\xC0C', '\xC0E', '\xC11', '\xC16', 
		'\xC1A', '\xC1C', '\xC1E', '\xC21', '\xC25', '\xC2E', '\xC30', '\xC32', 
		'\xC35', '\xC3B', '\xC3D', '\xC3F', '\xC42', '\xC46', '\xC53', '\xC5B', 
		'\xC5E', '\xC61', '\xC66', '\xC69', '\xC6C', '\xC70', '\xC75', '\xC78', 
		'\xC7E', '\xC80', '\xC82', '\xC85', '\xC88', '\xC8E', '\xC90', '\xC92', 
		'\xC95', '\xC98', '\xC9C', '\xCAA', '\xCB2', '\xCBD', '\xCC2', '\xCC4', 
		'\xCCA', '\xCCE', '\xCD2', '\xCD7', '\xCDD', '\xCE0', '\xCE3', '\xCE6', 
		'\xCE9', '\xCEB', '\xCF2', '\xCF4', '\xCF8', '\xD04', '\xD06', '\xD0A', 
		'\xD0E', '\xD15', '\xD1D', '\xD1F', '\xD22', '\xD27', '\xD2B', '\xD2F', 
		'\xD33', '\xD36', '\xD3C', '\xD45', '\xD4C', '\xD52', '\xD58', '\xD5B', 
		'\xD5E', '\xD63', '\xD66', '\xD69', '\xD6D', '\xD72', '\xD80', '\xD84', 
		'\xD87', '\xD8E', '\xD92', '\xD98', '\xDA3', '\xDAF', '\xDB4', '\xDBA', 
		'\xDCB', '\xDCD', '\xDDC', '\xDDE', '\xDEB', '\xDEE', '\xDF1', '\xDFA', 
		'\xDFD', '\xE00', '\xE07', '\xE0D', '\xE12', '\xE16', '\xE19', '\xE1C', 
		'\xE22', '\xE27', '\xE2A', '\xE2E', '\xE32', '\xE35', '\xE3C', '\xE3F', 
		'\xE41', '\xE46', '\xE4C', '\xE52', '\xE5C', '\xE61', '\xE64', '\xE67', 
		'\xE70', '\xE78', '\xE7B', '\xE7E', '\xE81', '\xE84', '\xE87', '\xE8A', 
		'\xE91', '\xE94', '\xE97', '\xE9C', '\xEA0', '\xEA3', '\xEA7', '\xEAB', 
		'\xEB0', '\xEB5', '\xEBD', '\xEC1', '\xECB', '\xED7', '\xEDB', '\xEE6', 
		'\xEF2', '\xEF6', '\xEFE', '\xF01', '\xF05', '\xF0A', '\xF13', '\xF25', 
		'\xF2A', '\xF2F', '\xF3B', '\xF41', '\xF49', '\xF4D', '\xF51', '\xF55', 
		'\xF5E', '\xF63', '\xF67', '\xF6A', '\xF6C', '\xF72', '\xF76', '\xF7D', 
		'\xF84', '\xF88', '\xF8C', '\xF95', '\xF9C', '\xFB0', '\xFB8', '\xFC5', 
		'\xFC9', '\xFD2', '\xFD9', '\xFE6', '\xFEE', '\xFF6', '\xFFC', '\x1008', 
		'\x1010', '\x1018', '\x101E', '\x1022', '\x1026', '\x1029', '\x102D', 
		'\x1031', '\x1034', '\x1038', '\x103B', '\x103E', '\x104A', '\x104F', 
		'\x1052', '\x1055', '\x1058', '\x105C', '\x105F', '\x1062', '\x1066', 
		'\x1068', '\x106D', '\x106F', '\x107B', '\x107F', '\x108A', '\x108E', 
		'\x1092', '\x10AE', '\x10BD', '\x10C5', '\x10CD', '\x10D3', '\x10DF', 
		'\x10E3', '\x10EF', '\x10F1', '\x10F8', '\x10FD', '\x1105', '\x110B', 
		'\x1112', '\x1115', '\x1119', '\x1125', '\x1127', '\x112B', '\x1133', 
		'\x1137', '\x113C', '\x113F', '\x1144', '\x1146', '\x114B', '\x114F', 
		'\x1154', '\x1158', '\x115F', '\x1168', '\x1173', '\x117B', '\x1187', 
		'\x1189', '\x118F', '\x1192', '\x1194', '\x1197', '\x11AD', '\x11B3', 
		'\x11B6', '\x11BE', '\x11C4', '\x11C7', '\x11CA', '\x11CE', '\x11D1', 
		'\x11D6', '\x11DB', '\x11DE', '\x11E1', '\x11E4', '\x11E8', '\x11ED', 
		'\x11EF', '\x11F3', '\x11FB', '\x11FD', '\x1209', '\x1212', '\x1217', 
		'\x121A', '\x1222', '\x1229', '\x122D', '\x1231', '\x1242', '\x1254', 
		'\x1256', '\x125A', '\x1266', '\x126A', '\x1277', '\x127D', '\x1288', 
		'\x1292', '\x1296', '\x1298', '\x12AF', '\x12B6', '\x12B8', '\x12BE', 
		'\x12C1', '\x12C4', '\x12C9', '\x12D2', '\x12D4', '\x12DC', '\x12DE', 
		'\x12E2', '\x12E7', '\x12EA', '\x12EE', '\x12F1', '\x12F4', '\x12F8', 
		'\x12FE', '\x1301', '\x1304', '\x1309', '\x1313', '\x1319', '\x1323', 
		'\x1328', '\x1332', '\x1334', '\x133C', '\x1346', '\x1350', '\x1356', 
		'\x135C', '\x1361', '\x1367', '\x136A', '\x136E', '\x1373', '\x1376', 
		'\x1379', '\x137C', '\x1385', '\x1389', '\x138B', '\x139E', '\x13A5', 
		'\x13A7', '\x13AB', '\x13BE', '\x13C1', '\x13C4', '\x13CA', '\x13D1', 
		'\x13D6', '\x13E6', '\x13EB', '\x13F1', '\x13F8', '\x140B', '\x1415', 
		'\x1417', '\x141E', '\x1429', '\x1431', '\x1433', '\x1442', '\x144B', 
		'\x1450', '\x1454', '\x1457', '\x1465', '\x146D', '\x1471', '\x1474', 
		'\x147C', '\x1488', '\x148C', '\x1491', '\x1494', '\x14A1', '\x14A5', 
		'\x14AD', '\x14B2', '\x14B6', '\x14BA', '\x14BE', '\x14C4', '\x14C7', 
		'\x14CA', '\x14E5', '\x14EB', '\x14EF', '\x14FA', '\x1502', '\x1508', 
		'\x150C', '\x1515', '\x151E', '\x1523', '\x1528', '\x152E', '\x1532', 
		'\x1535', '\x153B', '\x153D', '\x1559', '\x155E', '\x1562', '\x1569', 
		'\x156D', '\x1571', '\x1575', '\x1581', '\x1585', '\x1593', '\x1599', 
		'\x15A0', '\x15A5', '\x15B0', '\x15B3', '\x15B9', '\x15BB', '\x15C4', 
		'\x15CE', '\x15D3', '\x15E2', '\x15E6', '\x15E9', '\x15ED', '\x15F0', 
		'\x15FE', '\x1600', '\x1604', '\x160C', '\x1613', '\x1618', '\x161A', 
		'\x161F', '\x1624', '\x162C', '\x1633', '\x1637', '\x163A', '\x1645', 
		'\x164B', '\x1654', '\x1657', '\x165D', '\x1662', '\x1668', '\x166D', 
		'\x166F', '\x1676', '\x1679', '\x1680', '\x168B', '\x1691', '\x1695', 
		'\x169B', '\x16A0', '\x16A2', '\x16A8', '\x16B3', '\x16B5', '\x16B7', 
		'\x16BA', '\x16BE', '\x16C1', '\x16C5', '\x16C9', '\x16CE', '\x16D9', 
		'\x16DD', '\x16E5', '\x16E8', '\x16ED', '\x16EF', '\x16F4', '\x16F9', 
		'\x16FD', '\x1703', '\x1707', '\x170A', '\x1712', '\x1715', '\x1719', 
		'\x171D', '\x1722', '\x1725', '\x1729', '\x172D', '\x1731', '\x1745', 
		'\x1749', '\x174D', '\x1753', '\x1757', '\x175C', '\x175E', '\x1761', 
		'\x1765', '\x1768', '\x176B', '\x176E', '\x1772', '\x177E', '\x1781', 
		'\x1784', '\x1789', '\x178F', '\x1794', '\x179A', '\x179E', '\x17A3', 
		'\x17AA', '\x17B0', '\x17B7', '\x17BA', '\x17BD', '\x17C1', '\x17C6', 
		'\x17CA', '\x17CC', '\x17D7', '\x17DE', '\x17E2', '\x17EC', '\x17F0', 
		'\x17F4', '\x17F9', '\x1804', '\x1809', '\x180F', '\x1814', '\x1817', 
		'\x181C', '\x181E', '\x1824', '\x1829', '\x182C', '\x1831', '\x1836', 
		'\x183F', '\x1844', '\x184A', '\x1850', '\x1855', '\x1859', '\x185B', 
		'\x1860', '\x1864', '\x186A', '\x186E', '\x1877', '\x187C', '\x187F', 
		'\x1885', '\x188A', '\x188C', '\x188E', '\x1893', '\x1898', '\x189D', 
		'\x18A5', '\x18AA', '\x18B1', '\x18B5', '\x18BE', '\x18C2', '\x18C7', 
		'\x18D2', '\x18D4', '\x18E4', '\x18E9', '\x18EF', '\x18F5', '\x1903', 
		'\x1908', '\x190E', '\x1911', '\x1914', '\x1918', '\x191D', '\x1926', 
		'\x1928', '\x192C', '\x192F', '\x1934', '\x1936', '\x193A', '\x1946', 
		'\x194F', '\x1953', '\x1958', '\x195C', '\x1960', '\x1965', '\x1968', 
		'\x1972', '\x1978', '\x197B', '\x197E', '\x1982', '\x1987', '\x1990', 
		'\x199A', '\x199E', '\x19A2', '\x19A5', '\x19A8', '\x19AD', '\x19B2', 
		'\x19B5', '\x19B8', '\x19BE', '\x19C1', '\x19C7', '\x19CA', '\x19CD', 
		'\x19D2', '\x19D5', '\x19DD', '\x19E3', '\x19E8', '\x19ED', '\x19F5', 
		'\x19FF', '\x1A03', '\x1A05', '\x1A08', '\x1A14', '\x1A18', '\x1A1B', 
		'\x1A2A', '\x1A2F', '\x1A33', '\x1A3A', '\x1A3D', '\x1A46', '\x1A4D', 
		'\x1A52', '\x1A56', '\x1A5E', '\x1A64', '\x1A6C', '\x1A6F', '\x1A78', 
		'\x1A7B', '\x1A7E', '\x1A87', '\x1A8D', '\x1A93', '\x1A95', '\x1AA2', 
		'\x1AA4', '\x1AAD', '\x1AAF', '\x1AB3', '\x1AB9', '\x1ABD', '\x1ACB', 
		'\x1AD1', '\x1ADC', '\x1AE7', '\x1AEB', '\x1AF2', '\x1AF7', '\x1AFB', 
		'\x1B00', '\x1B08', '\x1B0A', '\x1B10', '\x1B13', '\x1B1E', '\x1B23', 
		'\x1B2D', '\x1B2F', '\x1B31', '\x1B3A', '\x1B3D', '\x1B49', '\x1B4B', 
		'\x1B56', '\x1B5A', '\x1B5C', '\x1B63', '\x1B6F', '\x1B77', '\x1B82', 
		'\x1B8A', '\x1B91', '\x1B95', '\x1B99', '\x1B9E', '\x1BA2', '\x1BAA', 
		'\x1BAE', '\x1BB5', '\x1BBA', '\x1BC3', '\x1BCC', '\x1BCF', '\x1BE3', 
		'\x1BE7', '\x1BEA', '\x1BF1', '\x1BF4', '\x1BF8', '\x1BFB', '\x1C02', 
		'\x1C05', '\x1C0B', '\x1C0E', '\x1C12', '\x1C15', '\x1C1C', '\x1C21', 
		'\x1C2F', '\x1C36', '\x1C41', '\x1C4D', '\x1C51', '\x1C53', '\x1C5C', 
		'\x1C65', '\x1C69', '\x1C6D', '\x1C80', '\x1C83', '\x1C86', '\x1C8B', 
		'\x1C90', '\x1C95', '\x1C9E', '\x1CA1', '\x1CA3', '\x1CA7', '\x1CAE', 
		'\x1CB5', '\x1CBD', '\x1CCC', '\x1CD3', '\x1CDA', '\x1CDF', '\x1CED', 
		'\x1CF0', '\x1CF4', '\x1CFE', '\x1D0A', '\x1D0C', '\x1D13', '\x1D17', 
		'\x1D1E', '\x1D23', '\x1D2C', '\x1D3A', '\x1D42', '\x1D45', '\x1D4E', 
		'\x1D54', '\x1D67', '\x1D70', '\x1D75', '\x1D7A', '\x1D7F', '\x1D84', 
		'\x1D89', '\x1D8C', '\x1D91', '\x1D96', '\x1D9A', '\x1DA0', '\x1DA6', 
		'\x1DAF', '\x1DB4', '\x1DBC', '\x1DC0', '\x1DC5', '\x1DCB', '\x1DD2', 
		'\x1DD7', '\x1DDE', '\x1DE2', '\x1DE7', '\x1DEF', '\x1DF2', '\x1DF5', 
		'\x1DF8', '\x1DFC', '\x1E01', '\x1E06', '\x1E0A', '\x1E11', '\x1E16', 
		'\x1E1D', '\x1E21', '\x1E2C', '\x1E30', '\x1E32', '\x1E3D', '\x1E48', 
		'\x1E4D', '\x1E52', '\x1E54', '\x1E58', '\x1E5B', '\x1E5F', '\x1E6C', 
		'\x1E71', '\x1E75', '\x1E7A', '\x1E80', '\x1E84', '\x1E89', '\x1E8D', 
		'\x1E92', '\x1E97', '\x1E9A', '\x1E9D', '\x1EA2', '\x1EAB', '\x1EB3', 
		'\x1EB7', '\x1EC1', '\x1EC4', '\x1EC6', '\x1ED0', '\x1ED2', '\x1ED8', 
		'\x1EDE', '\x1EE0', '\x1EEE', '\x1EF0', '\x1EFB', '\x1F07', '\x1F0E', 
		'\x1F14', '\x1F1B', '\x1F24', '\x1F28', '\x1F2C', '\x1F31', '\x1F35', 
		'\x1F38', '\x1F3C', '\x1F43', '\x1F47', '\x1F4B', '\x1F50', '\x1F54', 
		'\x1F59', '\x1F5F', '\x1F63', '\x1F68', '\x1F6C', '\x1F71', '\x1F74', 
		'\x1F78', '\x1F7C', '\x1F84', '\x1FA5', '\x1FBA', '\x1FBF', '\x1FCF', 
		'\x1FD2', '\x1FD7', '\x1FE4', '\x1FE8', '\x1FEC', '\x1FF0', '\x1FF5', 
		'\x1FFC', '\x2001', '\x2003', '\x2005', '\x200E', '\x2012', '\x2016', 
		'\x2018', '\x201C', '\x2023', '\x2027', '\x2029', '\x202D', '\x2031', 
		'\x2038', '\x2040', '\x2048', '\x204A', '\x2050', '\x2053', '\x206B', 
		'\x2072', '\x2093', '\x2098', '\x209B', '\x20A0', '\x20A2', '\x20A8', 
		'\x20B0', '\x20B5', '\x20BA', '\x20BD', '\x20C0', '\x20C4', '\x20CA', 
		'\x20E9', '\x20F0', '\x20FF', '\x210F', '\x2122', '\x2133', '\x213A', 
		'\x2142', '\x214F', '\x2158', '\x2161', '\x216A', '\x2174', '\x217C', 
		'\x2186', '\x2190', '\x219C', '\x21AC', '\x21BE', '\x21CB', '\x21DA', 
		'\x21E5', '\x21EF', '\x21FA', '\x2204', '\x2215', '\x221B', '\x2231', 
		'\x2235', '\x223A', '\x223F', '\x2245', '\x224B', '\x2251', '\x2256', 
		'\x2258', '\x225B', '\x2265', '\x2268', '\x226A', '\x226C', '\x227A', 
		'\x227E', '\x22A1', '\x22AC', '\x22B3', '\x22C8', '\x22CB', '\x22CF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Oracle.Parser
